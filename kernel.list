
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <reset_handler>
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <undefined_handler>
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <swi_handler>
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <prefetch_handler>
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <data_handler>
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <unused_handler>
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <irq_handler>
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <fiq_handler>

00008020 <reset_handler>:
    8020:	00008040 	andeq	r8, r0, r0, asr #32

00008024 <undefined_handler>:
    8024:	0001541c 	andeq	r5, r1, ip, lsl r4

00008028 <swi_handler>:
    8028:	000104dc 	ldrdeq	r0, [r1], -ip

0000802c <prefetch_handler>:
    802c:	00015420 	andeq	r5, r1, r0, lsr #8

00008030 <data_handler>:
    8030:	00015424 	andeq	r5, r1, r4, lsr #8

00008034 <unused_handler>:
    8034:	00015428 	andeq	r5, r1, r8, lsr #8

00008038 <irq_handler>:
    8038:	00010594 	muleq	r1, r4, r5

0000803c <fiq_handler>:
    803c:	0001542c 	andeq	r5, r1, ip, lsr #8

00008040 <reset>:
    8040:	f10c00c0 	cpsid	if
    8044:	e10f0000 	mrs	r0, CPSR
    8048:	e200001f 	and	r0, r0, #31
    804c:	e3a0801a 	mov	r8, #26
    8050:	e1500008 	cmp	r0, r8
    8054:	0a000000 	beq	805c <overHyped>
    8058:	ea000006 	b	8078 <continueBoot>

0000805c <overHyped>:
    805c:	e59f1070 	ldr	r1, [pc, #112]	; 80d4 <zero_loop+0x14>
    8060:	e12ef301 	msr	ELR_hyp, r1
    8064:	e10f1000 	mrs	r1, CPSR
    8068:	e201101f 	and	r1, r1, #31
    806c:	e3811013 	orr	r1, r1, #19
    8070:	e16ef301 	msr	SPSR_hyp, r1
    8074:	e160006e 	eret

00008078 <continueBoot>:
    8078:	e3a00902 	mov	r0, #32768	; 0x8000
    807c:	e3a01000 	mov	r1, #0
    8080:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8084:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8088:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    808c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8090:	e3a000d2 	mov	r0, #210	; 0xd2
    8094:	e121f000 	msr	CPSR_c, r0
    8098:	e3a0d902 	mov	sp, #32768	; 0x8000
    809c:	e3a000d1 	mov	r0, #209	; 0xd1
    80a0:	e121f000 	msr	CPSR_c, r0
    80a4:	e3a0d901 	mov	sp, #16384	; 0x4000
    80a8:	e3a000d3 	mov	r0, #211	; 0xd3
    80ac:	e121f000 	msr	CPSR_c, r0
    80b0:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    80b4:	e59f001c 	ldr	r0, [pc, #28]	; 80d8 <zero_loop+0x18>
    80b8:	e59f101c 	ldr	r1, [pc, #28]	; 80dc <zero_loop+0x1c>
    80bc:	e3a02000 	mov	r2, #0

000080c0 <zero_loop>:
    80c0:	e1500001 	cmp	r0, r1
    80c4:	b4802004 	strlt	r2, [r0], #4
    80c8:	bafffffc 	blt	80c0 <zero_loop>
    80cc:	eb003181 	bl	146d8 <DisableInterrupts>
    80d0:	ea003503 	b	154e4 <main>
    80d4:	00008078 	andeq	r8, r0, r8, ror r0
    80d8:	00030ca0 	andeq	r0, r3, r0, lsr #25
    80dc:	0003b0dc 	ldrdeq	fp, [r3], -ip

Disassembly of section .text:

00010000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   10000:	e92d4830 	push	{r4, r5, fp, lr}
   10004:	e28db00c 	add	fp, sp, #12
   10008:	e24dd018 	sub	sp, sp, #24
   1000c:	e1a0500e 	mov	r5, lr
   10010:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   10014:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   10018:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   1001c:	e1a03005 	mov	r3, r5
   10020:	e3000000 	movw	r0, #0
   10024:	e3400001 	movt	r0, #1
   10028:	e1a01003 	mov	r1, r3
   1002c:	eb0015ba 	bl	1571c <__cyg_profile_func_enter>
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   10030:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10034:	e50b3010 	str	r3, [fp, #-16]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   10038:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1003c:	e2433004 	sub	r3, r3, #4
   10040:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   10044:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   10048:	e2832004 	add	r2, r3, #4
   1004c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   10054:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10058:	e2433004 	sub	r3, r3, #4
   1005c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   10060:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10064:	e30a3aaa 	movw	r3, #43690	; 0xaaaa
   10068:	e34a3aaa 	movt	r3, #43690	; 0xaaaa
   1006c:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   10070:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10074:	e2433004 	sub	r3, r3, #4
   10078:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   1007c:	e51b2010 	ldr	r2, [fp, #-16]
   10080:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10084:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   10088:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1008c:	e2433004 	sub	r3, r3, #4
   10090:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   10094:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10098:	e3013212 	movw	r3, #4626	; 0x1212
   1009c:	e3413212 	movt	r3, #4626	; 0x1212
   100a0:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   100a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   100a8:	e2433004 	sub	r3, r3, #4
   100ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   100b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   100b4:	e3013111 	movw	r3, #4369	; 0x1111
   100b8:	e3413111 	movt	r3, #4369	; 0x1111
   100bc:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   100c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   100c4:	e2433004 	sub	r3, r3, #4
   100c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   100cc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   100d0:	e3013010 	movw	r3, #4112	; 0x1010
   100d4:	e3413010 	movt	r3, #4112	; 0x1010
   100d8:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   100dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   100e0:	e2433004 	sub	r3, r3, #4
   100e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   100e8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   100ec:	e3003909 	movw	r3, #2313	; 0x909
   100f0:	e3403909 	movt	r3, #2313	; 0x909
   100f4:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   100f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   100fc:	e2433004 	sub	r3, r3, #4
   10100:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   10104:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10108:	e3003808 	movw	r3, #2056	; 0x808
   1010c:	e3403808 	movt	r3, #2056	; 0x808
   10110:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   10114:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10118:	e2433004 	sub	r3, r3, #4
   1011c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   10120:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10124:	e3003707 	movw	r3, #1799	; 0x707
   10128:	e3403707 	movt	r3, #1799	; 0x707
   1012c:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   10130:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10134:	e2433004 	sub	r3, r3, #4
   10138:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   1013c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10140:	e3003606 	movw	r3, #1542	; 0x606
   10144:	e3403606 	movt	r3, #1542	; 0x606
   10148:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   1014c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10150:	e2433004 	sub	r3, r3, #4
   10154:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   10158:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1015c:	e3003505 	movw	r3, #1285	; 0x505
   10160:	e3403505 	movt	r3, #1285	; 0x505
   10164:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   10168:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1016c:	e2433004 	sub	r3, r3, #4
   10170:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   10174:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10178:	e3003404 	movw	r3, #1028	; 0x404
   1017c:	e3403404 	movt	r3, #1028	; 0x404
   10180:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   10184:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10188:	e2433004 	sub	r3, r3, #4
   1018c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   10190:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10194:	e3003303 	movw	r3, #771	; 0x303
   10198:	e3403303 	movt	r3, #771	; 0x303
   1019c:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   101a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   101a4:	e2433004 	sub	r3, r3, #4
   101a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   101ac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   101b0:	e3003202 	movw	r3, #514	; 0x202
   101b4:	e3403202 	movt	r3, #514	; 0x202
   101b8:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   101bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   101c0:	e2433004 	sub	r3, r3, #4
   101c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   101c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   101cc:	e3003101 	movw	r3, #257	; 0x101
   101d0:	e3403101 	movt	r3, #257	; 0x101
   101d4:	e5823000 	str	r3, [r2]
	pxTopOfStack--;	
   101d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   101dc:	e2433004 	sub	r3, r3, #4
   101e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   101e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   101e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   101ec:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   101f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   101f4:	e2433004 	sub	r3, r3, #4
   101f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   101fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10200:	e3a0201f 	mov	r2, #31
   10204:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   10208:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1020c:	e2033001 	and	r3, r3, #1
   10210:	e3530000 	cmp	r3, #0
   10214:	0a000004 	beq	1022c <pxPortInitialiseStack+0x22c>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   10218:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1021c:	e5933000 	ldr	r3, [r3]
   10220:	e3832020 	orr	r2, r3, #32
   10224:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10228:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   1022c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10230:	e2433004 	sub	r3, r3, #4
   10234:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   10238:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1023c:	e3a02000 	mov	r2, #0
   10240:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   10244:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   10248:	e1a03005 	mov	r3, r5
   1024c:	e3000000 	movw	r0, #0
   10250:	e3400001 	movt	r0, #1
   10254:	e1a01003 	mov	r1, r3
   10258:	eb001581 	bl	15864 <__cyg_profile_func_exit>
   1025c:	e1a03004 	mov	r3, r4
}
   10260:	e1a00003 	mov	r0, r3
   10264:	e24bd00c 	sub	sp, fp, #12
   10268:	e8bd8830 	pop	{r4, r5, fp, pc}

0001026c <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   1026c:	e92d4830 	push	{r4, r5, fp, lr}
   10270:	e28db00c 	add	fp, sp, #12
   10274:	e1a0500e 	mov	r5, lr
   10278:	e1a03005 	mov	r3, r5
   1027c:	e300026c 	movw	r0, #620	; 0x26c
   10280:	e3400001 	movt	r0, #1
   10284:	e1a01003 	mov	r1, r3
   10288:	eb001523 	bl	1571c <__cyg_profile_func_enter>
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1028c:	eb00002f 	bl	10350 <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   10290:	eb000062 	bl	10420 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   10294:	e3a04000 	mov	r4, #0
   10298:	e1a03005 	mov	r3, r5
   1029c:	e300026c 	movw	r0, #620	; 0x26c
   102a0:	e3400001 	movt	r0, #1
   102a4:	e1a01003 	mov	r1, r3
   102a8:	eb00156d 	bl	15864 <__cyg_profile_func_exit>
   102ac:	e1a03004 	mov	r3, r4
}
   102b0:	e1a00003 	mov	r0, r3
   102b4:	e8bd8830 	pop	{r4, r5, fp, pc}

000102b8 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   102b8:	e92d4818 	push	{r3, r4, fp, lr}
   102bc:	e28db00c 	add	fp, sp, #12
   102c0:	e1a0400e 	mov	r4, lr
   102c4:	e1a03004 	mov	r3, r4
   102c8:	e30002b8 	movw	r0, #696	; 0x2b8
   102cc:	e3400001 	movt	r0, #1
   102d0:	e1a01003 	mov	r1, r3
   102d4:	eb001510 	bl	1571c <__cyg_profile_func_enter>
   102d8:	e1a03004 	mov	r3, r4
   102dc:	e30002b8 	movw	r0, #696	; 0x2b8
   102e0:	e3400001 	movt	r0, #1
   102e4:	e1a01003 	mov	r1, r3
   102e8:	eb00155d 	bl	15864 <__cyg_profile_func_exit>
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   102ec:	e8bd8818 	pop	{r3, r4, fp, pc}

000102f0 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR(int nIRQ, void *pParam )
{
   102f0:	e92d4810 	push	{r4, fp, lr}
   102f4:	e28db008 	add	fp, sp, #8
   102f8:	e24dd00c 	sub	sp, sp, #12
   102fc:	e1a0400e 	mov	r4, lr
   10300:	e50b0010 	str	r0, [fp, #-16]
   10304:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10308:	e1a03004 	mov	r3, r4
   1030c:	e30002f0 	movw	r0, #752	; 0x2f0
   10310:	e3400001 	movt	r0, #1
   10314:	e1a01003 	mov	r1, r3
   10318:	eb0014ff 	bl	1571c <__cyg_profile_func_enter>
	vTaskIncrementTick();
   1031c:	eb000bf0 	bl	132e4 <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   10320:	eb000cfe 	bl	13720 <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   10324:	e3a03b2d 	mov	r3, #46080	; 0xb400
   10328:	e3433f00 	movt	r3, #16128	; 0x3f00
   1032c:	e3a02000 	mov	r2, #0
   10330:	e583200c 	str	r2, [r3, #12]
   10334:	e1a03004 	mov	r3, r4
   10338:	e30002f0 	movw	r0, #752	; 0x2f0
   1033c:	e3400001 	movt	r0, #1
   10340:	e1a01003 	mov	r1, r3
   10344:	eb001546 	bl	15864 <__cyg_profile_func_exit>
}
   10348:	e24bd008 	sub	sp, fp, #8
   1034c:	e8bd8810 	pop	{r4, fp, pc}

00010350 <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   10350:	e92d4810 	push	{r4, fp, lr}
   10354:	e28db008 	add	fp, sp, #8
   10358:	e24dd00c 	sub	sp, sp, #12
   1035c:	e1a0400e 	mov	r4, lr
   10360:	e1a03004 	mov	r3, r4
   10364:	e3000350 	movw	r0, #848	; 0x350
   10368:	e3400001 	movt	r0, #1
   1036c:	e1a01003 	mov	r1, r3
   10370:	eb0014e9 	bl	1571c <__cyg_profile_func_enter>
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   10374:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   10378:	e50b3010 	str	r3, [fp, #-16]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	DisableInterrupts();
   1037c:	eb0010d5 	bl	146d8 <DisableInterrupts>

	pRegs->CTL = 0x003E0000;
   10380:	e3a03b2d 	mov	r3, #46080	; 0xb400
   10384:	e3433f00 	movt	r3, #16128	; 0x3f00
   10388:	e3a0283e 	mov	r2, #4063232	; 0x3e0000
   1038c:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   10390:	e3a03b2d 	mov	r3, #46080	; 0xb400
   10394:	e3433f00 	movt	r3, #16128	; 0x3f00
   10398:	e30023e7 	movw	r2, #999	; 0x3e7
   1039c:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   103a0:	e3a03b2d 	mov	r3, #46080	; 0xb400
   103a4:	e3433f00 	movt	r3, #16128	; 0x3f00
   103a8:	e30023e7 	movw	r2, #999	; 0x3e7
   103ac:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   103b0:	e3a03b2d 	mov	r3, #46080	; 0xb400
   103b4:	e3433f00 	movt	r3, #16128	; 0x3f00
   103b8:	e3a020f9 	mov	r2, #249	; 0xf9
   103bc:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   103c0:	e3a03b2d 	mov	r3, #46080	; 0xb400
   103c4:	e3433f00 	movt	r3, #16128	; 0x3f00
   103c8:	e3a02000 	mov	r2, #0
   103cc:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   103d0:	e3a03b2d 	mov	r3, #46080	; 0xb400
   103d4:	e3433f00 	movt	r3, #16128	; 0x3f00
   103d8:	e3a020a2 	mov	r2, #162	; 0xa2
   103dc:	e340203e 	movt	r2, #62	; 0x3e
   103e0:	e5832008 	str	r2, [r3, #8]

	RegisterInterrupt(64, vTickISR, NULL);
   103e4:	e3a00040 	mov	r0, #64	; 0x40
   103e8:	e30012f0 	movw	r1, #752	; 0x2f0
   103ec:	e3401001 	movt	r1, #1
   103f0:	e3a02000 	mov	r2, #0
   103f4:	eb000ff7 	bl	143d8 <RegisterInterrupt>

	EnableInterrupt(64);
   103f8:	e3a00040 	mov	r0, #64	; 0x40
   103fc:	eb001021 	bl	14488 <EnableInterrupt>

	EnableInterrupts();
   10400:	eb0010a2 	bl	14690 <EnableInterrupts>
   10404:	e1a03004 	mov	r3, r4
   10408:	e3000350 	movw	r0, #848	; 0x350
   1040c:	e3400001 	movt	r0, #1
   10410:	e1a01003 	mov	r1, r3
   10414:	eb001512 	bl	15864 <__cyg_profile_func_exit>
}
   10418:	e24bd008 	sub	sp, fp, #8
   1041c:	e8bd8810 	pop	{r4, fp, pc}

00010420 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   10420:	e92d4818 	push	{r3, r4, fp, lr}
   10424:	e28db00c 	add	fp, sp, #12
   10428:	e1a0400e 	mov	r4, lr
   1042c:	e1a03004 	mov	r3, r4
   10430:	e3000420 	movw	r0, #1056	; 0x420
   10434:	e3400001 	movt	r0, #1
   10438:	e1a01003 	mov	r1, r3
   1043c:	eb0014b6 	bl	1571c <__cyg_profile_func_enter>
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   10440:	e3003ca0 	movw	r3, #3232	; 0xca0
   10444:	e3403003 	movt	r3, #3
   10448:	e5933000 	ldr	r3, [r3]
   1044c:	e2832001 	add	r2, r3, #1
   10450:	e3003ca0 	movw	r3, #3232	; 0xca0
   10454:	e3403003 	movt	r3, #3
   10458:	e5832000 	str	r2, [r3]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   1045c:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   10460:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   10464:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   10468:	e59f02d0 	ldr	r0, [pc, #720]	; 10740 <vPortExitCritical+0x90>
   1046c:	e5900000 	ldr	r0, [r0]
   10470:	e590e000 	ldr	lr, [r0]
   10474:	e59f02c8 	ldr	r0, [pc, #712]	; 10744 <vPortExitCritical+0x94>
   10478:	e8be0002 	ldm	lr!, {r1}
   1047c:	e5801000 	str	r1, [r0]
   10480:	e8be0001 	ldm	lr!, {r0}
   10484:	e16ff000 	msr	SPSR_fsxc, r0
   10488:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1048c:	e320f000 	nop	{0}
   10490:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10494:	e25ef004 	subs	pc, lr, #4
   10498:	e320f000 	nop	{0}
   1049c:	e320f000 	nop	{0}
   104a0:	e3003b50 	movw	r3, #2896	; 0xb50
   104a4:	e3403003 	movt	r3, #3
   104a8:	e5933000 	ldr	r3, [r3]
   104ac:	e3003d24 	movw	r3, #3364	; 0xd24
   104b0:	e3403003 	movt	r3, #3
   104b4:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   104b8:	e8bd4000 	ldmfd	sp!, {lr}
   104bc:	e24ee004 	sub	lr, lr, #4
   104c0:	e12fff1e 	bx	lr
   104c4:	e1a03004 	mov	r3, r4
   104c8:	e3000420 	movw	r0, #1056	; 0x420
   104cc:	e3400001 	movt	r0, #1
   104d0:	e1a01003 	mov	r1, r3
   104d4:	eb0014e2 	bl	15864 <__cyg_profile_func_exit>
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   104d8:	e8bd8818 	pop	{r3, r4, fp, pc}

000104dc <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   104dc:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   104e0:	e92d0001 	stmfd	sp!, {r0}
   104e4:	e94d2000 	stmdb	sp, {sp}^
   104e8:	e24dd004 	sub	sp, sp, #4
   104ec:	e8bd0001 	ldmfd	sp!, {r0}
   104f0:	e9204000 	stmdb	r0!, {lr}
   104f4:	e1a0e000 	mov	lr, r0
   104f8:	e8bd0001 	ldmfd	sp!, {r0}
   104fc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10500:	e320f000 	nop	{0}
   10504:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   10508:	e14f0000 	mrs	r0, SPSR
   1050c:	e92e0001 	stmdb	lr!, {r0}
   10510:	e59f022c 	ldr	r0, [pc, #556]	; 10744 <vPortExitCritical+0x94>
   10514:	e5900000 	ldr	r0, [r0]
   10518:	e92e0001 	stmdb	lr!, {r0}
   1051c:	e59f021c 	ldr	r0, [pc, #540]	; 10740 <vPortExitCritical+0x90>
   10520:	e5900000 	ldr	r0, [r0]
   10524:	e580e000 	str	lr, [r0]
   10528:	e3003b50 	movw	r3, #2896	; 0xb50
   1052c:	e3403003 	movt	r3, #3
   10530:	e5933000 	ldr	r3, [r3]
   10534:	e3003d24 	movw	r3, #3364	; 0xd24
   10538:	e3403003 	movt	r3, #3
   1053c:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   10540:	eb000c76 	bl	13720 <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   10544:	e59f01f4 	ldr	r0, [pc, #500]	; 10740 <vPortExitCritical+0x90>
   10548:	e5900000 	ldr	r0, [r0]
   1054c:	e590e000 	ldr	lr, [r0]
   10550:	e59f01ec 	ldr	r0, [pc, #492]	; 10744 <vPortExitCritical+0x94>
   10554:	e8be0002 	ldm	lr!, {r1}
   10558:	e5801000 	str	r1, [r0]
   1055c:	e8be0001 	ldm	lr!, {r0}
   10560:	e16ff000 	msr	SPSR_fsxc, r0
   10564:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10568:	e320f000 	nop	{0}
   1056c:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10570:	e25ef004 	subs	pc, lr, #4
   10574:	e320f000 	nop	{0}
   10578:	e320f000 	nop	{0}
   1057c:	e3003b50 	movw	r3, #2896	; 0xb50
   10580:	e3403003 	movt	r3, #3
   10584:	e5933000 	ldr	r3, [r3]
   10588:	e3003d24 	movw	r3, #3364	; 0xd24
   1058c:	e3403003 	movt	r3, #3
   10590:	e5933000 	ldr	r3, [r3]

00010594 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked, no_instrument_function));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   10594:	e92d0001 	stmfd	sp!, {r0}
   10598:	e94d2000 	stmdb	sp, {sp}^
   1059c:	e24dd004 	sub	sp, sp, #4
   105a0:	e8bd0001 	ldmfd	sp!, {r0}
   105a4:	e9204000 	stmdb	r0!, {lr}
   105a8:	e1a0e000 	mov	lr, r0
   105ac:	e8bd0001 	ldmfd	sp!, {r0}
   105b0:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   105b4:	e320f000 	nop	{0}
   105b8:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   105bc:	e14f0000 	mrs	r0, SPSR
   105c0:	e92e0001 	stmdb	lr!, {r0}
   105c4:	e59f0178 	ldr	r0, [pc, #376]	; 10744 <vPortExitCritical+0x94>
   105c8:	e5900000 	ldr	r0, [r0]
   105cc:	e92e0001 	stmdb	lr!, {r0}
   105d0:	e59f0168 	ldr	r0, [pc, #360]	; 10740 <vPortExitCritical+0x90>
   105d4:	e5900000 	ldr	r0, [r0]
   105d8:	e580e000 	str	lr, [r0]
   105dc:	e3003b50 	movw	r3, #2896	; 0xb50
   105e0:	e3403003 	movt	r3, #3
   105e4:	e5933000 	ldr	r3, [r3]
   105e8:	e3003d24 	movw	r3, #3364	; 0xd24
   105ec:	e3403003 	movt	r3, #3
   105f0:	e5933000 	ldr	r3, [r3]
	irqHandler();
   105f4:	eb000efc 	bl	141ec <irqHandler>
	portRESTORE_CONTEXT();	
   105f8:	e59f0140 	ldr	r0, [pc, #320]	; 10740 <vPortExitCritical+0x90>
   105fc:	e5900000 	ldr	r0, [r0]
   10600:	e590e000 	ldr	lr, [r0]
   10604:	e59f0138 	ldr	r0, [pc, #312]	; 10744 <vPortExitCritical+0x94>
   10608:	e8be0002 	ldm	lr!, {r1}
   1060c:	e5801000 	str	r1, [r0]
   10610:	e8be0001 	ldm	lr!, {r0}
   10614:	e16ff000 	msr	SPSR_fsxc, r0
   10618:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1061c:	e320f000 	nop	{0}
   10620:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10624:	e25ef004 	subs	pc, lr, #4
   10628:	e320f000 	nop	{0}
   1062c:	e320f000 	nop	{0}
   10630:	e3003b50 	movw	r3, #2896	; 0xb50
   10634:	e3403003 	movt	r3, #3
   10638:	e5933000 	ldr	r3, [r3]
   1063c:	e3003d24 	movw	r3, #3364	; 0xd24
   10640:	e3403003 	movt	r3, #3
   10644:	e5933000 	ldr	r3, [r3]

00010648 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   10648:	e92d4818 	push	{r3, r4, fp, lr}
   1064c:	e28db00c 	add	fp, sp, #12
   10650:	e1a0400e 	mov	r4, lr
   10654:	e1a03004 	mov	r3, r4
   10658:	e3000648 	movw	r0, #1608	; 0x648
   1065c:	e3400001 	movt	r0, #1
   10660:	e1a01003 	mov	r1, r3
   10664:	eb00142c 	bl	1571c <__cyg_profile_func_enter>
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   10668:	e92d0001 	stmfd	sp!, {r0}
   1066c:	e10f0000 	mrs	r0, CPSR
   10670:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10674:	e129f000 	msr	CPSR_fc, r0
   10678:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   1067c:	e3003b50 	movw	r3, #2896	; 0xb50
   10680:	e3403003 	movt	r3, #3
   10684:	e5933000 	ldr	r3, [r3]
   10688:	e2832001 	add	r2, r3, #1
   1068c:	e3003b50 	movw	r3, #2896	; 0xb50
   10690:	e3403003 	movt	r3, #3
   10694:	e5832000 	str	r2, [r3]
   10698:	e1a03004 	mov	r3, r4
   1069c:	e3000648 	movw	r0, #1608	; 0x648
   106a0:	e3400001 	movt	r0, #1
   106a4:	e1a01003 	mov	r1, r3
   106a8:	eb00146d 	bl	15864 <__cyg_profile_func_exit>
}
   106ac:	e8bd8818 	pop	{r3, r4, fp, pc}

000106b0 <vPortExitCritical>:

void vPortExitCritical( void )
{
   106b0:	e92d4818 	push	{r3, r4, fp, lr}
   106b4:	e28db00c 	add	fp, sp, #12
   106b8:	e1a0400e 	mov	r4, lr
   106bc:	e1a03004 	mov	r3, r4
   106c0:	e30006b0 	movw	r0, #1712	; 0x6b0
   106c4:	e3400001 	movt	r0, #1
   106c8:	e1a01003 	mov	r1, r3
   106cc:	eb001412 	bl	1571c <__cyg_profile_func_enter>
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   106d0:	e3003b50 	movw	r3, #2896	; 0xb50
   106d4:	e3403003 	movt	r3, #3
   106d8:	e5933000 	ldr	r3, [r3]
   106dc:	e3530000 	cmp	r3, #0
   106e0:	0a000010 	beq	10728 <vPortExitCritical+0x78>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   106e4:	e3003b50 	movw	r3, #2896	; 0xb50
   106e8:	e3403003 	movt	r3, #3
   106ec:	e5933000 	ldr	r3, [r3]
   106f0:	e2432001 	sub	r2, r3, #1
   106f4:	e3003b50 	movw	r3, #2896	; 0xb50
   106f8:	e3403003 	movt	r3, #3
   106fc:	e5832000 	str	r2, [r3]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   10700:	e3003b50 	movw	r3, #2896	; 0xb50
   10704:	e3403003 	movt	r3, #3
   10708:	e5933000 	ldr	r3, [r3]
   1070c:	e3530000 	cmp	r3, #0
   10710:	1a000004 	bne	10728 <vPortExitCritical+0x78>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   10714:	e92d0001 	stmfd	sp!, {r0}
   10718:	e10f0000 	mrs	r0, CPSR
   1071c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10720:	e129f000 	msr	CPSR_fc, r0
   10724:	e8bd0001 	ldmfd	sp!, {r0}
   10728:	e1a03004 	mov	r3, r4
   1072c:	e30006b0 	movw	r0, #1712	; 0x6b0
   10730:	e3400001 	movt	r0, #1
   10734:	e1a01003 	mov	r1, r3
   10738:	eb001449 	bl	15864 <__cyg_profile_func_exit>
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   1073c:	e8bd8818 	pop	{r3, r4, fp, pc}
   10740:	00030d24 	andeq	r0, r3, r4, lsr #26
   10744:	00030b50 	andeq	r0, r3, r0, asr fp

00010748 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   10748:	e92d4830 	push	{r4, r5, fp, lr}
   1074c:	e28db00c 	add	fp, sp, #12
   10750:	e24dd018 	sub	sp, sp, #24
   10754:	e1a0500e 	mov	r5, lr
   10758:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1075c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   10760:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   10764:	e1a03005 	mov	r3, r5
   10768:	e3000748 	movw	r0, #1864	; 0x748
   1076c:	e3400001 	movt	r0, #1
   10770:	e1a01003 	mov	r1, r3
   10774:	eb0013e8 	bl	1571c <__cyg_profile_func_enter>
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   10778:	e3a00038 	mov	r0, #56	; 0x38
   1077c:	eb0011b4 	bl	14e54 <pvPortMalloc>
   10780:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	if( pxCoRoutine )
   10784:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10788:	e3530000 	cmp	r3, #0
   1078c:	0a000047 	beq	108b0 <xCoRoutineCreate+0x168>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   10790:	e3003d10 	movw	r3, #3344	; 0xd10
   10794:	e3403003 	movt	r3, #3
   10798:	e5933000 	ldr	r3, [r3]
   1079c:	e3530000 	cmp	r3, #0
   107a0:	1a000004 	bne	107b8 <xCoRoutineCreate+0x70>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   107a4:	e3003d10 	movw	r3, #3344	; 0xd10
   107a8:	e3403003 	movt	r3, #3
   107ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   107b0:	e5832000 	str	r2, [r3]
			prvInitialiseCoRoutineLists();
   107b4:	eb0001b8 	bl	10e9c <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   107b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   107bc:	e3530001 	cmp	r3, #1
   107c0:	9a000001 	bls	107cc <xCoRoutineCreate+0x84>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   107c4:	e3a03001 	mov	r3, #1
   107c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   107cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   107d0:	e3a02000 	mov	r2, #0
   107d4:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
   107d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   107dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   107e0:	e583202c 	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   107e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   107e8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   107ec:	e5832030 	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   107f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   107f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   107f8:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   107fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10800:	e2833004 	add	r3, r3, #4
   10804:	e1a00003 	mov	r0, r3
   10808:	eb000229 	bl	110b4 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   1080c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10810:	e2833018 	add	r3, r3, #24
   10814:	e1a00003 	mov	r0, r3
   10818:	eb000225 	bl	110b4 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   1081c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10820:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10824:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   10828:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1082c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10830:	e5832024 	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   10834:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   10838:	e2632005 	rsb	r2, r3, #5
   1083c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10840:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   10844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10848:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1084c:	e3003d14 	movw	r3, #3348	; 0xd14
   10850:	e3403003 	movt	r3, #3
   10854:	e5933000 	ldr	r3, [r3]
   10858:	e1520003 	cmp	r2, r3
   1085c:	9a000004 	bls	10874 <xCoRoutineCreate+0x12c>
   10860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10864:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10868:	e3003d14 	movw	r3, #3348	; 0xd14
   1086c:	e3403003 	movt	r3, #3
   10870:	e5832000 	str	r2, [r3]
   10874:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10878:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1087c:	e3a02014 	mov	r2, #20
   10880:	e0020392 	mul	r2, r2, r3
   10884:	e3003ca4 	movw	r3, #3236	; 0xca4
   10888:	e3403003 	movt	r3, #3
   1088c:	e0822003 	add	r2, r2, r3
   10890:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10894:	e2833004 	add	r3, r3, #4
   10898:	e1a00002 	mov	r0, r2
   1089c:	e1a01003 	mov	r1, r3
   108a0:	eb000217 	bl	11104 <vListInsertEnd>

		xReturn = pdPASS;
   108a4:	e3a03001 	mov	r3, #1
   108a8:	e50b3010 	str	r3, [fp, #-16]
   108ac:	ea000001 	b	108b8 <xCoRoutineCreate+0x170>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   108b0:	e3e03000 	mvn	r3, #0
   108b4:	e50b3010 	str	r3, [fp, #-16]
	}
	
	return xReturn;	
   108b8:	e51b4010 	ldr	r4, [fp, #-16]
   108bc:	e1a03005 	mov	r3, r5
   108c0:	e3000748 	movw	r0, #1864	; 0x748
   108c4:	e3400001 	movt	r0, #1
   108c8:	e1a01003 	mov	r1, r3
   108cc:	eb0013e4 	bl	15864 <__cyg_profile_func_exit>
   108d0:	e1a03004 	mov	r3, r4
}
   108d4:	e1a00003 	mov	r0, r3
   108d8:	e24bd00c 	sub	sp, fp, #12
   108dc:	e8bd8830 	pop	{r4, r5, fp, pc}

000108e0 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   108e0:	e92d4810 	push	{r4, fp, lr}
   108e4:	e28db008 	add	fp, sp, #8
   108e8:	e24dd014 	sub	sp, sp, #20
   108ec:	e1a0400e 	mov	r4, lr
   108f0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   108f4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   108f8:	e1a03004 	mov	r3, r4
   108fc:	e30008e0 	movw	r0, #2272	; 0x8e0
   10900:	e3400001 	movt	r0, #1
   10904:	e1a01003 	mov	r1, r3
   10908:	eb001383 	bl	1571c <__cyg_profile_func_enter>
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   1090c:	e3003d18 	movw	r3, #3352	; 0xd18
   10910:	e3403003 	movt	r3, #3
   10914:	e5932000 	ldr	r2, [r3]
   10918:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1091c:	e0823003 	add	r3, r2, r3
   10920:	e50b3010 	str	r3, [fp, #-16]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10924:	e3003d10 	movw	r3, #3344	; 0xd10
   10928:	e3403003 	movt	r3, #3
   1092c:	e5933000 	ldr	r3, [r3]
   10930:	e2833004 	add	r3, r3, #4
   10934:	e1a00003 	mov	r0, r3
   10938:	eb00025f 	bl	112bc <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   1093c:	e3003d10 	movw	r3, #3344	; 0xd10
   10940:	e3403003 	movt	r3, #3
   10944:	e5933000 	ldr	r3, [r3]
   10948:	e51b2010 	ldr	r2, [fp, #-16]
   1094c:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   10950:	e3003d18 	movw	r3, #3352	; 0xd18
   10954:	e3403003 	movt	r3, #3
   10958:	e5933000 	ldr	r3, [r3]
   1095c:	e51b2010 	ldr	r2, [fp, #-16]
   10960:	e1520003 	cmp	r2, r3
   10964:	2a00000a 	bcs	10994 <vCoRoutineAddToDelayedList+0xb4>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10968:	e3003cf8 	movw	r3, #3320	; 0xcf8
   1096c:	e3403003 	movt	r3, #3
   10970:	e5932000 	ldr	r2, [r3]
   10974:	e3003d10 	movw	r3, #3344	; 0xd10
   10978:	e3403003 	movt	r3, #3
   1097c:	e5933000 	ldr	r3, [r3]
   10980:	e2833004 	add	r3, r3, #4
   10984:	e1a00002 	mov	r0, r2
   10988:	e1a01003 	mov	r1, r3
   1098c:	eb00020b 	bl	111c0 <vListInsert>
   10990:	ea000009 	b	109bc <vCoRoutineAddToDelayedList+0xdc>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10994:	e3003cf4 	movw	r3, #3316	; 0xcf4
   10998:	e3403003 	movt	r3, #3
   1099c:	e5932000 	ldr	r2, [r3]
   109a0:	e3003d10 	movw	r3, #3344	; 0xd10
   109a4:	e3403003 	movt	r3, #3
   109a8:	e5933000 	ldr	r3, [r3]
   109ac:	e2833004 	add	r3, r3, #4
   109b0:	e1a00002 	mov	r0, r2
   109b4:	e1a01003 	mov	r1, r3
   109b8:	eb000200 	bl	111c0 <vListInsert>
	}

	if( pxEventList )
   109bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   109c0:	e3530000 	cmp	r3, #0
   109c4:	0a000006 	beq	109e4 <vCoRoutineAddToDelayedList+0x104>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   109c8:	e3003d10 	movw	r3, #3344	; 0xd10
   109cc:	e3403003 	movt	r3, #3
   109d0:	e5933000 	ldr	r3, [r3]
   109d4:	e2833018 	add	r3, r3, #24
   109d8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   109dc:	e1a01003 	mov	r1, r3
   109e0:	eb0001f6 	bl	111c0 <vListInsert>
   109e4:	e1a03004 	mov	r3, r4
   109e8:	e30008e0 	movw	r0, #2272	; 0x8e0
   109ec:	e3400001 	movt	r0, #1
   109f0:	e1a01003 	mov	r1, r3
   109f4:	eb00139a 	bl	15864 <__cyg_profile_func_exit>
	}
}
   109f8:	e24bd008 	sub	sp, fp, #8
   109fc:	e8bd8810 	pop	{r4, fp, pc}

00010a00 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   10a00:	e92d4810 	push	{r4, fp, lr}
   10a04:	e28db008 	add	fp, sp, #8
   10a08:	e24dd00c 	sub	sp, sp, #12
   10a0c:	e1a0400e 	mov	r4, lr
   10a10:	e1a03004 	mov	r3, r4
   10a14:	e3000a00 	movw	r0, #2560	; 0xa00
   10a18:	e3400001 	movt	r0, #1
   10a1c:	e1a01003 	mov	r1, r3
   10a20:	eb00133d 	bl	1571c <__cyg_profile_func_enter>
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10a24:	ea00002e 	b	10ae4 <prvCheckPendingReadyList+0xe4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   10a28:	e92d0001 	stmfd	sp!, {r0}
   10a2c:	e10f0000 	mrs	r0, CPSR
   10a30:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10a34:	e129f000 	msr	CPSR_fc, r0
   10a38:	e8bd0001 	ldmfd	sp!, {r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   10a3c:	e3003cfc 	movw	r3, #3324	; 0xcfc
   10a40:	e3403003 	movt	r3, #3
   10a44:	e593300c 	ldr	r3, [r3, #12]
   10a48:	e593300c 	ldr	r3, [r3, #12]
   10a4c:	e50b3010 	str	r3, [fp, #-16]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10a50:	e51b3010 	ldr	r3, [fp, #-16]
   10a54:	e2833018 	add	r3, r3, #24
   10a58:	e1a00003 	mov	r0, r3
   10a5c:	eb000216 	bl	112bc <vListRemove>
		}
		portENABLE_INTERRUPTS();
   10a60:	e92d0001 	stmfd	sp!, {r0}
   10a64:	e10f0000 	mrs	r0, CPSR
   10a68:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10a6c:	e129f000 	msr	CPSR_fc, r0
   10a70:	e8bd0001 	ldmfd	sp!, {r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   10a74:	e51b3010 	ldr	r3, [fp, #-16]
   10a78:	e2833004 	add	r3, r3, #4
   10a7c:	e1a00003 	mov	r0, r3
   10a80:	eb00020d 	bl	112bc <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   10a84:	e51b3010 	ldr	r3, [fp, #-16]
   10a88:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a8c:	e3003d14 	movw	r3, #3348	; 0xd14
   10a90:	e3403003 	movt	r3, #3
   10a94:	e5933000 	ldr	r3, [r3]
   10a98:	e1520003 	cmp	r2, r3
   10a9c:	9a000004 	bls	10ab4 <prvCheckPendingReadyList+0xb4>
   10aa0:	e51b3010 	ldr	r3, [fp, #-16]
   10aa4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10aa8:	e3003d14 	movw	r3, #3348	; 0xd14
   10aac:	e3403003 	movt	r3, #3
   10ab0:	e5832000 	str	r2, [r3]
   10ab4:	e51b3010 	ldr	r3, [fp, #-16]
   10ab8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10abc:	e3a02014 	mov	r2, #20
   10ac0:	e0020392 	mul	r2, r2, r3
   10ac4:	e3003ca4 	movw	r3, #3236	; 0xca4
   10ac8:	e3403003 	movt	r3, #3
   10acc:	e0822003 	add	r2, r2, r3
   10ad0:	e51b3010 	ldr	r3, [fp, #-16]
   10ad4:	e2833004 	add	r3, r3, #4
   10ad8:	e1a00002 	mov	r0, r2
   10adc:	e1a01003 	mov	r1, r3
   10ae0:	eb000187 	bl	11104 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10ae4:	e3003cfc 	movw	r3, #3324	; 0xcfc
   10ae8:	e3403003 	movt	r3, #3
   10aec:	e5933000 	ldr	r3, [r3]
   10af0:	e3530000 	cmp	r3, #0
   10af4:	1affffcb 	bne	10a28 <prvCheckPendingReadyList+0x28>
   10af8:	e1a03004 	mov	r3, r4
   10afc:	e3000a00 	movw	r0, #2560	; 0xa00
   10b00:	e3400001 	movt	r0, #1
   10b04:	e1a01003 	mov	r1, r3
   10b08:	eb001355 	bl	15864 <__cyg_profile_func_exit>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
   10b0c:	e24bd008 	sub	sp, fp, #8
   10b10:	e8bd8810 	pop	{r4, fp, pc}

00010b14 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   10b14:	e92d4810 	push	{r4, fp, lr}
   10b18:	e28db008 	add	fp, sp, #8
   10b1c:	e24dd00c 	sub	sp, sp, #12
   10b20:	e1a0400e 	mov	r4, lr
   10b24:	e1a03004 	mov	r3, r4
   10b28:	e3000b14 	movw	r0, #2836	; 0xb14
   10b2c:	e3400001 	movt	r0, #1
   10b30:	e1a01003 	mov	r1, r3
   10b34:	eb0012f8 	bl	1571c <__cyg_profile_func_enter>
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   10b38:	eb0009a4 	bl	131d0 <xTaskGetTickCount>
   10b3c:	e1a02000 	mov	r2, r0
   10b40:	e3003d1c 	movw	r3, #3356	; 0xd1c
   10b44:	e3403003 	movt	r3, #3
   10b48:	e5933000 	ldr	r3, [r3]
   10b4c:	e0632002 	rsb	r2, r3, r2
   10b50:	e3003d20 	movw	r3, #3360	; 0xd20
   10b54:	e3403003 	movt	r3, #3
   10b58:	e5832000 	str	r2, [r3]
	while( xPassedTicks )
   10b5c:	ea000063 	b	10cf0 <prvCheckDelayedList+0x1dc>
	{
		xCoRoutineTickCount++;
   10b60:	e3003d18 	movw	r3, #3352	; 0xd18
   10b64:	e3403003 	movt	r3, #3
   10b68:	e5933000 	ldr	r3, [r3]
   10b6c:	e2832001 	add	r2, r3, #1
   10b70:	e3003d18 	movw	r3, #3352	; 0xd18
   10b74:	e3403003 	movt	r3, #3
   10b78:	e5832000 	str	r2, [r3]
		xPassedTicks--;
   10b7c:	e3003d20 	movw	r3, #3360	; 0xd20
   10b80:	e3403003 	movt	r3, #3
   10b84:	e5933000 	ldr	r3, [r3]
   10b88:	e2432001 	sub	r2, r3, #1
   10b8c:	e3003d20 	movw	r3, #3360	; 0xd20
   10b90:	e3403003 	movt	r3, #3
   10b94:	e5832000 	str	r2, [r3]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   10b98:	e3003d18 	movw	r3, #3352	; 0xd18
   10b9c:	e3403003 	movt	r3, #3
   10ba0:	e5933000 	ldr	r3, [r3]
   10ba4:	e3530000 	cmp	r3, #0
   10ba8:	1a00000d 	bne	10be4 <prvCheckDelayedList+0xd0>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   10bac:	e3003cf4 	movw	r3, #3316	; 0xcf4
   10bb0:	e3403003 	movt	r3, #3
   10bb4:	e5933000 	ldr	r3, [r3]
   10bb8:	e50b3010 	str	r3, [fp, #-16]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   10bbc:	e3003cf8 	movw	r3, #3320	; 0xcf8
   10bc0:	e3403003 	movt	r3, #3
   10bc4:	e5932000 	ldr	r2, [r3]
   10bc8:	e3003cf4 	movw	r3, #3316	; 0xcf4
   10bcc:	e3403003 	movt	r3, #3
   10bd0:	e5832000 	str	r2, [r3]
			pxOverflowDelayedCoRoutineList = pxTemp;
   10bd4:	e3003cf8 	movw	r3, #3320	; 0xcf8
   10bd8:	e3403003 	movt	r3, #3
   10bdc:	e51b2010 	ldr	r2, [fp, #-16]
   10be0:	e5832000 	str	r2, [r3]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   10be4:	ea00003b 	b	10cd8 <prvCheckDelayedList+0x1c4>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   10be8:	e3003cf4 	movw	r3, #3316	; 0xcf4
   10bec:	e3403003 	movt	r3, #3
   10bf0:	e5933000 	ldr	r3, [r3]
   10bf4:	e593300c 	ldr	r3, [r3, #12]
   10bf8:	e593300c 	ldr	r3, [r3, #12]
   10bfc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   10c00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10c04:	e5932004 	ldr	r2, [r3, #4]
   10c08:	e3003d18 	movw	r3, #3352	; 0xd18
   10c0c:	e3403003 	movt	r3, #3
   10c10:	e5933000 	ldr	r3, [r3]
   10c14:	e1520003 	cmp	r2, r3
   10c18:	9a000000 	bls	10c20 <prvCheckDelayedList+0x10c>
			{			
				/* Timeout not yet expired. */																			
				break;																				
   10c1c:	ea000033 	b	10cf0 <prvCheckDelayedList+0x1dc>
			}																						

			portDISABLE_INTERRUPTS();
   10c20:	e92d0001 	stmfd	sp!, {r0}
   10c24:	e10f0000 	mrs	r0, CPSR
   10c28:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10c2c:	e129f000 	msr	CPSR_fc, r0
   10c30:	e8bd0001 	ldmfd	sp!, {r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   10c34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10c38:	e2833004 	add	r3, r3, #4
   10c3c:	e1a00003 	mov	r0, r3
   10c40:	eb00019d 	bl	112bc <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   10c44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10c48:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   10c4c:	e3530000 	cmp	r3, #0
   10c50:	0a000003 	beq	10c64 <prvCheckDelayedList+0x150>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   10c54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10c58:	e2833018 	add	r3, r3, #24
   10c5c:	e1a00003 	mov	r0, r3
   10c60:	eb000195 	bl	112bc <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   10c64:	e92d0001 	stmfd	sp!, {r0}
   10c68:	e10f0000 	mrs	r0, CPSR
   10c6c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10c70:	e129f000 	msr	CPSR_fc, r0
   10c74:	e8bd0001 	ldmfd	sp!, {r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   10c78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10c7c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10c80:	e3003d14 	movw	r3, #3348	; 0xd14
   10c84:	e3403003 	movt	r3, #3
   10c88:	e5933000 	ldr	r3, [r3]
   10c8c:	e1520003 	cmp	r2, r3
   10c90:	9a000004 	bls	10ca8 <prvCheckDelayedList+0x194>
   10c94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10c98:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10c9c:	e3003d14 	movw	r3, #3348	; 0xd14
   10ca0:	e3403003 	movt	r3, #3
   10ca4:	e5832000 	str	r2, [r3]
   10ca8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10cac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10cb0:	e3a02014 	mov	r2, #20
   10cb4:	e0020392 	mul	r2, r2, r3
   10cb8:	e3003ca4 	movw	r3, #3236	; 0xca4
   10cbc:	e3403003 	movt	r3, #3
   10cc0:	e0822003 	add	r2, r2, r3
   10cc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10cc8:	e2833004 	add	r3, r3, #4
   10ccc:	e1a00002 	mov	r0, r2
   10cd0:	e1a01003 	mov	r1, r3
   10cd4:	eb00010a 	bl	11104 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   10cd8:	e3003cf4 	movw	r3, #3316	; 0xcf4
   10cdc:	e3403003 	movt	r3, #3
   10ce0:	e5933000 	ldr	r3, [r3]
   10ce4:	e5933000 	ldr	r3, [r3]
   10ce8:	e3530000 	cmp	r3, #0
   10cec:	1affffbd 	bne	10be8 <prvCheckDelayedList+0xd4>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
   10cf0:	e3003d20 	movw	r3, #3360	; 0xd20
   10cf4:	e3403003 	movt	r3, #3
   10cf8:	e5933000 	ldr	r3, [r3]
   10cfc:	e3530000 	cmp	r3, #0
   10d00:	1affff96 	bne	10b60 <prvCheckDelayedList+0x4c>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   10d04:	e3003d18 	movw	r3, #3352	; 0xd18
   10d08:	e3403003 	movt	r3, #3
   10d0c:	e5932000 	ldr	r2, [r3]
   10d10:	e3003d1c 	movw	r3, #3356	; 0xd1c
   10d14:	e3403003 	movt	r3, #3
   10d18:	e5832000 	str	r2, [r3]
   10d1c:	e1a03004 	mov	r3, r4
   10d20:	e3000b14 	movw	r0, #2836	; 0xb14
   10d24:	e3400001 	movt	r0, #1
   10d28:	e1a01003 	mov	r1, r3
   10d2c:	eb0012cc 	bl	15864 <__cyg_profile_func_exit>
}
   10d30:	e24bd008 	sub	sp, fp, #8
   10d34:	e8bd8810 	pop	{r4, fp, pc}

00010d38 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   10d38:	e92d4810 	push	{r4, fp, lr}
   10d3c:	e28db008 	add	fp, sp, #8
   10d40:	e24dd00c 	sub	sp, sp, #12
   10d44:	e1a0400e 	mov	r4, lr
   10d48:	e1a03004 	mov	r3, r4
   10d4c:	e3000d38 	movw	r0, #3384	; 0xd38
   10d50:	e3400001 	movt	r0, #1
   10d54:	e1a01003 	mov	r1, r3
   10d58:	eb00126f 	bl	1571c <__cyg_profile_func_enter>
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   10d5c:	ebffff27 	bl	10a00 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   10d60:	ebffff6b 	bl	10b14 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10d64:	ea00000c 	b	10d9c <vCoRoutineSchedule+0x64>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   10d68:	e3003d14 	movw	r3, #3348	; 0xd14
   10d6c:	e3403003 	movt	r3, #3
   10d70:	e5933000 	ldr	r3, [r3]
   10d74:	e3530000 	cmp	r3, #0
   10d78:	1a000000 	bne	10d80 <vCoRoutineSchedule+0x48>
		{
			/* No more co-routines to check. */
			return;
   10d7c:	ea00003f 	b	10e80 <vCoRoutineSchedule+0x148>
		}
		--uxTopCoRoutineReadyPriority;
   10d80:	e3003d14 	movw	r3, #3348	; 0xd14
   10d84:	e3403003 	movt	r3, #3
   10d88:	e5933000 	ldr	r3, [r3]
   10d8c:	e2432001 	sub	r2, r3, #1
   10d90:	e3003d14 	movw	r3, #3348	; 0xd14
   10d94:	e3403003 	movt	r3, #3
   10d98:	e5832000 	str	r2, [r3]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10d9c:	e3003d14 	movw	r3, #3348	; 0xd14
   10da0:	e3403003 	movt	r3, #3
   10da4:	e5932000 	ldr	r2, [r3]
   10da8:	e3003ca4 	movw	r3, #3236	; 0xca4
   10dac:	e3403003 	movt	r3, #3
   10db0:	e3a01014 	mov	r1, #20
   10db4:	e0020291 	mul	r2, r1, r2
   10db8:	e0833002 	add	r3, r3, r2
   10dbc:	e5933000 	ldr	r3, [r3]
   10dc0:	e3530000 	cmp	r3, #0
   10dc4:	0affffe7 	beq	10d68 <vCoRoutineSchedule+0x30>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   10dc8:	e3003d14 	movw	r3, #3348	; 0xd14
   10dcc:	e3403003 	movt	r3, #3
   10dd0:	e5933000 	ldr	r3, [r3]
   10dd4:	e3a02014 	mov	r2, #20
   10dd8:	e0020392 	mul	r2, r2, r3
   10ddc:	e3003ca4 	movw	r3, #3236	; 0xca4
   10de0:	e3403003 	movt	r3, #3
   10de4:	e0823003 	add	r3, r2, r3
   10de8:	e50b3010 	str	r3, [fp, #-16]
   10dec:	e51b3010 	ldr	r3, [fp, #-16]
   10df0:	e5933004 	ldr	r3, [r3, #4]
   10df4:	e5932004 	ldr	r2, [r3, #4]
   10df8:	e51b3010 	ldr	r3, [fp, #-16]
   10dfc:	e5832004 	str	r2, [r3, #4]
   10e00:	e51b3010 	ldr	r3, [fp, #-16]
   10e04:	e5932004 	ldr	r2, [r3, #4]
   10e08:	e51b3010 	ldr	r3, [fp, #-16]
   10e0c:	e2833008 	add	r3, r3, #8
   10e10:	e1520003 	cmp	r2, r3
   10e14:	1a000004 	bne	10e2c <vCoRoutineSchedule+0xf4>
   10e18:	e51b3010 	ldr	r3, [fp, #-16]
   10e1c:	e5933004 	ldr	r3, [r3, #4]
   10e20:	e5932004 	ldr	r2, [r3, #4]
   10e24:	e51b3010 	ldr	r3, [fp, #-16]
   10e28:	e5832004 	str	r2, [r3, #4]
   10e2c:	e51b3010 	ldr	r3, [fp, #-16]
   10e30:	e5933004 	ldr	r3, [r3, #4]
   10e34:	e593200c 	ldr	r2, [r3, #12]
   10e38:	e3003d10 	movw	r3, #3344	; 0xd10
   10e3c:	e3403003 	movt	r3, #3
   10e40:	e5832000 	str	r2, [r3]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   10e44:	e3003d10 	movw	r3, #3344	; 0xd10
   10e48:	e3403003 	movt	r3, #3
   10e4c:	e5933000 	ldr	r3, [r3]
   10e50:	e5932000 	ldr	r2, [r3]
   10e54:	e3003d10 	movw	r3, #3344	; 0xd10
   10e58:	e3403003 	movt	r3, #3
   10e5c:	e5931000 	ldr	r1, [r3]
   10e60:	e3003d10 	movw	r3, #3344	; 0xd10
   10e64:	e3403003 	movt	r3, #3
   10e68:	e5933000 	ldr	r3, [r3]
   10e6c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   10e70:	e1a00001 	mov	r0, r1
   10e74:	e1a01003 	mov	r1, r3
   10e78:	e12fff32 	blx	r2

	return;
   10e7c:	e1a00000 	nop			; (mov r0, r0)
   10e80:	e1a03004 	mov	r3, r4
   10e84:	e3000d38 	movw	r0, #3384	; 0xd38
   10e88:	e3400001 	movt	r0, #1
   10e8c:	e1a01003 	mov	r1, r3
   10e90:	eb001273 	bl	15864 <__cyg_profile_func_exit>
}
   10e94:	e24bd008 	sub	sp, fp, #8
   10e98:	e8bd8810 	pop	{r4, fp, pc}

00010e9c <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   10e9c:	e92d4810 	push	{r4, fp, lr}
   10ea0:	e28db008 	add	fp, sp, #8
   10ea4:	e24dd00c 	sub	sp, sp, #12
   10ea8:	e1a0400e 	mov	r4, lr
   10eac:	e1a03004 	mov	r3, r4
   10eb0:	e3000e9c 	movw	r0, #3740	; 0xe9c
   10eb4:	e3400001 	movt	r0, #1
   10eb8:	e1a01003 	mov	r1, r3
   10ebc:	eb001216 	bl	1571c <__cyg_profile_func_enter>
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10ec0:	e3a03000 	mov	r3, #0
   10ec4:	e50b3010 	str	r3, [fp, #-16]
   10ec8:	ea00000a 	b	10ef8 <prvInitialiseCoRoutineLists+0x5c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   10ecc:	e51b3010 	ldr	r3, [fp, #-16]
   10ed0:	e3a02014 	mov	r2, #20
   10ed4:	e0020392 	mul	r2, r2, r3
   10ed8:	e3003ca4 	movw	r3, #3236	; 0xca4
   10edc:	e3403003 	movt	r3, #3
   10ee0:	e0823003 	add	r3, r2, r3
   10ee4:	e1a00003 	mov	r0, r3
   10ee8:	eb00004e 	bl	11028 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10eec:	e51b3010 	ldr	r3, [fp, #-16]
   10ef0:	e2833001 	add	r3, r3, #1
   10ef4:	e50b3010 	str	r3, [fp, #-16]
   10ef8:	e51b3010 	ldr	r3, [fp, #-16]
   10efc:	e3530001 	cmp	r3, #1
   10f00:	9afffff1 	bls	10ecc <prvInitialiseCoRoutineLists+0x30>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   10f04:	e3000ccc 	movw	r0, #3276	; 0xccc
   10f08:	e3400003 	movt	r0, #3
   10f0c:	eb000045 	bl	11028 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   10f10:	e3000ce0 	movw	r0, #3296	; 0xce0
   10f14:	e3400003 	movt	r0, #3
   10f18:	eb000042 	bl	11028 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   10f1c:	e3000cfc 	movw	r0, #3324	; 0xcfc
   10f20:	e3400003 	movt	r0, #3
   10f24:	eb00003f 	bl	11028 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   10f28:	e3003cf4 	movw	r3, #3316	; 0xcf4
   10f2c:	e3403003 	movt	r3, #3
   10f30:	e3002ccc 	movw	r2, #3276	; 0xccc
   10f34:	e3402003 	movt	r2, #3
   10f38:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   10f3c:	e3003cf8 	movw	r3, #3320	; 0xcf8
   10f40:	e3403003 	movt	r3, #3
   10f44:	e3002ce0 	movw	r2, #3296	; 0xce0
   10f48:	e3402003 	movt	r2, #3
   10f4c:	e5832000 	str	r2, [r3]
   10f50:	e1a03004 	mov	r3, r4
   10f54:	e3000e9c 	movw	r0, #3740	; 0xe9c
   10f58:	e3400001 	movt	r0, #1
   10f5c:	e1a01003 	mov	r1, r3
   10f60:	eb00123f 	bl	15864 <__cyg_profile_func_exit>
}
   10f64:	e24bd008 	sub	sp, fp, #8
   10f68:	e8bd8810 	pop	{r4, fp, pc}

00010f6c <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   10f6c:	e92d4830 	push	{r4, r5, fp, lr}
   10f70:	e28db00c 	add	fp, sp, #12
   10f74:	e24dd010 	sub	sp, sp, #16
   10f78:	e1a0500e 	mov	r5, lr
   10f7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   10f80:	e1a03005 	mov	r3, r5
   10f84:	e3000f6c 	movw	r0, #3948	; 0xf6c
   10f88:	e3400001 	movt	r0, #1
   10f8c:	e1a01003 	mov	r1, r3
   10f90:	eb0011e1 	bl	1571c <__cyg_profile_func_enter>
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   10f94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   10f98:	e593300c 	ldr	r3, [r3, #12]
   10f9c:	e593300c 	ldr	r3, [r3, #12]
   10fa0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10fa4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10fa8:	e2833018 	add	r3, r3, #24
   10fac:	e1a00003 	mov	r0, r3
   10fb0:	eb0000c1 	bl	112bc <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   10fb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10fb8:	e2833018 	add	r3, r3, #24
   10fbc:	e3000cfc 	movw	r0, #3324	; 0xcfc
   10fc0:	e3400003 	movt	r0, #3
   10fc4:	e1a01003 	mov	r1, r3
   10fc8:	eb00004d 	bl	11104 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   10fcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10fd0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10fd4:	e3003d10 	movw	r3, #3344	; 0xd10
   10fd8:	e3403003 	movt	r3, #3
   10fdc:	e5933000 	ldr	r3, [r3]
   10fe0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10fe4:	e1520003 	cmp	r2, r3
   10fe8:	3a000002 	bcc	10ff8 <xCoRoutineRemoveFromEventList+0x8c>
	{
		xReturn = pdTRUE;
   10fec:	e3a03001 	mov	r3, #1
   10ff0:	e50b3010 	str	r3, [fp, #-16]
   10ff4:	ea000001 	b	11000 <xCoRoutineRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
   10ff8:	e3a03000 	mov	r3, #0
   10ffc:	e50b3010 	str	r3, [fp, #-16]
	}

	return xReturn;
   11000:	e51b4010 	ldr	r4, [fp, #-16]
   11004:	e1a03005 	mov	r3, r5
   11008:	e3000f6c 	movw	r0, #3948	; 0xf6c
   1100c:	e3400001 	movt	r0, #1
   11010:	e1a01003 	mov	r1, r3
   11014:	eb001212 	bl	15864 <__cyg_profile_func_exit>
   11018:	e1a03004 	mov	r3, r4
}
   1101c:	e1a00003 	mov	r0, r3
   11020:	e24bd00c 	sub	sp, fp, #12
   11024:	e8bd8830 	pop	{r4, r5, fp, pc}

00011028 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   11028:	e92d4810 	push	{r4, fp, lr}
   1102c:	e28db008 	add	fp, sp, #8
   11030:	e24dd00c 	sub	sp, sp, #12
   11034:	e1a0400e 	mov	r4, lr
   11038:	e50b0010 	str	r0, [fp, #-16]
   1103c:	e1a03004 	mov	r3, r4
   11040:	e3010028 	movw	r0, #4136	; 0x1028
   11044:	e3400001 	movt	r0, #1
   11048:	e1a01003 	mov	r1, r3
   1104c:	eb0011b2 	bl	1571c <__cyg_profile_func_enter>
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   11050:	e51b3010 	ldr	r3, [fp, #-16]
   11054:	e2832008 	add	r2, r3, #8
   11058:	e51b3010 	ldr	r3, [fp, #-16]
   1105c:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   11060:	e51b3010 	ldr	r3, [fp, #-16]
   11064:	e3e02000 	mvn	r2, #0
   11068:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   1106c:	e51b3010 	ldr	r3, [fp, #-16]
   11070:	e2832008 	add	r2, r3, #8
   11074:	e51b3010 	ldr	r3, [fp, #-16]
   11078:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   1107c:	e51b3010 	ldr	r3, [fp, #-16]
   11080:	e2832008 	add	r2, r3, #8
   11084:	e51b3010 	ldr	r3, [fp, #-16]
   11088:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   1108c:	e51b3010 	ldr	r3, [fp, #-16]
   11090:	e3a02000 	mov	r2, #0
   11094:	e5832000 	str	r2, [r3]
   11098:	e1a03004 	mov	r3, r4
   1109c:	e3010028 	movw	r0, #4136	; 0x1028
   110a0:	e3400001 	movt	r0, #1
   110a4:	e1a01003 	mov	r1, r3
   110a8:	eb0011ed 	bl	15864 <__cyg_profile_func_exit>
}
   110ac:	e24bd008 	sub	sp, fp, #8
   110b0:	e8bd8810 	pop	{r4, fp, pc}

000110b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   110b4:	e92d4810 	push	{r4, fp, lr}
   110b8:	e28db008 	add	fp, sp, #8
   110bc:	e24dd00c 	sub	sp, sp, #12
   110c0:	e1a0400e 	mov	r4, lr
   110c4:	e50b0010 	str	r0, [fp, #-16]
   110c8:	e1a03004 	mov	r3, r4
   110cc:	e30100b4 	movw	r0, #4276	; 0x10b4
   110d0:	e3400001 	movt	r0, #1
   110d4:	e1a01003 	mov	r1, r3
   110d8:	eb00118f 	bl	1571c <__cyg_profile_func_enter>
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   110dc:	e51b3010 	ldr	r3, [fp, #-16]
   110e0:	e3a02000 	mov	r2, #0
   110e4:	e5832010 	str	r2, [r3, #16]
   110e8:	e1a03004 	mov	r3, r4
   110ec:	e30100b4 	movw	r0, #4276	; 0x10b4
   110f0:	e3400001 	movt	r0, #1
   110f4:	e1a01003 	mov	r1, r3
   110f8:	eb0011d9 	bl	15864 <__cyg_profile_func_exit>
}
   110fc:	e24bd008 	sub	sp, fp, #8
   11100:	e8bd8810 	pop	{r4, fp, pc}

00011104 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   11104:	e92d4810 	push	{r4, fp, lr}
   11108:	e28db008 	add	fp, sp, #8
   1110c:	e24dd014 	sub	sp, sp, #20
   11110:	e1a0400e 	mov	r4, lr
   11114:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11118:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1111c:	e1a03004 	mov	r3, r4
   11120:	e3010104 	movw	r0, #4356	; 0x1104
   11124:	e3400001 	movt	r0, #1
   11128:	e1a01003 	mov	r1, r3
   1112c:	eb00117a 	bl	1571c <__cyg_profile_func_enter>

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   11130:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11134:	e5933004 	ldr	r3, [r3, #4]
   11138:	e50b3010 	str	r3, [fp, #-16]

	pxNewListItem->pxNext = pxIndex->pxNext;
   1113c:	e51b3010 	ldr	r3, [fp, #-16]
   11140:	e5932004 	ldr	r2, [r3, #4]
   11144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   11148:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   1114c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11150:	e5932004 	ldr	r2, [r3, #4]
   11154:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   11158:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   1115c:	e51b3010 	ldr	r3, [fp, #-16]
   11160:	e5933004 	ldr	r3, [r3, #4]
   11164:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11168:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   1116c:	e51b3010 	ldr	r3, [fp, #-16]
   11170:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11174:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   11178:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1117c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11180:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   11184:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   11188:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1118c:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   11190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11194:	e5933000 	ldr	r3, [r3]
   11198:	e2832001 	add	r2, r3, #1
   1119c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   111a0:	e5832000 	str	r2, [r3]
   111a4:	e1a03004 	mov	r3, r4
   111a8:	e3010104 	movw	r0, #4356	; 0x1104
   111ac:	e3400001 	movt	r0, #1
   111b0:	e1a01003 	mov	r1, r3
   111b4:	eb0011aa 	bl	15864 <__cyg_profile_func_exit>
}
   111b8:	e24bd008 	sub	sp, fp, #8
   111bc:	e8bd8810 	pop	{r4, fp, pc}

000111c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   111c0:	e92d4810 	push	{r4, fp, lr}
   111c4:	e28db008 	add	fp, sp, #8
   111c8:	e24dd014 	sub	sp, sp, #20
   111cc:	e1a0400e 	mov	r4, lr
   111d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   111d4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   111d8:	e1a03004 	mov	r3, r4
   111dc:	e30101c0 	movw	r0, #4544	; 0x11c0
   111e0:	e3400001 	movt	r0, #1
   111e4:	e1a01003 	mov	r1, r3
   111e8:	eb00114b 	bl	1571c <__cyg_profile_func_enter>
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   111ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   111f0:	e5933000 	ldr	r3, [r3]
   111f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   111f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   111fc:	e3730001 	cmn	r3, #1
   11200:	1a000003 	bne	11214 <vListInsert+0x54>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   11204:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11208:	e5933010 	ldr	r3, [r3, #16]
   1120c:	e50b3010 	str	r3, [fp, #-16]
   11210:	ea00000c 	b	11248 <vListInsert+0x88>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   11214:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11218:	e2833008 	add	r3, r3, #8
   1121c:	e50b3010 	str	r3, [fp, #-16]
   11220:	ea000002 	b	11230 <vListInsert+0x70>
   11224:	e51b3010 	ldr	r3, [fp, #-16]
   11228:	e5933004 	ldr	r3, [r3, #4]
   1122c:	e50b3010 	str	r3, [fp, #-16]
   11230:	e51b3010 	ldr	r3, [fp, #-16]
   11234:	e5933004 	ldr	r3, [r3, #4]
   11238:	e5932000 	ldr	r2, [r3]
   1123c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11240:	e1520003 	cmp	r2, r3
   11244:	9afffff6 	bls	11224 <vListInsert+0x64>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   11248:	e51b3010 	ldr	r3, [fp, #-16]
   1124c:	e5932004 	ldr	r2, [r3, #4]
   11250:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   11254:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   11258:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1125c:	e5933004 	ldr	r3, [r3, #4]
   11260:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11264:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   11268:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1126c:	e51b2010 	ldr	r2, [fp, #-16]
   11270:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   11274:	e51b3010 	ldr	r3, [fp, #-16]
   11278:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   1127c:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   11280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   11284:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   11288:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1128c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11290:	e5933000 	ldr	r3, [r3]
   11294:	e2832001 	add	r2, r3, #1
   11298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1129c:	e5832000 	str	r2, [r3]
   112a0:	e1a03004 	mov	r3, r4
   112a4:	e30101c0 	movw	r0, #4544	; 0x11c0
   112a8:	e3400001 	movt	r0, #1
   112ac:	e1a01003 	mov	r1, r3
   112b0:	eb00116b 	bl	15864 <__cyg_profile_func_exit>
}
   112b4:	e24bd008 	sub	sp, fp, #8
   112b8:	e8bd8810 	pop	{r4, fp, pc}

000112bc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   112bc:	e92d4810 	push	{r4, fp, lr}
   112c0:	e28db008 	add	fp, sp, #8
   112c4:	e24dd014 	sub	sp, sp, #20
   112c8:	e1a0400e 	mov	r4, lr
   112cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   112d0:	e1a03004 	mov	r3, r4
   112d4:	e30102bc 	movw	r0, #4796	; 0x12bc
   112d8:	e3400001 	movt	r0, #1
   112dc:	e1a01003 	mov	r1, r3
   112e0:	eb00110d 	bl	1571c <__cyg_profile_func_enter>
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   112e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112e8:	e5933004 	ldr	r3, [r3, #4]
   112ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   112f0:	e5922008 	ldr	r2, [r2, #8]
   112f4:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   112f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112fc:	e5933008 	ldr	r3, [r3, #8]
   11300:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   11304:	e5922004 	ldr	r2, [r2, #4]
   11308:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   1130c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11310:	e5933010 	ldr	r3, [r3, #16]
   11314:	e50b3010 	str	r3, [fp, #-16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   11318:	e51b3010 	ldr	r3, [fp, #-16]
   1131c:	e5932004 	ldr	r2, [r3, #4]
   11320:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11324:	e1520003 	cmp	r2, r3
   11328:	1a000003 	bne	1133c <vListRemove+0x80>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1132c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11330:	e5932008 	ldr	r2, [r3, #8]
   11334:	e51b3010 	ldr	r3, [fp, #-16]
   11338:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   1133c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11340:	e3a02000 	mov	r2, #0
   11344:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   11348:	e51b3010 	ldr	r3, [fp, #-16]
   1134c:	e5933000 	ldr	r3, [r3]
   11350:	e2432001 	sub	r2, r3, #1
   11354:	e51b3010 	ldr	r3, [fp, #-16]
   11358:	e5832000 	str	r2, [r3]
   1135c:	e1a03004 	mov	r3, r4
   11360:	e30102bc 	movw	r0, #4796	; 0x12bc
   11364:	e3400001 	movt	r0, #1
   11368:	e1a01003 	mov	r1, r3
   1136c:	eb00113c 	bl	15864 <__cyg_profile_func_exit>
}
   11370:	e24bd008 	sub	sp, fp, #8
   11374:	e8bd8810 	pop	{r4, fp, pc}

00011378 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   11378:	e92d4830 	push	{r4, r5, fp, lr}
   1137c:	e28db00c 	add	fp, sp, #12
   11380:	e24dd008 	sub	sp, sp, #8
   11384:	e1a0500e 	mov	r5, lr
   11388:	e50b0010 	str	r0, [fp, #-16]
   1138c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11390:	e1a03005 	mov	r3, r5
   11394:	e3010378 	movw	r0, #4984	; 0x1378
   11398:	e3400001 	movt	r0, #1
   1139c:	e1a01003 	mov	r1, r3
   113a0:	eb0010dd 	bl	1571c <__cyg_profile_func_enter>
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   113a4:	ebfffca7 	bl	10648 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   113a8:	e51b3010 	ldr	r3, [fp, #-16]
   113ac:	e5932000 	ldr	r2, [r3]
   113b0:	e51b3010 	ldr	r3, [fp, #-16]
   113b4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   113b8:	e51b1010 	ldr	r1, [fp, #-16]
   113bc:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   113c0:	e0030391 	mul	r3, r1, r3
   113c4:	e0822003 	add	r2, r2, r3
   113c8:	e51b3010 	ldr	r3, [fp, #-16]
   113cc:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   113d0:	e51b3010 	ldr	r3, [fp, #-16]
   113d4:	e3a02000 	mov	r2, #0
   113d8:	e5832038 	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   113dc:	e51b3010 	ldr	r3, [fp, #-16]
   113e0:	e5932000 	ldr	r2, [r3]
   113e4:	e51b3010 	ldr	r3, [fp, #-16]
   113e8:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   113ec:	e51b3010 	ldr	r3, [fp, #-16]
   113f0:	e5932000 	ldr	r2, [r3]
   113f4:	e51b3010 	ldr	r3, [fp, #-16]
   113f8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   113fc:	e2433001 	sub	r3, r3, #1
   11400:	e51b1010 	ldr	r1, [fp, #-16]
   11404:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11408:	e0030391 	mul	r3, r1, r3
   1140c:	e0822003 	add	r2, r2, r3
   11410:	e51b3010 	ldr	r3, [fp, #-16]
   11414:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   11418:	e51b3010 	ldr	r3, [fp, #-16]
   1141c:	e3e02000 	mvn	r2, #0
   11420:	e5832044 	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   11424:	e51b3010 	ldr	r3, [fp, #-16]
   11428:	e3e02000 	mvn	r2, #0
   1142c:	e5832048 	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   11430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11434:	e3530000 	cmp	r3, #0
   11438:	1a00000c 	bne	11470 <xQueueGenericReset+0xf8>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1143c:	e51b3010 	ldr	r3, [fp, #-16]
   11440:	e5933010 	ldr	r3, [r3, #16]
   11444:	e3530000 	cmp	r3, #0
   11448:	0a000010 	beq	11490 <xQueueGenericReset+0x118>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   1144c:	e51b3010 	ldr	r3, [fp, #-16]
   11450:	e2833010 	add	r3, r3, #16
   11454:	e1a00003 	mov	r0, r3
   11458:	eb00092f 	bl	1391c <xTaskRemoveFromEventList>
   1145c:	e1a03000 	mov	r3, r0
   11460:	e3530001 	cmp	r3, #1
   11464:	1a000009 	bne	11490 <xQueueGenericReset+0x118>
				{
					portYIELD_WITHIN_API();
   11468:	ef000000 	svc	0x00000000
   1146c:	ea000007 	b	11490 <xQueueGenericReset+0x118>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   11470:	e51b3010 	ldr	r3, [fp, #-16]
   11474:	e2833010 	add	r3, r3, #16
   11478:	e1a00003 	mov	r0, r3
   1147c:	ebfffee9 	bl	11028 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   11480:	e51b3010 	ldr	r3, [fp, #-16]
   11484:	e2833024 	add	r3, r3, #36	; 0x24
   11488:	e1a00003 	mov	r0, r3
   1148c:	ebfffee5 	bl	11028 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   11490:	ebfffc86 	bl	106b0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   11494:	e3a04001 	mov	r4, #1
   11498:	e1a03005 	mov	r3, r5
   1149c:	e3010378 	movw	r0, #4984	; 0x1378
   114a0:	e3400001 	movt	r0, #1
   114a4:	e1a01003 	mov	r1, r3
   114a8:	eb0010ed 	bl	15864 <__cyg_profile_func_exit>
   114ac:	e1a03004 	mov	r3, r4
}
   114b0:	e1a00003 	mov	r0, r3
   114b4:	e24bd00c 	sub	sp, fp, #12
   114b8:	e8bd8830 	pop	{r4, r5, fp, pc}

000114bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   114bc:	e92d4830 	push	{r4, r5, fp, lr}
   114c0:	e28db00c 	add	fp, sp, #12
   114c4:	e24dd020 	sub	sp, sp, #32
   114c8:	e1a0500e 	mov	r5, lr
   114cc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   114d0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   114d4:	e1a03002 	mov	r3, r2
   114d8:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
   114dc:	e1a03005 	mov	r3, r5
   114e0:	e30104bc 	movw	r0, #5308	; 0x14bc
   114e4:	e3400001 	movt	r0, #1
   114e8:	e1a01003 	mov	r1, r3
   114ec:	eb00108a 	bl	1571c <__cyg_profile_func_enter>
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   114f0:	e3a03000 	mov	r3, #0
   114f4:	e50b3010 	str	r3, [fp, #-16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   114f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   114fc:	e3530000 	cmp	r3, #0
   11500:	0a000021 	beq	1158c <xQueueGenericCreate+0xd0>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   11504:	e3a0004c 	mov	r0, #76	; 0x4c
   11508:	eb000e51 	bl	14e54 <pvPortMalloc>
   1150c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
		if( pxNewQueue != NULL )
   11510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11514:	e3530000 	cmp	r3, #0
   11518:	0a00001b 	beq	1158c <xQueueGenericCreate+0xd0>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   1151c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11520:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11524:	e0030392 	mul	r3, r2, r3
   11528:	e2833001 	add	r3, r3, #1
   1152c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   11530:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11534:	eb000e46 	bl	14e54 <pvPortMalloc>
   11538:	e1a02000 	mov	r2, r0
   1153c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11540:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   11544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11548:	e5933000 	ldr	r3, [r3]
   1154c:	e3530000 	cmp	r3, #0
   11550:	0a00000b 	beq	11584 <xQueueGenericCreate+0xc8>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   11554:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11558:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   1155c:	e583203c 	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   11560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11564:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11568:	e5832040 	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   1156c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   11570:	e3a01001 	mov	r1, #1
   11574:	ebffff7f 	bl	11378 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   11578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1157c:	e50b3010 	str	r3, [fp, #-16]
   11580:	ea000001 	b	1158c <xQueueGenericCreate+0xd0>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   11584:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   11588:	eb000eb3 	bl	1505c <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   1158c:	e51b4010 	ldr	r4, [fp, #-16]
   11590:	e1a03005 	mov	r3, r5
   11594:	e30104bc 	movw	r0, #5308	; 0x14bc
   11598:	e3400001 	movt	r0, #1
   1159c:	e1a01003 	mov	r1, r3
   115a0:	eb0010af 	bl	15864 <__cyg_profile_func_exit>
   115a4:	e1a03004 	mov	r3, r4
}
   115a8:	e1a00003 	mov	r0, r3
   115ac:	e24bd00c 	sub	sp, fp, #12
   115b0:	e8bd8830 	pop	{r4, r5, fp, pc}

000115b4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   115b4:	e92d4830 	push	{r4, r5, fp, lr}
   115b8:	e28db00c 	add	fp, sp, #12
   115bc:	e24dd020 	sub	sp, sp, #32
   115c0:	e1a0500e 	mov	r5, lr
   115c4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   115c8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   115cc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   115d0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   115d4:	e1a03005 	mov	r3, r5
   115d8:	e30105b4 	movw	r0, #5556	; 0x15b4
   115dc:	e3400001 	movt	r0, #1
   115e0:	e1a01003 	mov	r1, r3
   115e4:	eb00104c 	bl	1571c <__cyg_profile_func_enter>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   115e8:	e3a03000 	mov	r3, #0
   115ec:	e50b3010 	str	r3, [fp, #-16]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   115f0:	ebfffc14 	bl	10648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   115f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   115f8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   115fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11600:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11604:	e1520003 	cmp	r2, r3
   11608:	2a000012 	bcs	11658 <xQueueGenericSend+0xa4>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1160c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   11610:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   11614:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   11618:	eb0001b9 	bl	11d04 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1161c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11620:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11624:	e3530000 	cmp	r3, #0
   11628:	0a000007 	beq	1164c <xQueueGenericSend+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   1162c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11630:	e2833024 	add	r3, r3, #36	; 0x24
   11634:	e1a00003 	mov	r0, r3
   11638:	eb0008b7 	bl	1391c <xTaskRemoveFromEventList>
   1163c:	e1a03000 	mov	r3, r0
   11640:	e3530001 	cmp	r3, #1
   11644:	1a000000 	bne	1164c <xQueueGenericSend+0x98>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   11648:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   1164c:	ebfffc17 	bl	106b0 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   11650:	e3a04001 	mov	r4, #1
   11654:	ea000044 	b	1176c <xQueueGenericSend+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11658:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1165c:	e3530000 	cmp	r3, #0
   11660:	1a000002 	bne	11670 <xQueueGenericSend+0xbc>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11664:	ebfffc11 	bl	106b0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   11668:	e3a04000 	mov	r4, #0
   1166c:	ea00003e 	b	1176c <xQueueGenericSend+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
   11670:	e51b3010 	ldr	r3, [fp, #-16]
   11674:	e3530000 	cmp	r3, #0
   11678:	1a000004 	bne	11690 <xQueueGenericSend+0xdc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1167c:	e24b3018 	sub	r3, fp, #24
   11680:	e1a00003 	mov	r0, r3
   11684:	eb0008f5 	bl	13a60 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11688:	e3a03001 	mov	r3, #1
   1168c:	e50b3010 	str	r3, [fp, #-16]
				}
			}
		}
		taskEXIT_CRITICAL();
   11690:	ebfffc06 	bl	106b0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11694:	eb00063d 	bl	12f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11698:	ebfffbea 	bl	10648 <vPortEnterCritical>
   1169c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   116a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   116a4:	e3730001 	cmn	r3, #1
   116a8:	1a000002 	bne	116b8 <xQueueGenericSend+0x104>
   116ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   116b0:	e3a02000 	mov	r2, #0
   116b4:	e5832044 	str	r2, [r3, #68]	; 0x44
   116b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   116bc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   116c0:	e3730001 	cmn	r3, #1
   116c4:	1a000002 	bne	116d4 <xQueueGenericSend+0x120>
   116c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   116cc:	e3a02000 	mov	r2, #0
   116d0:	e5832048 	str	r2, [r3, #72]	; 0x48
   116d4:	ebfffbf5 	bl	106b0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   116d8:	e24b2018 	sub	r2, fp, #24
   116dc:	e24b3028 	sub	r3, fp, #40	; 0x28
   116e0:	e1a00002 	mov	r0, r2
   116e4:	e1a01003 	mov	r1, r3
   116e8:	eb0008f7 	bl	13acc <xTaskCheckForTimeOut>
   116ec:	e1a03000 	mov	r3, r0
   116f0:	e3530000 	cmp	r3, #0
   116f4:	1a000016 	bne	11754 <xQueueGenericSend+0x1a0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   116f8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   116fc:	eb000289 	bl	12128 <prvIsQueueFull>
   11700:	e1a03000 	mov	r3, r0
   11704:	e3530000 	cmp	r3, #0
   11708:	0a00000d 	beq	11744 <xQueueGenericSend+0x190>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1170c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11710:	e2832010 	add	r2, r3, #16
   11714:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   11718:	e1a00002 	mov	r0, r2
   1171c:	e1a01003 	mov	r1, r3
   11720:	eb00084a 	bl	13850 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   11724:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   11728:	eb0001fb 	bl	11f1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1172c:	eb00062c 	bl	12fe4 <xTaskResumeAll>
   11730:	e1a03000 	mov	r3, r0
   11734:	e3530000 	cmp	r3, #0
   11738:	1a00000a 	bne	11768 <xQueueGenericSend+0x1b4>
				{
					portYIELD_WITHIN_API();
   1173c:	ef000000 	svc	0x00000000
   11740:	ea000008 	b	11768 <xQueueGenericSend+0x1b4>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11744:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   11748:	eb0001f3 	bl	11f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1174c:	eb000624 	bl	12fe4 <xTaskResumeAll>
   11750:	eaffffa6 	b	115f0 <xQueueGenericSend+0x3c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   11754:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   11758:	eb0001ef 	bl	11f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1175c:	eb000620 	bl	12fe4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   11760:	e3a04000 	mov	r4, #0
   11764:	ea000000 	b	1176c <xQueueGenericSend+0x1b8>
		}
	}
   11768:	eaffffa0 	b	115f0 <xQueueGenericSend+0x3c>
   1176c:	e1a03005 	mov	r3, r5
   11770:	e30105b4 	movw	r0, #5556	; 0x15b4
   11774:	e3400001 	movt	r0, #1
   11778:	e1a01003 	mov	r1, r3
   1177c:	eb001038 	bl	15864 <__cyg_profile_func_exit>
   11780:	e1a03004 	mov	r3, r4
}
   11784:	e1a00003 	mov	r0, r3
   11788:	e24bd00c 	sub	sp, fp, #12
   1178c:	e8bd8830 	pop	{r4, r5, fp, pc}

00011790 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   11790:	e92d4830 	push	{r4, r5, fp, lr}
   11794:	e28db00c 	add	fp, sp, #12
   11798:	e24dd018 	sub	sp, sp, #24
   1179c:	e1a0500e 	mov	r5, lr
   117a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   117a4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   117a8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   117ac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   117b0:	e1a03005 	mov	r3, r5
   117b4:	e3010790 	movw	r0, #6032	; 0x1790
   117b8:	e3400001 	movt	r0, #1
   117bc:	e1a01003 	mov	r1, r3
   117c0:	eb000fd5 	bl	1571c <__cyg_profile_func_enter>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   117c4:	e3a03000 	mov	r3, #0
   117c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   117cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   117d0:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   117d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   117d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   117dc:	e1520003 	cmp	r2, r3
   117e0:	2a000021 	bcs	1186c <xQueueGenericSendFromISR+0xdc>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   117e4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   117e8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   117ec:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   117f0:	eb000143 	bl	11d04 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   117f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   117f8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   117fc:	e3730001 	cmn	r3, #1
   11800:	1a000011 	bne	1184c <xQueueGenericSendFromISR+0xbc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   11804:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11808:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1180c:	e3530000 	cmp	r3, #0
   11810:	0a000012 	beq	11860 <xQueueGenericSendFromISR+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   11814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11818:	e2833024 	add	r3, r3, #36	; 0x24
   1181c:	e1a00003 	mov	r0, r3
   11820:	eb00083d 	bl	1391c <xTaskRemoveFromEventList>
   11824:	e1a03000 	mov	r3, r0
   11828:	e3530000 	cmp	r3, #0
   1182c:	0a00000b 	beq	11860 <xQueueGenericSendFromISR+0xd0>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   11830:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11834:	e3530000 	cmp	r3, #0
   11838:	0a000008 	beq	11860 <xQueueGenericSendFromISR+0xd0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   1183c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11840:	e3a02001 	mov	r2, #1
   11844:	e5832000 	str	r2, [r3]
   11848:	ea000004 	b	11860 <xQueueGenericSendFromISR+0xd0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   1184c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11850:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   11854:	e2832001 	add	r2, r3, #1
   11858:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1185c:	e5832048 	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   11860:	e3a03001 	mov	r3, #1
   11864:	e50b3010 	str	r3, [fp, #-16]
   11868:	ea000001 	b	11874 <xQueueGenericSendFromISR+0xe4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1186c:	e3a03000 	mov	r3, #0
   11870:	e50b3010 	str	r3, [fp, #-16]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11874:	e51b4010 	ldr	r4, [fp, #-16]
   11878:	e1a03005 	mov	r3, r5
   1187c:	e3010790 	movw	r0, #6032	; 0x1790
   11880:	e3400001 	movt	r0, #1
   11884:	e1a01003 	mov	r1, r3
   11888:	eb000ff5 	bl	15864 <__cyg_profile_func_exit>
   1188c:	e1a03004 	mov	r3, r4
}
   11890:	e1a00003 	mov	r0, r3
   11894:	e24bd00c 	sub	sp, fp, #12
   11898:	e8bd8830 	pop	{r4, r5, fp, pc}

0001189c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   1189c:	e92d4830 	push	{r4, r5, fp, lr}
   118a0:	e28db00c 	add	fp, sp, #12
   118a4:	e24dd020 	sub	sp, sp, #32
   118a8:	e1a0500e 	mov	r5, lr
   118ac:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   118b0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   118b4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   118b8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   118bc:	e1a03005 	mov	r3, r5
   118c0:	e301089c 	movw	r0, #6300	; 0x189c
   118c4:	e3400001 	movt	r0, #1
   118c8:	e1a01003 	mov	r1, r3
   118cc:	eb000f92 	bl	1571c <__cyg_profile_func_enter>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   118d0:	e3a03000 	mov	r3, #0
   118d4:	e50b3010 	str	r3, [fp, #-16]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   118d8:	ebfffb5a 	bl	10648 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   118dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   118e0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   118e4:	e3530000 	cmp	r3, #0
   118e8:	0a00002c 	beq	119a0 <xQueueGenericReceive+0x104>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   118ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   118f0:	e593300c 	ldr	r3, [r3, #12]
   118f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   118f8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   118fc:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   11900:	eb000156 	bl	11e60 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   11904:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   11908:	e3530000 	cmp	r3, #0
   1190c:	1a000011 	bne	11958 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   11910:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11914:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11918:	e2432001 	sub	r2, r3, #1
   1191c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11920:	e5832038 	str	r2, [r3, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11924:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11928:	e5933010 	ldr	r3, [r3, #16]
   1192c:	e3530000 	cmp	r3, #0
   11930:	0a000017 	beq	11994 <xQueueGenericReceive+0xf8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   11934:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11938:	e2833010 	add	r3, r3, #16
   1193c:	e1a00003 	mov	r0, r3
   11940:	eb0007f5 	bl	1391c <xTaskRemoveFromEventList>
   11944:	e1a03000 	mov	r3, r0
   11948:	e3530001 	cmp	r3, #1
   1194c:	1a000010 	bne	11994 <xQueueGenericReceive+0xf8>
						{
							portYIELD_WITHIN_API();
   11950:	ef000000 	svc	0x00000000
   11954:	ea00000e 	b	11994 <xQueueGenericReceive+0xf8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   11958:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1195c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   11960:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   11964:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11968:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1196c:	e3530000 	cmp	r3, #0
   11970:	0a000007 	beq	11994 <xQueueGenericReceive+0xf8>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   11974:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11978:	e2833024 	add	r3, r3, #36	; 0x24
   1197c:	e1a00003 	mov	r0, r3
   11980:	eb0007e5 	bl	1391c <xTaskRemoveFromEventList>
   11984:	e1a03000 	mov	r3, r0
   11988:	e3530000 	cmp	r3, #0
   1198c:	0a000000 	beq	11994 <xQueueGenericReceive+0xf8>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   11990:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   11994:	ebfffb45 	bl	106b0 <vPortExitCritical>
				return pdPASS;
   11998:	e3a04001 	mov	r4, #1
   1199c:	ea000044 	b	11ab4 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   119a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   119a4:	e3530000 	cmp	r3, #0
   119a8:	1a000002 	bne	119b8 <xQueueGenericReceive+0x11c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   119ac:	ebfffb3f 	bl	106b0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   119b0:	e3a04000 	mov	r4, #0
   119b4:	ea00003e 	b	11ab4 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
   119b8:	e51b3010 	ldr	r3, [fp, #-16]
   119bc:	e3530000 	cmp	r3, #0
   119c0:	1a000004 	bne	119d8 <xQueueGenericReceive+0x13c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   119c4:	e24b301c 	sub	r3, fp, #28
   119c8:	e1a00003 	mov	r0, r3
   119cc:	eb000823 	bl	13a60 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   119d0:	e3a03001 	mov	r3, #1
   119d4:	e50b3010 	str	r3, [fp, #-16]
				}
			}
		}
		taskEXIT_CRITICAL();
   119d8:	ebfffb34 	bl	106b0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   119dc:	eb00056b 	bl	12f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   119e0:	ebfffb18 	bl	10648 <vPortEnterCritical>
   119e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   119e8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   119ec:	e3730001 	cmn	r3, #1
   119f0:	1a000002 	bne	11a00 <xQueueGenericReceive+0x164>
   119f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   119f8:	e3a02000 	mov	r2, #0
   119fc:	e5832044 	str	r2, [r3, #68]	; 0x44
   11a00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a04:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   11a08:	e3730001 	cmn	r3, #1
   11a0c:	1a000002 	bne	11a1c <xQueueGenericReceive+0x180>
   11a10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a14:	e3a02000 	mov	r2, #0
   11a18:	e5832048 	str	r2, [r3, #72]	; 0x48
   11a1c:	ebfffb23 	bl	106b0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   11a20:	e24b201c 	sub	r2, fp, #28
   11a24:	e24b3028 	sub	r3, fp, #40	; 0x28
   11a28:	e1a00002 	mov	r0, r2
   11a2c:	e1a01003 	mov	r1, r3
   11a30:	eb000825 	bl	13acc <xTaskCheckForTimeOut>
   11a34:	e1a03000 	mov	r3, r0
   11a38:	e3530000 	cmp	r3, #0
   11a3c:	1a000016 	bne	11a9c <xQueueGenericReceive+0x200>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   11a40:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a44:	eb00017f 	bl	12048 <prvIsQueueEmpty>
   11a48:	e1a03000 	mov	r3, r0
   11a4c:	e3530000 	cmp	r3, #0
   11a50:	0a00000d 	beq	11a8c <xQueueGenericReceive+0x1f0>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   11a54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a58:	e2832024 	add	r2, r3, #36	; 0x24
   11a5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   11a60:	e1a00002 	mov	r0, r2
   11a64:	e1a01003 	mov	r1, r3
   11a68:	eb000778 	bl	13850 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   11a6c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a70:	eb000129 	bl	11f1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   11a74:	eb00055a 	bl	12fe4 <xTaskResumeAll>
   11a78:	e1a03000 	mov	r3, r0
   11a7c:	e3530000 	cmp	r3, #0
   11a80:	1a00000a 	bne	11ab0 <xQueueGenericReceive+0x214>
				{
					portYIELD_WITHIN_API();
   11a84:	ef000000 	svc	0x00000000
   11a88:	ea000008 	b	11ab0 <xQueueGenericReceive+0x214>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11a8c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a90:	eb000121 	bl	11f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
   11a94:	eb000552 	bl	12fe4 <xTaskResumeAll>
   11a98:	eaffff8e 	b	118d8 <xQueueGenericReceive+0x3c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   11a9c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   11aa0:	eb00011d 	bl	11f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
   11aa4:	eb00054e 	bl	12fe4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   11aa8:	e3a04000 	mov	r4, #0
   11aac:	ea000000 	b	11ab4 <xQueueGenericReceive+0x218>
		}
	}
   11ab0:	eaffff88 	b	118d8 <xQueueGenericReceive+0x3c>
   11ab4:	e1a03005 	mov	r3, r5
   11ab8:	e301089c 	movw	r0, #6300	; 0x189c
   11abc:	e3400001 	movt	r0, #1
   11ac0:	e1a01003 	mov	r1, r3
   11ac4:	eb000f66 	bl	15864 <__cyg_profile_func_exit>
   11ac8:	e1a03004 	mov	r3, r4
}
   11acc:	e1a00003 	mov	r0, r3
   11ad0:	e24bd00c 	sub	sp, fp, #12
   11ad4:	e8bd8830 	pop	{r4, r5, fp, pc}

00011ad8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   11ad8:	e92d4830 	push	{r4, r5, fp, lr}
   11adc:	e28db00c 	add	fp, sp, #12
   11ae0:	e24dd018 	sub	sp, sp, #24
   11ae4:	e1a0500e 	mov	r5, lr
   11ae8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11aec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11af0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   11af4:	e1a03005 	mov	r3, r5
   11af8:	e3010ad8 	movw	r0, #6872	; 0x1ad8
   11afc:	e3400001 	movt	r0, #1
   11b00:	e1a01003 	mov	r1, r3
   11b04:	eb000f04 	bl	1571c <__cyg_profile_func_enter>
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11b08:	e3a03000 	mov	r3, #0
   11b0c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11b10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b14:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11b18:	e3530000 	cmp	r3, #0
   11b1c:	0a000025 	beq	11bb8 <xQueueReceiveFromISR+0xe0>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   11b20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11b24:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11b28:	eb0000cc 	bl	11e60 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   11b2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b30:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11b34:	e2432001 	sub	r2, r3, #1
   11b38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b3c:	e5832038 	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   11b40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b44:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11b48:	e3730001 	cmn	r3, #1
   11b4c:	1a000011 	bne	11b98 <xQueueReceiveFromISR+0xc0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11b50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b54:	e5933010 	ldr	r3, [r3, #16]
   11b58:	e3530000 	cmp	r3, #0
   11b5c:	0a000012 	beq	11bac <xQueueReceiveFromISR+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11b60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b64:	e2833010 	add	r3, r3, #16
   11b68:	e1a00003 	mov	r0, r3
   11b6c:	eb00076a 	bl	1391c <xTaskRemoveFromEventList>
   11b70:	e1a03000 	mov	r3, r0
   11b74:	e3530000 	cmp	r3, #0
   11b78:	0a00000b 	beq	11bac <xQueueReceiveFromISR+0xd4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   11b7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b80:	e3530000 	cmp	r3, #0
   11b84:	0a000008 	beq	11bac <xQueueReceiveFromISR+0xd4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   11b88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b8c:	e3a02001 	mov	r2, #1
   11b90:	e5832000 	str	r2, [r3]
   11b94:	ea000004 	b	11bac <xQueueReceiveFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   11b98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b9c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11ba0:	e2832001 	add	r2, r3, #1
   11ba4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ba8:	e5832044 	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   11bac:	e3a03001 	mov	r3, #1
   11bb0:	e50b3010 	str	r3, [fp, #-16]
   11bb4:	ea000001 	b	11bc0 <xQueueReceiveFromISR+0xe8>
		}
		else
		{
			xReturn = pdFAIL;
   11bb8:	e3a03000 	mov	r3, #0
   11bbc:	e50b3010 	str	r3, [fp, #-16]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11bc0:	e51b4010 	ldr	r4, [fp, #-16]
   11bc4:	e1a03005 	mov	r3, r5
   11bc8:	e3010ad8 	movw	r0, #6872	; 0x1ad8
   11bcc:	e3400001 	movt	r0, #1
   11bd0:	e1a01003 	mov	r1, r3
   11bd4:	eb000f22 	bl	15864 <__cyg_profile_func_exit>
   11bd8:	e1a03004 	mov	r3, r4
}
   11bdc:	e1a00003 	mov	r0, r3
   11be0:	e24bd00c 	sub	sp, fp, #12
   11be4:	e8bd8830 	pop	{r4, r5, fp, pc}

00011be8 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   11be8:	e92d4830 	push	{r4, r5, fp, lr}
   11bec:	e28db00c 	add	fp, sp, #12
   11bf0:	e24dd010 	sub	sp, sp, #16
   11bf4:	e1a0500e 	mov	r5, lr
   11bf8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11bfc:	e1a03005 	mov	r3, r5
   11c00:	e3010be8 	movw	r0, #7144	; 0x1be8
   11c04:	e3400001 	movt	r0, #1
   11c08:	e1a01003 	mov	r1, r3
   11c0c:	eb000ec2 	bl	1571c <__cyg_profile_func_enter>
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11c10:	ebfffa8c 	bl	10648 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   11c14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c18:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11c1c:	e50b3010 	str	r3, [fp, #-16]
	taskEXIT_CRITICAL();
   11c20:	ebfffaa2 	bl	106b0 <vPortExitCritical>

	return uxReturn;
   11c24:	e51b4010 	ldr	r4, [fp, #-16]
   11c28:	e1a03005 	mov	r3, r5
   11c2c:	e3010be8 	movw	r0, #7144	; 0x1be8
   11c30:	e3400001 	movt	r0, #1
   11c34:	e1a01003 	mov	r1, r3
   11c38:	eb000f09 	bl	15864 <__cyg_profile_func_exit>
   11c3c:	e1a03004 	mov	r3, r4
}
   11c40:	e1a00003 	mov	r0, r3
   11c44:	e24bd00c 	sub	sp, fp, #12
   11c48:	e8bd8830 	pop	{r4, r5, fp, pc}

00011c4c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   11c4c:	e92d4830 	push	{r4, r5, fp, lr}
   11c50:	e28db00c 	add	fp, sp, #12
   11c54:	e24dd010 	sub	sp, sp, #16
   11c58:	e1a0500e 	mov	r5, lr
   11c5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11c60:	e1a03005 	mov	r3, r5
   11c64:	e3010c4c 	movw	r0, #7244	; 0x1c4c
   11c68:	e3400001 	movt	r0, #1
   11c6c:	e1a01003 	mov	r1, r3
   11c70:	eb000ea9 	bl	1571c <__cyg_profile_func_enter>
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   11c74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c78:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11c7c:	e50b3010 	str	r3, [fp, #-16]

	return uxReturn;
   11c80:	e51b4010 	ldr	r4, [fp, #-16]
   11c84:	e1a03005 	mov	r3, r5
   11c88:	e3010c4c 	movw	r0, #7244	; 0x1c4c
   11c8c:	e3400001 	movt	r0, #1
   11c90:	e1a01003 	mov	r1, r3
   11c94:	eb000ef2 	bl	15864 <__cyg_profile_func_exit>
   11c98:	e1a03004 	mov	r3, r4
}
   11c9c:	e1a00003 	mov	r0, r3
   11ca0:	e24bd00c 	sub	sp, fp, #12
   11ca4:	e8bd8830 	pop	{r4, r5, fp, pc}

00011ca8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   11ca8:	e92d4810 	push	{r4, fp, lr}
   11cac:	e28db008 	add	fp, sp, #8
   11cb0:	e24dd00c 	sub	sp, sp, #12
   11cb4:	e1a0400e 	mov	r4, lr
   11cb8:	e50b0010 	str	r0, [fp, #-16]
   11cbc:	e1a03004 	mov	r3, r4
   11cc0:	e3010ca8 	movw	r0, #7336	; 0x1ca8
   11cc4:	e3400001 	movt	r0, #1
   11cc8:	e1a01003 	mov	r1, r3
   11ccc:	eb000e92 	bl	1571c <__cyg_profile_func_enter>
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   11cd0:	e51b3010 	ldr	r3, [fp, #-16]
   11cd4:	e5933000 	ldr	r3, [r3]
   11cd8:	e1a00003 	mov	r0, r3
   11cdc:	eb000cde 	bl	1505c <vPortFree>
	vPortFree( pxQueue );
   11ce0:	e51b0010 	ldr	r0, [fp, #-16]
   11ce4:	eb000cdc 	bl	1505c <vPortFree>
   11ce8:	e1a03004 	mov	r3, r4
   11cec:	e3010ca8 	movw	r0, #7336	; 0x1ca8
   11cf0:	e3400001 	movt	r0, #1
   11cf4:	e1a01003 	mov	r1, r3
   11cf8:	eb000ed9 	bl	15864 <__cyg_profile_func_exit>
}
   11cfc:	e24bd008 	sub	sp, fp, #8
   11d00:	e8bd8810 	pop	{r4, fp, pc}

00011d04 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   11d04:	e92d4810 	push	{r4, fp, lr}
   11d08:	e28db008 	add	fp, sp, #8
   11d0c:	e24dd014 	sub	sp, sp, #20
   11d10:	e1a0400e 	mov	r4, lr
   11d14:	e50b0010 	str	r0, [fp, #-16]
   11d18:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11d1c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   11d20:	e1a03004 	mov	r3, r4
   11d24:	e3010d04 	movw	r0, #7428	; 0x1d04
   11d28:	e3400001 	movt	r0, #1
   11d2c:	e1a01003 	mov	r1, r3
   11d30:	eb000e79 	bl	1571c <__cyg_profile_func_enter>
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   11d34:	e51b3010 	ldr	r3, [fp, #-16]
   11d38:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11d3c:	e3530000 	cmp	r3, #0
   11d40:	0a00003a 	beq	11e30 <prvCopyDataToQueue+0x12c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   11d44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11d48:	e3530000 	cmp	r3, #0
   11d4c:	1a000019 	bne	11db8 <prvCopyDataToQueue+0xb4>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   11d50:	e51b3010 	ldr	r3, [fp, #-16]
   11d54:	e5932008 	ldr	r2, [r3, #8]
   11d58:	e51b3010 	ldr	r3, [fp, #-16]
   11d5c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11d60:	e1a00002 	mov	r0, r2
   11d64:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   11d68:	e1a02003 	mov	r2, r3
   11d6c:	eb0013b9 	bl	16c58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   11d70:	e51b3010 	ldr	r3, [fp, #-16]
   11d74:	e5932008 	ldr	r2, [r3, #8]
   11d78:	e51b3010 	ldr	r3, [fp, #-16]
   11d7c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11d80:	e0822003 	add	r2, r2, r3
   11d84:	e51b3010 	ldr	r3, [fp, #-16]
   11d88:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   11d8c:	e51b3010 	ldr	r3, [fp, #-16]
   11d90:	e5932008 	ldr	r2, [r3, #8]
   11d94:	e51b3010 	ldr	r3, [fp, #-16]
   11d98:	e5933004 	ldr	r3, [r3, #4]
   11d9c:	e1520003 	cmp	r2, r3
   11da0:	3a000022 	bcc	11e30 <prvCopyDataToQueue+0x12c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   11da4:	e51b3010 	ldr	r3, [fp, #-16]
   11da8:	e5932000 	ldr	r2, [r3]
   11dac:	e51b3010 	ldr	r3, [fp, #-16]
   11db0:	e5832008 	str	r2, [r3, #8]
   11db4:	ea00001d 	b	11e30 <prvCopyDataToQueue+0x12c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   11db8:	e51b3010 	ldr	r3, [fp, #-16]
   11dbc:	e593200c 	ldr	r2, [r3, #12]
   11dc0:	e51b3010 	ldr	r3, [fp, #-16]
   11dc4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11dc8:	e1a00002 	mov	r0, r2
   11dcc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   11dd0:	e1a02003 	mov	r2, r3
   11dd4:	eb00139f 	bl	16c58 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   11dd8:	e51b3010 	ldr	r3, [fp, #-16]
   11ddc:	e593200c 	ldr	r2, [r3, #12]
   11de0:	e51b3010 	ldr	r3, [fp, #-16]
   11de4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11de8:	e2633000 	rsb	r3, r3, #0
   11dec:	e0822003 	add	r2, r2, r3
   11df0:	e51b3010 	ldr	r3, [fp, #-16]
   11df4:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   11df8:	e51b3010 	ldr	r3, [fp, #-16]
   11dfc:	e593200c 	ldr	r2, [r3, #12]
   11e00:	e51b3010 	ldr	r3, [fp, #-16]
   11e04:	e5933000 	ldr	r3, [r3]
   11e08:	e1520003 	cmp	r2, r3
   11e0c:	2a000007 	bcs	11e30 <prvCopyDataToQueue+0x12c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   11e10:	e51b3010 	ldr	r3, [fp, #-16]
   11e14:	e5932004 	ldr	r2, [r3, #4]
   11e18:	e51b3010 	ldr	r3, [fp, #-16]
   11e1c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11e20:	e2633000 	rsb	r3, r3, #0
   11e24:	e0822003 	add	r2, r2, r3
   11e28:	e51b3010 	ldr	r3, [fp, #-16]
   11e2c:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   11e30:	e51b3010 	ldr	r3, [fp, #-16]
   11e34:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11e38:	e2832001 	add	r2, r3, #1
   11e3c:	e51b3010 	ldr	r3, [fp, #-16]
   11e40:	e5832038 	str	r2, [r3, #56]	; 0x38
   11e44:	e1a03004 	mov	r3, r4
   11e48:	e3010d04 	movw	r0, #7428	; 0x1d04
   11e4c:	e3400001 	movt	r0, #1
   11e50:	e1a01003 	mov	r1, r3
   11e54:	eb000e82 	bl	15864 <__cyg_profile_func_exit>
}
   11e58:	e24bd008 	sub	sp, fp, #8
   11e5c:	e8bd8810 	pop	{r4, fp, pc}

00011e60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   11e60:	e92d4810 	push	{r4, fp, lr}
   11e64:	e28db008 	add	fp, sp, #8
   11e68:	e24dd00c 	sub	sp, sp, #12
   11e6c:	e1a0400e 	mov	r4, lr
   11e70:	e50b0010 	str	r0, [fp, #-16]
   11e74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11e78:	e1a03004 	mov	r3, r4
   11e7c:	e3010e60 	movw	r0, #7776	; 0x1e60
   11e80:	e3400001 	movt	r0, #1
   11e84:	e1a01003 	mov	r1, r3
   11e88:	eb000e23 	bl	1571c <__cyg_profile_func_enter>
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   11e8c:	e51b3010 	ldr	r3, [fp, #-16]
   11e90:	e5933000 	ldr	r3, [r3]
   11e94:	e3530000 	cmp	r3, #0
   11e98:	0a000018 	beq	11f00 <prvCopyDataFromQueue+0xa0>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   11e9c:	e51b3010 	ldr	r3, [fp, #-16]
   11ea0:	e593200c 	ldr	r2, [r3, #12]
   11ea4:	e51b3010 	ldr	r3, [fp, #-16]
   11ea8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11eac:	e0822003 	add	r2, r2, r3
   11eb0:	e51b3010 	ldr	r3, [fp, #-16]
   11eb4:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   11eb8:	e51b3010 	ldr	r3, [fp, #-16]
   11ebc:	e593200c 	ldr	r2, [r3, #12]
   11ec0:	e51b3010 	ldr	r3, [fp, #-16]
   11ec4:	e5933004 	ldr	r3, [r3, #4]
   11ec8:	e1520003 	cmp	r2, r3
   11ecc:	3a000003 	bcc	11ee0 <prvCopyDataFromQueue+0x80>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   11ed0:	e51b3010 	ldr	r3, [fp, #-16]
   11ed4:	e5932000 	ldr	r2, [r3]
   11ed8:	e51b3010 	ldr	r3, [fp, #-16]
   11edc:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   11ee0:	e51b3010 	ldr	r3, [fp, #-16]
   11ee4:	e593200c 	ldr	r2, [r3, #12]
   11ee8:	e51b3010 	ldr	r3, [fp, #-16]
   11eec:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11ef0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   11ef4:	e1a01002 	mov	r1, r2
   11ef8:	e1a02003 	mov	r2, r3
   11efc:	eb001355 	bl	16c58 <memcpy>
   11f00:	e1a03004 	mov	r3, r4
   11f04:	e3010e60 	movw	r0, #7776	; 0x1e60
   11f08:	e3400001 	movt	r0, #1
   11f0c:	e1a01003 	mov	r1, r3
   11f10:	eb000e53 	bl	15864 <__cyg_profile_func_exit>
	}
}
   11f14:	e24bd008 	sub	sp, fp, #8
   11f18:	e8bd8810 	pop	{r4, fp, pc}

00011f1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   11f1c:	e92d4810 	push	{r4, fp, lr}
   11f20:	e28db008 	add	fp, sp, #8
   11f24:	e24dd00c 	sub	sp, sp, #12
   11f28:	e1a0400e 	mov	r4, lr
   11f2c:	e50b0010 	str	r0, [fp, #-16]
   11f30:	e1a03004 	mov	r3, r4
   11f34:	e3010f1c 	movw	r0, #7964	; 0x1f1c
   11f38:	e3400001 	movt	r0, #1
   11f3c:	e1a01003 	mov	r1, r3
   11f40:	eb000df5 	bl	1571c <__cyg_profile_func_enter>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   11f44:	ebfff9bf 	bl	10648 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   11f48:	ea000012 	b	11f98 <prvUnlockQueue+0x7c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   11f4c:	e51b3010 	ldr	r3, [fp, #-16]
   11f50:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11f54:	e3530000 	cmp	r3, #0
   11f58:	0a00000d 	beq	11f94 <prvUnlockQueue+0x78>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   11f5c:	e51b3010 	ldr	r3, [fp, #-16]
   11f60:	e2833024 	add	r3, r3, #36	; 0x24
   11f64:	e1a00003 	mov	r0, r3
   11f68:	eb00066b 	bl	1391c <xTaskRemoveFromEventList>
   11f6c:	e1a03000 	mov	r3, r0
   11f70:	e3530000 	cmp	r3, #0
   11f74:	0a000000 	beq	11f7c <prvUnlockQueue+0x60>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   11f78:	eb00071e 	bl	13bf8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   11f7c:	e51b3010 	ldr	r3, [fp, #-16]
   11f80:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   11f84:	e2432001 	sub	r2, r3, #1
   11f88:	e51b3010 	ldr	r3, [fp, #-16]
   11f8c:	e5832048 	str	r2, [r3, #72]	; 0x48
   11f90:	ea000000 	b	11f98 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   11f94:	ea000003 	b	11fa8 <prvUnlockQueue+0x8c>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   11f98:	e51b3010 	ldr	r3, [fp, #-16]
   11f9c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   11fa0:	e3530000 	cmp	r3, #0
   11fa4:	caffffe8 	bgt	11f4c <prvUnlockQueue+0x30>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   11fa8:	e51b3010 	ldr	r3, [fp, #-16]
   11fac:	e3e02000 	mvn	r2, #0
   11fb0:	e5832048 	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   11fb4:	ebfff9bd 	bl	106b0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   11fb8:	ebfff9a2 	bl	10648 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11fbc:	ea000012 	b	1200c <prvUnlockQueue+0xf0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11fc0:	e51b3010 	ldr	r3, [fp, #-16]
   11fc4:	e5933010 	ldr	r3, [r3, #16]
   11fc8:	e3530000 	cmp	r3, #0
   11fcc:	0a00000d 	beq	12008 <prvUnlockQueue+0xec>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11fd0:	e51b3010 	ldr	r3, [fp, #-16]
   11fd4:	e2833010 	add	r3, r3, #16
   11fd8:	e1a00003 	mov	r0, r3
   11fdc:	eb00064e 	bl	1391c <xTaskRemoveFromEventList>
   11fe0:	e1a03000 	mov	r3, r0
   11fe4:	e3530000 	cmp	r3, #0
   11fe8:	0a000000 	beq	11ff0 <prvUnlockQueue+0xd4>
				{
					vTaskMissedYield();
   11fec:	eb000701 	bl	13bf8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   11ff0:	e51b3010 	ldr	r3, [fp, #-16]
   11ff4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11ff8:	e2432001 	sub	r2, r3, #1
   11ffc:	e51b3010 	ldr	r3, [fp, #-16]
   12000:	e5832044 	str	r2, [r3, #68]	; 0x44
   12004:	ea000000 	b	1200c <prvUnlockQueue+0xf0>
			}
			else
			{
				break;
   12008:	ea000003 	b	1201c <prvUnlockQueue+0x100>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   1200c:	e51b3010 	ldr	r3, [fp, #-16]
   12010:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12014:	e3530000 	cmp	r3, #0
   12018:	caffffe8 	bgt	11fc0 <prvUnlockQueue+0xa4>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   1201c:	e51b3010 	ldr	r3, [fp, #-16]
   12020:	e3e02000 	mvn	r2, #0
   12024:	e5832044 	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   12028:	ebfff9a0 	bl	106b0 <vPortExitCritical>
   1202c:	e1a03004 	mov	r3, r4
   12030:	e3010f1c 	movw	r0, #7964	; 0x1f1c
   12034:	e3400001 	movt	r0, #1
   12038:	e1a01003 	mov	r1, r3
   1203c:	eb000e08 	bl	15864 <__cyg_profile_func_exit>
}
   12040:	e24bd008 	sub	sp, fp, #8
   12044:	e8bd8810 	pop	{r4, fp, pc}

00012048 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   12048:	e92d4830 	push	{r4, r5, fp, lr}
   1204c:	e28db00c 	add	fp, sp, #12
   12050:	e24dd010 	sub	sp, sp, #16
   12054:	e1a0500e 	mov	r5, lr
   12058:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1205c:	e1a03005 	mov	r3, r5
   12060:	e3020048 	movw	r0, #8264	; 0x2048
   12064:	e3400001 	movt	r0, #1
   12068:	e1a01003 	mov	r1, r3
   1206c:	eb000daa 	bl	1571c <__cyg_profile_func_enter>
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   12070:	ebfff974 	bl	10648 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   12074:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12078:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1207c:	e3530000 	cmp	r3, #0
   12080:	03a03001 	moveq	r3, #1
   12084:	13a03000 	movne	r3, #0
   12088:	e6ef3073 	uxtb	r3, r3
   1208c:	e50b3010 	str	r3, [fp, #-16]
	taskEXIT_CRITICAL();
   12090:	ebfff986 	bl	106b0 <vPortExitCritical>

	return xReturn;
   12094:	e51b4010 	ldr	r4, [fp, #-16]
   12098:	e1a03005 	mov	r3, r5
   1209c:	e3020048 	movw	r0, #8264	; 0x2048
   120a0:	e3400001 	movt	r0, #1
   120a4:	e1a01003 	mov	r1, r3
   120a8:	eb000ded 	bl	15864 <__cyg_profile_func_exit>
   120ac:	e1a03004 	mov	r3, r4
}
   120b0:	e1a00003 	mov	r0, r3
   120b4:	e24bd00c 	sub	sp, fp, #12
   120b8:	e8bd8830 	pop	{r4, r5, fp, pc}

000120bc <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   120bc:	e92d4830 	push	{r4, r5, fp, lr}
   120c0:	e28db00c 	add	fp, sp, #12
   120c4:	e24dd010 	sub	sp, sp, #16
   120c8:	e1a0500e 	mov	r5, lr
   120cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   120d0:	e1a03005 	mov	r3, r5
   120d4:	e30200bc 	movw	r0, #8380	; 0x20bc
   120d8:	e3400001 	movt	r0, #1
   120dc:	e1a01003 	mov	r1, r3
   120e0:	eb000d8d 	bl	1571c <__cyg_profile_func_enter>
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   120e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   120e8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   120ec:	e3530000 	cmp	r3, #0
   120f0:	03a03001 	moveq	r3, #1
   120f4:	13a03000 	movne	r3, #0
   120f8:	e6ef3073 	uxtb	r3, r3
   120fc:	e50b3010 	str	r3, [fp, #-16]

	return xReturn;
   12100:	e51b4010 	ldr	r4, [fp, #-16]
   12104:	e1a03005 	mov	r3, r5
   12108:	e30200bc 	movw	r0, #8380	; 0x20bc
   1210c:	e3400001 	movt	r0, #1
   12110:	e1a01003 	mov	r1, r3
   12114:	eb000dd2 	bl	15864 <__cyg_profile_func_exit>
   12118:	e1a03004 	mov	r3, r4
}
   1211c:	e1a00003 	mov	r0, r3
   12120:	e24bd00c 	sub	sp, fp, #12
   12124:	e8bd8830 	pop	{r4, r5, fp, pc}

00012128 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   12128:	e92d4830 	push	{r4, r5, fp, lr}
   1212c:	e28db00c 	add	fp, sp, #12
   12130:	e24dd010 	sub	sp, sp, #16
   12134:	e1a0500e 	mov	r5, lr
   12138:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1213c:	e1a03005 	mov	r3, r5
   12140:	e3020128 	movw	r0, #8488	; 0x2128
   12144:	e3400001 	movt	r0, #1
   12148:	e1a01003 	mov	r1, r3
   1214c:	eb000d72 	bl	1571c <__cyg_profile_func_enter>
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   12150:	ebfff93c 	bl	10648 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   12154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12158:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1215c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12160:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   12164:	e1520003 	cmp	r2, r3
   12168:	03a03001 	moveq	r3, #1
   1216c:	13a03000 	movne	r3, #0
   12170:	e6ef3073 	uxtb	r3, r3
   12174:	e50b3010 	str	r3, [fp, #-16]
	taskEXIT_CRITICAL();
   12178:	ebfff94c 	bl	106b0 <vPortExitCritical>

	return xReturn;
   1217c:	e51b4010 	ldr	r4, [fp, #-16]
   12180:	e1a03005 	mov	r3, r5
   12184:	e3020128 	movw	r0, #8488	; 0x2128
   12188:	e3400001 	movt	r0, #1
   1218c:	e1a01003 	mov	r1, r3
   12190:	eb000db3 	bl	15864 <__cyg_profile_func_exit>
   12194:	e1a03004 	mov	r3, r4
}
   12198:	e1a00003 	mov	r0, r3
   1219c:	e24bd00c 	sub	sp, fp, #12
   121a0:	e8bd8830 	pop	{r4, r5, fp, pc}

000121a4 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   121a4:	e92d4830 	push	{r4, r5, fp, lr}
   121a8:	e28db00c 	add	fp, sp, #12
   121ac:	e24dd010 	sub	sp, sp, #16
   121b0:	e1a0500e 	mov	r5, lr
   121b4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   121b8:	e1a03005 	mov	r3, r5
   121bc:	e30201a4 	movw	r0, #8612	; 0x21a4
   121c0:	e3400001 	movt	r0, #1
   121c4:	e1a01003 	mov	r1, r3
   121c8:	eb000d53 	bl	1571c <__cyg_profile_func_enter>
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   121cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   121d0:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   121d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   121d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   121dc:	e1520003 	cmp	r2, r3
   121e0:	03a03001 	moveq	r3, #1
   121e4:	13a03000 	movne	r3, #0
   121e8:	e6ef3073 	uxtb	r3, r3
   121ec:	e50b3010 	str	r3, [fp, #-16]

	return xReturn;
   121f0:	e51b4010 	ldr	r4, [fp, #-16]
   121f4:	e1a03005 	mov	r3, r5
   121f8:	e30201a4 	movw	r0, #8612	; 0x21a4
   121fc:	e3400001 	movt	r0, #1
   12200:	e1a01003 	mov	r1, r3
   12204:	eb000d96 	bl	15864 <__cyg_profile_func_exit>
   12208:	e1a03004 	mov	r3, r4
}
   1220c:	e1a00003 	mov	r0, r3
   12210:	e24bd00c 	sub	sp, fp, #12
   12214:	e8bd8830 	pop	{r4, r5, fp, pc}

00012218 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   12218:	e92d4830 	push	{r4, r5, fp, lr}
   1221c:	e28db00c 	add	fp, sp, #12
   12220:	e24dd028 	sub	sp, sp, #40	; 0x28
   12224:	e1a0500e 	mov	r5, lr
   12228:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1222c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   12230:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   12234:	e14b22b6 	strh	r2, [fp, #-38]	; 0xffffffda
   12238:	e1a03005 	mov	r3, r5
   1223c:	e3020218 	movw	r0, #8728	; 0x2218
   12240:	e3400001 	movt	r0, #1
   12244:	e1a01003 	mov	r1, r3
   12248:	eb000d33 	bl	1571c <__cyg_profile_func_enter>
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   1224c:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
   12250:	e1a00003 	mov	r0, r3
   12254:	e59b100c 	ldr	r1, [fp, #12]
   12258:	eb000775 	bl	14034 <prvAllocateTCBAndStack>
   1225c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

	if( pxNewTCB != NULL )
   12260:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12264:	e3530000 	cmp	r3, #0
   12268:	0a000074 	beq	12440 <xTaskGenericCreate+0x228>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   1226c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12270:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   12274:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
   12278:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1227c:	e1a03103 	lsl	r3, r3, #2
   12280:	e0823003 	add	r3, r2, r3
   12284:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   12288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1228c:	e3c33007 	bic	r3, r3, #7
   12290:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   12294:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
   12298:	e58d3000 	str	r3, [sp]
   1229c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   122a0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   122a4:	e59b2004 	ldr	r2, [fp, #4]
   122a8:	e59b3010 	ldr	r3, [fp, #16]
   122ac:	eb000674 	bl	13c84 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   122b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   122b4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   122b8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   122bc:	ebfff74f 	bl	10000 <pxPortInitialiseStack>
   122c0:	e1a02000 	mov	r2, r0
   122c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   122c8:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   122cc:	e59b3008 	ldr	r3, [fp, #8]
   122d0:	e3530000 	cmp	r3, #0
   122d4:	0a000002 	beq	122e4 <xTaskGenericCreate+0xcc>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   122d8:	e59b3008 	ldr	r3, [fp, #8]
   122dc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   122e0:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   122e4:	ebfff8d7 	bl	10648 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   122e8:	e3003dfc 	movw	r3, #3580	; 0xdfc
   122ec:	e3403003 	movt	r3, #3
   122f0:	e5933000 	ldr	r3, [r3]
   122f4:	e2832001 	add	r2, r3, #1
   122f8:	e3003dfc 	movw	r3, #3580	; 0xdfc
   122fc:	e3403003 	movt	r3, #3
   12300:	e5832000 	str	r2, [r3]
			if( pxCurrentTCB == NULL )
   12304:	e3003d24 	movw	r3, #3364	; 0xd24
   12308:	e3403003 	movt	r3, #3
   1230c:	e5933000 	ldr	r3, [r3]
   12310:	e3530000 	cmp	r3, #0
   12314:	1a00000a 	bne	12344 <xTaskGenericCreate+0x12c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   12318:	e3003d24 	movw	r3, #3364	; 0xd24
   1231c:	e3403003 	movt	r3, #3
   12320:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   12324:	e5832000 	str	r2, [r3]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   12328:	e3003dfc 	movw	r3, #3580	; 0xdfc
   1232c:	e3403003 	movt	r3, #3
   12330:	e5933000 	ldr	r3, [r3]
   12334:	e3530001 	cmp	r3, #1
   12338:	1a000011 	bne	12384 <xTaskGenericCreate+0x16c>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   1233c:	eb00068a 	bl	13d6c <prvInitialiseTaskLists>
   12340:	ea00000f 	b	12384 <xTaskGenericCreate+0x16c>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   12344:	e3003e0c 	movw	r3, #3596	; 0xe0c
   12348:	e3403003 	movt	r3, #3
   1234c:	e5933000 	ldr	r3, [r3]
   12350:	e3530000 	cmp	r3, #0
   12354:	1a00000a 	bne	12384 <xTaskGenericCreate+0x16c>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   12358:	e3003d24 	movw	r3, #3364	; 0xd24
   1235c:	e3403003 	movt	r3, #3
   12360:	e5933000 	ldr	r3, [r3]
   12364:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12368:	e59b3004 	ldr	r3, [fp, #4]
   1236c:	e1520003 	cmp	r2, r3
   12370:	8a000003 	bhi	12384 <xTaskGenericCreate+0x16c>
					{
						pxCurrentTCB = pxNewTCB;
   12374:	e3003d24 	movw	r3, #3364	; 0xd24
   12378:	e3403003 	movt	r3, #3
   1237c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   12380:	e5832000 	str	r2, [r3]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   12384:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12388:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1238c:	e3003e04 	movw	r3, #3588	; 0xe04
   12390:	e3403003 	movt	r3, #3
   12394:	e5933000 	ldr	r3, [r3]
   12398:	e1520003 	cmp	r2, r3
   1239c:	9a000004 	bls	123b4 <xTaskGenericCreate+0x19c>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   123a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   123a4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   123a8:	e3003e04 	movw	r3, #3588	; 0xe04
   123ac:	e3403003 	movt	r3, #3
   123b0:	e5832000 	str	r2, [r3]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   123b4:	e3003e20 	movw	r3, #3616	; 0xe20
   123b8:	e3403003 	movt	r3, #3
   123bc:	e5933000 	ldr	r3, [r3]
   123c0:	e2832001 	add	r2, r3, #1
   123c4:	e3003e20 	movw	r3, #3616	; 0xe20
   123c8:	e3403003 	movt	r3, #3
   123cc:	e5832000 	str	r2, [r3]

			prvAddTaskToReadyQueue( pxNewTCB );
   123d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   123d4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   123d8:	e3003e08 	movw	r3, #3592	; 0xe08
   123dc:	e3403003 	movt	r3, #3
   123e0:	e5933000 	ldr	r3, [r3]
   123e4:	e1520003 	cmp	r2, r3
   123e8:	9a000004 	bls	12400 <xTaskGenericCreate+0x1e8>
   123ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   123f0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   123f4:	e3003e08 	movw	r3, #3592	; 0xe08
   123f8:	e3403003 	movt	r3, #3
   123fc:	e5832000 	str	r2, [r3]
   12400:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12404:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12408:	e3a02014 	mov	r2, #20
   1240c:	e0020392 	mul	r2, r2, r3
   12410:	e3003d28 	movw	r3, #3368	; 0xd28
   12414:	e3403003 	movt	r3, #3
   12418:	e0822003 	add	r2, r2, r3
   1241c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12420:	e2833004 	add	r3, r3, #4
   12424:	e1a00002 	mov	r0, r2
   12428:	e1a01003 	mov	r1, r3
   1242c:	ebfffb34 	bl	11104 <vListInsertEnd>

			xReturn = pdPASS;
   12430:	e3a03001 	mov	r3, #1
   12434:	e50b3010 	str	r3, [fp, #-16]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   12438:	ebfff89c 	bl	106b0 <vPortExitCritical>
   1243c:	ea000001 	b	12448 <xTaskGenericCreate+0x230>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   12440:	e3e03000 	mvn	r3, #0
   12444:	e50b3010 	str	r3, [fp, #-16]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   12448:	e51b3010 	ldr	r3, [fp, #-16]
   1244c:	e3530001 	cmp	r3, #1
   12450:	1a00000c 	bne	12488 <xTaskGenericCreate+0x270>
	{
		if( xSchedulerRunning != pdFALSE )
   12454:	e3003e0c 	movw	r3, #3596	; 0xe0c
   12458:	e3403003 	movt	r3, #3
   1245c:	e5933000 	ldr	r3, [r3]
   12460:	e3530000 	cmp	r3, #0
   12464:	0a000007 	beq	12488 <xTaskGenericCreate+0x270>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   12468:	e3003d24 	movw	r3, #3364	; 0xd24
   1246c:	e3403003 	movt	r3, #3
   12470:	e5933000 	ldr	r3, [r3]
   12474:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12478:	e59b3004 	ldr	r3, [fp, #4]
   1247c:	e1520003 	cmp	r2, r3
   12480:	2a000000 	bcs	12488 <xTaskGenericCreate+0x270>
			{
				portYIELD_WITHIN_API();
   12484:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   12488:	e51b4010 	ldr	r4, [fp, #-16]
   1248c:	e1a03005 	mov	r3, r5
   12490:	e3020218 	movw	r0, #8728	; 0x2218
   12494:	e3400001 	movt	r0, #1
   12498:	e1a01003 	mov	r1, r3
   1249c:	eb000cf0 	bl	15864 <__cyg_profile_func_exit>
   124a0:	e1a03004 	mov	r3, r4
}
   124a4:	e1a00003 	mov	r0, r3
   124a8:	e24bd00c 	sub	sp, fp, #12
   124ac:	e8bd8830 	pop	{r4, r5, fp, pc}

000124b0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   124b0:	e92d4810 	push	{r4, fp, lr}
   124b4:	e28db008 	add	fp, sp, #8
   124b8:	e24dd014 	sub	sp, sp, #20
   124bc:	e1a0400e 	mov	r4, lr
   124c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   124c4:	e1a03004 	mov	r3, r4
   124c8:	e30204b0 	movw	r0, #9392	; 0x24b0
   124cc:	e3400001 	movt	r0, #1
   124d0:	e1a01003 	mov	r1, r3
   124d4:	eb000c90 	bl	1571c <__cyg_profile_func_enter>
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   124d8:	ebfff85a 	bl	10648 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   124dc:	e3003d24 	movw	r3, #3364	; 0xd24
   124e0:	e3403003 	movt	r3, #3
   124e4:	e5933000 	ldr	r3, [r3]
   124e8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   124ec:	e1520003 	cmp	r2, r3
   124f0:	1a000001 	bne	124fc <vTaskDelete+0x4c>
			{
				pxTaskToDelete = NULL;
   124f4:	e3a03000 	mov	r3, #0
   124f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   124fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12500:	e3530000 	cmp	r3, #0
   12504:	1a000003 	bne	12518 <vTaskDelete+0x68>
   12508:	e3003d24 	movw	r3, #3364	; 0xd24
   1250c:	e3403003 	movt	r3, #3
   12510:	e5933000 	ldr	r3, [r3]
   12514:	ea000000 	b	1251c <vTaskDelete+0x6c>
   12518:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1251c:	e50b3010 	str	r3, [fp, #-16]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   12520:	e51b3010 	ldr	r3, [fp, #-16]
   12524:	e2833004 	add	r3, r3, #4
   12528:	e1a00003 	mov	r0, r3
   1252c:	ebfffb62 	bl	112bc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   12530:	e51b3010 	ldr	r3, [fp, #-16]
   12534:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12538:	e3530000 	cmp	r3, #0
   1253c:	0a000003 	beq	12550 <vTaskDelete+0xa0>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   12540:	e51b3010 	ldr	r3, [fp, #-16]
   12544:	e2833018 	add	r3, r3, #24
   12548:	e1a00003 	mov	r0, r3
   1254c:	ebfffb5a 	bl	112bc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   12550:	e51b3010 	ldr	r3, [fp, #-16]
   12554:	e2833004 	add	r3, r3, #4
   12558:	e3000dd0 	movw	r0, #3536	; 0xdd0
   1255c:	e3400003 	movt	r0, #3
   12560:	e1a01003 	mov	r1, r3
   12564:	ebfffae6 	bl	11104 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   12568:	e3003de4 	movw	r3, #3556	; 0xde4
   1256c:	e3403003 	movt	r3, #3
   12570:	e5933000 	ldr	r3, [r3]
   12574:	e2832001 	add	r2, r3, #1
   12578:	e3003de4 	movw	r3, #3556	; 0xde4
   1257c:	e3403003 	movt	r3, #3
   12580:	e5832000 	str	r2, [r3]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   12584:	e3003e20 	movw	r3, #3616	; 0xe20
   12588:	e3403003 	movt	r3, #3
   1258c:	e5933000 	ldr	r3, [r3]
   12590:	e2832001 	add	r2, r3, #1
   12594:	e3003e20 	movw	r3, #3616	; 0xe20
   12598:	e3403003 	movt	r3, #3
   1259c:	e5832000 	str	r2, [r3]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   125a0:	ebfff842 	bl	106b0 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   125a4:	e3003e0c 	movw	r3, #3596	; 0xe0c
   125a8:	e3403003 	movt	r3, #3
   125ac:	e5933000 	ldr	r3, [r3]
   125b0:	e3530000 	cmp	r3, #0
   125b4:	0a000003 	beq	125c8 <vTaskDelete+0x118>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   125b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   125bc:	e3530000 	cmp	r3, #0
   125c0:	1a000000 	bne	125c8 <vTaskDelete+0x118>
			{
				portYIELD_WITHIN_API();
   125c4:	ef000000 	svc	0x00000000
   125c8:	e1a03004 	mov	r3, r4
   125cc:	e30204b0 	movw	r0, #9392	; 0x24b0
   125d0:	e3400001 	movt	r0, #1
   125d4:	e1a01003 	mov	r1, r3
   125d8:	eb000ca1 	bl	15864 <__cyg_profile_func_exit>
			}
		}
	}
   125dc:	e24bd008 	sub	sp, fp, #8
   125e0:	e8bd8810 	pop	{r4, fp, pc}

000125e4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   125e4:	e92d4810 	push	{r4, fp, lr}
   125e8:	e28db008 	add	fp, sp, #8
   125ec:	e24dd01c 	sub	sp, sp, #28
   125f0:	e1a0400e 	mov	r4, lr
   125f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   125f8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   125fc:	e1a03004 	mov	r3, r4
   12600:	e30205e4 	movw	r0, #9700	; 0x25e4
   12604:	e3400001 	movt	r0, #1
   12608:	e1a01003 	mov	r1, r3
   1260c:	eb000c42 	bl	1571c <__cyg_profile_func_enter>
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   12610:	e3a03000 	mov	r3, #0
   12614:	e50b3010 	str	r3, [fp, #-16]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   12618:	eb00025c 	bl	12f90 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   1261c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   12620:	e5932000 	ldr	r2, [r3]
   12624:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   12628:	e0823003 	add	r3, r2, r3
   1262c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

			if( xTickCount < *pxPreviousWakeTime )
   12630:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   12634:	e5932000 	ldr	r2, [r3]
   12638:	e3003e00 	movw	r3, #3584	; 0xe00
   1263c:	e3403003 	movt	r3, #3
   12640:	e5933000 	ldr	r3, [r3]
   12644:	e1520003 	cmp	r2, r3
   12648:	9a00000d 	bls	12684 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   1264c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   12650:	e5932000 	ldr	r2, [r3]
   12654:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12658:	e1520003 	cmp	r2, r3
   1265c:	9a000015 	bls	126b8 <vTaskDelayUntil+0xd4>
   12660:	e3003e00 	movw	r3, #3584	; 0xe00
   12664:	e3403003 	movt	r3, #3
   12668:	e5933000 	ldr	r3, [r3]
   1266c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   12670:	e1520003 	cmp	r2, r3
   12674:	9a00000f 	bls	126b8 <vTaskDelayUntil+0xd4>
				{
					xShouldDelay = pdTRUE;
   12678:	e3a03001 	mov	r3, #1
   1267c:	e50b3010 	str	r3, [fp, #-16]
   12680:	ea00000c 	b	126b8 <vTaskDelayUntil+0xd4>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   12684:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   12688:	e5932000 	ldr	r2, [r3]
   1268c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12690:	e1520003 	cmp	r2, r3
   12694:	8a000005 	bhi	126b0 <vTaskDelayUntil+0xcc>
   12698:	e3003e00 	movw	r3, #3584	; 0xe00
   1269c:	e3403003 	movt	r3, #3
   126a0:	e5933000 	ldr	r3, [r3]
   126a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   126a8:	e1520003 	cmp	r2, r3
   126ac:	9a000001 	bls	126b8 <vTaskDelayUntil+0xd4>
				{
					xShouldDelay = pdTRUE;
   126b0:	e3a03001 	mov	r3, #1
   126b4:	e50b3010 	str	r3, [fp, #-16]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   126b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   126bc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   126c0:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   126c4:	e51b3010 	ldr	r3, [fp, #-16]
   126c8:	e3530000 	cmp	r3, #0
   126cc:	0a000007 	beq	126f0 <vTaskDelayUntil+0x10c>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   126d0:	e3003d24 	movw	r3, #3364	; 0xd24
   126d4:	e3403003 	movt	r3, #3
   126d8:	e5933000 	ldr	r3, [r3]
   126dc:	e2833004 	add	r3, r3, #4
   126e0:	e1a00003 	mov	r0, r3
   126e4:	ebfffaf4 	bl	112bc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   126e8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   126ec:	eb000615 	bl	13f48 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   126f0:	eb00023b 	bl	12fe4 <xTaskResumeAll>
   126f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   126f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   126fc:	e3530000 	cmp	r3, #0
   12700:	1a000000 	bne	12708 <vTaskDelayUntil+0x124>
		{
			portYIELD_WITHIN_API();
   12704:	ef000000 	svc	0x00000000
   12708:	e1a03004 	mov	r3, r4
   1270c:	e30205e4 	movw	r0, #9700	; 0x25e4
   12710:	e3400001 	movt	r0, #1
   12714:	e1a01003 	mov	r1, r3
   12718:	eb000c51 	bl	15864 <__cyg_profile_func_exit>
		}
	}
   1271c:	e24bd008 	sub	sp, fp, #8
   12720:	e8bd8810 	pop	{r4, fp, pc}

00012724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   12724:	e92d4810 	push	{r4, fp, lr}
   12728:	e28db008 	add	fp, sp, #8
   1272c:	e24dd014 	sub	sp, sp, #20
   12730:	e1a0400e 	mov	r4, lr
   12734:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   12738:	e1a03004 	mov	r3, r4
   1273c:	e3020724 	movw	r0, #10020	; 0x2724
   12740:	e3400001 	movt	r0, #1
   12744:	e1a01003 	mov	r1, r3
   12748:	eb000bf3 	bl	1571c <__cyg_profile_func_enter>
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   1274c:	e3a03000 	mov	r3, #0
   12750:	e50b3010 	str	r3, [fp, #-16]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   12754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12758:	e3530000 	cmp	r3, #0
   1275c:	0a000010 	beq	127a4 <vTaskDelay+0x80>
		{
			vTaskSuspendAll();
   12760:	eb00020a 	bl	12f90 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   12764:	e3003e00 	movw	r3, #3584	; 0xe00
   12768:	e3403003 	movt	r3, #3
   1276c:	e5932000 	ldr	r2, [r3]
   12770:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12774:	e0823003 	add	r3, r2, r3
   12778:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   1277c:	e3003d24 	movw	r3, #3364	; 0xd24
   12780:	e3403003 	movt	r3, #3
   12784:	e5933000 	ldr	r3, [r3]
   12788:	e2833004 	add	r3, r3, #4
   1278c:	e1a00003 	mov	r0, r3
   12790:	ebfffac9 	bl	112bc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   12794:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   12798:	eb0005ea 	bl	13f48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   1279c:	eb000210 	bl	12fe4 <xTaskResumeAll>
   127a0:	e50b0010 	str	r0, [fp, #-16]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   127a4:	e51b3010 	ldr	r3, [fp, #-16]
   127a8:	e3530000 	cmp	r3, #0
   127ac:	1a000000 	bne	127b4 <vTaskDelay+0x90>
		{
			portYIELD_WITHIN_API();
   127b0:	ef000000 	svc	0x00000000
   127b4:	e1a03004 	mov	r3, r4
   127b8:	e3020724 	movw	r0, #10020	; 0x2724
   127bc:	e3400001 	movt	r0, #1
   127c0:	e1a01003 	mov	r1, r3
   127c4:	eb000c26 	bl	15864 <__cyg_profile_func_exit>
		}
	}
   127c8:	e24bd008 	sub	sp, fp, #8
   127cc:	e8bd8810 	pop	{r4, fp, pc}

000127d0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   127d0:	e92d4830 	push	{r4, r5, fp, lr}
   127d4:	e28db00c 	add	fp, sp, #12
   127d8:	e24dd010 	sub	sp, sp, #16
   127dc:	e1a0500e 	mov	r5, lr
   127e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   127e4:	e1a03005 	mov	r3, r5
   127e8:	e30207d0 	movw	r0, #10192	; 0x27d0
   127ec:	e3400001 	movt	r0, #1
   127f0:	e1a01003 	mov	r1, r3
   127f4:	eb000bc8 	bl	1571c <__cyg_profile_func_enter>
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   127f8:	ebfff792 	bl	10648 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   127fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12800:	e3530000 	cmp	r3, #0
   12804:	1a000003 	bne	12818 <uxTaskPriorityGet+0x48>
   12808:	e3003d24 	movw	r3, #3364	; 0xd24
   1280c:	e3403003 	movt	r3, #3
   12810:	e5933000 	ldr	r3, [r3]
   12814:	ea000000 	b	1281c <uxTaskPriorityGet+0x4c>
   12818:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1281c:	e50b3010 	str	r3, [fp, #-16]
			uxReturn = pxTCB->uxPriority;
   12820:	e51b3010 	ldr	r3, [fp, #-16]
   12824:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12828:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		}
		taskEXIT_CRITICAL();
   1282c:	ebfff79f 	bl	106b0 <vPortExitCritical>

		return uxReturn;
   12830:	e51b4014 	ldr	r4, [fp, #-20]	; 0xffffffec
   12834:	e1a03005 	mov	r3, r5
   12838:	e30207d0 	movw	r0, #10192	; 0x27d0
   1283c:	e3400001 	movt	r0, #1
   12840:	e1a01003 	mov	r1, r3
   12844:	eb000c06 	bl	15864 <__cyg_profile_func_exit>
   12848:	e1a03004 	mov	r3, r4
	}
   1284c:	e1a00003 	mov	r0, r3
   12850:	e24bd00c 	sub	sp, fp, #12
   12854:	e8bd8830 	pop	{r4, r5, fp, pc}

00012858 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   12858:	e92d4810 	push	{r4, fp, lr}
   1285c:	e28db008 	add	fp, sp, #8
   12860:	e24dd01c 	sub	sp, sp, #28
   12864:	e1a0400e 	mov	r4, lr
   12868:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1286c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   12870:	e1a03004 	mov	r3, r4
   12874:	e3020858 	movw	r0, #10328	; 0x2858
   12878:	e3400001 	movt	r0, #1
   1287c:	e1a01003 	mov	r1, r3
   12880:	eb000ba5 	bl	1571c <__cyg_profile_func_enter>
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   12884:	e3a03000 	mov	r3, #0
   12888:	e50b3010 	str	r3, [fp, #-16]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   1288c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   12890:	e3530004 	cmp	r3, #4
   12894:	9a000001 	bls	128a0 <vTaskPrioritySet+0x48>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   12898:	e3a03004 	mov	r3, #4
   1289c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		}

		taskENTER_CRITICAL();
   128a0:	ebfff768 	bl	10648 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   128a4:	e3003d24 	movw	r3, #3364	; 0xd24
   128a8:	e3403003 	movt	r3, #3
   128ac:	e5933000 	ldr	r3, [r3]
   128b0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   128b4:	e1520003 	cmp	r2, r3
   128b8:	1a000001 	bne	128c4 <vTaskPrioritySet+0x6c>
			{
				pxTask = NULL;
   128bc:	e3a03000 	mov	r3, #0
   128c0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   128c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   128c8:	e3530000 	cmp	r3, #0
   128cc:	1a000003 	bne	128e0 <vTaskPrioritySet+0x88>
   128d0:	e3003d24 	movw	r3, #3364	; 0xd24
   128d4:	e3403003 	movt	r3, #3
   128d8:	e5933000 	ldr	r3, [r3]
   128dc:	ea000000 	b	128e4 <vTaskPrioritySet+0x8c>
   128e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   128e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   128e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   128ec:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   128f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   128f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   128f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   128fc:	e1520003 	cmp	r2, r3
   12900:	0a00003f 	beq	12a04 <vTaskPrioritySet+0x1ac>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   12904:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   12908:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1290c:	e1520003 	cmp	r2, r3
   12910:	9a000005 	bls	1292c <vTaskPrioritySet+0xd4>
				{
					if( pxTask != NULL )
   12914:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   12918:	e3530000 	cmp	r3, #0
   1291c:	0a000007 	beq	12940 <vTaskPrioritySet+0xe8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   12920:	e3a03001 	mov	r3, #1
   12924:	e50b3010 	str	r3, [fp, #-16]
   12928:	ea000004 	b	12940 <vTaskPrioritySet+0xe8>
					}
				}
				else if( pxTask == NULL )
   1292c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   12930:	e3530000 	cmp	r3, #0
   12934:	1a000001 	bne	12940 <vTaskPrioritySet+0xe8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   12938:	e3a03001 	mov	r3, #1
   1293c:	e50b3010 	str	r3, [fp, #-16]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   12940:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12944:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   12948:	e583202c 	str	r2, [r3, #44]	; 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   1294c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   12950:	e2632005 	rsb	r2, r3, #5
   12954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12958:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   1295c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12960:	e5932014 	ldr	r2, [r3, #20]
   12964:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12968:	e3a01014 	mov	r1, #20
   1296c:	e0010391 	mul	r1, r1, r3
   12970:	e3003d28 	movw	r3, #3368	; 0xd28
   12974:	e3403003 	movt	r3, #3
   12978:	e0813003 	add	r3, r1, r3
   1297c:	e1520003 	cmp	r2, r3
   12980:	1a00001b 	bne	129f4 <vTaskPrioritySet+0x19c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   12984:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12988:	e2833004 	add	r3, r3, #4
   1298c:	e1a00003 	mov	r0, r3
   12990:	ebfffa49 	bl	112bc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12994:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12998:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1299c:	e3003e08 	movw	r3, #3592	; 0xe08
   129a0:	e3403003 	movt	r3, #3
   129a4:	e5933000 	ldr	r3, [r3]
   129a8:	e1520003 	cmp	r2, r3
   129ac:	9a000004 	bls	129c4 <vTaskPrioritySet+0x16c>
   129b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   129b4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   129b8:	e3003e08 	movw	r3, #3592	; 0xe08
   129bc:	e3403003 	movt	r3, #3
   129c0:	e5832000 	str	r2, [r3]
   129c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   129c8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   129cc:	e3a02014 	mov	r2, #20
   129d0:	e0020392 	mul	r2, r2, r3
   129d4:	e3003d28 	movw	r3, #3368	; 0xd28
   129d8:	e3403003 	movt	r3, #3
   129dc:	e0822003 	add	r2, r2, r3
   129e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   129e4:	e2833004 	add	r3, r3, #4
   129e8:	e1a00002 	mov	r0, r2
   129ec:	e1a01003 	mov	r1, r3
   129f0:	ebfff9c3 	bl	11104 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   129f4:	e51b3010 	ldr	r3, [fp, #-16]
   129f8:	e3530001 	cmp	r3, #1
   129fc:	1a000000 	bne	12a04 <vTaskPrioritySet+0x1ac>
				{
					portYIELD_WITHIN_API();
   12a00:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   12a04:	ebfff729 	bl	106b0 <vPortExitCritical>
   12a08:	e1a03004 	mov	r3, r4
   12a0c:	e3020858 	movw	r0, #10328	; 0x2858
   12a10:	e3400001 	movt	r0, #1
   12a14:	e1a01003 	mov	r1, r3
   12a18:	eb000b91 	bl	15864 <__cyg_profile_func_exit>
	}
   12a1c:	e24bd008 	sub	sp, fp, #8
   12a20:	e8bd8810 	pop	{r4, fp, pc}

00012a24 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   12a24:	e92d4810 	push	{r4, fp, lr}
   12a28:	e28db008 	add	fp, sp, #8
   12a2c:	e24dd014 	sub	sp, sp, #20
   12a30:	e1a0400e 	mov	r4, lr
   12a34:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   12a38:	e1a03004 	mov	r3, r4
   12a3c:	e3020a24 	movw	r0, #10788	; 0x2a24
   12a40:	e3400001 	movt	r0, #1
   12a44:	e1a01003 	mov	r1, r3
   12a48:	eb000b33 	bl	1571c <__cyg_profile_func_enter>
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   12a4c:	ebfff6fd 	bl	10648 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   12a50:	e3003d24 	movw	r3, #3364	; 0xd24
   12a54:	e3403003 	movt	r3, #3
   12a58:	e5933000 	ldr	r3, [r3]
   12a5c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   12a60:	e1520003 	cmp	r2, r3
   12a64:	1a000001 	bne	12a70 <vTaskSuspend+0x4c>
			{
				pxTaskToSuspend = NULL;
   12a68:	e3a03000 	mov	r3, #0
   12a6c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   12a70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a74:	e3530000 	cmp	r3, #0
   12a78:	1a000003 	bne	12a8c <vTaskSuspend+0x68>
   12a7c:	e3003d24 	movw	r3, #3364	; 0xd24
   12a80:	e3403003 	movt	r3, #3
   12a84:	e5933000 	ldr	r3, [r3]
   12a88:	ea000000 	b	12a90 <vTaskSuspend+0x6c>
   12a8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a90:	e50b3010 	str	r3, [fp, #-16]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   12a94:	e51b3010 	ldr	r3, [fp, #-16]
   12a98:	e2833004 	add	r3, r3, #4
   12a9c:	e1a00003 	mov	r0, r3
   12aa0:	ebfffa05 	bl	112bc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   12aa4:	e51b3010 	ldr	r3, [fp, #-16]
   12aa8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12aac:	e3530000 	cmp	r3, #0
   12ab0:	0a000003 	beq	12ac4 <vTaskSuspend+0xa0>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   12ab4:	e51b3010 	ldr	r3, [fp, #-16]
   12ab8:	e2833018 	add	r3, r3, #24
   12abc:	e1a00003 	mov	r0, r3
   12ac0:	ebfff9fd 	bl	112bc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   12ac4:	e51b3010 	ldr	r3, [fp, #-16]
   12ac8:	e2833004 	add	r3, r3, #4
   12acc:	e3000de8 	movw	r0, #3560	; 0xde8
   12ad0:	e3400003 	movt	r0, #3
   12ad4:	e1a01003 	mov	r1, r3
   12ad8:	ebfff989 	bl	11104 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   12adc:	ebfff6f3 	bl	106b0 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   12ae0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ae4:	e3530000 	cmp	r3, #0
   12ae8:	1a000014 	bne	12b40 <vTaskSuspend+0x11c>
		{
			if( xSchedulerRunning != pdFALSE )
   12aec:	e3003e0c 	movw	r3, #3596	; 0xe0c
   12af0:	e3403003 	movt	r3, #3
   12af4:	e5933000 	ldr	r3, [r3]
   12af8:	e3530000 	cmp	r3, #0
   12afc:	0a000001 	beq	12b08 <vTaskSuspend+0xe4>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   12b00:	ef000000 	svc	0x00000000
   12b04:	ea00000d 	b	12b40 <vTaskSuspend+0x11c>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   12b08:	e3003de8 	movw	r3, #3560	; 0xde8
   12b0c:	e3403003 	movt	r3, #3
   12b10:	e5932000 	ldr	r2, [r3]
   12b14:	e3003dfc 	movw	r3, #3580	; 0xdfc
   12b18:	e3403003 	movt	r3, #3
   12b1c:	e5933000 	ldr	r3, [r3]
   12b20:	e1520003 	cmp	r2, r3
   12b24:	1a000004 	bne	12b3c <vTaskSuspend+0x118>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
   12b28:	e3003d24 	movw	r3, #3364	; 0xd24
   12b2c:	e3403003 	movt	r3, #3
   12b30:	e3a02000 	mov	r2, #0
   12b34:	e5832000 	str	r2, [r3]
   12b38:	ea000000 	b	12b40 <vTaskSuspend+0x11c>
				}
				else
				{
					vTaskSwitchContext();
   12b3c:	eb0002f7 	bl	13720 <vTaskSwitchContext>
   12b40:	e1a03004 	mov	r3, r4
   12b44:	e3020a24 	movw	r0, #10788	; 0x2a24
   12b48:	e3400001 	movt	r0, #1
   12b4c:	e1a01003 	mov	r1, r3
   12b50:	eb000b43 	bl	15864 <__cyg_profile_func_exit>
				}
			}
		}
	}
   12b54:	e24bd008 	sub	sp, fp, #8
   12b58:	e8bd8810 	pop	{r4, fp, pc}

00012b5c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   12b5c:	e92d4830 	push	{r4, r5, fp, lr}
   12b60:	e28db00c 	add	fp, sp, #12
   12b64:	e24dd010 	sub	sp, sp, #16
   12b68:	e1a0500e 	mov	r5, lr
   12b6c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   12b70:	e1a03005 	mov	r3, r5
   12b74:	e3020b5c 	movw	r0, #11100	; 0x2b5c
   12b78:	e3400001 	movt	r0, #1
   12b7c:	e1a01003 	mov	r1, r3
   12b80:	eb000ae5 	bl	1571c <__cyg_profile_func_enter>
	portBASE_TYPE xReturn = pdFALSE;
   12b84:	e3a03000 	mov	r3, #0
   12b88:	e50b3010 	str	r3, [fp, #-16]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   12b8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   12b94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12b98:	e5932014 	ldr	r2, [r3, #20]
   12b9c:	e3003de8 	movw	r3, #3560	; 0xde8
   12ba0:	e3403003 	movt	r3, #3
   12ba4:	e1520003 	cmp	r2, r3
   12ba8:	1a00000b 	bne	12bdc <xTaskIsTaskSuspended+0x80>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   12bac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12bb0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   12bb4:	e3003dbc 	movw	r3, #3516	; 0xdbc
   12bb8:	e3403003 	movt	r3, #3
   12bbc:	e1520003 	cmp	r2, r3
   12bc0:	0a000005 	beq	12bdc <xTaskIsTaskSuspended+0x80>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   12bc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12bc8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12bcc:	e3530000 	cmp	r3, #0
   12bd0:	1a000001 	bne	12bdc <xTaskIsTaskSuspended+0x80>
				{
					xReturn = pdTRUE;
   12bd4:	e3a03001 	mov	r3, #1
   12bd8:	e50b3010 	str	r3, [fp, #-16]
				}
			}
		}

		return xReturn;
   12bdc:	e51b4010 	ldr	r4, [fp, #-16]
   12be0:	e1a03005 	mov	r3, r5
   12be4:	e3020b5c 	movw	r0, #11100	; 0x2b5c
   12be8:	e3400001 	movt	r0, #1
   12bec:	e1a01003 	mov	r1, r3
   12bf0:	eb000b1b 	bl	15864 <__cyg_profile_func_exit>
   12bf4:	e1a03004 	mov	r3, r4
	}
   12bf8:	e1a00003 	mov	r0, r3
   12bfc:	e24bd00c 	sub	sp, fp, #12
   12c00:	e8bd8830 	pop	{r4, r5, fp, pc}

00012c04 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   12c04:	e92d4810 	push	{r4, fp, lr}
   12c08:	e28db008 	add	fp, sp, #8
   12c0c:	e24dd014 	sub	sp, sp, #20
   12c10:	e1a0400e 	mov	r4, lr
   12c14:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   12c18:	e1a03004 	mov	r3, r4
   12c1c:	e3020c04 	movw	r0, #11268	; 0x2c04
   12c20:	e3400001 	movt	r0, #1
   12c24:	e1a01003 	mov	r1, r3
   12c28:	eb000abb 	bl	1571c <__cyg_profile_func_enter>
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   12c2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c30:	e50b3010 	str	r3, [fp, #-16]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   12c34:	e51b3010 	ldr	r3, [fp, #-16]
   12c38:	e3530000 	cmp	r3, #0
   12c3c:	0a000031 	beq	12d08 <vTaskResume+0x104>
   12c40:	e3003d24 	movw	r3, #3364	; 0xd24
   12c44:	e3403003 	movt	r3, #3
   12c48:	e5933000 	ldr	r3, [r3]
   12c4c:	e51b2010 	ldr	r2, [fp, #-16]
   12c50:	e1520003 	cmp	r2, r3
   12c54:	0a00002b 	beq	12d08 <vTaskResume+0x104>
		{
			taskENTER_CRITICAL();
   12c58:	ebfff67a 	bl	10648 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   12c5c:	e51b0010 	ldr	r0, [fp, #-16]
   12c60:	ebffffbd 	bl	12b5c <xTaskIsTaskSuspended>
   12c64:	e1a03000 	mov	r3, r0
   12c68:	e3530001 	cmp	r3, #1
   12c6c:	1a000024 	bne	12d04 <vTaskResume+0x100>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   12c70:	e51b3010 	ldr	r3, [fp, #-16]
   12c74:	e2833004 	add	r3, r3, #4
   12c78:	e1a00003 	mov	r0, r3
   12c7c:	ebfff98e 	bl	112bc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12c80:	e51b3010 	ldr	r3, [fp, #-16]
   12c84:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12c88:	e3003e08 	movw	r3, #3592	; 0xe08
   12c8c:	e3403003 	movt	r3, #3
   12c90:	e5933000 	ldr	r3, [r3]
   12c94:	e1520003 	cmp	r2, r3
   12c98:	9a000004 	bls	12cb0 <vTaskResume+0xac>
   12c9c:	e51b3010 	ldr	r3, [fp, #-16]
   12ca0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ca4:	e3003e08 	movw	r3, #3592	; 0xe08
   12ca8:	e3403003 	movt	r3, #3
   12cac:	e5832000 	str	r2, [r3]
   12cb0:	e51b3010 	ldr	r3, [fp, #-16]
   12cb4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12cb8:	e3a02014 	mov	r2, #20
   12cbc:	e0020392 	mul	r2, r2, r3
   12cc0:	e3003d28 	movw	r3, #3368	; 0xd28
   12cc4:	e3403003 	movt	r3, #3
   12cc8:	e0822003 	add	r2, r2, r3
   12ccc:	e51b3010 	ldr	r3, [fp, #-16]
   12cd0:	e2833004 	add	r3, r3, #4
   12cd4:	e1a00002 	mov	r0, r2
   12cd8:	e1a01003 	mov	r1, r3
   12cdc:	ebfff908 	bl	11104 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12ce0:	e51b3010 	ldr	r3, [fp, #-16]
   12ce4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ce8:	e3003d24 	movw	r3, #3364	; 0xd24
   12cec:	e3403003 	movt	r3, #3
   12cf0:	e5933000 	ldr	r3, [r3]
   12cf4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12cf8:	e1520003 	cmp	r2, r3
   12cfc:	3a000000 	bcc	12d04 <vTaskResume+0x100>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   12d00:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   12d04:	ebfff669 	bl	106b0 <vPortExitCritical>
   12d08:	e1a03004 	mov	r3, r4
   12d0c:	e3020c04 	movw	r0, #11268	; 0x2c04
   12d10:	e3400001 	movt	r0, #1
   12d14:	e1a01003 	mov	r1, r3
   12d18:	eb000ad1 	bl	15864 <__cyg_profile_func_exit>
		}
	}
   12d1c:	e24bd008 	sub	sp, fp, #8
   12d20:	e8bd8810 	pop	{r4, fp, pc}

00012d24 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   12d24:	e92d4830 	push	{r4, r5, fp, lr}
   12d28:	e28db00c 	add	fp, sp, #12
   12d2c:	e24dd018 	sub	sp, sp, #24
   12d30:	e1a0500e 	mov	r5, lr
   12d34:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   12d38:	e1a03005 	mov	r3, r5
   12d3c:	e3020d24 	movw	r0, #11556	; 0x2d24
   12d40:	e3400001 	movt	r0, #1
   12d44:	e1a01003 	mov	r1, r3
   12d48:	eb000a73 	bl	1571c <__cyg_profile_func_enter>
	portBASE_TYPE xYieldRequired = pdFALSE;
   12d4c:	e3a03000 	mov	r3, #0
   12d50:	e50b3010 	str	r3, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   12d54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   12d58:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   12d5c:	e3a03000 	mov	r3, #0
   12d60:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   12d64:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   12d68:	ebffff7b 	bl	12b5c <xTaskIsTaskSuspended>
   12d6c:	e1a03000 	mov	r3, r0
   12d70:	e3530001 	cmp	r3, #1
   12d74:	1a000032 	bne	12e44 <xTaskResumeFromISR+0x120>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12d78:	e3003e10 	movw	r3, #3600	; 0xe10
   12d7c:	e3403003 	movt	r3, #3
   12d80:	e5933000 	ldr	r3, [r3]
   12d84:	e3530000 	cmp	r3, #0
   12d88:	1a000027 	bne	12e2c <xTaskResumeFromISR+0x108>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   12d8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12d90:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12d94:	e3003d24 	movw	r3, #3364	; 0xd24
   12d98:	e3403003 	movt	r3, #3
   12d9c:	e5933000 	ldr	r3, [r3]
   12da0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12da4:	e1520003 	cmp	r2, r3
   12da8:	23a03001 	movcs	r3, #1
   12dac:	33a03000 	movcc	r3, #0
   12db0:	e6ef3073 	uxtb	r3, r3
   12db4:	e50b3010 	str	r3, [fp, #-16]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   12db8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12dbc:	e2833004 	add	r3, r3, #4
   12dc0:	e1a00003 	mov	r0, r3
   12dc4:	ebfff93c 	bl	112bc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12dc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12dcc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12dd0:	e3003e08 	movw	r3, #3592	; 0xe08
   12dd4:	e3403003 	movt	r3, #3
   12dd8:	e5933000 	ldr	r3, [r3]
   12ddc:	e1520003 	cmp	r2, r3
   12de0:	9a000004 	bls	12df8 <xTaskResumeFromISR+0xd4>
   12de4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12de8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12dec:	e3003e08 	movw	r3, #3592	; 0xe08
   12df0:	e3403003 	movt	r3, #3
   12df4:	e5832000 	str	r2, [r3]
   12df8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12dfc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12e00:	e3a02014 	mov	r2, #20
   12e04:	e0020392 	mul	r2, r2, r3
   12e08:	e3003d28 	movw	r3, #3368	; 0xd28
   12e0c:	e3403003 	movt	r3, #3
   12e10:	e0822003 	add	r2, r2, r3
   12e14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12e18:	e2833004 	add	r3, r3, #4
   12e1c:	e1a00002 	mov	r0, r2
   12e20:	e1a01003 	mov	r1, r3
   12e24:	ebfff8b6 	bl	11104 <vListInsertEnd>
   12e28:	ea000005 	b	12e44 <xTaskResumeFromISR+0x120>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   12e2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12e30:	e2833018 	add	r3, r3, #24
   12e34:	e3000dbc 	movw	r0, #3516	; 0xdbc
   12e38:	e3400003 	movt	r0, #3
   12e3c:	e1a01003 	mov	r1, r3
   12e40:	ebfff8af 	bl	11104 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   12e44:	e51b4010 	ldr	r4, [fp, #-16]
   12e48:	e1a03005 	mov	r3, r5
   12e4c:	e3020d24 	movw	r0, #11556	; 0x2d24
   12e50:	e3400001 	movt	r0, #1
   12e54:	e1a01003 	mov	r1, r3
   12e58:	eb000a81 	bl	15864 <__cyg_profile_func_exit>
   12e5c:	e1a03004 	mov	r3, r4
	}
   12e60:	e1a00003 	mov	r0, r3
   12e64:	e24bd00c 	sub	sp, fp, #12
   12e68:	e8bd8830 	pop	{r4, r5, fp, pc}

00012e6c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   12e6c:	e92d4810 	push	{r4, fp, lr}
   12e70:	e28db008 	add	fp, sp, #8
   12e74:	e24dd01c 	sub	sp, sp, #28
   12e78:	e1a0400e 	mov	r4, lr
   12e7c:	e1a03004 	mov	r3, r4
   12e80:	e3020e6c 	movw	r0, #11884	; 0x2e6c
   12e84:	e3400001 	movt	r0, #1
   12e88:	e1a01003 	mov	r1, r3
   12e8c:	eb000a22 	bl	1571c <__cyg_profile_func_enter>
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   12e90:	e3a03000 	mov	r3, #0
   12e94:	e58d3000 	str	r3, [sp]
   12e98:	e3a03000 	mov	r3, #0
   12e9c:	e58d3004 	str	r3, [sp, #4]
   12ea0:	e3a03000 	mov	r3, #0
   12ea4:	e58d3008 	str	r3, [sp, #8]
   12ea8:	e3a03000 	mov	r3, #0
   12eac:	e58d300c 	str	r3, [sp, #12]
   12eb0:	e3030c40 	movw	r0, #15424	; 0x3c40
   12eb4:	e3400001 	movt	r0, #1
   12eb8:	e30d1bb4 	movw	r1, #56244	; 0xdbb4
   12ebc:	e3401002 	movt	r1, #2
   12ec0:	e3a02080 	mov	r2, #128	; 0x80
   12ec4:	e3a03000 	mov	r3, #0
   12ec8:	ebfffcd2 	bl	12218 <xTaskGenericCreate>
   12ecc:	e50b0010 	str	r0, [fp, #-16]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   12ed0:	e51b3010 	ldr	r3, [fp, #-16]
   12ed4:	e3530001 	cmp	r3, #1
   12ed8:	1a00000d 	bne	12f14 <vTaskStartScheduler+0xa8>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   12edc:	e92d0001 	stmfd	sp!, {r0}
   12ee0:	e10f0000 	mrs	r0, CPSR
   12ee4:	e38000c0 	orr	r0, r0, #192	; 0xc0
   12ee8:	e129f000 	msr	CPSR_fc, r0
   12eec:	e8bd0001 	ldmfd	sp!, {r0}

		xSchedulerRunning = pdTRUE;
   12ef0:	e3003e0c 	movw	r3, #3596	; 0xe0c
   12ef4:	e3403003 	movt	r3, #3
   12ef8:	e3a02001 	mov	r2, #1
   12efc:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   12f00:	e3003e00 	movw	r3, #3584	; 0xe00
   12f04:	e3403003 	movt	r3, #3
   12f08:	e3a02000 	mov	r2, #0
   12f0c:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   12f10:	ebfff4d5 	bl	1026c <xPortStartScheduler>
   12f14:	e1a03004 	mov	r3, r4
   12f18:	e3020e6c 	movw	r0, #11884	; 0x2e6c
   12f1c:	e3400001 	movt	r0, #1
   12f20:	e1a01003 	mov	r1, r3
   12f24:	eb000a4e 	bl	15864 <__cyg_profile_func_exit>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   12f28:	e24bd008 	sub	sp, fp, #8
   12f2c:	e8bd8810 	pop	{r4, fp, pc}

00012f30 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   12f30:	e92d4818 	push	{r3, r4, fp, lr}
   12f34:	e28db00c 	add	fp, sp, #12
   12f38:	e1a0400e 	mov	r4, lr
   12f3c:	e1a03004 	mov	r3, r4
   12f40:	e3020f30 	movw	r0, #12080	; 0x2f30
   12f44:	e3400001 	movt	r0, #1
   12f48:	e1a01003 	mov	r1, r3
   12f4c:	eb0009f2 	bl	1571c <__cyg_profile_func_enter>
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   12f50:	e92d0001 	stmfd	sp!, {r0}
   12f54:	e10f0000 	mrs	r0, CPSR
   12f58:	e38000c0 	orr	r0, r0, #192	; 0xc0
   12f5c:	e129f000 	msr	CPSR_fc, r0
   12f60:	e8bd0001 	ldmfd	sp!, {r0}
	xSchedulerRunning = pdFALSE;
   12f64:	e3003e0c 	movw	r3, #3596	; 0xe0c
   12f68:	e3403003 	movt	r3, #3
   12f6c:	e3a02000 	mov	r2, #0
   12f70:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   12f74:	ebfff4cf 	bl	102b8 <vPortEndScheduler>
   12f78:	e1a03004 	mov	r3, r4
   12f7c:	e3020f30 	movw	r0, #12080	; 0x2f30
   12f80:	e3400001 	movt	r0, #1
   12f84:	e1a01003 	mov	r1, r3
   12f88:	eb000a35 	bl	15864 <__cyg_profile_func_exit>
}
   12f8c:	e8bd8818 	pop	{r3, r4, fp, pc}

00012f90 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   12f90:	e92d4818 	push	{r3, r4, fp, lr}
   12f94:	e28db00c 	add	fp, sp, #12
   12f98:	e1a0400e 	mov	r4, lr
   12f9c:	e1a03004 	mov	r3, r4
   12fa0:	e3020f90 	movw	r0, #12176	; 0x2f90
   12fa4:	e3400001 	movt	r0, #1
   12fa8:	e1a01003 	mov	r1, r3
   12fac:	eb0009da 	bl	1571c <__cyg_profile_func_enter>
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   12fb0:	e3003e10 	movw	r3, #3600	; 0xe10
   12fb4:	e3403003 	movt	r3, #3
   12fb8:	e5933000 	ldr	r3, [r3]
   12fbc:	e2832001 	add	r2, r3, #1
   12fc0:	e3003e10 	movw	r3, #3600	; 0xe10
   12fc4:	e3403003 	movt	r3, #3
   12fc8:	e5832000 	str	r2, [r3]
   12fcc:	e1a03004 	mov	r3, r4
   12fd0:	e3020f90 	movw	r0, #12176	; 0x2f90
   12fd4:	e3400001 	movt	r0, #1
   12fd8:	e1a01003 	mov	r1, r3
   12fdc:	eb000a20 	bl	15864 <__cyg_profile_func_exit>
}
   12fe0:	e8bd8818 	pop	{r3, r4, fp, pc}

00012fe4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   12fe4:	e92d4830 	push	{r4, r5, fp, lr}
   12fe8:	e28db00c 	add	fp, sp, #12
   12fec:	e24dd008 	sub	sp, sp, #8
   12ff0:	e1a0500e 	mov	r5, lr
   12ff4:	e1a03005 	mov	r3, r5
   12ff8:	e3020fe4 	movw	r0, #12260	; 0x2fe4
   12ffc:	e3400001 	movt	r0, #1
   13000:	e1a01003 	mov	r1, r3
   13004:	eb0009c4 	bl	1571c <__cyg_profile_func_enter>
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   13008:	e3a03000 	mov	r3, #0
   1300c:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   13010:	ebfff58c 	bl	10648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   13014:	e3003e10 	movw	r3, #3600	; 0xe10
   13018:	e3403003 	movt	r3, #3
   1301c:	e5933000 	ldr	r3, [r3]
   13020:	e2432001 	sub	r2, r3, #1
   13024:	e3003e10 	movw	r3, #3600	; 0xe10
   13028:	e3403003 	movt	r3, #3
   1302c:	e5832000 	str	r2, [r3]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   13030:	e3003e10 	movw	r3, #3600	; 0xe10
   13034:	e3403003 	movt	r3, #3
   13038:	e5933000 	ldr	r3, [r3]
   1303c:	e3530000 	cmp	r3, #0
   13040:	1a000057 	bne	131a4 <xTaskResumeAll+0x1c0>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   13044:	e3003dfc 	movw	r3, #3580	; 0xdfc
   13048:	e3403003 	movt	r3, #3
   1304c:	e5933000 	ldr	r3, [r3]
   13050:	e3530000 	cmp	r3, #0
   13054:	0a000052 	beq	131a4 <xTaskResumeAll+0x1c0>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   13058:	e3a03000 	mov	r3, #0
   1305c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   13060:	ea000026 	b	13100 <xTaskResumeAll+0x11c>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   13064:	e3003dbc 	movw	r3, #3516	; 0xdbc
   13068:	e3403003 	movt	r3, #3
   1306c:	e593300c 	ldr	r3, [r3, #12]
   13070:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   13074:	e2843018 	add	r3, r4, #24
   13078:	e1a00003 	mov	r0, r3
   1307c:	ebfff88e 	bl	112bc <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   13080:	e2843004 	add	r3, r4, #4
   13084:	e1a00003 	mov	r0, r3
   13088:	ebfff88b 	bl	112bc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   1308c:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   13090:	e3003e08 	movw	r3, #3592	; 0xe08
   13094:	e3403003 	movt	r3, #3
   13098:	e5933000 	ldr	r3, [r3]
   1309c:	e1520003 	cmp	r2, r3
   130a0:	9a000003 	bls	130b4 <xTaskResumeAll+0xd0>
   130a4:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   130a8:	e3003e08 	movw	r3, #3592	; 0xe08
   130ac:	e3403003 	movt	r3, #3
   130b0:	e5832000 	str	r2, [r3]
   130b4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   130b8:	e3a02014 	mov	r2, #20
   130bc:	e0020392 	mul	r2, r2, r3
   130c0:	e3003d28 	movw	r3, #3368	; 0xd28
   130c4:	e3403003 	movt	r3, #3
   130c8:	e0822003 	add	r2, r2, r3
   130cc:	e2843004 	add	r3, r4, #4
   130d0:	e1a00002 	mov	r0, r2
   130d4:	e1a01003 	mov	r1, r3
   130d8:	ebfff809 	bl	11104 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   130dc:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   130e0:	e3003d24 	movw	r3, #3364	; 0xd24
   130e4:	e3403003 	movt	r3, #3
   130e8:	e5933000 	ldr	r3, [r3]
   130ec:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   130f0:	e1520003 	cmp	r2, r3
   130f4:	3a000001 	bcc	13100 <xTaskResumeAll+0x11c>
					{
						xYieldRequired = pdTRUE;
   130f8:	e3a03001 	mov	r3, #1
   130fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   13100:	e3003dbc 	movw	r3, #3516	; 0xdbc
   13104:	e3403003 	movt	r3, #3
   13108:	e5933000 	ldr	r3, [r3]
   1310c:	e3530000 	cmp	r3, #0
   13110:	1affffd3 	bne	13064 <xTaskResumeAll+0x80>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   13114:	e3003e14 	movw	r3, #3604	; 0xe14
   13118:	e3403003 	movt	r3, #3
   1311c:	e5933000 	ldr	r3, [r3]
   13120:	e3530000 	cmp	r3, #0
   13124:	0a00000f 	beq	13168 <xTaskResumeAll+0x184>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   13128:	ea000007 	b	1314c <xTaskResumeAll+0x168>
					{
						vTaskIncrementTick();
   1312c:	eb00006c 	bl	132e4 <vTaskIncrementTick>
						--uxMissedTicks;
   13130:	e3003e14 	movw	r3, #3604	; 0xe14
   13134:	e3403003 	movt	r3, #3
   13138:	e5933000 	ldr	r3, [r3]
   1313c:	e2432001 	sub	r2, r3, #1
   13140:	e3003e14 	movw	r3, #3604	; 0xe14
   13144:	e3403003 	movt	r3, #3
   13148:	e5832000 	str	r2, [r3]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   1314c:	e3003e14 	movw	r3, #3604	; 0xe14
   13150:	e3403003 	movt	r3, #3
   13154:	e5933000 	ldr	r3, [r3]
   13158:	e3530000 	cmp	r3, #0
   1315c:	1afffff2 	bne	1312c <xTaskResumeAll+0x148>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   13160:	e3a03001 	mov	r3, #1
   13164:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   13168:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1316c:	e3530001 	cmp	r3, #1
   13170:	0a000004 	beq	13188 <xTaskResumeAll+0x1a4>
   13174:	e3003e18 	movw	r3, #3608	; 0xe18
   13178:	e3403003 	movt	r3, #3
   1317c:	e5933000 	ldr	r3, [r3]
   13180:	e3530001 	cmp	r3, #1
   13184:	1a000006 	bne	131a4 <xTaskResumeAll+0x1c0>
				{
					xAlreadyYielded = pdTRUE;
   13188:	e3a03001 	mov	r3, #1
   1318c:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   13190:	e3003e18 	movw	r3, #3608	; 0xe18
   13194:	e3403003 	movt	r3, #3
   13198:	e3a02000 	mov	r2, #0
   1319c:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   131a0:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   131a4:	ebfff541 	bl	106b0 <vPortExitCritical>

	return xAlreadyYielded;
   131a8:	e51b4010 	ldr	r4, [fp, #-16]
   131ac:	e1a03005 	mov	r3, r5
   131b0:	e3020fe4 	movw	r0, #12260	; 0x2fe4
   131b4:	e3400001 	movt	r0, #1
   131b8:	e1a01003 	mov	r1, r3
   131bc:	eb0009a8 	bl	15864 <__cyg_profile_func_exit>
   131c0:	e1a03004 	mov	r3, r4
}
   131c4:	e1a00003 	mov	r0, r3
   131c8:	e24bd00c 	sub	sp, fp, #12
   131cc:	e8bd8830 	pop	{r4, r5, fp, pc}

000131d0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   131d0:	e92d4830 	push	{r4, r5, fp, lr}
   131d4:	e28db00c 	add	fp, sp, #12
   131d8:	e24dd008 	sub	sp, sp, #8
   131dc:	e1a0500e 	mov	r5, lr
   131e0:	e1a03005 	mov	r3, r5
   131e4:	e30301d0 	movw	r0, #12752	; 0x31d0
   131e8:	e3400001 	movt	r0, #1
   131ec:	e1a01003 	mov	r1, r3
   131f0:	eb000949 	bl	1571c <__cyg_profile_func_enter>
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   131f4:	ebfff513 	bl	10648 <vPortEnterCritical>
	{
		xTicks = xTickCount;
   131f8:	e3003e00 	movw	r3, #3584	; 0xe00
   131fc:	e3403003 	movt	r3, #3
   13200:	e5933000 	ldr	r3, [r3]
   13204:	e50b3010 	str	r3, [fp, #-16]
	}
	taskEXIT_CRITICAL();
   13208:	ebfff528 	bl	106b0 <vPortExitCritical>

	return xTicks;
   1320c:	e51b4010 	ldr	r4, [fp, #-16]
   13210:	e1a03005 	mov	r3, r5
   13214:	e30301d0 	movw	r0, #12752	; 0x31d0
   13218:	e3400001 	movt	r0, #1
   1321c:	e1a01003 	mov	r1, r3
   13220:	eb00098f 	bl	15864 <__cyg_profile_func_exit>
   13224:	e1a03004 	mov	r3, r4
}
   13228:	e1a00003 	mov	r0, r3
   1322c:	e24bd00c 	sub	sp, fp, #12
   13230:	e8bd8830 	pop	{r4, r5, fp, pc}

00013234 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   13234:	e92d4830 	push	{r4, r5, fp, lr}
   13238:	e28db00c 	add	fp, sp, #12
   1323c:	e24dd008 	sub	sp, sp, #8
   13240:	e1a0500e 	mov	r5, lr
   13244:	e1a03005 	mov	r3, r5
   13248:	e3030234 	movw	r0, #12852	; 0x3234
   1324c:	e3400001 	movt	r0, #1
   13250:	e1a01003 	mov	r1, r3
   13254:	eb000930 	bl	1571c <__cyg_profile_func_enter>
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   13258:	e3a03000 	mov	r3, #0
   1325c:	e50b3010 	str	r3, [fp, #-16]
	xReturn = xTickCount;
   13260:	e3003e00 	movw	r3, #3584	; 0xe00
   13264:	e3403003 	movt	r3, #3
   13268:	e5933000 	ldr	r3, [r3]
   1326c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   13270:	e51b4014 	ldr	r4, [fp, #-20]	; 0xffffffec
   13274:	e1a03005 	mov	r3, r5
   13278:	e3030234 	movw	r0, #12852	; 0x3234
   1327c:	e3400001 	movt	r0, #1
   13280:	e1a01003 	mov	r1, r3
   13284:	eb000976 	bl	15864 <__cyg_profile_func_exit>
   13288:	e1a03004 	mov	r3, r4
}
   1328c:	e1a00003 	mov	r0, r3
   13290:	e24bd00c 	sub	sp, fp, #12
   13294:	e8bd8830 	pop	{r4, r5, fp, pc}

00013298 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   13298:	e92d4830 	push	{r4, r5, fp, lr}
   1329c:	e28db00c 	add	fp, sp, #12
   132a0:	e1a0500e 	mov	r5, lr
   132a4:	e1a03005 	mov	r3, r5
   132a8:	e3030298 	movw	r0, #12952	; 0x3298
   132ac:	e3400001 	movt	r0, #1
   132b0:	e1a01003 	mov	r1, r3
   132b4:	eb000918 	bl	1571c <__cyg_profile_func_enter>
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   132b8:	e3003dfc 	movw	r3, #3580	; 0xdfc
   132bc:	e3403003 	movt	r3, #3
   132c0:	e5934000 	ldr	r4, [r3]
   132c4:	e1a03005 	mov	r3, r5
   132c8:	e3030298 	movw	r0, #12952	; 0x3298
   132cc:	e3400001 	movt	r0, #1
   132d0:	e1a01003 	mov	r1, r3
   132d4:	eb000962 	bl	15864 <__cyg_profile_func_exit>
   132d8:	e1a03004 	mov	r3, r4
}
   132dc:	e1a00003 	mov	r0, r3
   132e0:	e8bd8830 	pop	{r4, r5, fp, pc}

000132e4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   132e4:	e92d4810 	push	{r4, fp, lr}
   132e8:	e28db008 	add	fp, sp, #8
   132ec:	e24dd014 	sub	sp, sp, #20
   132f0:	e1a0400e 	mov	r4, lr
   132f4:	e1a03004 	mov	r3, r4
   132f8:	e30302e4 	movw	r0, #13028	; 0x32e4
   132fc:	e3400001 	movt	r0, #1
   13300:	e1a01003 	mov	r1, r3
   13304:	eb000904 	bl	1571c <__cyg_profile_func_enter>
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   13308:	e3003e10 	movw	r3, #3600	; 0xe10
   1330c:	e3403003 	movt	r3, #3
   13310:	e5933000 	ldr	r3, [r3]
   13314:	e3530000 	cmp	r3, #0
   13318:	1a000083 	bne	1352c <vTaskIncrementTick+0x248>
	{
		++xTickCount;
   1331c:	e3003e00 	movw	r3, #3584	; 0xe00
   13320:	e3403003 	movt	r3, #3
   13324:	e5933000 	ldr	r3, [r3]
   13328:	e2832001 	add	r2, r3, #1
   1332c:	e3003e00 	movw	r3, #3584	; 0xe00
   13330:	e3403003 	movt	r3, #3
   13334:	e5832000 	str	r2, [r3]
		if( xTickCount == ( portTickType ) 0U )
   13338:	e3003e00 	movw	r3, #3584	; 0xe00
   1333c:	e3403003 	movt	r3, #3
   13340:	e5933000 	ldr	r3, [r3]
   13344:	e3530000 	cmp	r3, #0
   13348:	1a00002a 	bne	133f8 <vTaskIncrementTick+0x114>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   1334c:	e3003db4 	movw	r3, #3508	; 0xdb4
   13350:	e3403003 	movt	r3, #3
   13354:	e5933000 	ldr	r3, [r3]
   13358:	e50b3010 	str	r3, [fp, #-16]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   1335c:	e3003db8 	movw	r3, #3512	; 0xdb8
   13360:	e3403003 	movt	r3, #3
   13364:	e5932000 	ldr	r2, [r3]
   13368:	e3003db4 	movw	r3, #3508	; 0xdb4
   1336c:	e3403003 	movt	r3, #3
   13370:	e5832000 	str	r2, [r3]
			pxOverflowDelayedTaskList = pxTemp;
   13374:	e3003db8 	movw	r3, #3512	; 0xdb8
   13378:	e3403003 	movt	r3, #3
   1337c:	e51b2010 	ldr	r2, [fp, #-16]
   13380:	e5832000 	str	r2, [r3]
			xNumOfOverflows++;
   13384:	e3003e1c 	movw	r3, #3612	; 0xe1c
   13388:	e3403003 	movt	r3, #3
   1338c:	e5933000 	ldr	r3, [r3]
   13390:	e2832001 	add	r2, r3, #1
   13394:	e3003e1c 	movw	r3, #3612	; 0xe1c
   13398:	e3403003 	movt	r3, #3
   1339c:	e5832000 	str	r2, [r3]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   133a0:	e3003db4 	movw	r3, #3508	; 0xdb4
   133a4:	e3403003 	movt	r3, #3
   133a8:	e5933000 	ldr	r3, [r3]
   133ac:	e5933000 	ldr	r3, [r3]
   133b0:	e3530000 	cmp	r3, #0
   133b4:	1a000004 	bne	133cc <vTaskIncrementTick+0xe8>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   133b8:	e3003b54 	movw	r3, #2900	; 0xb54
   133bc:	e3403003 	movt	r3, #3
   133c0:	e3e02000 	mvn	r2, #0
   133c4:	e5832000 	str	r2, [r3]
   133c8:	ea00000a 	b	133f8 <vTaskIncrementTick+0x114>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   133cc:	e3003db4 	movw	r3, #3508	; 0xdb4
   133d0:	e3403003 	movt	r3, #3
   133d4:	e5933000 	ldr	r3, [r3]
   133d8:	e593300c 	ldr	r3, [r3, #12]
   133dc:	e593300c 	ldr	r3, [r3, #12]
   133e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   133e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   133e8:	e5932004 	ldr	r2, [r3, #4]
   133ec:	e3003b54 	movw	r3, #2900	; 0xb54
   133f0:	e3403003 	movt	r3, #3
   133f4:	e5832000 	str	r2, [r3]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   133f8:	e3003e00 	movw	r3, #3584	; 0xe00
   133fc:	e3403003 	movt	r3, #3
   13400:	e5932000 	ldr	r2, [r3]
   13404:	e3003b54 	movw	r3, #2900	; 0xb54
   13408:	e3403003 	movt	r3, #3
   1340c:	e5933000 	ldr	r3, [r3]
   13410:	e1520003 	cmp	r2, r3
   13414:	3a000043 	bcc	13528 <vTaskIncrementTick+0x244>
   13418:	e3003db4 	movw	r3, #3508	; 0xdb4
   1341c:	e3403003 	movt	r3, #3
   13420:	e5933000 	ldr	r3, [r3]
   13424:	e5933000 	ldr	r3, [r3]
   13428:	e3530000 	cmp	r3, #0
   1342c:	1a000004 	bne	13444 <vTaskIncrementTick+0x160>
   13430:	e3003b54 	movw	r3, #2900	; 0xb54
   13434:	e3403003 	movt	r3, #3
   13438:	e3e02000 	mvn	r2, #0
   1343c:	e5832000 	str	r2, [r3]
   13440:	ea000038 	b	13528 <vTaskIncrementTick+0x244>
   13444:	e3003db4 	movw	r3, #3508	; 0xdb4
   13448:	e3403003 	movt	r3, #3
   1344c:	e5933000 	ldr	r3, [r3]
   13450:	e593300c 	ldr	r3, [r3, #12]
   13454:	e593300c 	ldr	r3, [r3, #12]
   13458:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1345c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13460:	e5933004 	ldr	r3, [r3, #4]
   13464:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   13468:	e3003e00 	movw	r3, #3584	; 0xe00
   1346c:	e3403003 	movt	r3, #3
   13470:	e5932000 	ldr	r2, [r3]
   13474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13478:	e1520003 	cmp	r2, r3
   1347c:	2a000004 	bcs	13494 <vTaskIncrementTick+0x1b0>
   13480:	e3003b54 	movw	r3, #2900	; 0xb54
   13484:	e3403003 	movt	r3, #3
   13488:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1348c:	e5832000 	str	r2, [r3]
   13490:	ea000024 	b	13528 <vTaskIncrementTick+0x244>
   13494:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13498:	e2833004 	add	r3, r3, #4
   1349c:	e1a00003 	mov	r0, r3
   134a0:	ebfff785 	bl	112bc <vListRemove>
   134a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   134a8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   134ac:	e3530000 	cmp	r3, #0
   134b0:	0a000003 	beq	134c4 <vTaskIncrementTick+0x1e0>
   134b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   134b8:	e2833018 	add	r3, r3, #24
   134bc:	e1a00003 	mov	r0, r3
   134c0:	ebfff77d 	bl	112bc <vListRemove>
   134c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   134c8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   134cc:	e3003e08 	movw	r3, #3592	; 0xe08
   134d0:	e3403003 	movt	r3, #3
   134d4:	e5933000 	ldr	r3, [r3]
   134d8:	e1520003 	cmp	r2, r3
   134dc:	9a000004 	bls	134f4 <vTaskIncrementTick+0x210>
   134e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   134e4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   134e8:	e3003e08 	movw	r3, #3592	; 0xe08
   134ec:	e3403003 	movt	r3, #3
   134f0:	e5832000 	str	r2, [r3]
   134f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   134f8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   134fc:	e3a02014 	mov	r2, #20
   13500:	e0020392 	mul	r2, r2, r3
   13504:	e3003d28 	movw	r3, #3368	; 0xd28
   13508:	e3403003 	movt	r3, #3
   1350c:	e0822003 	add	r2, r2, r3
   13510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13514:	e2833004 	add	r3, r3, #4
   13518:	e1a00002 	mov	r0, r2
   1351c:	e1a01003 	mov	r1, r3
   13520:	ebfff6f7 	bl	11104 <vListInsertEnd>
   13524:	eaffffbb 	b	13418 <vTaskIncrementTick+0x134>
   13528:	ea000006 	b	13548 <vTaskIncrementTick+0x264>
	}
	else
	{
		++uxMissedTicks;
   1352c:	e3003e14 	movw	r3, #3604	; 0xe14
   13530:	e3403003 	movt	r3, #3
   13534:	e5933000 	ldr	r3, [r3]
   13538:	e2832001 	add	r2, r3, #1
   1353c:	e3003e14 	movw	r3, #3604	; 0xe14
   13540:	e3403003 	movt	r3, #3
   13544:	e5832000 	str	r2, [r3]
   13548:	e1a03004 	mov	r3, r4
   1354c:	e30302e4 	movw	r0, #13028	; 0x32e4
   13550:	e3400001 	movt	r0, #1
   13554:	e1a01003 	mov	r1, r3
   13558:	eb0008c1 	bl	15864 <__cyg_profile_func_exit>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   1355c:	e24bd008 	sub	sp, fp, #8
   13560:	e8bd8810 	pop	{r4, fp, pc}

00013564 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   13564:	e92d4810 	push	{r4, fp, lr}
   13568:	e28db008 	add	fp, sp, #8
   1356c:	e24dd014 	sub	sp, sp, #20
   13570:	e1a0400e 	mov	r4, lr
   13574:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   13578:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1357c:	e1a03004 	mov	r3, r4
   13580:	e3030564 	movw	r0, #13668	; 0x3564
   13584:	e3400001 	movt	r0, #1
   13588:	e1a01003 	mov	r1, r3
   1358c:	eb000862 	bl	1571c <__cyg_profile_func_enter>
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   13590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13594:	e3530000 	cmp	r3, #0
   13598:	1a000004 	bne	135b0 <vTaskSetApplicationTaskTag+0x4c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   1359c:	e3003d24 	movw	r3, #3364	; 0xd24
   135a0:	e3403003 	movt	r3, #3
   135a4:	e5933000 	ldr	r3, [r3]
   135a8:	e50b3010 	str	r3, [fp, #-16]
   135ac:	ea000001 	b	135b8 <vTaskSetApplicationTaskTag+0x54>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   135b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   135b4:	e50b3010 	str	r3, [fp, #-16]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   135b8:	ebfff422 	bl	10648 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   135bc:	e51b3010 	ldr	r3, [fp, #-16]
   135c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   135c4:	e5832044 	str	r2, [r3, #68]	; 0x44
		taskEXIT_CRITICAL();
   135c8:	ebfff438 	bl	106b0 <vPortExitCritical>
   135cc:	e1a03004 	mov	r3, r4
   135d0:	e3030564 	movw	r0, #13668	; 0x3564
   135d4:	e3400001 	movt	r0, #1
   135d8:	e1a01003 	mov	r1, r3
   135dc:	eb0008a0 	bl	15864 <__cyg_profile_func_exit>
	}
   135e0:	e24bd008 	sub	sp, fp, #8
   135e4:	e8bd8810 	pop	{r4, fp, pc}

000135e8 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   135e8:	e92d4830 	push	{r4, r5, fp, lr}
   135ec:	e28db00c 	add	fp, sp, #12
   135f0:	e24dd010 	sub	sp, sp, #16
   135f4:	e1a0500e 	mov	r5, lr
   135f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   135fc:	e1a03005 	mov	r3, r5
   13600:	e30305e8 	movw	r0, #13800	; 0x35e8
   13604:	e3400001 	movt	r0, #1
   13608:	e1a01003 	mov	r1, r3
   1360c:	eb000842 	bl	1571c <__cyg_profile_func_enter>
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   13610:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13614:	e3530000 	cmp	r3, #0
   13618:	1a000004 	bne	13630 <xTaskGetApplicationTaskTag+0x48>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   1361c:	e3003d24 	movw	r3, #3364	; 0xd24
   13620:	e3403003 	movt	r3, #3
   13624:	e5933000 	ldr	r3, [r3]
   13628:	e50b3010 	str	r3, [fp, #-16]
   1362c:	ea000001 	b	13638 <xTaskGetApplicationTaskTag+0x50>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   13630:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13634:	e50b3010 	str	r3, [fp, #-16]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   13638:	ebfff402 	bl	10648 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   1363c:	e51b3010 	ldr	r3, [fp, #-16]
   13640:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   13644:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		taskEXIT_CRITICAL();
   13648:	ebfff418 	bl	106b0 <vPortExitCritical>

		return xReturn;
   1364c:	e51b4014 	ldr	r4, [fp, #-20]	; 0xffffffec
   13650:	e1a03005 	mov	r3, r5
   13654:	e30305e8 	movw	r0, #13800	; 0x35e8
   13658:	e3400001 	movt	r0, #1
   1365c:	e1a01003 	mov	r1, r3
   13660:	eb00087f 	bl	15864 <__cyg_profile_func_exit>
   13664:	e1a03004 	mov	r3, r4
	}
   13668:	e1a00003 	mov	r0, r3
   1366c:	e24bd00c 	sub	sp, fp, #12
   13670:	e8bd8830 	pop	{r4, r5, fp, pc}

00013674 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   13674:	e92d4830 	push	{r4, r5, fp, lr}
   13678:	e28db00c 	add	fp, sp, #12
   1367c:	e24dd010 	sub	sp, sp, #16
   13680:	e1a0500e 	mov	r5, lr
   13684:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   13688:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1368c:	e1a03005 	mov	r3, r5
   13690:	e3030674 	movw	r0, #13940	; 0x3674
   13694:	e3400001 	movt	r0, #1
   13698:	e1a01003 	mov	r1, r3
   1369c:	eb00081e 	bl	1571c <__cyg_profile_func_enter>
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   136a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   136a4:	e3530000 	cmp	r3, #0
   136a8:	1a000004 	bne	136c0 <xTaskCallApplicationTaskHook+0x4c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   136ac:	e3003d24 	movw	r3, #3364	; 0xd24
   136b0:	e3403003 	movt	r3, #3
   136b4:	e5933000 	ldr	r3, [r3]
   136b8:	e50b3010 	str	r3, [fp, #-16]
   136bc:	ea000001 	b	136c8 <xTaskCallApplicationTaskHook+0x54>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   136c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   136c4:	e50b3010 	str	r3, [fp, #-16]
		}

		if( xTCB->pxTaskTag != NULL )
   136c8:	e51b3010 	ldr	r3, [fp, #-16]
   136cc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   136d0:	e3530000 	cmp	r3, #0
   136d4:	0a000005 	beq	136f0 <xTaskCallApplicationTaskHook+0x7c>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   136d8:	e51b3010 	ldr	r3, [fp, #-16]
   136dc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   136e0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   136e4:	e12fff33 	blx	r3
   136e8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
   136ec:	ea000001 	b	136f8 <xTaskCallApplicationTaskHook+0x84>
		}
		else
		{
			xReturn = pdFAIL;
   136f0:	e3a03000 	mov	r3, #0
   136f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		}

		return xReturn;
   136f8:	e51b4014 	ldr	r4, [fp, #-20]	; 0xffffffec
   136fc:	e1a03005 	mov	r3, r5
   13700:	e3030674 	movw	r0, #13940	; 0x3674
   13704:	e3400001 	movt	r0, #1
   13708:	e1a01003 	mov	r1, r3
   1370c:	eb000854 	bl	15864 <__cyg_profile_func_exit>
   13710:	e1a03004 	mov	r3, r4
	}
   13714:	e1a00003 	mov	r0, r3
   13718:	e24bd00c 	sub	sp, fp, #12
   1371c:	e8bd8830 	pop	{r4, r5, fp, pc}

00013720 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   13720:	e92d4810 	push	{r4, fp, lr}
   13724:	e28db008 	add	fp, sp, #8
   13728:	e24dd00c 	sub	sp, sp, #12
   1372c:	e1a0400e 	mov	r4, lr
   13730:	e1a03004 	mov	r3, r4
   13734:	e3030720 	movw	r0, #14112	; 0x3720
   13738:	e3400001 	movt	r0, #1
   1373c:	e1a01003 	mov	r1, r3
   13740:	eb0007f5 	bl	1571c <__cyg_profile_func_enter>
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   13744:	e3003e10 	movw	r3, #3600	; 0xe10
   13748:	e3403003 	movt	r3, #3
   1374c:	e5933000 	ldr	r3, [r3]
   13750:	e3530000 	cmp	r3, #0
   13754:	0a000004 	beq	1376c <vTaskSwitchContext+0x4c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   13758:	e3003e18 	movw	r3, #3608	; 0xe18
   1375c:	e3403003 	movt	r3, #3
   13760:	e3a02001 	mov	r2, #1
   13764:	e5832000 	str	r2, [r3]
   13768:	ea000031 	b	13834 <vTaskSwitchContext+0x114>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   1376c:	ea000006 	b	1378c <vTaskSwitchContext+0x6c>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
   13770:	e3003e08 	movw	r3, #3592	; 0xe08
   13774:	e3403003 	movt	r3, #3
   13778:	e5933000 	ldr	r3, [r3]
   1377c:	e2432001 	sub	r2, r3, #1
   13780:	e3003e08 	movw	r3, #3592	; 0xe08
   13784:	e3403003 	movt	r3, #3
   13788:	e5832000 	str	r2, [r3]

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   1378c:	e3003e08 	movw	r3, #3592	; 0xe08
   13790:	e3403003 	movt	r3, #3
   13794:	e5932000 	ldr	r2, [r3]
   13798:	e3003d28 	movw	r3, #3368	; 0xd28
   1379c:	e3403003 	movt	r3, #3
   137a0:	e3a01014 	mov	r1, #20
   137a4:	e0020291 	mul	r2, r1, r2
   137a8:	e0833002 	add	r3, r3, r2
   137ac:	e5933000 	ldr	r3, [r3]
   137b0:	e3530000 	cmp	r3, #0
   137b4:	0affffed 	beq	13770 <vTaskSwitchContext+0x50>

#if (configBLUETHUNDER == 1)
		pxCurrentTCB->pTraceEvent = pTraceEvent;	// Save Trace event pointer state to TCB.
#endif

		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   137b8:	e3003e08 	movw	r3, #3592	; 0xe08
   137bc:	e3403003 	movt	r3, #3
   137c0:	e5933000 	ldr	r3, [r3]
   137c4:	e3a02014 	mov	r2, #20
   137c8:	e0020392 	mul	r2, r2, r3
   137cc:	e3003d28 	movw	r3, #3368	; 0xd28
   137d0:	e3403003 	movt	r3, #3
   137d4:	e0823003 	add	r3, r2, r3
   137d8:	e50b3010 	str	r3, [fp, #-16]
   137dc:	e51b3010 	ldr	r3, [fp, #-16]
   137e0:	e5933004 	ldr	r3, [r3, #4]
   137e4:	e5932004 	ldr	r2, [r3, #4]
   137e8:	e51b3010 	ldr	r3, [fp, #-16]
   137ec:	e5832004 	str	r2, [r3, #4]
   137f0:	e51b3010 	ldr	r3, [fp, #-16]
   137f4:	e5932004 	ldr	r2, [r3, #4]
   137f8:	e51b3010 	ldr	r3, [fp, #-16]
   137fc:	e2833008 	add	r3, r3, #8
   13800:	e1520003 	cmp	r2, r3
   13804:	1a000004 	bne	1381c <vTaskSwitchContext+0xfc>
   13808:	e51b3010 	ldr	r3, [fp, #-16]
   1380c:	e5933004 	ldr	r3, [r3, #4]
   13810:	e5932004 	ldr	r2, [r3, #4]
   13814:	e51b3010 	ldr	r3, [fp, #-16]
   13818:	e5832004 	str	r2, [r3, #4]
   1381c:	e51b3010 	ldr	r3, [fp, #-16]
   13820:	e5933004 	ldr	r3, [r3, #4]
   13824:	e593200c 	ldr	r2, [r3, #12]
   13828:	e3003d24 	movw	r3, #3364	; 0xd24
   1382c:	e3403003 	movt	r3, #3
   13830:	e5832000 	str	r2, [r3]
   13834:	e1a03004 	mov	r3, r4
   13838:	e3030720 	movw	r0, #14112	; 0x3720
   1383c:	e3400001 	movt	r0, #1
   13840:	e1a01003 	mov	r1, r3
   13844:	eb000806 	bl	15864 <__cyg_profile_func_exit>
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   13848:	e24bd008 	sub	sp, fp, #8
   1384c:	e8bd8810 	pop	{r4, fp, pc}

00013850 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   13850:	e92d4810 	push	{r4, fp, lr}
   13854:	e28db008 	add	fp, sp, #8
   13858:	e24dd014 	sub	sp, sp, #20
   1385c:	e1a0400e 	mov	r4, lr
   13860:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   13864:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   13868:	e1a03004 	mov	r3, r4
   1386c:	e3030850 	movw	r0, #14416	; 0x3850
   13870:	e3400001 	movt	r0, #1
   13874:	e1a01003 	mov	r1, r3
   13878:	eb0007a7 	bl	1571c <__cyg_profile_func_enter>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   1387c:	e3003d24 	movw	r3, #3364	; 0xd24
   13880:	e3403003 	movt	r3, #3
   13884:	e5933000 	ldr	r3, [r3]
   13888:	e2833018 	add	r3, r3, #24
   1388c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   13890:	e1a01003 	mov	r1, r3
   13894:	ebfff649 	bl	111c0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   13898:	e3003d24 	movw	r3, #3364	; 0xd24
   1389c:	e3403003 	movt	r3, #3
   138a0:	e5933000 	ldr	r3, [r3]
   138a4:	e2833004 	add	r3, r3, #4
   138a8:	e1a00003 	mov	r0, r3
   138ac:	ebfff682 	bl	112bc <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   138b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   138b4:	e3730001 	cmn	r3, #1
   138b8:	1a000008 	bne	138e0 <vTaskPlaceOnEventList+0x90>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   138bc:	e3003d24 	movw	r3, #3364	; 0xd24
   138c0:	e3403003 	movt	r3, #3
   138c4:	e5933000 	ldr	r3, [r3]
   138c8:	e2833004 	add	r3, r3, #4
   138cc:	e3000de8 	movw	r0, #3560	; 0xde8
   138d0:	e3400003 	movt	r0, #3
   138d4:	e1a01003 	mov	r1, r3
   138d8:	ebfff609 	bl	11104 <vListInsertEnd>
   138dc:	ea000007 	b	13900 <vTaskPlaceOnEventList+0xb0>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   138e0:	e3003e00 	movw	r3, #3584	; 0xe00
   138e4:	e3403003 	movt	r3, #3
   138e8:	e5932000 	ldr	r2, [r3]
   138ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   138f0:	e0823003 	add	r3, r2, r3
   138f4:	e50b3010 	str	r3, [fp, #-16]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   138f8:	e51b0010 	ldr	r0, [fp, #-16]
   138fc:	eb000191 	bl	13f48 <prvAddCurrentTaskToDelayedList>
   13900:	e1a03004 	mov	r3, r4
   13904:	e3030850 	movw	r0, #14416	; 0x3850
   13908:	e3400001 	movt	r0, #1
   1390c:	e1a01003 	mov	r1, r3
   13910:	eb0007d3 	bl	15864 <__cyg_profile_func_exit>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   13914:	e24bd008 	sub	sp, fp, #8
   13918:	e8bd8810 	pop	{r4, fp, pc}

0001391c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   1391c:	e92d4830 	push	{r4, r5, fp, lr}
   13920:	e28db00c 	add	fp, sp, #12
   13924:	e24dd010 	sub	sp, sp, #16
   13928:	e1a0500e 	mov	r5, lr
   1392c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   13930:	e1a03005 	mov	r3, r5
   13934:	e303091c 	movw	r0, #14620	; 0x391c
   13938:	e3400001 	movt	r0, #1
   1393c:	e1a01003 	mov	r1, r3
   13940:	eb000775 	bl	1571c <__cyg_profile_func_enter>
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   13944:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13948:	e593300c 	ldr	r3, [r3, #12]
   1394c:	e593300c 	ldr	r3, [r3, #12]
   13950:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   13954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13958:	e2833018 	add	r3, r3, #24
   1395c:	e1a00003 	mov	r0, r3
   13960:	ebfff655 	bl	112bc <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   13964:	e3003e10 	movw	r3, #3600	; 0xe10
   13968:	e3403003 	movt	r3, #3
   1396c:	e5933000 	ldr	r3, [r3]
   13970:	e3530000 	cmp	r3, #0
   13974:	1a00001c 	bne	139ec <xTaskRemoveFromEventList+0xd0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   13978:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1397c:	e2833004 	add	r3, r3, #4
   13980:	e1a00003 	mov	r0, r3
   13984:	ebfff64c 	bl	112bc <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   13988:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1398c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   13990:	e3003e08 	movw	r3, #3592	; 0xe08
   13994:	e3403003 	movt	r3, #3
   13998:	e5933000 	ldr	r3, [r3]
   1399c:	e1520003 	cmp	r2, r3
   139a0:	9a000004 	bls	139b8 <xTaskRemoveFromEventList+0x9c>
   139a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   139a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   139ac:	e3003e08 	movw	r3, #3592	; 0xe08
   139b0:	e3403003 	movt	r3, #3
   139b4:	e5832000 	str	r2, [r3]
   139b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   139bc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   139c0:	e3a02014 	mov	r2, #20
   139c4:	e0020392 	mul	r2, r2, r3
   139c8:	e3003d28 	movw	r3, #3368	; 0xd28
   139cc:	e3403003 	movt	r3, #3
   139d0:	e0822003 	add	r2, r2, r3
   139d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   139d8:	e2833004 	add	r3, r3, #4
   139dc:	e1a00002 	mov	r0, r2
   139e0:	e1a01003 	mov	r1, r3
   139e4:	ebfff5c6 	bl	11104 <vListInsertEnd>
   139e8:	ea000005 	b	13a04 <xTaskRemoveFromEventList+0xe8>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   139ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   139f0:	e2833018 	add	r3, r3, #24
   139f4:	e3000dbc 	movw	r0, #3516	; 0xdbc
   139f8:	e3400003 	movt	r0, #3
   139fc:	e1a01003 	mov	r1, r3
   13a00:	ebfff5bf 	bl	11104 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   13a04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13a08:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   13a0c:	e3003d24 	movw	r3, #3364	; 0xd24
   13a10:	e3403003 	movt	r3, #3
   13a14:	e5933000 	ldr	r3, [r3]
   13a18:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   13a1c:	e1520003 	cmp	r2, r3
   13a20:	3a000002 	bcc	13a30 <xTaskRemoveFromEventList+0x114>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   13a24:	e3a03001 	mov	r3, #1
   13a28:	e50b3010 	str	r3, [fp, #-16]
   13a2c:	ea000001 	b	13a38 <xTaskRemoveFromEventList+0x11c>
	}
	else
	{
		xReturn = pdFALSE;
   13a30:	e3a03000 	mov	r3, #0
   13a34:	e50b3010 	str	r3, [fp, #-16]
	}

	return xReturn;
   13a38:	e51b4010 	ldr	r4, [fp, #-16]
   13a3c:	e1a03005 	mov	r3, r5
   13a40:	e303091c 	movw	r0, #14620	; 0x391c
   13a44:	e3400001 	movt	r0, #1
   13a48:	e1a01003 	mov	r1, r3
   13a4c:	eb000784 	bl	15864 <__cyg_profile_func_exit>
   13a50:	e1a03004 	mov	r3, r4
}
   13a54:	e1a00003 	mov	r0, r3
   13a58:	e24bd00c 	sub	sp, fp, #12
   13a5c:	e8bd8830 	pop	{r4, r5, fp, pc}

00013a60 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   13a60:	e92d4810 	push	{r4, fp, lr}
   13a64:	e28db008 	add	fp, sp, #8
   13a68:	e24dd00c 	sub	sp, sp, #12
   13a6c:	e1a0400e 	mov	r4, lr
   13a70:	e50b0010 	str	r0, [fp, #-16]
   13a74:	e1a03004 	mov	r3, r4
   13a78:	e3030a60 	movw	r0, #14944	; 0x3a60
   13a7c:	e3400001 	movt	r0, #1
   13a80:	e1a01003 	mov	r1, r3
   13a84:	eb000724 	bl	1571c <__cyg_profile_func_enter>
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   13a88:	e3003e1c 	movw	r3, #3612	; 0xe1c
   13a8c:	e3403003 	movt	r3, #3
   13a90:	e5932000 	ldr	r2, [r3]
   13a94:	e51b3010 	ldr	r3, [fp, #-16]
   13a98:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   13a9c:	e3003e00 	movw	r3, #3584	; 0xe00
   13aa0:	e3403003 	movt	r3, #3
   13aa4:	e5932000 	ldr	r2, [r3]
   13aa8:	e51b3010 	ldr	r3, [fp, #-16]
   13aac:	e5832004 	str	r2, [r3, #4]
   13ab0:	e1a03004 	mov	r3, r4
   13ab4:	e3030a60 	movw	r0, #14944	; 0x3a60
   13ab8:	e3400001 	movt	r0, #1
   13abc:	e1a01003 	mov	r1, r3
   13ac0:	eb000767 	bl	15864 <__cyg_profile_func_exit>
}
   13ac4:	e24bd008 	sub	sp, fp, #8
   13ac8:	e8bd8810 	pop	{r4, fp, pc}

00013acc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   13acc:	e92d4830 	push	{r4, r5, fp, lr}
   13ad0:	e28db00c 	add	fp, sp, #12
   13ad4:	e24dd010 	sub	sp, sp, #16
   13ad8:	e1a0500e 	mov	r5, lr
   13adc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   13ae0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   13ae4:	e1a03005 	mov	r3, r5
   13ae8:	e3030acc 	movw	r0, #15052	; 0x3acc
   13aec:	e3400001 	movt	r0, #1
   13af0:	e1a01003 	mov	r1, r3
   13af4:	eb000708 	bl	1571c <__cyg_profile_func_enter>
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   13af8:	ebfff2d2 	bl	10648 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   13afc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   13b00:	e5933000 	ldr	r3, [r3]
   13b04:	e3730001 	cmn	r3, #1
   13b08:	1a000002 	bne	13b18 <xTaskCheckForTimeOut+0x4c>
			{
				xReturn = pdFALSE;
   13b0c:	e3a03000 	mov	r3, #0
   13b10:	e50b3010 	str	r3, [fp, #-16]
   13b14:	ea00002c 	b	13bcc <xTaskCheckForTimeOut+0x100>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   13b18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b1c:	e5932000 	ldr	r2, [r3]
   13b20:	e3003e1c 	movw	r3, #3612	; 0xe1c
   13b24:	e3403003 	movt	r3, #3
   13b28:	e5933000 	ldr	r3, [r3]
   13b2c:	e1520003 	cmp	r2, r3
   13b30:	0a000009 	beq	13b5c <xTaskCheckForTimeOut+0x90>
   13b34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b38:	e5932004 	ldr	r2, [r3, #4]
   13b3c:	e3003e00 	movw	r3, #3584	; 0xe00
   13b40:	e3403003 	movt	r3, #3
   13b44:	e5933000 	ldr	r3, [r3]
   13b48:	e1520003 	cmp	r2, r3
   13b4c:	8a000002 	bhi	13b5c <xTaskCheckForTimeOut+0x90>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   13b50:	e3a03001 	mov	r3, #1
   13b54:	e50b3010 	str	r3, [fp, #-16]
   13b58:	ea00001b 	b	13bcc <xTaskCheckForTimeOut+0x100>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   13b5c:	e3003e00 	movw	r3, #3584	; 0xe00
   13b60:	e3403003 	movt	r3, #3
   13b64:	e5932000 	ldr	r2, [r3]
   13b68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b6c:	e5933004 	ldr	r3, [r3, #4]
   13b70:	e0632002 	rsb	r2, r3, r2
   13b74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   13b78:	e5933000 	ldr	r3, [r3]
   13b7c:	e1520003 	cmp	r2, r3
   13b80:	2a00000f 	bcs	13bc4 <xTaskCheckForTimeOut+0xf8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   13b84:	e3003e00 	movw	r3, #3584	; 0xe00
   13b88:	e3403003 	movt	r3, #3
   13b8c:	e5932000 	ldr	r2, [r3]
   13b90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b94:	e5933004 	ldr	r3, [r3, #4]
   13b98:	e0633002 	rsb	r3, r3, r2
   13b9c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   13ba0:	e5922000 	ldr	r2, [r2]
   13ba4:	e0632002 	rsb	r2, r3, r2
   13ba8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   13bac:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   13bb0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   13bb4:	ebffffa9 	bl	13a60 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   13bb8:	e3a03000 	mov	r3, #0
   13bbc:	e50b3010 	str	r3, [fp, #-16]
   13bc0:	ea000001 	b	13bcc <xTaskCheckForTimeOut+0x100>
		}
		else
		{
			xReturn = pdTRUE;
   13bc4:	e3a03001 	mov	r3, #1
   13bc8:	e50b3010 	str	r3, [fp, #-16]
		}
	}
	taskEXIT_CRITICAL();
   13bcc:	ebfff2b7 	bl	106b0 <vPortExitCritical>

	return xReturn;
   13bd0:	e51b4010 	ldr	r4, [fp, #-16]
   13bd4:	e1a03005 	mov	r3, r5
   13bd8:	e3030acc 	movw	r0, #15052	; 0x3acc
   13bdc:	e3400001 	movt	r0, #1
   13be0:	e1a01003 	mov	r1, r3
   13be4:	eb00071e 	bl	15864 <__cyg_profile_func_exit>
   13be8:	e1a03004 	mov	r3, r4
}
   13bec:	e1a00003 	mov	r0, r3
   13bf0:	e24bd00c 	sub	sp, fp, #12
   13bf4:	e8bd8830 	pop	{r4, r5, fp, pc}

00013bf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   13bf8:	e92d4818 	push	{r3, r4, fp, lr}
   13bfc:	e28db00c 	add	fp, sp, #12
   13c00:	e1a0400e 	mov	r4, lr
   13c04:	e1a03004 	mov	r3, r4
   13c08:	e3030bf8 	movw	r0, #15352	; 0x3bf8
   13c0c:	e3400001 	movt	r0, #1
   13c10:	e1a01003 	mov	r1, r3
   13c14:	eb0006c0 	bl	1571c <__cyg_profile_func_enter>
	xMissedYield = pdTRUE;
   13c18:	e3003e18 	movw	r3, #3608	; 0xe18
   13c1c:	e3403003 	movt	r3, #3
   13c20:	e3a02001 	mov	r2, #1
   13c24:	e5832000 	str	r2, [r3]
   13c28:	e1a03004 	mov	r3, r4
   13c2c:	e3030bf8 	movw	r0, #15352	; 0x3bf8
   13c30:	e3400001 	movt	r0, #1
   13c34:	e1a01003 	mov	r1, r3
   13c38:	eb000709 	bl	15864 <__cyg_profile_func_exit>
}
   13c3c:	e8bd8818 	pop	{r3, r4, fp, pc}

00013c40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   13c40:	e92d4800 	push	{fp, lr}
   13c44:	e28db004 	add	fp, sp, #4
   13c48:	e24dd008 	sub	sp, sp, #8
   13c4c:	e1a0300e 	mov	r3, lr
   13c50:	e50b0008 	str	r0, [fp, #-8]
   13c54:	e3030c40 	movw	r0, #15424	; 0x3c40
   13c58:	e3400001 	movt	r0, #1
   13c5c:	e1a01003 	mov	r1, r3
   13c60:	eb0006ad 	bl	1571c <__cyg_profile_func_enter>
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   13c64:	eb00007a 	bl	13e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   13c68:	e3003d28 	movw	r3, #3368	; 0xd28
   13c6c:	e3403003 	movt	r3, #3
   13c70:	e5933000 	ldr	r3, [r3]
   13c74:	e3530001 	cmp	r3, #1
   13c78:	9a000000 	bls	13c80 <prvIdleTask+0x40>
			{
				taskYIELD();
   13c7c:	ef000000 	svc	0x00000000
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
   13c80:	eafffff7 	b	13c64 <prvIdleTask+0x24>

00013c84 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   13c84:	e92d4810 	push	{r4, fp, lr}
   13c88:	e28db008 	add	fp, sp, #8
   13c8c:	e24dd014 	sub	sp, sp, #20
   13c90:	e1a0400e 	mov	r4, lr
   13c94:	e50b0010 	str	r0, [fp, #-16]
   13c98:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   13c9c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   13ca0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   13ca4:	e1a03004 	mov	r3, r4
   13ca8:	e3030c84 	movw	r0, #15492	; 0x3c84
   13cac:	e3400001 	movt	r0, #1
   13cb0:	e1a01003 	mov	r1, r3
   13cb4:	eb000698 	bl	1571c <__cyg_profile_func_enter>
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   13cb8:	e51b3010 	ldr	r3, [fp, #-16]
   13cbc:	e2833034 	add	r3, r3, #52	; 0x34
   13cc0:	e1a00003 	mov	r0, r3
   13cc4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   13cc8:	e3a02010 	mov	r2, #16
   13ccc:	eb000c09 	bl	16cf8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   13cd0:	e51b3010 	ldr	r3, [fp, #-16]
   13cd4:	e3a02000 	mov	r2, #0
   13cd8:	e5c32043 	strb	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   13cdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ce0:	e3530004 	cmp	r3, #4
   13ce4:	9a000001 	bls	13cf0 <prvInitialiseTCBVariables+0x6c>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   13ce8:	e3a03004 	mov	r3, #4
   13cec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}

	pxTCB->uxPriority = uxPriority;
   13cf0:	e51b3010 	ldr	r3, [fp, #-16]
   13cf4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   13cf8:	e583202c 	str	r2, [r3, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   13cfc:	e51b3010 	ldr	r3, [fp, #-16]
   13d00:	e2833004 	add	r3, r3, #4
   13d04:	e1a00003 	mov	r0, r3
   13d08:	ebfff4e9 	bl	110b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   13d0c:	e51b3010 	ldr	r3, [fp, #-16]
   13d10:	e2833018 	add	r3, r3, #24
   13d14:	e1a00003 	mov	r0, r3
   13d18:	ebfff4e5 	bl	110b4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   13d1c:	e51b3010 	ldr	r3, [fp, #-16]
   13d20:	e51b2010 	ldr	r2, [fp, #-16]
   13d24:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   13d28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d2c:	e2632005 	rsb	r2, r3, #5
   13d30:	e51b3010 	ldr	r3, [fp, #-16]
   13d34:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   13d38:	e51b3010 	ldr	r3, [fp, #-16]
   13d3c:	e51b2010 	ldr	r2, [fp, #-16]
   13d40:	e5832024 	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   13d44:	e51b3010 	ldr	r3, [fp, #-16]
   13d48:	e3a02000 	mov	r2, #0
   13d4c:	e5832044 	str	r2, [r3, #68]	; 0x44
   13d50:	e1a03004 	mov	r3, r4
   13d54:	e3030c84 	movw	r0, #15492	; 0x3c84
   13d58:	e3400001 	movt	r0, #1
   13d5c:	e1a01003 	mov	r1, r3
   13d60:	eb0006bf 	bl	15864 <__cyg_profile_func_exit>
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   13d64:	e24bd008 	sub	sp, fp, #8
   13d68:	e8bd8810 	pop	{r4, fp, pc}

00013d6c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   13d6c:	e92d4810 	push	{r4, fp, lr}
   13d70:	e28db008 	add	fp, sp, #8
   13d74:	e24dd00c 	sub	sp, sp, #12
   13d78:	e1a0400e 	mov	r4, lr
   13d7c:	e1a03004 	mov	r3, r4
   13d80:	e3030d6c 	movw	r0, #15724	; 0x3d6c
   13d84:	e3400001 	movt	r0, #1
   13d88:	e1a01003 	mov	r1, r3
   13d8c:	eb000662 	bl	1571c <__cyg_profile_func_enter>
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   13d90:	e3a03000 	mov	r3, #0
   13d94:	e50b3010 	str	r3, [fp, #-16]
   13d98:	ea00000a 	b	13dc8 <prvInitialiseTaskLists+0x5c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   13d9c:	e51b3010 	ldr	r3, [fp, #-16]
   13da0:	e3a02014 	mov	r2, #20
   13da4:	e0020392 	mul	r2, r2, r3
   13da8:	e3003d28 	movw	r3, #3368	; 0xd28
   13dac:	e3403003 	movt	r3, #3
   13db0:	e0823003 	add	r3, r2, r3
   13db4:	e1a00003 	mov	r0, r3
   13db8:	ebfff49a 	bl	11028 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   13dbc:	e51b3010 	ldr	r3, [fp, #-16]
   13dc0:	e2833001 	add	r3, r3, #1
   13dc4:	e50b3010 	str	r3, [fp, #-16]
   13dc8:	e51b3010 	ldr	r3, [fp, #-16]
   13dcc:	e3530004 	cmp	r3, #4
   13dd0:	9afffff1 	bls	13d9c <prvInitialiseTaskLists+0x30>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   13dd4:	e3000d8c 	movw	r0, #3468	; 0xd8c
   13dd8:	e3400003 	movt	r0, #3
   13ddc:	ebfff491 	bl	11028 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   13de0:	e3000da0 	movw	r0, #3488	; 0xda0
   13de4:	e3400003 	movt	r0, #3
   13de8:	ebfff48e 	bl	11028 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   13dec:	e3000dbc 	movw	r0, #3516	; 0xdbc
   13df0:	e3400003 	movt	r0, #3
   13df4:	ebfff48b 	bl	11028 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   13df8:	e3000dd0 	movw	r0, #3536	; 0xdd0
   13dfc:	e3400003 	movt	r0, #3
   13e00:	ebfff488 	bl	11028 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   13e04:	e3000de8 	movw	r0, #3560	; 0xde8
   13e08:	e3400003 	movt	r0, #3
   13e0c:	ebfff485 	bl	11028 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   13e10:	e3003db4 	movw	r3, #3508	; 0xdb4
   13e14:	e3403003 	movt	r3, #3
   13e18:	e3002d8c 	movw	r2, #3468	; 0xd8c
   13e1c:	e3402003 	movt	r2, #3
   13e20:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   13e24:	e3003db8 	movw	r3, #3512	; 0xdb8
   13e28:	e3403003 	movt	r3, #3
   13e2c:	e3002da0 	movw	r2, #3488	; 0xda0
   13e30:	e3402003 	movt	r2, #3
   13e34:	e5832000 	str	r2, [r3]
   13e38:	e1a03004 	mov	r3, r4
   13e3c:	e3030d6c 	movw	r0, #15724	; 0x3d6c
   13e40:	e3400001 	movt	r0, #1
   13e44:	e1a01003 	mov	r1, r3
   13e48:	eb000685 	bl	15864 <__cyg_profile_func_exit>
}
   13e4c:	e24bd008 	sub	sp, fp, #8
   13e50:	e8bd8810 	pop	{r4, fp, pc}

00013e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   13e54:	e92d4810 	push	{r4, fp, lr}
   13e58:	e28db008 	add	fp, sp, #8
   13e5c:	e24dd00c 	sub	sp, sp, #12
   13e60:	e1a0400e 	mov	r4, lr
   13e64:	e1a03004 	mov	r3, r4
   13e68:	e3030e54 	movw	r0, #15956	; 0x3e54
   13e6c:	e3400001 	movt	r0, #1
   13e70:	e1a01003 	mov	r1, r3
   13e74:	eb000628 	bl	1571c <__cyg_profile_func_enter>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   13e78:	e3003de4 	movw	r3, #3556	; 0xde4
   13e7c:	e3403003 	movt	r3, #3
   13e80:	e5933000 	ldr	r3, [r3]
   13e84:	e3530000 	cmp	r3, #0
   13e88:	0a000027 	beq	13f2c <prvCheckTasksWaitingTermination+0xd8>
		{
			vTaskSuspendAll();
   13e8c:	ebfffc3f 	bl	12f90 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   13e90:	e3003dd0 	movw	r3, #3536	; 0xdd0
   13e94:	e3403003 	movt	r3, #3
   13e98:	e5933000 	ldr	r3, [r3]
   13e9c:	e3530000 	cmp	r3, #0
   13ea0:	03a03001 	moveq	r3, #1
   13ea4:	13a03000 	movne	r3, #0
   13ea8:	e6ef3073 	uxtb	r3, r3
   13eac:	e50b3010 	str	r3, [fp, #-16]
			xTaskResumeAll();
   13eb0:	ebfffc4b 	bl	12fe4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   13eb4:	e51b3010 	ldr	r3, [fp, #-16]
   13eb8:	e3530000 	cmp	r3, #0
   13ebc:	1a00001a 	bne	13f2c <prvCheckTasksWaitingTermination+0xd8>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   13ec0:	ebfff1e0 	bl	10648 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   13ec4:	e3003dd0 	movw	r3, #3536	; 0xdd0
   13ec8:	e3403003 	movt	r3, #3
   13ecc:	e593300c 	ldr	r3, [r3, #12]
   13ed0:	e593300c 	ldr	r3, [r3, #12]
   13ed4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					vListRemove( &( pxTCB->xGenericListItem ) );
   13ed8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13edc:	e2833004 	add	r3, r3, #4
   13ee0:	e1a00003 	mov	r0, r3
   13ee4:	ebfff4f4 	bl	112bc <vListRemove>
					--uxCurrentNumberOfTasks;
   13ee8:	e3003dfc 	movw	r3, #3580	; 0xdfc
   13eec:	e3403003 	movt	r3, #3
   13ef0:	e5933000 	ldr	r3, [r3]
   13ef4:	e2432001 	sub	r2, r3, #1
   13ef8:	e3003dfc 	movw	r3, #3580	; 0xdfc
   13efc:	e3403003 	movt	r3, #3
   13f00:	e5832000 	str	r2, [r3]
					--uxTasksDeleted;
   13f04:	e3003de4 	movw	r3, #3556	; 0xde4
   13f08:	e3403003 	movt	r3, #3
   13f0c:	e5933000 	ldr	r3, [r3]
   13f10:	e2432001 	sub	r2, r3, #1
   13f14:	e3003de4 	movw	r3, #3556	; 0xde4
   13f18:	e3403003 	movt	r3, #3
   13f1c:	e5832000 	str	r2, [r3]
				}
				taskEXIT_CRITICAL();
   13f20:	ebfff1e2 	bl	106b0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   13f24:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   13f28:	eb00007a 	bl	14118 <prvDeleteTCB>
   13f2c:	e1a03004 	mov	r3, r4
   13f30:	e3030e54 	movw	r0, #15956	; 0x3e54
   13f34:	e3400001 	movt	r0, #1
   13f38:	e1a01003 	mov	r1, r3
   13f3c:	eb000648 	bl	15864 <__cyg_profile_func_exit>
			}
		}
	}
	#endif
}
   13f40:	e24bd008 	sub	sp, fp, #8
   13f44:	e8bd8810 	pop	{r4, fp, pc}

00013f48 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   13f48:	e92d4810 	push	{r4, fp, lr}
   13f4c:	e28db008 	add	fp, sp, #8
   13f50:	e24dd00c 	sub	sp, sp, #12
   13f54:	e1a0400e 	mov	r4, lr
   13f58:	e50b0010 	str	r0, [fp, #-16]
   13f5c:	e1a03004 	mov	r3, r4
   13f60:	e3030f48 	movw	r0, #16200	; 0x3f48
   13f64:	e3400001 	movt	r0, #1
   13f68:	e1a01003 	mov	r1, r3
   13f6c:	eb0005ea 	bl	1571c <__cyg_profile_func_enter>
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   13f70:	e3003d24 	movw	r3, #3364	; 0xd24
   13f74:	e3403003 	movt	r3, #3
   13f78:	e5933000 	ldr	r3, [r3]
   13f7c:	e51b2010 	ldr	r2, [fp, #-16]
   13f80:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   13f84:	e3003e00 	movw	r3, #3584	; 0xe00
   13f88:	e3403003 	movt	r3, #3
   13f8c:	e5933000 	ldr	r3, [r3]
   13f90:	e51b2010 	ldr	r2, [fp, #-16]
   13f94:	e1520003 	cmp	r2, r3
   13f98:	2a00000a 	bcs	13fc8 <prvAddCurrentTaskToDelayedList+0x80>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   13f9c:	e3003db8 	movw	r3, #3512	; 0xdb8
   13fa0:	e3403003 	movt	r3, #3
   13fa4:	e5932000 	ldr	r2, [r3]
   13fa8:	e3003d24 	movw	r3, #3364	; 0xd24
   13fac:	e3403003 	movt	r3, #3
   13fb0:	e5933000 	ldr	r3, [r3]
   13fb4:	e2833004 	add	r3, r3, #4
   13fb8:	e1a00002 	mov	r0, r2
   13fbc:	e1a01003 	mov	r1, r3
   13fc0:	ebfff47e 	bl	111c0 <vListInsert>
   13fc4:	ea000013 	b	14018 <prvAddCurrentTaskToDelayedList+0xd0>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   13fc8:	e3003db4 	movw	r3, #3508	; 0xdb4
   13fcc:	e3403003 	movt	r3, #3
   13fd0:	e5932000 	ldr	r2, [r3]
   13fd4:	e3003d24 	movw	r3, #3364	; 0xd24
   13fd8:	e3403003 	movt	r3, #3
   13fdc:	e5933000 	ldr	r3, [r3]
   13fe0:	e2833004 	add	r3, r3, #4
   13fe4:	e1a00002 	mov	r0, r2
   13fe8:	e1a01003 	mov	r1, r3
   13fec:	ebfff473 	bl	111c0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   13ff0:	e3003b54 	movw	r3, #2900	; 0xb54
   13ff4:	e3403003 	movt	r3, #3
   13ff8:	e5933000 	ldr	r3, [r3]
   13ffc:	e51b2010 	ldr	r2, [fp, #-16]
   14000:	e1520003 	cmp	r2, r3
   14004:	2a000003 	bcs	14018 <prvAddCurrentTaskToDelayedList+0xd0>
		{
			xNextTaskUnblockTime = xTimeToWake;
   14008:	e3003b54 	movw	r3, #2900	; 0xb54
   1400c:	e3403003 	movt	r3, #3
   14010:	e51b2010 	ldr	r2, [fp, #-16]
   14014:	e5832000 	str	r2, [r3]
   14018:	e1a03004 	mov	r3, r4
   1401c:	e3030f48 	movw	r0, #16200	; 0x3f48
   14020:	e3400001 	movt	r0, #1
   14024:	e1a01003 	mov	r1, r3
   14028:	eb00060d 	bl	15864 <__cyg_profile_func_exit>
		}
	}
}
   1402c:	e24bd008 	sub	sp, fp, #8
   14030:	e8bd8810 	pop	{r4, fp, pc}

00014034 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   14034:	e92d4830 	push	{r4, r5, fp, lr}
   14038:	e28db00c 	add	fp, sp, #12
   1403c:	e24dd010 	sub	sp, sp, #16
   14040:	e1a0500e 	mov	r5, lr
   14044:	e1a03000 	mov	r3, r0
   14048:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1404c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   14050:	e1a03005 	mov	r3, r5
   14054:	e3040034 	movw	r0, #16436	; 0x4034
   14058:	e3400001 	movt	r0, #1
   1405c:	e1a01003 	mov	r1, r3
   14060:	eb0005ad 	bl	1571c <__cyg_profile_func_enter>
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   14064:	e3a00048 	mov	r0, #72	; 0x48
   14068:	eb000379 	bl	14e54 <pvPortMalloc>
   1406c:	e50b0010 	str	r0, [fp, #-16]

	if( pxNewTCB != NULL )
   14070:	e51b3010 	ldr	r3, [fp, #-16]
   14074:	e3530000 	cmp	r3, #0
   14078:	0a00001c 	beq	140f0 <prvAllocateTCBAndStack+0xbc>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   1407c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   14080:	e3530000 	cmp	r3, #0
   14084:	1a000005 	bne	140a0 <prvAllocateTCBAndStack+0x6c>
   14088:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
   1408c:	e1a03103 	lsl	r3, r3, #2
   14090:	e1a00003 	mov	r0, r3
   14094:	eb00036e 	bl	14e54 <pvPortMalloc>
   14098:	e1a03000 	mov	r3, r0
   1409c:	ea000000 	b	140a4 <prvAllocateTCBAndStack+0x70>
   140a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   140a4:	e51b2010 	ldr	r2, [fp, #-16]
   140a8:	e5823030 	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   140ac:	e51b3010 	ldr	r3, [fp, #-16]
   140b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   140b4:	e3530000 	cmp	r3, #0
   140b8:	1a000004 	bne	140d0 <prvAllocateTCBAndStack+0x9c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   140bc:	e51b0010 	ldr	r0, [fp, #-16]
   140c0:	eb0003e5 	bl	1505c <vPortFree>
			pxNewTCB = NULL;
   140c4:	e3a03000 	mov	r3, #0
   140c8:	e50b3010 	str	r3, [fp, #-16]
   140cc:	ea000007 	b	140f0 <prvAllocateTCBAndStack+0xbc>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   140d0:	e51b3010 	ldr	r3, [fp, #-16]
   140d4:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   140d8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
   140dc:	e1a03103 	lsl	r3, r3, #2
   140e0:	e1a00002 	mov	r0, r2
   140e4:	e3a010a5 	mov	r1, #165	; 0xa5
   140e8:	e1a02003 	mov	r2, r3
   140ec:	eb000a82 	bl	16afc <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   140f0:	e51b4010 	ldr	r4, [fp, #-16]
   140f4:	e1a03005 	mov	r3, r5
   140f8:	e3040034 	movw	r0, #16436	; 0x4034
   140fc:	e3400001 	movt	r0, #1
   14100:	e1a01003 	mov	r1, r3
   14104:	eb0005d6 	bl	15864 <__cyg_profile_func_exit>
   14108:	e1a03004 	mov	r3, r4
}
   1410c:	e1a00003 	mov	r0, r3
   14110:	e24bd00c 	sub	sp, fp, #12
   14114:	e8bd8830 	pop	{r4, r5, fp, pc}

00014118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   14118:	e92d4810 	push	{r4, fp, lr}
   1411c:	e28db008 	add	fp, sp, #8
   14120:	e24dd00c 	sub	sp, sp, #12
   14124:	e1a0400e 	mov	r4, lr
   14128:	e50b0010 	str	r0, [fp, #-16]
   1412c:	e1a03004 	mov	r3, r4
   14130:	e3040118 	movw	r0, #16664	; 0x4118
   14134:	e3400001 	movt	r0, #1
   14138:	e1a01003 	mov	r1, r3
   1413c:	eb000576 	bl	1571c <__cyg_profile_func_enter>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   14140:	e51b3010 	ldr	r3, [fp, #-16]
   14144:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   14148:	e1a00003 	mov	r0, r3
   1414c:	eb0003c2 	bl	1505c <vPortFree>
		vPortFree( pxTCB );
   14150:	e51b0010 	ldr	r0, [fp, #-16]
   14154:	eb0003c0 	bl	1505c <vPortFree>
   14158:	e1a03004 	mov	r3, r4
   1415c:	e3040118 	movw	r0, #16664	; 0x4118
   14160:	e3400001 	movt	r0, #1
   14164:	e1a01003 	mov	r1, r3
   14168:	eb0005bd 	bl	15864 <__cyg_profile_func_exit>
	}
   1416c:	e24bd008 	sub	sp, fp, #8
   14170:	e8bd8810 	pop	{r4, fp, pc}

00014174 <irqEnable>:
static volatile BCM2835_INTC_REGS * const pRegs = (BCM2835_INTC_REGS *) (BCM2835_BASE_INTC);

/**
 *	Enables all IRQ's in the CPU's CPSR register.
 **/
static void irqEnable() {
   14174:	e92d4818 	push	{r3, r4, fp, lr}
   14178:	e28db00c 	add	fp, sp, #12
   1417c:	e1a0400e 	mov	r4, lr
   14180:	e1a03004 	mov	r3, r4
   14184:	e3040174 	movw	r0, #16756	; 0x4174
   14188:	e3400001 	movt	r0, #1
   1418c:	e1a01003 	mov	r1, r3
   14190:	eb000561 	bl	1571c <__cyg_profile_func_enter>
	__asm volatile("cpsie i" : : : "memory");
   14194:	f1080080 	cpsie	i
   14198:	e1a03004 	mov	r3, r4
   1419c:	e3040174 	movw	r0, #16756	; 0x4174
   141a0:	e3400001 	movt	r0, #1
   141a4:	e1a01003 	mov	r1, r3
   141a8:	eb0005ad 	bl	15864 <__cyg_profile_func_exit>
}
   141ac:	e8bd8818 	pop	{r3, r4, fp, pc}

000141b0 <irqDisable>:

static void irqDisable() {
   141b0:	e92d4818 	push	{r3, r4, fp, lr}
   141b4:	e28db00c 	add	fp, sp, #12
   141b8:	e1a0400e 	mov	r4, lr
   141bc:	e1a03004 	mov	r3, r4
   141c0:	e30401b0 	movw	r0, #16816	; 0x41b0
   141c4:	e3400001 	movt	r0, #1
   141c8:	e1a01003 	mov	r1, r3
   141cc:	eb000552 	bl	1571c <__cyg_profile_func_enter>
	__asm volatile("cpsid i" : : : "memory");
   141d0:	f10c0080 	cpsid	i
   141d4:	e1a03004 	mov	r3, r4
   141d8:	e30401b0 	movw	r0, #16816	; 0x41b0
   141dc:	e3400001 	movt	r0, #1
   141e0:	e1a01003 	mov	r1, r3
   141e4:	eb00059e 	bl	15864 <__cyg_profile_func_exit>
}
   141e8:	e8bd8818 	pop	{r3, r4, fp, pc}

000141ec <irqHandler>:
/**
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler() {
   141ec:	e92d4870 	push	{r4, r5, r6, fp, lr}
   141f0:	e28db010 	add	fp, sp, #16
   141f4:	e24dd00c 	sub	sp, sp, #12
   141f8:	e1a0600e 	mov	r6, lr
   141fc:	e1a03006 	mov	r3, r6
   14200:	e30401ec 	movw	r0, #16876	; 0x41ec
   14204:	e3400001 	movt	r0, #1
   14208:	e1a01003 	mov	r1, r3
   1420c:	eb000542 	bl	1571c <__cyg_profile_func_enter>
	register unsigned long ulMaskedStatus;
	register unsigned long irqNumber;

	ulMaskedStatus = pRegs->IRQBasic;
   14210:	e3a03cb2 	mov	r3, #45568	; 0xb200
   14214:	e3433f00 	movt	r3, #16128	; 0x3f00
   14218:	e5934000 	ldr	r4, [r3]

	/* Bits 7 through 0 in IRQBasic represent interrupts 64-71 */
	if (ulMaskedStatus & 0xFF) {
   1421c:	e6ef3074 	uxtb	r3, r4
   14220:	e3530000 	cmp	r3, #0
   14224:	0a000001 	beq	14230 <irqHandler+0x44>
		irqNumber=64 + 31;
   14228:	e3a0505f 	mov	r5, #95	; 0x5f
   1422c:	ea000011 	b	14278 <irqHandler+0x8c>
	}

	/* Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0) */
	else if(ulMaskedStatus & 0x100) {
   14230:	e2043c01 	and	r3, r4, #256	; 0x100
   14234:	e3530000 	cmp	r3, #0
   14238:	0a000004 	beq	14250 <irqHandler+0x64>
		ulMaskedStatus = pRegs->Pending1;
   1423c:	e3a03cb2 	mov	r3, #45568	; 0xb200
   14240:	e3433f00 	movt	r3, #16128	; 0x3f00
   14244:	e5934004 	ldr	r4, [r3, #4]
		irqNumber = 0 + 31;
   14248:	e3a0501f 	mov	r5, #31
   1424c:	ea000009 	b	14278 <irqHandler+0x8c>
	}

	/* Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32) */
	else if(ulMaskedStatus & 0x200) {
   14250:	e2043c02 	and	r3, r4, #512	; 0x200
   14254:	e3530000 	cmp	r3, #0
   14258:	0a000004 	beq	14270 <irqHandler+0x84>
		ulMaskedStatus = pRegs->Pending2;
   1425c:	e3a03cb2 	mov	r3, #45568	; 0xb200
   14260:	e3433f00 	movt	r3, #16128	; 0x3f00
   14264:	e5934008 	ldr	r4, [r3, #8]
		irqNumber = 32 + 31;
   14268:	e3a0503f 	mov	r5, #63	; 0x3f
   1426c:	ea000001 	b	14278 <irqHandler+0x8c>
   14270:	e3a04000 	mov	r4, #0
	}

	else {
		// No interrupt avaialbe, so just return.
		return;
   14274:	ea000014 	b	142cc <irqHandler+0xe0>
	}

	/* Keep only least significant bit, in case multiple interrupts have occured */
	ulMaskedStatus&=-ulMaskedStatus;
   14278:	e2643000 	rsb	r3, r4, #0
   1427c:	e0044003 	and	r4, r4, r3
	/* Some magic to determine number of interrupt to serve */
	irqNumber=irqNumber-clz(ulMaskedStatus);
   14280:	e50b4018 	str	r4, [fp, #-24]	; 0xffffffe8
   14284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14288:	e16f3f13 	clz	r3, r3
   1428c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   14290:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   14294:	e0635005 	rsb	r5, r3, r5
	/* Call interrupt handler */
	g_VectorTable[irqNumber].pfnHandler(irqNumber, g_VectorTable[irqNumber].pParam);
   14298:	e3003e24 	movw	r3, #3620	; 0xe24
   1429c:	e3403003 	movt	r3, #3
   142a0:	e793c185 	ldr	ip, [r3, r5, lsl #3]
   142a4:	e1a01005 	mov	r1, r5
   142a8:	e3002e24 	movw	r2, #3620	; 0xe24
   142ac:	e3402003 	movt	r2, #3
   142b0:	e1a03185 	lsl	r3, r5, #3
   142b4:	e0823003 	add	r3, r2, r3
   142b8:	e5933004 	ldr	r3, [r3, #4]
   142bc:	e1a00001 	mov	r0, r1
   142c0:	e1a01003 	mov	r1, r3
   142c4:	e12fff3c 	blx	ip
   142c8:	e3a04001 	mov	r4, #1
   142cc:	e1a03006 	mov	r3, r6
   142d0:	e30401ec 	movw	r0, #16876	; 0x41ec
   142d4:	e3400001 	movt	r0, #1
   142d8:	e1a01003 	mov	r1, r3
   142dc:	eb000560 	bl	15864 <__cyg_profile_func_exit>
   142e0:	e3540001 	cmp	r4, #1
}
   142e4:	e24bd010 	sub	sp, fp, #16
   142e8:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

000142ec <stubHandler>:


static void stubHandler(int nIRQ, void *pParam) {
   142ec:	e92d4810 	push	{r4, fp, lr}
   142f0:	e28db008 	add	fp, sp, #8
   142f4:	e24dd00c 	sub	sp, sp, #12
   142f8:	e1a0400e 	mov	r4, lr
   142fc:	e50b0010 	str	r0, [fp, #-16]
   14300:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   14304:	e1a03004 	mov	r3, r4
   14308:	e30402ec 	movw	r0, #17132	; 0x42ec
   1430c:	e3400001 	movt	r0, #1
   14310:	e1a01003 	mov	r1, r3
   14314:	eb000500 	bl	1571c <__cyg_profile_func_enter>
   14318:	e1a03004 	mov	r3, r4
   1431c:	e30402ec 	movw	r0, #17132	; 0x42ec
   14320:	e3400001 	movt	r0, #1
   14324:	e1a01003 	mov	r1, r3
   14328:	eb00054d 	bl	15864 <__cyg_profile_func_exit>
	/**
	 *	Actually if we get here, we should probably disable the IRQ,
	 *	otherwise we could lock up this system, as there is nothing to
	 *	ackknowledge the interrupt.
	 **/
}
   1432c:	e24bd008 	sub	sp, fp, #8
   14330:	e8bd8810 	pop	{r4, fp, pc}

00014334 <InitInterruptController>:

int InitInterruptController() {
   14334:	e92d4830 	push	{r4, r5, fp, lr}
   14338:	e28db00c 	add	fp, sp, #12
   1433c:	e24dd008 	sub	sp, sp, #8
   14340:	e1a0500e 	mov	r5, lr
   14344:	e1a03005 	mov	r3, r5
   14348:	e3040334 	movw	r0, #17204	; 0x4334
   1434c:	e3400001 	movt	r0, #1
   14350:	e1a01003 	mov	r1, r3
   14354:	eb0004f0 	bl	1571c <__cyg_profile_func_enter>
	int i;
	for(i = 0; i < BCM2835_INTC_TOTAL_IRQ; i++) {
   14358:	e3a03000 	mov	r3, #0
   1435c:	e50b3010 	str	r3, [fp, #-16]
   14360:	ea00000f 	b	143a4 <InitInterruptController+0x70>
		g_VectorTable[i].pfnHandler 	= stubHandler;
   14364:	e3003e24 	movw	r3, #3620	; 0xe24
   14368:	e3403003 	movt	r3, #3
   1436c:	e51b1010 	ldr	r1, [fp, #-16]
   14370:	e30422ec 	movw	r2, #17132	; 0x42ec
   14374:	e3402001 	movt	r2, #1
   14378:	e7832181 	str	r2, [r3, r1, lsl #3]
		g_VectorTable[i].pParam			= (void *) 0;
   1437c:	e3002e24 	movw	r2, #3620	; 0xe24
   14380:	e3402003 	movt	r2, #3
   14384:	e51b3010 	ldr	r3, [fp, #-16]
   14388:	e1a03183 	lsl	r3, r3, #3
   1438c:	e0823003 	add	r3, r2, r3
   14390:	e3a02000 	mov	r2, #0
   14394:	e5832004 	str	r2, [r3, #4]
	 **/
}

int InitInterruptController() {
	int i;
	for(i = 0; i < BCM2835_INTC_TOTAL_IRQ; i++) {
   14398:	e51b3010 	ldr	r3, [fp, #-16]
   1439c:	e2833001 	add	r3, r3, #1
   143a0:	e50b3010 	str	r3, [fp, #-16]
   143a4:	e51b3010 	ldr	r3, [fp, #-16]
   143a8:	e3530047 	cmp	r3, #71	; 0x47
   143ac:	daffffec 	ble	14364 <InitInterruptController+0x30>
		g_VectorTable[i].pfnHandler 	= stubHandler;
		g_VectorTable[i].pParam			= (void *) 0;
	}
	return 0;
   143b0:	e3a04000 	mov	r4, #0
   143b4:	e1a03005 	mov	r3, r5
   143b8:	e3040334 	movw	r0, #17204	; 0x4334
   143bc:	e3400001 	movt	r0, #1
   143c0:	e1a01003 	mov	r1, r3
   143c4:	eb000526 	bl	15864 <__cyg_profile_func_exit>
   143c8:	e1a03004 	mov	r3, r4
}
   143cc:	e1a00003 	mov	r0, r3
   143d0:	e24bd00c 	sub	sp, fp, #12
   143d4:	e8bd8830 	pop	{r4, r5, fp, pc}

000143d8 <RegisterInterrupt>:



int RegisterInterrupt(int nIRQ, FN_INTERRUPT_HANDLER pfnHandler, void *pParam) {
   143d8:	e92d4830 	push	{r4, r5, fp, lr}
   143dc:	e28db00c 	add	fp, sp, #12
   143e0:	e24dd010 	sub	sp, sp, #16
   143e4:	e1a0500e 	mov	r5, lr
   143e8:	e50b0010 	str	r0, [fp, #-16]
   143ec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   143f0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   143f4:	e1a03005 	mov	r3, r5
   143f8:	e30403d8 	movw	r0, #17368	; 0x43d8
   143fc:	e3400001 	movt	r0, #1
   14400:	e1a01003 	mov	r1, r3
   14404:	eb0004c4 	bl	1571c <__cyg_profile_func_enter>
	if(nIRQ<0 || nIRQ>71)
   14408:	e51b3010 	ldr	r3, [fp, #-16]
   1440c:	e3530000 	cmp	r3, #0
   14410:	ba000002 	blt	14420 <RegisterInterrupt+0x48>
   14414:	e51b3010 	ldr	r3, [fp, #-16]
   14418:	e3530047 	cmp	r3, #71	; 0x47
   1441c:	da000001 	ble	14428 <RegisterInterrupt+0x50>
		return -1;
   14420:	e3e04000 	mvn	r4, #0
   14424:	ea00000e 	b	14464 <RegisterInterrupt+0x8c>

	irqDisable();
   14428:	ebffff60 	bl	141b0 <irqDisable>
	{
		g_VectorTable[nIRQ].pfnHandler = pfnHandler;
   1442c:	e3003e24 	movw	r3, #3620	; 0xe24
   14430:	e3403003 	movt	r3, #3
   14434:	e51b2010 	ldr	r2, [fp, #-16]
   14438:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1443c:	e7831182 	str	r1, [r3, r2, lsl #3]
		g_VectorTable[nIRQ].pParam		= pParam;
   14440:	e3002e24 	movw	r2, #3620	; 0xe24
   14444:	e3402003 	movt	r2, #3
   14448:	e51b3010 	ldr	r3, [fp, #-16]
   1444c:	e1a03183 	lsl	r3, r3, #3
   14450:	e0823003 	add	r3, r2, r3
   14454:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   14458:	e5832004 	str	r2, [r3, #4]
	}
	irqEnable();
   1445c:	ebffff44 	bl	14174 <irqEnable>
	return 0;
   14460:	e3a04000 	mov	r4, #0
   14464:	e1a03005 	mov	r3, r5
   14468:	e30403d8 	movw	r0, #17368	; 0x43d8
   1446c:	e3400001 	movt	r0, #1
   14470:	e1a01003 	mov	r1, r3
   14474:	eb0004fa 	bl	15864 <__cyg_profile_func_exit>
   14478:	e1a03004 	mov	r3, r4
}
   1447c:	e1a00003 	mov	r0, r3
   14480:	e24bd00c 	sub	sp, fp, #12
   14484:	e8bd8830 	pop	{r4, r5, fp, pc}

00014488 <EnableInterrupt>:

int EnableInterrupt(int nIRQ) {
   14488:	e92d4830 	push	{r4, r5, fp, lr}
   1448c:	e28db00c 	add	fp, sp, #12
   14490:	e24dd010 	sub	sp, sp, #16
   14494:	e1a0500e 	mov	r5, lr
   14498:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1449c:	e1a03005 	mov	r3, r5
   144a0:	e3040488 	movw	r0, #17544	; 0x4488
   144a4:	e3400001 	movt	r0, #1
   144a8:	e1a01003 	mov	r1, r3
   144ac:	eb00049a 	bl	1571c <__cyg_profile_func_enter>
	/* Datasheet says "All other bits are unaffected", and I'm counting on that. */
	unsigned int mask=1<<(nIRQ%32);
   144b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   144b4:	e1a03fc2 	asr	r3, r2, #31
   144b8:	e1a03da3 	lsr	r3, r3, #27
   144bc:	e0822003 	add	r2, r2, r3
   144c0:	e202201f 	and	r2, r2, #31
   144c4:	e0633002 	rsb	r3, r3, r2
   144c8:	e1a02003 	mov	r2, r3
   144cc:	e3a03001 	mov	r3, #1
   144d0:	e1a03213 	lsl	r3, r3, r2
   144d4:	e50b3010 	str	r3, [fp, #-16]

	if(nIRQ >=0 && nIRQ <=31) {
   144d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   144dc:	e3530000 	cmp	r3, #0
   144e0:	ba000007 	blt	14504 <EnableInterrupt+0x7c>
   144e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   144e8:	e353001f 	cmp	r3, #31
   144ec:	ca000004 	bgt	14504 <EnableInterrupt+0x7c>
		pRegs->Enable1 = mask;
   144f0:	e3a03cb2 	mov	r3, #45568	; 0xb200
   144f4:	e3433f00 	movt	r3, #16128	; 0x3f00
   144f8:	e51b2010 	ldr	r2, [fp, #-16]
   144fc:	e5832010 	str	r2, [r3, #16]
   14500:	ea000017 	b	14564 <EnableInterrupt+0xdc>
	} else
	if(nIRQ >=32 && nIRQ <=63){
   14504:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14508:	e353001f 	cmp	r3, #31
   1450c:	da000007 	ble	14530 <EnableInterrupt+0xa8>
   14510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14514:	e353003f 	cmp	r3, #63	; 0x3f
   14518:	ca000004 	bgt	14530 <EnableInterrupt+0xa8>
		pRegs->Enable2 = mask;
   1451c:	e3a03cb2 	mov	r3, #45568	; 0xb200
   14520:	e3433f00 	movt	r3, #16128	; 0x3f00
   14524:	e51b2010 	ldr	r2, [fp, #-16]
   14528:	e5832014 	str	r2, [r3, #20]
   1452c:	ea00000c 	b	14564 <EnableInterrupt+0xdc>
	} else
	if(nIRQ >= 64 && nIRQ <= 71) {	// Basic IRQ enables
   14530:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14534:	e353003f 	cmp	r3, #63	; 0x3f
   14538:	da000007 	ble	1455c <EnableInterrupt+0xd4>
   1453c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14540:	e3530047 	cmp	r3, #71	; 0x47
   14544:	ca000004 	bgt	1455c <EnableInterrupt+0xd4>
		pRegs->EnableBasic = mask;
   14548:	e3a03cb2 	mov	r3, #45568	; 0xb200
   1454c:	e3433f00 	movt	r3, #16128	; 0x3f00
   14550:	e51b2010 	ldr	r2, [fp, #-16]
   14554:	e5832018 	str	r2, [r3, #24]
   14558:	ea000001 	b	14564 <EnableInterrupt+0xdc>
	} else
		return -1;
   1455c:	e3e04000 	mvn	r4, #0
   14560:	ea000000 	b	14568 <EnableInterrupt+0xe0>

	return 0;
   14564:	e3a04000 	mov	r4, #0
   14568:	e1a03005 	mov	r3, r5
   1456c:	e3040488 	movw	r0, #17544	; 0x4488
   14570:	e3400001 	movt	r0, #1
   14574:	e1a01003 	mov	r1, r3
   14578:	eb0004b9 	bl	15864 <__cyg_profile_func_exit>
   1457c:	e1a03004 	mov	r3, r4
}
   14580:	e1a00003 	mov	r0, r3
   14584:	e24bd00c 	sub	sp, fp, #12
   14588:	e8bd8830 	pop	{r4, r5, fp, pc}

0001458c <DisableInterrupt>:

int DisableInterrupt(int nIRQ) {
   1458c:	e92d4830 	push	{r4, r5, fp, lr}
   14590:	e28db00c 	add	fp, sp, #12
   14594:	e24dd010 	sub	sp, sp, #16
   14598:	e1a0500e 	mov	r5, lr
   1459c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   145a0:	e1a03005 	mov	r3, r5
   145a4:	e304058c 	movw	r0, #17804	; 0x458c
   145a8:	e3400001 	movt	r0, #1
   145ac:	e1a01003 	mov	r1, r3
   145b0:	eb000459 	bl	1571c <__cyg_profile_func_enter>
	/* Datasheet says "All other bits are unaffected", and I'm counting on that. */
	unsigned int mask=1<<(nIRQ%32);
   145b4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   145b8:	e1a03fc2 	asr	r3, r2, #31
   145bc:	e1a03da3 	lsr	r3, r3, #27
   145c0:	e0822003 	add	r2, r2, r3
   145c4:	e202201f 	and	r2, r2, #31
   145c8:	e0633002 	rsb	r3, r3, r2
   145cc:	e1a02003 	mov	r2, r3
   145d0:	e3a03001 	mov	r3, #1
   145d4:	e1a03213 	lsl	r3, r3, r2
   145d8:	e50b3010 	str	r3, [fp, #-16]

	if(nIRQ >=0 && nIRQ <=31) {
   145dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   145e0:	e3530000 	cmp	r3, #0
   145e4:	ba000007 	blt	14608 <DisableInterrupt+0x7c>
   145e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   145ec:	e353001f 	cmp	r3, #31
   145f0:	ca000004 	bgt	14608 <DisableInterrupt+0x7c>
		pRegs->Disable1 = mask;
   145f4:	e3a03cb2 	mov	r3, #45568	; 0xb200
   145f8:	e3433f00 	movt	r3, #16128	; 0x3f00
   145fc:	e51b2010 	ldr	r2, [fp, #-16]
   14600:	e583201c 	str	r2, [r3, #28]
   14604:	ea000017 	b	14668 <DisableInterrupt+0xdc>
	} else
	if(nIRQ >=32 && nIRQ <=63){
   14608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1460c:	e353001f 	cmp	r3, #31
   14610:	da000007 	ble	14634 <DisableInterrupt+0xa8>
   14614:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14618:	e353003f 	cmp	r3, #63	; 0x3f
   1461c:	ca000004 	bgt	14634 <DisableInterrupt+0xa8>
		pRegs->Disable2 = mask;
   14620:	e3a03cb2 	mov	r3, #45568	; 0xb200
   14624:	e3433f00 	movt	r3, #16128	; 0x3f00
   14628:	e51b2010 	ldr	r2, [fp, #-16]
   1462c:	e5832020 	str	r2, [r3, #32]
   14630:	ea00000c 	b	14668 <DisableInterrupt+0xdc>
	} else
	if(nIRQ >= 64 && nIRQ <= 71) {
   14634:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14638:	e353003f 	cmp	r3, #63	; 0x3f
   1463c:	da000007 	ble	14660 <DisableInterrupt+0xd4>
   14640:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14644:	e3530047 	cmp	r3, #71	; 0x47
   14648:	ca000004 	bgt	14660 <DisableInterrupt+0xd4>
		pRegs->DisableBasic = mask;
   1464c:	e3a03cb2 	mov	r3, #45568	; 0xb200
   14650:	e3433f00 	movt	r3, #16128	; 0x3f00
   14654:	e51b2010 	ldr	r2, [fp, #-16]
   14658:	e5832024 	str	r2, [r3, #36]	; 0x24
   1465c:	ea000001 	b	14668 <DisableInterrupt+0xdc>
	} else
		return -1;
   14660:	e3e04000 	mvn	r4, #0
   14664:	ea000000 	b	1466c <DisableInterrupt+0xe0>

	return 0;
   14668:	e3a04000 	mov	r4, #0
   1466c:	e1a03005 	mov	r3, r5
   14670:	e304058c 	movw	r0, #17804	; 0x458c
   14674:	e3400001 	movt	r0, #1
   14678:	e1a01003 	mov	r1, r3
   1467c:	eb000478 	bl	15864 <__cyg_profile_func_exit>
   14680:	e1a03004 	mov	r3, r4
}
   14684:	e1a00003 	mov	r0, r3
   14688:	e24bd00c 	sub	sp, fp, #12
   1468c:	e8bd8830 	pop	{r4, r5, fp, pc}

00014690 <EnableInterrupts>:

int EnableInterrupts() {
   14690:	e92d4830 	push	{r4, r5, fp, lr}
   14694:	e28db00c 	add	fp, sp, #12
   14698:	e1a0500e 	mov	r5, lr
   1469c:	e1a03005 	mov	r3, r5
   146a0:	e3040690 	movw	r0, #18064	; 0x4690
   146a4:	e3400001 	movt	r0, #1
   146a8:	e1a01003 	mov	r1, r3
   146ac:	eb00041a 	bl	1571c <__cyg_profile_func_enter>
	irqEnable();
   146b0:	ebfffeaf 	bl	14174 <irqEnable>
	return 0;
   146b4:	e3a04000 	mov	r4, #0
   146b8:	e1a03005 	mov	r3, r5
   146bc:	e3040690 	movw	r0, #18064	; 0x4690
   146c0:	e3400001 	movt	r0, #1
   146c4:	e1a01003 	mov	r1, r3
   146c8:	eb000465 	bl	15864 <__cyg_profile_func_exit>
   146cc:	e1a03004 	mov	r3, r4
}
   146d0:	e1a00003 	mov	r0, r3
   146d4:	e8bd8830 	pop	{r4, r5, fp, pc}

000146d8 <DisableInterrupts>:

int DisableInterrupts() {
   146d8:	e92d4830 	push	{r4, r5, fp, lr}
   146dc:	e28db00c 	add	fp, sp, #12
   146e0:	e1a0500e 	mov	r5, lr
   146e4:	e1a03005 	mov	r3, r5
   146e8:	e30406d8 	movw	r0, #18136	; 0x46d8
   146ec:	e3400001 	movt	r0, #1
   146f0:	e1a01003 	mov	r1, r3
   146f4:	eb000408 	bl	1571c <__cyg_profile_func_enter>
	irqDisable();
   146f8:	ebfffeac 	bl	141b0 <irqDisable>
	return 0;
   146fc:	e3a04000 	mov	r4, #0
   14700:	e1a03005 	mov	r3, r5
   14704:	e30406d8 	movw	r0, #18136	; 0x46d8
   14708:	e3400001 	movt	r0, #1
   1470c:	e1a01003 	mov	r1, r3
   14710:	eb000453 	bl	15864 <__cyg_profile_func_exit>
   14714:	e1a03004 	mov	r3, r4
}
   14718:	e1a00003 	mov	r0, r3
   1471c:	e8bd8830 	pop	{r4, r5, fp, pc}

00014720 <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x3f200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   14720:	e92d4810 	push	{r4, fp, lr}
   14724:	e28db008 	add	fp, sp, #8
   14728:	e24dd01c 	sub	sp, sp, #28
   1472c:	e1a0400e 	mov	r4, lr
   14730:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   14734:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   14738:	e1a03004 	mov	r3, r4
   1473c:	e3040720 	movw	r0, #18208	; 0x4720
   14740:	e3400001 	movt	r0, #1
   14744:	e1a01003 	mov	r1, r3
   14748:	eb0003f3 	bl	1571c <__cyg_profile_func_enter>

	int offset = pinNum / 10;
   1474c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   14750:	e30c3ccd 	movw	r3, #52429	; 0xcccd
   14754:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   14758:	e0832392 	umull	r2, r3, r2, r3
   1475c:	e1a031a3 	lsr	r3, r3, #3
   14760:	e50b3010 	str	r3, [fp, #-16]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   14764:	e3a03000 	mov	r3, #0
   14768:	e3433f20 	movt	r3, #16160	; 0x3f20
   1476c:	e51b2010 	ldr	r2, [fp, #-16]
   14770:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   14774:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	int item = pinNum % 10;
   14778:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   1477c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
   14780:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   14784:	e0832391 	umull	r2, r3, r1, r3
   14788:	e1a031a3 	lsr	r3, r3, #3
   1478c:	e3a0200a 	mov	r2, #10
   14790:	e0030392 	mul	r3, r2, r3
   14794:	e0633001 	rsb	r3, r3, r1
   14798:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	val &= ~(0x7 << (item * 3));
   1479c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   147a0:	e3a02003 	mov	r2, #3
   147a4:	e0030392 	mul	r3, r2, r3
   147a8:	e3a02007 	mov	r2, #7
   147ac:	e1a03312 	lsl	r3, r2, r3
   147b0:	e1e03003 	mvn	r3, r3
   147b4:	e1a02003 	mov	r2, r3
   147b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   147bc:	e0033002 	and	r3, r3, r2
   147c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	val |= ((funcNum & 0x7) << (item * 3));
   147c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   147c8:	e2032007 	and	r2, r3, #7
   147cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   147d0:	e3a01003 	mov	r1, #3
   147d4:	e0030391 	mul	r3, r1, r3
   147d8:	e1a03312 	lsl	r3, r2, r3
   147dc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   147e0:	e1823003 	orr	r3, r2, r3
   147e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	pRegs->GPFSEL[offset] = val;
   147e8:	e3a03000 	mov	r3, #0
   147ec:	e3433f20 	movt	r3, #16160	; 0x3f20
   147f0:	e51b2010 	ldr	r2, [fp, #-16]
   147f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   147f8:	e7831102 	str	r1, [r3, r2, lsl #2]
   147fc:	e1a03004 	mov	r3, r4
   14800:	e3040720 	movw	r0, #18208	; 0x4720
   14804:	e3400001 	movt	r0, #1
   14808:	e1a01003 	mov	r1, r3
   1480c:	eb000414 	bl	15864 <__cyg_profile_func_exit>
}
   14810:	e24bd008 	sub	sp, fp, #8
   14814:	e8bd8810 	pop	{r4, fp, pc}

00014818 <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   14818:	e92d4810 	push	{r4, fp, lr}
   1481c:	e28db008 	add	fp, sp, #8
   14820:	e24dd00c 	sub	sp, sp, #12
   14824:	e1a0400e 	mov	r4, lr
   14828:	e50b0010 	str	r0, [fp, #-16]
   1482c:	e1a03001 	mov	r3, r1
   14830:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   14834:	e1a03004 	mov	r3, r4
   14838:	e3040818 	movw	r0, #18456	; 0x4818
   1483c:	e3400001 	movt	r0, #1
   14840:	e1a01003 	mov	r1, r3
   14844:	eb0003b4 	bl	1571c <__cyg_profile_func_enter>
	SetGpioFunction(pinNum,dir);
   14848:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1484c:	e51b0010 	ldr	r0, [fp, #-16]
   14850:	e1a01003 	mov	r1, r3
   14854:	ebffffb1 	bl	14720 <SetGpioFunction>
   14858:	e1a03004 	mov	r3, r4
   1485c:	e3040818 	movw	r0, #18456	; 0x4818
   14860:	e3400001 	movt	r0, #1
   14864:	e1a01003 	mov	r1, r3
   14868:	eb0003fd 	bl	15864 <__cyg_profile_func_exit>
}
   1486c:	e24bd008 	sub	sp, fp, #8
   14870:	e8bd8810 	pop	{r4, fp, pc}

00014874 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   14874:	e92d4810 	push	{r4, fp, lr}
   14878:	e28db008 	add	fp, sp, #8
   1487c:	e24dd014 	sub	sp, sp, #20
   14880:	e1a0400e 	mov	r4, lr
   14884:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   14888:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1488c:	e1a03004 	mov	r3, r4
   14890:	e3040874 	movw	r0, #18548	; 0x4874
   14894:	e3400001 	movt	r0, #1
   14898:	e1a01003 	mov	r1, r3
   1489c:	eb00039e 	bl	1571c <__cyg_profile_func_enter>
	unsigned long offset=pinNum/32;
   148a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   148a4:	e1a032a3 	lsr	r3, r3, #5
   148a8:	e50b3010 	str	r3, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   148ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   148b0:	e203301f 	and	r3, r3, #31
   148b4:	e3a02001 	mov	r2, #1
   148b8:	e1a03312 	lsl	r3, r2, r3
   148bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	if(pinVal) {
   148c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   148c4:	e3530000 	cmp	r3, #0
   148c8:	0a000010 	beq	14910 <SetGpio+0x9c>
		pRegs->GPSET[offset]|=mask;
   148cc:	e3a02000 	mov	r2, #0
   148d0:	e3432f20 	movt	r2, #16160	; 0x3f20
   148d4:	e3a01000 	mov	r1, #0
   148d8:	e3431f20 	movt	r1, #16160	; 0x3f20
   148dc:	e51b3010 	ldr	r3, [fp, #-16]
   148e0:	e2833006 	add	r3, r3, #6
   148e4:	e1a03103 	lsl	r3, r3, #2
   148e8:	e0813003 	add	r3, r1, r3
   148ec:	e5931004 	ldr	r1, [r3, #4]
   148f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   148f4:	e1811003 	orr	r1, r1, r3
   148f8:	e51b3010 	ldr	r3, [fp, #-16]
   148fc:	e2833006 	add	r3, r3, #6
   14900:	e1a03103 	lsl	r3, r3, #2
   14904:	e0823003 	add	r3, r2, r3
   14908:	e5831004 	str	r1, [r3, #4]
   1490c:	ea00000b 	b	14940 <SetGpio+0xcc>
	} else {
		pRegs->GPCLR[offset]|=mask;
   14910:	e3a03000 	mov	r3, #0
   14914:	e3433f20 	movt	r3, #16160	; 0x3f20
   14918:	e3a02000 	mov	r2, #0
   1491c:	e3432f20 	movt	r2, #16160	; 0x3f20
   14920:	e51b1010 	ldr	r1, [fp, #-16]
   14924:	e281100a 	add	r1, r1, #10
   14928:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   1492c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14930:	e1811002 	orr	r1, r1, r2
   14934:	e51b2010 	ldr	r2, [fp, #-16]
   14938:	e282200a 	add	r2, r2, #10
   1493c:	e7831102 	str	r1, [r3, r2, lsl #2]
   14940:	e1a03004 	mov	r3, r4
   14944:	e3040874 	movw	r0, #18548	; 0x4874
   14948:	e3400001 	movt	r0, #1
   1494c:	e1a01003 	mov	r1, r3
   14950:	eb0003c3 	bl	15864 <__cyg_profile_func_exit>
	}
}
   14954:	e24bd008 	sub	sp, fp, #8
   14958:	e8bd8810 	pop	{r4, fp, pc}

0001495c <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   1495c:	e92d4830 	push	{r4, r5, fp, lr}
   14960:	e28db00c 	add	fp, sp, #12
   14964:	e24dd008 	sub	sp, sp, #8
   14968:	e1a0500e 	mov	r5, lr
   1496c:	e50b0010 	str	r0, [fp, #-16]
   14970:	e1a03005 	mov	r3, r5
   14974:	e304095c 	movw	r0, #18780	; 0x495c
   14978:	e3400001 	movt	r0, #1
   1497c:	e1a01003 	mov	r1, r3
   14980:	eb000365 	bl	1571c <__cyg_profile_func_enter>
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   14984:	e3a02000 	mov	r2, #0
   14988:	e3432f20 	movt	r2, #16160	; 0x3f20
   1498c:	e51b3010 	ldr	r3, [fp, #-16]
   14990:	e1a032a3 	lsr	r3, r3, #5
   14994:	e283300c 	add	r3, r3, #12
   14998:	e1a03103 	lsl	r3, r3, #2
   1499c:	e0823003 	add	r3, r2, r3
   149a0:	e5932004 	ldr	r2, [r3, #4]
   149a4:	e51b3010 	ldr	r3, [fp, #-16]
   149a8:	e203301f 	and	r3, r3, #31
   149ac:	e1a03332 	lsr	r3, r2, r3
   149b0:	e2034001 	and	r4, r3, #1
   149b4:	e1a03005 	mov	r3, r5
   149b8:	e304095c 	movw	r0, #18780	; 0x495c
   149bc:	e3400001 	movt	r0, #1
   149c0:	e1a01003 	mov	r1, r3
   149c4:	eb0003a6 	bl	15864 <__cyg_profile_func_exit>
   149c8:	e1a03004 	mov	r3, r4
}
   149cc:	e1a00003 	mov	r0, r3
   149d0:	e24bd00c 	sub	sp, fp, #12
   149d4:	e8bd8830 	pop	{r4, r5, fp, pc}

000149d8 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   149d8:	e92d4810 	push	{r4, fp, lr}
   149dc:	e28db008 	add	fp, sp, #8
   149e0:	e24dd014 	sub	sp, sp, #20
   149e4:	e1a0400e 	mov	r4, lr
   149e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   149ec:	e1a03001 	mov	r3, r1
   149f0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   149f4:	e1a03004 	mov	r3, r4
   149f8:	e30409d8 	movw	r0, #18904	; 0x49d8
   149fc:	e3400001 	movt	r0, #1
   14a00:	e1a01003 	mov	r1, r3
   14a04:	eb000344 	bl	1571c <__cyg_profile_func_enter>
	unsigned long mask=(1<<pinNum);
   14a08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a0c:	e3a02001 	mov	r2, #1
   14a10:	e1a03312 	lsl	r3, r2, r3
   14a14:	e50b3010 	str	r3, [fp, #-16]
	unsigned long offset=pinNum/32;
   14a18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a1c:	e1a032a3 	lsr	r3, r3, #5
   14a20:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	
	switch(type) {
   14a24:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14a28:	e3530006 	cmp	r3, #6
   14a2c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   14a30:	ea000060 	b	14bb8 <EnableGpioDetect+0x1e0>
   14a34:	00014bb8 			; <UNDEFINED> instruction: 0x00014bb8
   14a38:	00014a50 	andeq	r4, r1, r0, asr sl
   14a3c:	00014a94 	muleq	r1, r4, sl
   14a40:	00014ac8 	andeq	r4, r1, r8, asr #21
   14a44:	00014b0c 	andeq	r4, r1, ip, lsl #22
   14a48:	00014b40 	andeq	r4, r1, r0, asr #22
   14a4c:	00014b84 	andeq	r4, r1, r4, lsl #23
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   14a50:	e3a02000 	mov	r2, #0
   14a54:	e3432f20 	movt	r2, #16160	; 0x3f20
   14a58:	e3a01000 	mov	r1, #0
   14a5c:	e3431f20 	movt	r1, #16160	; 0x3f20
   14a60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14a64:	e2833012 	add	r3, r3, #18
   14a68:	e1a03103 	lsl	r3, r3, #2
   14a6c:	e0813003 	add	r3, r1, r3
   14a70:	e5931004 	ldr	r1, [r3, #4]
   14a74:	e51b3010 	ldr	r3, [fp, #-16]
   14a78:	e1811003 	orr	r1, r1, r3
   14a7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14a80:	e2833012 	add	r3, r3, #18
   14a84:	e1a03103 	lsl	r3, r3, #2
   14a88:	e0823003 	add	r3, r2, r3
   14a8c:	e5831004 	str	r1, [r3, #4]
		break;
   14a90:	ea000048 	b	14bb8 <EnableGpioDetect+0x1e0>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   14a94:	e3a03000 	mov	r3, #0
   14a98:	e3433f20 	movt	r3, #16160	; 0x3f20
   14a9c:	e3a02000 	mov	r2, #0
   14aa0:	e3432f20 	movt	r2, #16160	; 0x3f20
   14aa4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   14aa8:	e2811016 	add	r1, r1, #22
   14aac:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   14ab0:	e51b2010 	ldr	r2, [fp, #-16]
   14ab4:	e1811002 	orr	r1, r1, r2
   14ab8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14abc:	e2822016 	add	r2, r2, #22
   14ac0:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   14ac4:	ea00003b 	b	14bb8 <EnableGpioDetect+0x1e0>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   14ac8:	e3a02000 	mov	r2, #0
   14acc:	e3432f20 	movt	r2, #16160	; 0x3f20
   14ad0:	e3a01000 	mov	r1, #0
   14ad4:	e3431f20 	movt	r1, #16160	; 0x3f20
   14ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14adc:	e2833018 	add	r3, r3, #24
   14ae0:	e1a03103 	lsl	r3, r3, #2
   14ae4:	e0813003 	add	r3, r1, r3
   14ae8:	e5931004 	ldr	r1, [r3, #4]
   14aec:	e51b3010 	ldr	r3, [fp, #-16]
   14af0:	e1811003 	orr	r1, r1, r3
   14af4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14af8:	e2833018 	add	r3, r3, #24
   14afc:	e1a03103 	lsl	r3, r3, #2
   14b00:	e0823003 	add	r3, r2, r3
   14b04:	e5831004 	str	r1, [r3, #4]
		break;
   14b08:	ea00002a 	b	14bb8 <EnableGpioDetect+0x1e0>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   14b0c:	e3a03000 	mov	r3, #0
   14b10:	e3433f20 	movt	r3, #16160	; 0x3f20
   14b14:	e3a02000 	mov	r2, #0
   14b18:	e3432f20 	movt	r2, #16160	; 0x3f20
   14b1c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   14b20:	e281101c 	add	r1, r1, #28
   14b24:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   14b28:	e51b2010 	ldr	r2, [fp, #-16]
   14b2c:	e1811002 	orr	r1, r1, r2
   14b30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14b34:	e282201c 	add	r2, r2, #28
   14b38:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   14b3c:	ea00001d 	b	14bb8 <EnableGpioDetect+0x1e0>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   14b40:	e3a02000 	mov	r2, #0
   14b44:	e3432f20 	movt	r2, #16160	; 0x3f20
   14b48:	e3a01000 	mov	r1, #0
   14b4c:	e3431f20 	movt	r1, #16160	; 0x3f20
   14b50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14b54:	e283301e 	add	r3, r3, #30
   14b58:	e1a03103 	lsl	r3, r3, #2
   14b5c:	e0813003 	add	r3, r1, r3
   14b60:	e5931004 	ldr	r1, [r3, #4]
   14b64:	e51b3010 	ldr	r3, [fp, #-16]
   14b68:	e1811003 	orr	r1, r1, r3
   14b6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14b70:	e283301e 	add	r3, r3, #30
   14b74:	e1a03103 	lsl	r3, r3, #2
   14b78:	e0823003 	add	r3, r2, r3
   14b7c:	e5831004 	str	r1, [r3, #4]
		break;
   14b80:	ea00000c 	b	14bb8 <EnableGpioDetect+0x1e0>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   14b84:	e3a03000 	mov	r3, #0
   14b88:	e3433f20 	movt	r3, #16160	; 0x3f20
   14b8c:	e3a02000 	mov	r2, #0
   14b90:	e3432f20 	movt	r2, #16160	; 0x3f20
   14b94:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   14b98:	e2811022 	add	r1, r1, #34	; 0x22
   14b9c:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   14ba0:	e51b2010 	ldr	r2, [fp, #-16]
   14ba4:	e1811002 	orr	r1, r1, r2
   14ba8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14bac:	e2822022 	add	r2, r2, #34	; 0x22
   14bb0:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   14bb4:	e1a00000 	nop			; (mov r0, r0)
   14bb8:	e1a03004 	mov	r3, r4
   14bbc:	e30409d8 	movw	r0, #18904	; 0x49d8
   14bc0:	e3400001 	movt	r0, #1
   14bc4:	e1a01003 	mov	r1, r3
   14bc8:	eb000325 	bl	15864 <__cyg_profile_func_exit>
	case DETECT_NONE:
		break;
	}
}
   14bcc:	e24bd008 	sub	sp, fp, #8
   14bd0:	e8bd8810 	pop	{r4, fp, pc}

00014bd4 <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   14bd4:	e92d4810 	push	{r4, fp, lr}
   14bd8:	e28db008 	add	fp, sp, #8
   14bdc:	e24dd014 	sub	sp, sp, #20
   14be0:	e1a0400e 	mov	r4, lr
   14be4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   14be8:	e1a03001 	mov	r3, r1
   14bec:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   14bf0:	e1a03004 	mov	r3, r4
   14bf4:	e3040bd4 	movw	r0, #19412	; 0x4bd4
   14bf8:	e3400001 	movt	r0, #1
   14bfc:	e1a01003 	mov	r1, r3
   14c00:	eb0002c5 	bl	1571c <__cyg_profile_func_enter>
	unsigned long mask=~(1<<(pinNum%32));
   14c04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c08:	e203301f 	and	r3, r3, #31
   14c0c:	e3a02001 	mov	r2, #1
   14c10:	e1a03312 	lsl	r3, r2, r3
   14c14:	e1e03003 	mvn	r3, r3
   14c18:	e50b3010 	str	r3, [fp, #-16]
	unsigned long offset=pinNum/32;
   14c1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c20:	e1a032a3 	lsr	r3, r3, #5
   14c24:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	
	switch(type) {
   14c28:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14c2c:	e3530006 	cmp	r3, #6
   14c30:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   14c34:	ea000060 	b	14dbc <DisableGpioDetect+0x1e8>
   14c38:	00014dbc 			; <UNDEFINED> instruction: 0x00014dbc
   14c3c:	00014c54 	andeq	r4, r1, r4, asr ip
   14c40:	00014c98 	muleq	r1, r8, ip
   14c44:	00014ccc 	andeq	r4, r1, ip, asr #25
   14c48:	00014d10 	andeq	r4, r1, r0, lsl sp
   14c4c:	00014d44 	andeq	r4, r1, r4, asr #26
   14c50:	00014d88 	andeq	r4, r1, r8, lsl #27
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   14c54:	e3a02000 	mov	r2, #0
   14c58:	e3432f20 	movt	r2, #16160	; 0x3f20
   14c5c:	e3a01000 	mov	r1, #0
   14c60:	e3431f20 	movt	r1, #16160	; 0x3f20
   14c64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14c68:	e2833012 	add	r3, r3, #18
   14c6c:	e1a03103 	lsl	r3, r3, #2
   14c70:	e0813003 	add	r3, r1, r3
   14c74:	e5931004 	ldr	r1, [r3, #4]
   14c78:	e51b3010 	ldr	r3, [fp, #-16]
   14c7c:	e0011003 	and	r1, r1, r3
   14c80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14c84:	e2833012 	add	r3, r3, #18
   14c88:	e1a03103 	lsl	r3, r3, #2
   14c8c:	e0823003 	add	r3, r2, r3
   14c90:	e5831004 	str	r1, [r3, #4]
		break;
   14c94:	ea000048 	b	14dbc <DisableGpioDetect+0x1e8>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   14c98:	e3a03000 	mov	r3, #0
   14c9c:	e3433f20 	movt	r3, #16160	; 0x3f20
   14ca0:	e3a02000 	mov	r2, #0
   14ca4:	e3432f20 	movt	r2, #16160	; 0x3f20
   14ca8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   14cac:	e2811016 	add	r1, r1, #22
   14cb0:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   14cb4:	e51b2010 	ldr	r2, [fp, #-16]
   14cb8:	e0011002 	and	r1, r1, r2
   14cbc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14cc0:	e2822016 	add	r2, r2, #22
   14cc4:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   14cc8:	ea00003b 	b	14dbc <DisableGpioDetect+0x1e8>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   14ccc:	e3a02000 	mov	r2, #0
   14cd0:	e3432f20 	movt	r2, #16160	; 0x3f20
   14cd4:	e3a01000 	mov	r1, #0
   14cd8:	e3431f20 	movt	r1, #16160	; 0x3f20
   14cdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14ce0:	e2833018 	add	r3, r3, #24
   14ce4:	e1a03103 	lsl	r3, r3, #2
   14ce8:	e0813003 	add	r3, r1, r3
   14cec:	e5931004 	ldr	r1, [r3, #4]
   14cf0:	e51b3010 	ldr	r3, [fp, #-16]
   14cf4:	e0011003 	and	r1, r1, r3
   14cf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14cfc:	e2833018 	add	r3, r3, #24
   14d00:	e1a03103 	lsl	r3, r3, #2
   14d04:	e0823003 	add	r3, r2, r3
   14d08:	e5831004 	str	r1, [r3, #4]
		break;
   14d0c:	ea00002a 	b	14dbc <DisableGpioDetect+0x1e8>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   14d10:	e3a03000 	mov	r3, #0
   14d14:	e3433f20 	movt	r3, #16160	; 0x3f20
   14d18:	e3a02000 	mov	r2, #0
   14d1c:	e3432f20 	movt	r2, #16160	; 0x3f20
   14d20:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   14d24:	e281101c 	add	r1, r1, #28
   14d28:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   14d2c:	e51b2010 	ldr	r2, [fp, #-16]
   14d30:	e0011002 	and	r1, r1, r2
   14d34:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14d38:	e282201c 	add	r2, r2, #28
   14d3c:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   14d40:	ea00001d 	b	14dbc <DisableGpioDetect+0x1e8>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   14d44:	e3a02000 	mov	r2, #0
   14d48:	e3432f20 	movt	r2, #16160	; 0x3f20
   14d4c:	e3a01000 	mov	r1, #0
   14d50:	e3431f20 	movt	r1, #16160	; 0x3f20
   14d54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14d58:	e283301e 	add	r3, r3, #30
   14d5c:	e1a03103 	lsl	r3, r3, #2
   14d60:	e0813003 	add	r3, r1, r3
   14d64:	e5931004 	ldr	r1, [r3, #4]
   14d68:	e51b3010 	ldr	r3, [fp, #-16]
   14d6c:	e0011003 	and	r1, r1, r3
   14d70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14d74:	e283301e 	add	r3, r3, #30
   14d78:	e1a03103 	lsl	r3, r3, #2
   14d7c:	e0823003 	add	r3, r2, r3
   14d80:	e5831004 	str	r1, [r3, #4]
		break;
   14d84:	ea00000c 	b	14dbc <DisableGpioDetect+0x1e8>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   14d88:	e3a03000 	mov	r3, #0
   14d8c:	e3433f20 	movt	r3, #16160	; 0x3f20
   14d90:	e3a02000 	mov	r2, #0
   14d94:	e3432f20 	movt	r2, #16160	; 0x3f20
   14d98:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   14d9c:	e2811022 	add	r1, r1, #34	; 0x22
   14da0:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   14da4:	e51b2010 	ldr	r2, [fp, #-16]
   14da8:	e0011002 	and	r1, r1, r2
   14dac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14db0:	e2822022 	add	r2, r2, #34	; 0x22
   14db4:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   14db8:	e1a00000 	nop			; (mov r0, r0)
   14dbc:	e1a03004 	mov	r3, r4
   14dc0:	e3040bd4 	movw	r0, #19412	; 0x4bd4
   14dc4:	e3400001 	movt	r0, #1
   14dc8:	e1a01003 	mov	r1, r3
   14dcc:	eb0002a4 	bl	15864 <__cyg_profile_func_exit>
	case DETECT_NONE:
		break;
	}
}
   14dd0:	e24bd008 	sub	sp, fp, #8
   14dd4:	e8bd8810 	pop	{r4, fp, pc}

00014dd8 <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   14dd8:	e92d4810 	push	{r4, fp, lr}
   14ddc:	e28db008 	add	fp, sp, #8
   14de0:	e24dd014 	sub	sp, sp, #20
   14de4:	e1a0400e 	mov	r4, lr
   14de8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   14dec:	e1a03004 	mov	r3, r4
   14df0:	e3040dd8 	movw	r0, #19928	; 0x4dd8
   14df4:	e3400001 	movt	r0, #1
   14df8:	e1a01003 	mov	r1, r3
   14dfc:	eb000246 	bl	1571c <__cyg_profile_func_enter>
	unsigned long mask=(1<<(pinNum%32));
   14e00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e04:	e203301f 	and	r3, r3, #31
   14e08:	e3a02001 	mov	r2, #1
   14e0c:	e1a03312 	lsl	r3, r2, r3
   14e10:	e50b3010 	str	r3, [fp, #-16]
	unsigned long offset=pinNum/32;
   14e14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e18:	e1a032a3 	lsr	r3, r3, #5
   14e1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	pRegs->GPEDS[offset]=mask;
   14e20:	e3a03000 	mov	r3, #0
   14e24:	e3433f20 	movt	r3, #16160	; 0x3f20
   14e28:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14e2c:	e2822010 	add	r2, r2, #16
   14e30:	e51b1010 	ldr	r1, [fp, #-16]
   14e34:	e7831102 	str	r1, [r3, r2, lsl #2]
   14e38:	e1a03004 	mov	r3, r4
   14e3c:	e3040dd8 	movw	r0, #19928	; 0x4dd8
   14e40:	e3400001 	movt	r0, #1
   14e44:	e1a01003 	mov	r1, r3
   14e48:	eb000285 	bl	15864 <__cyg_profile_func_exit>
}
   14e4c:	e24bd008 	sub	sp, fp, #8
   14e50:	e8bd8810 	pop	{r4, fp, pc}

00014e54 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   14e54:	e92d4830 	push	{r4, r5, fp, lr}
   14e58:	e28db00c 	add	fp, sp, #12
   14e5c:	e24dd018 	sub	sp, sp, #24
   14e60:	e1a0500e 	mov	r5, lr
   14e64:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   14e68:	e1a03005 	mov	r3, r5
   14e6c:	e3040e54 	movw	r0, #20052	; 0x4e54
   14e70:	e3400001 	movt	r0, #1
   14e74:	e1a01003 	mov	r1, r3
   14e78:	eb000227 	bl	1571c <__cyg_profile_func_enter>
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   14e7c:	e3a03000 	mov	r3, #0
   14e80:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	vTaskSuspendAll();
   14e84:	ebfff841 	bl	12f90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   14e88:	e30b3070 	movw	r3, #45168	; 0xb070
   14e8c:	e3403003 	movt	r3, #3
   14e90:	e5933000 	ldr	r3, [r3]
   14e94:	e3530000 	cmp	r3, #0
   14e98:	1a000000 	bne	14ea0 <pvPortMalloc+0x4c>
		{
			prvHeapInit();
   14e9c:	eb0000b9 	bl	15188 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   14ea0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ea4:	e3530000 	cmp	r3, #0
   14ea8:	0a00000c 	beq	14ee0 <pvPortMalloc+0x8c>
		{
			xWantedSize += heapSTRUCT_SIZE;
   14eac:	e3a03010 	mov	r3, #16
   14eb0:	e1a02003 	mov	r2, r3
   14eb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14eb8:	e0833002 	add	r3, r3, r2
   14ebc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   14ec0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ec4:	e2033007 	and	r3, r3, #7
   14ec8:	e3530000 	cmp	r3, #0
   14ecc:	0a000003 	beq	14ee0 <pvPortMalloc+0x8c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   14ed0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ed4:	e3c33007 	bic	r3, r3, #7
   14ed8:	e2833008 	add	r3, r3, #8
   14edc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   14ee0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ee4:	e3530000 	cmp	r3, #0
   14ee8:	0a000048 	beq	15010 <pvPortMalloc+0x1bc>
   14eec:	e3a02a0a 	mov	r2, #40960	; 0xa000
   14ef0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ef4:	e1530002 	cmp	r3, r2
   14ef8:	2a000044 	bcs	15010 <pvPortMalloc+0x1bc>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   14efc:	e30b3068 	movw	r3, #45160	; 0xb068
   14f00:	e3403003 	movt	r3, #3
   14f04:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			pxBlock = xStart.pxNextFreeBlock;
   14f08:	e30b3068 	movw	r3, #45160	; 0xb068
   14f0c:	e3403003 	movt	r3, #3
   14f10:	e5933000 	ldr	r3, [r3]
   14f14:	e50b3010 	str	r3, [fp, #-16]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   14f18:	ea000004 	b	14f30 <pvPortMalloc+0xdc>
			{
				pxPreviousBlock = pxBlock;
   14f1c:	e51b3010 	ldr	r3, [fp, #-16]
   14f20:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				pxBlock = pxBlock->pxNextFreeBlock;
   14f24:	e51b3010 	ldr	r3, [fp, #-16]
   14f28:	e5933000 	ldr	r3, [r3]
   14f2c:	e50b3010 	str	r3, [fp, #-16]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   14f30:	e51b3010 	ldr	r3, [fp, #-16]
   14f34:	e5932004 	ldr	r2, [r3, #4]
   14f38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14f3c:	e1520003 	cmp	r2, r3
   14f40:	2a000003 	bcs	14f54 <pvPortMalloc+0x100>
   14f44:	e51b3010 	ldr	r3, [fp, #-16]
   14f48:	e5933000 	ldr	r3, [r3]
   14f4c:	e3530000 	cmp	r3, #0
   14f50:	1afffff1 	bne	14f1c <pvPortMalloc+0xc8>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   14f54:	e30b3070 	movw	r3, #45168	; 0xb070
   14f58:	e3403003 	movt	r3, #3
   14f5c:	e5933000 	ldr	r3, [r3]
   14f60:	e51b2010 	ldr	r2, [fp, #-16]
   14f64:	e1520003 	cmp	r2, r3
   14f68:	0a000028 	beq	15010 <pvPortMalloc+0x1bc>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   14f6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14f70:	e5933000 	ldr	r3, [r3]
   14f74:	e3a02010 	mov	r2, #16
   14f78:	e0833002 	add	r3, r3, r2
   14f7c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   14f80:	e51b3010 	ldr	r3, [fp, #-16]
   14f84:	e5932000 	ldr	r2, [r3]
   14f88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14f8c:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   14f90:	e51b3010 	ldr	r3, [fp, #-16]
   14f94:	e5932004 	ldr	r2, [r3, #4]
   14f98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14f9c:	e0633002 	rsb	r3, r3, r2
   14fa0:	e3a02010 	mov	r2, #16
   14fa4:	e1a02082 	lsl	r2, r2, #1
   14fa8:	e1530002 	cmp	r3, r2
   14fac:	9a00000e 	bls	14fec <pvPortMalloc+0x198>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   14fb0:	e51b2010 	ldr	r2, [fp, #-16]
   14fb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fb8:	e0823003 	add	r3, r2, r3
   14fbc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   14fc0:	e51b3010 	ldr	r3, [fp, #-16]
   14fc4:	e5932004 	ldr	r2, [r3, #4]
   14fc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fcc:	e0632002 	rsb	r2, r3, r2
   14fd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   14fd4:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   14fd8:	e51b3010 	ldr	r3, [fp, #-16]
   14fdc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   14fe0:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   14fe4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   14fe8:	eb0000ac 	bl	152a0 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   14fec:	e3003b58 	movw	r3, #2904	; 0xb58
   14ff0:	e3403003 	movt	r3, #3
   14ff4:	e5932000 	ldr	r2, [r3]
   14ff8:	e51b3010 	ldr	r3, [fp, #-16]
   14ffc:	e5933004 	ldr	r3, [r3, #4]
   15000:	e0632002 	rsb	r2, r3, r2
   15004:	e3003b58 	movw	r3, #2904	; 0xb58
   15008:	e3403003 	movt	r3, #3
   1500c:	e5832000 	str	r2, [r3]
			}
		}
	}
	xTaskResumeAll();
   15010:	ebfff7f3 	bl	12fe4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   15014:	e30b3074 	movw	r3, #45172	; 0xb074
   15018:	e3403003 	movt	r3, #3
   1501c:	e5932000 	ldr	r2, [r3]
   15020:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   15024:	e0822003 	add	r2, r2, r3
   15028:	e30b3074 	movw	r3, #45172	; 0xb074
   1502c:	e3403003 	movt	r3, #3
   15030:	e5832000 	str	r2, [r3]

	return pvReturn;
   15034:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   15038:	e1a03005 	mov	r3, r5
   1503c:	e3040e54 	movw	r0, #20052	; 0x4e54
   15040:	e3400001 	movt	r0, #1
   15044:	e1a01003 	mov	r1, r3
   15048:	eb000205 	bl	15864 <__cyg_profile_func_exit>
   1504c:	e1a03004 	mov	r3, r4
}
   15050:	e1a00003 	mov	r0, r3
   15054:	e24bd00c 	sub	sp, fp, #12
   15058:	e8bd8830 	pop	{r4, r5, fp, pc}

0001505c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1505c:	e92d4810 	push	{r4, fp, lr}
   15060:	e28db008 	add	fp, sp, #8
   15064:	e24dd014 	sub	sp, sp, #20
   15068:	e1a0400e 	mov	r4, lr
   1506c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   15070:	e1a03004 	mov	r3, r4
   15074:	e305005c 	movw	r0, #20572	; 0x505c
   15078:	e3400001 	movt	r0, #1
   1507c:	e1a01003 	mov	r1, r3
   15080:	eb0001a5 	bl	1571c <__cyg_profile_func_enter>
unsigned char *puc = ( unsigned char * ) pv;
   15084:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15088:	e50b3010 	str	r3, [fp, #-16]
xBlockLink *pxLink;

	if( pv != NULL )
   1508c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15090:	e3530000 	cmp	r3, #0
   15094:	0a000013 	beq	150e8 <vPortFree+0x8c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   15098:	e3a03010 	mov	r3, #16
   1509c:	e2633000 	rsb	r3, r3, #0
   150a0:	e51b2010 	ldr	r2, [fp, #-16]
   150a4:	e0823003 	add	r3, r2, r3
   150a8:	e50b3010 	str	r3, [fp, #-16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   150ac:	e51b3010 	ldr	r3, [fp, #-16]
   150b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

		vTaskSuspendAll();
   150b4:	ebfff7b5 	bl	12f90 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   150b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   150bc:	e5932004 	ldr	r2, [r3, #4]
   150c0:	e3003b58 	movw	r3, #2904	; 0xb58
   150c4:	e3403003 	movt	r3, #3
   150c8:	e5933000 	ldr	r3, [r3]
   150cc:	e0822003 	add	r2, r2, r3
   150d0:	e3003b58 	movw	r3, #2904	; 0xb58
   150d4:	e3403003 	movt	r3, #3
   150d8:	e5832000 	str	r2, [r3]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   150dc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   150e0:	eb00006e 	bl	152a0 <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   150e4:	ebfff7be 	bl	12fe4 <xTaskResumeAll>
   150e8:	e1a03004 	mov	r3, r4
   150ec:	e305005c 	movw	r0, #20572	; 0x505c
   150f0:	e3400001 	movt	r0, #1
   150f4:	e1a01003 	mov	r1, r3
   150f8:	eb0001d9 	bl	15864 <__cyg_profile_func_exit>
	}
}
   150fc:	e24bd008 	sub	sp, fp, #8
   15100:	e8bd8810 	pop	{r4, fp, pc}

00015104 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   15104:	e92d4830 	push	{r4, r5, fp, lr}
   15108:	e28db00c 	add	fp, sp, #12
   1510c:	e1a0500e 	mov	r5, lr
   15110:	e1a03005 	mov	r3, r5
   15114:	e3050104 	movw	r0, #20740	; 0x5104
   15118:	e3400001 	movt	r0, #1
   1511c:	e1a01003 	mov	r1, r3
   15120:	eb00017d 	bl	1571c <__cyg_profile_func_enter>
	return xFreeBytesRemaining;
   15124:	e3003b58 	movw	r3, #2904	; 0xb58
   15128:	e3403003 	movt	r3, #3
   1512c:	e5934000 	ldr	r4, [r3]
   15130:	e1a03005 	mov	r3, r5
   15134:	e3050104 	movw	r0, #20740	; 0x5104
   15138:	e3400001 	movt	r0, #1
   1513c:	e1a01003 	mov	r1, r3
   15140:	eb0001c7 	bl	15864 <__cyg_profile_func_exit>
   15144:	e1a03004 	mov	r3, r4
}
   15148:	e1a00003 	mov	r0, r3
   1514c:	e8bd8830 	pop	{r4, r5, fp, pc}

00015150 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   15150:	e92d4818 	push	{r3, r4, fp, lr}
   15154:	e28db00c 	add	fp, sp, #12
   15158:	e1a0400e 	mov	r4, lr
   1515c:	e1a03004 	mov	r3, r4
   15160:	e3050150 	movw	r0, #20816	; 0x5150
   15164:	e3400001 	movt	r0, #1
   15168:	e1a01003 	mov	r1, r3
   1516c:	eb00016a 	bl	1571c <__cyg_profile_func_enter>
   15170:	e1a03004 	mov	r3, r4
   15174:	e3050150 	movw	r0, #20816	; 0x5150
   15178:	e3400001 	movt	r0, #1
   1517c:	e1a01003 	mov	r1, r3
   15180:	eb0001b7 	bl	15864 <__cyg_profile_func_exit>
	/* This just exists to keep the linker quiet. */
}
   15184:	e8bd8818 	pop	{r3, r4, fp, pc}

00015188 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   15188:	e92d4810 	push	{r4, fp, lr}
   1518c:	e28db008 	add	fp, sp, #8
   15190:	e24dd00c 	sub	sp, sp, #12
   15194:	e1a0400e 	mov	r4, lr
   15198:	e1a03004 	mov	r3, r4
   1519c:	e3050188 	movw	r0, #20872	; 0x5188
   151a0:	e3400001 	movt	r0, #1
   151a4:	e1a01003 	mov	r1, r3
   151a8:	eb00015b 	bl	1571c <__cyg_profile_func_enter>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   151ac:	e30b3068 	movw	r3, #45160	; 0xb068
   151b0:	e3403003 	movt	r3, #3
   151b4:	e3012068 	movw	r2, #4200	; 0x1068
   151b8:	e3402003 	movt	r2, #3
   151bc:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   151c0:	e30b3068 	movw	r3, #45160	; 0xb068
   151c4:	e3403003 	movt	r3, #3
   151c8:	e3a02000 	mov	r2, #0
   151cc:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   151d0:	e3a02a0a 	mov	r2, #40960	; 0xa000
   151d4:	e3013068 	movw	r3, #4200	; 0x1068
   151d8:	e3403003 	movt	r3, #3
   151dc:	e0823003 	add	r3, r2, r3
   151e0:	e50b3010 	str	r3, [fp, #-16]
	pucHeapEnd -= heapSTRUCT_SIZE;
   151e4:	e3a03010 	mov	r3, #16
   151e8:	e2633000 	rsb	r3, r3, #0
   151ec:	e51b2010 	ldr	r2, [fp, #-16]
   151f0:	e0823003 	add	r3, r2, r3
   151f4:	e50b3010 	str	r3, [fp, #-16]
	pxEnd = ( void * ) pucHeapEnd;
   151f8:	e30b3070 	movw	r3, #45168	; 0xb070
   151fc:	e3403003 	movt	r3, #3
   15200:	e51b2010 	ldr	r2, [fp, #-16]
   15204:	e5832000 	str	r2, [r3]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   15208:	e30b3070 	movw	r3, #45168	; 0xb070
   1520c:	e3403003 	movt	r3, #3
   15210:	e5933000 	ldr	r3, [r3]
   15214:	e3a02000 	mov	r2, #0
   15218:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   1521c:	e30b3070 	movw	r3, #45168	; 0xb070
   15220:	e3403003 	movt	r3, #3
   15224:	e5933000 	ldr	r3, [r3]
   15228:	e3a02000 	mov	r2, #0
   1522c:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   15230:	e3013068 	movw	r3, #4200	; 0x1068
   15234:	e3403003 	movt	r3, #3
   15238:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   1523c:	e3a03a0a 	mov	r3, #40960	; 0xa000
   15240:	e3a02010 	mov	r2, #16
   15244:	e0622003 	rsb	r2, r2, r3
   15248:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1524c:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   15250:	e30b3070 	movw	r3, #45168	; 0xb070
   15254:	e3403003 	movt	r3, #3
   15258:	e5932000 	ldr	r2, [r3]
   1525c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15260:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   15264:	e3003b58 	movw	r3, #2904	; 0xb58
   15268:	e3403003 	movt	r3, #3
   1526c:	e5933000 	ldr	r3, [r3]
   15270:	e3a02010 	mov	r2, #16
   15274:	e0622003 	rsb	r2, r2, r3
   15278:	e3003b58 	movw	r3, #2904	; 0xb58
   1527c:	e3403003 	movt	r3, #3
   15280:	e5832000 	str	r2, [r3]
   15284:	e1a03004 	mov	r3, r4
   15288:	e3050188 	movw	r0, #20872	; 0x5188
   1528c:	e3400001 	movt	r0, #1
   15290:	e1a01003 	mov	r1, r3
   15294:	eb000172 	bl	15864 <__cyg_profile_func_exit>
}
   15298:	e24bd008 	sub	sp, fp, #8
   1529c:	e8bd8810 	pop	{r4, fp, pc}

000152a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   152a0:	e92d4810 	push	{r4, fp, lr}
   152a4:	e28db008 	add	fp, sp, #8
   152a8:	e24dd014 	sub	sp, sp, #20
   152ac:	e1a0400e 	mov	r4, lr
   152b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   152b4:	e1a03004 	mov	r3, r4
   152b8:	e30502a0 	movw	r0, #21152	; 0x52a0
   152bc:	e3400001 	movt	r0, #1
   152c0:	e1a01003 	mov	r1, r3
   152c4:	eb000114 	bl	1571c <__cyg_profile_func_enter>
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   152c8:	e30b3068 	movw	r3, #45160	; 0xb068
   152cc:	e3403003 	movt	r3, #3
   152d0:	e50b3010 	str	r3, [fp, #-16]
   152d4:	ea000002 	b	152e4 <prvInsertBlockIntoFreeList+0x44>
   152d8:	e51b3010 	ldr	r3, [fp, #-16]
   152dc:	e5933000 	ldr	r3, [r3]
   152e0:	e50b3010 	str	r3, [fp, #-16]
   152e4:	e51b3010 	ldr	r3, [fp, #-16]
   152e8:	e5932000 	ldr	r2, [r3]
   152ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   152f0:	e1520003 	cmp	r2, r3
   152f4:	3afffff7 	bcc	152d8 <prvInsertBlockIntoFreeList+0x38>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   152f8:	e51b3010 	ldr	r3, [fp, #-16]
   152fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   15300:	e51b3010 	ldr	r3, [fp, #-16]
   15304:	e5933004 	ldr	r3, [r3, #4]
   15308:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1530c:	e0822003 	add	r2, r2, r3
   15310:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15314:	e1520003 	cmp	r2, r3
   15318:	1a000008 	bne	15340 <prvInsertBlockIntoFreeList+0xa0>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   1531c:	e51b3010 	ldr	r3, [fp, #-16]
   15320:	e5932004 	ldr	r2, [r3, #4]
   15324:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15328:	e5933004 	ldr	r3, [r3, #4]
   1532c:	e0822003 	add	r2, r2, r3
   15330:	e51b3010 	ldr	r3, [fp, #-16]
   15334:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   15338:	e51b3010 	ldr	r3, [fp, #-16]
   1533c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   15340:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15344:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   15348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1534c:	e5933004 	ldr	r3, [r3, #4]
   15350:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   15354:	e0822003 	add	r2, r2, r3
   15358:	e51b3010 	ldr	r3, [fp, #-16]
   1535c:	e5933000 	ldr	r3, [r3]
   15360:	e1520003 	cmp	r2, r3
   15364:	1a00001a 	bne	153d4 <prvInsertBlockIntoFreeList+0x134>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   15368:	e51b3010 	ldr	r3, [fp, #-16]
   1536c:	e5932000 	ldr	r2, [r3]
   15370:	e30b3070 	movw	r3, #45168	; 0xb070
   15374:	e3403003 	movt	r3, #3
   15378:	e5933000 	ldr	r3, [r3]
   1537c:	e1520003 	cmp	r2, r3
   15380:	0a00000d 	beq	153bc <prvInsertBlockIntoFreeList+0x11c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   15384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15388:	e5932004 	ldr	r2, [r3, #4]
   1538c:	e51b3010 	ldr	r3, [fp, #-16]
   15390:	e5933000 	ldr	r3, [r3]
   15394:	e5933004 	ldr	r3, [r3, #4]
   15398:	e0822003 	add	r2, r2, r3
   1539c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   153a0:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   153a4:	e51b3010 	ldr	r3, [fp, #-16]
   153a8:	e5933000 	ldr	r3, [r3]
   153ac:	e5932000 	ldr	r2, [r3]
   153b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   153b4:	e5832000 	str	r2, [r3]
   153b8:	ea000009 	b	153e4 <prvInsertBlockIntoFreeList+0x144>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   153bc:	e30b3070 	movw	r3, #45168	; 0xb070
   153c0:	e3403003 	movt	r3, #3
   153c4:	e5932000 	ldr	r2, [r3]
   153c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   153cc:	e5832000 	str	r2, [r3]
   153d0:	ea000003 	b	153e4 <prvInsertBlockIntoFreeList+0x144>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   153d4:	e51b3010 	ldr	r3, [fp, #-16]
   153d8:	e5932000 	ldr	r2, [r3]
   153dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   153e0:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   153e4:	e51b2010 	ldr	r2, [fp, #-16]
   153e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   153ec:	e1520003 	cmp	r2, r3
   153f0:	0a000002 	beq	15400 <prvInsertBlockIntoFreeList+0x160>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   153f4:	e51b3010 	ldr	r3, [fp, #-16]
   153f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   153fc:	e5832000 	str	r2, [r3]
   15400:	e1a03004 	mov	r3, r4
   15404:	e30502a0 	movw	r0, #21152	; 0x52a0
   15408:	e3400001 	movt	r0, #1
   1540c:	e1a01003 	mov	r1, r3
   15410:	eb000113 	bl	15864 <__cyg_profile_func_exit>
	}
}
   15414:	e24bd008 	sub	sp, fp, #8
   15418:	e8bd8810 	pop	{r4, fp, pc}

0001541c <undefined_instruction>:
   1541c:	eafffffe 	b	1541c <undefined_instruction>

00015420 <prefetch_abort>:
   15420:	eafffffe 	b	15420 <prefetch_abort>

00015424 <data_abort>:
   15424:	eafffffe 	b	15424 <data_abort>

00015428 <unused>:
   15428:	eafffffe 	b	15428 <unused>

0001542c <fiq>:
   1542c:	eafffffe 	b	1542c <fiq>

00015430 <hang>:
   15430:	eafffffe 	b	15430 <hang>

00015434 <PUT32>:
   15434:	e5801000 	str	r1, [r0]
   15438:	e12fff1e 	bx	lr

0001543c <GET32>:
   1543c:	e5900000 	ldr	r0, [r0]
   15440:	e12fff1e 	bx	lr

00015444 <task1>:
#include "Drivers/interrupts.h"
#include "Drivers/gpio.h"
#include "Drivers/video.h"
#include "Drivers/lan9514/arp.h"

void task1() {
   15444:	e92d4800 	push	{fp, lr}
   15448:	e28db004 	add	fp, sp, #4
   1544c:	e24dd008 	sub	sp, sp, #8
   15450:	e1a0300e 	mov	r3, lr
   15454:	e3050444 	movw	r0, #21572	; 0x5444
   15458:	e3400001 	movt	r0, #1
   1545c:	e1a01003 	mov	r1, r3
   15460:	eb0000ad 	bl	1571c <__cyg_profile_func_enter>
	int i = 0;
   15464:	e3a03000 	mov	r3, #0
   15468:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   1546c:	e51b3008 	ldr	r3, [fp, #-8]
   15470:	e2833001 	add	r3, r3, #1
   15474:	e50b3008 	str	r3, [fp, #-8]
		SetGpio(47, 1);
   15478:	e3a0002f 	mov	r0, #47	; 0x2f
   1547c:	e3a01001 	mov	r1, #1
   15480:	ebfffcfb 	bl	14874 <SetGpio>
		vTaskDelay(200);
   15484:	e3a000c8 	mov	r0, #200	; 0xc8
   15488:	ebfff4a5 	bl	12724 <vTaskDelay>
	}
   1548c:	eafffff6 	b	1546c <task1+0x28>

00015490 <task2>:
}

void task2() {
   15490:	e92d4800 	push	{fp, lr}
   15494:	e28db004 	add	fp, sp, #4
   15498:	e24dd008 	sub	sp, sp, #8
   1549c:	e1a0300e 	mov	r3, lr
   154a0:	e3050490 	movw	r0, #21648	; 0x5490
   154a4:	e3400001 	movt	r0, #1
   154a8:	e1a01003 	mov	r1, r3
   154ac:	eb00009a 	bl	1571c <__cyg_profile_func_enter>
	int i = 0;
   154b0:	e3a03000 	mov	r3, #0
   154b4:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   154b8:	e51b3008 	ldr	r3, [fp, #-8]
   154bc:	e2833001 	add	r3, r3, #1
   154c0:	e50b3008 	str	r3, [fp, #-8]
		vTaskDelay(100);
   154c4:	e3a00064 	mov	r0, #100	; 0x64
   154c8:	ebfff495 	bl	12724 <vTaskDelay>
		SetGpio(47, 0);
   154cc:	e3a0002f 	mov	r0, #47	; 0x2f
   154d0:	e3a01000 	mov	r1, #0
   154d4:	ebfffce6 	bl	14874 <SetGpio>
		vTaskDelay(100);
   154d8:	e3a00064 	mov	r0, #100	; 0x64
   154dc:	ebfff490 	bl	12724 <vTaskDelay>
	}
   154e0:	eafffff4 	b	154b8 <task2+0x28>

000154e4 <main>:
 *	This is the systems main entry, some call it a boot thread.
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
int main(void) {
   154e4:	e92d4800 	push	{fp, lr}
   154e8:	e28db004 	add	fp, sp, #4
   154ec:	e24dd010 	sub	sp, sp, #16
   154f0:	e1a0300e 	mov	r3, lr
   154f4:	e30504e4 	movw	r0, #21732	; 0x54e4
   154f8:	e3400001 	movt	r0, #1
   154fc:	e1a01003 	mov	r1, r3
   15500:	eb000085 	bl	1571c <__cyg_profile_func_enter>
	SetGpioFunction(47, 1);			// RDY led
   15504:	e3a0002f 	mov	r0, #47	; 0x2f
   15508:	e3a01001 	mov	r1, #1
   1550c:	ebfffc83 	bl	14720 <SetGpioFunction>

	initFB();
   15510:	eb000126 	bl	159b0 <initFB>
loaded = 1;
   15514:	e30b307c 	movw	r3, #45180	; 0xb07c
   15518:	e3403003 	movt	r3, #3
   1551c:	e3a02001 	mov	r2, #1
   15520:	e5c32000 	strb	r2, [r3]
arp();
   15524:	eb000628 	bl	16dcc <arp>
loaded = 0;
   15528:	e30b307c 	movw	r3, #45180	; 0xb07c
   1552c:	e3403003 	movt	r3, #3
   15530:	e3a02000 	mov	r2, #0
   15534:	e5c32000 	strb	r2, [r3]
	SetGpio(47, 1);
   15538:	e3a0002f 	mov	r0, #47	; 0x2f
   1553c:	e3a01001 	mov	r1, #1
   15540:	ebfffccb 	bl	14874 <SetGpio>
	//videotest();

	DisableInterrupts();
   15544:	ebfffc63 	bl	146d8 <DisableInterrupts>
	InitInterruptController();
   15548:	ebfffb79 	bl	14334 <InitInterruptController>

	xTaskCreate(task1, "LED_0", 128, NULL, 0, NULL);
   1554c:	e3a03000 	mov	r3, #0
   15550:	e58d3000 	str	r3, [sp]
   15554:	e3a03000 	mov	r3, #0
   15558:	e58d3004 	str	r3, [sp, #4]
   1555c:	e3a03000 	mov	r3, #0
   15560:	e58d3008 	str	r3, [sp, #8]
   15564:	e3a03000 	mov	r3, #0
   15568:	e58d300c 	str	r3, [sp, #12]
   1556c:	e3050444 	movw	r0, #21572	; 0x5444
   15570:	e3400001 	movt	r0, #1
   15574:	e30d1bcc 	movw	r1, #56268	; 0xdbcc
   15578:	e3401002 	movt	r1, #2
   1557c:	e3a02080 	mov	r2, #128	; 0x80
   15580:	e3a03000 	mov	r3, #0
   15584:	ebfff323 	bl	12218 <xTaskGenericCreate>
	xTaskCreate(task2, "LED_1", 128, NULL, 0, NULL);
   15588:	e3a03000 	mov	r3, #0
   1558c:	e58d3000 	str	r3, [sp]
   15590:	e3a03000 	mov	r3, #0
   15594:	e58d3004 	str	r3, [sp, #4]
   15598:	e3a03000 	mov	r3, #0
   1559c:	e58d3008 	str	r3, [sp, #8]
   155a0:	e3a03000 	mov	r3, #0
   155a4:	e58d300c 	str	r3, [sp, #12]
   155a8:	e3050490 	movw	r0, #21648	; 0x5490
   155ac:	e3400001 	movt	r0, #1
   155b0:	e30d1bd4 	movw	r1, #56276	; 0xdbd4
   155b4:	e3401002 	movt	r1, #2
   155b8:	e3a02080 	mov	r2, #128	; 0x80
   155bc:	e3a03000 	mov	r3, #0
   155c0:	ebfff314 	bl	12218 <xTaskGenericCreate>
	//xTaskCreate(arp, "ARP", 128, NULL, 0, NULL);

	vTaskStartScheduler();
   155c4:	ebfff628 	bl	12e6c <vTaskStartScheduler>
	 *	We should never get here, but just in case something goes wrong,
	 *	we'll place the CPU into a safe loop.
	 */
	while(1) {
		;
	}
   155c8:	eafffffe 	b	155c8 <main+0xe4>

000155cc <mailboxWrite>:

//Docuentation on the mailbox functions
//mailbuffer should probably be 16 byte aligned (for gpu at least):
//unsigned int mailbuffer[22] __attribute__((aligned (16)));
//https://github.com/raspberrypi/firmware/wiki/Mailbox-property-interface
void mailboxWrite(int data_addr, int channel){
   155cc:	e92d4810 	push	{r4, fp, lr}
   155d0:	e28db008 	add	fp, sp, #8
   155d4:	e24dd014 	sub	sp, sp, #20
   155d8:	e1a0400e 	mov	r4, lr
   155dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   155e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   155e4:	e1a03004 	mov	r3, r4
   155e8:	e30505cc 	movw	r0, #21964	; 0x55cc
   155ec:	e3400001 	movt	r0, #1
   155f0:	e1a01003 	mov	r1, r3
   155f4:	eb000048 	bl	1571c <__cyg_profile_func_enter>
	int mailbox = 0x3f00B880;
   155f8:	e30b3880 	movw	r3, #47232	; 0xb880
   155fc:	e3433f00 	movt	r3, #16128	; 0x3f00
   15600:	e50b3010 	str	r3, [fp, #-16]
	while(1){
		if((GET32(mailbox + 0x18)&0x80000000) == 0) break;
   15604:	e51b3010 	ldr	r3, [fp, #-16]
   15608:	e2833018 	add	r3, r3, #24
   1560c:	e1a00003 	mov	r0, r3
   15610:	ebffff89 	bl	1543c <GET32>
   15614:	e1a03000 	mov	r3, r0
   15618:	e3530000 	cmp	r3, #0
   1561c:	ba000000 	blt	15624 <mailboxWrite+0x58>
   15620:	ea000000 	b	15628 <mailboxWrite+0x5c>
	}
   15624:	eafffff6 	b	15604 <mailboxWrite+0x38>
	PUT32(mailbox + 0x20, data_addr + channel);
   15628:	e51b3010 	ldr	r3, [fp, #-16]
   1562c:	e2831020 	add	r1, r3, #32
   15630:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   15634:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   15638:	e0823003 	add	r3, r2, r3
   1563c:	e1a00001 	mov	r0, r1
   15640:	e1a01003 	mov	r1, r3
   15644:	ebffff7a 	bl	15434 <PUT32>
	return;
   15648:	e1a00000 	nop			; (mov r0, r0)
   1564c:	e1a03004 	mov	r3, r4
   15650:	e30505cc 	movw	r0, #21964	; 0x55cc
   15654:	e3400001 	movt	r0, #1
   15658:	e1a01003 	mov	r1, r3
   1565c:	eb000080 	bl	15864 <__cyg_profile_func_exit>
}
   15660:	e24bd008 	sub	sp, fp, #8
   15664:	e8bd8810 	pop	{r4, fp, pc}

00015668 <mailboxRead>:

int mailboxRead(int channel){
   15668:	e92d4830 	push	{r4, r5, fp, lr}
   1566c:	e28db00c 	add	fp, sp, #12
   15670:	e24dd010 	sub	sp, sp, #16
   15674:	e1a0500e 	mov	r5, lr
   15678:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1567c:	e1a03005 	mov	r3, r5
   15680:	e3050668 	movw	r0, #22120	; 0x5668
   15684:	e3400001 	movt	r0, #1
   15688:	e1a01003 	mov	r1, r3
   1568c:	eb000022 	bl	1571c <__cyg_profile_func_enter>
	int ra;
	int mailbox = 0x3f00B880;
   15690:	e30b3880 	movw	r3, #47232	; 0xb880
   15694:	e3433f00 	movt	r3, #16128	; 0x3f00
   15698:	e50b3010 	str	r3, [fp, #-16]
	while(1){
		while(1){
			ra = GET32(mailbox + 0x18);
   1569c:	e51b3010 	ldr	r3, [fp, #-16]
   156a0:	e2833018 	add	r3, r3, #24
   156a4:	e1a00003 	mov	r0, r3
   156a8:	ebffff63 	bl	1543c <GET32>
   156ac:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
			if((ra&0x40000000) == 0) break;
   156b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   156b4:	e2033101 	and	r3, r3, #1073741824	; 0x40000000
   156b8:	e3530000 	cmp	r3, #0
   156bc:	1a000009 	bne	156e8 <mailboxRead+0x80>
   156c0:	e1a00000 	nop			; (mov r0, r0)
		}
		ra = GET32(mailbox + 0x00);
   156c4:	e51b0010 	ldr	r0, [fp, #-16]
   156c8:	ebffff5b 	bl	1543c <GET32>
   156cc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
		if((ra&0xF) == channel) break;
   156d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   156d4:	e203200f 	and	r2, r3, #15
   156d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   156dc:	e1520003 	cmp	r2, r3
   156e0:	1a000002 	bne	156f0 <mailboxRead+0x88>
   156e4:	ea000000 	b	156ec <mailboxRead+0x84>
	int mailbox = 0x3f00B880;
	while(1){
		while(1){
			ra = GET32(mailbox + 0x18);
			if((ra&0x40000000) == 0) break;
		}
   156e8:	eaffffeb 	b	1569c <mailboxRead+0x34>
		ra = GET32(mailbox + 0x00);
		if((ra&0xF) == channel) break;
   156ec:	ea000000 	b	156f4 <mailboxRead+0x8c>
	}
   156f0:	eaffffe9 	b	1569c <mailboxRead+0x34>
	return(ra);
   156f4:	e51b4014 	ldr	r4, [fp, #-20]	; 0xffffffec
   156f8:	e1a03005 	mov	r3, r5
   156fc:	e3050668 	movw	r0, #22120	; 0x5668
   15700:	e3400001 	movt	r0, #1
   15704:	e1a01003 	mov	r1, r3
   15708:	eb000055 	bl	15864 <__cyg_profile_func_exit>
   1570c:	e1a03004 	mov	r3, r4
   15710:	e1a00003 	mov	r0, r3
   15714:	e24bd00c 	sub	sp, fp, #12
   15718:	e8bd8830 	pop	{r4, r5, fp, pc}

0001571c <__cyg_profile_func_enter>:
//you must add __attribute__((no_instrument_function))
//to any function you do not want traced
//especially ones which are printing out the trace :)

__attribute__((no_instrument_function))
void __cyg_profile_func_enter (void *this_fn, void *call_site){
   1571c:	e92d4870 	push	{r4, r5, r6, fp, lr}
   15720:	e28db010 	add	fp, sp, #16
   15724:	e24dd01c 	sub	sp, sp, #28
   15728:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   1572c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
	if(loaded == 1){
   15730:	e30b107c 	movw	r1, #45180	; 0xb07c
   15734:	e3401003 	movt	r1, #3
   15738:	e5d11000 	ldrb	r1, [r1]
   1573c:	e6af1071 	sxtb	r1, r1
   15740:	e3510001 	cmp	r1, #1
   15744:	1a000044 	bne	1585c <__cyg_profile_func_enter+0x140>
   15748:	e1a0100d 	mov	r1, sp
   1574c:	e1a06001 	mov	r6, r1
		depth++;
   15750:	e30b1078 	movw	r1, #45176	; 0xb078
   15754:	e3401003 	movt	r1, #3
   15758:	e5911000 	ldr	r1, [r1]
   1575c:	e2810001 	add	r0, r1, #1
   15760:	e30b1078 	movw	r1, #45176	; 0xb078
   15764:	e3401003 	movt	r1, #3
   15768:	e5810000 	str	r0, [r1]
		char m[depth + 1];
   1576c:	e30b1078 	movw	r1, #45176	; 0xb078
   15770:	e3401003 	movt	r1, #3
   15774:	e5911000 	ldr	r1, [r1]
   15778:	e281c001 	add	ip, r1, #1
   1577c:	e24c1001 	sub	r1, ip, #1
   15780:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   15784:	e1a0100c 	mov	r1, ip
   15788:	e1a00001 	mov	r0, r1
   1578c:	e3a01000 	mov	r1, #0
   15790:	e1a05181 	lsl	r5, r1, #3
   15794:	e1855ea0 	orr	r5, r5, r0, lsr #29
   15798:	e1a04180 	lsl	r4, r0, #3
   1579c:	e1a0100c 	mov	r1, ip
   157a0:	e1a00001 	mov	r0, r1
   157a4:	e3a01000 	mov	r1, #0
   157a8:	e1a03181 	lsl	r3, r1, #3
   157ac:	e1833ea0 	orr	r3, r3, r0, lsr #29
   157b0:	e1a02180 	lsl	r2, r0, #3
   157b4:	e1a0300c 	mov	r3, ip
   157b8:	e2833007 	add	r3, r3, #7
   157bc:	e1a031a3 	lsr	r3, r3, #3
   157c0:	e1a03183 	lsl	r3, r3, #3
   157c4:	e04dd003 	sub	sp, sp, r3
   157c8:	e1a0300d 	mov	r3, sp
   157cc:	e2833000 	add	r3, r3, #0
   157d0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		for(int i = 0; i < depth; i++){
   157d4:	e3a03000 	mov	r3, #0
   157d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   157dc:	ea000007 	b	15800 <__cyg_profile_func_enter+0xe4>
			m[i] = ' ';
   157e0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   157e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   157e8:	e0823003 	add	r3, r2, r3
   157ec:	e3a02020 	mov	r2, #32
   157f0:	e5c32000 	strb	r2, [r3]
__attribute__((no_instrument_function))
void __cyg_profile_func_enter (void *this_fn, void *call_site){
	if(loaded == 1){
		depth++;
		char m[depth + 1];
		for(int i = 0; i < depth; i++){
   157f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   157f8:	e2833001 	add	r3, r3, #1
   157fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   15800:	e30b3078 	movw	r3, #45176	; 0xb078
   15804:	e3403003 	movt	r3, #3
   15808:	e5933000 	ldr	r3, [r3]
   1580c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   15810:	e1520003 	cmp	r2, r3
   15814:	bafffff1 	blt	157e0 <__cyg_profile_func_enter+0xc4>
			m[i] = ' ';
		}
		m[depth + 0] = 0; //null termination
   15818:	e30b3078 	movw	r3, #45176	; 0xb078
   1581c:	e3403003 	movt	r3, #3
   15820:	e5933000 	ldr	r3, [r3]
   15824:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   15828:	e3a01000 	mov	r1, #0
   1582c:	e7c21003 	strb	r1, [r2, r3]
		m[0] = '_';
   15830:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   15834:	e3a0205f 	mov	r2, #95	; 0x5f
   15838:	e5c32000 	strb	r2, [r3]
		printHex(m, this_fn, 0xFF00FF00); //green for call
   1583c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   15840:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   15844:	e1a00002 	mov	r0, r2
   15848:	e1a01003 	mov	r1, r3
   1584c:	e3a02cff 	mov	r2, #65280	; 0xff00
   15850:	e34f2f00 	movt	r2, #65280	; 0xff00
   15854:	eb0001b4 	bl	15f2c <printHex>
   15858:	e1a0d006 	mov	sp, r6
	}
}
   1585c:	e24bd010 	sub	sp, fp, #16
   15860:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

00015864 <__cyg_profile_func_exit>:

__attribute__((no_instrument_function))
void __cyg_profile_func_exit  (void *this_fn, void *call_site){
   15864:	e92d4870 	push	{r4, r5, r6, fp, lr}
   15868:	e28db010 	add	fp, sp, #16
   1586c:	e24dd01c 	sub	sp, sp, #28
   15870:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   15874:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
	if(loaded == 1){
   15878:	e30b107c 	movw	r1, #45180	; 0xb07c
   1587c:	e3401003 	movt	r1, #3
   15880:	e5d11000 	ldrb	r1, [r1]
   15884:	e6af1071 	sxtb	r1, r1
   15888:	e3510001 	cmp	r1, #1
   1588c:	1a000044 	bne	159a4 <__cyg_profile_func_exit+0x140>
   15890:	e1a0100d 	mov	r1, sp
   15894:	e1a06001 	mov	r6, r1
		char m[depth + 1];
   15898:	e30b1078 	movw	r1, #45176	; 0xb078
   1589c:	e3401003 	movt	r1, #3
   158a0:	e5911000 	ldr	r1, [r1]
   158a4:	e281c001 	add	ip, r1, #1
   158a8:	e24c1001 	sub	r1, ip, #1
   158ac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   158b0:	e1a0100c 	mov	r1, ip
   158b4:	e1a00001 	mov	r0, r1
   158b8:	e3a01000 	mov	r1, #0
   158bc:	e1a05181 	lsl	r5, r1, #3
   158c0:	e1855ea0 	orr	r5, r5, r0, lsr #29
   158c4:	e1a04180 	lsl	r4, r0, #3
   158c8:	e1a0100c 	mov	r1, ip
   158cc:	e1a00001 	mov	r0, r1
   158d0:	e3a01000 	mov	r1, #0
   158d4:	e1a03181 	lsl	r3, r1, #3
   158d8:	e1833ea0 	orr	r3, r3, r0, lsr #29
   158dc:	e1a02180 	lsl	r2, r0, #3
   158e0:	e1a0300c 	mov	r3, ip
   158e4:	e2833007 	add	r3, r3, #7
   158e8:	e1a031a3 	lsr	r3, r3, #3
   158ec:	e1a03183 	lsl	r3, r3, #3
   158f0:	e04dd003 	sub	sp, sp, r3
   158f4:	e1a0300d 	mov	r3, sp
   158f8:	e2833000 	add	r3, r3, #0
   158fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		for(int i = 0; i < depth; i++){
   15900:	e3a03000 	mov	r3, #0
   15904:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   15908:	ea000007 	b	1592c <__cyg_profile_func_exit+0xc8>
			m[i] = ' ';
   1590c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   15910:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15914:	e0823003 	add	r3, r2, r3
   15918:	e3a02020 	mov	r2, #32
   1591c:	e5c32000 	strb	r2, [r3]

__attribute__((no_instrument_function))
void __cyg_profile_func_exit  (void *this_fn, void *call_site){
	if(loaded == 1){
		char m[depth + 1];
		for(int i = 0; i < depth; i++){
   15920:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15924:	e2833001 	add	r3, r3, #1
   15928:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   1592c:	e30b3078 	movw	r3, #45176	; 0xb078
   15930:	e3403003 	movt	r3, #3
   15934:	e5933000 	ldr	r3, [r3]
   15938:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1593c:	e1520003 	cmp	r2, r3
   15940:	bafffff1 	blt	1590c <__cyg_profile_func_exit+0xa8>
			m[i] = ' ';
		}
		m[depth + 0] = 0; //null termination
   15944:	e30b3078 	movw	r3, #45176	; 0xb078
   15948:	e3403003 	movt	r3, #3
   1594c:	e5933000 	ldr	r3, [r3]
   15950:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   15954:	e3a01000 	mov	r1, #0
   15958:	e7c21003 	strb	r1, [r2, r3]
		m[0] = '_';
   1595c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   15960:	e3a0205f 	mov	r2, #95	; 0x5f
   15964:	e5c32000 	strb	r2, [r3]
		printHex(m, this_fn, 0xFFFF0000); //red for return
   15968:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   1596c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   15970:	e1a00002 	mov	r0, r2
   15974:	e1a01003 	mov	r1, r3
   15978:	e3a02000 	mov	r2, #0
   1597c:	e34f2fff 	movt	r2, #65535	; 0xffff
   15980:	eb000169 	bl	15f2c <printHex>
		depth--;
   15984:	e30b3078 	movw	r3, #45176	; 0xb078
   15988:	e3403003 	movt	r3, #3
   1598c:	e5933000 	ldr	r3, [r3]
   15990:	e2432001 	sub	r2, r3, #1
   15994:	e30b3078 	movw	r3, #45176	; 0xb078
   15998:	e3403003 	movt	r3, #3
   1599c:	e5832000 	str	r2, [r3]
   159a0:	e1a0d006 	mov	sp, r6
	}
   159a4:	e24bd010 	sub	sp, fp, #16
   159a8:	e8bd8870 	pop	{r4, r5, r6, fp, pc}
   159ac:	00000000 	andeq	r0, r0, r0

000159b0 <initFB>:

//mailbuffer must be 16 byte aligned for GPU
unsigned int mailbuffer[22] __attribute__((aligned (16)));
unsigned int* framebuffer;

void initFB(){
   159b0:	e92d4818 	push	{r3, r4, fp, lr}
   159b4:	e28db00c 	add	fp, sp, #12
   159b8:	e1a0400e 	mov	r4, lr
   159bc:	e1a03004 	mov	r3, r4
   159c0:	e30509b0 	movw	r0, #22960	; 0x59b0
   159c4:	e3400001 	movt	r0, #1
   159c8:	e1a01003 	mov	r1, r3
   159cc:	ebffff52 	bl	1571c <__cyg_profile_func_enter>
		}

		attempts++;
	}*/

	SCREEN_WIDTH = 1920;//mailbuffer[5];
   159d0:	e30b30e0 	movw	r3, #45280	; 0xb0e0
   159d4:	e3403003 	movt	r3, #3
   159d8:	e3a02d1e 	mov	r2, #1920	; 0x780
   159dc:	e5832000 	str	r2, [r3]
	SCREEN_HEIGHT = 1080;//mailbuffer[6];
   159e0:	e30b30e8 	movw	r3, #45288	; 0xb0e8
   159e4:	e3403003 	movt	r3, #3
   159e8:	e3002438 	movw	r2, #1080	; 0x438
   159ec:	e5832000 	str	r2, [r3]

	mailbuffer[0] = 22 * 4;		//mail buffer size
   159f0:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   159f4:	e3403003 	movt	r3, #3
   159f8:	e3a02058 	mov	r2, #88	; 0x58
   159fc:	e5832000 	str	r2, [r3]
	mailbuffer[1] = 0;		//response code
   15a00:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15a04:	e3403003 	movt	r3, #3
   15a08:	e3a02000 	mov	r2, #0
   15a0c:	e5832004 	str	r2, [r3, #4]

	mailbuffer[2] = 0x00048003;	//set phys display
   15a10:	e30b20f0 	movw	r2, #45296	; 0xb0f0
   15a14:	e3402003 	movt	r2, #3
   15a18:	e3083003 	movw	r3, #32771	; 0x8003
   15a1c:	e3403004 	movt	r3, #4
   15a20:	e5823008 	str	r3, [r2, #8]
	mailbuffer[3] = 8;		//value buffer size
   15a24:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15a28:	e3403003 	movt	r3, #3
   15a2c:	e3a02008 	mov	r2, #8
   15a30:	e583200c 	str	r2, [r3, #12]
	mailbuffer[4] = 8;		//Req. + value length (bytes)
   15a34:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15a38:	e3403003 	movt	r3, #3
   15a3c:	e3a02008 	mov	r2, #8
   15a40:	e5832010 	str	r2, [r3, #16]
	mailbuffer[5] = SCREEN_WIDTH;	//screen x
   15a44:	e30b30e0 	movw	r3, #45280	; 0xb0e0
   15a48:	e3403003 	movt	r3, #3
   15a4c:	e5933000 	ldr	r3, [r3]
   15a50:	e1a02003 	mov	r2, r3
   15a54:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15a58:	e3403003 	movt	r3, #3
   15a5c:	e5832014 	str	r2, [r3, #20]
	mailbuffer[6] = SCREEN_HEIGHT;	//screen y
   15a60:	e30b30e8 	movw	r3, #45288	; 0xb0e8
   15a64:	e3403003 	movt	r3, #3
   15a68:	e5933000 	ldr	r3, [r3]
   15a6c:	e1a02003 	mov	r2, r3
   15a70:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15a74:	e3403003 	movt	r3, #3
   15a78:	e5832018 	str	r2, [r3, #24]

	mailbuffer[7] = 0x00048004;	//set virtual display
   15a7c:	e30b20f0 	movw	r2, #45296	; 0xb0f0
   15a80:	e3402003 	movt	r2, #3
   15a84:	e3083004 	movw	r3, #32772	; 0x8004
   15a88:	e3403004 	movt	r3, #4
   15a8c:	e582301c 	str	r3, [r2, #28]
	mailbuffer[8] = 8;		//value buffer size
   15a90:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15a94:	e3403003 	movt	r3, #3
   15a98:	e3a02008 	mov	r2, #8
   15a9c:	e5832020 	str	r2, [r3, #32]
	mailbuffer[9] = 8;		//Req. + value length (bytes)
   15aa0:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15aa4:	e3403003 	movt	r3, #3
   15aa8:	e3a02008 	mov	r2, #8
   15aac:	e5832024 	str	r2, [r3, #36]	; 0x24
	mailbuffer[10] = SCREEN_WIDTH;	//screen x
   15ab0:	e30b30e0 	movw	r3, #45280	; 0xb0e0
   15ab4:	e3403003 	movt	r3, #3
   15ab8:	e5933000 	ldr	r3, [r3]
   15abc:	e1a02003 	mov	r2, r3
   15ac0:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15ac4:	e3403003 	movt	r3, #3
   15ac8:	e5832028 	str	r2, [r3, #40]	; 0x28
	mailbuffer[11] = SCREEN_HEIGHT; //screen y
   15acc:	e30b30e8 	movw	r3, #45288	; 0xb0e8
   15ad0:	e3403003 	movt	r3, #3
   15ad4:	e5933000 	ldr	r3, [r3]
   15ad8:	e1a02003 	mov	r2, r3
   15adc:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15ae0:	e3403003 	movt	r3, #3
   15ae4:	e583202c 	str	r2, [r3, #44]	; 0x2c

	mailbuffer[12] = 0x0048005;	//set depth
   15ae8:	e30b20f0 	movw	r2, #45296	; 0xb0f0
   15aec:	e3402003 	movt	r2, #3
   15af0:	e3083005 	movw	r3, #32773	; 0x8005
   15af4:	e3403004 	movt	r3, #4
   15af8:	e5823030 	str	r3, [r2, #48]	; 0x30
	mailbuffer[13] = 4;		//value buffer size
   15afc:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15b00:	e3403003 	movt	r3, #3
   15b04:	e3a02004 	mov	r2, #4
   15b08:	e5832034 	str	r2, [r3, #52]	; 0x34
	mailbuffer[14] = 4;		//Req. + value length (bytes)
   15b0c:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15b10:	e3403003 	movt	r3, #3
   15b14:	e3a02004 	mov	r2, #4
   15b18:	e5832038 	str	r2, [r3, #56]	; 0x38
	mailbuffer[15] = 32;		//bits per pixel
   15b1c:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15b20:	e3403003 	movt	r3, #3
   15b24:	e3a02020 	mov	r2, #32
   15b28:	e583203c 	str	r2, [r3, #60]	; 0x3c
	//pixel format is ARGB, 0xFF0000FF is blue at full alpha transparency

	mailbuffer[16] = 0x00040001;	//allocate buffer
   15b2c:	e30b20f0 	movw	r2, #45296	; 0xb0f0
   15b30:	e3402003 	movt	r2, #3
   15b34:	e3a03001 	mov	r3, #1
   15b38:	e3403004 	movt	r3, #4
   15b3c:	e5823040 	str	r3, [r2, #64]	; 0x40
	mailbuffer[17] = 8;		//value buffer size
   15b40:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15b44:	e3403003 	movt	r3, #3
   15b48:	e3a02008 	mov	r2, #8
   15b4c:	e5832044 	str	r2, [r3, #68]	; 0x44
	mailbuffer[18] = 4;		//Req. + value length (bytes)
   15b50:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15b54:	e3403003 	movt	r3, #3
   15b58:	e3a02004 	mov	r2, #4
   15b5c:	e5832048 	str	r2, [r3, #72]	; 0x48
	mailbuffer[19] = 0;		//framebuffer address
   15b60:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15b64:	e3403003 	movt	r3, #3
   15b68:	e3a02000 	mov	r2, #0
   15b6c:	e583204c 	str	r2, [r3, #76]	; 0x4c
	mailbuffer[20] = 0;		//framebuffer size
   15b70:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15b74:	e3403003 	movt	r3, #3
   15b78:	e3a02000 	mov	r2, #0
   15b7c:	e5832050 	str	r2, [r3, #80]	; 0x50

	mailbuffer[21] = 0;		//terminate buffer
   15b80:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15b84:	e3403003 	movt	r3, #3
   15b88:	e3a02000 	mov	r2, #0
   15b8c:	e5832054 	str	r2, [r3, #84]	; 0x54

	//spam mail the GPU until the response code is ok
	while(mailbuffer[1] != 0x80000000){
   15b90:	ea000006 	b	15bb0 <initFB+0x200>
		mailboxWrite((int)mailbuffer, 8);
   15b94:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15b98:	e3403003 	movt	r3, #3
   15b9c:	e1a00003 	mov	r0, r3
   15ba0:	e3a01008 	mov	r1, #8
   15ba4:	ebfffe88 	bl	155cc <mailboxWrite>
		mailboxRead(8);
   15ba8:	e3a00008 	mov	r0, #8
   15bac:	ebfffead 	bl	15668 <mailboxRead>
	mailbuffer[20] = 0;		//framebuffer size

	mailbuffer[21] = 0;		//terminate buffer

	//spam mail the GPU until the response code is ok
	while(mailbuffer[1] != 0x80000000){
   15bb0:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15bb4:	e3403003 	movt	r3, #3
   15bb8:	e5933004 	ldr	r3, [r3, #4]
   15bbc:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   15bc0:	1afffff3 	bne	15b94 <initFB+0x1e4>
		mailboxRead(8);
	}

	//https://github.com/raspberrypi/firmware/wiki/Accessing-mailboxes
	//shift FB by 0x40000000 if L2 cache is enabled, or 0xC0000000 if disabled
	framebuffer = (unsigned int*)(mailbuffer[19] - 0xC0000000);
   15bc4:	e30b30f0 	movw	r3, #45296	; 0xb0f0
   15bc8:	e3403003 	movt	r3, #3
   15bcc:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   15bd0:	e2833101 	add	r3, r3, #1073741824	; 0x40000000
   15bd4:	e1a02003 	mov	r2, r3
   15bd8:	e30b30ec 	movw	r3, #45292	; 0xb0ec
   15bdc:	e3403003 	movt	r3, #3
   15be0:	e5832000 	str	r2, [r3]
   15be4:	e1a03004 	mov	r3, r4
   15be8:	e30509b0 	movw	r0, #22960	; 0x59b0
   15bec:	e3400001 	movt	r0, #1
   15bf0:	e1a01003 	mov	r1, r3
   15bf4:	ebffff1a 	bl	15864 <__cyg_profile_func_exit>
}
   15bf8:	e8bd8818 	pop	{r3, r4, fp, pc}

00015bfc <drawPixel>:

__attribute__((no_instrument_function))
void drawPixel(unsigned int x, unsigned int y, int colour) {
   15bfc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   15c00:	e28db000 	add	fp, sp, #0
   15c04:	e24dd014 	sub	sp, sp, #20
   15c08:	e50b0008 	str	r0, [fp, #-8]
   15c0c:	e50b100c 	str	r1, [fp, #-12]
   15c10:	e50b2010 	str	r2, [fp, #-16]
    framebuffer[y * SCREEN_WIDTH + x] = colour;
   15c14:	e30b30ec 	movw	r3, #45292	; 0xb0ec
   15c18:	e3403003 	movt	r3, #3
   15c1c:	e5932000 	ldr	r2, [r3]
   15c20:	e30b30e0 	movw	r3, #45280	; 0xb0e0
   15c24:	e3403003 	movt	r3, #3
   15c28:	e5933000 	ldr	r3, [r3]
   15c2c:	e1a01003 	mov	r1, r3
   15c30:	e51b300c 	ldr	r3, [fp, #-12]
   15c34:	e0010193 	mul	r1, r3, r1
   15c38:	e51b3008 	ldr	r3, [fp, #-8]
   15c3c:	e0813003 	add	r3, r1, r3
   15c40:	e1a03103 	lsl	r3, r3, #2
   15c44:	e0823003 	add	r3, r2, r3
   15c48:	e51b2010 	ldr	r2, [fp, #-16]
   15c4c:	e5832000 	str	r2, [r3]
}
   15c50:	e24bd000 	sub	sp, fp, #0
   15c54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   15c58:	e12fff1e 	bx	lr

00015c5c <drawRect>:

__attribute__((no_instrument_function))
void drawRect(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, int colour) {
   15c5c:	e92d4800 	push	{fp, lr}
   15c60:	e28db004 	add	fp, sp, #4
   15c64:	e24dd018 	sub	sp, sp, #24
   15c68:	e50b0010 	str	r0, [fp, #-16]
   15c6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   15c70:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   15c74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    unsigned int i, j = 0;
   15c78:	e3a03000 	mov	r3, #0
   15c7c:	e50b300c 	str	r3, [fp, #-12]
    for(i = x1; i < x2; i++) {
   15c80:	e51b3010 	ldr	r3, [fp, #-16]
   15c84:	e50b3008 	str	r3, [fp, #-8]
   15c88:	ea000010 	b	15cd0 <drawRect+0x74>
        for(j = y1; j < y2; j++) {
   15c8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15c90:	e50b300c 	str	r3, [fp, #-12]
   15c94:	ea000006 	b	15cb4 <drawRect+0x58>
            drawPixel(i, j, colour);
   15c98:	e51b0008 	ldr	r0, [fp, #-8]
   15c9c:	e51b100c 	ldr	r1, [fp, #-12]
   15ca0:	e59b2004 	ldr	r2, [fp, #4]
   15ca4:	ebffffd4 	bl	15bfc <drawPixel>

__attribute__((no_instrument_function))
void drawRect(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, int colour) {
    unsigned int i, j = 0;
    for(i = x1; i < x2; i++) {
        for(j = y1; j < y2; j++) {
   15ca8:	e51b300c 	ldr	r3, [fp, #-12]
   15cac:	e2833001 	add	r3, r3, #1
   15cb0:	e50b300c 	str	r3, [fp, #-12]
   15cb4:	e51b200c 	ldr	r2, [fp, #-12]
   15cb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   15cbc:	e1520003 	cmp	r2, r3
   15cc0:	3afffff4 	bcc	15c98 <drawRect+0x3c>
}

__attribute__((no_instrument_function))
void drawRect(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, int colour) {
    unsigned int i, j = 0;
    for(i = x1; i < x2; i++) {
   15cc4:	e51b3008 	ldr	r3, [fp, #-8]
   15cc8:	e2833001 	add	r3, r3, #1
   15ccc:	e50b3008 	str	r3, [fp, #-8]
   15cd0:	e51b2008 	ldr	r2, [fp, #-8]
   15cd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cd8:	e1520003 	cmp	r2, r3
   15cdc:	3affffea 	bcc	15c8c <drawRect+0x30>
        for(j = y1; j < y2; j++) {
            drawPixel(i, j, colour);
        }
    }
}
   15ce0:	e24bd004 	sub	sp, fp, #4
   15ce4:	e8bd8800 	pop	{fp, pc}

00015ce8 <drawChar>:
//	1				1	0
//	1	1	1	1	1	0
//	1				1	0
//	1				1	0
__attribute__((no_instrument_function))
void drawChar(unsigned char c, int x, int y, int colour){
   15ce8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   15cec:	e28db000 	add	fp, sp, #0
   15cf0:	e24dd01c 	sub	sp, sp, #28
   15cf4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   15cf8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   15cfc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   15d00:	e1a03000 	mov	r3, r0
   15d04:	e54b300d 	strb	r3, [fp, #-13]
	int i, j;

	//convert the character to an index
	c = c & 0x7F;
   15d08:	e55b300d 	ldrb	r3, [fp, #-13]
   15d0c:	e203307f 	and	r3, r3, #127	; 0x7f
   15d10:	e54b300d 	strb	r3, [fp, #-13]
	if (c < ' ') {
   15d14:	e55b300d 	ldrb	r3, [fp, #-13]
   15d18:	e353001f 	cmp	r3, #31
   15d1c:	8a000002 	bhi	15d2c <drawChar+0x44>
		c = 0;
   15d20:	e3a03000 	mov	r3, #0
   15d24:	e54b300d 	strb	r3, [fp, #-13]
   15d28:	ea000002 	b	15d38 <drawChar+0x50>
	} else {
		c -= ' ';
   15d2c:	e55b300d 	ldrb	r3, [fp, #-13]
   15d30:	e2433020 	sub	r3, r3, #32
   15d34:	e54b300d 	strb	r3, [fp, #-13]
	}

	//draw pixels of the character
	for (j = 0; j < CHAR_WIDTH; j++) {
   15d38:	e3a03000 	mov	r3, #0
   15d3c:	e50b300c 	str	r3, [fp, #-12]
   15d40:	ea00002c 	b	15df8 <drawChar+0x110>
		for (i = 0; i < CHAR_HEIGHT; i++) {
   15d44:	e3a03000 	mov	r3, #0
   15d48:	e50b3008 	str	r3, [fp, #-8]
   15d4c:	ea000023 	b	15de0 <drawChar+0xf8>
			//unsigned char temp = font[c][j];
			if (font[c][j] & (1<<i)) {
   15d50:	e55b200d 	ldrb	r2, [fp, #-13]
   15d54:	e30d3bdc 	movw	r3, #56284	; 0xdbdc
   15d58:	e3403002 	movt	r3, #2
   15d5c:	e3a01006 	mov	r1, #6
   15d60:	e0010291 	mul	r1, r1, r2
   15d64:	e51b200c 	ldr	r2, [fp, #-12]
   15d68:	e0812002 	add	r2, r1, r2
   15d6c:	e0833002 	add	r3, r3, r2
   15d70:	e5d33000 	ldrb	r3, [r3]
   15d74:	e1a02003 	mov	r2, r3
   15d78:	e51b3008 	ldr	r3, [fp, #-8]
   15d7c:	e1a03352 	asr	r3, r2, r3
   15d80:	e2033001 	and	r3, r3, #1
   15d84:	e3530000 	cmp	r3, #0
   15d88:	0a000011 	beq	15dd4 <drawChar+0xec>
				framebuffer[(y + i) * SCREEN_WIDTH + (x + j)] = colour;
   15d8c:	e30b30ec 	movw	r3, #45292	; 0xb0ec
   15d90:	e3403003 	movt	r3, #3
   15d94:	e5932000 	ldr	r2, [r3]
   15d98:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   15d9c:	e51b3008 	ldr	r3, [fp, #-8]
   15da0:	e0811003 	add	r1, r1, r3
   15da4:	e30b30e0 	movw	r3, #45280	; 0xb0e0
   15da8:	e3403003 	movt	r3, #3
   15dac:	e5933000 	ldr	r3, [r3]
   15db0:	e0010193 	mul	r1, r3, r1
   15db4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   15db8:	e51b300c 	ldr	r3, [fp, #-12]
   15dbc:	e0803003 	add	r3, r0, r3
   15dc0:	e0813003 	add	r3, r1, r3
   15dc4:	e1a03103 	lsl	r3, r3, #2
   15dc8:	e0823003 	add	r3, r2, r3
   15dcc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   15dd0:	e5832000 	str	r2, [r3]
		c -= ' ';
	}

	//draw pixels of the character
	for (j = 0; j < CHAR_WIDTH; j++) {
		for (i = 0; i < CHAR_HEIGHT; i++) {
   15dd4:	e51b3008 	ldr	r3, [fp, #-8]
   15dd8:	e2833001 	add	r3, r3, #1
   15ddc:	e50b3008 	str	r3, [fp, #-8]
   15de0:	e51b3008 	ldr	r3, [fp, #-8]
   15de4:	e3530007 	cmp	r3, #7
   15de8:	daffffd8 	ble	15d50 <drawChar+0x68>
	} else {
		c -= ' ';
	}

	//draw pixels of the character
	for (j = 0; j < CHAR_WIDTH; j++) {
   15dec:	e51b300c 	ldr	r3, [fp, #-12]
   15df0:	e2833001 	add	r3, r3, #1
   15df4:	e50b300c 	str	r3, [fp, #-12]
   15df8:	e51b300c 	ldr	r3, [fp, #-12]
   15dfc:	e3530005 	cmp	r3, #5
   15e00:	daffffcf 	ble	15d44 <drawChar+0x5c>
			if (font[c][j] & (1<<i)) {
				framebuffer[(y + i) * SCREEN_WIDTH + (x + j)] = colour;
			}
		}
	}
}
   15e04:	e24bd000 	sub	sp, fp, #0
   15e08:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   15e0c:	e12fff1e 	bx	lr

00015e10 <drawString>:

__attribute__((no_instrument_function))
void drawString(const char* str, int x, int y, int colour){
   15e10:	e92d4800 	push	{fp, lr}
   15e14:	e28db004 	add	fp, sp, #4
   15e18:	e24dd010 	sub	sp, sp, #16
   15e1c:	e50b0008 	str	r0, [fp, #-8]
   15e20:	e50b100c 	str	r1, [fp, #-12]
   15e24:	e50b2010 	str	r2, [fp, #-16]
   15e28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	while (*str) {
   15e2c:	ea00000c 	b	15e64 <drawString+0x54>
		drawChar(*str++, x, y, colour);
   15e30:	e51b3008 	ldr	r3, [fp, #-8]
   15e34:	e2832001 	add	r2, r3, #1
   15e38:	e50b2008 	str	r2, [fp, #-8]
   15e3c:	e5d33000 	ldrb	r3, [r3]
   15e40:	e6ef3073 	uxtb	r3, r3
   15e44:	e1a00003 	mov	r0, r3
   15e48:	e51b100c 	ldr	r1, [fp, #-12]
   15e4c:	e51b2010 	ldr	r2, [fp, #-16]
   15e50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15e54:	ebffffa3 	bl	15ce8 <drawChar>
		x += CHAR_WIDTH; 
   15e58:	e51b300c 	ldr	r3, [fp, #-12]
   15e5c:	e2833006 	add	r3, r3, #6
   15e60:	e50b300c 	str	r3, [fp, #-12]
	}
}

__attribute__((no_instrument_function))
void drawString(const char* str, int x, int y, int colour){
	while (*str) {
   15e64:	e51b3008 	ldr	r3, [fp, #-8]
   15e68:	e5d33000 	ldrb	r3, [r3]
   15e6c:	e3530000 	cmp	r3, #0
   15e70:	1affffee 	bne	15e30 <drawString+0x20>
		drawChar(*str++, x, y, colour);
		x += CHAR_WIDTH; 
	}
}
   15e74:	e24bd004 	sub	sp, fp, #4
   15e78:	e8bd8800 	pop	{fp, pc}

00015e7c <println>:

int position_x = 0;
int position_y = 0;
__attribute__((no_instrument_function))
void println(const char* message, int colour){
   15e7c:	e92d4800 	push	{fp, lr}
   15e80:	e28db004 	add	fp, sp, #4
   15e84:	e24dd008 	sub	sp, sp, #8
   15e88:	e50b0008 	str	r0, [fp, #-8]
   15e8c:	e50b100c 	str	r1, [fp, #-12]
	//clear the line and draw the string
	//drawRect(0, position, 420, position + 8, 0x00000000);
	drawString(message, position_x, position_y, colour);
   15e90:	e30b3080 	movw	r3, #45184	; 0xb080
   15e94:	e3403003 	movt	r3, #3
   15e98:	e5932000 	ldr	r2, [r3]
   15e9c:	e30b3084 	movw	r3, #45188	; 0xb084
   15ea0:	e3403003 	movt	r3, #3
   15ea4:	e5933000 	ldr	r3, [r3]
   15ea8:	e51b0008 	ldr	r0, [fp, #-8]
   15eac:	e1a01002 	mov	r1, r2
   15eb0:	e1a02003 	mov	r2, r3
   15eb4:	e51b300c 	ldr	r3, [fp, #-12]
   15eb8:	ebffffd4 	bl	15e10 <drawString>
	position_y = position_y + CHAR_HEIGHT + 1;
   15ebc:	e30b3084 	movw	r3, #45188	; 0xb084
   15ec0:	e3403003 	movt	r3, #3
   15ec4:	e5933000 	ldr	r3, [r3]
   15ec8:	e2832009 	add	r2, r3, #9
   15ecc:	e30b3084 	movw	r3, #45188	; 0xb084
   15ed0:	e3403003 	movt	r3, #3
   15ed4:	e5832000 	str	r2, [r3]
	if(position_y > SCREEN_HEIGHT){
   15ed8:	e30b3084 	movw	r3, #45188	; 0xb084
   15edc:	e3403003 	movt	r3, #3
   15ee0:	e5932000 	ldr	r2, [r3]
   15ee4:	e30b30e8 	movw	r3, #45288	; 0xb0e8
   15ee8:	e3403003 	movt	r3, #3
   15eec:	e5933000 	ldr	r3, [r3]
   15ef0:	e1520003 	cmp	r2, r3
   15ef4:	da00000a 	ble	15f24 <println+0xa8>
		position_y = 0;
   15ef8:	e30b3084 	movw	r3, #45188	; 0xb084
   15efc:	e3403003 	movt	r3, #3
   15f00:	e3a02000 	mov	r2, #0
   15f04:	e5832000 	str	r2, [r3]
		position_x += 142;
   15f08:	e30b3080 	movw	r3, #45184	; 0xb080
   15f0c:	e3403003 	movt	r3, #3
   15f10:	e5933000 	ldr	r3, [r3]
   15f14:	e283208e 	add	r2, r3, #142	; 0x8e
   15f18:	e30b3080 	movw	r3, #45184	; 0xb080
   15f1c:	e3403003 	movt	r3, #3
   15f20:	e5832000 	str	r2, [r3]
	}
}
   15f24:	e24bd004 	sub	sp, fp, #4
   15f28:	e8bd8800 	pop	{fp, pc}

00015f2c <printHex>:
		"pop	{r14}		\n"							\
		"add 	sp, sp, #4	\n"	/*skip r15 (pc)*/		\
	);

__attribute__((no_instrument_function))
void printHex(const char* message, int hexi, int colour){
   15f2c:	e92d4800 	push	{fp, lr}
   15f30:	e28db004 	add	fp, sp, #4
   15f34:	e24dd040 	sub	sp, sp, #64	; 0x40
   15f38:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   15f3c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
   15f40:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
	char m[42];
	int i = 0;
   15f44:	e3a03000 	mov	r3, #0
   15f48:	e50b3008 	str	r3, [fp, #-8]
	while (*message){
   15f4c:	ea00000b 	b	15f80 <printHex+0x54>
		m[i] = *message++;
   15f50:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   15f54:	e2832001 	add	r2, r3, #1
   15f58:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   15f5c:	e5d31000 	ldrb	r1, [r3]
   15f60:	e24b2034 	sub	r2, fp, #52	; 0x34
   15f64:	e51b3008 	ldr	r3, [fp, #-8]
   15f68:	e0823003 	add	r3, r2, r3
   15f6c:	e1a02001 	mov	r2, r1
   15f70:	e5c32000 	strb	r2, [r3]
		i++;
   15f74:	e51b3008 	ldr	r3, [fp, #-8]
   15f78:	e2833001 	add	r3, r3, #1
   15f7c:	e50b3008 	str	r3, [fp, #-8]

__attribute__((no_instrument_function))
void printHex(const char* message, int hexi, int colour){
	char m[42];
	int i = 0;
	while (*message){
   15f80:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   15f84:	e5d33000 	ldrb	r3, [r3]
   15f88:	e3530000 	cmp	r3, #0
   15f8c:	1affffef 	bne	15f50 <printHex+0x24>
		m[i] = *message++;
		i++;
	}
	//overwrite the null terminator
	m[i + 0] = hex[(hexi >> 28)&0xF];
   15f90:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   15f94:	e1a03e23 	lsr	r3, r3, #28
   15f98:	e1a02003 	mov	r2, r3
   15f9c:	e3003b5c 	movw	r3, #2908	; 0xb5c
   15fa0:	e3403003 	movt	r3, #3
   15fa4:	e7d31002 	ldrb	r1, [r3, r2]
   15fa8:	e24b2034 	sub	r2, fp, #52	; 0x34
   15fac:	e51b3008 	ldr	r3, [fp, #-8]
   15fb0:	e0823003 	add	r3, r2, r3
   15fb4:	e1a02001 	mov	r2, r1
   15fb8:	e5c32000 	strb	r2, [r3]
	m[i + 1] = hex[(hexi >> 24)&0xF];
   15fbc:	e51b3008 	ldr	r3, [fp, #-8]
   15fc0:	e2832001 	add	r2, r3, #1
   15fc4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   15fc8:	e1a03c43 	asr	r3, r3, #24
   15fcc:	e203100f 	and	r1, r3, #15
   15fd0:	e3003b5c 	movw	r3, #2908	; 0xb5c
   15fd4:	e3403003 	movt	r3, #3
   15fd8:	e7d31001 	ldrb	r1, [r3, r1]
   15fdc:	e24b3004 	sub	r3, fp, #4
   15fe0:	e0833002 	add	r3, r3, r2
   15fe4:	e1a02001 	mov	r2, r1
   15fe8:	e5432030 	strb	r2, [r3, #-48]	; 0xffffffd0
	m[i + 2] = hex[(hexi >> 20)&0xF];
   15fec:	e51b3008 	ldr	r3, [fp, #-8]
   15ff0:	e2832002 	add	r2, r3, #2
   15ff4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   15ff8:	e1a03a43 	asr	r3, r3, #20
   15ffc:	e203100f 	and	r1, r3, #15
   16000:	e3003b5c 	movw	r3, #2908	; 0xb5c
   16004:	e3403003 	movt	r3, #3
   16008:	e7d31001 	ldrb	r1, [r3, r1]
   1600c:	e24b3004 	sub	r3, fp, #4
   16010:	e0833002 	add	r3, r3, r2
   16014:	e1a02001 	mov	r2, r1
   16018:	e5432030 	strb	r2, [r3, #-48]	; 0xffffffd0
	m[i + 3] = hex[(hexi >> 16)&0xF];
   1601c:	e51b3008 	ldr	r3, [fp, #-8]
   16020:	e2832003 	add	r2, r3, #3
   16024:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   16028:	e1a03843 	asr	r3, r3, #16
   1602c:	e203100f 	and	r1, r3, #15
   16030:	e3003b5c 	movw	r3, #2908	; 0xb5c
   16034:	e3403003 	movt	r3, #3
   16038:	e7d31001 	ldrb	r1, [r3, r1]
   1603c:	e24b3004 	sub	r3, fp, #4
   16040:	e0833002 	add	r3, r3, r2
   16044:	e1a02001 	mov	r2, r1
   16048:	e5432030 	strb	r2, [r3, #-48]	; 0xffffffd0
	m[i + 4] = hex[(hexi >> 12)&0xF];
   1604c:	e51b3008 	ldr	r3, [fp, #-8]
   16050:	e2832004 	add	r2, r3, #4
   16054:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   16058:	e1a03643 	asr	r3, r3, #12
   1605c:	e203100f 	and	r1, r3, #15
   16060:	e3003b5c 	movw	r3, #2908	; 0xb5c
   16064:	e3403003 	movt	r3, #3
   16068:	e7d31001 	ldrb	r1, [r3, r1]
   1606c:	e24b3004 	sub	r3, fp, #4
   16070:	e0833002 	add	r3, r3, r2
   16074:	e1a02001 	mov	r2, r1
   16078:	e5432030 	strb	r2, [r3, #-48]	; 0xffffffd0
	m[i + 5] = hex[(hexi >> 8)&0xF];
   1607c:	e51b3008 	ldr	r3, [fp, #-8]
   16080:	e2832005 	add	r2, r3, #5
   16084:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   16088:	e1a03443 	asr	r3, r3, #8
   1608c:	e203100f 	and	r1, r3, #15
   16090:	e3003b5c 	movw	r3, #2908	; 0xb5c
   16094:	e3403003 	movt	r3, #3
   16098:	e7d31001 	ldrb	r1, [r3, r1]
   1609c:	e24b3004 	sub	r3, fp, #4
   160a0:	e0833002 	add	r3, r3, r2
   160a4:	e1a02001 	mov	r2, r1
   160a8:	e5432030 	strb	r2, [r3, #-48]	; 0xffffffd0
	m[i + 6] = hex[(hexi >> 4)&0xF];
   160ac:	e51b3008 	ldr	r3, [fp, #-8]
   160b0:	e2832006 	add	r2, r3, #6
   160b4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   160b8:	e1a03243 	asr	r3, r3, #4
   160bc:	e203100f 	and	r1, r3, #15
   160c0:	e3003b5c 	movw	r3, #2908	; 0xb5c
   160c4:	e3403003 	movt	r3, #3
   160c8:	e7d31001 	ldrb	r1, [r3, r1]
   160cc:	e24b3004 	sub	r3, fp, #4
   160d0:	e0833002 	add	r3, r3, r2
   160d4:	e1a02001 	mov	r2, r1
   160d8:	e5432030 	strb	r2, [r3, #-48]	; 0xffffffd0
	m[i + 7] = hex[(hexi >> 0)&0xF];
   160dc:	e51b3008 	ldr	r3, [fp, #-8]
   160e0:	e2832007 	add	r2, r3, #7
   160e4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   160e8:	e203100f 	and	r1, r3, #15
   160ec:	e3003b5c 	movw	r3, #2908	; 0xb5c
   160f0:	e3403003 	movt	r3, #3
   160f4:	e7d31001 	ldrb	r1, [r3, r1]
   160f8:	e24b3004 	sub	r3, fp, #4
   160fc:	e0833002 	add	r3, r3, r2
   16100:	e1a02001 	mov	r2, r1
   16104:	e5432030 	strb	r2, [r3, #-48]	; 0xffffffd0
	m[i + 8] = 0; //null termination
   16108:	e51b3008 	ldr	r3, [fp, #-8]
   1610c:	e2833008 	add	r3, r3, #8
   16110:	e24b2004 	sub	r2, fp, #4
   16114:	e0823003 	add	r3, r2, r3
   16118:	e3a02000 	mov	r2, #0
   1611c:	e5432030 	strb	r2, [r3, #-48]	; 0xffffffd0
	println(m, colour);
   16120:	e24b3034 	sub	r3, fp, #52	; 0x34
   16124:	e1a00003 	mov	r0, r3
   16128:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
   1612c:	ebffff52 	bl	15e7c <println>
}
   16130:	e24bd004 	sub	sp, fp, #4
   16134:	e8bd8800 	pop	{fp, pc}

00016138 <videotest>:

void videotest(){
   16138:	e92d4810 	push	{r4, fp, lr}
   1613c:	e28db008 	add	fp, sp, #8
   16140:	e24dd00c 	sub	sp, sp, #12
   16144:	e1a0400e 	mov	r4, lr
   16148:	e1a03004 	mov	r3, r4
   1614c:	e3060138 	movw	r0, #24888	; 0x6138
   16150:	e3400001 	movt	r0, #1
   16154:	e1a01003 	mov	r1, r3
   16158:	ebfffd6f 	bl	1571c <__cyg_profile_func_enter>
	//This loop turns on every pixel the screen size allows for.
	//If the shaded area is larger or smaller than your screen, 
	//you have under/over scan issues. Add disable_overscan=1 to your config.txt
	for(int x = 0; x < SCREEN_WIDTH * SCREEN_HEIGHT; x++){
   1615c:	e3a03000 	mov	r3, #0
   16160:	e50b3010 	str	r3, [fp, #-16]
   16164:	ea00000b 	b	16198 <videotest+0x60>
		framebuffer[x] = 0xFF111111;
   16168:	e30b30ec 	movw	r3, #45292	; 0xb0ec
   1616c:	e3403003 	movt	r3, #3
   16170:	e5932000 	ldr	r2, [r3]
   16174:	e51b3010 	ldr	r3, [fp, #-16]
   16178:	e1a03103 	lsl	r3, r3, #2
   1617c:	e0822003 	add	r2, r2, r3
   16180:	e3013111 	movw	r3, #4369	; 0x1111
   16184:	e34f3f11 	movt	r3, #65297	; 0xff11
   16188:	e5823000 	str	r3, [r2]

void videotest(){
	//This loop turns on every pixel the screen size allows for.
	//If the shaded area is larger or smaller than your screen, 
	//you have under/over scan issues. Add disable_overscan=1 to your config.txt
	for(int x = 0; x < SCREEN_WIDTH * SCREEN_HEIGHT; x++){
   1618c:	e51b3010 	ldr	r3, [fp, #-16]
   16190:	e2833001 	add	r3, r3, #1
   16194:	e50b3010 	str	r3, [fp, #-16]
   16198:	e30b30e0 	movw	r3, #45280	; 0xb0e0
   1619c:	e3403003 	movt	r3, #3
   161a0:	e5932000 	ldr	r2, [r3]
   161a4:	e30b30e8 	movw	r3, #45288	; 0xb0e8
   161a8:	e3403003 	movt	r3, #3
   161ac:	e5933000 	ldr	r3, [r3]
   161b0:	e0020293 	mul	r2, r3, r2
   161b4:	e51b3010 	ldr	r3, [fp, #-16]
   161b8:	e1520003 	cmp	r2, r3
   161bc:	caffffe9 	bgt	16168 <videotest+0x30>
		framebuffer[x] = 0xFF111111;
	}

	dumpDebug();
   161c0:	e92dffff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
   161c4:	e59f03ac 	ldr	r0, [pc, #940]	; 16578 <videotest+0x440>
   161c8:	e59d1000 	ldr	r1, [sp]
   161cc:	e5801000 	str	r1, [r0]
   161d0:	e59d1004 	ldr	r1, [sp, #4]
   161d4:	e5801004 	str	r1, [r0, #4]
   161d8:	e59d1008 	ldr	r1, [sp, #8]
   161dc:	e5801008 	str	r1, [r0, #8]
   161e0:	e59d100c 	ldr	r1, [sp, #12]
   161e4:	e580100c 	str	r1, [r0, #12]
   161e8:	e59d1010 	ldr	r1, [sp, #16]
   161ec:	e5801010 	str	r1, [r0, #16]
   161f0:	e59d1014 	ldr	r1, [sp, #20]
   161f4:	e5801014 	str	r1, [r0, #20]
   161f8:	e59d1018 	ldr	r1, [sp, #24]
   161fc:	e5801018 	str	r1, [r0, #24]
   16200:	e59d101c 	ldr	r1, [sp, #28]
   16204:	e580101c 	str	r1, [r0, #28]
   16208:	e59d1020 	ldr	r1, [sp, #32]
   1620c:	e5801020 	str	r1, [r0, #32]
   16210:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   16214:	e5801024 	str	r1, [r0, #36]	; 0x24
   16218:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   1621c:	e5801028 	str	r1, [r0, #40]	; 0x28
   16220:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
   16224:	e580102c 	str	r1, [r0, #44]	; 0x2c
   16228:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1622c:	e5801030 	str	r1, [r0, #48]	; 0x30
   16230:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
   16234:	e5801034 	str	r1, [r0, #52]	; 0x34
   16238:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1623c:	e5801038 	str	r1, [r0, #56]	; 0x38
   16240:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
   16244:	e580103c 	str	r1, [r0, #60]	; 0x3c
   16248:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   1624c:	e3403003 	movt	r3, #3
   16250:	e3a02000 	mov	r2, #0
   16254:	e5832000 	str	r2, [r3]
   16258:	ea00009a 	b	164c8 <videotest+0x390>
   1625c:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   16260:	e3403003 	movt	r3, #3
   16264:	e5932000 	ldr	r2, [r3]
   16268:	e3003b5c 	movw	r3, #2908	; 0xb5c
   1626c:	e3403003 	movt	r3, #3
   16270:	e7d33002 	ldrb	r3, [r3, r2]
   16274:	e6ef2073 	uxtb	r2, r3
   16278:	e3003b6c 	movw	r3, #2924	; 0xb6c
   1627c:	e3403003 	movt	r3, #3
   16280:	e5c32001 	strb	r2, [r3, #1]
   16284:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   16288:	e3403003 	movt	r3, #3
   1628c:	e5932000 	ldr	r2, [r3]
   16290:	e30b3088 	movw	r3, #45192	; 0xb088
   16294:	e3403003 	movt	r3, #3
   16298:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   1629c:	e1a03e23 	lsr	r3, r3, #28
   162a0:	e1a02003 	mov	r2, r3
   162a4:	e3003b5c 	movw	r3, #2908	; 0xb5c
   162a8:	e3403003 	movt	r3, #3
   162ac:	e7d33002 	ldrb	r3, [r3, r2]
   162b0:	e6ef2073 	uxtb	r2, r3
   162b4:	e3003b6c 	movw	r3, #2924	; 0xb6c
   162b8:	e3403003 	movt	r3, #3
   162bc:	e5c32006 	strb	r2, [r3, #6]
   162c0:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   162c4:	e3403003 	movt	r3, #3
   162c8:	e5932000 	ldr	r2, [r3]
   162cc:	e30b3088 	movw	r3, #45192	; 0xb088
   162d0:	e3403003 	movt	r3, #3
   162d4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   162d8:	e1a03c43 	asr	r3, r3, #24
   162dc:	e203200f 	and	r2, r3, #15
   162e0:	e3003b5c 	movw	r3, #2908	; 0xb5c
   162e4:	e3403003 	movt	r3, #3
   162e8:	e7d33002 	ldrb	r3, [r3, r2]
   162ec:	e6ef2073 	uxtb	r2, r3
   162f0:	e3003b6c 	movw	r3, #2924	; 0xb6c
   162f4:	e3403003 	movt	r3, #3
   162f8:	e5c32007 	strb	r2, [r3, #7]
   162fc:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   16300:	e3403003 	movt	r3, #3
   16304:	e5932000 	ldr	r2, [r3]
   16308:	e30b3088 	movw	r3, #45192	; 0xb088
   1630c:	e3403003 	movt	r3, #3
   16310:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   16314:	e1a03a43 	asr	r3, r3, #20
   16318:	e203200f 	and	r2, r3, #15
   1631c:	e3003b5c 	movw	r3, #2908	; 0xb5c
   16320:	e3403003 	movt	r3, #3
   16324:	e7d33002 	ldrb	r3, [r3, r2]
   16328:	e6ef2073 	uxtb	r2, r3
   1632c:	e3003b6c 	movw	r3, #2924	; 0xb6c
   16330:	e3403003 	movt	r3, #3
   16334:	e5c32008 	strb	r2, [r3, #8]
   16338:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   1633c:	e3403003 	movt	r3, #3
   16340:	e5932000 	ldr	r2, [r3]
   16344:	e30b3088 	movw	r3, #45192	; 0xb088
   16348:	e3403003 	movt	r3, #3
   1634c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   16350:	e1a03843 	asr	r3, r3, #16
   16354:	e203200f 	and	r2, r3, #15
   16358:	e3003b5c 	movw	r3, #2908	; 0xb5c
   1635c:	e3403003 	movt	r3, #3
   16360:	e7d33002 	ldrb	r3, [r3, r2]
   16364:	e6ef2073 	uxtb	r2, r3
   16368:	e3003b6c 	movw	r3, #2924	; 0xb6c
   1636c:	e3403003 	movt	r3, #3
   16370:	e5c32009 	strb	r2, [r3, #9]
   16374:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   16378:	e3403003 	movt	r3, #3
   1637c:	e5932000 	ldr	r2, [r3]
   16380:	e30b3088 	movw	r3, #45192	; 0xb088
   16384:	e3403003 	movt	r3, #3
   16388:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   1638c:	e1a03643 	asr	r3, r3, #12
   16390:	e203200f 	and	r2, r3, #15
   16394:	e3003b5c 	movw	r3, #2908	; 0xb5c
   16398:	e3403003 	movt	r3, #3
   1639c:	e7d33002 	ldrb	r3, [r3, r2]
   163a0:	e6ef2073 	uxtb	r2, r3
   163a4:	e3003b6c 	movw	r3, #2924	; 0xb6c
   163a8:	e3403003 	movt	r3, #3
   163ac:	e5c3200a 	strb	r2, [r3, #10]
   163b0:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   163b4:	e3403003 	movt	r3, #3
   163b8:	e5932000 	ldr	r2, [r3]
   163bc:	e30b3088 	movw	r3, #45192	; 0xb088
   163c0:	e3403003 	movt	r3, #3
   163c4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   163c8:	e1a03443 	asr	r3, r3, #8
   163cc:	e203200f 	and	r2, r3, #15
   163d0:	e3003b5c 	movw	r3, #2908	; 0xb5c
   163d4:	e3403003 	movt	r3, #3
   163d8:	e7d33002 	ldrb	r3, [r3, r2]
   163dc:	e6ef2073 	uxtb	r2, r3
   163e0:	e3003b6c 	movw	r3, #2924	; 0xb6c
   163e4:	e3403003 	movt	r3, #3
   163e8:	e5c3200b 	strb	r2, [r3, #11]
   163ec:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   163f0:	e3403003 	movt	r3, #3
   163f4:	e5932000 	ldr	r2, [r3]
   163f8:	e30b3088 	movw	r3, #45192	; 0xb088
   163fc:	e3403003 	movt	r3, #3
   16400:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   16404:	e1a03243 	asr	r3, r3, #4
   16408:	e203200f 	and	r2, r3, #15
   1640c:	e3003b5c 	movw	r3, #2908	; 0xb5c
   16410:	e3403003 	movt	r3, #3
   16414:	e7d33002 	ldrb	r3, [r3, r2]
   16418:	e6ef2073 	uxtb	r2, r3
   1641c:	e3003b6c 	movw	r3, #2924	; 0xb6c
   16420:	e3403003 	movt	r3, #3
   16424:	e5c3200c 	strb	r2, [r3, #12]
   16428:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   1642c:	e3403003 	movt	r3, #3
   16430:	e5932000 	ldr	r2, [r3]
   16434:	e30b3088 	movw	r3, #45192	; 0xb088
   16438:	e3403003 	movt	r3, #3
   1643c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   16440:	e203200f 	and	r2, r3, #15
   16444:	e3003b5c 	movw	r3, #2908	; 0xb5c
   16448:	e3403003 	movt	r3, #3
   1644c:	e7d33002 	ldrb	r3, [r3, r2]
   16450:	e6ef2073 	uxtb	r2, r3
   16454:	e3003b6c 	movw	r3, #2924	; 0xb6c
   16458:	e3403003 	movt	r3, #3
   1645c:	e5c3200d 	strb	r2, [r3, #13]
   16460:	e3003b6c 	movw	r3, #2924	; 0xb6c
   16464:	e3403003 	movt	r3, #3
   16468:	e3a02000 	mov	r2, #0
   1646c:	e5c3200e 	strb	r2, [r3, #14]
   16470:	e30b30e0 	movw	r3, #45280	; 0xb0e0
   16474:	e3403003 	movt	r3, #3
   16478:	e5933000 	ldr	r3, [r3]
   1647c:	e2432064 	sub	r2, r3, #100	; 0x64
   16480:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   16484:	e3403003 	movt	r3, #3
   16488:	e5933000 	ldr	r3, [r3]
   1648c:	e1a03183 	lsl	r3, r3, #3
   16490:	e3000b6c 	movw	r0, #2924	; 0xb6c
   16494:	e3400003 	movt	r0, #3
   16498:	e1a01002 	mov	r1, r2
   1649c:	e1a02003 	mov	r2, r3
   164a0:	e3a03cff 	mov	r3, #65280	; 0xff00
   164a4:	e34f3f00 	movt	r3, #65280	; 0xff00
   164a8:	ebfffe58 	bl	15e10 <drawString>
   164ac:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   164b0:	e3403003 	movt	r3, #3
   164b4:	e5933000 	ldr	r3, [r3]
   164b8:	e2832001 	add	r2, r3, #1
   164bc:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   164c0:	e3403003 	movt	r3, #3
   164c4:	e5832000 	str	r2, [r3]
   164c8:	e30b30e4 	movw	r3, #45284	; 0xb0e4
   164cc:	e3403003 	movt	r3, #3
   164d0:	e5933000 	ldr	r3, [r3]
   164d4:	e353000f 	cmp	r3, #15
   164d8:	daffff5f 	ble	1625c <videotest+0x124>
   164dc:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   164e0:	e28dd004 	add	sp, sp, #4
   164e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   164e8:	e28dd004 	add	sp, sp, #4

	//division crashes the system here but not in other places it seems?
	drawString("Forty-Two", SCREEN_WIDTH / 2 - 4.5 * CHAR_WIDTH, SCREEN_HEIGHT / 2 + CHAR_HEIGHT / 2, 0xFF00FF00);
   164ec:	e30b30e0 	movw	r3, #45280	; 0xb0e0
   164f0:	e3403003 	movt	r3, #3
   164f4:	e5933000 	ldr	r3, [r3]
   164f8:	e1a02fa3 	lsr	r2, r3, #31
   164fc:	e0823003 	add	r3, r2, r3
   16500:	e1a030c3 	asr	r3, r3, #1
   16504:	ee073a90 	vmov	s15, r3
   16508:	eeb87be7 	vcvt.f64.s32	d7, s15
   1650c:	ed9f6b17 	vldr	d6, [pc, #92]	; 16570 <videotest+0x438>
   16510:	ee377b46 	vsub.f64	d7, d7, d6
   16514:	eefd7bc7 	vcvt.s32.f64	s15, d7
   16518:	e30b30e8 	movw	r3, #45288	; 0xb0e8
   1651c:	e3403003 	movt	r3, #3
   16520:	e5933000 	ldr	r3, [r3]
   16524:	e1a02fa3 	lsr	r2, r3, #31
   16528:	e0823003 	add	r3, r2, r3
   1652c:	e1a030c3 	asr	r3, r3, #1
   16530:	e2833004 	add	r3, r3, #4
   16534:	e30d0e1c 	movw	r0, #56860	; 0xde1c
   16538:	e3400002 	movt	r0, #2
   1653c:	ee171a90 	vmov	r1, s15
   16540:	e1a02003 	mov	r2, r3
   16544:	e3a03cff 	mov	r3, #65280	; 0xff00
   16548:	e34f3f00 	movt	r3, #65280	; 0xff00
   1654c:	ebfffe2f 	bl	15e10 <drawString>
   16550:	e1a03004 	mov	r3, r4
   16554:	e3060138 	movw	r0, #24888	; 0x6138
   16558:	e3400001 	movt	r0, #1
   1655c:	e1a01003 	mov	r1, r3
   16560:	ebfffcbf 	bl	15864 <__cyg_profile_func_exit>
}
   16564:	e24bd008 	sub	sp, fp, #8
   16568:	e8bd8810 	pop	{r4, fp, pc}
   1656c:	e320f000 	nop	{0}
   16570:	00000000 	andeq	r0, r0, r0
   16574:	403b0000 	eorsmi	r0, fp, r0
   16578:	0003b088 	andeq	fp, r3, r8, lsl #1
   1657c:	e320f000 	nop	{0}

00016580 <MsDelay>:
//#include <uspienv/logger.h>
//#include <uspienv/debug.h>
//#include <uspienv/util.h>
//#include <uspienv/assert.h>

void MsDelay (unsigned nMilliSeconds){
   16580:	e92d4810 	push	{r4, fp, lr}
   16584:	e28db008 	add	fp, sp, #8
   16588:	e24dd00c 	sub	sp, sp, #12
   1658c:	e1a0400e 	mov	r4, lr
   16590:	e50b0010 	str	r0, [fp, #-16]
   16594:	e1a03004 	mov	r3, r4
   16598:	e3060580 	movw	r0, #25984	; 0x6580
   1659c:	e3400001 	movt	r0, #1
   165a0:	e1a01003 	mov	r1, r3
   165a4:	ebfffc5c 	bl	1571c <__cyg_profile_func_enter>
println("msDelay", 0xFFFFFFFF);
   165a8:	e30d0e28 	movw	r0, #56872	; 0xde28
   165ac:	e3400002 	movt	r0, #2
   165b0:	e3e01000 	mvn	r1, #0
   165b4:	ebfffe30 	bl	15e7c <println>
   165b8:	e1a03004 	mov	r3, r4
   165bc:	e3060580 	movw	r0, #25984	; 0x6580
   165c0:	e3400001 	movt	r0, #1
   165c4:	e1a01003 	mov	r1, r3
   165c8:	ebfffca5 	bl	15864 <__cyg_profile_func_exit>
	//vTaskDelay(nMilliSeconds);//TimerMsDelay (TimerGet (), nMilliSeconds);
}
   165cc:	e24bd008 	sub	sp, fp, #8
   165d0:	e8bd8810 	pop	{r4, fp, pc}

000165d4 <usDelay>:

void usDelay (unsigned nMicroSeconds){
   165d4:	e92d4810 	push	{r4, fp, lr}
   165d8:	e28db008 	add	fp, sp, #8
   165dc:	e24dd00c 	sub	sp, sp, #12
   165e0:	e1a0400e 	mov	r4, lr
   165e4:	e50b0010 	str	r0, [fp, #-16]
   165e8:	e1a03004 	mov	r3, r4
   165ec:	e30605d4 	movw	r0, #26068	; 0x65d4
   165f0:	e3400001 	movt	r0, #1
   165f4:	e1a01003 	mov	r1, r3
   165f8:	ebfffc47 	bl	1571c <__cyg_profile_func_enter>
println("usDelay", 0xFFFFFFFF);
   165fc:	e30d0e30 	movw	r0, #56880	; 0xde30
   16600:	e3400002 	movt	r0, #2
   16604:	e3e01000 	mvn	r1, #0
   16608:	ebfffe1b 	bl	15e7c <println>
   1660c:	e1a03004 	mov	r3, r4
   16610:	e30605d4 	movw	r0, #26068	; 0x65d4
   16614:	e3400001 	movt	r0, #1
   16618:	e1a01003 	mov	r1, r3
   1661c:	ebfffc90 	bl	15864 <__cyg_profile_func_exit>
	//vTaskDelay(1);//TimerusDelay (TimerGet (), nMicroSeconds);
}
   16620:	e24bd008 	sub	sp, fp, #8
   16624:	e8bd8810 	pop	{r4, fp, pc}

00016628 <StartKernelTimer>:

unsigned StartKernelTimer (unsigned nDelay, TKernelTimerHandler *pHandler, void *pParam, void *pContext){
   16628:	e92d4830 	push	{r4, r5, fp, lr}
   1662c:	e28db00c 	add	fp, sp, #12
   16630:	e24dd010 	sub	sp, sp, #16
   16634:	e1a0500e 	mov	r5, lr
   16638:	e50b0010 	str	r0, [fp, #-16]
   1663c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   16640:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   16644:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   16648:	e1a03005 	mov	r3, r5
   1664c:	e3060628 	movw	r0, #26152	; 0x6628
   16650:	e3400001 	movt	r0, #1
   16654:	e1a01003 	mov	r1, r3
   16658:	ebfffc2f 	bl	1571c <__cyg_profile_func_enter>
println("StartKernelTimer", 0xFFFFFFFF);
   1665c:	e30d0e38 	movw	r0, #56888	; 0xde38
   16660:	e3400002 	movt	r0, #2
   16664:	e3e01000 	mvn	r1, #0
   16668:	ebfffe03 	bl	15e7c <println>
	return 1;//TimerStartKernelTimer (TimerGet (), nDelay, pHandler, pParam, pContext);
   1666c:	e3a04001 	mov	r4, #1
   16670:	e1a03005 	mov	r3, r5
   16674:	e3060628 	movw	r0, #26152	; 0x6628
   16678:	e3400001 	movt	r0, #1
   1667c:	e1a01003 	mov	r1, r3
   16680:	ebfffc77 	bl	15864 <__cyg_profile_func_exit>
   16684:	e1a03004 	mov	r3, r4
}
   16688:	e1a00003 	mov	r0, r3
   1668c:	e24bd00c 	sub	sp, fp, #12
   16690:	e8bd8830 	pop	{r4, r5, fp, pc}

00016694 <CancelKernelTimer>:

void CancelKernelTimer (unsigned hTimer){
   16694:	e92d4810 	push	{r4, fp, lr}
   16698:	e28db008 	add	fp, sp, #8
   1669c:	e24dd00c 	sub	sp, sp, #12
   166a0:	e1a0400e 	mov	r4, lr
   166a4:	e50b0010 	str	r0, [fp, #-16]
   166a8:	e1a03004 	mov	r3, r4
   166ac:	e3060694 	movw	r0, #26260	; 0x6694
   166b0:	e3400001 	movt	r0, #1
   166b4:	e1a01003 	mov	r1, r3
   166b8:	ebfffc17 	bl	1571c <__cyg_profile_func_enter>
	println("CancelKernelTimer", 0xFFFFFFFF);//TimerCancelKernelTimer (TimerGet (), hTimer);
   166bc:	e30d0e4c 	movw	r0, #56908	; 0xde4c
   166c0:	e3400002 	movt	r0, #2
   166c4:	e3e01000 	mvn	r1, #0
   166c8:	ebfffdeb 	bl	15e7c <println>
   166cc:	e1a03004 	mov	r3, r4
   166d0:	e3060694 	movw	r0, #26260	; 0x6694
   166d4:	e3400001 	movt	r0, #1
   166d8:	e1a01003 	mov	r1, r3
   166dc:	ebfffc60 	bl	15864 <__cyg_profile_func_exit>
}
   166e0:	e24bd008 	sub	sp, fp, #8
   166e4:	e8bd8810 	pop	{r4, fp, pc}

000166e8 <ConnectInterrupt>:

void ConnectInterrupt (unsigned nIRQ, TInterruptHandler *pfnHandler, void *pParam){
   166e8:	e92d4810 	push	{r4, fp, lr}
   166ec:	e28db008 	add	fp, sp, #8
   166f0:	e24dd014 	sub	sp, sp, #20
   166f4:	e1a0400e 	mov	r4, lr
   166f8:	e50b0010 	str	r0, [fp, #-16]
   166fc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   16700:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   16704:	e1a03004 	mov	r3, r4
   16708:	e30606e8 	movw	r0, #26344	; 0x66e8
   1670c:	e3400001 	movt	r0, #1
   16710:	e1a01003 	mov	r1, r3
   16714:	ebfffc00 	bl	1571c <__cyg_profile_func_enter>
	//InterruptSystemConnectIRQ (InterruptSystemGet (), nIRQ, pHandler, pParam);
	RegisterInterrupt(nIRQ, pfnHandler, pParam);
   16718:	e51b3010 	ldr	r3, [fp, #-16]
   1671c:	e1a00003 	mov	r0, r3
   16720:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   16724:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   16728:	ebfff72a 	bl	143d8 <RegisterInterrupt>
   1672c:	e1a03004 	mov	r3, r4
   16730:	e30606e8 	movw	r0, #26344	; 0x66e8
   16734:	e3400001 	movt	r0, #1
   16738:	e1a01003 	mov	r1, r3
   1673c:	ebfffc48 	bl	15864 <__cyg_profile_func_exit>
}
   16740:	e24bd008 	sub	sp, fp, #8
   16744:	e8bd8810 	pop	{r4, fp, pc}

00016748 <SetPowerStateOn>:

int SetPowerStateOn (unsigned nDeviceId){
   16748:	e92d4830 	push	{r4, r5, fp, lr}
   1674c:	e28db00c 	add	fp, sp, #12
   16750:	e24dd008 	sub	sp, sp, #8
   16754:	e1a0500e 	mov	r5, lr
   16758:	e50b0010 	str	r0, [fp, #-16]
   1675c:	e24dd030 	sub	sp, sp, #48	; 0x30
   16760:	e1a0300d 	mov	r3, sp
   16764:	e283300f 	add	r3, r3, #15
   16768:	e1a03223 	lsr	r3, r3, #4
   1676c:	e1a04203 	lsl	r4, r3, #4
   16770:	e1a03005 	mov	r3, r5
   16774:	e3060748 	movw	r0, #26440	; 0x6748
   16778:	e3400001 	movt	r0, #1
   1677c:	e1a01003 	mov	r1, r3
   16780:	ebfffbe5 	bl	1571c <__cyg_profile_func_enter>
	unsigned int mailbuffer[8] __attribute__((aligned (16)));

	//set power state
	mailbuffer[0] = 8 * 4;		//mailbuffer size
   16784:	e3a03020 	mov	r3, #32
   16788:	e5843000 	str	r3, [r4]
	mailbuffer[1] = 0;			//response code
   1678c:	e3a03000 	mov	r3, #0
   16790:	e5843004 	str	r3, [r4, #4]
	mailbuffer[2] = 0x00028001;	//set power state
   16794:	e3083001 	movw	r3, #32769	; 0x8001
   16798:	e3403002 	movt	r3, #2
   1679c:	e5843008 	str	r3, [r4, #8]
	mailbuffer[3] = 8;			//value buffer size
   167a0:	e3a03008 	mov	r3, #8
   167a4:	e584300c 	str	r3, [r4, #12]
	mailbuffer[4] = 0;			//Req. + value length (bytes)
   167a8:	e3a03000 	mov	r3, #0
   167ac:	e5843010 	str	r3, [r4, #16]
	mailbuffer[5] = nDeviceId;	//device id
   167b0:	e51b3010 	ldr	r3, [fp, #-16]
   167b4:	e5843014 	str	r3, [r4, #20]
	mailbuffer[6] = 1;			//state
   167b8:	e3a03001 	mov	r3, #1
   167bc:	e5843018 	str	r3, [r4, #24]
	mailbuffer[7] = 0;			//terminate buffer
   167c0:	e3a03000 	mov	r3, #0
   167c4:	e584301c 	str	r3, [r4, #28]

	//spam mail until the response code is ok
	while(mailbuffer[1] != 0x80000000){
   167c8:	ea000005 	b	167e4 <SetPowerStateOn+0x9c>
		mailboxWrite((int)mailbuffer, 8);
   167cc:	e1a03004 	mov	r3, r4
   167d0:	e1a00003 	mov	r0, r3
   167d4:	e3a01008 	mov	r1, #8
   167d8:	ebfffb7b 	bl	155cc <mailboxWrite>
		mailboxRead(8);
   167dc:	e3a00008 	mov	r0, #8
   167e0:	ebfffba0 	bl	15668 <mailboxRead>
	mailbuffer[5] = nDeviceId;	//device id
	mailbuffer[6] = 1;			//state
	mailbuffer[7] = 0;			//terminate buffer

	//spam mail until the response code is ok
	while(mailbuffer[1] != 0x80000000){
   167e4:	e5943004 	ldr	r3, [r4, #4]
   167e8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   167ec:	1afffff6 	bne	167cc <SetPowerStateOn+0x84>
		mailboxWrite((int)mailbuffer, 8);
		mailboxRead(8);
	}

	return 1;
   167f0:	e3a04001 	mov	r4, #1
   167f4:	e1a03005 	mov	r3, r5
   167f8:	e3060748 	movw	r0, #26440	; 0x6748
   167fc:	e3400001 	movt	r0, #1
   16800:	e1a01003 	mov	r1, r3
   16804:	ebfffc16 	bl	15864 <__cyg_profile_func_exit>
   16808:	e1a03004 	mov	r3, r4
}
   1680c:	e1a00003 	mov	r0, r3
   16810:	e24bd00c 	sub	sp, fp, #12
   16814:	e8bd8830 	pop	{r4, r5, fp, pc}

00016818 <GetMACAddress>:

int GetMACAddress (unsigned char Buffer[6]){
   16818:	e92d4830 	push	{r4, r5, fp, lr}
   1681c:	e28db00c 	add	fp, sp, #12
   16820:	e24dd010 	sub	sp, sp, #16
   16824:	e1a0500e 	mov	r5, lr
   16828:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1682c:	e24dd030 	sub	sp, sp, #48	; 0x30
   16830:	e1a0300d 	mov	r3, sp
   16834:	e283300f 	add	r3, r3, #15
   16838:	e1a03223 	lsr	r3, r3, #4
   1683c:	e1a04203 	lsl	r4, r3, #4
   16840:	e1a03005 	mov	r3, r5
   16844:	e3060818 	movw	r0, #26648	; 0x6818
   16848:	e3400001 	movt	r0, #1
   1684c:	e1a01003 	mov	r1, r3
   16850:	ebfffbb1 	bl	1571c <__cyg_profile_func_enter>
	unsigned int mailbuffer[7] __attribute__((aligned (16)));

	//set power state
	mailbuffer[0] = 7 * 4;		//mailbuffer size
   16854:	e3a0301c 	mov	r3, #28
   16858:	e5843000 	str	r3, [r4]
	mailbuffer[1] = 0;			//response code
   1685c:	e3a03000 	mov	r3, #0
   16860:	e5843004 	str	r3, [r4, #4]
	mailbuffer[2] = 0x00010003;	//get mac
   16864:	e3a03003 	mov	r3, #3
   16868:	e3403001 	movt	r3, #1
   1686c:	e5843008 	str	r3, [r4, #8]
	mailbuffer[3] = 6;			//value buffer size
   16870:	e3a03006 	mov	r3, #6
   16874:	e584300c 	str	r3, [r4, #12]
	mailbuffer[4] = 0;			//Req. + value length (bytes)
   16878:	e3a03000 	mov	r3, #0
   1687c:	e5843010 	str	r3, [r4, #16]
	mailbuffer[5] = 0;			//12 34 56 AB CD EF 00 00
   16880:	e3a03000 	mov	r3, #0
   16884:	e5843014 	str	r3, [r4, #20]
	mailbuffer[6] = 0;			//terminate buffer
   16888:	e3a03000 	mov	r3, #0
   1688c:	e5843018 	str	r3, [r4, #24]

	//spam mail until the response code is ok
	while(mailbuffer[1] != 0x80000000){
   16890:	ea000005 	b	168ac <GetMACAddress+0x94>
		mailboxWrite((int)mailbuffer, 8);
   16894:	e1a03004 	mov	r3, r4
   16898:	e1a00003 	mov	r0, r3
   1689c:	e3a01008 	mov	r1, #8
   168a0:	ebfffb49 	bl	155cc <mailboxWrite>
		mailboxRead(8);
   168a4:	e3a00008 	mov	r0, #8
   168a8:	ebfffb6e 	bl	15668 <mailboxRead>
	mailbuffer[4] = 0;			//Req. + value length (bytes)
	mailbuffer[5] = 0;			//12 34 56 AB CD EF 00 00
	mailbuffer[6] = 0;			//terminate buffer

	//spam mail until the response code is ok
	while(mailbuffer[1] != 0x80000000){
   168ac:	e5943004 	ldr	r3, [r4, #4]
   168b0:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   168b4:	1afffff6 	bne	16894 <GetMACAddress+0x7c>
		mailboxWrite((int)mailbuffer, 8);
		mailboxRead(8);
	}

	memcpy(Buffer, *(&mailbuffer + 24), 6);
   168b8:	e2843e2a 	add	r3, r4, #672	; 0x2a0
   168bc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   168c0:	e1a01003 	mov	r1, r3
   168c4:	e3a02006 	mov	r2, #6
   168c8:	eb0000e2 	bl	16c58 <memcpy>
char str[7] = "aaaaaa";
   168cc:	e30d2e70 	movw	r2, #56944	; 0xde70
   168d0:	e3402002 	movt	r2, #2
   168d4:	e24b3014 	sub	r3, fp, #20
   168d8:	e8920003 	ldm	r2, {r0, r1}
   168dc:	e5830000 	str	r0, [r3]
   168e0:	e2833004 	add	r3, r3, #4
   168e4:	e1c310b0 	strh	r1, [r3]
   168e8:	e2833002 	add	r3, r3, #2
   168ec:	e1a02821 	lsr	r2, r1, #16
   168f0:	e5c32000 	strb	r2, [r3]
strncpy(str, Buffer, 6);
   168f4:	e24b3014 	sub	r3, fp, #20
   168f8:	e1a00003 	mov	r0, r3
   168fc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   16900:	e3a02006 	mov	r2, #6
   16904:	eb0000fb 	bl	16cf8 <strncpy>
println(str, 0xFFFFFFFF);
   16908:	e24b3014 	sub	r3, fp, #20
   1690c:	e1a00003 	mov	r0, r3
   16910:	e3e01000 	mvn	r1, #0
   16914:	ebfffd58 	bl	15e7c <println>
println("did it worked?", 0xFFFFFFFF);
   16918:	e30d0e60 	movw	r0, #56928	; 0xde60
   1691c:	e3400002 	movt	r0, #2
   16920:	e3e01000 	mvn	r1, #0
   16924:	ebfffd54 	bl	15e7c <println>

	memcpy (Buffer, MACAddress.Address, 6);
	
	_BcmPropertyTags (&Tags);*/

	return 1;
   16928:	e3a04001 	mov	r4, #1
   1692c:	e1a03005 	mov	r3, r5
   16930:	e3060818 	movw	r0, #26648	; 0x6818
   16934:	e3400001 	movt	r0, #1
   16938:	e1a01003 	mov	r1, r3
   1693c:	ebfffbc8 	bl	15864 <__cyg_profile_func_exit>
   16940:	e1a03004 	mov	r3, r4
}
   16944:	e1a00003 	mov	r0, r3
   16948:	e24bd00c 	sub	sp, fp, #12
   1694c:	e8bd8830 	pop	{r4, r5, fp, pc}

00016950 <LogWrite>:

void LogWrite (const char *pSource, unsigned Severity, const char *pMessage, ...)
{
   16950:	e92d000c 	push	{r2, r3}
   16954:	e92d4810 	push	{r4, fp, lr}
   16958:	e28db008 	add	fp, sp, #8
   1695c:	e24dd00c 	sub	sp, sp, #12
   16960:	e1a0400e 	mov	r4, lr
   16964:	e50b0010 	str	r0, [fp, #-16]
   16968:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1696c:	e1a03004 	mov	r3, r4
   16970:	e3060950 	movw	r0, #26960	; 0x6950
   16974:	e3400001 	movt	r0, #1
   16978:	e1a01003 	mov	r1, r3
   1697c:	ebfffb66 	bl	1571c <__cyg_profile_func_enter>
	va_start (var, pMessage);

	LoggerWriteV (LoggerGet (), pSource, (TLogSeverity) Severity, pMessage, var);

	va_end (var);*/
	println(pMessage, 0xFFFFFFFF);
   16980:	e59b0004 	ldr	r0, [fp, #4]
   16984:	e3e01000 	mvn	r1, #0
   16988:	ebfffd3b 	bl	15e7c <println>
   1698c:	e1a03004 	mov	r3, r4
   16990:	e3060950 	movw	r0, #26960	; 0x6950
   16994:	e3400001 	movt	r0, #1
   16998:	e1a01003 	mov	r1, r3
   1699c:	ebfffbb0 	bl	15864 <__cyg_profile_func_exit>
}
   169a0:	e24bd008 	sub	sp, fp, #8
   169a4:	e8bd4810 	pop	{r4, fp, lr}
   169a8:	e28dd008 	add	sp, sp, #8
   169ac:	e12fff1e 	bx	lr

000169b0 <uspi_assertion_failed>:

#ifndef NDEBUG

void uspi_assertion_failed (const char *pExpr, const char *pFile, unsigned nLine)
{
   169b0:	e92d4810 	push	{r4, fp, lr}
   169b4:	e28db008 	add	fp, sp, #8
   169b8:	e24dd014 	sub	sp, sp, #20
   169bc:	e1a0400e 	mov	r4, lr
   169c0:	e50b0010 	str	r0, [fp, #-16]
   169c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   169c8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   169cc:	e1a03004 	mov	r3, r4
   169d0:	e30609b0 	movw	r0, #27056	; 0x69b0
   169d4:	e3400001 	movt	r0, #1
   169d8:	e1a01003 	mov	r1, r3
   169dc:	ebfffb4e 	bl	1571c <__cyg_profile_func_enter>
	println("assert failed", 0xFFFFFFFF);//assertion_failed (pExpr, pFile, nLine);
   169e0:	e30d0e78 	movw	r0, #56952	; 0xde78
   169e4:	e3400002 	movt	r0, #2
   169e8:	e3e01000 	mvn	r1, #0
   169ec:	ebfffd22 	bl	15e7c <println>
   169f0:	e1a03004 	mov	r3, r4
   169f4:	e30609b0 	movw	r0, #27056	; 0x69b0
   169f8:	e3400001 	movt	r0, #1
   169fc:	e1a01003 	mov	r1, r3
   16a00:	ebfffb97 	bl	15864 <__cyg_profile_func_exit>
	//while(1){;} //system failure
}
   16a04:	e24bd008 	sub	sp, fp, #8
   16a08:	e8bd8810 	pop	{r4, fp, pc}

00016a0c <DebugHexdump>:

void DebugHexdump (const void *pBuffer, unsigned nBufLen, const char *pSource)
{
   16a0c:	e92d4810 	push	{r4, fp, lr}
   16a10:	e28db008 	add	fp, sp, #8
   16a14:	e24dd014 	sub	sp, sp, #20
   16a18:	e1a0400e 	mov	r4, lr
   16a1c:	e50b0010 	str	r0, [fp, #-16]
   16a20:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   16a24:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   16a28:	e1a03004 	mov	r3, r4
   16a2c:	e3060a0c 	movw	r0, #27148	; 0x6a0c
   16a30:	e3400001 	movt	r0, #1
   16a34:	e1a01003 	mov	r1, r3
   16a38:	ebfffb37 	bl	1571c <__cyg_profile_func_enter>
   16a3c:	e1a03004 	mov	r3, r4
   16a40:	e3060a0c 	movw	r0, #27148	; 0x6a0c
   16a44:	e3400001 	movt	r0, #1
   16a48:	e1a01003 	mov	r1, r3
   16a4c:	ebfffb84 	bl	15864 <__cyg_profile_func_exit>
	//debug_hexdump (pBuffer, nBufLen, pSource);
}
   16a50:	e24bd008 	sub	sp, fp, #8
   16a54:	e8bd8810 	pop	{r4, fp, pc}

00016a58 <malloc>:

#endif

void* malloc(unsigned nSize){
   16a58:	e92d4830 	push	{r4, r5, fp, lr}
   16a5c:	e28db00c 	add	fp, sp, #12
   16a60:	e24dd008 	sub	sp, sp, #8
   16a64:	e1a0400e 	mov	r4, lr
   16a68:	e50b0010 	str	r0, [fp, #-16]
   16a6c:	e1a03004 	mov	r3, r4
   16a70:	e3060a58 	movw	r0, #27224	; 0x6a58
   16a74:	e3400001 	movt	r0, #1
   16a78:	e1a01003 	mov	r1, r3
   16a7c:	ebfffb26 	bl	1571c <__cyg_profile_func_enter>
	return pvPortMalloc(nSize);
   16a80:	e51b0010 	ldr	r0, [fp, #-16]
   16a84:	ebfff8f2 	bl	14e54 <pvPortMalloc>
   16a88:	e1a05000 	mov	r5, r0
   16a8c:	e1a03004 	mov	r3, r4
   16a90:	e3060a58 	movw	r0, #27224	; 0x6a58
   16a94:	e3400001 	movt	r0, #1
   16a98:	e1a01003 	mov	r1, r3
   16a9c:	ebfffb70 	bl	15864 <__cyg_profile_func_exit>
   16aa0:	e1a03005 	mov	r3, r5
}
   16aa4:	e1a00003 	mov	r0, r3
   16aa8:	e24bd00c 	sub	sp, fp, #12
   16aac:	e8bd8830 	pop	{r4, r5, fp, pc}

00016ab0 <free>:

void free(void* pBlock){
   16ab0:	e92d4810 	push	{r4, fp, lr}
   16ab4:	e28db008 	add	fp, sp, #8
   16ab8:	e24dd00c 	sub	sp, sp, #12
   16abc:	e1a0400e 	mov	r4, lr
   16ac0:	e50b0010 	str	r0, [fp, #-16]
   16ac4:	e1a03004 	mov	r3, r4
   16ac8:	e3060ab0 	movw	r0, #27312	; 0x6ab0
   16acc:	e3400001 	movt	r0, #1
   16ad0:	e1a01003 	mov	r1, r3
   16ad4:	ebfffb10 	bl	1571c <__cyg_profile_func_enter>
	vPortFree(pBlock);
   16ad8:	e51b0010 	ldr	r0, [fp, #-16]
   16adc:	ebfff95e 	bl	1505c <vPortFree>
   16ae0:	e1a03004 	mov	r3, r4
   16ae4:	e3060ab0 	movw	r0, #27312	; 0x6ab0
   16ae8:	e3400001 	movt	r0, #1
   16aec:	e1a01003 	mov	r1, r3
   16af0:	ebfffb5b 	bl	15864 <__cyg_profile_func_exit>
}
   16af4:	e24bd008 	sub	sp, fp, #8
   16af8:	e8bd8810 	pop	{r4, fp, pc}

00016afc <memset>:

void *memset(void *s, int c, size_t n){
   16afc:	e92d4830 	push	{r4, r5, fp, lr}
   16b00:	e28db00c 	add	fp, sp, #12
   16b04:	e24dd018 	sub	sp, sp, #24
   16b08:	e1a0500e 	mov	r5, lr
   16b0c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   16b10:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   16b14:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   16b18:	e1a03005 	mov	r3, r5
   16b1c:	e3060afc 	movw	r0, #27388	; 0x6afc
   16b20:	e3400001 	movt	r0, #1
   16b24:	e1a01003 	mov	r1, r3
   16b28:	ebfffafb 	bl	1571c <__cyg_profile_func_enter>
    unsigned char* p=s;
   16b2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b30:	e50b3010 	str	r3, [fp, #-16]
    while(n--)
   16b34:	ea000005 	b	16b50 <memset+0x54>
        *p++ = (unsigned char)c;
   16b38:	e51b3010 	ldr	r3, [fp, #-16]
   16b3c:	e2832001 	add	r2, r3, #1
   16b40:	e50b2010 	str	r2, [fp, #-16]
   16b44:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   16b48:	e6ef2072 	uxtb	r2, r2
   16b4c:	e5c32000 	strb	r2, [r3]
	vPortFree(pBlock);
}

void *memset(void *s, int c, size_t n){
    unsigned char* p=s;
    while(n--)
   16b50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b54:	e2432001 	sub	r2, r3, #1
   16b58:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   16b5c:	e3530000 	cmp	r3, #0
   16b60:	1afffff4 	bne	16b38 <memset+0x3c>
        *p++ = (unsigned char)c;
    return s;
   16b64:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   16b68:	e1a03005 	mov	r3, r5
   16b6c:	e3060afc 	movw	r0, #27388	; 0x6afc
   16b70:	e3400001 	movt	r0, #1
   16b74:	e1a01003 	mov	r1, r3
   16b78:	ebfffb39 	bl	15864 <__cyg_profile_func_exit>
   16b7c:	e1a03004 	mov	r3, r4
}
   16b80:	e1a00003 	mov	r0, r3
   16b84:	e24bd00c 	sub	sp, fp, #12
   16b88:	e8bd8830 	pop	{r4, r5, fp, pc}

00016b8c <memcmp>:

int memcmp(const void* s1, const void* s2, size_t n){
   16b8c:	e92d4830 	push	{r4, r5, fp, lr}
   16b90:	e28db00c 	add	fp, sp, #12
   16b94:	e24dd018 	sub	sp, sp, #24
   16b98:	e1a0500e 	mov	r5, lr
   16b9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   16ba0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   16ba4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   16ba8:	e1a03005 	mov	r3, r5
   16bac:	e3060b8c 	movw	r0, #27532	; 0x6b8c
   16bb0:	e3400001 	movt	r0, #1
   16bb4:	e1a01003 	mov	r1, r3
   16bb8:	ebfffad7 	bl	1571c <__cyg_profile_func_enter>
    const unsigned char *p1 = s1, *p2 = s2;
   16bbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bc0:	e50b3010 	str	r3, [fp, #-16]
   16bc4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   16bc8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    while(n--)
   16bcc:	ea000012 	b	16c1c <memcmp+0x90>
        if( *p1 != *p2 )
   16bd0:	e51b3010 	ldr	r3, [fp, #-16]
   16bd4:	e5d32000 	ldrb	r2, [r3]
   16bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   16bdc:	e5d33000 	ldrb	r3, [r3]
   16be0:	e1520003 	cmp	r2, r3
   16be4:	0a000006 	beq	16c04 <memcmp+0x78>
            return *p1 - *p2;
   16be8:	e51b3010 	ldr	r3, [fp, #-16]
   16bec:	e5d33000 	ldrb	r3, [r3]
   16bf0:	e1a02003 	mov	r2, r3
   16bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   16bf8:	e5d33000 	ldrb	r3, [r3]
   16bfc:	e0634002 	rsb	r4, r3, r2
   16c00:	ea00000b 	b	16c34 <memcmp+0xa8>
        else
            p1++,p2++;
   16c04:	e51b3010 	ldr	r3, [fp, #-16]
   16c08:	e2833001 	add	r3, r3, #1
   16c0c:	e50b3010 	str	r3, [fp, #-16]
   16c10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   16c14:	e2833001 	add	r3, r3, #1
   16c18:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return s;
}

int memcmp(const void* s1, const void* s2, size_t n){
    const unsigned char *p1 = s1, *p2 = s2;
    while(n--)
   16c1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c20:	e2432001 	sub	r2, r3, #1
   16c24:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   16c28:	e3530000 	cmp	r3, #0
   16c2c:	1affffe7 	bne	16bd0 <memcmp+0x44>
        if( *p1 != *p2 )
            return *p1 - *p2;
        else
            p1++,p2++;
    return 0;
   16c30:	e3a04000 	mov	r4, #0
   16c34:	e1a03005 	mov	r3, r5
   16c38:	e3060b8c 	movw	r0, #27532	; 0x6b8c
   16c3c:	e3400001 	movt	r0, #1
   16c40:	e1a01003 	mov	r1, r3
   16c44:	ebfffb06 	bl	15864 <__cyg_profile_func_exit>
   16c48:	e1a03004 	mov	r3, r4
}
   16c4c:	e1a00003 	mov	r0, r3
   16c50:	e24bd00c 	sub	sp, fp, #12
   16c54:	e8bd8830 	pop	{r4, r5, fp, pc}

00016c58 <memcpy>:

void *memcpy(void *dest, const void *src, size_t n){
   16c58:	e92d4830 	push	{r4, r5, fp, lr}
   16c5c:	e28db00c 	add	fp, sp, #12
   16c60:	e24dd018 	sub	sp, sp, #24
   16c64:	e1a0500e 	mov	r5, lr
   16c68:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   16c6c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   16c70:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   16c74:	e1a03005 	mov	r3, r5
   16c78:	e3060c58 	movw	r0, #27736	; 0x6c58
   16c7c:	e3400001 	movt	r0, #1
   16c80:	e1a01003 	mov	r1, r3
   16c84:	ebfffaa4 	bl	1571c <__cyg_profile_func_enter>
    char *dp = dest;
   16c88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c8c:	e50b3010 	str	r3, [fp, #-16]
    const char *sp = src;
   16c90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   16c94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    while (n--)
   16c98:	ea000007 	b	16cbc <memcpy+0x64>
        *dp++ = *sp++;
   16c9c:	e51b3010 	ldr	r3, [fp, #-16]
   16ca0:	e2832001 	add	r2, r3, #1
   16ca4:	e50b2010 	str	r2, [fp, #-16]
   16ca8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   16cac:	e2821001 	add	r1, r2, #1
   16cb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   16cb4:	e5d22000 	ldrb	r2, [r2]
   16cb8:	e5c32000 	strb	r2, [r3]
}

void *memcpy(void *dest, const void *src, size_t n){
    char *dp = dest;
    const char *sp = src;
    while (n--)
   16cbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   16cc0:	e2432001 	sub	r2, r3, #1
   16cc4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   16cc8:	e3530000 	cmp	r3, #0
   16ccc:	1afffff2 	bne	16c9c <memcpy+0x44>
        *dp++ = *sp++;
    return dest;
   16cd0:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   16cd4:	e1a03005 	mov	r3, r5
   16cd8:	e3060c58 	movw	r0, #27736	; 0x6c58
   16cdc:	e3400001 	movt	r0, #1
   16ce0:	e1a01003 	mov	r1, r3
   16ce4:	ebfffade 	bl	15864 <__cyg_profile_func_exit>
   16ce8:	e1a03004 	mov	r3, r4
}
   16cec:	e1a00003 	mov	r0, r3
   16cf0:	e24bd00c 	sub	sp, fp, #12
   16cf4:	e8bd8830 	pop	{r4, r5, fp, pc}

00016cf8 <strncpy>:

char *strncpy(char *dest, const char *src, size_t n){
   16cf8:	e92d4830 	push	{r4, r5, fp, lr}
   16cfc:	e28db00c 	add	fp, sp, #12
   16d00:	e24dd018 	sub	sp, sp, #24
   16d04:	e1a0500e 	mov	r5, lr
   16d08:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   16d0c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   16d10:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   16d14:	e1a03005 	mov	r3, r5
   16d18:	e3060cf8 	movw	r0, #27896	; 0x6cf8
   16d1c:	e3400001 	movt	r0, #1
   16d20:	e1a01003 	mov	r1, r3
   16d24:	ebfffa7c 	bl	1571c <__cyg_profile_func_enter>
    char *ret = dest;
   16d28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d2c:	e50b3010 	str	r3, [fp, #-16]
    do {
        if (!n--)
   16d30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d34:	e2432001 	sub	r2, r3, #1
   16d38:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   16d3c:	e3530000 	cmp	r3, #0
   16d40:	1a000001 	bne	16d4c <strncpy+0x54>
            return ret;
   16d44:	e51b4010 	ldr	r4, [fp, #-16]
   16d48:	ea000016 	b	16da8 <strncpy+0xb0>
    } while (*dest++ = *src++);
   16d4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d50:	e2832001 	add	r2, r3, #1
   16d54:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   16d58:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   16d5c:	e2821001 	add	r1, r2, #1
   16d60:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   16d64:	e5d22000 	ldrb	r2, [r2]
   16d68:	e5c32000 	strb	r2, [r3]
   16d6c:	e5d33000 	ldrb	r3, [r3]
   16d70:	e3530000 	cmp	r3, #0
   16d74:	1affffed 	bne	16d30 <strncpy+0x38>
    while (n--)
   16d78:	ea000004 	b	16d90 <strncpy+0x98>
        *dest++ = 0;
   16d7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d80:	e2832001 	add	r2, r3, #1
   16d84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   16d88:	e3a02000 	mov	r2, #0
   16d8c:	e5c32000 	strb	r2, [r3]
    char *ret = dest;
    do {
        if (!n--)
            return ret;
    } while (*dest++ = *src++);
    while (n--)
   16d90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d94:	e2432001 	sub	r2, r3, #1
   16d98:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   16d9c:	e3530000 	cmp	r3, #0
   16da0:	1afffff5 	bne	16d7c <strncpy+0x84>
        *dest++ = 0;
    return ret;
   16da4:	e51b4010 	ldr	r4, [fp, #-16]
   16da8:	e1a03005 	mov	r3, r5
   16dac:	e3060cf8 	movw	r0, #27896	; 0x6cf8
   16db0:	e3400001 	movt	r0, #1
   16db4:	e1a01003 	mov	r1, r3
   16db8:	ebfffaa9 	bl	15864 <__cyg_profile_func_exit>
   16dbc:	e1a03004 	mov	r3, r4
   16dc0:	e1a00003 	mov	r0, r3
   16dc4:	e24bd00c 	sub	sp, fp, #12
   16dc8:	e8bd8830 	pop	{r4, r5, fp, pc}

00016dcc <arp>:

static const u8 OwnIPAddress[] = OWN_IP_ADDRESS;

static const char FromSample[] = "sample";

int arp(){
   16dcc:	e92d4830 	push	{r4, r5, fp, lr}
   16dd0:	e28db00c 	add	fp, sp, #12
   16dd4:	e24dde66 	sub	sp, sp, #1632	; 0x660
   16dd8:	e1a0500e 	mov	r5, lr
   16ddc:	e1a03005 	mov	r3, r5
   16de0:	e3060dcc 	movw	r0, #28108	; 0x6dcc
   16de4:	e3400001 	movt	r0, #1
   16de8:	e1a01003 	mov	r1, r3
   16dec:	ebfffa4a 	bl	1571c <__cyg_profile_func_enter>
	/*if (!USPiEnvInitialize ())
	{
		return EXIT_HALT;
	}*/

	if (!USPiInitialize ())
   16df0:	eb0000c6 	bl	17110 <USPiInitialize>
   16df4:	e1a03000 	mov	r3, r0
   16df8:	e3530000 	cmp	r3, #0
   16dfc:	1a000007 	bne	16e20 <arp+0x54>
	{
		LogWrite (FromSample, LOG_ERROR, "Cannot initialize USPi");
   16e00:	e30d0e8c 	movw	r0, #56972	; 0xde8c
   16e04:	e3400002 	movt	r0, #2
   16e08:	e3a01001 	mov	r1, #1
   16e0c:	e30d2e94 	movw	r2, #56980	; 0xde94
   16e10:	e3402002 	movt	r2, #2
   16e14:	ebfffecd 	bl	16950 <LogWrite>

		//USPiEnvClose ();

		return 0;
   16e18:	e3a04000 	mov	r4, #0
   16e1c:	ea0000b2 	b	170ec <arp+0x320>
	}

	if (!USPiEthernetAvailable ())
   16e20:	eb000391 	bl	17c6c <USPiEthernetAvailable>
   16e24:	e1a03000 	mov	r3, r0
   16e28:	e3530000 	cmp	r3, #0
   16e2c:	1a000007 	bne	16e50 <arp+0x84>
	{
		LogWrite (FromSample, LOG_ERROR, "Ethernet device not found");
   16e30:	e30d0e8c 	movw	r0, #56972	; 0xde8c
   16e34:	e3400002 	movt	r0, #2
   16e38:	e3a01001 	mov	r1, #1
   16e3c:	e30d2eac 	movw	r2, #57004	; 0xdeac
   16e40:	e3402002 	movt	r2, #2
   16e44:	ebfffec1 	bl	16950 <LogWrite>

		//USPiEnvClose ();

		return 0;
   16e48:	e3a04000 	mov	r4, #0
   16e4c:	ea0000a6 	b	170ec <arp+0x320>
	}

	u8 OwnMACAddress[MAC_ADDRESS_SIZE];
	USPiGetMACAddress (OwnMACAddress);
   16e50:	e24b3018 	sub	r3, fp, #24
   16e54:	e1a00003 	mov	r0, r3
   16e58:	eb0003a7 	bl	17cfc <USPiGetMACAddress>

	while (1)
	{
		u8 Buffer[USPI_FRAME_BUFFER_SIZE];
		unsigned nFrameLength;
		if (!USPiReceiveFrame (Buffer, &nFrameLength))
   16e5c:	e24b2e65 	sub	r2, fp, #1616	; 0x650
   16e60:	e242200c 	sub	r2, r2, #12
   16e64:	e24b301c 	sub	r3, fp, #28
   16e68:	e1a00002 	mov	r0, r2
   16e6c:	e1a01003 	mov	r1, r3
   16e70:	eb000415 	bl	17ecc <USPiReceiveFrame>
   16e74:	e1a03000 	mov	r3, r0
   16e78:	e3530000 	cmp	r3, #0
   16e7c:	1a000000 	bne	16e84 <arp+0xb8>
		{
			continue;
   16e80:	ea000098 	b	170e8 <arp+0x31c>
		}

		LogWrite (FromSample, LOG_NOTICE, "Frame received (length %u)", nFrameLength);
   16e84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   16e88:	e30d0e8c 	movw	r0, #56972	; 0xde8c
   16e8c:	e3400002 	movt	r0, #2
   16e90:	e3a01003 	mov	r1, #3
   16e94:	e30d2ec8 	movw	r2, #57032	; 0xdec8
   16e98:	e3402002 	movt	r2, #2
   16e9c:	ebfffeab 	bl	16950 <LogWrite>

		if (nFrameLength < sizeof (TARPFrame))
   16ea0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ea4:	e3530029 	cmp	r3, #41	; 0x29
   16ea8:	8a000000 	bhi	16eb0 <arp+0xe4>
		{
			continue;
   16eac:	ea00008d 	b	170e8 <arp+0x31c>
		}

		TARPFrame *pARPFrame = (TARPFrame *) Buffer;
   16eb0:	e24b3e65 	sub	r3, fp, #1616	; 0x650
   16eb4:	e243300c 	sub	r3, r3, #12
   16eb8:	e50b3010 	str	r3, [fp, #-16]
		if (   pARPFrame->Ethernet.nProtocolType	!= BE (ETH_PROT_ARP)
   16ebc:	e51b3010 	ldr	r3, [fp, #-16]
   16ec0:	e1d330bc 	ldrh	r3, [r3, #12]
   16ec4:	e6ff3073 	uxth	r3, r3
   16ec8:	e3002608 	movw	r2, #1544	; 0x608
   16ecc:	e1530002 	cmp	r3, r2
   16ed0:	1a000016 	bne	16f30 <arp+0x164>
		    || pARPFrame->ARP.nHWAddressSpace		!= BE (HW_ADDR_ETHER)
   16ed4:	e51b3010 	ldr	r3, [fp, #-16]
   16ed8:	e1d330be 	ldrh	r3, [r3, #14]
   16edc:	e6ff3073 	uxth	r3, r3
   16ee0:	e3530c01 	cmp	r3, #256	; 0x100
   16ee4:	1a000011 	bne	16f30 <arp+0x164>
		    || pARPFrame->ARP.nProtocolAddressSpace	!= BE (PROT_ADDR_IP)
   16ee8:	e51b3010 	ldr	r3, [fp, #-16]
   16eec:	e1d331b0 	ldrh	r3, [r3, #16]
   16ef0:	e6ff3073 	uxth	r3, r3
   16ef4:	e3530008 	cmp	r3, #8
   16ef8:	1a00000c 	bne	16f30 <arp+0x164>
		    || pARPFrame->ARP.nHWAddressLength		!= MAC_ADDRESS_SIZE
   16efc:	e51b3010 	ldr	r3, [fp, #-16]
   16f00:	e5d33012 	ldrb	r3, [r3, #18]
   16f04:	e3530006 	cmp	r3, #6
   16f08:	1a000008 	bne	16f30 <arp+0x164>
		    || pARPFrame->ARP.nProtocolAddressLength	!= IP_ADDRESS_SIZE
   16f0c:	e51b3010 	ldr	r3, [fp, #-16]
   16f10:	e5d33013 	ldrb	r3, [r3, #19]
   16f14:	e3530004 	cmp	r3, #4
   16f18:	1a000004 	bne	16f30 <arp+0x164>
		    || pARPFrame->ARP.nOPCode			!= BE (ARP_REQUEST))
   16f1c:	e51b3010 	ldr	r3, [fp, #-16]
   16f20:	e1d331b4 	ldrh	r3, [r3, #20]
   16f24:	e6ff3073 	uxth	r3, r3
   16f28:	e3530c01 	cmp	r3, #256	; 0x100
   16f2c:	0a000000 	beq	16f34 <arp+0x168>
		{
			continue;
   16f30:	ea00006c 	b	170e8 <arp+0x31c>
		}

		LogWrite (FromSample, LOG_NOTICE, "Valid ARP request from %u.%u.%u.%u received",
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[0],
   16f34:	e51b3010 	ldr	r3, [fp, #-16]
   16f38:	e5d3301c 	ldrb	r3, [r3, #28]
		    || pARPFrame->ARP.nOPCode			!= BE (ARP_REQUEST))
		{
			continue;
		}

		LogWrite (FromSample, LOG_NOTICE, "Valid ARP request from %u.%u.%u.%u received",
   16f3c:	e1a0c003 	mov	ip, r3
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[0],
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[1],
   16f40:	e51b3010 	ldr	r3, [fp, #-16]
   16f44:	e5d3301d 	ldrb	r3, [r3, #29]
		    || pARPFrame->ARP.nOPCode			!= BE (ARP_REQUEST))
		{
			continue;
		}

		LogWrite (FromSample, LOG_NOTICE, "Valid ARP request from %u.%u.%u.%u received",
   16f48:	e1a01003 	mov	r1, r3
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[0],
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[1],
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[2],
   16f4c:	e51b3010 	ldr	r3, [fp, #-16]
   16f50:	e5d3301e 	ldrb	r3, [r3, #30]
		    || pARPFrame->ARP.nOPCode			!= BE (ARP_REQUEST))
		{
			continue;
		}

		LogWrite (FromSample, LOG_NOTICE, "Valid ARP request from %u.%u.%u.%u received",
   16f54:	e1a02003 	mov	r2, r3
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[0],
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[1],
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[2],
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[3]);
   16f58:	e51b3010 	ldr	r3, [fp, #-16]
   16f5c:	e5d3301f 	ldrb	r3, [r3, #31]
		    || pARPFrame->ARP.nOPCode			!= BE (ARP_REQUEST))
		{
			continue;
		}

		LogWrite (FromSample, LOG_NOTICE, "Valid ARP request from %u.%u.%u.%u received",
   16f60:	e58d1000 	str	r1, [sp]
   16f64:	e58d2004 	str	r2, [sp, #4]
   16f68:	e58d3008 	str	r3, [sp, #8]
   16f6c:	e30d0e8c 	movw	r0, #56972	; 0xde8c
   16f70:	e3400002 	movt	r0, #2
   16f74:	e3a01003 	mov	r1, #3
   16f78:	e30d2ee4 	movw	r2, #57060	; 0xdee4
   16f7c:	e3402002 	movt	r2, #2
   16f80:	e1a0300c 	mov	r3, ip
   16f84:	ebfffe71 	bl	16950 <LogWrite>
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[0],
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[1],
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[2],
			  (unsigned) pARPFrame->ARP.ProtocolAddressSender[3]);

		if (memcmp (pARPFrame->ARP.ProtocolAddressTarget, OwnIPAddress, IP_ADDRESS_SIZE) != 0)
   16f88:	e51b3010 	ldr	r3, [fp, #-16]
   16f8c:	e2833026 	add	r3, r3, #38	; 0x26
   16f90:	e1a00003 	mov	r0, r3
   16f94:	e30d1e88 	movw	r1, #56968	; 0xde88
   16f98:	e3401002 	movt	r1, #2
   16f9c:	e3a02004 	mov	r2, #4
   16fa0:	ebfffef9 	bl	16b8c <memcmp>
   16fa4:	e1a03000 	mov	r3, r0
   16fa8:	e3530000 	cmp	r3, #0
   16fac:	0a000000 	beq	16fb4 <arp+0x1e8>
		{
			continue;
   16fb0:	ea00004c 	b	170e8 <arp+0x31c>
		}

		LogWrite (FromSample, LOG_NOTICE, "ARP request is to us");
   16fb4:	e30d0e8c 	movw	r0, #56972	; 0xde8c
   16fb8:	e3400002 	movt	r0, #2
   16fbc:	e3a01003 	mov	r1, #3
   16fc0:	e30d2f10 	movw	r2, #57104	; 0xdf10
   16fc4:	e3402002 	movt	r2, #2
   16fc8:	ebfffe60 	bl	16950 <LogWrite>

		// prepare reply packet
		memcpy (pARPFrame->Ethernet.MACReceiver, pARPFrame->ARP.HWAddressSender, MAC_ADDRESS_SIZE);
   16fcc:	e51b2010 	ldr	r2, [fp, #-16]
   16fd0:	e51b3010 	ldr	r3, [fp, #-16]
   16fd4:	e2833016 	add	r3, r3, #22
   16fd8:	e1a00002 	mov	r0, r2
   16fdc:	e1a01003 	mov	r1, r3
   16fe0:	e3a02006 	mov	r2, #6
   16fe4:	ebffff1b 	bl	16c58 <memcpy>
		memcpy (pARPFrame->Ethernet.MACSender, OwnMACAddress, MAC_ADDRESS_SIZE);
   16fe8:	e51b3010 	ldr	r3, [fp, #-16]
   16fec:	e2833006 	add	r3, r3, #6
   16ff0:	e1a02003 	mov	r2, r3
   16ff4:	e24b3018 	sub	r3, fp, #24
   16ff8:	e5930000 	ldr	r0, [r3]
   16ffc:	e5820000 	str	r0, [r2]
   17000:	e1d330b4 	ldrh	r3, [r3, #4]
   17004:	e1c230b4 	strh	r3, [r2, #4]
		pARPFrame->ARP.nOPCode = BE (ARP_REPLY);
   17008:	e51b3010 	ldr	r3, [fp, #-16]
   1700c:	e3a02000 	mov	r2, #0
   17010:	e5c32014 	strb	r2, [r3, #20]
   17014:	e3a02000 	mov	r2, #0
   17018:	e3822002 	orr	r2, r2, #2
   1701c:	e5c32015 	strb	r2, [r3, #21]

		memcpy (pARPFrame->ARP.HWAddressTarget, pARPFrame->ARP.HWAddressSender, MAC_ADDRESS_SIZE);
   17020:	e51b3010 	ldr	r3, [fp, #-16]
   17024:	e2832020 	add	r2, r3, #32
   17028:	e51b3010 	ldr	r3, [fp, #-16]
   1702c:	e2833016 	add	r3, r3, #22
   17030:	e1a00002 	mov	r0, r2
   17034:	e1a01003 	mov	r1, r3
   17038:	e3a02006 	mov	r2, #6
   1703c:	ebffff05 	bl	16c58 <memcpy>
		memcpy (pARPFrame->ARP.ProtocolAddressTarget, pARPFrame->ARP.ProtocolAddressSender, IP_ADDRESS_SIZE);
   17040:	e51b3010 	ldr	r3, [fp, #-16]
   17044:	e2832026 	add	r2, r3, #38	; 0x26
   17048:	e51b3010 	ldr	r3, [fp, #-16]
   1704c:	e283301c 	add	r3, r3, #28
   17050:	e1a00002 	mov	r0, r2
   17054:	e1a01003 	mov	r1, r3
   17058:	e3a02004 	mov	r2, #4
   1705c:	ebfffefd 	bl	16c58 <memcpy>

		memcpy (pARPFrame->ARP.HWAddressSender, OwnMACAddress, MAC_ADDRESS_SIZE);
   17060:	e51b3010 	ldr	r3, [fp, #-16]
   17064:	e2833016 	add	r3, r3, #22
   17068:	e1a02003 	mov	r2, r3
   1706c:	e24b3018 	sub	r3, fp, #24
   17070:	e5930000 	ldr	r0, [r3]
   17074:	e5820000 	str	r0, [r2]
   17078:	e1d330b4 	ldrh	r3, [r3, #4]
   1707c:	e1c230b4 	strh	r3, [r2, #4]
		memcpy (pARPFrame->ARP.ProtocolAddressSender, OwnIPAddress, IP_ADDRESS_SIZE);
   17080:	e51b3010 	ldr	r3, [fp, #-16]
   17084:	e283201c 	add	r2, r3, #28
   17088:	e30d3e88 	movw	r3, #56968	; 0xde88
   1708c:	e3403002 	movt	r3, #2
   17090:	e5930000 	ldr	r0, [r3]
   17094:	e5820000 	str	r0, [r2]
		
		if (!USPiSendFrame (pARPFrame, sizeof *pARPFrame))
   17098:	e51b0010 	ldr	r0, [fp, #-16]
   1709c:	e3a0102a 	mov	r1, #42	; 0x2a
   170a0:	eb000350 	bl	17de8 <USPiSendFrame>
   170a4:	e1a03000 	mov	r3, r0
   170a8:	e3530000 	cmp	r3, #0
   170ac:	1a000007 	bne	170d0 <arp+0x304>
		{
			LogWrite (FromSample, LOG_ERROR, "USPiSendFrame failed");
   170b0:	e30d0e8c 	movw	r0, #56972	; 0xde8c
   170b4:	e3400002 	movt	r0, #2
   170b8:	e3a01001 	mov	r1, #1
   170bc:	e30d2f28 	movw	r2, #57128	; 0xdf28
   170c0:	e3402002 	movt	r2, #2
   170c4:	ebfffe21 	bl	16950 <LogWrite>
		LogWrite (FromSample, LOG_NOTICE, "ARP reply successfully sent");
	}

	//USPiEnvClose ();

	return 0;
   170c8:	e3a04000 	mov	r4, #0
   170cc:	ea000006 	b	170ec <arp+0x320>
			LogWrite (FromSample, LOG_ERROR, "USPiSendFrame failed");

			break;
		}

		LogWrite (FromSample, LOG_NOTICE, "ARP reply successfully sent");
   170d0:	e30d0e8c 	movw	r0, #56972	; 0xde8c
   170d4:	e3400002 	movt	r0, #2
   170d8:	e3a01003 	mov	r1, #3
   170dc:	e30d2f40 	movw	r2, #57152	; 0xdf40
   170e0:	e3402002 	movt	r2, #2
   170e4:	ebfffe19 	bl	16950 <LogWrite>
	}
   170e8:	eaffff5b 	b	16e5c <arp+0x90>
   170ec:	e1a03005 	mov	r3, r5
   170f0:	e3060dcc 	movw	r0, #28108	; 0x6dcc
   170f4:	e3400001 	movt	r0, #1
   170f8:	e1a01003 	mov	r1, r3
   170fc:	ebfff9d8 	bl	15864 <__cyg_profile_func_exit>
   17100:	e1a03004 	mov	r3, r4

	//USPiEnvClose ();

	return 0;
}
   17104:	e1a00003 	mov	r0, r3
   17108:	e24bd00c 	sub	sp, fp, #12
   1710c:	e8bd8830 	pop	{r4, r5, fp, pc}

00017110 <USPiInitialize>:
static const char FromUSPi[] = "uspi";

static TUSPiLibrary *s_pLibrary = 0;

int USPiInitialize (void)
{
   17110:	e92d4870 	push	{r4, r5, r6, fp, lr}
   17114:	e28db010 	add	fp, sp, #16
   17118:	e24dd024 	sub	sp, sp, #36	; 0x24
   1711c:	e1a0500e 	mov	r5, lr
   17120:	e1a03005 	mov	r3, r5
   17124:	e3070110 	movw	r0, #28944	; 0x7110
   17128:	e3400001 	movt	r0, #1
   1712c:	e1a01003 	mov	r1, r3
   17130:	ebfff979 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary == 0);
   17134:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17138:	e3403003 	movt	r3, #3
   1713c:	e5933000 	ldr	r3, [r3]
   17140:	e3530000 	cmp	r3, #0
   17144:	0a000005 	beq	17160 <USPiInitialize+0x50>
   17148:	e30d0f64 	movw	r0, #57188	; 0xdf64
   1714c:	e3400002 	movt	r0, #2
   17150:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17154:	e3401002 	movt	r1, #2
   17158:	e3a02022 	mov	r2, #34	; 0x22
   1715c:	ebfffe13 	bl	169b0 <uspi_assertion_failed>
	s_pLibrary = (TUSPiLibrary *) malloc (sizeof (TUSPiLibrary));
   17160:	e3a00084 	mov	r0, #132	; 0x84
   17164:	ebfffe3b 	bl	16a58 <malloc>
   17168:	e1a03000 	mov	r3, r0
   1716c:	e1a02003 	mov	r2, r3
   17170:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17174:	e3403003 	movt	r3, #3
   17178:	e5832000 	str	r2, [r3]
	assert (s_pLibrary != 0);
   1717c:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17180:	e3403003 	movt	r3, #3
   17184:	e5933000 	ldr	r3, [r3]
   17188:	e3530000 	cmp	r3, #0
   1718c:	1a000005 	bne	171a8 <USPiInitialize+0x98>
   17190:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17194:	e3400002 	movt	r0, #2
   17198:	e30d1f74 	movw	r1, #57204	; 0xdf74
   1719c:	e3401002 	movt	r1, #2
   171a0:	e3a02024 	mov	r2, #36	; 0x24
   171a4:	ebfffe01 	bl	169b0 <uspi_assertion_failed>

	DeviceNameService (&s_pLibrary->NameService);
   171a8:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   171ac:	e3403003 	movt	r3, #3
   171b0:	e5933000 	ldr	r3, [r3]
   171b4:	e1a00003 	mov	r0, r3
   171b8:	eb002fb5 	bl	23094 <DeviceNameService>
	DWHCIDevice (&s_pLibrary->DWHCI);
   171bc:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   171c0:	e3403003 	movt	r3, #3
   171c4:	e5933000 	ldr	r3, [r3]
   171c8:	e2833004 	add	r3, r3, #4
   171cc:	e1a00003 	mov	r0, r3
   171d0:	eb0004bf 	bl	184d4 <DWHCIDevice>
	s_pLibrary->pEth0 = 0;
   171d4:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   171d8:	e3403003 	movt	r3, #3
   171dc:	e5933000 	ldr	r3, [r3]
   171e0:	e3a02000 	mov	r2, #0
   171e4:	e5832070 	str	r2, [r3, #112]	; 0x70

	if (!DWHCIDeviceInitialize (&s_pLibrary->DWHCI))
   171e8:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   171ec:	e3403003 	movt	r3, #3
   171f0:	e5933000 	ldr	r3, [r3]
   171f4:	e2833004 	add	r3, r3, #4
   171f8:	e1a00003 	mov	r0, r3
   171fc:	eb0004ff 	bl	18600 <DWHCIDeviceInitialize>
   17200:	e1a03000 	mov	r3, r0
   17204:	e3530000 	cmp	r3, #0
   17208:	1a00001b 	bne	1727c <USPiInitialize+0x16c>
	{
		LogWrite (FromUSPi, LOG_ERROR, "Cannot initialize USB host controller interface");
   1720c:	e30d0f5c 	movw	r0, #57180	; 0xdf5c
   17210:	e3400002 	movt	r0, #2
   17214:	e3a01001 	mov	r1, #1
   17218:	e30d2fe4 	movw	r2, #57316	; 0xdfe4
   1721c:	e3402002 	movt	r2, #2
   17220:	ebfffdca 	bl	16950 <LogWrite>

		_DWHCIDevice (&s_pLibrary->DWHCI);
   17224:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17228:	e3403003 	movt	r3, #3
   1722c:	e5933000 	ldr	r3, [r3]
   17230:	e2833004 	add	r3, r3, #4
   17234:	e1a00003 	mov	r0, r3
   17238:	eb0004db 	bl	185ac <_DWHCIDevice>
		_DeviceNameService (&s_pLibrary->NameService);
   1723c:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17240:	e3403003 	movt	r3, #3
   17244:	e5933000 	ldr	r3, [r3]
   17248:	e1a00003 	mov	r0, r3
   1724c:	eb002fbc 	bl	23144 <_DeviceNameService>
		free (s_pLibrary);
   17250:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17254:	e3403003 	movt	r3, #3
   17258:	e5933000 	ldr	r3, [r3]
   1725c:	e1a00003 	mov	r0, r3
   17260:	ebfffe12 	bl	16ab0 <free>
		s_pLibrary = 0;
   17264:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17268:	e3403003 	movt	r3, #3
   1726c:	e3a02000 	mov	r2, #0
   17270:	e5832000 	str	r2, [r3]

		return 0;
   17274:	e3a04000 	mov	r4, #0
   17278:	ea00007c 	b	17470 <USPiInitialize+0x360>
	}

	s_pLibrary->pUKBD1 = (TUSBKeyboardDevice *) DeviceNameServiceGetDevice (DeviceNameServiceGet (), "ukbd1", FALSE);
   1727c:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17280:	e3403003 	movt	r3, #3
   17284:	e5934000 	ldr	r4, [r3]
   17288:	eb0030ab 	bl	2353c <DeviceNameServiceGet>
   1728c:	e1a03000 	mov	r3, r0
   17290:	e1a00003 	mov	r0, r3
   17294:	e30e1014 	movw	r1, #57364	; 0xe014
   17298:	e3401002 	movt	r1, #2
   1729c:	e3a02000 	mov	r2, #0
   172a0:	eb00304f 	bl	233e4 <DeviceNameServiceGetDevice>
   172a4:	e1a03000 	mov	r3, r0
   172a8:	e5843058 	str	r3, [r4, #88]	; 0x58

	s_pLibrary->pUMouse1 = (TUSBMouseDevice *) DeviceNameServiceGetDevice (DeviceNameServiceGet (), "umouse1", FALSE);
   172ac:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   172b0:	e3403003 	movt	r3, #3
   172b4:	e5934000 	ldr	r4, [r3]
   172b8:	eb00309f 	bl	2353c <DeviceNameServiceGet>
   172bc:	e1a03000 	mov	r3, r0
   172c0:	e1a00003 	mov	r0, r3
   172c4:	e30e101c 	movw	r1, #57372	; 0xe01c
   172c8:	e3401002 	movt	r1, #2
   172cc:	e3a02000 	mov	r2, #0
   172d0:	eb003043 	bl	233e4 <DeviceNameServiceGetDevice>
   172d4:	e1a03000 	mov	r3, r0
   172d8:	e584305c 	str	r3, [r4, #92]	; 0x5c

	for (unsigned i = 0; i < MAX_DEVICES; i++)
   172dc:	e3a03000 	mov	r3, #0
   172e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   172e4:	ea000021 	b	17370 <USPiInitialize+0x260>
	{
		TString DeviceName;
		String  (&DeviceName);
   172e8:	e24b3028 	sub	r3, fp, #40	; 0x28
   172ec:	e1a00003 	mov	r0, r3
   172f0:	eb0036b4 	bl	24dc8 <String>
		StringFormat (&DeviceName, "umsd%u", i+1);
   172f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   172f8:	e2833001 	add	r3, r3, #1
   172fc:	e24b2028 	sub	r2, fp, #40	; 0x28
   17300:	e1a00002 	mov	r0, r2
   17304:	e30e1024 	movw	r1, #57380	; 0xe024
   17308:	e3401002 	movt	r1, #2
   1730c:	e1a02003 	mov	r2, r3
   17310:	eb003850 	bl	25458 <StringFormat>

		s_pLibrary->pUMSD[i] = (TUSBBulkOnlyMassStorageDevice *)
   17314:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17318:	e3403003 	movt	r3, #3
   1731c:	e5934000 	ldr	r4, [r3]
			DeviceNameServiceGetDevice (DeviceNameServiceGet (), StringGet (&DeviceName), TRUE);
   17320:	eb003085 	bl	2353c <DeviceNameServiceGet>
   17324:	e1a06000 	mov	r6, r0
   17328:	e24b3028 	sub	r3, fp, #40	; 0x28
   1732c:	e1a00003 	mov	r0, r3
   17330:	eb003717 	bl	24f94 <StringGet>
   17334:	e1a03000 	mov	r3, r0
   17338:	e1a00006 	mov	r0, r6
   1733c:	e1a01003 	mov	r1, r3
   17340:	e3a02001 	mov	r2, #1
   17344:	eb003026 	bl	233e4 <DeviceNameServiceGetDevice>
   17348:	e1a02000 	mov	r2, r0
	{
		TString DeviceName;
		String  (&DeviceName);
		StringFormat (&DeviceName, "umsd%u", i+1);

		s_pLibrary->pUMSD[i] = (TUSBBulkOnlyMassStorageDevice *)
   1734c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17350:	e2833018 	add	r3, r3, #24
   17354:	e7842103 	str	r2, [r4, r3, lsl #2]
			DeviceNameServiceGetDevice (DeviceNameServiceGet (), StringGet (&DeviceName), TRUE);

		_String  (&DeviceName);
   17358:	e24b3028 	sub	r3, fp, #40	; 0x28
   1735c:	e1a00003 	mov	r0, r3
   17360:	eb0036e6 	bl	24f00 <_String>

	s_pLibrary->pUKBD1 = (TUSBKeyboardDevice *) DeviceNameServiceGetDevice (DeviceNameServiceGet (), "ukbd1", FALSE);

	s_pLibrary->pUMouse1 = (TUSBMouseDevice *) DeviceNameServiceGetDevice (DeviceNameServiceGet (), "umouse1", FALSE);

	for (unsigned i = 0; i < MAX_DEVICES; i++)
   17364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17368:	e2833001 	add	r3, r3, #1
   1736c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   17370:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17374:	e3530003 	cmp	r3, #3
   17378:	9affffda 	bls	172e8 <USPiInitialize+0x1d8>
			DeviceNameServiceGetDevice (DeviceNameServiceGet (), StringGet (&DeviceName), TRUE);

		_String  (&DeviceName);
	}

	s_pLibrary->pEth0 = (TSMSC951xDevice *) DeviceNameServiceGetDevice (DeviceNameServiceGet (), "eth0", FALSE);
   1737c:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17380:	e3403003 	movt	r3, #3
   17384:	e5934000 	ldr	r4, [r3]
   17388:	eb00306b 	bl	2353c <DeviceNameServiceGet>
   1738c:	e1a03000 	mov	r3, r0
   17390:	e1a00003 	mov	r0, r3
   17394:	e30e102c 	movw	r1, #57388	; 0xe02c
   17398:	e3401002 	movt	r1, #2
   1739c:	e3a02000 	mov	r2, #0
   173a0:	eb00300f 	bl	233e4 <DeviceNameServiceGetDevice>
   173a4:	e1a03000 	mov	r3, r0
   173a8:	e5843070 	str	r3, [r4, #112]	; 0x70

	for (unsigned i = 0; i < MAX_DEVICES; i++)
   173ac:	e3a03000 	mov	r3, #0
   173b0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   173b4:	ea000023 	b	17448 <USPiInitialize+0x338>
	{
		TString DeviceName;
		String  (&DeviceName);
   173b8:	e24b3034 	sub	r3, fp, #52	; 0x34
   173bc:	e1a00003 	mov	r0, r3
   173c0:	eb003680 	bl	24dc8 <String>
		StringFormat (&DeviceName, "upad%u", i+1);
   173c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   173c8:	e2833001 	add	r3, r3, #1
   173cc:	e24b2034 	sub	r2, fp, #52	; 0x34
   173d0:	e1a00002 	mov	r0, r2
   173d4:	e30e1034 	movw	r1, #57396	; 0xe034
   173d8:	e3401002 	movt	r1, #2
   173dc:	e1a02003 	mov	r2, r3
   173e0:	eb00381c 	bl	25458 <StringFormat>

		s_pLibrary->pUPAD[i] = (TUSBGamePadDevice *)
   173e4:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   173e8:	e3403003 	movt	r3, #3
   173ec:	e5934000 	ldr	r4, [r3]
			DeviceNameServiceGetDevice (DeviceNameServiceGet (), StringGet (&DeviceName), FALSE);
   173f0:	eb003051 	bl	2353c <DeviceNameServiceGet>
   173f4:	e1a06000 	mov	r6, r0
   173f8:	e24b3034 	sub	r3, fp, #52	; 0x34
   173fc:	e1a00003 	mov	r0, r3
   17400:	eb0036e3 	bl	24f94 <StringGet>
   17404:	e1a03000 	mov	r3, r0
   17408:	e1a00006 	mov	r0, r6
   1740c:	e1a01003 	mov	r1, r3
   17410:	e3a02000 	mov	r2, #0
   17414:	eb002ff2 	bl	233e4 <DeviceNameServiceGetDevice>
   17418:	e1a02000 	mov	r2, r0
	{
		TString DeviceName;
		String  (&DeviceName);
		StringFormat (&DeviceName, "upad%u", i+1);

		s_pLibrary->pUPAD[i] = (TUSBGamePadDevice *)
   1741c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17420:	e283301c 	add	r3, r3, #28
   17424:	e1a03103 	lsl	r3, r3, #2
   17428:	e0843003 	add	r3, r4, r3
   1742c:	e5832004 	str	r2, [r3, #4]
			DeviceNameServiceGetDevice (DeviceNameServiceGet (), StringGet (&DeviceName), FALSE);

		_String  (&DeviceName);
   17430:	e24b3034 	sub	r3, fp, #52	; 0x34
   17434:	e1a00003 	mov	r0, r3
   17438:	eb0036b0 	bl	24f00 <_String>
		_String  (&DeviceName);
	}

	s_pLibrary->pEth0 = (TSMSC951xDevice *) DeviceNameServiceGetDevice (DeviceNameServiceGet (), "eth0", FALSE);

	for (unsigned i = 0; i < MAX_DEVICES; i++)
   1743c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17440:	e2833001 	add	r3, r3, #1
   17444:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   17448:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1744c:	e3530003 	cmp	r3, #3
   17450:	9affffd8 	bls	173b8 <USPiInitialize+0x2a8>
			DeviceNameServiceGetDevice (DeviceNameServiceGet (), StringGet (&DeviceName), FALSE);

		_String  (&DeviceName);
	}

	LogWrite (FromUSPi, LOG_DEBUG, "USPi library successfully initialized");
   17454:	e30d0f5c 	movw	r0, #57180	; 0xdf5c
   17458:	e3400002 	movt	r0, #2
   1745c:	e3a01004 	mov	r1, #4
   17460:	e30e203c 	movw	r2, #57404	; 0xe03c
   17464:	e3402002 	movt	r2, #2
   17468:	ebfffd38 	bl	16950 <LogWrite>

	return 1;
   1746c:	e3a04001 	mov	r4, #1
   17470:	e1a03005 	mov	r3, r5
   17474:	e3070110 	movw	r0, #28944	; 0x7110
   17478:	e3400001 	movt	r0, #1
   1747c:	e1a01003 	mov	r1, r3
   17480:	ebfff8f7 	bl	15864 <__cyg_profile_func_exit>
   17484:	e1a03004 	mov	r3, r4
}
   17488:	e1a00003 	mov	r0, r3
   1748c:	e24bd010 	sub	sp, fp, #16
   17490:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

00017494 <USPiKeyboardAvailable>:

int USPiKeyboardAvailable (void)
{
   17494:	e92d4830 	push	{r4, r5, fp, lr}
   17498:	e28db00c 	add	fp, sp, #12
   1749c:	e1a0400e 	mov	r4, lr
   174a0:	e1a03004 	mov	r3, r4
   174a4:	e3070494 	movw	r0, #29844	; 0x7494
   174a8:	e3400001 	movt	r0, #1
   174ac:	e1a01003 	mov	r1, r3
   174b0:	ebfff899 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   174b4:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   174b8:	e3403003 	movt	r3, #3
   174bc:	e5933000 	ldr	r3, [r3]
   174c0:	e3530000 	cmp	r3, #0
   174c4:	1a000005 	bne	174e0 <USPiKeyboardAvailable+0x4c>
   174c8:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   174cc:	e3400002 	movt	r0, #2
   174d0:	e30d1f74 	movw	r1, #57204	; 0xdf74
   174d4:	e3401002 	movt	r1, #2
   174d8:	e3a0205b 	mov	r2, #91	; 0x5b
   174dc:	ebfffd33 	bl	169b0 <uspi_assertion_failed>
	return s_pLibrary->pUKBD1 != 0;
   174e0:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   174e4:	e3403003 	movt	r3, #3
   174e8:	e5933000 	ldr	r3, [r3]
   174ec:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   174f0:	e3530000 	cmp	r3, #0
   174f4:	13a03001 	movne	r3, #1
   174f8:	03a03000 	moveq	r3, #0
   174fc:	e6ef3073 	uxtb	r3, r3
   17500:	e1a05003 	mov	r5, r3
   17504:	e1a03004 	mov	r3, r4
   17508:	e3070494 	movw	r0, #29844	; 0x7494
   1750c:	e3400001 	movt	r0, #1
   17510:	e1a01003 	mov	r1, r3
   17514:	ebfff8d2 	bl	15864 <__cyg_profile_func_exit>
   17518:	e1a03005 	mov	r3, r5
}
   1751c:	e1a00003 	mov	r0, r3
   17520:	e8bd8830 	pop	{r4, r5, fp, pc}

00017524 <USPiKeyboardRegisterKeyPressedHandler>:

void USPiKeyboardRegisterKeyPressedHandler (TUSPiKeyPressedHandler *pKeyPressedHandler)
{
   17524:	e92d4810 	push	{r4, fp, lr}
   17528:	e28db008 	add	fp, sp, #8
   1752c:	e24dd00c 	sub	sp, sp, #12
   17530:	e1a0400e 	mov	r4, lr
   17534:	e50b0010 	str	r0, [fp, #-16]
   17538:	e1a03004 	mov	r3, r4
   1753c:	e3070524 	movw	r0, #29988	; 0x7524
   17540:	e3400001 	movt	r0, #1
   17544:	e1a01003 	mov	r1, r3
   17548:	ebfff873 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   1754c:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17550:	e3403003 	movt	r3, #3
   17554:	e5933000 	ldr	r3, [r3]
   17558:	e3530000 	cmp	r3, #0
   1755c:	1a000005 	bne	17578 <USPiKeyboardRegisterKeyPressedHandler+0x54>
   17560:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17564:	e3400002 	movt	r0, #2
   17568:	e30d1f74 	movw	r1, #57204	; 0xdf74
   1756c:	e3401002 	movt	r1, #2
   17570:	e3a02061 	mov	r2, #97	; 0x61
   17574:	ebfffd0d 	bl	169b0 <uspi_assertion_failed>
	assert (s_pLibrary->pUKBD1 != 0);
   17578:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   1757c:	e3403003 	movt	r3, #3
   17580:	e5933000 	ldr	r3, [r3]
   17584:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   17588:	e3530000 	cmp	r3, #0
   1758c:	1a000005 	bne	175a8 <USPiKeyboardRegisterKeyPressedHandler+0x84>
   17590:	e30e0064 	movw	r0, #57444	; 0xe064
   17594:	e3400002 	movt	r0, #2
   17598:	e30d1f74 	movw	r1, #57204	; 0xdf74
   1759c:	e3401002 	movt	r1, #2
   175a0:	e3a02062 	mov	r2, #98	; 0x62
   175a4:	ebfffd01 	bl	169b0 <uspi_assertion_failed>
	USBKeyboardDeviceRegisterKeyPressedHandler (s_pLibrary->pUKBD1, pKeyPressedHandler);
   175a8:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   175ac:	e3403003 	movt	r3, #3
   175b0:	e5933000 	ldr	r3, [r3]
   175b4:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   175b8:	e1a00003 	mov	r0, r3
   175bc:	e51b1010 	ldr	r1, [fp, #-16]
   175c0:	eb00483b 	bl	296b4 <USBKeyboardDeviceRegisterKeyPressedHandler>
   175c4:	e1a03004 	mov	r3, r4
   175c8:	e3070524 	movw	r0, #29988	; 0x7524
   175cc:	e3400001 	movt	r0, #1
   175d0:	e1a01003 	mov	r1, r3
   175d4:	ebfff8a2 	bl	15864 <__cyg_profile_func_exit>
}
   175d8:	e24bd008 	sub	sp, fp, #8
   175dc:	e8bd8810 	pop	{r4, fp, pc}

000175e0 <USPiKeyboardRegisterShutdownHandler>:

void USPiKeyboardRegisterShutdownHandler (TUSPiShutdownHandler *pShutdownHandler)
{
   175e0:	e92d4810 	push	{r4, fp, lr}
   175e4:	e28db008 	add	fp, sp, #8
   175e8:	e24dd00c 	sub	sp, sp, #12
   175ec:	e1a0400e 	mov	r4, lr
   175f0:	e50b0010 	str	r0, [fp, #-16]
   175f4:	e1a03004 	mov	r3, r4
   175f8:	e30705e0 	movw	r0, #30176	; 0x75e0
   175fc:	e3400001 	movt	r0, #1
   17600:	e1a01003 	mov	r1, r3
   17604:	ebfff844 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17608:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   1760c:	e3403003 	movt	r3, #3
   17610:	e5933000 	ldr	r3, [r3]
   17614:	e3530000 	cmp	r3, #0
   17618:	1a000005 	bne	17634 <USPiKeyboardRegisterShutdownHandler+0x54>
   1761c:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17620:	e3400002 	movt	r0, #2
   17624:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17628:	e3401002 	movt	r1, #2
   1762c:	e3a02068 	mov	r2, #104	; 0x68
   17630:	ebfffcde 	bl	169b0 <uspi_assertion_failed>
	assert (s_pLibrary->pUKBD1 != 0);
   17634:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17638:	e3403003 	movt	r3, #3
   1763c:	e5933000 	ldr	r3, [r3]
   17640:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   17644:	e3530000 	cmp	r3, #0
   17648:	1a000005 	bne	17664 <USPiKeyboardRegisterShutdownHandler+0x84>
   1764c:	e30e0064 	movw	r0, #57444	; 0xe064
   17650:	e3400002 	movt	r0, #2
   17654:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17658:	e3401002 	movt	r1, #2
   1765c:	e3a02069 	mov	r2, #105	; 0x69
   17660:	ebfffcd2 	bl	169b0 <uspi_assertion_failed>
	USBKeyboardDeviceRegisterShutdownHandler (s_pLibrary->pUKBD1, pShutdownHandler);
   17664:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17668:	e3403003 	movt	r3, #3
   1766c:	e5933000 	ldr	r3, [r3]
   17670:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   17674:	e1a00003 	mov	r0, r3
   17678:	e51b1010 	ldr	r1, [fp, #-16]
   1767c:	eb00485a 	bl	297ec <USBKeyboardDeviceRegisterShutdownHandler>
   17680:	e1a03004 	mov	r3, r4
   17684:	e30705e0 	movw	r0, #30176	; 0x75e0
   17688:	e3400001 	movt	r0, #1
   1768c:	e1a01003 	mov	r1, r3
   17690:	ebfff873 	bl	15864 <__cyg_profile_func_exit>
}
   17694:	e24bd008 	sub	sp, fp, #8
   17698:	e8bd8810 	pop	{r4, fp, pc}

0001769c <USPiKeyboardRegisterKeyStatusHandlerRaw>:

void USPiKeyboardRegisterKeyStatusHandlerRaw (TKeyStatusHandlerRaw *pKeyStatusHandlerRaw)
{
   1769c:	e92d4810 	push	{r4, fp, lr}
   176a0:	e28db008 	add	fp, sp, #8
   176a4:	e24dd00c 	sub	sp, sp, #12
   176a8:	e1a0400e 	mov	r4, lr
   176ac:	e50b0010 	str	r0, [fp, #-16]
   176b0:	e1a03004 	mov	r3, r4
   176b4:	e307069c 	movw	r0, #30364	; 0x769c
   176b8:	e3400001 	movt	r0, #1
   176bc:	e1a01003 	mov	r1, r3
   176c0:	ebfff815 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   176c4:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   176c8:	e3403003 	movt	r3, #3
   176cc:	e5933000 	ldr	r3, [r3]
   176d0:	e3530000 	cmp	r3, #0
   176d4:	1a000005 	bne	176f0 <USPiKeyboardRegisterKeyStatusHandlerRaw+0x54>
   176d8:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   176dc:	e3400002 	movt	r0, #2
   176e0:	e30d1f74 	movw	r1, #57204	; 0xdf74
   176e4:	e3401002 	movt	r1, #2
   176e8:	e3a0206f 	mov	r2, #111	; 0x6f
   176ec:	ebfffcaf 	bl	169b0 <uspi_assertion_failed>
	assert (s_pLibrary->pUKBD1 != 0);
   176f0:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   176f4:	e3403003 	movt	r3, #3
   176f8:	e5933000 	ldr	r3, [r3]
   176fc:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   17700:	e3530000 	cmp	r3, #0
   17704:	1a000005 	bne	17720 <USPiKeyboardRegisterKeyStatusHandlerRaw+0x84>
   17708:	e30e0064 	movw	r0, #57444	; 0xe064
   1770c:	e3400002 	movt	r0, #2
   17710:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17714:	e3401002 	movt	r1, #2
   17718:	e3a02070 	mov	r2, #112	; 0x70
   1771c:	ebfffca3 	bl	169b0 <uspi_assertion_failed>
	USBKeyboardDeviceRegisterKeyStatusHandlerRaw (s_pLibrary->pUKBD1, pKeyStatusHandlerRaw);
   17720:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17724:	e3403003 	movt	r3, #3
   17728:	e5933000 	ldr	r3, [r3]
   1772c:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   17730:	e1a00003 	mov	r0, r3
   17734:	e51b1010 	ldr	r1, [fp, #-16]
   17738:	eb004852 	bl	29888 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw>
   1773c:	e1a03004 	mov	r3, r4
   17740:	e307069c 	movw	r0, #30364	; 0x769c
   17744:	e3400001 	movt	r0, #1
   17748:	e1a01003 	mov	r1, r3
   1774c:	ebfff844 	bl	15864 <__cyg_profile_func_exit>
}
   17750:	e24bd008 	sub	sp, fp, #8
   17754:	e8bd8810 	pop	{r4, fp, pc}

00017758 <USPiMouseAvailable>:

int USPiMouseAvailable (void)
{
   17758:	e92d4830 	push	{r4, r5, fp, lr}
   1775c:	e28db00c 	add	fp, sp, #12
   17760:	e1a0400e 	mov	r4, lr
   17764:	e1a03004 	mov	r3, r4
   17768:	e3070758 	movw	r0, #30552	; 0x7758
   1776c:	e3400001 	movt	r0, #1
   17770:	e1a01003 	mov	r1, r3
   17774:	ebfff7e8 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17778:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   1777c:	e3403003 	movt	r3, #3
   17780:	e5933000 	ldr	r3, [r3]
   17784:	e3530000 	cmp	r3, #0
   17788:	1a000005 	bne	177a4 <USPiMouseAvailable+0x4c>
   1778c:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17790:	e3400002 	movt	r0, #2
   17794:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17798:	e3401002 	movt	r1, #2
   1779c:	e3a02076 	mov	r2, #118	; 0x76
   177a0:	ebfffc82 	bl	169b0 <uspi_assertion_failed>
	return s_pLibrary->pUMouse1 != 0;
   177a4:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   177a8:	e3403003 	movt	r3, #3
   177ac:	e5933000 	ldr	r3, [r3]
   177b0:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
   177b4:	e3530000 	cmp	r3, #0
   177b8:	13a03001 	movne	r3, #1
   177bc:	03a03000 	moveq	r3, #0
   177c0:	e6ef3073 	uxtb	r3, r3
   177c4:	e1a05003 	mov	r5, r3
   177c8:	e1a03004 	mov	r3, r4
   177cc:	e3070758 	movw	r0, #30552	; 0x7758
   177d0:	e3400001 	movt	r0, #1
   177d4:	e1a01003 	mov	r1, r3
   177d8:	ebfff821 	bl	15864 <__cyg_profile_func_exit>
   177dc:	e1a03005 	mov	r3, r5
}
   177e0:	e1a00003 	mov	r0, r3
   177e4:	e8bd8830 	pop	{r4, r5, fp, pc}

000177e8 <USPiMouseRegisterStatusHandler>:

void USPiMouseRegisterStatusHandler (TUSPiMouseStatusHandler *pStatusHandler)
{
   177e8:	e92d4810 	push	{r4, fp, lr}
   177ec:	e28db008 	add	fp, sp, #8
   177f0:	e24dd00c 	sub	sp, sp, #12
   177f4:	e1a0400e 	mov	r4, lr
   177f8:	e50b0010 	str	r0, [fp, #-16]
   177fc:	e1a03004 	mov	r3, r4
   17800:	e30707e8 	movw	r0, #30696	; 0x77e8
   17804:	e3400001 	movt	r0, #1
   17808:	e1a01003 	mov	r1, r3
   1780c:	ebfff7c2 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17810:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17814:	e3403003 	movt	r3, #3
   17818:	e5933000 	ldr	r3, [r3]
   1781c:	e3530000 	cmp	r3, #0
   17820:	1a000005 	bne	1783c <USPiMouseRegisterStatusHandler+0x54>
   17824:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17828:	e3400002 	movt	r0, #2
   1782c:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17830:	e3401002 	movt	r1, #2
   17834:	e3a0207c 	mov	r2, #124	; 0x7c
   17838:	ebfffc5c 	bl	169b0 <uspi_assertion_failed>
	assert (s_pLibrary->pUMouse1 != 0);
   1783c:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17840:	e3403003 	movt	r3, #3
   17844:	e5933000 	ldr	r3, [r3]
   17848:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
   1784c:	e3530000 	cmp	r3, #0
   17850:	1a000005 	bne	1786c <USPiMouseRegisterStatusHandler+0x84>
   17854:	e30e007c 	movw	r0, #57468	; 0xe07c
   17858:	e3400002 	movt	r0, #2
   1785c:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17860:	e3401002 	movt	r1, #2
   17864:	e3a0207d 	mov	r2, #125	; 0x7d
   17868:	ebfffc50 	bl	169b0 <uspi_assertion_failed>
	USBMouseDeviceRegisterStatusHandler (s_pLibrary->pUMouse1, pStatusHandler);
   1786c:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17870:	e3403003 	movt	r3, #3
   17874:	e5933000 	ldr	r3, [r3]
   17878:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
   1787c:	e1a00003 	mov	r0, r3
   17880:	e51b1010 	ldr	r1, [fp, #-16]
   17884:	eb004c94 	bl	2aadc <USBMouseDeviceRegisterStatusHandler>
   17888:	e1a03004 	mov	r3, r4
   1788c:	e30707e8 	movw	r0, #30696	; 0x77e8
   17890:	e3400001 	movt	r0, #1
   17894:	e1a01003 	mov	r1, r3
   17898:	ebfff7f1 	bl	15864 <__cyg_profile_func_exit>
}
   1789c:	e24bd008 	sub	sp, fp, #8
   178a0:	e8bd8810 	pop	{r4, fp, pc}

000178a4 <USPiMassStorageDeviceAvailable>:

int USPiMassStorageDeviceAvailable (void)
{
   178a4:	e92d4830 	push	{r4, r5, fp, lr}
   178a8:	e28db00c 	add	fp, sp, #12
   178ac:	e24dd008 	sub	sp, sp, #8
   178b0:	e1a0500e 	mov	r5, lr
   178b4:	e1a03005 	mov	r3, r5
   178b8:	e30708a4 	movw	r0, #30884	; 0x78a4
   178bc:	e3400001 	movt	r0, #1
   178c0:	e1a01003 	mov	r1, r3
   178c4:	ebfff794 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   178c8:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   178cc:	e3403003 	movt	r3, #3
   178d0:	e5933000 	ldr	r3, [r3]
   178d4:	e3530000 	cmp	r3, #0
   178d8:	1a000005 	bne	178f4 <USPiMassStorageDeviceAvailable+0x50>
   178dc:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   178e0:	e3400002 	movt	r0, #2
   178e4:	e30d1f74 	movw	r1, #57204	; 0xdf74
   178e8:	e3401002 	movt	r1, #2
   178ec:	e3a02083 	mov	r2, #131	; 0x83
   178f0:	ebfffc2e 	bl	169b0 <uspi_assertion_failed>

	unsigned i;
	for (i = 0; i < MAX_DEVICES; i++)
   178f4:	e3a03000 	mov	r3, #0
   178f8:	e50b3010 	str	r3, [fp, #-16]
   178fc:	ea00000b 	b	17930 <USPiMassStorageDeviceAvailable+0x8c>
	{
		if (s_pLibrary->pUMSD[i] == 0)
   17900:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17904:	e3403003 	movt	r3, #3
   17908:	e5933000 	ldr	r3, [r3]
   1790c:	e51b2010 	ldr	r2, [fp, #-16]
   17910:	e2822018 	add	r2, r2, #24
   17914:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   17918:	e3530000 	cmp	r3, #0
   1791c:	1a000000 	bne	17924 <USPiMassStorageDeviceAvailable+0x80>
		{
			break;
   17920:	ea000005 	b	1793c <USPiMassStorageDeviceAvailable+0x98>
int USPiMassStorageDeviceAvailable (void)
{
	assert (s_pLibrary != 0);

	unsigned i;
	for (i = 0; i < MAX_DEVICES; i++)
   17924:	e51b3010 	ldr	r3, [fp, #-16]
   17928:	e2833001 	add	r3, r3, #1
   1792c:	e50b3010 	str	r3, [fp, #-16]
   17930:	e51b3010 	ldr	r3, [fp, #-16]
   17934:	e3530003 	cmp	r3, #3
   17938:	9afffff0 	bls	17900 <USPiMassStorageDeviceAvailable+0x5c>
		{
			break;
		}
	}

	return (int) i;
   1793c:	e51b4010 	ldr	r4, [fp, #-16]
   17940:	e1a03005 	mov	r3, r5
   17944:	e30708a4 	movw	r0, #30884	; 0x78a4
   17948:	e3400001 	movt	r0, #1
   1794c:	e1a01003 	mov	r1, r3
   17950:	ebfff7c3 	bl	15864 <__cyg_profile_func_exit>
   17954:	e1a03004 	mov	r3, r4
}
   17958:	e1a00003 	mov	r0, r3
   1795c:	e24bd00c 	sub	sp, fp, #12
   17960:	e8bd8830 	pop	{r4, r5, fp, pc}

00017964 <USPiMassStorageDeviceRead>:

int USPiMassStorageDeviceRead (unsigned long long ullOffset, void *pBuffer, unsigned nCount, unsigned nDeviceIndex)
{
   17964:	e92d4830 	push	{r4, r5, fp, lr}
   17968:	e28db00c 	add	fp, sp, #12
   1796c:	e24dd010 	sub	sp, sp, #16
   17970:	e1a0500e 	mov	r5, lr
   17974:	e14b01f4 	strd	r0, [fp, #-20]	; 0xffffffec
   17978:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   1797c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   17980:	e1a03005 	mov	r3, r5
   17984:	e3070964 	movw	r0, #31076	; 0x7964
   17988:	e3400001 	movt	r0, #1
   1798c:	e1a01003 	mov	r1, r3
   17990:	ebfff761 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17994:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17998:	e3403003 	movt	r3, #3
   1799c:	e5933000 	ldr	r3, [r3]
   179a0:	e3530000 	cmp	r3, #0
   179a4:	1a000005 	bne	179c0 <USPiMassStorageDeviceRead+0x5c>
   179a8:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   179ac:	e3400002 	movt	r0, #2
   179b0:	e30d1f74 	movw	r1, #57204	; 0xdf74
   179b4:	e3401002 	movt	r1, #2
   179b8:	e3a02093 	mov	r2, #147	; 0x93
   179bc:	ebfffbfb 	bl	169b0 <uspi_assertion_failed>

	if (   nDeviceIndex >= MAX_DEVICES
   179c0:	e59b3004 	ldr	r3, [fp, #4]
   179c4:	e3530003 	cmp	r3, #3
   179c8:	8a000007 	bhi	179ec <USPiMassStorageDeviceRead+0x88>
	    || s_pLibrary->pUMSD[nDeviceIndex] == 0)
   179cc:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   179d0:	e3403003 	movt	r3, #3
   179d4:	e5933000 	ldr	r3, [r3]
   179d8:	e59b2004 	ldr	r2, [fp, #4]
   179dc:	e2822018 	add	r2, r2, #24
   179e0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   179e4:	e3530000 	cmp	r3, #0
   179e8:	1a000001 	bne	179f4 <USPiMassStorageDeviceRead+0x90>
	{
		return -1;
   179ec:	e3e04000 	mvn	r4, #0
   179f0:	ea000019 	b	17a5c <USPiMassStorageDeviceRead+0xf8>
	}

	if (USBBulkOnlyMassStorageDeviceSeek (s_pLibrary->pUMSD[nDeviceIndex], ullOffset) != ullOffset)
   179f4:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   179f8:	e3403003 	movt	r3, #3
   179fc:	e5933000 	ldr	r3, [r3]
   17a00:	e59b2004 	ldr	r2, [fp, #4]
   17a04:	e2822018 	add	r2, r2, #24
   17a08:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   17a0c:	e1a00003 	mov	r0, r3
   17a10:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   17a14:	eb003e11 	bl	27260 <USBBulkOnlyMassStorageDeviceSeek>
   17a18:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   17a1c:	e1510003 	cmp	r1, r3
   17a20:	01500002 	cmpeq	r0, r2
   17a24:	0a000001 	beq	17a30 <USPiMassStorageDeviceRead+0xcc>
	{
		return -1;
   17a28:	e3e04000 	mvn	r4, #0
   17a2c:	ea00000a 	b	17a5c <USPiMassStorageDeviceRead+0xf8>
	}

	return USBBulkOnlyMassStorageDeviceRead (s_pLibrary->pUMSD[nDeviceIndex], pBuffer, nCount);
   17a30:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17a34:	e3403003 	movt	r3, #3
   17a38:	e5933000 	ldr	r3, [r3]
   17a3c:	e59b2004 	ldr	r2, [fp, #4]
   17a40:	e2822018 	add	r2, r2, #24
   17a44:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   17a48:	e1a00003 	mov	r0, r3
   17a4c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   17a50:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   17a54:	eb003d89 	bl	27080 <USBBulkOnlyMassStorageDeviceRead>
   17a58:	e1a04000 	mov	r4, r0
   17a5c:	e1a03005 	mov	r3, r5
   17a60:	e3070964 	movw	r0, #31076	; 0x7964
   17a64:	e3400001 	movt	r0, #1
   17a68:	e1a01003 	mov	r1, r3
   17a6c:	ebfff77c 	bl	15864 <__cyg_profile_func_exit>
   17a70:	e1a03004 	mov	r3, r4
}
   17a74:	e1a00003 	mov	r0, r3
   17a78:	e24bd00c 	sub	sp, fp, #12
   17a7c:	e8bd8830 	pop	{r4, r5, fp, pc}

00017a80 <USPiMassStorageDeviceWrite>:

int USPiMassStorageDeviceWrite (unsigned long long ullOffset, const void *pBuffer, unsigned nCount, unsigned nDeviceIndex)
{
   17a80:	e92d4830 	push	{r4, r5, fp, lr}
   17a84:	e28db00c 	add	fp, sp, #12
   17a88:	e24dd010 	sub	sp, sp, #16
   17a8c:	e1a0500e 	mov	r5, lr
   17a90:	e14b01f4 	strd	r0, [fp, #-20]	; 0xffffffec
   17a94:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   17a98:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   17a9c:	e1a03005 	mov	r3, r5
   17aa0:	e3070a80 	movw	r0, #31360	; 0x7a80
   17aa4:	e3400001 	movt	r0, #1
   17aa8:	e1a01003 	mov	r1, r3
   17aac:	ebfff71a 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17ab0:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17ab4:	e3403003 	movt	r3, #3
   17ab8:	e5933000 	ldr	r3, [r3]
   17abc:	e3530000 	cmp	r3, #0
   17ac0:	1a000005 	bne	17adc <USPiMassStorageDeviceWrite+0x5c>
   17ac4:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17ac8:	e3400002 	movt	r0, #2
   17acc:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17ad0:	e3401002 	movt	r1, #2
   17ad4:	e3a020a5 	mov	r2, #165	; 0xa5
   17ad8:	ebfffbb4 	bl	169b0 <uspi_assertion_failed>

	if (   nDeviceIndex >= MAX_DEVICES
   17adc:	e59b3004 	ldr	r3, [fp, #4]
   17ae0:	e3530003 	cmp	r3, #3
   17ae4:	8a000007 	bhi	17b08 <USPiMassStorageDeviceWrite+0x88>
	    || s_pLibrary->pUMSD[nDeviceIndex] == 0)
   17ae8:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17aec:	e3403003 	movt	r3, #3
   17af0:	e5933000 	ldr	r3, [r3]
   17af4:	e59b2004 	ldr	r2, [fp, #4]
   17af8:	e2822018 	add	r2, r2, #24
   17afc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   17b00:	e3530000 	cmp	r3, #0
   17b04:	1a000001 	bne	17b10 <USPiMassStorageDeviceWrite+0x90>
	{
		return -1;
   17b08:	e3e04000 	mvn	r4, #0
   17b0c:	ea000019 	b	17b78 <USPiMassStorageDeviceWrite+0xf8>
	}

	if (USBBulkOnlyMassStorageDeviceSeek (s_pLibrary->pUMSD[nDeviceIndex], ullOffset) != ullOffset)
   17b10:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17b14:	e3403003 	movt	r3, #3
   17b18:	e5933000 	ldr	r3, [r3]
   17b1c:	e59b2004 	ldr	r2, [fp, #4]
   17b20:	e2822018 	add	r2, r2, #24
   17b24:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   17b28:	e1a00003 	mov	r0, r3
   17b2c:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   17b30:	eb003dca 	bl	27260 <USBBulkOnlyMassStorageDeviceSeek>
   17b34:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   17b38:	e1510003 	cmp	r1, r3
   17b3c:	01500002 	cmpeq	r0, r2
   17b40:	0a000001 	beq	17b4c <USPiMassStorageDeviceWrite+0xcc>
	{
		return -1;
   17b44:	e3e04000 	mvn	r4, #0
   17b48:	ea00000a 	b	17b78 <USPiMassStorageDeviceWrite+0xf8>
	}

	return USBBulkOnlyMassStorageDeviceWrite (s_pLibrary->pUMSD[nDeviceIndex], pBuffer, nCount);
   17b4c:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17b50:	e3403003 	movt	r3, #3
   17b54:	e5933000 	ldr	r3, [r3]
   17b58:	e59b2004 	ldr	r2, [fp, #4]
   17b5c:	e2822018 	add	r2, r2, #24
   17b60:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   17b64:	e1a00003 	mov	r0, r3
   17b68:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   17b6c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   17b70:	eb003d7e 	bl	27170 <USBBulkOnlyMassStorageDeviceWrite>
   17b74:	e1a04000 	mov	r4, r0
   17b78:	e1a03005 	mov	r3, r5
   17b7c:	e3070a80 	movw	r0, #31360	; 0x7a80
   17b80:	e3400001 	movt	r0, #1
   17b84:	e1a01003 	mov	r1, r3
   17b88:	ebfff735 	bl	15864 <__cyg_profile_func_exit>
   17b8c:	e1a03004 	mov	r3, r4
}
   17b90:	e1a00003 	mov	r0, r3
   17b94:	e24bd00c 	sub	sp, fp, #12
   17b98:	e8bd8830 	pop	{r4, r5, fp, pc}

00017b9c <USPiMassStorageDeviceGetCapacity>:

unsigned USPiMassStorageDeviceGetCapacity (unsigned nDeviceIndex)
{
   17b9c:	e92d4830 	push	{r4, r5, fp, lr}
   17ba0:	e28db00c 	add	fp, sp, #12
   17ba4:	e24dd008 	sub	sp, sp, #8
   17ba8:	e1a0500e 	mov	r5, lr
   17bac:	e50b0010 	str	r0, [fp, #-16]
   17bb0:	e1a03005 	mov	r3, r5
   17bb4:	e3070b9c 	movw	r0, #31644	; 0x7b9c
   17bb8:	e3400001 	movt	r0, #1
   17bbc:	e1a01003 	mov	r1, r3
   17bc0:	ebfff6d5 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17bc4:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17bc8:	e3403003 	movt	r3, #3
   17bcc:	e5933000 	ldr	r3, [r3]
   17bd0:	e3530000 	cmp	r3, #0
   17bd4:	1a000005 	bne	17bf0 <USPiMassStorageDeviceGetCapacity+0x54>
   17bd8:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17bdc:	e3400002 	movt	r0, #2
   17be0:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17be4:	e3401002 	movt	r1, #2
   17be8:	e3a020b7 	mov	r2, #183	; 0xb7
   17bec:	ebfffb6f 	bl	169b0 <uspi_assertion_failed>

	if (   nDeviceIndex >= MAX_DEVICES
   17bf0:	e51b3010 	ldr	r3, [fp, #-16]
   17bf4:	e3530003 	cmp	r3, #3
   17bf8:	8a000007 	bhi	17c1c <USPiMassStorageDeviceGetCapacity+0x80>
	    || s_pLibrary->pUMSD[nDeviceIndex] == 0)
   17bfc:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17c00:	e3403003 	movt	r3, #3
   17c04:	e5933000 	ldr	r3, [r3]
   17c08:	e51b2010 	ldr	r2, [fp, #-16]
   17c0c:	e2822018 	add	r2, r2, #24
   17c10:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   17c14:	e3530000 	cmp	r3, #0
   17c18:	1a000001 	bne	17c24 <USPiMassStorageDeviceGetCapacity+0x88>
	{
		return 0;
   17c1c:	e3a04000 	mov	r4, #0
   17c20:	ea000008 	b	17c48 <USPiMassStorageDeviceGetCapacity+0xac>
	}

	return USBBulkOnlyMassStorageDeviceGetCapacity (s_pLibrary->pUMSD[nDeviceIndex]);
   17c24:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17c28:	e3403003 	movt	r3, #3
   17c2c:	e5933000 	ldr	r3, [r3]
   17c30:	e51b2010 	ldr	r2, [fp, #-16]
   17c34:	e2822018 	add	r2, r2, #24
   17c38:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   17c3c:	e1a00003 	mov	r0, r3
   17c40:	eb003daa 	bl	272f0 <USBBulkOnlyMassStorageDeviceGetCapacity>
   17c44:	e1a04000 	mov	r4, r0
   17c48:	e1a03005 	mov	r3, r5
   17c4c:	e3070b9c 	movw	r0, #31644	; 0x7b9c
   17c50:	e3400001 	movt	r0, #1
   17c54:	e1a01003 	mov	r1, r3
   17c58:	ebfff701 	bl	15864 <__cyg_profile_func_exit>
   17c5c:	e1a03004 	mov	r3, r4
}
   17c60:	e1a00003 	mov	r0, r3
   17c64:	e24bd00c 	sub	sp, fp, #12
   17c68:	e8bd8830 	pop	{r4, r5, fp, pc}

00017c6c <USPiEthernetAvailable>:

int USPiEthernetAvailable (void)
{
   17c6c:	e92d4830 	push	{r4, r5, fp, lr}
   17c70:	e28db00c 	add	fp, sp, #12
   17c74:	e1a0400e 	mov	r4, lr
   17c78:	e1a03004 	mov	r3, r4
   17c7c:	e3070c6c 	movw	r0, #31852	; 0x7c6c
   17c80:	e3400001 	movt	r0, #1
   17c84:	e1a01003 	mov	r1, r3
   17c88:	ebfff6a3 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17c8c:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17c90:	e3403003 	movt	r3, #3
   17c94:	e5933000 	ldr	r3, [r3]
   17c98:	e3530000 	cmp	r3, #0
   17c9c:	1a000005 	bne	17cb8 <USPiEthernetAvailable+0x4c>
   17ca0:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17ca4:	e3400002 	movt	r0, #2
   17ca8:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17cac:	e3401002 	movt	r1, #2
   17cb0:	e3a020c4 	mov	r2, #196	; 0xc4
   17cb4:	ebfffb3d 	bl	169b0 <uspi_assertion_failed>
	return s_pLibrary->pEth0 != 0;
   17cb8:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17cbc:	e3403003 	movt	r3, #3
   17cc0:	e5933000 	ldr	r3, [r3]
   17cc4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   17cc8:	e3530000 	cmp	r3, #0
   17ccc:	13a03001 	movne	r3, #1
   17cd0:	03a03000 	moveq	r3, #0
   17cd4:	e6ef3073 	uxtb	r3, r3
   17cd8:	e1a05003 	mov	r5, r3
   17cdc:	e1a03004 	mov	r3, r4
   17ce0:	e3070c6c 	movw	r0, #31852	; 0x7c6c
   17ce4:	e3400001 	movt	r0, #1
   17ce8:	e1a01003 	mov	r1, r3
   17cec:	ebfff6dc 	bl	15864 <__cyg_profile_func_exit>
   17cf0:	e1a03005 	mov	r3, r5
}
   17cf4:	e1a00003 	mov	r0, r3
   17cf8:	e8bd8830 	pop	{r4, r5, fp, pc}

00017cfc <USPiGetMACAddress>:

void USPiGetMACAddress (unsigned char Buffer[6])
{
   17cfc:	e92d4810 	push	{r4, fp, lr}
   17d00:	e28db008 	add	fp, sp, #8
   17d04:	e24dd014 	sub	sp, sp, #20
   17d08:	e1a0400e 	mov	r4, lr
   17d0c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   17d10:	e1a03004 	mov	r3, r4
   17d14:	e3070cfc 	movw	r0, #31996	; 0x7cfc
   17d18:	e3400001 	movt	r0, #1
   17d1c:	e1a01003 	mov	r1, r3
   17d20:	ebfff67d 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17d24:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17d28:	e3403003 	movt	r3, #3
   17d2c:	e5933000 	ldr	r3, [r3]
   17d30:	e3530000 	cmp	r3, #0
   17d34:	1a000005 	bne	17d50 <USPiGetMACAddress+0x54>
   17d38:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17d3c:	e3400002 	movt	r0, #2
   17d40:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17d44:	e3401002 	movt	r1, #2
   17d48:	e3a020ca 	mov	r2, #202	; 0xca
   17d4c:	ebfffb17 	bl	169b0 <uspi_assertion_failed>
	assert (s_pLibrary->pEth0 != 0);
   17d50:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17d54:	e3403003 	movt	r3, #3
   17d58:	e5933000 	ldr	r3, [r3]
   17d5c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   17d60:	e3530000 	cmp	r3, #0
   17d64:	1a000005 	bne	17d80 <USPiGetMACAddress+0x84>
   17d68:	e30e0098 	movw	r0, #57496	; 0xe098
   17d6c:	e3400002 	movt	r0, #2
   17d70:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17d74:	e3401002 	movt	r1, #2
   17d78:	e3a020cb 	mov	r2, #203	; 0xcb
   17d7c:	ebfffb0b 	bl	169b0 <uspi_assertion_failed>
	TMACAddress *pMACAddress = SMSC951xDeviceGetMACAddress (s_pLibrary->pEth0);
   17d80:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17d84:	e3403003 	movt	r3, #3
   17d88:	e5933000 	ldr	r3, [r3]
   17d8c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   17d90:	e1a00003 	mov	r0, r3
   17d94:	eb0031bd 	bl	24490 <SMSC951xDeviceGetMACAddress>
   17d98:	e50b0010 	str	r0, [fp, #-16]

	assert (Buffer != 0);
   17d9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17da0:	e3530000 	cmp	r3, #0
   17da4:	1a000005 	bne	17dc0 <USPiGetMACAddress+0xc4>
   17da8:	e30e00b0 	movw	r0, #57520	; 0xe0b0
   17dac:	e3400002 	movt	r0, #2
   17db0:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17db4:	e3401002 	movt	r1, #2
   17db8:	e3a020ce 	mov	r2, #206	; 0xce
   17dbc:	ebfffafb 	bl	169b0 <uspi_assertion_failed>
	MACAddressCopyTo (pMACAddress, Buffer);
   17dc0:	e51b0010 	ldr	r0, [fp, #-16]
   17dc4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   17dc8:	eb002eff 	bl	239cc <MACAddressCopyTo>
   17dcc:	e1a03004 	mov	r3, r4
   17dd0:	e3070cfc 	movw	r0, #31996	; 0x7cfc
   17dd4:	e3400001 	movt	r0, #1
   17dd8:	e1a01003 	mov	r1, r3
   17ddc:	ebfff6a0 	bl	15864 <__cyg_profile_func_exit>
}
   17de0:	e24bd008 	sub	sp, fp, #8
   17de4:	e8bd8810 	pop	{r4, fp, pc}

00017de8 <USPiSendFrame>:

int USPiSendFrame (const void *pBuffer, unsigned nLength)
{
   17de8:	e92d4830 	push	{r4, r5, fp, lr}
   17dec:	e28db00c 	add	fp, sp, #12
   17df0:	e24dd008 	sub	sp, sp, #8
   17df4:	e1a0400e 	mov	r4, lr
   17df8:	e50b0010 	str	r0, [fp, #-16]
   17dfc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   17e00:	e1a03004 	mov	r3, r4
   17e04:	e3070de8 	movw	r0, #32232	; 0x7de8
   17e08:	e3400001 	movt	r0, #1
   17e0c:	e1a01003 	mov	r1, r3
   17e10:	ebfff641 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17e14:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17e18:	e3403003 	movt	r3, #3
   17e1c:	e5933000 	ldr	r3, [r3]
   17e20:	e3530000 	cmp	r3, #0
   17e24:	1a000005 	bne	17e40 <USPiSendFrame+0x58>
   17e28:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17e2c:	e3400002 	movt	r0, #2
   17e30:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17e34:	e3401002 	movt	r1, #2
   17e38:	e3a020d4 	mov	r2, #212	; 0xd4
   17e3c:	ebfffadb 	bl	169b0 <uspi_assertion_failed>
	assert (s_pLibrary->pEth0 != 0);
   17e40:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17e44:	e3403003 	movt	r3, #3
   17e48:	e5933000 	ldr	r3, [r3]
   17e4c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   17e50:	e3530000 	cmp	r3, #0
   17e54:	1a000005 	bne	17e70 <USPiSendFrame+0x88>
   17e58:	e30e0098 	movw	r0, #57496	; 0xe098
   17e5c:	e3400002 	movt	r0, #2
   17e60:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17e64:	e3401002 	movt	r1, #2
   17e68:	e3a020d5 	mov	r2, #213	; 0xd5
   17e6c:	ebfffacf 	bl	169b0 <uspi_assertion_failed>
	return SMSC951xDeviceSendFrame (s_pLibrary->pEth0, pBuffer, nLength) ? 1 : 0;
   17e70:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17e74:	e3403003 	movt	r3, #3
   17e78:	e5933000 	ldr	r3, [r3]
   17e7c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   17e80:	e1a00003 	mov	r0, r3
   17e84:	e51b1010 	ldr	r1, [fp, #-16]
   17e88:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   17e8c:	eb00319d 	bl	24508 <SMSC951xDeviceSendFrame>
   17e90:	e1a03000 	mov	r3, r0
   17e94:	e3530000 	cmp	r3, #0
   17e98:	13a03001 	movne	r3, #1
   17e9c:	03a03000 	moveq	r3, #0
   17ea0:	e6ef3073 	uxtb	r3, r3
   17ea4:	e1a05003 	mov	r5, r3
   17ea8:	e1a03004 	mov	r3, r4
   17eac:	e3070de8 	movw	r0, #32232	; 0x7de8
   17eb0:	e3400001 	movt	r0, #1
   17eb4:	e1a01003 	mov	r1, r3
   17eb8:	ebfff669 	bl	15864 <__cyg_profile_func_exit>
   17ebc:	e1a03005 	mov	r3, r5
}
   17ec0:	e1a00003 	mov	r0, r3
   17ec4:	e24bd00c 	sub	sp, fp, #12
   17ec8:	e8bd8830 	pop	{r4, r5, fp, pc}

00017ecc <USPiReceiveFrame>:

int USPiReceiveFrame (void *pBuffer, unsigned *pResultLength)
{
   17ecc:	e92d4830 	push	{r4, r5, fp, lr}
   17ed0:	e28db00c 	add	fp, sp, #12
   17ed4:	e24dd008 	sub	sp, sp, #8
   17ed8:	e1a0400e 	mov	r4, lr
   17edc:	e50b0010 	str	r0, [fp, #-16]
   17ee0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   17ee4:	e1a03004 	mov	r3, r4
   17ee8:	e3070ecc 	movw	r0, #32460	; 0x7ecc
   17eec:	e3400001 	movt	r0, #1
   17ef0:	e1a01003 	mov	r1, r3
   17ef4:	ebfff608 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17ef8:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17efc:	e3403003 	movt	r3, #3
   17f00:	e5933000 	ldr	r3, [r3]
   17f04:	e3530000 	cmp	r3, #0
   17f08:	1a000005 	bne	17f24 <USPiReceiveFrame+0x58>
   17f0c:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17f10:	e3400002 	movt	r0, #2
   17f14:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17f18:	e3401002 	movt	r1, #2
   17f1c:	e3a020db 	mov	r2, #219	; 0xdb
   17f20:	ebfffaa2 	bl	169b0 <uspi_assertion_failed>
	assert (s_pLibrary->pEth0 != 0);
   17f24:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17f28:	e3403003 	movt	r3, #3
   17f2c:	e5933000 	ldr	r3, [r3]
   17f30:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   17f34:	e3530000 	cmp	r3, #0
   17f38:	1a000005 	bne	17f54 <USPiReceiveFrame+0x88>
   17f3c:	e30e0098 	movw	r0, #57496	; 0xe098
   17f40:	e3400002 	movt	r0, #2
   17f44:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17f48:	e3401002 	movt	r1, #2
   17f4c:	e3a020dc 	mov	r2, #220	; 0xdc
   17f50:	ebfffa96 	bl	169b0 <uspi_assertion_failed>
	return SMSC951xDeviceReceiveFrame (s_pLibrary->pEth0, pBuffer, pResultLength) ? 1 : 0;
   17f54:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17f58:	e3403003 	movt	r3, #3
   17f5c:	e5933000 	ldr	r3, [r3]
   17f60:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   17f64:	e1a00003 	mov	r0, r3
   17f68:	e51b1010 	ldr	r1, [fp, #-16]
   17f6c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   17f70:	eb0031c5 	bl	2468c <SMSC951xDeviceReceiveFrame>
   17f74:	e1a03000 	mov	r3, r0
   17f78:	e3530000 	cmp	r3, #0
   17f7c:	13a03001 	movne	r3, #1
   17f80:	03a03000 	moveq	r3, #0
   17f84:	e6ef3073 	uxtb	r3, r3
   17f88:	e1a05003 	mov	r5, r3
   17f8c:	e1a03004 	mov	r3, r4
   17f90:	e3070ecc 	movw	r0, #32460	; 0x7ecc
   17f94:	e3400001 	movt	r0, #1
   17f98:	e1a01003 	mov	r1, r3
   17f9c:	ebfff630 	bl	15864 <__cyg_profile_func_exit>
   17fa0:	e1a03005 	mov	r3, r5
}
   17fa4:	e1a00003 	mov	r0, r3
   17fa8:	e24bd00c 	sub	sp, fp, #12
   17fac:	e8bd8830 	pop	{r4, r5, fp, pc}

00017fb0 <USPiGamePadAvailable>:

int USPiGamePadAvailable (void)
{
   17fb0:	e92d4830 	push	{r4, r5, fp, lr}
   17fb4:	e28db00c 	add	fp, sp, #12
   17fb8:	e24dd008 	sub	sp, sp, #8
   17fbc:	e1a0500e 	mov	r5, lr
   17fc0:	e1a03005 	mov	r3, r5
   17fc4:	e3070fb0 	movw	r0, #32688	; 0x7fb0
   17fc8:	e3400001 	movt	r0, #1
   17fcc:	e1a01003 	mov	r1, r3
   17fd0:	ebfff5d1 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   17fd4:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   17fd8:	e3403003 	movt	r3, #3
   17fdc:	e5933000 	ldr	r3, [r3]
   17fe0:	e3530000 	cmp	r3, #0
   17fe4:	1a000005 	bne	18000 <USPiGamePadAvailable+0x50>
   17fe8:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   17fec:	e3400002 	movt	r0, #2
   17ff0:	e30d1f74 	movw	r1, #57204	; 0xdf74
   17ff4:	e3401002 	movt	r1, #2
   17ff8:	e3a020e2 	mov	r2, #226	; 0xe2
   17ffc:	ebfffa6b 	bl	169b0 <uspi_assertion_failed>

	unsigned i;
	for (i = 0; i < MAX_DEVICES; i++)
   18000:	e3a03000 	mov	r3, #0
   18004:	e50b3010 	str	r3, [fp, #-16]
   18008:	ea00000d 	b	18044 <USPiGamePadAvailable+0x94>
	{
		if (s_pLibrary->pUPAD[i] == 0)
   1800c:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   18010:	e3403003 	movt	r3, #3
   18014:	e5932000 	ldr	r2, [r3]
   18018:	e51b3010 	ldr	r3, [fp, #-16]
   1801c:	e283301c 	add	r3, r3, #28
   18020:	e1a03103 	lsl	r3, r3, #2
   18024:	e0823003 	add	r3, r2, r3
   18028:	e5933004 	ldr	r3, [r3, #4]
   1802c:	e3530000 	cmp	r3, #0
   18030:	1a000000 	bne	18038 <USPiGamePadAvailable+0x88>
		{
			break;
   18034:	ea000005 	b	18050 <USPiGamePadAvailable+0xa0>
int USPiGamePadAvailable (void)
{
	assert (s_pLibrary != 0);

	unsigned i;
	for (i = 0; i < MAX_DEVICES; i++)
   18038:	e51b3010 	ldr	r3, [fp, #-16]
   1803c:	e2833001 	add	r3, r3, #1
   18040:	e50b3010 	str	r3, [fp, #-16]
   18044:	e51b3010 	ldr	r3, [fp, #-16]
   18048:	e3530003 	cmp	r3, #3
   1804c:	9affffee 	bls	1800c <USPiGamePadAvailable+0x5c>
		{
			break;
		}
	}

	return (int) i;
   18050:	e51b4010 	ldr	r4, [fp, #-16]
   18054:	e1a03005 	mov	r3, r5
   18058:	e3070fb0 	movw	r0, #32688	; 0x7fb0
   1805c:	e3400001 	movt	r0, #1
   18060:	e1a01003 	mov	r1, r3
   18064:	ebfff5fe 	bl	15864 <__cyg_profile_func_exit>
   18068:	e1a03004 	mov	r3, r4
}
   1806c:	e1a00003 	mov	r0, r3
   18070:	e24bd00c 	sub	sp, fp, #12
   18074:	e8bd8830 	pop	{r4, r5, fp, pc}

00018078 <USPiGamePadRegisterStatusHandler>:

void USPiGamePadRegisterStatusHandler (TGamePadStatusHandler *pStatusHandler)
{
   18078:	e92d4810 	push	{r4, fp, lr}
   1807c:	e28db008 	add	fp, sp, #8
   18080:	e24dd014 	sub	sp, sp, #20
   18084:	e1a0400e 	mov	r4, lr
   18088:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1808c:	e1a03004 	mov	r3, r4
   18090:	e3080078 	movw	r0, #32888	; 0x8078
   18094:	e3400001 	movt	r0, #1
   18098:	e1a01003 	mov	r1, r3
   1809c:	ebfff59e 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   180a0:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   180a4:	e3403003 	movt	r3, #3
   180a8:	e5933000 	ldr	r3, [r3]
   180ac:	e3530000 	cmp	r3, #0
   180b0:	1a000005 	bne	180cc <USPiGamePadRegisterStatusHandler+0x54>
   180b4:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   180b8:	e3400002 	movt	r0, #2
   180bc:	e30d1f74 	movw	r1, #57204	; 0xdf74
   180c0:	e3401002 	movt	r1, #2
   180c4:	e3a020f2 	mov	r2, #242	; 0xf2
   180c8:	ebfffa38 	bl	169b0 <uspi_assertion_failed>

    unsigned i;
    for (i = 0; i < MAX_DEVICES; i++)
   180cc:	e3a03000 	mov	r3, #0
   180d0:	e50b3010 	str	r3, [fp, #-16]
   180d4:	ea000017 	b	18138 <USPiGamePadRegisterStatusHandler+0xc0>
    {
        if (s_pLibrary->pUPAD[i] != 0)
   180d8:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   180dc:	e3403003 	movt	r3, #3
   180e0:	e5932000 	ldr	r2, [r3]
   180e4:	e51b3010 	ldr	r3, [fp, #-16]
   180e8:	e283301c 	add	r3, r3, #28
   180ec:	e1a03103 	lsl	r3, r3, #2
   180f0:	e0823003 	add	r3, r2, r3
   180f4:	e5933004 	ldr	r3, [r3, #4]
   180f8:	e3530000 	cmp	r3, #0
   180fc:	0a00000a 	beq	1812c <USPiGamePadRegisterStatusHandler+0xb4>
        {
            USBGamePadDeviceRegisterStatusHandler (s_pLibrary->pUPAD[i], pStatusHandler);
   18100:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   18104:	e3403003 	movt	r3, #3
   18108:	e5932000 	ldr	r2, [r3]
   1810c:	e51b3010 	ldr	r3, [fp, #-16]
   18110:	e283301c 	add	r3, r3, #28
   18114:	e1a03103 	lsl	r3, r3, #2
   18118:	e0823003 	add	r3, r2, r3
   1811c:	e5933004 	ldr	r3, [r3, #4]
   18120:	e1a00003 	mov	r0, r3
   18124:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   18128:	eb00512d 	bl	2c5e4 <USBGamePadDeviceRegisterStatusHandler>
void USPiGamePadRegisterStatusHandler (TGamePadStatusHandler *pStatusHandler)
{
	assert (s_pLibrary != 0);

    unsigned i;
    for (i = 0; i < MAX_DEVICES; i++)
   1812c:	e51b3010 	ldr	r3, [fp, #-16]
   18130:	e2833001 	add	r3, r3, #1
   18134:	e50b3010 	str	r3, [fp, #-16]
   18138:	e51b3010 	ldr	r3, [fp, #-16]
   1813c:	e3530003 	cmp	r3, #3
   18140:	9affffe4 	bls	180d8 <USPiGamePadRegisterStatusHandler+0x60>
   18144:	e1a03004 	mov	r3, r4
   18148:	e3080078 	movw	r0, #32888	; 0x8078
   1814c:	e3400001 	movt	r0, #1
   18150:	e1a01003 	mov	r1, r3
   18154:	ebfff5c2 	bl	15864 <__cyg_profile_func_exit>
        if (s_pLibrary->pUPAD[i] != 0)
        {
            USBGamePadDeviceRegisterStatusHandler (s_pLibrary->pUPAD[i], pStatusHandler);
        }
    }
}
   18158:	e24bd008 	sub	sp, fp, #8
   1815c:	e8bd8810 	pop	{r4, fp, pc}

00018160 <USPiGamePadGetStatus>:

const USPiGamePadState *USPiGamePadGetStatus (unsigned nDeviceIndex)
{
   18160:	e92d4830 	push	{r4, r5, fp, lr}
   18164:	e28db00c 	add	fp, sp, #12
   18168:	e24dd008 	sub	sp, sp, #8
   1816c:	e1a0500e 	mov	r5, lr
   18170:	e50b0010 	str	r0, [fp, #-16]
   18174:	e1a03005 	mov	r3, r5
   18178:	e3080160 	movw	r0, #33120	; 0x8160
   1817c:	e3400001 	movt	r0, #1
   18180:	e1a01003 	mov	r1, r3
   18184:	ebfff564 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   18188:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   1818c:	e3403003 	movt	r3, #3
   18190:	e5933000 	ldr	r3, [r3]
   18194:	e3530000 	cmp	r3, #0
   18198:	1a000005 	bne	181b4 <USPiGamePadGetStatus+0x54>
   1819c:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   181a0:	e3400002 	movt	r0, #2
   181a4:	e30d1f74 	movw	r1, #57204	; 0xdf74
   181a8:	e3401002 	movt	r1, #2
   181ac:	e3a02c01 	mov	r2, #256	; 0x100
   181b0:	ebfff9fe 	bl	169b0 <uspi_assertion_failed>

	if (   nDeviceIndex >= MAX_DEVICES
   181b4:	e51b3010 	ldr	r3, [fp, #-16]
   181b8:	e3530003 	cmp	r3, #3
   181bc:	8a000009 	bhi	181e8 <USPiGamePadGetStatus+0x88>
	    || s_pLibrary->pUPAD[nDeviceIndex] == 0)
   181c0:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   181c4:	e3403003 	movt	r3, #3
   181c8:	e5932000 	ldr	r2, [r3]
   181cc:	e51b3010 	ldr	r3, [fp, #-16]
   181d0:	e283301c 	add	r3, r3, #28
   181d4:	e1a03103 	lsl	r3, r3, #2
   181d8:	e0823003 	add	r3, r2, r3
   181dc:	e5933004 	ldr	r3, [r3, #4]
   181e0:	e3530000 	cmp	r3, #0
   181e4:	1a000001 	bne	181f0 <USPiGamePadGetStatus+0x90>
	{
		return 0;
   181e8:	e3a04000 	mov	r4, #0
   181ec:	ea000012 	b	1823c <USPiGamePadGetStatus+0xdc>
	}

	USBGamePadDeviceGetReport (s_pLibrary->pUPAD[nDeviceIndex]);
   181f0:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   181f4:	e3403003 	movt	r3, #3
   181f8:	e5932000 	ldr	r2, [r3]
   181fc:	e51b3010 	ldr	r3, [fp, #-16]
   18200:	e283301c 	add	r3, r3, #28
   18204:	e1a03103 	lsl	r3, r3, #2
   18208:	e0823003 	add	r3, r2, r3
   1820c:	e5933004 	ldr	r3, [r3, #4]
   18210:	e1a00003 	mov	r0, r3
   18214:	eb0051df 	bl	2c998 <USBGamePadDeviceGetReport>

	return &s_pLibrary->pUPAD[nDeviceIndex]->m_State;
   18218:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   1821c:	e3403003 	movt	r3, #3
   18220:	e5932000 	ldr	r2, [r3]
   18224:	e51b3010 	ldr	r3, [fp, #-16]
   18228:	e283301c 	add	r3, r3, #28
   1822c:	e1a03103 	lsl	r3, r3, #2
   18230:	e0823003 	add	r3, r2, r3
   18234:	e5933004 	ldr	r3, [r3, #4]
   18238:	e2834048 	add	r4, r3, #72	; 0x48
   1823c:	e1a03005 	mov	r3, r5
   18240:	e3080160 	movw	r0, #33120	; 0x8160
   18244:	e3400001 	movt	r0, #1
   18248:	e1a01003 	mov	r1, r3
   1824c:	ebfff584 	bl	15864 <__cyg_profile_func_exit>
   18250:	e1a03004 	mov	r3, r4
}
   18254:	e1a00003 	mov	r0, r3
   18258:	e24bd00c 	sub	sp, fp, #12
   1825c:	e8bd8830 	pop	{r4, r5, fp, pc}

00018260 <USPiDeviceGetInformation>:

int USPiDeviceGetInformation (unsigned nClass, unsigned nDeviceIndex, TUSPiDeviceInformation *pInfo)
{
   18260:	e92d4830 	push	{r4, r5, fp, lr}
   18264:	e28db00c 	add	fp, sp, #12
   18268:	e24dd018 	sub	sp, sp, #24
   1826c:	e1a0500e 	mov	r5, lr
   18270:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   18274:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   18278:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   1827c:	e1a03005 	mov	r3, r5
   18280:	e3080260 	movw	r0, #33376	; 0x8260
   18284:	e3400001 	movt	r0, #1
   18288:	e1a01003 	mov	r1, r3
   1828c:	ebfff522 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pLibrary != 0);
   18290:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   18294:	e3403003 	movt	r3, #3
   18298:	e5933000 	ldr	r3, [r3]
   1829c:	e3530000 	cmp	r3, #0
   182a0:	1a000005 	bne	182bc <USPiDeviceGetInformation+0x5c>
   182a4:	e30d0fd4 	movw	r0, #57300	; 0xdfd4
   182a8:	e3400002 	movt	r0, #2
   182ac:	e30d1f74 	movw	r1, #57204	; 0xdf74
   182b0:	e3401002 	movt	r1, #2
   182b4:	e300210f 	movw	r2, #271	; 0x10f
   182b8:	ebfff9bc 	bl	169b0 <uspi_assertion_failed>

	TUSBDevice *pUSBDevice = 0;
   182bc:	e3a03000 	mov	r3, #0
   182c0:	e50b3010 	str	r3, [fp, #-16]

	switch (nClass)
   182c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   182c8:	e2433001 	sub	r3, r3, #1
   182cc:	e3530004 	cmp	r3, #4
   182d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   182d4:	ea00003c 	b	183cc <USPiDeviceGetInformation+0x16c>
   182d8:	000182ec 	andeq	r8, r1, ip, ror #5
   182dc:	00018314 	andeq	r8, r1, r4, lsl r3
   182e0:	0001833c 	andeq	r8, r1, ip, lsr r3
   182e4:	0001836c 	andeq	r8, r1, ip, ror #6
   182e8:	00018394 	muleq	r1, r4, r3
	{
	case KEYBOARD_CLASS:
		if (nDeviceIndex == 0)
   182ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   182f0:	e3530000 	cmp	r3, #0
   182f4:	1a000005 	bne	18310 <USPiDeviceGetInformation+0xb0>
		{
			pUSBDevice = (TUSBDevice *) s_pLibrary->pUKBD1;
   182f8:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   182fc:	e3403003 	movt	r3, #3
   18300:	e5933000 	ldr	r3, [r3]
   18304:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   18308:	e50b3010 	str	r3, [fp, #-16]
		}
		break;
   1830c:	ea00002f 	b	183d0 <USPiDeviceGetInformation+0x170>
   18310:	ea00002e 	b	183d0 <USPiDeviceGetInformation+0x170>

	case MOUSE_CLASS:
		if (nDeviceIndex == 0)
   18314:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   18318:	e3530000 	cmp	r3, #0
   1831c:	1a000005 	bne	18338 <USPiDeviceGetInformation+0xd8>
		{
			pUSBDevice = (TUSBDevice *) s_pLibrary->pUMouse1;
   18320:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   18324:	e3403003 	movt	r3, #3
   18328:	e5933000 	ldr	r3, [r3]
   1832c:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
   18330:	e50b3010 	str	r3, [fp, #-16]
		}
		break;
   18334:	ea000025 	b	183d0 <USPiDeviceGetInformation+0x170>
   18338:	ea000024 	b	183d0 <USPiDeviceGetInformation+0x170>

	case STORAGE_CLASS:
		if (nDeviceIndex < MAX_DEVICES)
   1833c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   18340:	e3530003 	cmp	r3, #3
   18344:	8a000007 	bhi	18368 <USPiDeviceGetInformation+0x108>
		{
			pUSBDevice = (TUSBDevice *) s_pLibrary->pUMSD[nDeviceIndex];
   18348:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   1834c:	e3403003 	movt	r3, #3
   18350:	e5933000 	ldr	r3, [r3]
   18354:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   18358:	e2822018 	add	r2, r2, #24
   1835c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   18360:	e50b3010 	str	r3, [fp, #-16]
		}
		break;
   18364:	ea000019 	b	183d0 <USPiDeviceGetInformation+0x170>
   18368:	ea000018 	b	183d0 <USPiDeviceGetInformation+0x170>

	case ETHERNET_CLASS:
		if (nDeviceIndex == 0)
   1836c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   18370:	e3530000 	cmp	r3, #0
   18374:	1a000005 	bne	18390 <USPiDeviceGetInformation+0x130>
		{
			pUSBDevice = (TUSBDevice *) s_pLibrary->pEth0;
   18378:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   1837c:	e3403003 	movt	r3, #3
   18380:	e5933000 	ldr	r3, [r3]
   18384:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   18388:	e50b3010 	str	r3, [fp, #-16]
		}
		break;
   1838c:	ea00000f 	b	183d0 <USPiDeviceGetInformation+0x170>
   18390:	ea00000e 	b	183d0 <USPiDeviceGetInformation+0x170>

	case GAMEPAD_CLASS:
		if (nDeviceIndex < MAX_DEVICES)
   18394:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   18398:	e3530003 	cmp	r3, #3
   1839c:	8a000009 	bhi	183c8 <USPiDeviceGetInformation+0x168>
		{
			pUSBDevice = (TUSBDevice *) s_pLibrary->pUPAD[nDeviceIndex];
   183a0:	e30b30c8 	movw	r3, #45256	; 0xb0c8
   183a4:	e3403003 	movt	r3, #3
   183a8:	e5932000 	ldr	r2, [r3]
   183ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   183b0:	e283301c 	add	r3, r3, #28
   183b4:	e1a03103 	lsl	r3, r3, #2
   183b8:	e0823003 	add	r3, r2, r3
   183bc:	e5933004 	ldr	r3, [r3, #4]
   183c0:	e50b3010 	str	r3, [fp, #-16]
		}
		break;
   183c4:	ea000001 	b	183d0 <USPiDeviceGetInformation+0x170>
   183c8:	ea000000 	b	183d0 <USPiDeviceGetInformation+0x170>

	default:
		break;
   183cc:	e1a00000 	nop			; (mov r0, r0)
	}

	if (pUSBDevice == 0)
   183d0:	e51b3010 	ldr	r3, [fp, #-16]
   183d4:	e3530000 	cmp	r3, #0
   183d8:	1a000001 	bne	183e4 <USPiDeviceGetInformation+0x184>
	{
		return 0;
   183dc:	e3a04000 	mov	r4, #0
   183e0:	ea000032 	b	184b0 <USPiDeviceGetInformation+0x250>
	}

	const TUSBDeviceDescriptor *pDesc = USBDeviceGetDeviceDescriptor (pUSBDevice);
   183e4:	e51b0010 	ldr	r0, [fp, #-16]
   183e8:	eb001f2d 	bl	200a4 <USBDeviceGetDeviceDescriptor>
   183ec:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	assert (pDesc != 0);
   183f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   183f4:	e3530000 	cmp	r3, #0
   183f8:	1a000005 	bne	18414 <USPiDeviceGetInformation+0x1b4>
   183fc:	e30e00bc 	movw	r0, #57532	; 0xe0bc
   18400:	e3400002 	movt	r0, #2
   18404:	e30d1f74 	movw	r1, #57204	; 0xdf74
   18408:	e3401002 	movt	r1, #2
   1840c:	e3002142 	movw	r2, #322	; 0x142
   18410:	ebfff966 	bl	169b0 <uspi_assertion_failed>

	assert (pInfo != 0);
   18414:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   18418:	e3530000 	cmp	r3, #0
   1841c:	1a000005 	bne	18438 <USPiDeviceGetInformation+0x1d8>
   18420:	e30e00c8 	movw	r0, #57544	; 0xe0c8
   18424:	e3400002 	movt	r0, #2
   18428:	e30d1f74 	movw	r1, #57204	; 0xdf74
   1842c:	e3401002 	movt	r1, #2
   18430:	e3a02f51 	mov	r2, #324	; 0x144
   18434:	ebfff95d 	bl	169b0 <uspi_assertion_failed>
	pInfo->idVendor  = pDesc->idVendor;
   18438:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1843c:	e1d330b8 	ldrh	r3, [r3, #8]
   18440:	e6ff2073 	uxth	r2, r3
   18444:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   18448:	e1c320b0 	strh	r2, [r3]
	pInfo->idProduct = pDesc->idProduct;
   1844c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18450:	e1d330ba 	ldrh	r3, [r3, #10]
   18454:	e6ff2073 	uxth	r2, r3
   18458:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1845c:	e1c320b2 	strh	r2, [r3, #2]
	pInfo->bcdDevice = pDesc->bcdDevice;
   18460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18464:	e1d330bc 	ldrh	r3, [r3, #12]
   18468:	e6ff2073 	uxth	r2, r3
   1846c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   18470:	e1c320b4 	strh	r2, [r3, #4]

	pInfo->pManufacturer = USBStringGet (&pUSBDevice->m_ManufacturerString);
   18474:	e51b3010 	ldr	r3, [fp, #-16]
   18478:	e2833020 	add	r3, r3, #32
   1847c:	e1a00003 	mov	r0, r3
   18480:	eb005485 	bl	2d69c <USBStringGet>
   18484:	e1a02000 	mov	r2, r0
   18488:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1848c:	e5832008 	str	r2, [r3, #8]
	pInfo->pProduct      = USBStringGet (&pUSBDevice->m_ProductString);
   18490:	e51b3010 	ldr	r3, [fp, #-16]
   18494:	e283302c 	add	r3, r3, #44	; 0x2c
   18498:	e1a00003 	mov	r0, r3
   1849c:	eb00547e 	bl	2d69c <USBStringGet>
   184a0:	e1a02000 	mov	r2, r0
   184a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   184a8:	e583200c 	str	r2, [r3, #12]

	return 1;
   184ac:	e3a04001 	mov	r4, #1
   184b0:	e1a03005 	mov	r3, r5
   184b4:	e3080260 	movw	r0, #33376	; 0x8260
   184b8:	e3400001 	movt	r0, #1
   184bc:	e1a01003 	mov	r1, r3
   184c0:	ebfff4e7 	bl	15864 <__cyg_profile_func_exit>
   184c4:	e1a03004 	mov	r3, r4
}
   184c8:	e1a00003 	mov	r0, r3
   184cc:	e24bd00c 	sub	sp, fp, #12
   184d0:	e8bd8830 	pop	{r4, r5, fp, pc}

000184d4 <DWHCIDevice>:
void DWHCIDeviceDumpRegister (TDWHCIDevice *pThis, const char *pName, u32 nAddress);
void DWHCIDeviceDumpStatus (TDWHCIDevice *pThis, unsigned nChannel /* = 0 */);
#endif

void DWHCIDevice (TDWHCIDevice *pThis)
{
   184d4:	e92d4810 	push	{r4, fp, lr}
   184d8:	e28db008 	add	fp, sp, #8
   184dc:	e24dd014 	sub	sp, sp, #20
   184e0:	e1a0400e 	mov	r4, lr
   184e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   184e8:	e1a03004 	mov	r3, r4
   184ec:	e30804d4 	movw	r0, #34004	; 0x84d4
   184f0:	e3400001 	movt	r0, #1
   184f4:	e1a01003 	mov	r1, r3
   184f8:	ebfff487 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   184fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   18500:	e3530000 	cmp	r3, #0
   18504:	1a000005 	bne	18520 <DWHCIDevice+0x4c>
   18508:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1850c:	e3400002 	movt	r0, #2
   18510:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18514:	e3401002 	movt	r1, #2
   18518:	e3a0205e 	mov	r2, #94	; 0x5e
   1851c:	ebfff923 	bl	169b0 <uspi_assertion_failed>

	pThis->m_nChannels = 0;
   18520:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   18524:	e3a02000 	mov	r2, #0
   18528:	e5832000 	str	r2, [r3]
	pThis->m_nChannelAllocated = 0;
   1852c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   18530:	e3a02000 	mov	r2, #0
   18534:	e5832004 	str	r2, [r3, #4]
	pThis->m_bWaiting = FALSE;
   18538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1853c:	e3a02000 	mov	r2, #0
   18540:	e5832048 	str	r2, [r3, #72]	; 0x48
	DWHCIRootPort (&pThis->m_RootPort, pThis);
   18544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   18548:	e283304c 	add	r3, r3, #76	; 0x4c
   1854c:	e1a00003 	mov	r0, r3
   18550:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   18554:	eb004697 	bl	29fb8 <DWHCIRootPort>

	for (unsigned nChannel = 0; nChannel < DWHCI_MAX_CHANNELS; nChannel++)
   18558:	e3a03000 	mov	r3, #0
   1855c:	e50b3010 	str	r3, [fp, #-16]
   18560:	ea000007 	b	18584 <DWHCIDevice+0xb0>
	{
		pThis->m_pStageData[nChannel] = 0;
   18564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   18568:	e51b2010 	ldr	r2, [fp, #-16]
   1856c:	e2822002 	add	r2, r2, #2
   18570:	e3a01000 	mov	r1, #0
   18574:	e7831102 	str	r1, [r3, r2, lsl #2]
	pThis->m_nChannels = 0;
	pThis->m_nChannelAllocated = 0;
	pThis->m_bWaiting = FALSE;
	DWHCIRootPort (&pThis->m_RootPort, pThis);

	for (unsigned nChannel = 0; nChannel < DWHCI_MAX_CHANNELS; nChannel++)
   18578:	e51b3010 	ldr	r3, [fp, #-16]
   1857c:	e2833001 	add	r3, r3, #1
   18580:	e50b3010 	str	r3, [fp, #-16]
   18584:	e51b3010 	ldr	r3, [fp, #-16]
   18588:	e353000f 	cmp	r3, #15
   1858c:	9afffff4 	bls	18564 <DWHCIDevice+0x90>
   18590:	e1a03004 	mov	r3, r4
   18594:	e30804d4 	movw	r0, #34004	; 0x84d4
   18598:	e3400001 	movt	r0, #1
   1859c:	e1a01003 	mov	r1, r3
   185a0:	ebfff4af 	bl	15864 <__cyg_profile_func_exit>
	{
		pThis->m_pStageData[nChannel] = 0;
	}
}
   185a4:	e24bd008 	sub	sp, fp, #8
   185a8:	e8bd8810 	pop	{r4, fp, pc}

000185ac <_DWHCIDevice>:

void _DWHCIDevice (TDWHCIDevice *pThis)
{
   185ac:	e92d4810 	push	{r4, fp, lr}
   185b0:	e28db008 	add	fp, sp, #8
   185b4:	e24dd00c 	sub	sp, sp, #12
   185b8:	e1a0400e 	mov	r4, lr
   185bc:	e50b0010 	str	r0, [fp, #-16]
   185c0:	e1a03004 	mov	r3, r4
   185c4:	e30805ac 	movw	r0, #34220	; 0x85ac
   185c8:	e3400001 	movt	r0, #1
   185cc:	e1a01003 	mov	r1, r3
   185d0:	ebfff451 	bl	1571c <__cyg_profile_func_enter>
	_DWHCIRootPort (&pThis->m_RootPort);
   185d4:	e51b3010 	ldr	r3, [fp, #-16]
   185d8:	e283304c 	add	r3, r3, #76	; 0x4c
   185dc:	e1a00003 	mov	r0, r3
   185e0:	eb00469f 	bl	2a064 <_DWHCIRootPort>
   185e4:	e1a03004 	mov	r3, r4
   185e8:	e30805ac 	movw	r0, #34220	; 0x85ac
   185ec:	e3400001 	movt	r0, #1
   185f0:	e1a01003 	mov	r1, r3
   185f4:	ebfff49a 	bl	15864 <__cyg_profile_func_exit>
}
   185f8:	e24bd008 	sub	sp, fp, #8
   185fc:	e8bd8810 	pop	{r4, fp, pc}

00018600 <DWHCIDeviceInitialize>:

boolean DWHCIDeviceInitialize (TDWHCIDevice *pThis)
{
   18600:	e92d4830 	push	{r4, r5, fp, lr}
   18604:	e28db00c 	add	fp, sp, #12
   18608:	e24dd020 	sub	sp, sp, #32
   1860c:	e1a0500e 	mov	r5, lr
   18610:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   18614:	e1a03005 	mov	r3, r5
   18618:	e3080600 	movw	r0, #34304	; 0x8600
   1861c:	e3400001 	movt	r0, #1
   18620:	e1a01003 	mov	r1, r3
   18624:	ebfff43c 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   18628:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1862c:	e3530000 	cmp	r3, #0
   18630:	1a000005 	bne	1864c <DWHCIDeviceInitialize+0x4c>
   18634:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   18638:	e3400002 	movt	r0, #2
   1863c:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18640:	e3401002 	movt	r1, #2
   18644:	e3a02072 	mov	r2, #114	; 0x72
   18648:	ebfff8d8 	bl	169b0 <uspi_assertion_failed>

	DataMemBarrier ();
   1864c:	f57ff05f 	dmb	sy

	TDWHCIRegister VendorId;
	DWHCIRegister (&VendorId, DWHCI_CORE_VENDOR_ID);
   18650:	e24b3018 	sub	r3, fp, #24
   18654:	e1a00003 	mov	r0, r3
   18658:	e3a01040 	mov	r1, #64	; 0x40
   1865c:	e3431f98 	movt	r1, #16280	; 0x3f98
   18660:	eb000e8c 	bl	1c098 <DWHCIRegister>
	if (DWHCIRegisterRead (&VendorId) != 0x4F54280A)
   18664:	e24b3018 	sub	r3, fp, #24
   18668:	e1a00003 	mov	r0, r3
   1866c:	eb000eec 	bl	1c224 <DWHCIRegisterRead>
   18670:	e1a02000 	mov	r2, r0
   18674:	e302380a 	movw	r3, #10250	; 0x280a
   18678:	e3443f54 	movt	r3, #20308	; 0x4f54
   1867c:	e1520003 	cmp	r2, r3
   18680:	0a00000e 	beq	186c0 <DWHCIDeviceInitialize+0xc0>
	{
		LogWrite (FromDWHCI, LOG_ERROR, "Unknown vendor 0x%0X", DWHCIRegisterGet (&VendorId));
   18684:	e24b3018 	sub	r3, fp, #24
   18688:	e1a00003 	mov	r0, r3
   1868c:	eb000f34 	bl	1c364 <DWHCIRegisterGet>
   18690:	e1a03000 	mov	r3, r0
   18694:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   18698:	e3400002 	movt	r0, #2
   1869c:	e3a01001 	mov	r1, #1
   186a0:	e30e2148 	movw	r2, #57672	; 0xe148
   186a4:	e3402002 	movt	r2, #2
   186a8:	ebfff8a8 	bl	16950 <LogWrite>
		_DWHCIRegister (&VendorId);
   186ac:	e24b3018 	sub	r3, fp, #24
   186b0:	e1a00003 	mov	r0, r3
   186b4:	eb000ebd 	bl	1c1b0 <_DWHCIRegister>
		return FALSE;
   186b8:	e3a04000 	mov	r4, #0
   186bc:	ea00007b 	b	188b0 <DWHCIDeviceInitialize+0x2b0>
	}

	if (!SetPowerStateOn (DEVICE_ID_USB_HCD))
   186c0:	e3a00003 	mov	r0, #3
   186c4:	ebfff81f 	bl	16748 <SetPowerStateOn>
   186c8:	e1a03000 	mov	r3, r0
   186cc:	e3530000 	cmp	r3, #0
   186d0:	1a00000a 	bne	18700 <DWHCIDeviceInitialize+0x100>
	{
		LogWrite (FromDWHCI, LOG_ERROR, "Cannot power on");
   186d4:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   186d8:	e3400002 	movt	r0, #2
   186dc:	e3a01001 	mov	r1, #1
   186e0:	e30e2160 	movw	r2, #57696	; 0xe160
   186e4:	e3402002 	movt	r2, #2
   186e8:	ebfff898 	bl	16950 <LogWrite>
		_DWHCIRegister (&VendorId);
   186ec:	e24b3018 	sub	r3, fp, #24
   186f0:	e1a00003 	mov	r0, r3
   186f4:	eb000ead 	bl	1c1b0 <_DWHCIRegister>
		return FALSE;
   186f8:	e3a04000 	mov	r4, #0
   186fc:	ea00006b 	b	188b0 <DWHCIDeviceInitialize+0x2b0>
	}
	
	// Disable all interrupts
	TDWHCIRegister AHBConfig;
	DWHCIRegister (&AHBConfig, DWHCI_CORE_AHB_CFG);
   18700:	e24b3024 	sub	r3, fp, #36	; 0x24
   18704:	e1a00003 	mov	r0, r3
   18708:	e3a01008 	mov	r1, #8
   1870c:	e3431f98 	movt	r1, #16280	; 0x3f98
   18710:	eb000e60 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterRead (&AHBConfig);
   18714:	e24b3024 	sub	r3, fp, #36	; 0x24
   18718:	e1a00003 	mov	r0, r3
   1871c:	eb000ec0 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&AHBConfig, ~DWHCI_CORE_AHB_CFG_GLOBALINT_MASK);
   18720:	e24b3024 	sub	r3, fp, #36	; 0x24
   18724:	e1a00003 	mov	r0, r3
   18728:	e3e01001 	mvn	r1, #1
   1872c:	eb000f85 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterWrite (&AHBConfig);
   18730:	e24b3024 	sub	r3, fp, #36	; 0x24
   18734:	e1a00003 	mov	r0, r3
   18738:	eb000edf 	bl	1c2bc <DWHCIRegisterWrite>
	
	ConnectInterrupt (ARM_IRQ_USB, DWHCIDeviceInterruptHandler, pThis);
   1873c:	e3a00009 	mov	r0, #9
   18740:	e30b1418 	movw	r1, #46104	; 0xb418
   18744:	e3401001 	movt	r1, #1
   18748:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   1874c:	ebfff7e5 	bl	166e8 <ConnectInterrupt>

	if (!DWHCIDeviceInitCore (pThis))
   18750:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   18754:	eb0002be 	bl	19254 <DWHCIDeviceInitCore>
   18758:	e1a03000 	mov	r3, r0
   1875c:	e3530000 	cmp	r3, #0
   18760:	1a00000d 	bne	1879c <DWHCIDeviceInitialize+0x19c>
	{
		LogWrite (FromDWHCI, LOG_ERROR, "Cannot initialize core");
   18764:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   18768:	e3400002 	movt	r0, #2
   1876c:	e3a01001 	mov	r1, #1
   18770:	e30e2170 	movw	r2, #57712	; 0xe170
   18774:	e3402002 	movt	r2, #2
   18778:	ebfff874 	bl	16950 <LogWrite>
		_DWHCIRegister (&AHBConfig);
   1877c:	e24b3024 	sub	r3, fp, #36	; 0x24
   18780:	e1a00003 	mov	r0, r3
   18784:	eb000e89 	bl	1c1b0 <_DWHCIRegister>
		_DWHCIRegister (&VendorId);
   18788:	e24b3018 	sub	r3, fp, #24
   1878c:	e1a00003 	mov	r0, r3
   18790:	eb000e86 	bl	1c1b0 <_DWHCIRegister>
		return FALSE;
   18794:	e3a04000 	mov	r4, #0
   18798:	ea000044 	b	188b0 <DWHCIDeviceInitialize+0x2b0>
	}

	DWHCIDeviceEnableGlobalInterrupts (pThis);
   1879c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   187a0:	eb0004ed 	bl	19b5c <DWHCIDeviceEnableGlobalInterrupts>
	
	if (!DWHCIDeviceInitHost (pThis))
   187a4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   187a8:	eb000382 	bl	195b8 <DWHCIDeviceInitHost>
   187ac:	e1a03000 	mov	r3, r0
   187b0:	e3530000 	cmp	r3, #0
   187b4:	1a00000d 	bne	187f0 <DWHCIDeviceInitialize+0x1f0>
	{
		LogWrite (FromDWHCI, LOG_ERROR, "Cannot initialize host");
   187b8:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   187bc:	e3400002 	movt	r0, #2
   187c0:	e3a01001 	mov	r1, #1
   187c4:	e30e2188 	movw	r2, #57736	; 0xe188
   187c8:	e3402002 	movt	r2, #2
   187cc:	ebfff85f 	bl	16950 <LogWrite>
		_DWHCIRegister (&AHBConfig);
   187d0:	e24b3024 	sub	r3, fp, #36	; 0x24
   187d4:	e1a00003 	mov	r0, r3
   187d8:	eb000e74 	bl	1c1b0 <_DWHCIRegister>
		_DWHCIRegister (&VendorId);
   187dc:	e24b3018 	sub	r3, fp, #24
   187e0:	e1a00003 	mov	r0, r3
   187e4:	eb000e71 	bl	1c1b0 <_DWHCIRegister>
		return FALSE;
   187e8:	e3a04000 	mov	r4, #0
   187ec:	ea00002f 	b	188b0 <DWHCIDeviceInitialize+0x2b0>
	}

	// The following calls will fail if there is no device or no supported device connected
	// to root port. This is not an error because the system may run without an USB device.

	if (!DWHCIDeviceEnableRootPort (pThis))
   187f0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   187f4:	eb000432 	bl	198c4 <DWHCIDeviceEnableRootPort>
   187f8:	e1a03000 	mov	r3, r0
   187fc:	e3530000 	cmp	r3, #0
   18800:	1a00000d 	bne	1883c <DWHCIDeviceInitialize+0x23c>
	{
		LogWrite (FromDWHCI, LOG_WARNING, "No device connected to root port");
   18804:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   18808:	e3400002 	movt	r0, #2
   1880c:	e3a01002 	mov	r1, #2
   18810:	e30e21a0 	movw	r2, #57760	; 0xe1a0
   18814:	e3402002 	movt	r2, #2
   18818:	ebfff84c 	bl	16950 <LogWrite>
		_DWHCIRegister (&AHBConfig);
   1881c:	e24b3024 	sub	r3, fp, #36	; 0x24
   18820:	e1a00003 	mov	r0, r3
   18824:	eb000e61 	bl	1c1b0 <_DWHCIRegister>
		_DWHCIRegister (&VendorId);
   18828:	e24b3018 	sub	r3, fp, #24
   1882c:	e1a00003 	mov	r0, r3
   18830:	eb000e5e 	bl	1c1b0 <_DWHCIRegister>
		return TRUE;
   18834:	e3a04001 	mov	r4, #1
   18838:	ea00001c 	b	188b0 <DWHCIDeviceInitialize+0x2b0>
	}

	if (!DWHCIRootPortInitialize (&pThis->m_RootPort))
   1883c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   18840:	e283304c 	add	r3, r3, #76	; 0x4c
   18844:	e1a00003 	mov	r0, r3
   18848:	eb004631 	bl	2a114 <DWHCIRootPortInitialize>
   1884c:	e1a03000 	mov	r3, r0
   18850:	e3530000 	cmp	r3, #0
   18854:	1a00000d 	bne	18890 <DWHCIDeviceInitialize+0x290>
	{
		LogWrite (FromDWHCI, LOG_WARNING, "Cannot initialize root port");
   18858:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   1885c:	e3400002 	movt	r0, #2
   18860:	e3a01002 	mov	r1, #2
   18864:	e30e21c4 	movw	r2, #57796	; 0xe1c4
   18868:	e3402002 	movt	r2, #2
   1886c:	ebfff837 	bl	16950 <LogWrite>
		_DWHCIRegister (&AHBConfig);
   18870:	e24b3024 	sub	r3, fp, #36	; 0x24
   18874:	e1a00003 	mov	r0, r3
   18878:	eb000e4c 	bl	1c1b0 <_DWHCIRegister>
		_DWHCIRegister (&VendorId);
   1887c:	e24b3018 	sub	r3, fp, #24
   18880:	e1a00003 	mov	r0, r3
   18884:	eb000e49 	bl	1c1b0 <_DWHCIRegister>
		return TRUE;
   18888:	e3a04001 	mov	r4, #1
   1888c:	ea000007 	b	188b0 <DWHCIDeviceInitialize+0x2b0>
	}

	DataMemBarrier ();
   18890:	f57ff05f 	dmb	sy

	_DWHCIRegister (&AHBConfig);
   18894:	e24b3024 	sub	r3, fp, #36	; 0x24
   18898:	e1a00003 	mov	r0, r3
   1889c:	eb000e43 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&VendorId);
   188a0:	e24b3018 	sub	r3, fp, #24
   188a4:	e1a00003 	mov	r0, r3
   188a8:	eb000e40 	bl	1c1b0 <_DWHCIRegister>

	return TRUE;
   188ac:	e3a04001 	mov	r4, #1
   188b0:	e1a03005 	mov	r3, r5
   188b4:	e3080600 	movw	r0, #34304	; 0x8600
   188b8:	e3400001 	movt	r0, #1
   188bc:	e1a01003 	mov	r1, r3
   188c0:	ebfff3e7 	bl	15864 <__cyg_profile_func_exit>
   188c4:	e1a03004 	mov	r3, r4
}
   188c8:	e1a00003 	mov	r0, r3
   188cc:	e24bd00c 	sub	sp, fp, #12
   188d0:	e8bd8830 	pop	{r4, r5, fp, pc}

000188d4 <DWHCIDeviceGetDescriptor>:

int DWHCIDeviceGetDescriptor (TDWHCIDevice *pThis, TUSBEndpoint *pEndpoint,
			      unsigned char ucType, unsigned char ucIndex,
			      void *pBuffer, unsigned nBufSize,
			      unsigned char ucRequestType)
{
   188d4:	e92d4830 	push	{r4, r5, fp, lr}
   188d8:	e28db00c 	add	fp, sp, #12
   188dc:	e24dd020 	sub	sp, sp, #32
   188e0:	e1a0400e 	mov	r4, lr
   188e4:	e50b0010 	str	r0, [fp, #-16]
   188e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   188ec:	e1a01002 	mov	r1, r2
   188f0:	e1a02003 	mov	r2, r3
   188f4:	e1a03001 	mov	r3, r1
   188f8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   188fc:	e1a03002 	mov	r3, r2
   18900:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
   18904:	e1a03004 	mov	r3, r4
   18908:	e30808d4 	movw	r0, #35028	; 0x88d4
   1890c:	e3400001 	movt	r0, #1
   18910:	e1a01003 	mov	r1, r3
   18914:	ebfff380 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   18918:	e51b3010 	ldr	r3, [fp, #-16]
   1891c:	e3530000 	cmp	r3, #0
   18920:	1a000005 	bne	1893c <DWHCIDeviceGetDescriptor+0x68>
   18924:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   18928:	e3400002 	movt	r0, #2
   1892c:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18930:	e3401002 	movt	r1, #2
   18934:	e3a020c1 	mov	r2, #193	; 0xc1
   18938:	ebfff81c 	bl	169b0 <uspi_assertion_failed>

	return DWHCIDeviceControlMessage (pThis, pEndpoint,
					ucRequestType, GET_DESCRIPTOR,
					(ucType << 8) | ucIndex, 0,
   1893c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   18940:	e1a03403 	lsl	r3, r3, #8
			      void *pBuffer, unsigned nBufSize,
			      unsigned char ucRequestType)
{
	assert (pThis != 0);

	return DWHCIDeviceControlMessage (pThis, pEndpoint,
   18944:	e6ff2073 	uxth	r2, r3
   18948:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
   1894c:	e6ff3073 	uxth	r3, r3
   18950:	e1823003 	orr	r3, r2, r3
   18954:	e6ff3073 	uxth	r3, r3
   18958:	e6ff2073 	uxth	r2, r3
   1895c:	e59b3008 	ldr	r3, [fp, #8]
   18960:	e6ff3073 	uxth	r3, r3
   18964:	e5dbc00c 	ldrb	ip, [fp, #12]
   18968:	e58d2000 	str	r2, [sp]
   1896c:	e3a02000 	mov	r2, #0
   18970:	e58d2004 	str	r2, [sp, #4]
   18974:	e59b2004 	ldr	r2, [fp, #4]
   18978:	e58d2008 	str	r2, [sp, #8]
   1897c:	e58d300c 	str	r3, [sp, #12]
   18980:	e51b0010 	ldr	r0, [fp, #-16]
   18984:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   18988:	e1a0200c 	mov	r2, ip
   1898c:	e3a03006 	mov	r3, #6
   18990:	eb000073 	bl	18b64 <DWHCIDeviceControlMessage>
   18994:	e1a05000 	mov	r5, r0
   18998:	e1a03004 	mov	r3, r4
   1899c:	e30808d4 	movw	r0, #35028	; 0x88d4
   189a0:	e3400001 	movt	r0, #1
   189a4:	e1a01003 	mov	r1, r3
   189a8:	ebfff3ad 	bl	15864 <__cyg_profile_func_exit>
   189ac:	e1a03005 	mov	r3, r5
					ucRequestType, GET_DESCRIPTOR,
					(ucType << 8) | ucIndex, 0,
					pBuffer, nBufSize);
}
   189b0:	e1a00003 	mov	r0, r3
   189b4:	e24bd00c 	sub	sp, fp, #12
   189b8:	e8bd8830 	pop	{r4, r5, fp, pc}

000189bc <DWHCIDeviceSetAddress>:

boolean DWHCIDeviceSetAddress (TDWHCIDevice *pThis, TUSBEndpoint *pEndpoint, u8 ucDeviceAddress)
{
   189bc:	e92d4830 	push	{r4, r5, fp, lr}
   189c0:	e28db00c 	add	fp, sp, #12
   189c4:	e24dd020 	sub	sp, sp, #32
   189c8:	e1a0500e 	mov	r5, lr
   189cc:	e50b0010 	str	r0, [fp, #-16]
   189d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   189d4:	e1a03002 	mov	r3, r2
   189d8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   189dc:	e1a03005 	mov	r3, r5
   189e0:	e30809bc 	movw	r0, #35260	; 0x89bc
   189e4:	e3400001 	movt	r0, #1
   189e8:	e1a01003 	mov	r1, r3
   189ec:	ebfff34a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   189f0:	e51b3010 	ldr	r3, [fp, #-16]
   189f4:	e3530000 	cmp	r3, #0
   189f8:	1a000005 	bne	18a14 <DWHCIDeviceSetAddress+0x58>
   189fc:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   18a00:	e3400002 	movt	r0, #2
   18a04:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18a08:	e3401002 	movt	r1, #2
   18a0c:	e3a020cb 	mov	r2, #203	; 0xcb
   18a10:	ebfff7e6 	bl	169b0 <uspi_assertion_failed>

	if (DWHCIDeviceControlMessage (pThis, pEndpoint, REQUEST_OUT, SET_ADDRESS, ucDeviceAddress, 0, 0, 0) < 0)
   18a14:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   18a18:	e6ff3073 	uxth	r3, r3
   18a1c:	e58d3000 	str	r3, [sp]
   18a20:	e3a03000 	mov	r3, #0
   18a24:	e58d3004 	str	r3, [sp, #4]
   18a28:	e3a03000 	mov	r3, #0
   18a2c:	e58d3008 	str	r3, [sp, #8]
   18a30:	e3a03000 	mov	r3, #0
   18a34:	e58d300c 	str	r3, [sp, #12]
   18a38:	e51b0010 	ldr	r0, [fp, #-16]
   18a3c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   18a40:	e3a02000 	mov	r2, #0
   18a44:	e3a03005 	mov	r3, #5
   18a48:	eb000045 	bl	18b64 <DWHCIDeviceControlMessage>
   18a4c:	e1a03000 	mov	r3, r0
   18a50:	e3530000 	cmp	r3, #0
   18a54:	aa000001 	bge	18a60 <DWHCIDeviceSetAddress+0xa4>
	{
		return FALSE;
   18a58:	e3a04000 	mov	r4, #0
   18a5c:	ea000002 	b	18a6c <DWHCIDeviceSetAddress+0xb0>
	}
	
	MsDelay (50);		// see USB 2.0 spec (tDSETADDR)
   18a60:	e3a00032 	mov	r0, #50	; 0x32
   18a64:	ebfff6c5 	bl	16580 <MsDelay>
	
	return TRUE;
   18a68:	e3a04001 	mov	r4, #1
   18a6c:	e1a03005 	mov	r3, r5
   18a70:	e30809bc 	movw	r0, #35260	; 0x89bc
   18a74:	e3400001 	movt	r0, #1
   18a78:	e1a01003 	mov	r1, r3
   18a7c:	ebfff378 	bl	15864 <__cyg_profile_func_exit>
   18a80:	e1a03004 	mov	r3, r4
}
   18a84:	e1a00003 	mov	r0, r3
   18a88:	e24bd00c 	sub	sp, fp, #12
   18a8c:	e8bd8830 	pop	{r4, r5, fp, pc}

00018a90 <DWHCIDeviceSetConfiguration>:

boolean DWHCIDeviceSetConfiguration (TDWHCIDevice *pThis, TUSBEndpoint *pEndpoint, u8 ucConfigurationValue)
{
   18a90:	e92d4830 	push	{r4, r5, fp, lr}
   18a94:	e28db00c 	add	fp, sp, #12
   18a98:	e24dd020 	sub	sp, sp, #32
   18a9c:	e1a0500e 	mov	r5, lr
   18aa0:	e50b0010 	str	r0, [fp, #-16]
   18aa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   18aa8:	e1a03002 	mov	r3, r2
   18aac:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   18ab0:	e1a03005 	mov	r3, r5
   18ab4:	e3080a90 	movw	r0, #35472	; 0x8a90
   18ab8:	e3400001 	movt	r0, #1
   18abc:	e1a01003 	mov	r1, r3
   18ac0:	ebfff315 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   18ac4:	e51b3010 	ldr	r3, [fp, #-16]
   18ac8:	e3530000 	cmp	r3, #0
   18acc:	1a000005 	bne	18ae8 <DWHCIDeviceSetConfiguration+0x58>
   18ad0:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   18ad4:	e3400002 	movt	r0, #2
   18ad8:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18adc:	e3401002 	movt	r1, #2
   18ae0:	e3a020d9 	mov	r2, #217	; 0xd9
   18ae4:	ebfff7b1 	bl	169b0 <uspi_assertion_failed>

	if (DWHCIDeviceControlMessage (pThis, pEndpoint, REQUEST_OUT, SET_CONFIGURATION, ucConfigurationValue, 0, 0, 0) < 0)
   18ae8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   18aec:	e6ff3073 	uxth	r3, r3
   18af0:	e58d3000 	str	r3, [sp]
   18af4:	e3a03000 	mov	r3, #0
   18af8:	e58d3004 	str	r3, [sp, #4]
   18afc:	e3a03000 	mov	r3, #0
   18b00:	e58d3008 	str	r3, [sp, #8]
   18b04:	e3a03000 	mov	r3, #0
   18b08:	e58d300c 	str	r3, [sp, #12]
   18b0c:	e51b0010 	ldr	r0, [fp, #-16]
   18b10:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   18b14:	e3a02000 	mov	r2, #0
   18b18:	e3a03009 	mov	r3, #9
   18b1c:	eb000010 	bl	18b64 <DWHCIDeviceControlMessage>
   18b20:	e1a03000 	mov	r3, r0
   18b24:	e3530000 	cmp	r3, #0
   18b28:	aa000001 	bge	18b34 <DWHCIDeviceSetConfiguration+0xa4>
	{
		return FALSE;
   18b2c:	e3a04000 	mov	r4, #0
   18b30:	ea000002 	b	18b40 <DWHCIDeviceSetConfiguration+0xb0>
	}
	
	MsDelay (50);
   18b34:	e3a00032 	mov	r0, #50	; 0x32
   18b38:	ebfff690 	bl	16580 <MsDelay>
	
	return TRUE;
   18b3c:	e3a04001 	mov	r4, #1
   18b40:	e1a03005 	mov	r3, r5
   18b44:	e3080a90 	movw	r0, #35472	; 0x8a90
   18b48:	e3400001 	movt	r0, #1
   18b4c:	e1a01003 	mov	r1, r3
   18b50:	ebfff343 	bl	15864 <__cyg_profile_func_exit>
   18b54:	e1a03004 	mov	r3, r4
}
   18b58:	e1a00003 	mov	r0, r3
   18b5c:	e24bd00c 	sub	sp, fp, #12
   18b60:	e8bd8830 	pop	{r4, r5, fp, pc}

00018b64 <DWHCIDeviceControlMessage>:

int DWHCIDeviceControlMessage (TDWHCIDevice *pThis, TUSBEndpoint *pEndpoint,
			u8 ucRequestType, u8 ucRequest, u16 usValue, u16 usIndex,
			void *pData, u16 usDataSize)
{
   18b64:	e92d4830 	push	{r4, r5, fp, lr}
   18b68:	e28db00c 	add	fp, sp, #12
   18b6c:	e24dd048 	sub	sp, sp, #72	; 0x48
   18b70:	e1a0500e 	mov	r5, lr
   18b74:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
   18b78:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
   18b7c:	e1a01002 	mov	r1, r2
   18b80:	e1a02003 	mov	r2, r3
   18b84:	e1a03001 	mov	r3, r1
   18b88:	e54b3045 	strb	r3, [fp, #-69]	; 0xffffffbb
   18b8c:	e1a03002 	mov	r3, r2
   18b90:	e54b3046 	strb	r3, [fp, #-70]	; 0xffffffba
   18b94:	e1a03005 	mov	r3, r5
   18b98:	e3080b64 	movw	r0, #35684	; 0x8b64
   18b9c:	e3400001 	movt	r0, #1
   18ba0:	e1a01003 	mov	r1, r3
   18ba4:	ebfff2dc 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   18ba8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   18bac:	e3530000 	cmp	r3, #0
   18bb0:	1a000005 	bne	18bcc <DWHCIDeviceControlMessage+0x68>
   18bb4:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   18bb8:	e3400002 	movt	r0, #2
   18bbc:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18bc0:	e3401002 	movt	r1, #2
   18bc4:	e3a020e9 	mov	r2, #233	; 0xe9
   18bc8:	ebfff778 	bl	169b0 <uspi_assertion_failed>

	TSetupData *pSetup = (TSetupData *) malloc (sizeof (TSetupData));
   18bcc:	e3a00008 	mov	r0, #8
   18bd0:	ebfff7a0 	bl	16a58 <malloc>
   18bd4:	e1a03000 	mov	r3, r0
   18bd8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	assert (pSetup != 0);
   18bdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18be0:	e3530000 	cmp	r3, #0
   18be4:	1a000005 	bne	18c00 <DWHCIDeviceControlMessage+0x9c>
   18be8:	e30e01e0 	movw	r0, #57824	; 0xe1e0
   18bec:	e3400002 	movt	r0, #2
   18bf0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18bf4:	e3401002 	movt	r1, #2
   18bf8:	e3a020ec 	mov	r2, #236	; 0xec
   18bfc:	ebfff76b 	bl	169b0 <uspi_assertion_failed>

	pSetup->bmRequestType = ucRequestType;
   18c00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18c04:	e55b2045 	ldrb	r2, [fp, #-69]	; 0xffffffbb
   18c08:	e5c32000 	strb	r2, [r3]
	pSetup->bRequest      = ucRequest;
   18c0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18c10:	e55b2046 	ldrb	r2, [fp, #-70]	; 0xffffffba
   18c14:	e5c32001 	strb	r2, [r3, #1]
	pSetup->wValue	      = usValue;
   18c18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18c1c:	e1db20b4 	ldrh	r2, [fp, #4]
   18c20:	e1c320b2 	strh	r2, [r3, #2]
	pSetup->wIndex	      = usIndex;
   18c24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18c28:	e1db20b8 	ldrh	r2, [fp, #8]
   18c2c:	e1c320b4 	strh	r2, [r3, #4]
	pSetup->wLength	      = usDataSize;
   18c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18c34:	e1db21b0 	ldrh	r2, [fp, #16]
   18c38:	e1c320b6 	strh	r2, [r3, #6]

	TUSBRequest URB;
	USBRequest (&URB, pEndpoint, pData, usDataSize, pSetup);
   18c3c:	e1dbc1b0 	ldrh	ip, [fp, #16]
   18c40:	e24b2038 	sub	r2, fp, #56	; 0x38
   18c44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18c48:	e58d3000 	str	r3, [sp]
   18c4c:	e1a00002 	mov	r0, r2
   18c50:	e51b1044 	ldr	r1, [fp, #-68]	; 0xffffffbc
   18c54:	e59b200c 	ldr	r2, [fp, #12]
   18c58:	e1a0300c 	mov	r3, ip
   18c5c:	eb0021e8 	bl	21404 <USBRequest>

	int nResult = -1;
   18c60:	e3e03000 	mvn	r3, #0
   18c64:	e50b3010 	str	r3, [fp, #-16]

	if (DWHCIDeviceSubmitBlockingRequest (pThis, &URB))
   18c68:	e24b3038 	sub	r3, fp, #56	; 0x38
   18c6c:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
   18c70:	e1a01003 	mov	r1, r3
   18c74:	eb00004f 	bl	18db8 <DWHCIDeviceSubmitBlockingRequest>
   18c78:	e1a03000 	mov	r3, r0
   18c7c:	e3530000 	cmp	r3, #0
   18c80:	0a000004 	beq	18c98 <DWHCIDeviceControlMessage+0x134>
	{
		nResult = USBRequestGetResultLength (&URB);
   18c84:	e24b3038 	sub	r3, fp, #56	; 0x38
   18c88:	e1a00003 	mov	r0, r3
   18c8c:	eb0022d4 	bl	217e4 <USBRequestGetResultLength>
   18c90:	e1a03000 	mov	r3, r0
   18c94:	e50b3010 	str	r3, [fp, #-16]
	}
	
	free (pSetup);
   18c98:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   18c9c:	ebfff783 	bl	16ab0 <free>

	_USBRequest (&URB);
   18ca0:	e24b3038 	sub	r3, fp, #56	; 0x38
   18ca4:	e1a00003 	mov	r0, r3
   18ca8:	eb002225 	bl	21544 <_USBRequest>

	return nResult;
   18cac:	e51b4010 	ldr	r4, [fp, #-16]
   18cb0:	e1a03005 	mov	r3, r5
   18cb4:	e3080b64 	movw	r0, #35684	; 0x8b64
   18cb8:	e3400001 	movt	r0, #1
   18cbc:	e1a01003 	mov	r1, r3
   18cc0:	ebfff2e7 	bl	15864 <__cyg_profile_func_exit>
   18cc4:	e1a03004 	mov	r3, r4
}
   18cc8:	e1a00003 	mov	r0, r3
   18ccc:	e24bd00c 	sub	sp, fp, #12
   18cd0:	e8bd8830 	pop	{r4, r5, fp, pc}

00018cd4 <DWHCIDeviceTransfer>:

int DWHCIDeviceTransfer (TDWHCIDevice *pThis, TUSBEndpoint *pEndpoint, void *pBuffer, unsigned nBufSize)
{
   18cd4:	e92d4830 	push	{r4, r5, fp, lr}
   18cd8:	e28db00c 	add	fp, sp, #12
   18cdc:	e24dd040 	sub	sp, sp, #64	; 0x40
   18ce0:	e1a0500e 	mov	r5, lr
   18ce4:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   18ce8:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
   18cec:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   18cf0:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
   18cf4:	e1a03005 	mov	r3, r5
   18cf8:	e3080cd4 	movw	r0, #36052	; 0x8cd4
   18cfc:	e3400001 	movt	r0, #1
   18d00:	e1a01003 	mov	r1, r3
   18d04:	ebfff284 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   18d08:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   18d0c:	e3530000 	cmp	r3, #0
   18d10:	1a000005 	bne	18d2c <DWHCIDeviceTransfer+0x58>
   18d14:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   18d18:	e3400002 	movt	r0, #2
   18d1c:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18d20:	e3401002 	movt	r1, #2
   18d24:	e3002107 	movw	r2, #263	; 0x107
   18d28:	ebfff720 	bl	169b0 <uspi_assertion_failed>

	TUSBRequest URB;
	USBRequest (&URB, pEndpoint, pBuffer, nBufSize, 0);
   18d2c:	e24b2034 	sub	r2, fp, #52	; 0x34
   18d30:	e3a03000 	mov	r3, #0
   18d34:	e58d3000 	str	r3, [sp]
   18d38:	e1a00002 	mov	r0, r2
   18d3c:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
   18d40:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
   18d44:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
   18d48:	eb0021ad 	bl	21404 <USBRequest>

	int nResult = -1;
   18d4c:	e3e03000 	mvn	r3, #0
   18d50:	e50b3010 	str	r3, [fp, #-16]

	if (DWHCIDeviceSubmitBlockingRequest (pThis, &URB))
   18d54:	e24b3034 	sub	r3, fp, #52	; 0x34
   18d58:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   18d5c:	e1a01003 	mov	r1, r3
   18d60:	eb000014 	bl	18db8 <DWHCIDeviceSubmitBlockingRequest>
   18d64:	e1a03000 	mov	r3, r0
   18d68:	e3530000 	cmp	r3, #0
   18d6c:	0a000004 	beq	18d84 <DWHCIDeviceTransfer+0xb0>
	{
		nResult = USBRequestGetResultLength (&URB);
   18d70:	e24b3034 	sub	r3, fp, #52	; 0x34
   18d74:	e1a00003 	mov	r0, r3
   18d78:	eb002299 	bl	217e4 <USBRequestGetResultLength>
   18d7c:	e1a03000 	mov	r3, r0
   18d80:	e50b3010 	str	r3, [fp, #-16]
	}

	_USBRequest (&URB);
   18d84:	e24b3034 	sub	r3, fp, #52	; 0x34
   18d88:	e1a00003 	mov	r0, r3
   18d8c:	eb0021ec 	bl	21544 <_USBRequest>

	return nResult;
   18d90:	e51b4010 	ldr	r4, [fp, #-16]
   18d94:	e1a03005 	mov	r3, r5
   18d98:	e3080cd4 	movw	r0, #36052	; 0x8cd4
   18d9c:	e3400001 	movt	r0, #1
   18da0:	e1a01003 	mov	r1, r3
   18da4:	ebfff2ae 	bl	15864 <__cyg_profile_func_exit>
   18da8:	e1a03004 	mov	r3, r4
}
   18dac:	e1a00003 	mov	r0, r3
   18db0:	e24bd00c 	sub	sp, fp, #12
   18db4:	e8bd8830 	pop	{r4, r5, fp, pc}

00018db8 <DWHCIDeviceSubmitBlockingRequest>:

boolean DWHCIDeviceSubmitBlockingRequest (TDWHCIDevice *pThis, TUSBRequest *pURB)
{
   18db8:	e92d4830 	push	{r4, r5, fp, lr}
   18dbc:	e28db00c 	add	fp, sp, #12
   18dc0:	e24dd010 	sub	sp, sp, #16
   18dc4:	e1a0500e 	mov	r5, lr
   18dc8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   18dcc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   18dd0:	e1a03005 	mov	r3, r5
   18dd4:	e3080db8 	movw	r0, #36280	; 0x8db8
   18dd8:	e3400001 	movt	r0, #1
   18ddc:	e1a01003 	mov	r1, r3
   18de0:	ebfff24d 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   18de4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   18de8:	e3530000 	cmp	r3, #0
   18dec:	1a000005 	bne	18e08 <DWHCIDeviceSubmitBlockingRequest+0x50>
   18df0:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   18df4:	e3400002 	movt	r0, #2
   18df8:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18dfc:	e3401002 	movt	r1, #2
   18e00:	e300211a 	movw	r2, #282	; 0x11a
   18e04:	ebfff6e9 	bl	169b0 <uspi_assertion_failed>

	DataMemBarrier ();
   18e08:	f57ff05f 	dmb	sy

	assert (pURB != 0);
   18e0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   18e10:	e3530000 	cmp	r3, #0
   18e14:	1a000005 	bne	18e30 <DWHCIDeviceSubmitBlockingRequest+0x78>
   18e18:	e30e01ec 	movw	r0, #57836	; 0xe1ec
   18e1c:	e3400002 	movt	r0, #2
   18e20:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18e24:	e3401002 	movt	r1, #2
   18e28:	e300211e 	movw	r2, #286	; 0x11e
   18e2c:	ebfff6df 	bl	169b0 <uspi_assertion_failed>
	USBRequestSetStatus (pURB, 0);
   18e30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   18e34:	e3a01000 	mov	r1, #0
   18e38:	eb00220f 	bl	2167c <USBRequestSetStatus>
	
	if (USBEndpointGetType (USBRequestGetEndpoint (pURB)) == EndpointTypeControl)
   18e3c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   18e40:	eb0021e5 	bl	215dc <USBRequestGetEndpoint>
   18e44:	e1a03000 	mov	r3, r0
   18e48:	e1a00003 	mov	r0, r3
   18e4c:	eb002013 	bl	20ea0 <USBEndpointGetType>
   18e50:	e1a03000 	mov	r3, r0
   18e54:	e3530000 	cmp	r3, #0
   18e58:	1a000068 	bne	19000 <DWHCIDeviceSubmitBlockingRequest+0x248>
	{
		TSetupData *pSetup = USBRequestGetSetupData (pURB);
   18e5c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   18e60:	eb002287 	bl	21884 <USBRequestGetSetupData>
   18e64:	e50b0010 	str	r0, [fp, #-16]
		assert (pSetup != 0);
   18e68:	e51b3010 	ldr	r3, [fp, #-16]
   18e6c:	e3530000 	cmp	r3, #0
   18e70:	1a000005 	bne	18e8c <DWHCIDeviceSubmitBlockingRequest+0xd4>
   18e74:	e30e01e0 	movw	r0, #57824	; 0xe1e0
   18e78:	e3400002 	movt	r0, #2
   18e7c:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18e80:	e3401002 	movt	r1, #2
   18e84:	e3a02f49 	mov	r2, #292	; 0x124
   18e88:	ebfff6c8 	bl	169b0 <uspi_assertion_failed>

		if (pSetup->bmRequestType & REQUEST_IN)
   18e8c:	e51b3010 	ldr	r3, [fp, #-16]
   18e90:	e5d33000 	ldrb	r3, [r3]
   18e94:	e6ef3073 	uxtb	r3, r3
   18e98:	e6af3073 	sxtb	r3, r3
   18e9c:	e3530000 	cmp	r3, #0
   18ea0:	aa000024 	bge	18f38 <DWHCIDeviceSubmitBlockingRequest+0x180>
		{
			assert (USBRequestGetBufLen (pURB) > 0);
   18ea4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   18ea8:	eb0022d6 	bl	21a08 <USBRequestGetBufLen>
   18eac:	e1a03000 	mov	r3, r0
   18eb0:	e3530000 	cmp	r3, #0
   18eb4:	1a000005 	bne	18ed0 <DWHCIDeviceSubmitBlockingRequest+0x118>
   18eb8:	e30e01f8 	movw	r0, #57848	; 0xe1f8
   18ebc:	e3400002 	movt	r0, #2
   18ec0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   18ec4:	e3401002 	movt	r1, #2
   18ec8:	e3a02f4a 	mov	r2, #296	; 0x128
   18ecc:	ebfff6b7 	bl	169b0 <uspi_assertion_failed>
			
			if (   !DWHCIDeviceTransferStage (pThis, pURB, FALSE, FALSE)
   18ed0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18ed4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   18ed8:	e3a02000 	mov	r2, #0
   18edc:	e3a03000 	mov	r3, #0
   18ee0:	eb000483 	bl	1a0f4 <DWHCIDeviceTransferStage>
   18ee4:	e1a03000 	mov	r3, r0
   18ee8:	e3530000 	cmp	r3, #0
   18eec:	0a00000f 	beq	18f30 <DWHCIDeviceSubmitBlockingRequest+0x178>
			    || !DWHCIDeviceTransferStage (pThis, pURB, TRUE,  FALSE)
   18ef0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18ef4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   18ef8:	e3a02001 	mov	r2, #1
   18efc:	e3a03000 	mov	r3, #0
   18f00:	eb00047b 	bl	1a0f4 <DWHCIDeviceTransferStage>
   18f04:	e1a03000 	mov	r3, r0
   18f08:	e3530000 	cmp	r3, #0
   18f0c:	0a000007 	beq	18f30 <DWHCIDeviceSubmitBlockingRequest+0x178>
			    || !DWHCIDeviceTransferStage (pThis, pURB, FALSE, TRUE))
   18f10:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18f14:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   18f18:	e3a02000 	mov	r2, #0
   18f1c:	e3a03001 	mov	r3, #1
   18f20:	eb000473 	bl	1a0f4 <DWHCIDeviceTransferStage>
   18f24:	e1a03000 	mov	r3, r0
   18f28:	e3530000 	cmp	r3, #0
   18f2c:	1a000032 	bne	18ffc <DWHCIDeviceSubmitBlockingRequest+0x244>
			{
				return FALSE;
   18f30:	e3a04000 	mov	r4, #0
   18f34:	ea000064 	b	190cc <DWHCIDeviceSubmitBlockingRequest+0x314>
			}
		}
		else
		{
			if (USBRequestGetBufLen (pURB) == 0)
   18f38:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   18f3c:	eb0022b1 	bl	21a08 <USBRequestGetBufLen>
   18f40:	e1a03000 	mov	r3, r0
   18f44:	e3530000 	cmp	r3, #0
   18f48:	1a000011 	bne	18f94 <DWHCIDeviceSubmitBlockingRequest+0x1dc>
			{
				if (   !DWHCIDeviceTransferStage (pThis, pURB, FALSE, FALSE)
   18f4c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18f50:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   18f54:	e3a02000 	mov	r2, #0
   18f58:	e3a03000 	mov	r3, #0
   18f5c:	eb000464 	bl	1a0f4 <DWHCIDeviceTransferStage>
   18f60:	e1a03000 	mov	r3, r0
   18f64:	e3530000 	cmp	r3, #0
   18f68:	0a000007 	beq	18f8c <DWHCIDeviceSubmitBlockingRequest+0x1d4>
				    || !DWHCIDeviceTransferStage (pThis, pURB, TRUE,  TRUE))
   18f6c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18f70:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   18f74:	e3a02001 	mov	r2, #1
   18f78:	e3a03001 	mov	r3, #1
   18f7c:	eb00045c 	bl	1a0f4 <DWHCIDeviceTransferStage>
   18f80:	e1a03000 	mov	r3, r0
   18f84:	e3530000 	cmp	r3, #0
   18f88:	1a00001b 	bne	18ffc <DWHCIDeviceSubmitBlockingRequest+0x244>
				{
					return FALSE;
   18f8c:	e3a04000 	mov	r4, #0
   18f90:	ea00004d 	b	190cc <DWHCIDeviceSubmitBlockingRequest+0x314>
				}
			}
			else
			{
				if (   !DWHCIDeviceTransferStage (pThis, pURB, FALSE, FALSE)
   18f94:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18f98:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   18f9c:	e3a02000 	mov	r2, #0
   18fa0:	e3a03000 	mov	r3, #0
   18fa4:	eb000452 	bl	1a0f4 <DWHCIDeviceTransferStage>
   18fa8:	e1a03000 	mov	r3, r0
   18fac:	e3530000 	cmp	r3, #0
   18fb0:	0a00000f 	beq	18ff4 <DWHCIDeviceSubmitBlockingRequest+0x23c>
				    || !DWHCIDeviceTransferStage (pThis, pURB, FALSE, FALSE)
   18fb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18fb8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   18fbc:	e3a02000 	mov	r2, #0
   18fc0:	e3a03000 	mov	r3, #0
   18fc4:	eb00044a 	bl	1a0f4 <DWHCIDeviceTransferStage>
   18fc8:	e1a03000 	mov	r3, r0
   18fcc:	e3530000 	cmp	r3, #0
   18fd0:	0a000007 	beq	18ff4 <DWHCIDeviceSubmitBlockingRequest+0x23c>
				    || !DWHCIDeviceTransferStage (pThis, pURB, TRUE,  TRUE))
   18fd4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18fd8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   18fdc:	e3a02001 	mov	r2, #1
   18fe0:	e3a03001 	mov	r3, #1
   18fe4:	eb000442 	bl	1a0f4 <DWHCIDeviceTransferStage>
   18fe8:	e1a03000 	mov	r3, r0
   18fec:	e3530000 	cmp	r3, #0
   18ff0:	1a000001 	bne	18ffc <DWHCIDeviceSubmitBlockingRequest+0x244>
				{
					return FALSE;
   18ff4:	e3a04000 	mov	r4, #0
   18ff8:	ea000033 	b	190cc <DWHCIDeviceSubmitBlockingRequest+0x314>
   18ffc:	ea000030 	b	190c4 <DWHCIDeviceSubmitBlockingRequest+0x30c>
			}
		}
	}
	else
	{
		assert (   USBEndpointGetType (USBRequestGetEndpoint (pURB)) == EndpointTypeBulk
   19000:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   19004:	eb002174 	bl	215dc <USBRequestGetEndpoint>
   19008:	e1a03000 	mov	r3, r0
   1900c:	e1a00003 	mov	r0, r3
   19010:	eb001fa2 	bl	20ea0 <USBEndpointGetType>
   19014:	e1a03000 	mov	r3, r0
   19018:	e3530001 	cmp	r3, #1
   1901c:	0a00000d 	beq	19058 <DWHCIDeviceSubmitBlockingRequest+0x2a0>
   19020:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   19024:	eb00216c 	bl	215dc <USBRequestGetEndpoint>
   19028:	e1a03000 	mov	r3, r0
   1902c:	e1a00003 	mov	r0, r3
   19030:	eb001f9a 	bl	20ea0 <USBEndpointGetType>
   19034:	e1a03000 	mov	r3, r0
   19038:	e3530002 	cmp	r3, #2
   1903c:	0a000005 	beq	19058 <DWHCIDeviceSubmitBlockingRequest+0x2a0>
   19040:	e30e0218 	movw	r0, #57880	; 0xe218
   19044:	e3400002 	movt	r0, #2
   19048:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1904c:	e3401002 	movt	r1, #2
   19050:	e3002149 	movw	r2, #329	; 0x149
   19054:	ebfff655 	bl	169b0 <uspi_assertion_failed>
		        || USBEndpointGetType (USBRequestGetEndpoint (pURB)) == EndpointTypeInterrupt);
		assert (USBRequestGetBufLen (pURB) > 0);
   19058:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   1905c:	eb002269 	bl	21a08 <USBRequestGetBufLen>
   19060:	e1a03000 	mov	r3, r0
   19064:	e3530000 	cmp	r3, #0
   19068:	1a000005 	bne	19084 <DWHCIDeviceSubmitBlockingRequest+0x2cc>
   1906c:	e30e01f8 	movw	r0, #57848	; 0xe1f8
   19070:	e3400002 	movt	r0, #2
   19074:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19078:	e3401002 	movt	r1, #2
   1907c:	e300214a 	movw	r2, #330	; 0x14a
   19080:	ebfff64a 	bl	169b0 <uspi_assertion_failed>
		
		if (!DWHCIDeviceTransferStage (pThis, pURB, USBEndpointIsDirectionIn (USBRequestGetEndpoint (pURB)), FALSE))
   19084:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   19088:	eb002153 	bl	215dc <USBRequestGetEndpoint>
   1908c:	e1a03000 	mov	r3, r0
   19090:	e1a00003 	mov	r0, r3
   19094:	eb001f9f 	bl	20f18 <USBEndpointIsDirectionIn>
   19098:	e1a03000 	mov	r3, r0
   1909c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   190a0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   190a4:	e1a02003 	mov	r2, r3
   190a8:	e3a03000 	mov	r3, #0
   190ac:	eb000410 	bl	1a0f4 <DWHCIDeviceTransferStage>
   190b0:	e1a03000 	mov	r3, r0
   190b4:	e3530000 	cmp	r3, #0
   190b8:	1a000001 	bne	190c4 <DWHCIDeviceSubmitBlockingRequest+0x30c>
		{
			return FALSE;
   190bc:	e3a04000 	mov	r4, #0
   190c0:	ea000001 	b	190cc <DWHCIDeviceSubmitBlockingRequest+0x314>
		}
	}

	DataMemBarrier ();
   190c4:	f57ff05f 	dmb	sy

	return TRUE;
   190c8:	e3a04001 	mov	r4, #1
   190cc:	e1a03005 	mov	r3, r5
   190d0:	e3080db8 	movw	r0, #36280	; 0x8db8
   190d4:	e3400001 	movt	r0, #1
   190d8:	e1a01003 	mov	r1, r3
   190dc:	ebfff1e0 	bl	15864 <__cyg_profile_func_exit>
   190e0:	e1a03004 	mov	r3, r4
}
   190e4:	e1a00003 	mov	r0, r3
   190e8:	e24bd00c 	sub	sp, fp, #12
   190ec:	e8bd8830 	pop	{r4, r5, fp, pc}

000190f0 <DWHCIDeviceSubmitAsyncRequest>:

boolean DWHCIDeviceSubmitAsyncRequest (TDWHCIDevice *pThis, TUSBRequest *pURB)
{
   190f0:	e92d4830 	push	{r4, r5, fp, lr}
   190f4:	e28db00c 	add	fp, sp, #12
   190f8:	e24dd010 	sub	sp, sp, #16
   190fc:	e1a0500e 	mov	r5, lr
   19100:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   19104:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   19108:	e1a03005 	mov	r3, r5
   1910c:	e30900f0 	movw	r0, #37104	; 0x90f0
   19110:	e3400001 	movt	r0, #1
   19114:	e1a01003 	mov	r1, r3
   19118:	ebfff17f 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1911c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   19120:	e3530000 	cmp	r3, #0
   19124:	1a000005 	bne	19140 <DWHCIDeviceSubmitAsyncRequest+0x50>
   19128:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1912c:	e3400002 	movt	r0, #2
   19130:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19134:	e3401002 	movt	r1, #2
   19138:	e3002159 	movw	r2, #345	; 0x159
   1913c:	ebfff61b 	bl	169b0 <uspi_assertion_failed>

	DataMemBarrier ();
   19140:	f57ff05f 	dmb	sy

	assert (pURB != 0);
   19144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   19148:	e3530000 	cmp	r3, #0
   1914c:	1a000005 	bne	19168 <DWHCIDeviceSubmitAsyncRequest+0x78>
   19150:	e30e01ec 	movw	r0, #57836	; 0xe1ec
   19154:	e3400002 	movt	r0, #2
   19158:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1915c:	e3401002 	movt	r1, #2
   19160:	e300215d 	movw	r2, #349	; 0x15d
   19164:	ebfff611 	bl	169b0 <uspi_assertion_failed>
	assert (   USBEndpointGetType (USBRequestGetEndpoint (pURB)) == EndpointTypeBulk
   19168:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   1916c:	eb00211a 	bl	215dc <USBRequestGetEndpoint>
   19170:	e1a03000 	mov	r3, r0
   19174:	e1a00003 	mov	r0, r3
   19178:	eb001f48 	bl	20ea0 <USBEndpointGetType>
   1917c:	e1a03000 	mov	r3, r0
   19180:	e3530001 	cmp	r3, #1
   19184:	0a00000d 	beq	191c0 <DWHCIDeviceSubmitAsyncRequest+0xd0>
   19188:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   1918c:	eb002112 	bl	215dc <USBRequestGetEndpoint>
   19190:	e1a03000 	mov	r3, r0
   19194:	e1a00003 	mov	r0, r3
   19198:	eb001f40 	bl	20ea0 <USBEndpointGetType>
   1919c:	e1a03000 	mov	r3, r0
   191a0:	e3530002 	cmp	r3, #2
   191a4:	0a000005 	beq	191c0 <DWHCIDeviceSubmitAsyncRequest+0xd0>
   191a8:	e30e0218 	movw	r0, #57880	; 0xe218
   191ac:	e3400002 	movt	r0, #2
   191b0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   191b4:	e3401002 	movt	r1, #2
   191b8:	e300215f 	movw	r2, #351	; 0x15f
   191bc:	ebfff5fb 	bl	169b0 <uspi_assertion_failed>
		|| USBEndpointGetType (USBRequestGetEndpoint (pURB)) == EndpointTypeInterrupt);
	assert (USBRequestGetBufLen (pURB) > 0);
   191c0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   191c4:	eb00220f 	bl	21a08 <USBRequestGetBufLen>
   191c8:	e1a03000 	mov	r3, r0
   191cc:	e3530000 	cmp	r3, #0
   191d0:	1a000005 	bne	191ec <DWHCIDeviceSubmitAsyncRequest+0xfc>
   191d4:	e30e01f8 	movw	r0, #57848	; 0xe1f8
   191d8:	e3400002 	movt	r0, #2
   191dc:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   191e0:	e3401002 	movt	r1, #2
   191e4:	e3a02e16 	mov	r2, #352	; 0x160
   191e8:	ebfff5f0 	bl	169b0 <uspi_assertion_failed>
	
	USBRequestSetStatus (pURB, 0);
   191ec:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   191f0:	e3a01000 	mov	r1, #0
   191f4:	eb002120 	bl	2167c <USBRequestSetStatus>
	
	boolean bOK = DWHCIDeviceTransferStageAsync (pThis, pURB, USBEndpointIsDirectionIn (USBRequestGetEndpoint (pURB)), FALSE);
   191f8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   191fc:	eb0020f6 	bl	215dc <USBRequestGetEndpoint>
   19200:	e1a03000 	mov	r3, r0
   19204:	e1a00003 	mov	r0, r3
   19208:	eb001f42 	bl	20f18 <USBEndpointIsDirectionIn>
   1920c:	e1a03000 	mov	r3, r0
   19210:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   19214:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   19218:	e1a02003 	mov	r2, r3
   1921c:	e3a03000 	mov	r3, #0
   19220:	eb000424 	bl	1a2b8 <DWHCIDeviceTransferStageAsync>
   19224:	e50b0010 	str	r0, [fp, #-16]

	DataMemBarrier ();
   19228:	f57ff05f 	dmb	sy

	return bOK;
   1922c:	e51b4010 	ldr	r4, [fp, #-16]
   19230:	e1a03005 	mov	r3, r5
   19234:	e30900f0 	movw	r0, #37104	; 0x90f0
   19238:	e3400001 	movt	r0, #1
   1923c:	e1a01003 	mov	r1, r3
   19240:	ebfff187 	bl	15864 <__cyg_profile_func_exit>
   19244:	e1a03004 	mov	r3, r4
}
   19248:	e1a00003 	mov	r0, r3
   1924c:	e24bd00c 	sub	sp, fp, #12
   19250:	e8bd8830 	pop	{r4, r5, fp, pc}

00019254 <DWHCIDeviceInitCore>:

boolean DWHCIDeviceInitCore (TDWHCIDevice *pThis)
{
   19254:	e92d4830 	push	{r4, r5, fp, lr}
   19258:	e28db00c 	add	fp, sp, #12
   1925c:	e24dd030 	sub	sp, sp, #48	; 0x30
   19260:	e1a0500e 	mov	r5, lr
   19264:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   19268:	e1a03005 	mov	r3, r5
   1926c:	e3090254 	movw	r0, #37460	; 0x9254
   19270:	e3400001 	movt	r0, #1
   19274:	e1a01003 	mov	r1, r3
   19278:	ebfff127 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1927c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   19280:	e3530000 	cmp	r3, #0
   19284:	1a000005 	bne	192a0 <DWHCIDeviceInitCore+0x4c>
   19288:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1928c:	e3400002 	movt	r0, #2
   19290:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19294:	e3401002 	movt	r1, #2
   19298:	e300216d 	movw	r2, #365	; 0x16d
   1929c:	ebfff5c3 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister USBConfig;
	DWHCIRegister (&USBConfig, DWHCI_CORE_USB_CFG);
   192a0:	e24b3018 	sub	r3, fp, #24
   192a4:	e1a00003 	mov	r0, r3
   192a8:	e3a0100c 	mov	r1, #12
   192ac:	e3431f98 	movt	r1, #16280	; 0x3f98
   192b0:	eb000b78 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterRead (&USBConfig);
   192b4:	e24b3018 	sub	r3, fp, #24
   192b8:	e1a00003 	mov	r0, r3
   192bc:	eb000bd8 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&USBConfig, ~DWHCI_CORE_USB_CFG_ULPI_EXT_VBUS_DRV);
   192c0:	e24b3018 	sub	r3, fp, #24
   192c4:	e1a00003 	mov	r0, r3
   192c8:	e3e01601 	mvn	r1, #1048576	; 0x100000
   192cc:	eb000c9d 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterAnd (&USBConfig, ~DWHCI_CORE_USB_CFG_TERM_SEL_DL_PULSE);
   192d0:	e24b3018 	sub	r3, fp, #24
   192d4:	e1a00003 	mov	r0, r3
   192d8:	e3e01501 	mvn	r1, #4194304	; 0x400000
   192dc:	eb000c99 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterWrite (&USBConfig);
   192e0:	e24b3018 	sub	r3, fp, #24
   192e4:	e1a00003 	mov	r0, r3
   192e8:	eb000bf3 	bl	1c2bc <DWHCIRegisterWrite>

	if (!DWHCIDeviceReset (pThis))
   192ec:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   192f0:	eb0001ca 	bl	19a20 <DWHCIDeviceReset>
   192f4:	e1a03000 	mov	r3, r0
   192f8:	e3530000 	cmp	r3, #0
   192fc:	1a000007 	bne	19320 <DWHCIDeviceInitCore+0xcc>
	{
		LogWrite (FromDWHCI, LOG_ERROR, "Reset failed");
   19300:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   19304:	e3400002 	movt	r0, #2
   19308:	e3a01001 	mov	r1, #1
   1930c:	e30e22ac 	movw	r2, #58028	; 0xe2ac
   19310:	e3402002 	movt	r2, #2
   19314:	ebfff58d 	bl	16950 <LogWrite>
		return FALSE;
   19318:	e3a04000 	mov	r4, #0
   1931c:	ea00009c 	b	19594 <DWHCIDeviceInitCore+0x340>
	}

	DWHCIRegisterRead (&USBConfig);
   19320:	e24b3018 	sub	r3, fp, #24
   19324:	e1a00003 	mov	r0, r3
   19328:	eb000bbd 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&USBConfig, ~DWHCI_CORE_USB_CFG_ULPI_UTMI_SEL);	// select UTMI+
   1932c:	e24b3018 	sub	r3, fp, #24
   19330:	e1a00003 	mov	r0, r3
   19334:	e3e01010 	mvn	r1, #16
   19338:	eb000c82 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterAnd (&USBConfig, ~DWHCI_CORE_USB_CFG_PHYIF);		// UTMI width is 8
   1933c:	e24b3018 	sub	r3, fp, #24
   19340:	e1a00003 	mov	r0, r3
   19344:	e3e01008 	mvn	r1, #8
   19348:	eb000c7e 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterWrite (&USBConfig);
   1934c:	e24b3018 	sub	r3, fp, #24
   19350:	e1a00003 	mov	r0, r3
   19354:	eb000bd8 	bl	1c2bc <DWHCIRegisterWrite>

	// Internal DMA mode only
	TDWHCIRegister HWConfig2;
	DWHCIRegister (&HWConfig2, DWHCI_CORE_HW_CFG2);
   19358:	e24b3024 	sub	r3, fp, #36	; 0x24
   1935c:	e1a00003 	mov	r0, r3
   19360:	e3a01048 	mov	r1, #72	; 0x48
   19364:	e3431f98 	movt	r1, #16280	; 0x3f98
   19368:	eb000b4a 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterRead (&HWConfig2);
   1936c:	e24b3024 	sub	r3, fp, #36	; 0x24
   19370:	e1a00003 	mov	r0, r3
   19374:	eb000baa 	bl	1c224 <DWHCIRegisterRead>
	assert (DWHCI_CORE_HW_CFG2_ARCHITECTURE (DWHCIRegisterGet (&HWConfig2)) == 2);
   19378:	e24b3024 	sub	r3, fp, #36	; 0x24
   1937c:	e1a00003 	mov	r0, r3
   19380:	eb000bf7 	bl	1c364 <DWHCIRegisterGet>
   19384:	e1a03000 	mov	r3, r0
   19388:	e1a031a3 	lsr	r3, r3, #3
   1938c:	e2033003 	and	r3, r3, #3
   19390:	e3530002 	cmp	r3, #2
   19394:	0a000005 	beq	193b0 <DWHCIDeviceInitCore+0x15c>
   19398:	e30e02bc 	movw	r0, #58044	; 0xe2bc
   1939c:	e3400002 	movt	r0, #2
   193a0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   193a4:	e3401002 	movt	r1, #2
   193a8:	e3002185 	movw	r2, #389	; 0x185
   193ac:	ebfff57f 	bl	169b0 <uspi_assertion_failed>
	
	DWHCIRegisterRead (&USBConfig);
   193b0:	e24b3018 	sub	r3, fp, #24
   193b4:	e1a00003 	mov	r0, r3
   193b8:	eb000b99 	bl	1c224 <DWHCIRegisterRead>
	if (   DWHCI_CORE_HW_CFG2_HS_PHY_TYPE (DWHCIRegisterGet (&HWConfig2)) == DWHCI_CORE_HW_CFG2_HS_PHY_TYPE_ULPI
   193bc:	e24b3024 	sub	r3, fp, #36	; 0x24
   193c0:	e1a00003 	mov	r0, r3
   193c4:	eb000be6 	bl	1c364 <DWHCIRegisterGet>
   193c8:	e1a03000 	mov	r3, r0
   193cc:	e1a03323 	lsr	r3, r3, #6
   193d0:	e2033003 	and	r3, r3, #3
   193d4:	e3530002 	cmp	r3, #2
   193d8:	1a000010 	bne	19420 <DWHCIDeviceInitCore+0x1cc>
	    && DWHCI_CORE_HW_CFG2_FS_PHY_TYPE (DWHCIRegisterGet (&HWConfig2)) == DWHCI_CORE_HW_CFG2_FS_PHY_TYPE_DEDICATED)
   193dc:	e24b3024 	sub	r3, fp, #36	; 0x24
   193e0:	e1a00003 	mov	r0, r3
   193e4:	eb000bde 	bl	1c364 <DWHCIRegisterGet>
   193e8:	e1a03000 	mov	r3, r0
   193ec:	e1a03423 	lsr	r3, r3, #8
   193f0:	e2033003 	and	r3, r3, #3
   193f4:	e3530001 	cmp	r3, #1
   193f8:	1a000008 	bne	19420 <DWHCIDeviceInitCore+0x1cc>
	{
		DWHCIRegisterOr (&USBConfig, DWHCI_CORE_USB_CFG_ULPI_FSLS);
   193fc:	e24b3018 	sub	r3, fp, #24
   19400:	e1a00003 	mov	r0, r3
   19404:	e3a01802 	mov	r1, #131072	; 0x20000
   19408:	eb000c79 	bl	1c5f4 <DWHCIRegisterOr>
		DWHCIRegisterOr (&USBConfig, DWHCI_CORE_USB_CFG_ULPI_CLK_SUS_M);
   1940c:	e24b3018 	sub	r3, fp, #24
   19410:	e1a00003 	mov	r0, r3
   19414:	e3a01702 	mov	r1, #524288	; 0x80000
   19418:	eb000c75 	bl	1c5f4 <DWHCIRegisterOr>
   1941c:	ea000007 	b	19440 <DWHCIDeviceInitCore+0x1ec>
	}
	else
	{
		DWHCIRegisterAnd (&USBConfig, ~DWHCI_CORE_USB_CFG_ULPI_FSLS);
   19420:	e24b3018 	sub	r3, fp, #24
   19424:	e1a00003 	mov	r0, r3
   19428:	e3e01802 	mvn	r1, #131072	; 0x20000
   1942c:	eb000c45 	bl	1c548 <DWHCIRegisterAnd>
		DWHCIRegisterAnd (&USBConfig, ~DWHCI_CORE_USB_CFG_ULPI_CLK_SUS_M);
   19430:	e24b3018 	sub	r3, fp, #24
   19434:	e1a00003 	mov	r0, r3
   19438:	e3e01702 	mvn	r1, #524288	; 0x80000
   1943c:	eb000c41 	bl	1c548 <DWHCIRegisterAnd>
	}
	DWHCIRegisterWrite (&USBConfig);
   19440:	e24b3018 	sub	r3, fp, #24
   19444:	e1a00003 	mov	r0, r3
   19448:	eb000b9b 	bl	1c2bc <DWHCIRegisterWrite>

	assert (pThis->m_nChannels == 0);
   1944c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   19450:	e5933000 	ldr	r3, [r3]
   19454:	e3530000 	cmp	r3, #0
   19458:	0a000005 	beq	19474 <DWHCIDeviceInitCore+0x220>
   1945c:	e30e0304 	movw	r0, #58116	; 0xe304
   19460:	e3400002 	movt	r0, #2
   19464:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19468:	e3401002 	movt	r1, #2
   1946c:	e3002195 	movw	r2, #405	; 0x195
   19470:	ebfff54e 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nChannels = DWHCI_CORE_HW_CFG2_NUM_HOST_CHANNELS (DWHCIRegisterGet (&HWConfig2));
   19474:	e24b3024 	sub	r3, fp, #36	; 0x24
   19478:	e1a00003 	mov	r0, r3
   1947c:	eb000bb8 	bl	1c364 <DWHCIRegisterGet>
   19480:	e1a03000 	mov	r3, r0
   19484:	e1a03723 	lsr	r3, r3, #14
   19488:	e203300f 	and	r3, r3, #15
   1948c:	e2832001 	add	r2, r3, #1
   19490:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   19494:	e5832000 	str	r2, [r3]
	assert (4 <= pThis->m_nChannels && pThis->m_nChannels <= DWHCI_MAX_CHANNELS);
   19498:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   1949c:	e5933000 	ldr	r3, [r3]
   194a0:	e3530003 	cmp	r3, #3
   194a4:	9a000003 	bls	194b8 <DWHCIDeviceInitCore+0x264>
   194a8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   194ac:	e5933000 	ldr	r3, [r3]
   194b0:	e3530010 	cmp	r3, #16
   194b4:	9a000005 	bls	194d0 <DWHCIDeviceInitCore+0x27c>
   194b8:	e30e031c 	movw	r0, #58140	; 0xe31c
   194bc:	e3400002 	movt	r0, #2
   194c0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   194c4:	e3401002 	movt	r1, #2
   194c8:	e3002197 	movw	r2, #407	; 0x197
   194cc:	ebfff537 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister AHBConfig;
	DWHCIRegister (&AHBConfig, DWHCI_CORE_AHB_CFG);
   194d0:	e24b3030 	sub	r3, fp, #48	; 0x30
   194d4:	e1a00003 	mov	r0, r3
   194d8:	e3a01008 	mov	r1, #8
   194dc:	e3431f98 	movt	r1, #16280	; 0x3f98
   194e0:	eb000aec 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterRead (&AHBConfig);
   194e4:	e24b3030 	sub	r3, fp, #48	; 0x30
   194e8:	e1a00003 	mov	r0, r3
   194ec:	eb000b4c 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterOr (&AHBConfig, DWHCI_CORE_AHB_CFG_DMAENABLE);
   194f0:	e24b3030 	sub	r3, fp, #48	; 0x30
   194f4:	e1a00003 	mov	r0, r3
   194f8:	e3a01020 	mov	r1, #32
   194fc:	eb000c3c 	bl	1c5f4 <DWHCIRegisterOr>
	//DWHCIRegisterOr (&AHBConfig, DWHCI_CORE_AHB_CFG_AHB_SINGLE);	// if DMA single mode should be used
	DWHCIRegisterOr (&AHBConfig, DWHCI_CORE_AHB_CFG_WAIT_AXI_WRITES);
   19500:	e24b3030 	sub	r3, fp, #48	; 0x30
   19504:	e1a00003 	mov	r0, r3
   19508:	e3a01010 	mov	r1, #16
   1950c:	eb000c38 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterAnd (&AHBConfig, ~DWHCI_CORE_AHB_CFG_MAX_AXI_BURST__MASK);
   19510:	e24b3030 	sub	r3, fp, #48	; 0x30
   19514:	e1a00003 	mov	r0, r3
   19518:	e3e01006 	mvn	r1, #6
   1951c:	eb000c09 	bl	1c548 <DWHCIRegisterAnd>
	//DWHCIRegisterOr (&AHBConfig, 0 << DWHCI_CORE_AHB_CFG_MAX_AXI_BURST__SHIFT);	// max. AXI burst length 4
	DWHCIRegisterWrite (&AHBConfig);
   19520:	e24b3030 	sub	r3, fp, #48	; 0x30
   19524:	e1a00003 	mov	r0, r3
   19528:	eb000b63 	bl	1c2bc <DWHCIRegisterWrite>

	// HNP and SRP are not used
	DWHCIRegisterRead (&USBConfig);
   1952c:	e24b3018 	sub	r3, fp, #24
   19530:	e1a00003 	mov	r0, r3
   19534:	eb000b3a 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&USBConfig, ~DWHCI_CORE_USB_CFG_HNP_CAPABLE);
   19538:	e24b3018 	sub	r3, fp, #24
   1953c:	e1a00003 	mov	r0, r3
   19540:	e3e01c02 	mvn	r1, #512	; 0x200
   19544:	eb000bff 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterAnd (&USBConfig, ~DWHCI_CORE_USB_CFG_SRP_CAPABLE);
   19548:	e24b3018 	sub	r3, fp, #24
   1954c:	e1a00003 	mov	r0, r3
   19550:	e3e01c01 	mvn	r1, #256	; 0x100
   19554:	eb000bfb 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterWrite (&USBConfig);
   19558:	e24b3018 	sub	r3, fp, #24
   1955c:	e1a00003 	mov	r0, r3
   19560:	eb000b55 	bl	1c2bc <DWHCIRegisterWrite>

	DWHCIDeviceEnableCommonInterrupts (pThis);
   19564:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   19568:	eb0001a7 	bl	19c0c <DWHCIDeviceEnableCommonInterrupts>

	_DWHCIRegister (&AHBConfig);
   1956c:	e24b3030 	sub	r3, fp, #48	; 0x30
   19570:	e1a00003 	mov	r0, r3
   19574:	eb000b0d 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&HWConfig2);
   19578:	e24b3024 	sub	r3, fp, #36	; 0x24
   1957c:	e1a00003 	mov	r0, r3
   19580:	eb000b0a 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&USBConfig);
   19584:	e24b3018 	sub	r3, fp, #24
   19588:	e1a00003 	mov	r0, r3
   1958c:	eb000b07 	bl	1c1b0 <_DWHCIRegister>

	return TRUE;
   19590:	e3a04001 	mov	r4, #1
   19594:	e1a03005 	mov	r3, r5
   19598:	e3090254 	movw	r0, #37460	; 0x9254
   1959c:	e3400001 	movt	r0, #1
   195a0:	e1a01003 	mov	r1, r3
   195a4:	ebfff0ae 	bl	15864 <__cyg_profile_func_exit>
   195a8:	e1a03004 	mov	r3, r4
}
   195ac:	e1a00003 	mov	r0, r3
   195b0:	e24bd00c 	sub	sp, fp, #12
   195b4:	e8bd8830 	pop	{r4, r5, fp, pc}

000195b8 <DWHCIDeviceInitHost>:

boolean DWHCIDeviceInitHost (TDWHCIDevice *pThis)
{
   195b8:	e92d4830 	push	{r4, r5, fp, lr}
   195bc:	e28db00c 	add	fp, sp, #12
   195c0:	e24dd068 	sub	sp, sp, #104	; 0x68
   195c4:	e1a0500e 	mov	r5, lr
   195c8:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
   195cc:	e1a03005 	mov	r3, r5
   195d0:	e30905b8 	movw	r0, #38328	; 0x95b8
   195d4:	e3400001 	movt	r0, #1
   195d8:	e1a01003 	mov	r1, r3
   195dc:	ebfff04e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   195e0:	e51b3070 	ldr	r3, [fp, #-112]	; 0xffffff90
   195e4:	e3530000 	cmp	r3, #0
   195e8:	1a000005 	bne	19604 <DWHCIDeviceInitHost+0x4c>
   195ec:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   195f0:	e3400002 	movt	r0, #2
   195f4:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   195f8:	e3401002 	movt	r1, #2
   195fc:	e3a02f6d 	mov	r2, #436	; 0x1b4
   19600:	ebfff4ea 	bl	169b0 <uspi_assertion_failed>

	// Restart the PHY clock
	TDWHCIRegister Power;
	DWHCIRegister2 (&Power, ARM_USB_POWER, 0);
   19604:	e24b3018 	sub	r3, fp, #24
   19608:	e1a00003 	mov	r0, r3
   1960c:	e3a01c0e 	mov	r1, #3584	; 0xe00
   19610:	e3431f98 	movt	r1, #16280	; 0x3f98
   19614:	e3a02000 	mov	r2, #0
   19618:	eb000abf 	bl	1c11c <DWHCIRegister2>
	DWHCIRegisterWrite (&Power);
   1961c:	e24b3018 	sub	r3, fp, #24
   19620:	e1a00003 	mov	r0, r3
   19624:	eb000b24 	bl	1c2bc <DWHCIRegisterWrite>

	TDWHCIRegister HostConfig;
	DWHCIRegister (&HostConfig, DWHCI_HOST_CFG);
   19628:	e24b3024 	sub	r3, fp, #36	; 0x24
   1962c:	e1a00003 	mov	r0, r3
   19630:	e3a01b01 	mov	r1, #1024	; 0x400
   19634:	e3431f98 	movt	r1, #16280	; 0x3f98
   19638:	eb000a96 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterRead (&HostConfig);
   1963c:	e24b3024 	sub	r3, fp, #36	; 0x24
   19640:	e1a00003 	mov	r0, r3
   19644:	eb000af6 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&HostConfig, ~DWHCI_HOST_CFG_FSLS_PCLK_SEL__MASK);
   19648:	e24b3024 	sub	r3, fp, #36	; 0x24
   1964c:	e1a00003 	mov	r0, r3
   19650:	e3e01003 	mvn	r1, #3
   19654:	eb000bbb 	bl	1c548 <DWHCIRegisterAnd>

	TDWHCIRegister HWConfig2;
	DWHCIRegister (&HWConfig2, DWHCI_CORE_HW_CFG2);
   19658:	e24b3030 	sub	r3, fp, #48	; 0x30
   1965c:	e1a00003 	mov	r0, r3
   19660:	e3a01048 	mov	r1, #72	; 0x48
   19664:	e3431f98 	movt	r1, #16280	; 0x3f98
   19668:	eb000a8a 	bl	1c098 <DWHCIRegister>
	TDWHCIRegister USBConfig;
	DWHCIRegister (&USBConfig, DWHCI_CORE_USB_CFG);
   1966c:	e24b303c 	sub	r3, fp, #60	; 0x3c
   19670:	e1a00003 	mov	r0, r3
   19674:	e3a0100c 	mov	r1, #12
   19678:	e3431f98 	movt	r1, #16280	; 0x3f98
   1967c:	eb000a85 	bl	1c098 <DWHCIRegister>
	if (   DWHCI_CORE_HW_CFG2_HS_PHY_TYPE (DWHCIRegisterRead (&HWConfig2)) == DWHCI_CORE_HW_CFG2_HS_PHY_TYPE_ULPI
   19680:	e24b3030 	sub	r3, fp, #48	; 0x30
   19684:	e1a00003 	mov	r0, r3
   19688:	eb000ae5 	bl	1c224 <DWHCIRegisterRead>
   1968c:	e1a03000 	mov	r3, r0
   19690:	e1a03323 	lsr	r3, r3, #6
   19694:	e2033003 	and	r3, r3, #3
   19698:	e3530002 	cmp	r3, #2
   1969c:	1a000013 	bne	196f0 <DWHCIDeviceInitHost+0x138>
	    && DWHCI_CORE_HW_CFG2_FS_PHY_TYPE (DWHCIRegisterGet (&HWConfig2)) == DWHCI_CORE_HW_CFG2_FS_PHY_TYPE_DEDICATED
   196a0:	e24b3030 	sub	r3, fp, #48	; 0x30
   196a4:	e1a00003 	mov	r0, r3
   196a8:	eb000b2d 	bl	1c364 <DWHCIRegisterGet>
   196ac:	e1a03000 	mov	r3, r0
   196b0:	e1a03423 	lsr	r3, r3, #8
   196b4:	e2033003 	and	r3, r3, #3
   196b8:	e3530001 	cmp	r3, #1
   196bc:	1a00000b 	bne	196f0 <DWHCIDeviceInitHost+0x138>
	    && (DWHCIRegisterRead (&USBConfig) & DWHCI_CORE_USB_CFG_ULPI_FSLS))
   196c0:	e24b303c 	sub	r3, fp, #60	; 0x3c
   196c4:	e1a00003 	mov	r0, r3
   196c8:	eb000ad5 	bl	1c224 <DWHCIRegisterRead>
   196cc:	e1a03000 	mov	r3, r0
   196d0:	e2033802 	and	r3, r3, #131072	; 0x20000
   196d4:	e3530000 	cmp	r3, #0
   196d8:	0a000004 	beq	196f0 <DWHCIDeviceInitHost+0x138>
	{
		DWHCIRegisterOr (&HostConfig, DWHCI_HOST_CFG_FSLS_PCLK_SEL_48_MHZ);
   196dc:	e24b3024 	sub	r3, fp, #36	; 0x24
   196e0:	e1a00003 	mov	r0, r3
   196e4:	e3a01001 	mov	r1, #1
   196e8:	eb000bc1 	bl	1c5f4 <DWHCIRegisterOr>
   196ec:	ea000003 	b	19700 <DWHCIDeviceInitHost+0x148>
	}
	else
	{
		DWHCIRegisterOr (&HostConfig, DWHCI_HOST_CFG_FSLS_PCLK_SEL_30_60_MHZ);
   196f0:	e24b3024 	sub	r3, fp, #36	; 0x24
   196f4:	e1a00003 	mov	r0, r3
   196f8:	e3a01000 	mov	r1, #0
   196fc:	eb000bbc 	bl	1c5f4 <DWHCIRegisterOr>
	}

	DWHCIRegisterWrite (&HostConfig);
   19700:	e24b3024 	sub	r3, fp, #36	; 0x24
   19704:	e1a00003 	mov	r0, r3
   19708:	eb000aeb 	bl	1c2bc <DWHCIRegisterWrite>

#ifdef DWC_CFG_DYNAMIC_FIFO
	TDWHCIRegister RxFIFOSize;
	DWHCIRegister2 (&RxFIFOSize, DWHCI_CORE_RX_FIFO_SIZ, DWC_CFG_HOST_RX_FIFO_SIZE);
   1970c:	e24b3048 	sub	r3, fp, #72	; 0x48
   19710:	e1a00003 	mov	r0, r3
   19714:	e3a01024 	mov	r1, #36	; 0x24
   19718:	e3431f98 	movt	r1, #16280	; 0x3f98
   1971c:	e3a02b01 	mov	r2, #1024	; 0x400
   19720:	eb000a7d 	bl	1c11c <DWHCIRegister2>
	DWHCIRegisterWrite (&RxFIFOSize);
   19724:	e24b3048 	sub	r3, fp, #72	; 0x48
   19728:	e1a00003 	mov	r0, r3
   1972c:	eb000ae2 	bl	1c2bc <DWHCIRegisterWrite>
	
	TDWHCIRegister NonPeriodicTxFIFOSize;
	DWHCIRegister2 (&NonPeriodicTxFIFOSize, DWHCI_CORE_NPER_TX_FIFO_SIZ, 0);
   19730:	e24b3054 	sub	r3, fp, #84	; 0x54
   19734:	e1a00003 	mov	r0, r3
   19738:	e3a01028 	mov	r1, #40	; 0x28
   1973c:	e3431f98 	movt	r1, #16280	; 0x3f98
   19740:	e3a02000 	mov	r2, #0
   19744:	eb000a74 	bl	1c11c <DWHCIRegister2>
	DWHCIRegisterOr (&NonPeriodicTxFIFOSize, DWC_CFG_HOST_RX_FIFO_SIZE);
   19748:	e24b3054 	sub	r3, fp, #84	; 0x54
   1974c:	e1a00003 	mov	r0, r3
   19750:	e3a01b01 	mov	r1, #1024	; 0x400
   19754:	eb000ba6 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterOr (&NonPeriodicTxFIFOSize, DWC_CFG_HOST_NPER_TX_FIFO_SIZE << 16);
   19758:	e24b3054 	sub	r3, fp, #84	; 0x54
   1975c:	e1a00003 	mov	r0, r3
   19760:	e3a01301 	mov	r1, #67108864	; 0x4000000
   19764:	eb000ba2 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterWrite (&NonPeriodicTxFIFOSize);
   19768:	e24b3054 	sub	r3, fp, #84	; 0x54
   1976c:	e1a00003 	mov	r0, r3
   19770:	eb000ad1 	bl	1c2bc <DWHCIRegisterWrite>
	
	TDWHCIRegister HostPeriodicTxFIFOSize;
	DWHCIRegister2 (&HostPeriodicTxFIFOSize, DWHCI_CORE_HOST_PER_TX_FIFO_SIZ, 0);
   19774:	e24b3060 	sub	r3, fp, #96	; 0x60
   19778:	e1a00003 	mov	r0, r3
   1977c:	e3a01c01 	mov	r1, #256	; 0x100
   19780:	e3431f98 	movt	r1, #16280	; 0x3f98
   19784:	e3a02000 	mov	r2, #0
   19788:	eb000a63 	bl	1c11c <DWHCIRegister2>
	DWHCIRegisterOr (&HostPeriodicTxFIFOSize, DWC_CFG_HOST_RX_FIFO_SIZE + DWC_CFG_HOST_NPER_TX_FIFO_SIZE);
   1978c:	e24b3060 	sub	r3, fp, #96	; 0x60
   19790:	e1a00003 	mov	r0, r3
   19794:	e3a01b02 	mov	r1, #2048	; 0x800
   19798:	eb000b95 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterOr (&HostPeriodicTxFIFOSize, DWC_CFG_HOST_PER_TX_FIFO_SIZE << 16);
   1979c:	e24b3060 	sub	r3, fp, #96	; 0x60
   197a0:	e1a00003 	mov	r0, r3
   197a4:	e3a01301 	mov	r1, #67108864	; 0x4000000
   197a8:	eb000b91 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterWrite (&HostPeriodicTxFIFOSize);
   197ac:	e24b3060 	sub	r3, fp, #96	; 0x60
   197b0:	e1a00003 	mov	r0, r3
   197b4:	eb000ac0 	bl	1c2bc <DWHCIRegisterWrite>
#endif

	DWHCIDeviceFlushTxFIFO (pThis, 0x10);	 	// Flush all TX FIFOs
   197b8:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
   197bc:	e3a01010 	mov	r1, #16
   197c0:	eb0001d2 	bl	19f10 <DWHCIDeviceFlushTxFIFO>
	DWHCIDeviceFlushRxFIFO (pThis);
   197c4:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
   197c8:	eb000212 	bl	1a018 <DWHCIDeviceFlushRxFIFO>

	TDWHCIRegister HostPort;
	DWHCIRegister (&HostPort, DWHCI_HOST_PORT);
   197cc:	e24b306c 	sub	r3, fp, #108	; 0x6c
   197d0:	e1a00003 	mov	r0, r3
   197d4:	e3a01d11 	mov	r1, #1088	; 0x440
   197d8:	e3431f98 	movt	r1, #16280	; 0x3f98
   197dc:	eb000a2d 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterRead (&HostPort);
   197e0:	e24b306c 	sub	r3, fp, #108	; 0x6c
   197e4:	e1a00003 	mov	r0, r3
   197e8:	eb000a8d 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&HostPort, ~DWHCI_HOST_PORT_DEFAULT_MASK);
   197ec:	e24b306c 	sub	r3, fp, #108	; 0x6c
   197f0:	e1a00003 	mov	r0, r3
   197f4:	e3e0102e 	mvn	r1, #46	; 0x2e
   197f8:	eb000b52 	bl	1c548 <DWHCIRegisterAnd>
	if (!(DWHCIRegisterGet (&HostPort) & DWHCI_HOST_PORT_POWER))
   197fc:	e24b306c 	sub	r3, fp, #108	; 0x6c
   19800:	e1a00003 	mov	r0, r3
   19804:	eb000ad6 	bl	1c364 <DWHCIRegisterGet>
   19808:	e1a03000 	mov	r3, r0
   1980c:	e2033a01 	and	r3, r3, #4096	; 0x1000
   19810:	e3530000 	cmp	r3, #0
   19814:	1a000006 	bne	19834 <DWHCIDeviceInitHost+0x27c>
	{
		DWHCIRegisterOr (&HostPort, DWHCI_HOST_PORT_POWER);
   19818:	e24b306c 	sub	r3, fp, #108	; 0x6c
   1981c:	e1a00003 	mov	r0, r3
   19820:	e3a01a01 	mov	r1, #4096	; 0x1000
   19824:	eb000b72 	bl	1c5f4 <DWHCIRegisterOr>
		DWHCIRegisterWrite (&HostPort);
   19828:	e24b306c 	sub	r3, fp, #108	; 0x6c
   1982c:	e1a00003 	mov	r0, r3
   19830:	eb000aa1 	bl	1c2bc <DWHCIRegisterWrite>
	}
	
	DWHCIDeviceEnableHostInterrupts (pThis);
   19834:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
   19838:	eb00011b 	bl	19cac <DWHCIDeviceEnableHostInterrupts>

	_DWHCIRegister (&HostPort);
   1983c:	e24b306c 	sub	r3, fp, #108	; 0x6c
   19840:	e1a00003 	mov	r0, r3
   19844:	eb000a59 	bl	1c1b0 <_DWHCIRegister>
#ifdef DWC_CFG_DYNAMIC_FIFO
	_DWHCIRegister (&HostPeriodicTxFIFOSize);
   19848:	e24b3060 	sub	r3, fp, #96	; 0x60
   1984c:	e1a00003 	mov	r0, r3
   19850:	eb000a56 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&NonPeriodicTxFIFOSize);
   19854:	e24b3054 	sub	r3, fp, #84	; 0x54
   19858:	e1a00003 	mov	r0, r3
   1985c:	eb000a53 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&RxFIFOSize);
   19860:	e24b3048 	sub	r3, fp, #72	; 0x48
   19864:	e1a00003 	mov	r0, r3
   19868:	eb000a50 	bl	1c1b0 <_DWHCIRegister>
#endif
	_DWHCIRegister (&USBConfig);
   1986c:	e24b303c 	sub	r3, fp, #60	; 0x3c
   19870:	e1a00003 	mov	r0, r3
   19874:	eb000a4d 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&HWConfig2);
   19878:	e24b3030 	sub	r3, fp, #48	; 0x30
   1987c:	e1a00003 	mov	r0, r3
   19880:	eb000a4a 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&HostConfig);
   19884:	e24b3024 	sub	r3, fp, #36	; 0x24
   19888:	e1a00003 	mov	r0, r3
   1988c:	eb000a47 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&Power);
   19890:	e24b3018 	sub	r3, fp, #24
   19894:	e1a00003 	mov	r0, r3
   19898:	eb000a44 	bl	1c1b0 <_DWHCIRegister>

	return TRUE;
   1989c:	e3a04001 	mov	r4, #1
   198a0:	e1a03005 	mov	r3, r5
   198a4:	e30905b8 	movw	r0, #38328	; 0x95b8
   198a8:	e3400001 	movt	r0, #1
   198ac:	e1a01003 	mov	r1, r3
   198b0:	ebffefeb 	bl	15864 <__cyg_profile_func_exit>
   198b4:	e1a03004 	mov	r3, r4
}
   198b8:	e1a00003 	mov	r0, r3
   198bc:	e24bd00c 	sub	sp, fp, #12
   198c0:	e8bd8830 	pop	{r4, r5, fp, pc}

000198c4 <DWHCIDeviceEnableRootPort>:

boolean DWHCIDeviceEnableRootPort (TDWHCIDevice *pThis)
{
   198c4:	e92d4830 	push	{r4, r5, fp, lr}
   198c8:	e28db00c 	add	fp, sp, #12
   198cc:	e24dd020 	sub	sp, sp, #32
   198d0:	e1a0500e 	mov	r5, lr
   198d4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   198d8:	e1a03005 	mov	r3, r5
   198dc:	e30908c4 	movw	r0, #39108	; 0x98c4
   198e0:	e3400001 	movt	r0, #1
   198e4:	e1a01003 	mov	r1, r3
   198e8:	ebffef8b 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   198ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   198f0:	e3530000 	cmp	r3, #0
   198f4:	1a000005 	bne	19910 <DWHCIDeviceEnableRootPort+0x4c>
   198f8:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   198fc:	e3400002 	movt	r0, #2
   19900:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19904:	e3401002 	movt	r1, #2
   19908:	e3002202 	movw	r2, #514	; 0x202
   1990c:	ebfff427 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister HostPort;
	DWHCIRegister (&HostPort, DWHCI_HOST_PORT);
   19910:	e24b3018 	sub	r3, fp, #24
   19914:	e1a00003 	mov	r0, r3
   19918:	e3a01d11 	mov	r1, #1088	; 0x440
   1991c:	e3431f98 	movt	r1, #16280	; 0x3f98
   19920:	eb0009dc 	bl	1c098 <DWHCIRegister>
	if (!DWHCIDeviceWaitForBit (pThis, &HostPort, DWHCI_HOST_PORT_CONNECT, TRUE, 20))
   19924:	e24b2018 	sub	r2, fp, #24
   19928:	e3a03014 	mov	r3, #20
   1992c:	e58d3000 	str	r3, [sp]
   19930:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   19934:	e1a01002 	mov	r1, r2
   19938:	e3a02001 	mov	r2, #1
   1993c:	e3a03001 	mov	r3, #1
   19940:	eb0007fe 	bl	1b940 <DWHCIDeviceWaitForBit>
   19944:	e1a03000 	mov	r3, r0
   19948:	e3530000 	cmp	r3, #0
   1994c:	1a000004 	bne	19964 <DWHCIDeviceEnableRootPort+0xa0>
	{
		_DWHCIRegister (&HostPort);
   19950:	e24b3018 	sub	r3, fp, #24
   19954:	e1a00003 	mov	r0, r3
   19958:	eb000a14 	bl	1c1b0 <_DWHCIRegister>

		return FALSE;
   1995c:	e3a04000 	mov	r4, #0
   19960:	ea000025 	b	199fc <DWHCIDeviceEnableRootPort+0x138>
	}
	
	MsDelay (100);			// see USB 2.0 spec
   19964:	e3a00064 	mov	r0, #100	; 0x64
   19968:	ebfff304 	bl	16580 <MsDelay>

	DWHCIRegisterRead (&HostPort);
   1996c:	e24b3018 	sub	r3, fp, #24
   19970:	e1a00003 	mov	r0, r3
   19974:	eb000a2a 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&HostPort, ~DWHCI_HOST_PORT_DEFAULT_MASK);
   19978:	e24b3018 	sub	r3, fp, #24
   1997c:	e1a00003 	mov	r0, r3
   19980:	e3e0102e 	mvn	r1, #46	; 0x2e
   19984:	eb000aef 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterOr (&HostPort, DWHCI_HOST_PORT_RESET);
   19988:	e24b3018 	sub	r3, fp, #24
   1998c:	e1a00003 	mov	r0, r3
   19990:	e3a01c01 	mov	r1, #256	; 0x100
   19994:	eb000b16 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterWrite (&HostPort);
   19998:	e24b3018 	sub	r3, fp, #24
   1999c:	e1a00003 	mov	r0, r3
   199a0:	eb000a45 	bl	1c2bc <DWHCIRegisterWrite>
	
	MsDelay (50);			// see USB 2.0 spec (tDRSTR)
   199a4:	e3a00032 	mov	r0, #50	; 0x32
   199a8:	ebfff2f4 	bl	16580 <MsDelay>

	DWHCIRegisterRead (&HostPort);
   199ac:	e24b3018 	sub	r3, fp, #24
   199b0:	e1a00003 	mov	r0, r3
   199b4:	eb000a1a 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&HostPort, ~DWHCI_HOST_PORT_DEFAULT_MASK);
   199b8:	e24b3018 	sub	r3, fp, #24
   199bc:	e1a00003 	mov	r0, r3
   199c0:	e3e0102e 	mvn	r1, #46	; 0x2e
   199c4:	eb000adf 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterAnd (&HostPort, ~DWHCI_HOST_PORT_RESET);
   199c8:	e24b3018 	sub	r3, fp, #24
   199cc:	e1a00003 	mov	r0, r3
   199d0:	e3e01c01 	mvn	r1, #256	; 0x100
   199d4:	eb000adb 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterWrite (&HostPort);
   199d8:	e24b3018 	sub	r3, fp, #24
   199dc:	e1a00003 	mov	r0, r3
   199e0:	eb000a35 	bl	1c2bc <DWHCIRegisterWrite>

	// normally 10ms, seems to be too short for some devices
	MsDelay (20);			// see USB 2.0 spec (tRSTRCY)
   199e4:	e3a00014 	mov	r0, #20
   199e8:	ebfff2e4 	bl	16580 <MsDelay>

	_DWHCIRegister (&HostPort);
   199ec:	e24b3018 	sub	r3, fp, #24
   199f0:	e1a00003 	mov	r0, r3
   199f4:	eb0009ed 	bl	1c1b0 <_DWHCIRegister>

	return TRUE;
   199f8:	e3a04001 	mov	r4, #1
   199fc:	e1a03005 	mov	r3, r5
   19a00:	e30908c4 	movw	r0, #39108	; 0x98c4
   19a04:	e3400001 	movt	r0, #1
   19a08:	e1a01003 	mov	r1, r3
   19a0c:	ebffef94 	bl	15864 <__cyg_profile_func_exit>
   19a10:	e1a03004 	mov	r3, r4
}
   19a14:	e1a00003 	mov	r0, r3
   19a18:	e24bd00c 	sub	sp, fp, #12
   19a1c:	e8bd8830 	pop	{r4, r5, fp, pc}

00019a20 <DWHCIDeviceReset>:

boolean DWHCIDeviceReset (TDWHCIDevice *pThis)
{
   19a20:	e92d4830 	push	{r4, r5, fp, lr}
   19a24:	e28db00c 	add	fp, sp, #12
   19a28:	e24dd020 	sub	sp, sp, #32
   19a2c:	e1a0500e 	mov	r5, lr
   19a30:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   19a34:	e1a03005 	mov	r3, r5
   19a38:	e3090a20 	movw	r0, #39456	; 0x9a20
   19a3c:	e3400001 	movt	r0, #1
   19a40:	e1a01003 	mov	r1, r3
   19a44:	ebffef34 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   19a48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   19a4c:	e3530000 	cmp	r3, #0
   19a50:	1a000005 	bne	19a6c <DWHCIDeviceReset+0x4c>
   19a54:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   19a58:	e3400002 	movt	r0, #2
   19a5c:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19a60:	e3401002 	movt	r1, #2
   19a64:	e3002225 	movw	r2, #549	; 0x225
   19a68:	ebfff3d0 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister Reset;
	DWHCIRegister2 (&Reset, DWHCI_CORE_RESET, 0);
   19a6c:	e24b3018 	sub	r3, fp, #24
   19a70:	e1a00003 	mov	r0, r3
   19a74:	e3a01010 	mov	r1, #16
   19a78:	e3431f98 	movt	r1, #16280	; 0x3f98
   19a7c:	e3a02000 	mov	r2, #0
   19a80:	eb0009a5 	bl	1c11c <DWHCIRegister2>
	
	// wait for AHB master IDLE state
	if (!DWHCIDeviceWaitForBit (pThis, &Reset, DWHCI_CORE_RESET_AHB_IDLE, TRUE, 100))
   19a84:	e24b2018 	sub	r2, fp, #24
   19a88:	e3a03064 	mov	r3, #100	; 0x64
   19a8c:	e58d3000 	str	r3, [sp]
   19a90:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   19a94:	e1a01002 	mov	r1, r2
   19a98:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   19a9c:	e3a03001 	mov	r3, #1
   19aa0:	eb0007a6 	bl	1b940 <DWHCIDeviceWaitForBit>
   19aa4:	e1a03000 	mov	r3, r0
   19aa8:	e3530000 	cmp	r3, #0
   19aac:	1a000004 	bne	19ac4 <DWHCIDeviceReset+0xa4>
	{
		_DWHCIRegister (&Reset);
   19ab0:	e24b3018 	sub	r3, fp, #24
   19ab4:	e1a00003 	mov	r0, r3
   19ab8:	eb0009bc 	bl	1c1b0 <_DWHCIRegister>

		return FALSE;
   19abc:	e3a04000 	mov	r4, #0
   19ac0:	ea00001c 	b	19b38 <DWHCIDeviceReset+0x118>
	}
	
	// core soft reset
	DWHCIRegisterOr (&Reset, DWHCI_CORE_RESET_SOFT_RESET);
   19ac4:	e24b3018 	sub	r3, fp, #24
   19ac8:	e1a00003 	mov	r0, r3
   19acc:	e3a01001 	mov	r1, #1
   19ad0:	eb000ac7 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterWrite (&Reset);
   19ad4:	e24b3018 	sub	r3, fp, #24
   19ad8:	e1a00003 	mov	r0, r3
   19adc:	eb0009f6 	bl	1c2bc <DWHCIRegisterWrite>

	if (!DWHCIDeviceWaitForBit (pThis, &Reset, DWHCI_CORE_RESET_SOFT_RESET, FALSE, 10))
   19ae0:	e24b2018 	sub	r2, fp, #24
   19ae4:	e3a0300a 	mov	r3, #10
   19ae8:	e58d3000 	str	r3, [sp]
   19aec:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   19af0:	e1a01002 	mov	r1, r2
   19af4:	e3a02001 	mov	r2, #1
   19af8:	e3a03000 	mov	r3, #0
   19afc:	eb00078f 	bl	1b940 <DWHCIDeviceWaitForBit>
   19b00:	e1a03000 	mov	r3, r0
   19b04:	e3530000 	cmp	r3, #0
   19b08:	1a000004 	bne	19b20 <DWHCIDeviceReset+0x100>
	{
		_DWHCIRegister (&Reset);
   19b0c:	e24b3018 	sub	r3, fp, #24
   19b10:	e1a00003 	mov	r0, r3
   19b14:	eb0009a5 	bl	1c1b0 <_DWHCIRegister>

		return FALSE;
   19b18:	e3a04000 	mov	r4, #0
   19b1c:	ea000005 	b	19b38 <DWHCIDeviceReset+0x118>
	}
	
	MsDelay (100);
   19b20:	e3a00064 	mov	r0, #100	; 0x64
   19b24:	ebfff295 	bl	16580 <MsDelay>

	_DWHCIRegister (&Reset);
   19b28:	e24b3018 	sub	r3, fp, #24
   19b2c:	e1a00003 	mov	r0, r3
   19b30:	eb00099e 	bl	1c1b0 <_DWHCIRegister>

	return TRUE;
   19b34:	e3a04001 	mov	r4, #1
   19b38:	e1a03005 	mov	r3, r5
   19b3c:	e3090a20 	movw	r0, #39456	; 0x9a20
   19b40:	e3400001 	movt	r0, #1
   19b44:	e1a01003 	mov	r1, r3
   19b48:	ebffef45 	bl	15864 <__cyg_profile_func_exit>
   19b4c:	e1a03004 	mov	r3, r4
}
   19b50:	e1a00003 	mov	r0, r3
   19b54:	e24bd00c 	sub	sp, fp, #12
   19b58:	e8bd8830 	pop	{r4, r5, fp, pc}

00019b5c <DWHCIDeviceEnableGlobalInterrupts>:

void DWHCIDeviceEnableGlobalInterrupts (TDWHCIDevice *pThis)
{
   19b5c:	e92d4810 	push	{r4, fp, lr}
   19b60:	e28db008 	add	fp, sp, #8
   19b64:	e24dd01c 	sub	sp, sp, #28
   19b68:	e1a0400e 	mov	r4, lr
   19b6c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   19b70:	e1a03004 	mov	r3, r4
   19b74:	e3090b5c 	movw	r0, #39772	; 0x9b5c
   19b78:	e3400001 	movt	r0, #1
   19b7c:	e1a01003 	mov	r1, r3
   19b80:	ebffeee5 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   19b84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   19b88:	e3530000 	cmp	r3, #0
   19b8c:	1a000005 	bne	19ba8 <DWHCIDeviceEnableGlobalInterrupts+0x4c>
   19b90:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   19b94:	e3400002 	movt	r0, #2
   19b98:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19b9c:	e3401002 	movt	r1, #2
   19ba0:	e3002246 	movw	r2, #582	; 0x246
   19ba4:	ebfff381 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister AHBConfig;
	DWHCIRegister (&AHBConfig, DWHCI_CORE_AHB_CFG);
   19ba8:	e24b3018 	sub	r3, fp, #24
   19bac:	e1a00003 	mov	r0, r3
   19bb0:	e3a01008 	mov	r1, #8
   19bb4:	e3431f98 	movt	r1, #16280	; 0x3f98
   19bb8:	eb000936 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterRead (&AHBConfig);
   19bbc:	e24b3018 	sub	r3, fp, #24
   19bc0:	e1a00003 	mov	r0, r3
   19bc4:	eb000996 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterOr (&AHBConfig, DWHCI_CORE_AHB_CFG_GLOBALINT_MASK);
   19bc8:	e24b3018 	sub	r3, fp, #24
   19bcc:	e1a00003 	mov	r0, r3
   19bd0:	e3a01001 	mov	r1, #1
   19bd4:	eb000a86 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterWrite (&AHBConfig);
   19bd8:	e24b3018 	sub	r3, fp, #24
   19bdc:	e1a00003 	mov	r0, r3
   19be0:	eb0009b5 	bl	1c2bc <DWHCIRegisterWrite>

	_DWHCIRegister (&AHBConfig);
   19be4:	e24b3018 	sub	r3, fp, #24
   19be8:	e1a00003 	mov	r0, r3
   19bec:	eb00096f 	bl	1c1b0 <_DWHCIRegister>
   19bf0:	e1a03004 	mov	r3, r4
   19bf4:	e3090b5c 	movw	r0, #39772	; 0x9b5c
   19bf8:	e3400001 	movt	r0, #1
   19bfc:	e1a01003 	mov	r1, r3
   19c00:	ebffef17 	bl	15864 <__cyg_profile_func_exit>
}
   19c04:	e24bd008 	sub	sp, fp, #8
   19c08:	e8bd8810 	pop	{r4, fp, pc}

00019c0c <DWHCIDeviceEnableCommonInterrupts>:

void DWHCIDeviceEnableCommonInterrupts (TDWHCIDevice *pThis)
{
   19c0c:	e92d4810 	push	{r4, fp, lr}
   19c10:	e28db008 	add	fp, sp, #8
   19c14:	e24dd01c 	sub	sp, sp, #28
   19c18:	e1a0400e 	mov	r4, lr
   19c1c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   19c20:	e1a03004 	mov	r3, r4
   19c24:	e3090c0c 	movw	r0, #39948	; 0x9c0c
   19c28:	e3400001 	movt	r0, #1
   19c2c:	e1a01003 	mov	r1, r3
   19c30:	ebffeeb9 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   19c34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   19c38:	e3530000 	cmp	r3, #0
   19c3c:	1a000005 	bne	19c58 <DWHCIDeviceEnableCommonInterrupts+0x4c>
   19c40:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   19c44:	e3400002 	movt	r0, #2
   19c48:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19c4c:	e3401002 	movt	r1, #2
   19c50:	e3002253 	movw	r2, #595	; 0x253
   19c54:	ebfff355 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister IntStatus;
	DWHCIRegister (&IntStatus, DWHCI_CORE_INT_STAT);	// Clear any pending interrupts
   19c58:	e24b3018 	sub	r3, fp, #24
   19c5c:	e1a00003 	mov	r0, r3
   19c60:	e3a01014 	mov	r1, #20
   19c64:	e3431f98 	movt	r1, #16280	; 0x3f98
   19c68:	eb00090a 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterSetAll (&IntStatus);
   19c6c:	e24b3018 	sub	r3, fp, #24
   19c70:	e1a00003 	mov	r0, r3
   19c74:	eb000b16 	bl	1c8d4 <DWHCIRegisterSetAll>
	DWHCIRegisterWrite (&IntStatus);
   19c78:	e24b3018 	sub	r3, fp, #24
   19c7c:	e1a00003 	mov	r0, r3
   19c80:	eb00098d 	bl	1c2bc <DWHCIRegisterWrite>
	DWHCIRegisterWrite (&IntMask);
	
	_DWHCIRegister (&IntMask);
#endif

	_DWHCIRegister (&IntStatus);
   19c84:	e24b3018 	sub	r3, fp, #24
   19c88:	e1a00003 	mov	r0, r3
   19c8c:	eb000947 	bl	1c1b0 <_DWHCIRegister>
   19c90:	e1a03004 	mov	r3, r4
   19c94:	e3090c0c 	movw	r0, #39948	; 0x9c0c
   19c98:	e3400001 	movt	r0, #1
   19c9c:	e1a01003 	mov	r1, r3
   19ca0:	ebffeeef 	bl	15864 <__cyg_profile_func_exit>
}
   19ca4:	e24bd008 	sub	sp, fp, #8
   19ca8:	e8bd8810 	pop	{r4, fp, pc}

00019cac <DWHCIDeviceEnableHostInterrupts>:

void DWHCIDeviceEnableHostInterrupts (TDWHCIDevice *pThis)
{
   19cac:	e92d4810 	push	{r4, fp, lr}
   19cb0:	e28db008 	add	fp, sp, #8
   19cb4:	e24dd01c 	sub	sp, sp, #28
   19cb8:	e1a0400e 	mov	r4, lr
   19cbc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   19cc0:	e1a03004 	mov	r3, r4
   19cc4:	e3090cac 	movw	r0, #40108	; 0x9cac
   19cc8:	e3400001 	movt	r0, #1
   19ccc:	e1a01003 	mov	r1, r3
   19cd0:	ebffee91 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   19cd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   19cd8:	e3530000 	cmp	r3, #0
   19cdc:	1a000005 	bne	19cf8 <DWHCIDeviceEnableHostInterrupts+0x4c>
   19ce0:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   19ce4:	e3400002 	movt	r0, #2
   19ce8:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19cec:	e3401002 	movt	r1, #2
   19cf0:	e300226b 	movw	r2, #619	; 0x26b
   19cf4:	ebfff32d 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister IntMask;
	DWHCIRegister2 (&IntMask, DWHCI_CORE_INT_MASK, 0);
   19cf8:	e24b3018 	sub	r3, fp, #24
   19cfc:	e1a00003 	mov	r0, r3
   19d00:	e3a01018 	mov	r1, #24
   19d04:	e3431f98 	movt	r1, #16280	; 0x3f98
   19d08:	e3a02000 	mov	r2, #0
   19d0c:	eb000902 	bl	1c11c <DWHCIRegister2>
	DWHCIRegisterWrite (&IntMask);				// Disable all interrupts
   19d10:	e24b3018 	sub	r3, fp, #24
   19d14:	e1a00003 	mov	r0, r3
   19d18:	eb000967 	bl	1c2bc <DWHCIRegisterWrite>

	DWHCIDeviceEnableCommonInterrupts (pThis);
   19d1c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   19d20:	ebffffb9 	bl	19c0c <DWHCIDeviceEnableCommonInterrupts>

	DWHCIRegisterRead (&IntMask);
   19d24:	e24b3018 	sub	r3, fp, #24
   19d28:	e1a00003 	mov	r0, r3
   19d2c:	eb00093c 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterOr (&IntMask,   DWHCI_CORE_INT_MASK_HC_INTR
   19d30:	e24b3018 	sub	r3, fp, #24
   19d34:	e1a00003 	mov	r0, r3
   19d38:	e3a01402 	mov	r1, #33554432	; 0x2000000
   19d3c:	eb000a2c 	bl	1c5f4 <DWHCIRegisterOr>
				//| DWHCI_CORE_INT_MASK_PORT_INTR
				//| DWHCI_CORE_INT_MASK_DISCONNECT
			);
	DWHCIRegisterWrite (&IntMask);
   19d40:	e24b3018 	sub	r3, fp, #24
   19d44:	e1a00003 	mov	r0, r3
   19d48:	eb00095b 	bl	1c2bc <DWHCIRegisterWrite>
	
	_DWHCIRegister (&IntMask);
   19d4c:	e24b3018 	sub	r3, fp, #24
   19d50:	e1a00003 	mov	r0, r3
   19d54:	eb000915 	bl	1c1b0 <_DWHCIRegister>
   19d58:	e1a03004 	mov	r3, r4
   19d5c:	e3090cac 	movw	r0, #40108	; 0x9cac
   19d60:	e3400001 	movt	r0, #1
   19d64:	e1a01003 	mov	r1, r3
   19d68:	ebffeebd 	bl	15864 <__cyg_profile_func_exit>
}
   19d6c:	e24bd008 	sub	sp, fp, #8
   19d70:	e8bd8810 	pop	{r4, fp, pc}

00019d74 <DWHCIDeviceEnableChannelInterrupt>:

void DWHCIDeviceEnableChannelInterrupt (TDWHCIDevice *pThis, unsigned nChannel)
{
   19d74:	e92d4810 	push	{r4, fp, lr}
   19d78:	e28db008 	add	fp, sp, #8
   19d7c:	e24dd01c 	sub	sp, sp, #28
   19d80:	e1a0400e 	mov	r4, lr
   19d84:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   19d88:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   19d8c:	e1a03004 	mov	r3, r4
   19d90:	e3090d74 	movw	r0, #40308	; 0x9d74
   19d94:	e3400001 	movt	r0, #1
   19d98:	e1a01003 	mov	r1, r3
   19d9c:	ebffee5e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   19da0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   19da4:	e3530000 	cmp	r3, #0
   19da8:	1a000005 	bne	19dc4 <DWHCIDeviceEnableChannelInterrupt+0x50>
   19dac:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   19db0:	e3400002 	movt	r0, #2
   19db4:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19db8:	e3401002 	movt	r1, #2
   19dbc:	e300227f 	movw	r2, #639	; 0x27f
   19dc0:	ebfff2fa 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister AllChanInterruptMask;
	DWHCIRegister (&AllChanInterruptMask, DWHCI_HOST_ALLCHAN_INT_MASK);
   19dc4:	e24b3018 	sub	r3, fp, #24
   19dc8:	e1a00003 	mov	r0, r3
   19dcc:	e3001418 	movw	r1, #1048	; 0x418
   19dd0:	e3431f98 	movt	r1, #16280	; 0x3f98
   19dd4:	eb0008af 	bl	1c098 <DWHCIRegister>

	uspi_EnterCritical ();
   19dd8:	eb004b7f 	bl	2cbdc <uspi_EnterCritical>

	DWHCIRegisterRead (&AllChanInterruptMask);
   19ddc:	e24b3018 	sub	r3, fp, #24
   19de0:	e1a00003 	mov	r0, r3
   19de4:	eb00090e 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterOr (&AllChanInterruptMask, 1 << nChannel);
   19de8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   19dec:	e3a02001 	mov	r2, #1
   19df0:	e1a03312 	lsl	r3, r2, r3
   19df4:	e1a02003 	mov	r2, r3
   19df8:	e24b3018 	sub	r3, fp, #24
   19dfc:	e1a00003 	mov	r0, r3
   19e00:	e1a01002 	mov	r1, r2
   19e04:	eb0009fa 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterWrite (&AllChanInterruptMask);
   19e08:	e24b3018 	sub	r3, fp, #24
   19e0c:	e1a00003 	mov	r0, r3
   19e10:	eb000929 	bl	1c2bc <DWHCIRegisterWrite>

	uspi_LeaveCritical ();
   19e14:	eb004b97 	bl	2cc78 <uspi_LeaveCritical>

	_DWHCIRegister (&AllChanInterruptMask);
   19e18:	e24b3018 	sub	r3, fp, #24
   19e1c:	e1a00003 	mov	r0, r3
   19e20:	eb0008e2 	bl	1c1b0 <_DWHCIRegister>
   19e24:	e1a03004 	mov	r3, r4
   19e28:	e3090d74 	movw	r0, #40308	; 0x9d74
   19e2c:	e3400001 	movt	r0, #1
   19e30:	e1a01003 	mov	r1, r3
   19e34:	ebffee8a 	bl	15864 <__cyg_profile_func_exit>
}
   19e38:	e24bd008 	sub	sp, fp, #8
   19e3c:	e8bd8810 	pop	{r4, fp, pc}

00019e40 <DWHCIDeviceDisableChannelInterrupt>:

void DWHCIDeviceDisableChannelInterrupt (TDWHCIDevice *pThis, unsigned nChannel)
{
   19e40:	e92d4810 	push	{r4, fp, lr}
   19e44:	e28db008 	add	fp, sp, #8
   19e48:	e24dd01c 	sub	sp, sp, #28
   19e4c:	e1a0400e 	mov	r4, lr
   19e50:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   19e54:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   19e58:	e1a03004 	mov	r3, r4
   19e5c:	e3090e40 	movw	r0, #40512	; 0x9e40
   19e60:	e3400001 	movt	r0, #1
   19e64:	e1a01003 	mov	r1, r3
   19e68:	ebffee2b 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   19e6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   19e70:	e3530000 	cmp	r3, #0
   19e74:	1a000005 	bne	19e90 <DWHCIDeviceDisableChannelInterrupt+0x50>
   19e78:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   19e7c:	e3400002 	movt	r0, #2
   19e80:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19e84:	e3401002 	movt	r1, #2
   19e88:	e3002291 	movw	r2, #657	; 0x291
   19e8c:	ebfff2c7 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister AllChanInterruptMask;
	DWHCIRegister (&AllChanInterruptMask, DWHCI_HOST_ALLCHAN_INT_MASK);
   19e90:	e24b3018 	sub	r3, fp, #24
   19e94:	e1a00003 	mov	r0, r3
   19e98:	e3001418 	movw	r1, #1048	; 0x418
   19e9c:	e3431f98 	movt	r1, #16280	; 0x3f98
   19ea0:	eb00087c 	bl	1c098 <DWHCIRegister>

	uspi_EnterCritical ();
   19ea4:	eb004b4c 	bl	2cbdc <uspi_EnterCritical>

	DWHCIRegisterRead (&AllChanInterruptMask);
   19ea8:	e24b3018 	sub	r3, fp, #24
   19eac:	e1a00003 	mov	r0, r3
   19eb0:	eb0008db 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&AllChanInterruptMask, ~(1 << nChannel));
   19eb4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   19eb8:	e3a02001 	mov	r2, #1
   19ebc:	e1a03312 	lsl	r3, r2, r3
   19ec0:	e1e03003 	mvn	r3, r3
   19ec4:	e1a02003 	mov	r2, r3
   19ec8:	e24b3018 	sub	r3, fp, #24
   19ecc:	e1a00003 	mov	r0, r3
   19ed0:	e1a01002 	mov	r1, r2
   19ed4:	eb00099b 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterWrite (&AllChanInterruptMask);
   19ed8:	e24b3018 	sub	r3, fp, #24
   19edc:	e1a00003 	mov	r0, r3
   19ee0:	eb0008f5 	bl	1c2bc <DWHCIRegisterWrite>

	uspi_LeaveCritical ();
   19ee4:	eb004b63 	bl	2cc78 <uspi_LeaveCritical>
	
	_DWHCIRegister (&AllChanInterruptMask);
   19ee8:	e24b3018 	sub	r3, fp, #24
   19eec:	e1a00003 	mov	r0, r3
   19ef0:	eb0008ae 	bl	1c1b0 <_DWHCIRegister>
   19ef4:	e1a03004 	mov	r3, r4
   19ef8:	e3090e40 	movw	r0, #40512	; 0x9e40
   19efc:	e3400001 	movt	r0, #1
   19f00:	e1a01003 	mov	r1, r3
   19f04:	ebffee56 	bl	15864 <__cyg_profile_func_exit>
}
   19f08:	e24bd008 	sub	sp, fp, #8
   19f0c:	e8bd8810 	pop	{r4, fp, pc}

00019f10 <DWHCIDeviceFlushTxFIFO>:

void DWHCIDeviceFlushTxFIFO (TDWHCIDevice *pThis, unsigned nFIFO)
{
   19f10:	e92d4810 	push	{r4, fp, lr}
   19f14:	e28db008 	add	fp, sp, #8
   19f18:	e24dd024 	sub	sp, sp, #36	; 0x24
   19f1c:	e1a0400e 	mov	r4, lr
   19f20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   19f24:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   19f28:	e1a03004 	mov	r3, r4
   19f2c:	e3090f10 	movw	r0, #40720	; 0x9f10
   19f30:	e3400001 	movt	r0, #1
   19f34:	e1a01003 	mov	r1, r3
   19f38:	ebffedf7 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   19f3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f40:	e3530000 	cmp	r3, #0
   19f44:	1a000005 	bne	19f60 <DWHCIDeviceFlushTxFIFO+0x50>
   19f48:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   19f4c:	e3400002 	movt	r0, #2
   19f50:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   19f54:	e3401002 	movt	r1, #2
   19f58:	e30022a3 	movw	r2, #675	; 0x2a3
   19f5c:	ebfff293 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister Reset;
	DWHCIRegister2 (&Reset, DWHCI_CORE_RESET, 0);
   19f60:	e24b3018 	sub	r3, fp, #24
   19f64:	e1a00003 	mov	r0, r3
   19f68:	e3a01010 	mov	r1, #16
   19f6c:	e3431f98 	movt	r1, #16280	; 0x3f98
   19f70:	e3a02000 	mov	r2, #0
   19f74:	eb000868 	bl	1c11c <DWHCIRegister2>
	DWHCIRegisterOr (&Reset, DWHCI_CORE_RESET_TX_FIFO_FLUSH);
   19f78:	e24b3018 	sub	r3, fp, #24
   19f7c:	e1a00003 	mov	r0, r3
   19f80:	e3a01020 	mov	r1, #32
   19f84:	eb00099a 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterAnd (&Reset, ~DWHCI_CORE_RESET_TX_FIFO_NUM__MASK);
   19f88:	e24b3018 	sub	r3, fp, #24
   19f8c:	e1a00003 	mov	r0, r3
   19f90:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
   19f94:	eb00096b 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterOr (&Reset, nFIFO << DWHCI_CORE_RESET_TX_FIFO_NUM__SHIFT);
   19f98:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   19f9c:	e1a03303 	lsl	r3, r3, #6
   19fa0:	e24b2018 	sub	r2, fp, #24
   19fa4:	e1a00002 	mov	r0, r2
   19fa8:	e1a01003 	mov	r1, r3
   19fac:	eb000990 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterWrite (&Reset);
   19fb0:	e24b3018 	sub	r3, fp, #24
   19fb4:	e1a00003 	mov	r0, r3
   19fb8:	eb0008bf 	bl	1c2bc <DWHCIRegisterWrite>

	if (DWHCIDeviceWaitForBit (pThis, &Reset, DWHCI_CORE_RESET_TX_FIFO_FLUSH, FALSE, 10))
   19fbc:	e24b2018 	sub	r2, fp, #24
   19fc0:	e3a0300a 	mov	r3, #10
   19fc4:	e58d3000 	str	r3, [sp]
   19fc8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   19fcc:	e1a01002 	mov	r1, r2
   19fd0:	e3a02020 	mov	r2, #32
   19fd4:	e3a03000 	mov	r3, #0
   19fd8:	eb000658 	bl	1b940 <DWHCIDeviceWaitForBit>
   19fdc:	e1a03000 	mov	r3, r0
   19fe0:	e3530000 	cmp	r3, #0
   19fe4:	0a000001 	beq	19ff0 <DWHCIDeviceFlushTxFIFO+0xe0>
	{
		usDelay (1);		// Wait for 3 PHY clocks
   19fe8:	e3a00001 	mov	r0, #1
   19fec:	ebfff178 	bl	165d4 <usDelay>
	}

	_DWHCIRegister (&Reset);
   19ff0:	e24b3018 	sub	r3, fp, #24
   19ff4:	e1a00003 	mov	r0, r3
   19ff8:	eb00086c 	bl	1c1b0 <_DWHCIRegister>
   19ffc:	e1a03004 	mov	r3, r4
   1a000:	e3090f10 	movw	r0, #40720	; 0x9f10
   1a004:	e3400001 	movt	r0, #1
   1a008:	e1a01003 	mov	r1, r3
   1a00c:	ebffee14 	bl	15864 <__cyg_profile_func_exit>
}
   1a010:	e24bd008 	sub	sp, fp, #8
   1a014:	e8bd8810 	pop	{r4, fp, pc}

0001a018 <DWHCIDeviceFlushRxFIFO>:

void DWHCIDeviceFlushRxFIFO (TDWHCIDevice *pThis)
{
   1a018:	e92d4810 	push	{r4, fp, lr}
   1a01c:	e28db008 	add	fp, sp, #8
   1a020:	e24dd024 	sub	sp, sp, #36	; 0x24
   1a024:	e1a0400e 	mov	r4, lr
   1a028:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1a02c:	e1a03004 	mov	r3, r4
   1a030:	e30a0018 	movw	r0, #40984	; 0xa018
   1a034:	e3400001 	movt	r0, #1
   1a038:	e1a01003 	mov	r1, r3
   1a03c:	ebffedb6 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1a040:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a044:	e3530000 	cmp	r3, #0
   1a048:	1a000005 	bne	1a064 <DWHCIDeviceFlushRxFIFO+0x4c>
   1a04c:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1a050:	e3400002 	movt	r0, #2
   1a054:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a058:	e3401002 	movt	r1, #2
   1a05c:	e30022b6 	movw	r2, #694	; 0x2b6
   1a060:	ebfff252 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister Reset;
	DWHCIRegister2 (&Reset, DWHCI_CORE_RESET, 0);
   1a064:	e24b3018 	sub	r3, fp, #24
   1a068:	e1a00003 	mov	r0, r3
   1a06c:	e3a01010 	mov	r1, #16
   1a070:	e3431f98 	movt	r1, #16280	; 0x3f98
   1a074:	e3a02000 	mov	r2, #0
   1a078:	eb000827 	bl	1c11c <DWHCIRegister2>
	DWHCIRegisterOr (&Reset, DWHCI_CORE_RESET_RX_FIFO_FLUSH);
   1a07c:	e24b3018 	sub	r3, fp, #24
   1a080:	e1a00003 	mov	r0, r3
   1a084:	e3a01010 	mov	r1, #16
   1a088:	eb000959 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterWrite (&Reset);
   1a08c:	e24b3018 	sub	r3, fp, #24
   1a090:	e1a00003 	mov	r0, r3
   1a094:	eb000888 	bl	1c2bc <DWHCIRegisterWrite>

	if (DWHCIDeviceWaitForBit (pThis, &Reset, DWHCI_CORE_RESET_RX_FIFO_FLUSH, FALSE, 10))
   1a098:	e24b2018 	sub	r2, fp, #24
   1a09c:	e3a0300a 	mov	r3, #10
   1a0a0:	e58d3000 	str	r3, [sp]
   1a0a4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a0a8:	e1a01002 	mov	r1, r2
   1a0ac:	e3a02010 	mov	r2, #16
   1a0b0:	e3a03000 	mov	r3, #0
   1a0b4:	eb000621 	bl	1b940 <DWHCIDeviceWaitForBit>
   1a0b8:	e1a03000 	mov	r3, r0
   1a0bc:	e3530000 	cmp	r3, #0
   1a0c0:	0a000001 	beq	1a0cc <DWHCIDeviceFlushRxFIFO+0xb4>
	{
		usDelay (1);			// Wait for 3 PHY clocks
   1a0c4:	e3a00001 	mov	r0, #1
   1a0c8:	ebfff141 	bl	165d4 <usDelay>
	}

	_DWHCIRegister (&Reset);
   1a0cc:	e24b3018 	sub	r3, fp, #24
   1a0d0:	e1a00003 	mov	r0, r3
   1a0d4:	eb000835 	bl	1c1b0 <_DWHCIRegister>
   1a0d8:	e1a03004 	mov	r3, r4
   1a0dc:	e30a0018 	movw	r0, #40984	; 0xa018
   1a0e0:	e3400001 	movt	r0, #1
   1a0e4:	e1a01003 	mov	r1, r3
   1a0e8:	ebffeddd 	bl	15864 <__cyg_profile_func_exit>
}
   1a0ec:	e24bd008 	sub	sp, fp, #8
   1a0f0:	e8bd8810 	pop	{r4, fp, pc}

0001a0f4 <DWHCIDeviceTransferStage>:

boolean DWHCIDeviceTransferStage (TDWHCIDevice *pThis, TUSBRequest *pURB, boolean bIn, boolean bStatusStage)
{
   1a0f4:	e92d4830 	push	{r4, r5, fp, lr}
   1a0f8:	e28db00c 	add	fp, sp, #12
   1a0fc:	e24dd010 	sub	sp, sp, #16
   1a100:	e1a0500e 	mov	r5, lr
   1a104:	e50b0010 	str	r0, [fp, #-16]
   1a108:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1a10c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   1a110:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   1a114:	e1a03005 	mov	r3, r5
   1a118:	e30a00f4 	movw	r0, #41204	; 0xa0f4
   1a11c:	e3400001 	movt	r0, #1
   1a120:	e1a01003 	mov	r1, r3
   1a124:	ebffed7c 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1a128:	e51b3010 	ldr	r3, [fp, #-16]
   1a12c:	e3530000 	cmp	r3, #0
   1a130:	1a000005 	bne	1a14c <DWHCIDeviceTransferStage+0x58>
   1a134:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1a138:	e3400002 	movt	r0, #2
   1a13c:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a140:	e3401002 	movt	r1, #2
   1a144:	e30022c7 	movw	r2, #711	; 0x2c7
   1a148:	ebfff218 	bl	169b0 <uspi_assertion_failed>

	assert (pURB != 0);
   1a14c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1a150:	e3530000 	cmp	r3, #0
   1a154:	1a000005 	bne	1a170 <DWHCIDeviceTransferStage+0x7c>
   1a158:	e30e01ec 	movw	r0, #57836	; 0xe1ec
   1a15c:	e3400002 	movt	r0, #2
   1a160:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a164:	e3401002 	movt	r1, #2
   1a168:	e30022c9 	movw	r2, #713	; 0x2c9
   1a16c:	ebfff20f 	bl	169b0 <uspi_assertion_failed>
	USBRequestSetCompletionRoutine (pURB, DWHCIDeviceCompletionRoutine, 0, pThis);
   1a170:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a174:	e30a1234 	movw	r1, #41524	; 0xa234
   1a178:	e3401001 	movt	r1, #1
   1a17c:	e3a02000 	mov	r2, #0
   1a180:	e51b3010 	ldr	r3, [fp, #-16]
   1a184:	eb001e3d 	bl	21a80 <USBRequestSetCompletionRoutine>

	assert (!pThis->m_bWaiting);
   1a188:	e51b3010 	ldr	r3, [fp, #-16]
   1a18c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1a190:	e3530000 	cmp	r3, #0
   1a194:	0a000005 	beq	1a1b0 <DWHCIDeviceTransferStage+0xbc>
   1a198:	e30e0360 	movw	r0, #58208	; 0xe360
   1a19c:	e3400002 	movt	r0, #2
   1a1a0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a1a4:	e3401002 	movt	r1, #2
   1a1a8:	e3a02fb3 	mov	r2, #716	; 0x2cc
   1a1ac:	ebfff1ff 	bl	169b0 <uspi_assertion_failed>
	pThis->m_bWaiting = TRUE;
   1a1b0:	e51b3010 	ldr	r3, [fp, #-16]
   1a1b4:	e3a02001 	mov	r2, #1
   1a1b8:	e5832048 	str	r2, [r3, #72]	; 0x48

	if (!DWHCIDeviceTransferStageAsync (pThis, pURB, bIn, bStatusStage))
   1a1bc:	e51b0010 	ldr	r0, [fp, #-16]
   1a1c0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1a1c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a1c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a1cc:	eb000039 	bl	1a2b8 <DWHCIDeviceTransferStageAsync>
   1a1d0:	e1a03000 	mov	r3, r0
   1a1d4:	e3530000 	cmp	r3, #0
   1a1d8:	1a000004 	bne	1a1f0 <DWHCIDeviceTransferStage+0xfc>
	{
		pThis->m_bWaiting = FALSE;
   1a1dc:	e51b3010 	ldr	r3, [fp, #-16]
   1a1e0:	e3a02000 	mov	r2, #0
   1a1e4:	e5832048 	str	r2, [r3, #72]	; 0x48

		return FALSE;
   1a1e8:	e3a04000 	mov	r4, #0
   1a1ec:	ea000007 	b	1a210 <DWHCIDeviceTransferStage+0x11c>
	}

	while (pThis->m_bWaiting)
   1a1f0:	e1a00000 	nop			; (mov r0, r0)
   1a1f4:	e51b3010 	ldr	r3, [fp, #-16]
   1a1f8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1a1fc:	e3530000 	cmp	r3, #0
   1a200:	1afffffb 	bne	1a1f4 <DWHCIDeviceTransferStage+0x100>
	{
		// do nothing
	}

	return USBRequestGetStatus (pURB);
   1a204:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a208:	eb001d57 	bl	2176c <USBRequestGetStatus>
   1a20c:	e1a04000 	mov	r4, r0
   1a210:	e1a03005 	mov	r3, r5
   1a214:	e30a00f4 	movw	r0, #41204	; 0xa0f4
   1a218:	e3400001 	movt	r0, #1
   1a21c:	e1a01003 	mov	r1, r3
   1a220:	ebffed8f 	bl	15864 <__cyg_profile_func_exit>
   1a224:	e1a03004 	mov	r3, r4
}
   1a228:	e1a00003 	mov	r0, r3
   1a22c:	e24bd00c 	sub	sp, fp, #12
   1a230:	e8bd8830 	pop	{r4, r5, fp, pc}

0001a234 <DWHCIDeviceCompletionRoutine>:

void DWHCIDeviceCompletionRoutine (TUSBRequest *pURB, void *pParam, void *pContext)
{
   1a234:	e92d4810 	push	{r4, fp, lr}
   1a238:	e28db008 	add	fp, sp, #8
   1a23c:	e24dd01c 	sub	sp, sp, #28
   1a240:	e1a0400e 	mov	r4, lr
   1a244:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1a248:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1a24c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   1a250:	e1a03004 	mov	r3, r4
   1a254:	e30a0234 	movw	r0, #41524	; 0xa234
   1a258:	e3400001 	movt	r0, #1
   1a25c:	e1a01003 	mov	r1, r3
   1a260:	ebffed2d 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIDevice *pThis = (TDWHCIDevice *) pContext;
   1a264:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a268:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   1a26c:	e51b3010 	ldr	r3, [fp, #-16]
   1a270:	e3530000 	cmp	r3, #0
   1a274:	1a000005 	bne	1a290 <DWHCIDeviceCompletionRoutine+0x5c>
   1a278:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1a27c:	e3400002 	movt	r0, #2
   1a280:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a284:	e3401002 	movt	r1, #2
   1a288:	e30022e1 	movw	r2, #737	; 0x2e1
   1a28c:	ebfff1c7 	bl	169b0 <uspi_assertion_failed>

	pThis->m_bWaiting = FALSE;
   1a290:	e51b3010 	ldr	r3, [fp, #-16]
   1a294:	e3a02000 	mov	r2, #0
   1a298:	e5832048 	str	r2, [r3, #72]	; 0x48
   1a29c:	e1a03004 	mov	r3, r4
   1a2a0:	e30a0234 	movw	r0, #41524	; 0xa234
   1a2a4:	e3400001 	movt	r0, #1
   1a2a8:	e1a01003 	mov	r1, r3
   1a2ac:	ebffed6c 	bl	15864 <__cyg_profile_func_exit>
}
   1a2b0:	e24bd008 	sub	sp, fp, #8
   1a2b4:	e8bd8810 	pop	{r4, fp, pc}

0001a2b8 <DWHCIDeviceTransferStageAsync>:

boolean DWHCIDeviceTransferStageAsync (TDWHCIDevice *pThis, TUSBRequest *pURB, boolean bIn, boolean bStatusStage)
{
   1a2b8:	e92d4830 	push	{r4, r5, fp, lr}
   1a2bc:	e28db00c 	add	fp, sp, #12
   1a2c0:	e24dd028 	sub	sp, sp, #40	; 0x28
   1a2c4:	e1a0500e 	mov	r5, lr
   1a2c8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1a2cc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   1a2d0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   1a2d4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   1a2d8:	e1a03005 	mov	r3, r5
   1a2dc:	e30a02b8 	movw	r0, #41656	; 0xa2b8
   1a2e0:	e3400001 	movt	r0, #1
   1a2e4:	e1a01003 	mov	r1, r3
   1a2e8:	ebffed0b 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1a2ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a2f0:	e3530000 	cmp	r3, #0
   1a2f4:	1a000005 	bne	1a310 <DWHCIDeviceTransferStageAsync+0x58>
   1a2f8:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1a2fc:	e3400002 	movt	r0, #2
   1a300:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a304:	e3401002 	movt	r1, #2
   1a308:	e3a02fba 	mov	r2, #744	; 0x2e8
   1a30c:	ebfff1a7 	bl	169b0 <uspi_assertion_failed>
	assert (pURB != 0);
   1a310:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a314:	e3530000 	cmp	r3, #0
   1a318:	1a000005 	bne	1a334 <DWHCIDeviceTransferStageAsync+0x7c>
   1a31c:	e30e01ec 	movw	r0, #57836	; 0xe1ec
   1a320:	e3400002 	movt	r0, #2
   1a324:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a328:	e3401002 	movt	r1, #2
   1a32c:	e30022e9 	movw	r2, #745	; 0x2e9
   1a330:	ebfff19e 	bl	169b0 <uspi_assertion_failed>
	
	unsigned nChannel = DWHCIDeviceAllocateChannel (pThis);
   1a334:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a338:	eb000503 	bl	1b74c <DWHCIDeviceAllocateChannel>
   1a33c:	e50b0010 	str	r0, [fp, #-16]
	if (nChannel >= pThis->m_nChannels)
   1a340:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a344:	e5932000 	ldr	r2, [r3]
   1a348:	e51b3010 	ldr	r3, [fp, #-16]
   1a34c:	e1520003 	cmp	r2, r3
   1a350:	8a000001 	bhi	1a35c <DWHCIDeviceTransferStageAsync+0xa4>
	{
		return FALSE;
   1a354:	e3a04000 	mov	r4, #0
   1a358:	ea000060 	b	1a4e0 <DWHCIDeviceTransferStageAsync+0x228>
	}
	
	TDWHCITransferStageData *pStageData =
   1a35c:	e3a00054 	mov	r0, #84	; 0x54
   1a360:	ebfff1bc 	bl	16a58 <malloc>
   1a364:	e1a03000 	mov	r3, r0
   1a368:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		(TDWHCITransferStageData *) malloc (sizeof (TDWHCITransferStageData));
	assert (pStageData != 0);
   1a36c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1a370:	e3530000 	cmp	r3, #0
   1a374:	1a000005 	bne	1a390 <DWHCIDeviceTransferStageAsync+0xd8>
   1a378:	e30e0374 	movw	r0, #58228	; 0xe374
   1a37c:	e3400002 	movt	r0, #2
   1a380:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a384:	e3401002 	movt	r1, #2
   1a388:	e30022f3 	movw	r2, #755	; 0x2f3
   1a38c:	ebfff187 	bl	169b0 <uspi_assertion_failed>
	DWHCITransferStageData (pStageData, nChannel, pURB, bIn, bStatusStage);
   1a390:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a394:	e58d3000 	str	r3, [sp]
   1a398:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a39c:	e51b1010 	ldr	r1, [fp, #-16]
   1a3a0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a3a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a3a8:	eb00099e 	bl	1ca28 <DWHCITransferStageData>

	assert (pThis->m_pStageData[nChannel] == 0);
   1a3ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a3b0:	e51b2010 	ldr	r2, [fp, #-16]
   1a3b4:	e2822002 	add	r2, r2, #2
   1a3b8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   1a3bc:	e3530000 	cmp	r3, #0
   1a3c0:	0a000005 	beq	1a3dc <DWHCIDeviceTransferStageAsync+0x124>
   1a3c4:	e30e0384 	movw	r0, #58244	; 0xe384
   1a3c8:	e3400002 	movt	r0, #2
   1a3cc:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a3d0:	e3401002 	movt	r1, #2
   1a3d4:	e30022f6 	movw	r2, #758	; 0x2f6
   1a3d8:	ebfff174 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pStageData[nChannel] = pStageData;
   1a3dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a3e0:	e51b2010 	ldr	r2, [fp, #-16]
   1a3e4:	e2822002 	add	r2, r2, #2
   1a3e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1a3ec:	e7831102 	str	r1, [r3, r2, lsl #2]

	DWHCIDeviceEnableChannelInterrupt (pThis, nChannel);
   1a3f0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a3f4:	e51b1010 	ldr	r1, [fp, #-16]
   1a3f8:	ebfffe5d 	bl	19d74 <DWHCIDeviceEnableChannelInterrupt>
	
	if (!DWHCITransferStageDataIsSplit (pStageData))
   1a3fc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a400:	eb000e82 	bl	1de10 <DWHCITransferStageDataIsSplit>
   1a404:	e1a03000 	mov	r3, r0
   1a408:	e3530000 	cmp	r3, #0
   1a40c:	1a000003 	bne	1a420 <DWHCIDeviceTransferStageAsync+0x168>
	{
		DWHCITransferStageDataSetState (pStageData, StageStateNoSplitTransfer);
   1a410:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a414:	e3a01000 	mov	r1, #0
   1a418:	eb000bdc 	bl	1d390 <DWHCITransferStageDataSetState>
   1a41c:	ea00002b 	b	1a4d0 <DWHCIDeviceTransferStageAsync+0x218>
	}
	else
	{
		if (!DWHCITransferStageDataBeginSplitCycle (pStageData))
   1a420:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a424:	eb000c51 	bl	1d570 <DWHCITransferStageDataBeginSplitCycle>
   1a428:	e1a03000 	mov	r3, r0
   1a42c:	e3530000 	cmp	r3, #0
   1a430:	1a000010 	bne	1a478 <DWHCIDeviceTransferStageAsync+0x1c0>
		{
			DWHCIDeviceDisableChannelInterrupt (pThis, nChannel);
   1a434:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a438:	e51b1010 	ldr	r1, [fp, #-16]
   1a43c:	ebfffe7f 	bl	19e40 <DWHCIDeviceDisableChannelInterrupt>

			_DWHCITransferStageData (pStageData);
   1a440:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a444:	eb000ad6 	bl	1cfa4 <_DWHCITransferStageData>
			free (pStageData);
   1a448:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a44c:	ebfff197 	bl	16ab0 <free>

			pThis->m_pStageData[nChannel] = 0;
   1a450:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a454:	e51b2010 	ldr	r2, [fp, #-16]
   1a458:	e2822002 	add	r2, r2, #2
   1a45c:	e3a01000 	mov	r1, #0
   1a460:	e7831102 	str	r1, [r3, r2, lsl #2]
			
			DWHCIDeviceFreeChannel (pThis, nChannel);
   1a464:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a468:	e51b1010 	ldr	r1, [fp, #-16]
   1a46c:	eb0004f4 	bl	1b844 <DWHCIDeviceFreeChannel>
			
			return FALSE;
   1a470:	e3a04000 	mov	r4, #0
   1a474:	ea000019 	b	1a4e0 <DWHCIDeviceTransferStageAsync+0x228>
		}

		DWHCITransferStageDataSetState (pStageData, StageStateStartSplit);
   1a478:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a47c:	e3a01001 	mov	r1, #1
   1a480:	eb000bc2 	bl	1d390 <DWHCITransferStageDataSetState>
		DWHCITransferStageDataSetSplitComplete (pStageData, FALSE);
   1a484:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a488:	e3a01000 	mov	r1, #0
   1a48c:	eb000b97 	bl	1d2f0 <DWHCITransferStageDataSetSplitComplete>
		
		TDWHCIFrameScheduler *pFrameScheduler =
   1a490:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1a494:	eb000ffb 	bl	1e488 <DWHCITransferStageDataGetFrameScheduler>
   1a498:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
			DWHCITransferStageDataGetFrameScheduler (pStageData);
		assert (pFrameScheduler != 0);
   1a49c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a4a0:	e3530000 	cmp	r3, #0
   1a4a4:	1a000005 	bne	1a4c0 <DWHCIDeviceTransferStageAsync+0x208>
   1a4a8:	e30e03a8 	movw	r0, #58280	; 0xe3a8
   1a4ac:	e3400002 	movt	r0, #2
   1a4b0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a4b4:	e3401002 	movt	r1, #2
   1a4b8:	e3a02fc5 	mov	r2, #788	; 0x314
   1a4bc:	ebfff13b 	bl	169b0 <uspi_assertion_failed>
		pFrameScheduler->StartSplit (pFrameScheduler);
   1a4c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a4c4:	e5933004 	ldr	r3, [r3, #4]
   1a4c8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a4cc:	e12fff33 	blx	r3
	}

	DWHCIDeviceStartTransaction (pThis, pStageData);
   1a4d0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a4d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1a4d8:	eb000009 	bl	1a504 <DWHCIDeviceStartTransaction>
	
	return TRUE;
   1a4dc:	e3a04001 	mov	r4, #1
   1a4e0:	e1a03005 	mov	r3, r5
   1a4e4:	e30a02b8 	movw	r0, #41656	; 0xa2b8
   1a4e8:	e3400001 	movt	r0, #1
   1a4ec:	e1a01003 	mov	r1, r3
   1a4f0:	ebffecdb 	bl	15864 <__cyg_profile_func_exit>
   1a4f4:	e1a03004 	mov	r3, r4
}
   1a4f8:	e1a00003 	mov	r0, r3
   1a4fc:	e24bd00c 	sub	sp, fp, #12
   1a500:	e8bd8830 	pop	{r4, r5, fp, pc}

0001a504 <DWHCIDeviceStartTransaction>:

void DWHCIDeviceStartTransaction (TDWHCIDevice *pThis, TDWHCITransferStageData *pStageData)
{
   1a504:	e92d4810 	push	{r4, fp, lr}
   1a508:	e28db008 	add	fp, sp, #8
   1a50c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1a510:	e1a0400e 	mov	r4, lr
   1a514:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   1a518:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
   1a51c:	e1a03004 	mov	r3, r4
   1a520:	e30a0504 	movw	r0, #42244	; 0xa504
   1a524:	e3400001 	movt	r0, #1
   1a528:	e1a01003 	mov	r1, r3
   1a52c:	ebffec7a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1a530:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a534:	e3530000 	cmp	r3, #0
   1a538:	1a000005 	bne	1a554 <DWHCIDeviceStartTransaction+0x50>
   1a53c:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1a540:	e3400002 	movt	r0, #2
   1a544:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a548:	e3401002 	movt	r1, #2
   1a54c:	e300231f 	movw	r2, #799	; 0x31f
   1a550:	ebfff116 	bl	169b0 <uspi_assertion_failed>

	assert (pStageData != 0);
   1a554:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   1a558:	e3530000 	cmp	r3, #0
   1a55c:	1a000005 	bne	1a578 <DWHCIDeviceStartTransaction+0x74>
   1a560:	e30e0374 	movw	r0, #58228	; 0xe374
   1a564:	e3400002 	movt	r0, #2
   1a568:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a56c:	e3401002 	movt	r1, #2
   1a570:	e3002321 	movw	r2, #801	; 0x321
   1a574:	ebfff10d 	bl	169b0 <uspi_assertion_failed>
	unsigned nChannel = DWHCITransferStageDataGetChannelNumber (pStageData);
   1a578:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a57c:	eb000c0f 	bl	1d5c0 <DWHCITransferStageDataGetChannelNumber>
   1a580:	e50b0010 	str	r0, [fp, #-16]
	assert (nChannel < pThis->m_nChannels);
   1a584:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a588:	e5932000 	ldr	r2, [r3]
   1a58c:	e51b3010 	ldr	r3, [fp, #-16]
   1a590:	e1520003 	cmp	r2, r3
   1a594:	8a000005 	bhi	1a5b0 <DWHCIDeviceStartTransaction+0xac>
   1a598:	e30e03c0 	movw	r0, #58304	; 0xe3c0
   1a59c:	e3400002 	movt	r0, #2
   1a5a0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a5a4:	e3401002 	movt	r1, #2
   1a5a8:	e3002323 	movw	r2, #803	; 0x323
   1a5ac:	ebfff0ff 	bl	169b0 <uspi_assertion_failed>
	
	// channel must be disabled, if not already done but controller
	TDWHCIRegister Character;
	DWHCIRegister (&Character, DWHCI_HOST_CHAN_CHARACTER (nChannel));
   1a5b0:	e51b2010 	ldr	r2, [fp, #-16]
   1a5b4:	e30c3028 	movw	r3, #49192	; 0xc028
   1a5b8:	e34031fc 	movt	r3, #508	; 0x1fc
   1a5bc:	e0823003 	add	r3, r2, r3
   1a5c0:	e1a03283 	lsl	r3, r3, #5
   1a5c4:	e24b201c 	sub	r2, fp, #28
   1a5c8:	e1a00002 	mov	r0, r2
   1a5cc:	e1a01003 	mov	r1, r3
   1a5d0:	eb0006b0 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterRead (&Character);
   1a5d4:	e24b301c 	sub	r3, fp, #28
   1a5d8:	e1a00003 	mov	r0, r3
   1a5dc:	eb000710 	bl	1c224 <DWHCIRegisterRead>
	if (DWHCIRegisterIsSet (&Character, DWHCI_HOST_CHAN_CHARACTER_ENABLE))
   1a5e0:	e24b301c 	sub	r3, fp, #28
   1a5e4:	e1a00003 	mov	r0, r3
   1a5e8:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
   1a5ec:	eb0007a5 	bl	1c488 <DWHCIRegisterIsSet>
   1a5f0:	e1a03000 	mov	r3, r0
   1a5f4:	e3530000 	cmp	r3, #0
   1a5f8:	0a000021 	beq	1a684 <DWHCIDeviceStartTransaction+0x180>
	{
		DWHCITransferStageDataSetSubState (pStageData, StageSubStateWaitForChannelDisable);
   1a5fc:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a600:	e3a01000 	mov	r1, #0
   1a604:	eb000b9d 	bl	1d480 <DWHCITransferStageDataSetSubState>
		
		DWHCIRegisterAnd (&Character, ~DWHCI_HOST_CHAN_CHARACTER_ENABLE);
   1a608:	e24b301c 	sub	r3, fp, #28
   1a60c:	e1a00003 	mov	r0, r3
   1a610:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
   1a614:	eb0007cb 	bl	1c548 <DWHCIRegisterAnd>
		DWHCIRegisterOr (&Character, DWHCI_HOST_CHAN_CHARACTER_DISABLE);
   1a618:	e24b301c 	sub	r3, fp, #28
   1a61c:	e1a00003 	mov	r0, r3
   1a620:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   1a624:	eb0007f2 	bl	1c5f4 <DWHCIRegisterOr>
		DWHCIRegisterWrite (&Character);
   1a628:	e24b301c 	sub	r3, fp, #28
   1a62c:	e1a00003 	mov	r0, r3
   1a630:	eb000721 	bl	1c2bc <DWHCIRegisterWrite>

		TDWHCIRegister ChanInterruptMask;
		DWHCIRegister (&ChanInterruptMask, DWHCI_HOST_CHAN_INT_MASK (nChannel));
   1a634:	e51b3010 	ldr	r3, [fp, #-16]
   1a638:	e1a02283 	lsl	r2, r3, #5
   1a63c:	e300350c 	movw	r3, #1292	; 0x50c
   1a640:	e3433f98 	movt	r3, #16280	; 0x3f98
   1a644:	e0823003 	add	r3, r2, r3
   1a648:	e24b2028 	sub	r2, fp, #40	; 0x28
   1a64c:	e1a00002 	mov	r0, r2
   1a650:	e1a01003 	mov	r1, r3
   1a654:	eb00068f 	bl	1c098 <DWHCIRegister>
		DWHCIRegisterSet (&ChanInterruptMask, DWHCI_HOST_CHAN_INT_HALTED);
   1a658:	e24b3028 	sub	r3, fp, #40	; 0x28
   1a65c:	e1a00003 	mov	r0, r3
   1a660:	e3a01002 	mov	r1, #2
   1a664:	eb000766 	bl	1c404 <DWHCIRegisterSet>
		DWHCIRegisterWrite (&ChanInterruptMask);
   1a668:	e24b3028 	sub	r3, fp, #40	; 0x28
   1a66c:	e1a00003 	mov	r0, r3
   1a670:	eb000711 	bl	1c2bc <DWHCIRegisterWrite>

		_DWHCIRegister (&ChanInterruptMask);
   1a674:	e24b3028 	sub	r3, fp, #40	; 0x28
   1a678:	e1a00003 	mov	r0, r3
   1a67c:	eb0006cb 	bl	1c1b0 <_DWHCIRegister>
   1a680:	ea000002 	b	1a690 <DWHCIDeviceStartTransaction+0x18c>
	}
	else
	{
		DWHCIDeviceStartChannel (pThis, pStageData);
   1a684:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a688:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a68c:	eb000009 	bl	1a6b8 <DWHCIDeviceStartChannel>
	}

	_DWHCIRegister (&Character);
   1a690:	e24b301c 	sub	r3, fp, #28
   1a694:	e1a00003 	mov	r0, r3
   1a698:	eb0006c4 	bl	1c1b0 <_DWHCIRegister>
   1a69c:	e1a03004 	mov	r3, r4
   1a6a0:	e30a0504 	movw	r0, #42244	; 0xa504
   1a6a4:	e3400001 	movt	r0, #1
   1a6a8:	e1a01003 	mov	r1, r3
   1a6ac:	ebffec6c 	bl	15864 <__cyg_profile_func_exit>
}
   1a6b0:	e24bd008 	sub	sp, fp, #8
   1a6b4:	e8bd8810 	pop	{r4, fp, pc}

0001a6b8 <DWHCIDeviceStartChannel>:

void DWHCIDeviceStartChannel (TDWHCIDevice *pThis, TDWHCITransferStageData *pStageData)
{
   1a6b8:	e92d4830 	push	{r4, r5, fp, lr}
   1a6bc:	e28db00c 	add	fp, sp, #12
   1a6c0:	e24dd058 	sub	sp, sp, #88	; 0x58
   1a6c4:	e1a0500e 	mov	r5, lr
   1a6c8:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
   1a6cc:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
   1a6d0:	e1a03005 	mov	r3, r5
   1a6d4:	e30a06b8 	movw	r0, #42680	; 0xa6b8
   1a6d8:	e3400001 	movt	r0, #1
   1a6dc:	e1a01003 	mov	r1, r3
   1a6e0:	ebffec0d 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1a6e4:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
   1a6e8:	e3530000 	cmp	r3, #0
   1a6ec:	1a000005 	bne	1a708 <DWHCIDeviceStartChannel+0x50>
   1a6f0:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1a6f4:	e3400002 	movt	r0, #2
   1a6f8:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a6fc:	e3401002 	movt	r1, #2
   1a700:	e3002342 	movw	r2, #834	; 0x342
   1a704:	ebfff0a9 	bl	169b0 <uspi_assertion_failed>

	assert (pStageData != 0);
   1a708:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a70c:	e3530000 	cmp	r3, #0
   1a710:	1a000005 	bne	1a72c <DWHCIDeviceStartChannel+0x74>
   1a714:	e30e0374 	movw	r0, #58228	; 0xe374
   1a718:	e3400002 	movt	r0, #2
   1a71c:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a720:	e3401002 	movt	r1, #2
   1a724:	e3a02fd1 	mov	r2, #836	; 0x344
   1a728:	ebfff0a0 	bl	169b0 <uspi_assertion_failed>
	unsigned nChannel = DWHCITransferStageDataGetChannelNumber (pStageData);
   1a72c:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a730:	eb000ba2 	bl	1d5c0 <DWHCITransferStageDataGetChannelNumber>
   1a734:	e50b0010 	str	r0, [fp, #-16]
	assert (nChannel < pThis->m_nChannels);
   1a738:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
   1a73c:	e5932000 	ldr	r2, [r3]
   1a740:	e51b3010 	ldr	r3, [fp, #-16]
   1a744:	e1520003 	cmp	r2, r3
   1a748:	8a000005 	bhi	1a764 <DWHCIDeviceStartChannel+0xac>
   1a74c:	e30e03c0 	movw	r0, #58304	; 0xe3c0
   1a750:	e3400002 	movt	r0, #2
   1a754:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1a758:	e3401002 	movt	r1, #2
   1a75c:	e3002346 	movw	r2, #838	; 0x346
   1a760:	ebfff092 	bl	169b0 <uspi_assertion_failed>
	
	DWHCITransferStageDataSetSubState (pStageData, StageSubStateWaitForTransactionComplete);
   1a764:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a768:	e3a01001 	mov	r1, #1
   1a76c:	eb000b43 	bl	1d480 <DWHCITransferStageDataSetSubState>

	// reset all pending channel interrupts
	TDWHCIRegister ChanInterrupt;
	DWHCIRegister (&ChanInterrupt, DWHCI_HOST_CHAN_INT (nChannel));
   1a770:	e51b3010 	ldr	r3, [fp, #-16]
   1a774:	e1a02283 	lsl	r2, r3, #5
   1a778:	e3003508 	movw	r3, #1288	; 0x508
   1a77c:	e3433f98 	movt	r3, #16280	; 0x3f98
   1a780:	e0823003 	add	r3, r2, r3
   1a784:	e24b2020 	sub	r2, fp, #32
   1a788:	e1a00002 	mov	r0, r2
   1a78c:	e1a01003 	mov	r1, r3
   1a790:	eb000640 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterSetAll (&ChanInterrupt);
   1a794:	e24b3020 	sub	r3, fp, #32
   1a798:	e1a00003 	mov	r0, r3
   1a79c:	eb00084c 	bl	1c8d4 <DWHCIRegisterSetAll>
	DWHCIRegisterWrite (&ChanInterrupt);
   1a7a0:	e24b3020 	sub	r3, fp, #32
   1a7a4:	e1a00003 	mov	r0, r3
   1a7a8:	eb0006c3 	bl	1c2bc <DWHCIRegisterWrite>
	
	// set transfer size, packet count and pid
	TDWHCIRegister TransferSize;
	DWHCIRegister2 (&TransferSize, DWHCI_HOST_CHAN_XFER_SIZ (nChannel), 0);
   1a7ac:	e51b3010 	ldr	r3, [fp, #-16]
   1a7b0:	e1a02283 	lsl	r2, r3, #5
   1a7b4:	e3a03e51 	mov	r3, #1296	; 0x510
   1a7b8:	e3433f98 	movt	r3, #16280	; 0x3f98
   1a7bc:	e0823003 	add	r3, r2, r3
   1a7c0:	e24b202c 	sub	r2, fp, #44	; 0x2c
   1a7c4:	e1a00002 	mov	r0, r2
   1a7c8:	e1a01003 	mov	r1, r3
   1a7cc:	e3a02000 	mov	r2, #0
   1a7d0:	eb000651 	bl	1c11c <DWHCIRegister2>
	DWHCIRegisterOr (&TransferSize, DWHCITransferStageDataGetBytesToTransfer (pStageData) & DWHCI_HOST_CHAN_XFER_SIZ_BYTES__MASK);
   1a7d4:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a7d8:	eb000d50 	bl	1dd20 <DWHCITransferStageDataGetBytesToTransfer>
   1a7dc:	e1a03000 	mov	r3, r0
   1a7e0:	e7f23053 	ubfx	r3, r3, #0, #19
   1a7e4:	e24b202c 	sub	r2, fp, #44	; 0x2c
   1a7e8:	e1a00002 	mov	r0, r2
   1a7ec:	e1a01003 	mov	r1, r3
   1a7f0:	eb00077f 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterOr (&TransferSize, (DWHCITransferStageDataGetPacketsToTransfer (pStageData) << DWHCI_HOST_CHAN_XFER_SIZ_PACKETS__SHIFT)
   1a7f4:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a7f8:	eb000d66 	bl	1dd98 <DWHCITransferStageDataGetPacketsToTransfer>
   1a7fc:	e1a03000 	mov	r3, r0
   1a800:	e1a02983 	lsl	r2, r3, #19
   1a804:	e3a03000 	mov	r3, #0
   1a808:	e3413ff8 	movt	r3, #8184	; 0x1ff8
   1a80c:	e0033002 	and	r3, r3, r2
   1a810:	e24b202c 	sub	r2, fp, #44	; 0x2c
   1a814:	e1a00002 	mov	r0, r2
   1a818:	e1a01003 	mov	r1, r3
   1a81c:	eb000774 	bl	1c5f4 <DWHCIRegisterOr>
					& DWHCI_HOST_CHAN_XFER_SIZ_PACKETS__MASK);
	DWHCIRegisterOr (&TransferSize, DWHCITransferStageDataGetPID (pStageData) << DWHCI_HOST_CHAN_XFER_SIZ_PID__SHIFT);
   1a820:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a824:	eb000c91 	bl	1da70 <DWHCITransferStageDataGetPID>
   1a828:	e1a03000 	mov	r3, r0
   1a82c:	e1a03e83 	lsl	r3, r3, #29
   1a830:	e1a02003 	mov	r2, r3
   1a834:	e24b302c 	sub	r3, fp, #44	; 0x2c
   1a838:	e1a00003 	mov	r0, r3
   1a83c:	e1a01002 	mov	r1, r2
   1a840:	eb00076b 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterWrite (&TransferSize);
   1a844:	e24b302c 	sub	r3, fp, #44	; 0x2c
   1a848:	e1a00003 	mov	r0, r3
   1a84c:	eb00069a 	bl	1c2bc <DWHCIRegisterWrite>

	// set DMA address
	TDWHCIRegister DMAAddress;
	DWHCIRegister2 (&DMAAddress, DWHCI_HOST_CHAN_DMA_ADDR (nChannel),
   1a850:	e51b3010 	ldr	r3, [fp, #-16]
   1a854:	e1a03283 	lsl	r3, r3, #5
   1a858:	e3004514 	movw	r4, #1300	; 0x514
   1a85c:	e3434f98 	movt	r4, #16280	; 0x3f98
   1a860:	e0834004 	add	r4, r3, r4
			DWHCITransferStageDataGetDMAAddress (pStageData) + GPU_MEM_BASE);
   1a864:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a868:	eb000d03 	bl	1dc7c <DWHCITransferStageDataGetDMAAddress>
   1a86c:	e1a03000 	mov	r3, r0
	DWHCIRegisterOr (&TransferSize, DWHCITransferStageDataGetPID (pStageData) << DWHCI_HOST_CHAN_XFER_SIZ_PID__SHIFT);
	DWHCIRegisterWrite (&TransferSize);

	// set DMA address
	TDWHCIRegister DMAAddress;
	DWHCIRegister2 (&DMAAddress, DWHCI_HOST_CHAN_DMA_ADDR (nChannel),
   1a870:	e2833103 	add	r3, r3, #-1073741824	; 0xc0000000
   1a874:	e24b2038 	sub	r2, fp, #56	; 0x38
   1a878:	e1a00002 	mov	r0, r2
   1a87c:	e1a01004 	mov	r1, r4
   1a880:	e1a02003 	mov	r2, r3
   1a884:	eb000624 	bl	1c11c <DWHCIRegister2>
			DWHCITransferStageDataGetDMAAddress (pStageData) + GPU_MEM_BASE);
	DWHCIRegisterWrite (&DMAAddress);
   1a888:	e24b3038 	sub	r3, fp, #56	; 0x38
   1a88c:	e1a00003 	mov	r0, r3
   1a890:	eb000689 	bl	1c2bc <DWHCIRegisterWrite>

	uspi_CleanAndInvalidateDataCacheRange (DWHCITransferStageDataGetDMAAddress (pStageData),
   1a894:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a898:	eb000cf7 	bl	1dc7c <DWHCITransferStageDataGetDMAAddress>
   1a89c:	e1a04000 	mov	r4, r0
   1a8a0:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a8a4:	eb000d1d 	bl	1dd20 <DWHCITransferStageDataGetBytesToTransfer>
   1a8a8:	e1a03000 	mov	r3, r0
   1a8ac:	e1a00004 	mov	r0, r4
   1a8b0:	e1a01003 	mov	r1, r3
   1a8b4:	eb004918 	bl	2cd1c <uspi_CleanAndInvalidateDataCacheRange>
					       DWHCITransferStageDataGetBytesToTransfer (pStageData));
	DataMemBarrier ();
   1a8b8:	f57ff05f 	dmb	sy

	// set split control
	TDWHCIRegister SplitControl;
	DWHCIRegister2 (&SplitControl, DWHCI_HOST_CHAN_SPLIT_CTRL (nChannel), 0);
   1a8bc:	e51b3010 	ldr	r3, [fp, #-16]
   1a8c0:	e1a02283 	lsl	r2, r3, #5
   1a8c4:	e3003504 	movw	r3, #1284	; 0x504
   1a8c8:	e3433f98 	movt	r3, #16280	; 0x3f98
   1a8cc:	e0823003 	add	r3, r2, r3
   1a8d0:	e24b2044 	sub	r2, fp, #68	; 0x44
   1a8d4:	e1a00002 	mov	r0, r2
   1a8d8:	e1a01003 	mov	r1, r3
   1a8dc:	e3a02000 	mov	r2, #0
   1a8e0:	eb00060d 	bl	1c11c <DWHCIRegister2>
	if (DWHCITransferStageDataIsSplit (pStageData))
   1a8e4:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a8e8:	eb000d48 	bl	1de10 <DWHCITransferStageDataIsSplit>
   1a8ec:	e1a03000 	mov	r3, r0
   1a8f0:	e3530000 	cmp	r3, #0
   1a8f4:	0a000026 	beq	1a994 <DWHCIDeviceStartChannel+0x2dc>
	{
		DWHCIRegisterOr (&SplitControl, DWHCITransferStageDataGetHubPortAddress (pStageData));
   1a8f8:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a8fc:	eb000dbf 	bl	1e000 <DWHCITransferStageDataGetHubPortAddress>
   1a900:	e1a03000 	mov	r3, r0
   1a904:	e1a02003 	mov	r2, r3
   1a908:	e24b3044 	sub	r3, fp, #68	; 0x44
   1a90c:	e1a00003 	mov	r0, r3
   1a910:	e1a01002 	mov	r1, r2
   1a914:	eb000736 	bl	1c5f4 <DWHCIRegisterOr>
		DWHCIRegisterOr (&SplitControl,    DWHCITransferStageDataGetHubAddress (pStageData)
   1a918:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a91c:	eb000d81 	bl	1df28 <DWHCITransferStageDataGetHubAddress>
   1a920:	e1a03000 	mov	r3, r0
						<< DWHCI_HOST_CHAN_SPLIT_CTRL_HUB_ADDRESS__SHIFT);
   1a924:	e1a03383 	lsl	r3, r3, #7
	TDWHCIRegister SplitControl;
	DWHCIRegister2 (&SplitControl, DWHCI_HOST_CHAN_SPLIT_CTRL (nChannel), 0);
	if (DWHCITransferStageDataIsSplit (pStageData))
	{
		DWHCIRegisterOr (&SplitControl, DWHCITransferStageDataGetHubPortAddress (pStageData));
		DWHCIRegisterOr (&SplitControl,    DWHCITransferStageDataGetHubAddress (pStageData)
   1a928:	e1a02003 	mov	r2, r3
   1a92c:	e24b3044 	sub	r3, fp, #68	; 0x44
   1a930:	e1a00003 	mov	r0, r3
   1a934:	e1a01002 	mov	r1, r2
   1a938:	eb00072d 	bl	1c5f4 <DWHCIRegisterOr>
						<< DWHCI_HOST_CHAN_SPLIT_CTRL_HUB_ADDRESS__SHIFT);
		DWHCIRegisterOr (&SplitControl,    DWHCITransferStageDataGetSplitPosition (pStageData)
   1a93c:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a940:	eb000de4 	bl	1e0d8 <DWHCITransferStageDataGetSplitPosition>
   1a944:	e1a03000 	mov	r3, r0
						<< DWHCI_HOST_CHAN_SPLIT_CTRL_XACT_POS__SHIFT);
   1a948:	e1a03703 	lsl	r3, r3, #14
	if (DWHCITransferStageDataIsSplit (pStageData))
	{
		DWHCIRegisterOr (&SplitControl, DWHCITransferStageDataGetHubPortAddress (pStageData));
		DWHCIRegisterOr (&SplitControl,    DWHCITransferStageDataGetHubAddress (pStageData)
						<< DWHCI_HOST_CHAN_SPLIT_CTRL_HUB_ADDRESS__SHIFT);
		DWHCIRegisterOr (&SplitControl,    DWHCITransferStageDataGetSplitPosition (pStageData)
   1a94c:	e1a02003 	mov	r2, r3
   1a950:	e24b3044 	sub	r3, fp, #68	; 0x44
   1a954:	e1a00003 	mov	r0, r3
   1a958:	e1a01002 	mov	r1, r2
   1a95c:	eb000724 	bl	1c5f4 <DWHCIRegisterOr>
						<< DWHCI_HOST_CHAN_SPLIT_CTRL_XACT_POS__SHIFT);
		if (DWHCITransferStageDataIsSplitComplete (pStageData))
   1a960:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a964:	eb000d47 	bl	1de88 <DWHCITransferStageDataIsSplitComplete>
   1a968:	e1a03000 	mov	r3, r0
   1a96c:	e3530000 	cmp	r3, #0
   1a970:	0a000003 	beq	1a984 <DWHCIDeviceStartChannel+0x2cc>
		{
			DWHCIRegisterOr (&SplitControl, DWHCI_HOST_CHAN_SPLIT_CTRL_COMPLETE_SPLIT);
   1a974:	e24b3044 	sub	r3, fp, #68	; 0x44
   1a978:	e1a00003 	mov	r0, r3
   1a97c:	e3a01801 	mov	r1, #65536	; 0x10000
   1a980:	eb00071b 	bl	1c5f4 <DWHCIRegisterOr>
		}
		DWHCIRegisterOr (&SplitControl, DWHCI_HOST_CHAN_SPLIT_CTRL_SPLIT_ENABLE);
   1a984:	e24b3044 	sub	r3, fp, #68	; 0x44
   1a988:	e1a00003 	mov	r0, r3
   1a98c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
   1a990:	eb000717 	bl	1c5f4 <DWHCIRegisterOr>
	}
	DWHCIRegisterWrite (&SplitControl);
   1a994:	e24b3044 	sub	r3, fp, #68	; 0x44
   1a998:	e1a00003 	mov	r0, r3
   1a99c:	eb000646 	bl	1c2bc <DWHCIRegisterWrite>

	// set channel parameters
	TDWHCIRegister Character;
	DWHCIRegister (&Character, DWHCI_HOST_CHAN_CHARACTER (nChannel));
   1a9a0:	e51b2010 	ldr	r2, [fp, #-16]
   1a9a4:	e30c3028 	movw	r3, #49192	; 0xc028
   1a9a8:	e34031fc 	movt	r3, #508	; 0x1fc
   1a9ac:	e0823003 	add	r3, r2, r3
   1a9b0:	e1a03283 	lsl	r3, r3, #5
   1a9b4:	e24b2050 	sub	r2, fp, #80	; 0x50
   1a9b8:	e1a00002 	mov	r0, r2
   1a9bc:	e1a01003 	mov	r1, r3
   1a9c0:	eb0005b4 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterRead (&Character);
   1a9c4:	e24b3050 	sub	r3, fp, #80	; 0x50
   1a9c8:	e1a00003 	mov	r0, r3
   1a9cc:	eb000614 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&Character, ~DWHCI_HOST_CHAN_CHARACTER_MAX_PKT_SIZ__MASK);
   1a9d0:	e24b3050 	sub	r3, fp, #80	; 0x50
   1a9d4:	e1a00003 	mov	r0, r3
   1a9d8:	e3a01b3e 	mov	r1, #63488	; 0xf800
   1a9dc:	e34f1fff 	movt	r1, #65535	; 0xffff
   1a9e0:	eb0006d8 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterOr (&Character, DWHCITransferStageDataGetMaxPacketSize (pStageData) & DWHCI_HOST_CHAN_CHARACTER_MAX_PKT_SIZ__MASK);
   1a9e4:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1a9e8:	eb000be4 	bl	1d980 <DWHCITransferStageDataGetMaxPacketSize>
   1a9ec:	e1a03000 	mov	r3, r0
   1a9f0:	e7ea3053 	ubfx	r3, r3, #0, #11
   1a9f4:	e24b2050 	sub	r2, fp, #80	; 0x50
   1a9f8:	e1a00002 	mov	r0, r2
   1a9fc:	e1a01003 	mov	r1, r3
   1aa00:	eb0006fb 	bl	1c5f4 <DWHCIRegisterOr>

	DWHCIRegisterAnd (&Character, ~DWHCI_HOST_CHAN_CHARACTER_MULTI_CNT__MASK);
   1aa04:	e24b3050 	sub	r3, fp, #80	; 0x50
   1aa08:	e1a00003 	mov	r0, r3
   1aa0c:	e3e01603 	mvn	r1, #3145728	; 0x300000
   1aa10:	eb0006cc 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterOr (&Character, 1 << DWHCI_HOST_CHAN_CHARACTER_MULTI_CNT__SHIFT);	// TODO: optimize
   1aa14:	e24b3050 	sub	r3, fp, #80	; 0x50
   1aa18:	e1a00003 	mov	r0, r3
   1aa1c:	e3a01601 	mov	r1, #1048576	; 0x100000
   1aa20:	eb0006f3 	bl	1c5f4 <DWHCIRegisterOr>

	if (DWHCITransferStageDataIsDirectionIn (pStageData))
   1aa24:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1aa28:	eb000c57 	bl	1db8c <DWHCITransferStageDataIsDirectionIn>
   1aa2c:	e1a03000 	mov	r3, r0
   1aa30:	e3530000 	cmp	r3, #0
   1aa34:	0a000004 	beq	1aa4c <DWHCIDeviceStartChannel+0x394>
	{
		DWHCIRegisterOr (&Character, DWHCI_HOST_CHAN_CHARACTER_EP_DIRECTION_IN);
   1aa38:	e24b3050 	sub	r3, fp, #80	; 0x50
   1aa3c:	e1a00003 	mov	r0, r3
   1aa40:	e3a01902 	mov	r1, #32768	; 0x8000
   1aa44:	eb0006ea 	bl	1c5f4 <DWHCIRegisterOr>
   1aa48:	ea000003 	b	1aa5c <DWHCIDeviceStartChannel+0x3a4>
	}
	else
	{
		DWHCIRegisterAnd (&Character, ~DWHCI_HOST_CHAN_CHARACTER_EP_DIRECTION_IN);
   1aa4c:	e24b3050 	sub	r3, fp, #80	; 0x50
   1aa50:	e1a00003 	mov	r0, r3
   1aa54:	e3e01902 	mvn	r1, #32768	; 0x8000
   1aa58:	eb0006ba 	bl	1c548 <DWHCIRegisterAnd>
	}

	if (DWHCITransferStageDataGetSpeed (pStageData) == USBSpeedLow)
   1aa5c:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1aa60:	eb000be4 	bl	1d9f8 <DWHCITransferStageDataGetSpeed>
   1aa64:	e1a03000 	mov	r3, r0
   1aa68:	e3530000 	cmp	r3, #0
   1aa6c:	1a000004 	bne	1aa84 <DWHCIDeviceStartChannel+0x3cc>
	{
		DWHCIRegisterOr (&Character, DWHCI_HOST_CHAN_CHARACTER_LOW_SPEED_DEVICE);
   1aa70:	e24b3050 	sub	r3, fp, #80	; 0x50
   1aa74:	e1a00003 	mov	r0, r3
   1aa78:	e3a01802 	mov	r1, #131072	; 0x20000
   1aa7c:	eb0006dc 	bl	1c5f4 <DWHCIRegisterOr>
   1aa80:	ea000003 	b	1aa94 <DWHCIDeviceStartChannel+0x3dc>
	}
	else
	{
		DWHCIRegisterAnd (&Character, ~DWHCI_HOST_CHAN_CHARACTER_LOW_SPEED_DEVICE);
   1aa84:	e24b3050 	sub	r3, fp, #80	; 0x50
   1aa88:	e1a00003 	mov	r0, r3
   1aa8c:	e3e01802 	mvn	r1, #131072	; 0x20000
   1aa90:	eb0006ac 	bl	1c548 <DWHCIRegisterAnd>
	}

	DWHCIRegisterAnd (&Character, ~DWHCI_HOST_CHAN_CHARACTER_DEVICE_ADDRESS__MASK);
   1aa94:	e24b3050 	sub	r3, fp, #80	; 0x50
   1aa98:	e1a00003 	mov	r0, r3
   1aa9c:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
   1aaa0:	eb0006a8 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterOr (&Character, DWHCITransferStageDataGetDeviceAddress (pStageData) << DWHCI_HOST_CHAN_CHARACTER_DEVICE_ADDRESS__SHIFT);
   1aaa4:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1aaa8:	eb000b17 	bl	1d70c <DWHCITransferStageDataGetDeviceAddress>
   1aaac:	e1a03000 	mov	r3, r0
   1aab0:	e1a03b03 	lsl	r3, r3, #22
   1aab4:	e1a02003 	mov	r2, r3
   1aab8:	e24b3050 	sub	r3, fp, #80	; 0x50
   1aabc:	e1a00003 	mov	r0, r3
   1aac0:	e1a01002 	mov	r1, r2
   1aac4:	eb0006ca 	bl	1c5f4 <DWHCIRegisterOr>

	DWHCIRegisterAnd (&Character, ~DWHCI_HOST_CHAN_CHARACTER_EP_TYPE__MASK);
   1aac8:	e24b3050 	sub	r3, fp, #80	; 0x50
   1aacc:	e1a00003 	mov	r0, r3
   1aad0:	e3e01703 	mvn	r1, #786432	; 0xc0000
   1aad4:	eb00069b 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterOr (&Character, DWHCITransferStageDataGetEndpointType (pStageData) << DWHCI_HOST_CHAN_CHARACTER_EP_TYPE__SHIFT);
   1aad8:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1aadc:	eb000b36 	bl	1d7bc <DWHCITransferStageDataGetEndpointType>
   1aae0:	e1a03000 	mov	r3, r0
   1aae4:	e1a03903 	lsl	r3, r3, #18
   1aae8:	e1a02003 	mov	r2, r3
   1aaec:	e24b3050 	sub	r3, fp, #80	; 0x50
   1aaf0:	e1a00003 	mov	r0, r3
   1aaf4:	e1a01002 	mov	r1, r2
   1aaf8:	eb0006bd 	bl	1c5f4 <DWHCIRegisterOr>

	DWHCIRegisterAnd (&Character, ~DWHCI_HOST_CHAN_CHARACTER_EP_NUMBER__MASK);
   1aafc:	e24b3050 	sub	r3, fp, #80	; 0x50
   1ab00:	e1a00003 	mov	r0, r3
   1ab04:	e3e01b1e 	mvn	r1, #30720	; 0x7800
   1ab08:	eb00068e 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterOr (&Character, DWHCITransferStageDataGetEndpointNumber (pStageData) << DWHCI_HOST_CHAN_CHARACTER_EP_NUMBER__SHIFT);
   1ab0c:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1ab10:	eb000b6e 	bl	1d8d0 <DWHCITransferStageDataGetEndpointNumber>
   1ab14:	e1a03000 	mov	r3, r0
   1ab18:	e1a03583 	lsl	r3, r3, #11
   1ab1c:	e1a02003 	mov	r2, r3
   1ab20:	e24b3050 	sub	r3, fp, #80	; 0x50
   1ab24:	e1a00003 	mov	r0, r3
   1ab28:	e1a01002 	mov	r1, r2
   1ab2c:	eb0006b0 	bl	1c5f4 <DWHCIRegisterOr>

	TDWHCIFrameScheduler *pFrameScheduler = DWHCITransferStageDataGetFrameScheduler (pStageData);
   1ab30:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1ab34:	eb000e53 	bl	1e488 <DWHCITransferStageDataGetFrameScheduler>
   1ab38:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	if (pFrameScheduler != 0)
   1ab3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab40:	e3530000 	cmp	r3, #0
   1ab44:	0a000013 	beq	1ab98 <DWHCIDeviceStartChannel+0x4e0>
	{
		pFrameScheduler->WaitForFrame (pFrameScheduler);
   1ab48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab4c:	e5933010 	ldr	r3, [r3, #16]
   1ab50:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1ab54:	e12fff33 	blx	r3

		if (pFrameScheduler->IsOddFrame (pFrameScheduler))
   1ab58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab5c:	e5933014 	ldr	r3, [r3, #20]
   1ab60:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1ab64:	e12fff33 	blx	r3
   1ab68:	e1a03000 	mov	r3, r0
   1ab6c:	e3530000 	cmp	r3, #0
   1ab70:	0a000004 	beq	1ab88 <DWHCIDeviceStartChannel+0x4d0>
		{
			DWHCIRegisterOr (&Character, DWHCI_HOST_CHAN_CHARACTER_PER_ODD_FRAME);
   1ab74:	e24b3050 	sub	r3, fp, #80	; 0x50
   1ab78:	e1a00003 	mov	r0, r3
   1ab7c:	e3a01202 	mov	r1, #536870912	; 0x20000000
   1ab80:	eb00069b 	bl	1c5f4 <DWHCIRegisterOr>
   1ab84:	ea000003 	b	1ab98 <DWHCIDeviceStartChannel+0x4e0>
		}
		else
		{
			DWHCIRegisterAnd (&Character, ~DWHCI_HOST_CHAN_CHARACTER_PER_ODD_FRAME);
   1ab88:	e24b3050 	sub	r3, fp, #80	; 0x50
   1ab8c:	e1a00003 	mov	r0, r3
   1ab90:	e3e01202 	mvn	r1, #536870912	; 0x20000000
   1ab94:	eb00066b 	bl	1c548 <DWHCIRegisterAnd>
		}
	}

	TDWHCIRegister ChanInterruptMask;
	DWHCIRegister (&ChanInterruptMask, DWHCI_HOST_CHAN_INT_MASK (nChannel));
   1ab98:	e51b3010 	ldr	r3, [fp, #-16]
   1ab9c:	e1a02283 	lsl	r2, r3, #5
   1aba0:	e300350c 	movw	r3, #1292	; 0x50c
   1aba4:	e3433f98 	movt	r3, #16280	; 0x3f98
   1aba8:	e0823003 	add	r3, r2, r3
   1abac:	e24b205c 	sub	r2, fp, #92	; 0x5c
   1abb0:	e1a00002 	mov	r0, r2
   1abb4:	e1a01003 	mov	r1, r3
   1abb8:	eb000536 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterSet (&ChanInterruptMask, DWHCITransferStageDataGetStatusMask (pStageData));
   1abbc:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
   1abc0:	eb000d6b 	bl	1e174 <DWHCITransferStageDataGetStatusMask>
   1abc4:	e1a02000 	mov	r2, r0
   1abc8:	e24b305c 	sub	r3, fp, #92	; 0x5c
   1abcc:	e1a00003 	mov	r0, r3
   1abd0:	e1a01002 	mov	r1, r2
   1abd4:	eb00060a 	bl	1c404 <DWHCIRegisterSet>
	DWHCIRegisterWrite (&ChanInterruptMask);
   1abd8:	e24b305c 	sub	r3, fp, #92	; 0x5c
   1abdc:	e1a00003 	mov	r0, r3
   1abe0:	eb0005b5 	bl	1c2bc <DWHCIRegisterWrite>
	
	DWHCIRegisterOr (&Character, DWHCI_HOST_CHAN_CHARACTER_ENABLE);
   1abe4:	e24b3050 	sub	r3, fp, #80	; 0x50
   1abe8:	e1a00003 	mov	r0, r3
   1abec:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
   1abf0:	eb00067f 	bl	1c5f4 <DWHCIRegisterOr>
	DWHCIRegisterAnd (&Character, ~DWHCI_HOST_CHAN_CHARACTER_DISABLE);
   1abf4:	e24b3050 	sub	r3, fp, #80	; 0x50
   1abf8:	e1a00003 	mov	r0, r3
   1abfc:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
   1ac00:	eb000650 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterWrite (&Character);
   1ac04:	e24b3050 	sub	r3, fp, #80	; 0x50
   1ac08:	e1a00003 	mov	r0, r3
   1ac0c:	eb0005aa 	bl	1c2bc <DWHCIRegisterWrite>

	_DWHCIRegister (&ChanInterruptMask);
   1ac10:	e24b305c 	sub	r3, fp, #92	; 0x5c
   1ac14:	e1a00003 	mov	r0, r3
   1ac18:	eb000564 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&Character);
   1ac1c:	e24b3050 	sub	r3, fp, #80	; 0x50
   1ac20:	e1a00003 	mov	r0, r3
   1ac24:	eb000561 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&SplitControl);
   1ac28:	e24b3044 	sub	r3, fp, #68	; 0x44
   1ac2c:	e1a00003 	mov	r0, r3
   1ac30:	eb00055e 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&DMAAddress);
   1ac34:	e24b3038 	sub	r3, fp, #56	; 0x38
   1ac38:	e1a00003 	mov	r0, r3
   1ac3c:	eb00055b 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&TransferSize);
   1ac40:	e24b302c 	sub	r3, fp, #44	; 0x2c
   1ac44:	e1a00003 	mov	r0, r3
   1ac48:	eb000558 	bl	1c1b0 <_DWHCIRegister>
	_DWHCIRegister (&ChanInterrupt);
   1ac4c:	e24b3020 	sub	r3, fp, #32
   1ac50:	e1a00003 	mov	r0, r3
   1ac54:	eb000555 	bl	1c1b0 <_DWHCIRegister>
   1ac58:	e1a03005 	mov	r3, r5
   1ac5c:	e30a06b8 	movw	r0, #42680	; 0xa6b8
   1ac60:	e3400001 	movt	r0, #1
   1ac64:	e1a01003 	mov	r1, r3
   1ac68:	ebffeafd 	bl	15864 <__cyg_profile_func_exit>
}
   1ac6c:	e24bd00c 	sub	sp, fp, #12
   1ac70:	e8bd8830 	pop	{r4, r5, fp, pc}

0001ac74 <DWHCIDeviceChannelInterruptHandler>:

void DWHCIDeviceChannelInterruptHandler (TDWHCIDevice *pThis, unsigned nChannel)
{
   1ac74:	e92d4870 	push	{r4, r5, r6, fp, lr}
   1ac78:	e28db010 	add	fp, sp, #16
   1ac7c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   1ac80:	e1a0500e 	mov	r5, lr
   1ac84:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   1ac88:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
   1ac8c:	e1a03005 	mov	r3, r5
   1ac90:	e30a0c74 	movw	r0, #44148	; 0xac74
   1ac94:	e3400001 	movt	r0, #1
   1ac98:	e1a01003 	mov	r1, r3
   1ac9c:	ebffea9e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1aca0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1aca4:	e3530000 	cmp	r3, #0
   1aca8:	1a000005 	bne	1acc4 <DWHCIDeviceChannelInterruptHandler+0x50>
   1acac:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1acb0:	e3400002 	movt	r0, #2
   1acb4:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1acb8:	e3401002 	movt	r1, #2
   1acbc:	e3a02fef 	mov	r2, #956	; 0x3bc
   1acc0:	ebffef3a 	bl	169b0 <uspi_assertion_failed>

	TDWHCITransferStageData *pStageData = pThis->m_pStageData[nChannel];
   1acc4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1acc8:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
   1accc:	e2822002 	add	r2, r2, #2
   1acd0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   1acd4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	assert (pStageData != 0);
   1acd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1acdc:	e3530000 	cmp	r3, #0
   1ace0:	1a000005 	bne	1acfc <DWHCIDeviceChannelInterruptHandler+0x88>
   1ace4:	e30e0374 	movw	r0, #58228	; 0xe374
   1ace8:	e3400002 	movt	r0, #2
   1acec:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1acf0:	e3401002 	movt	r1, #2
   1acf4:	e30023bf 	movw	r2, #959	; 0x3bf
   1acf8:	ebffef2c 	bl	169b0 <uspi_assertion_failed>
	TDWHCIFrameScheduler *pFrameScheduler = DWHCITransferStageDataGetFrameScheduler (pStageData);
   1acfc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ad00:	eb000de0 	bl	1e488 <DWHCITransferStageDataGetFrameScheduler>
   1ad04:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
	TUSBRequest *pURB = DWHCITransferStageDataGetURB (pStageData);
   1ad08:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ad0c:	eb000db5 	bl	1e3e8 <DWHCITransferStageDataGetURB>
   1ad10:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	assert (pURB != 0);
   1ad14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ad18:	e3530000 	cmp	r3, #0
   1ad1c:	1a000005 	bne	1ad38 <DWHCIDeviceChannelInterruptHandler+0xc4>
   1ad20:	e30e01ec 	movw	r0, #57836	; 0xe1ec
   1ad24:	e3400002 	movt	r0, #2
   1ad28:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1ad2c:	e3401002 	movt	r1, #2
   1ad30:	e30023c2 	movw	r2, #962	; 0x3c2
   1ad34:	ebffef1d 	bl	169b0 <uspi_assertion_failed>

	switch (DWHCITransferStageDataGetSubState (pStageData))
   1ad38:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ad3c:	eb0009ed 	bl	1d4f8 <DWHCITransferStageDataGetSubState>
   1ad40:	e1a03000 	mov	r3, r0
   1ad44:	e3530000 	cmp	r3, #0
   1ad48:	0a000002 	beq	1ad58 <DWHCIDeviceChannelInterruptHandler+0xe4>
   1ad4c:	e3530001 	cmp	r3, #1
   1ad50:	0a000005 	beq	1ad6c <DWHCIDeviceChannelInterruptHandler+0xf8>
   1ad54:	ea00005b 	b	1aec8 <DWHCIDeviceChannelInterruptHandler+0x254>
	{
	case StageSubStateWaitForChannelDisable:
		DWHCIDeviceStartChannel (pThis, pStageData);
   1ad58:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1ad5c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ad60:	ebfffe54 	bl	1a6b8 <DWHCIDeviceStartChannel>
   1ad64:	e3a04000 	mov	r4, #0
		return;
   1ad68:	ea0001a2 	b	1b3f8 <DWHCIDeviceChannelInterruptHandler+0x784>

	case StageSubStateWaitForTransactionComplete: {
		uspi_CleanAndInvalidateDataCacheRange (DWHCITransferStageDataGetDMAAddress (pStageData),
   1ad6c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ad70:	eb000bc1 	bl	1dc7c <DWHCITransferStageDataGetDMAAddress>
   1ad74:	e1a04000 	mov	r4, r0
   1ad78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ad7c:	eb000be7 	bl	1dd20 <DWHCITransferStageDataGetBytesToTransfer>
   1ad80:	e1a03000 	mov	r3, r0
   1ad84:	e1a00004 	mov	r0, r4
   1ad88:	e1a01003 	mov	r1, r3
   1ad8c:	eb0047e2 	bl	2cd1c <uspi_CleanAndInvalidateDataCacheRange>
						       DWHCITransferStageDataGetBytesToTransfer (pStageData));
		DataMemBarrier ();
   1ad90:	f57ff05f 	dmb	sy

		TDWHCIRegister TransferSize;
		DWHCIRegister (&TransferSize, DWHCI_HOST_CHAN_XFER_SIZ (nChannel));
   1ad94:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   1ad98:	e1a02283 	lsl	r2, r3, #5
   1ad9c:	e3a03e51 	mov	r3, #1296	; 0x510
   1ada0:	e3433f98 	movt	r3, #16280	; 0x3f98
   1ada4:	e0823003 	add	r3, r2, r3
   1ada8:	e24b2038 	sub	r2, fp, #56	; 0x38
   1adac:	e1a00002 	mov	r0, r2
   1adb0:	e1a01003 	mov	r1, r3
   1adb4:	eb0004b7 	bl	1c098 <DWHCIRegister>
		DWHCIRegisterRead (&TransferSize);
   1adb8:	e24b3038 	sub	r3, fp, #56	; 0x38
   1adbc:	e1a00003 	mov	r0, r3
   1adc0:	eb000517 	bl	1c224 <DWHCIRegisterRead>

		TDWHCIRegister ChanInterrupt;
		DWHCIRegister (&ChanInterrupt, DWHCI_HOST_CHAN_INT (nChannel));
   1adc4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   1adc8:	e1a02283 	lsl	r2, r3, #5
   1adcc:	e3003508 	movw	r3, #1288	; 0x508
   1add0:	e3433f98 	movt	r3, #16280	; 0x3f98
   1add4:	e0823003 	add	r3, r2, r3
   1add8:	e24b2044 	sub	r2, fp, #68	; 0x44
   1addc:	e1a00002 	mov	r0, r2
   1ade0:	e1a01003 	mov	r1, r3
   1ade4:	eb0004ab 	bl	1c098 <DWHCIRegister>

		// restart halted transaction
		if (DWHCIRegisterRead (&ChanInterrupt) == DWHCI_HOST_CHAN_INT_HALTED)
   1ade8:	e24b3044 	sub	r3, fp, #68	; 0x44
   1adec:	e1a00003 	mov	r0, r3
   1adf0:	eb00050b 	bl	1c224 <DWHCIRegisterRead>
   1adf4:	e1a03000 	mov	r3, r0
   1adf8:	e3530002 	cmp	r3, #2
   1adfc:	1a000004 	bne	1ae14 <DWHCIDeviceChannelInterruptHandler+0x1a0>
		{
			DWHCIDeviceStartTransaction (pThis, pStageData);
   1ae00:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1ae04:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ae08:	ebfffdbd 	bl	1a504 <DWHCIDeviceStartTransaction>
   1ae0c:	e3a04000 	mov	r4, #0
   1ae10:	ea000178 	b	1b3f8 <DWHCIDeviceChannelInterruptHandler+0x784>
			return;
		}

		assert (   !DWHCITransferStageDataIsPeriodic (pStageData)
   1ae14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ae18:	eb000a06 	bl	1d638 <DWHCITransferStageDataIsPeriodic>
   1ae1c:	e1a03000 	mov	r3, r0
   1ae20:	e3530000 	cmp	r3, #0
   1ae24:	0a00000d 	beq	1ae60 <DWHCIDeviceChannelInterruptHandler+0x1ec>
   1ae28:	e24b3038 	sub	r3, fp, #56	; 0x38
   1ae2c:	e1a00003 	mov	r0, r3
   1ae30:	eb00054b 	bl	1c364 <DWHCIRegisterGet>
   1ae34:	e1a03000 	mov	r3, r0
   1ae38:	e1a03ea3 	lsr	r3, r3, #29
   1ae3c:	e2033003 	and	r3, r3, #3
   1ae40:	e3530003 	cmp	r3, #3
   1ae44:	1a000005 	bne	1ae60 <DWHCIDeviceChannelInterruptHandler+0x1ec>
   1ae48:	e30e03e0 	movw	r0, #58336	; 0xe3e0
   1ae4c:	e3400002 	movt	r0, #2
   1ae50:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1ae54:	e3401002 	movt	r1, #2
   1ae58:	e30023df 	movw	r2, #991	; 0x3df
   1ae5c:	ebffeed3 	bl	169b0 <uspi_assertion_failed>
			||    DWHCI_HOST_CHAN_XFER_SIZ_PID (DWHCIRegisterGet (&TransferSize))
			   != DWHCI_HOST_CHAN_XFER_SIZ_PID_MDATA);

		DWHCITransferStageDataTransactionComplete (pStageData, DWHCIRegisterRead (&ChanInterrupt),
   1ae60:	e24b3044 	sub	r3, fp, #68	; 0x44
   1ae64:	e1a00003 	mov	r0, r3
   1ae68:	eb0004ed 	bl	1c224 <DWHCIRegisterRead>
   1ae6c:	e1a06000 	mov	r6, r0
			DWHCI_HOST_CHAN_XFER_SIZ_PACKETS (DWHCIRegisterGet (&TransferSize)),
   1ae70:	e24b3038 	sub	r3, fp, #56	; 0x38
   1ae74:	e1a00003 	mov	r0, r3
   1ae78:	eb000539 	bl	1c364 <DWHCIRegisterGet>
   1ae7c:	e1a03000 	mov	r3, r0
   1ae80:	e1a039a3 	lsr	r3, r3, #19

		assert (   !DWHCITransferStageDataIsPeriodic (pStageData)
			||    DWHCI_HOST_CHAN_XFER_SIZ_PID (DWHCIRegisterGet (&TransferSize))
			   != DWHCI_HOST_CHAN_XFER_SIZ_PID_MDATA);

		DWHCITransferStageDataTransactionComplete (pStageData, DWHCIRegisterRead (&ChanInterrupt),
   1ae84:	e7e94053 	ubfx	r4, r3, #0, #10
			DWHCI_HOST_CHAN_XFER_SIZ_PACKETS (DWHCIRegisterGet (&TransferSize)),
			DWHCIRegisterGet (&TransferSize) & DWHCI_HOST_CHAN_XFER_SIZ_BYTES__MASK);
   1ae88:	e24b3038 	sub	r3, fp, #56	; 0x38
   1ae8c:	e1a00003 	mov	r0, r3
   1ae90:	eb000533 	bl	1c364 <DWHCIRegisterGet>
   1ae94:	e1a03000 	mov	r3, r0

		assert (   !DWHCITransferStageDataIsPeriodic (pStageData)
			||    DWHCI_HOST_CHAN_XFER_SIZ_PID (DWHCIRegisterGet (&TransferSize))
			   != DWHCI_HOST_CHAN_XFER_SIZ_PID_MDATA);

		DWHCITransferStageDataTransactionComplete (pStageData, DWHCIRegisterRead (&ChanInterrupt),
   1ae98:	e7f23053 	ubfx	r3, r3, #0, #19
   1ae9c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1aea0:	e1a01006 	mov	r1, r6
   1aea4:	e1a02004 	mov	r2, r4
   1aea8:	eb000880 	bl	1d0b0 <DWHCITransferStageDataTransactionComplete>
			DWHCI_HOST_CHAN_XFER_SIZ_PACKETS (DWHCIRegisterGet (&TransferSize)),
			DWHCIRegisterGet (&TransferSize) & DWHCI_HOST_CHAN_XFER_SIZ_BYTES__MASK);

		_DWHCIRegister (&ChanInterrupt);
   1aeac:	e24b3044 	sub	r3, fp, #68	; 0x44
   1aeb0:	e1a00003 	mov	r0, r3
   1aeb4:	eb0004bd 	bl	1c1b0 <_DWHCIRegister>
		_DWHCIRegister (&TransferSize);
   1aeb8:	e24b3038 	sub	r3, fp, #56	; 0x38
   1aebc:	e1a00003 	mov	r0, r3
   1aec0:	eb0004ba 	bl	1c1b0 <_DWHCIRegister>
		} break;
   1aec4:	ea000006 	b	1aee4 <DWHCIDeviceChannelInterruptHandler+0x270>
	
	default:
		assert (0);
   1aec8:	e30e0478 	movw	r0, #58488	; 0xe478
   1aecc:	e3400002 	movt	r0, #2
   1aed0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1aed4:	e3401002 	movt	r1, #2
   1aed8:	e30023ea 	movw	r2, #1002	; 0x3ea
   1aedc:	ebffeeb3 	bl	169b0 <uspi_assertion_failed>
		break;
   1aee0:	e1a00000 	nop			; (mov r0, r0)
	}
	
	unsigned nStatus;
	
	switch (DWHCITransferStageDataGetState (pStageData))
   1aee4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1aee8:	eb000946 	bl	1d408 <DWHCITransferStageDataGetState>
   1aeec:	e1a03000 	mov	r3, r0
   1aef0:	e3530001 	cmp	r3, #1
   1aef4:	0a000057 	beq	1b058 <DWHCIDeviceChannelInterruptHandler+0x3e4>
   1aef8:	e3530001 	cmp	r3, #1
   1aefc:	3a000002 	bcc	1af0c <DWHCIDeviceChannelInterruptHandler+0x298>
   1af00:	e3530002 	cmp	r3, #2
   1af04:	0a000096 	beq	1b164 <DWHCIDeviceChannelInterruptHandler+0x4f0>
   1af08:	ea000132 	b	1b3d8 <DWHCIDeviceChannelInterruptHandler+0x764>
	{
	case StageStateNoSplitTransfer:
		nStatus = DWHCITransferStageDataGetTransactionStatus (pStageData);
   1af0c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1af10:	eb000cc2 	bl	1e220 <DWHCITransferStageDataGetTransactionStatus>
   1af14:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
		if (nStatus & DWHCI_HOST_CHAN_INT_ERROR_MASK)
   1af18:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   1af1c:	e300378c 	movw	r3, #1932	; 0x78c
   1af20:	e0033002 	and	r3, r3, r2
   1af24:	e3530000 	cmp	r3, #0
   1af28:	0a00000a 	beq	1af58 <DWHCIDeviceChannelInterruptHandler+0x2e4>
		{
			LogWrite (FromDWHCI, LOG_ERROR, "Transaction failed (status 0x%X)", nStatus);
   1af2c:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   1af30:	e3400002 	movt	r0, #2
   1af34:	e3a01001 	mov	r1, #1
   1af38:	e30e247c 	movw	r2, #58492	; 0xe47c
   1af3c:	e3402002 	movt	r2, #2
   1af40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1af44:	ebffee81 	bl	16950 <LogWrite>

			USBRequestSetStatus (pURB, 0);
   1af48:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1af4c:	e3a01000 	mov	r1, #0
   1af50:	eb0019c9 	bl	2167c <USBRequestSetStatus>
   1af54:	ea00002d 	b	1b010 <DWHCIDeviceChannelInterruptHandler+0x39c>
		}
		else if (   (nStatus & (DWHCI_HOST_CHAN_INT_NAK | DWHCI_HOST_CHAN_INT_NYET))
   1af58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1af5c:	e2033050 	and	r3, r3, #80	; 0x50
   1af60:	e3530000 	cmp	r3, #0
   1af64:	0a00001b 	beq	1afd8 <DWHCIDeviceChannelInterruptHandler+0x364>
			 && DWHCITransferStageDataIsPeriodic (pStageData))
   1af68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1af6c:	eb0009b1 	bl	1d638 <DWHCITransferStageDataIsPeriodic>
   1af70:	e1a03000 	mov	r3, r0
   1af74:	e3530000 	cmp	r3, #0
   1af78:	0a000016 	beq	1afd8 <DWHCIDeviceChannelInterruptHandler+0x364>
		{
			DWHCITransferStageDataSetState (pStageData, StageStatePeriodicDelay);
   1af7c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1af80:	e3a01003 	mov	r1, #3
   1af84:	eb000901 	bl	1d390 <DWHCITransferStageDataSetState>

			unsigned nInterval = USBEndpointGetInterval (USBRequestGetEndpoint (pURB));
   1af88:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1af8c:	eb001992 	bl	215dc <USBRequestGetEndpoint>
   1af90:	e1a03000 	mov	r3, r0
   1af94:	e1a00003 	mov	r0, r3
   1af98:	eb001838 	bl	21080 <USBEndpointGetInterval>
   1af9c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8

			StartKernelTimer (MSEC2HZ (nInterval), DWHCIDeviceTimerHandler, pStageData, pThis);
   1afa0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1afa4:	e3a02064 	mov	r2, #100	; 0x64
   1afa8:	e0020392 	mul	r2, r2, r3
   1afac:	e3043dd3 	movw	r3, #19923	; 0x4dd3
   1afb0:	e3413062 	movt	r3, #4194	; 0x1062
   1afb4:	e0832392 	umull	r2, r3, r2, r3
   1afb8:	e1a03323 	lsr	r3, r3, #6
   1afbc:	e1a00003 	mov	r0, r3
   1afc0:	e30b15c8 	movw	r1, #46536	; 0xb5c8
   1afc4:	e3401001 	movt	r1, #1
   1afc8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1afcc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1afd0:	ebffed94 	bl	16628 <StartKernelTimer>

			break;
   1afd4:	ea000106 	b	1b3f4 <DWHCIDeviceChannelInterruptHandler+0x780>
		}
		else
		{
			if (!DWHCITransferStageDataIsStatusStage (pStageData))
   1afd8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1afdc:	eb000b08 	bl	1dc04 <DWHCITransferStageDataIsStatusStage>
   1afe0:	e1a03000 	mov	r3, r0
   1afe4:	e3530000 	cmp	r3, #0
   1afe8:	1a000005 	bne	1b004 <DWHCIDeviceChannelInterruptHandler+0x390>
			{
				USBRequestSetResultLen (pURB, DWHCITransferStageDataGetResultLen (pStageData));
   1afec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1aff0:	eb000cd5 	bl	1e34c <DWHCITransferStageDataGetResultLen>
   1aff4:	e1a03000 	mov	r3, r0
   1aff8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1affc:	e1a01003 	mov	r1, r3
   1b000:	eb0019bb 	bl	216f4 <USBRequestSetResultLen>
			}

			USBRequestSetStatus (pURB, 1);
   1b004:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b008:	e3a01001 	mov	r1, #1
   1b00c:	eb00199a 	bl	2167c <USBRequestSetStatus>
		}

		DWHCIDeviceDisableChannelInterrupt (pThis, nChannel);
   1b010:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b014:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b018:	ebfffb88 	bl	19e40 <DWHCIDeviceDisableChannelInterrupt>
	
		_DWHCITransferStageData (pStageData);
   1b01c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b020:	eb0007df 	bl	1cfa4 <_DWHCITransferStageData>
		free (pStageData);
   1b024:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b028:	ebffeea0 	bl	16ab0 <free>
		pThis->m_pStageData[nChannel] = 0;
   1b02c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1b030:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
   1b034:	e2822002 	add	r2, r2, #2
   1b038:	e3a01000 	mov	r1, #0
   1b03c:	e7831102 	str	r1, [r3, r2, lsl #2]

		DWHCIDeviceFreeChannel (pThis, nChannel);
   1b040:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b044:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b048:	eb0001fd 	bl	1b844 <DWHCIDeviceFreeChannel>

		USBRequestCallCompletionRoutine (pURB);
   1b04c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b050:	eb001aba 	bl	21b40 <USBRequestCallCompletionRoutine>
		break;
   1b054:	ea0000e6 	b	1b3f4 <DWHCIDeviceChannelInterruptHandler+0x780>

	case StageStateStartSplit:
		nStatus = DWHCITransferStageDataGetTransactionStatus (pStageData);
   1b058:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b05c:	eb000c6f 	bl	1e220 <DWHCITransferStageDataGetTransactionStatus>
   1b060:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
		if (   (nStatus & DWHCI_HOST_CHAN_INT_ERROR_MASK)
   1b064:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   1b068:	e300378c 	movw	r3, #1932	; 0x78c
   1b06c:	e0033002 	and	r3, r3, r2
   1b070:	e3530000 	cmp	r3, #0
   1b074:	1a000007 	bne	1b098 <DWHCIDeviceChannelInterruptHandler+0x424>
		    || (nStatus & DWHCI_HOST_CHAN_INT_NAK)
   1b078:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b07c:	e2033010 	and	r3, r3, #16
   1b080:	e3530000 	cmp	r3, #0
   1b084:	1a000003 	bne	1b098 <DWHCIDeviceChannelInterruptHandler+0x424>
		    || (nStatus & DWHCI_HOST_CHAN_INT_NYET))
   1b088:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b08c:	e2033040 	and	r3, r3, #64	; 0x40
   1b090:	e3530000 	cmp	r3, #0
   1b094:	0a00001b 	beq	1b108 <DWHCIDeviceChannelInterruptHandler+0x494>
		{
			LogWrite (FromDWHCI, LOG_ERROR, "Transaction failed (status 0x%X)", nStatus);
   1b098:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   1b09c:	e3400002 	movt	r0, #2
   1b0a0:	e3a01001 	mov	r1, #1
   1b0a4:	e30e247c 	movw	r2, #58492	; 0xe47c
   1b0a8:	e3402002 	movt	r2, #2
   1b0ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b0b0:	ebffee26 	bl	16950 <LogWrite>

			USBRequestSetStatus (pURB, 0);
   1b0b4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b0b8:	e3a01000 	mov	r1, #0
   1b0bc:	eb00196e 	bl	2167c <USBRequestSetStatus>

			DWHCIDeviceDisableChannelInterrupt (pThis, nChannel);
   1b0c0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b0c4:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b0c8:	ebfffb5c 	bl	19e40 <DWHCIDeviceDisableChannelInterrupt>

			_DWHCITransferStageData (pStageData);
   1b0cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b0d0:	eb0007b3 	bl	1cfa4 <_DWHCITransferStageData>
			free (pStageData);
   1b0d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b0d8:	ebffee74 	bl	16ab0 <free>
			pThis->m_pStageData[nChannel] = 0;
   1b0dc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1b0e0:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
   1b0e4:	e2822002 	add	r2, r2, #2
   1b0e8:	e3a01000 	mov	r1, #0
   1b0ec:	e7831102 	str	r1, [r3, r2, lsl #2]

			DWHCIDeviceFreeChannel (pThis, nChannel);
   1b0f0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b0f4:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b0f8:	eb0001d1 	bl	1b844 <DWHCIDeviceFreeChannel>

			USBRequestCallCompletionRoutine (pURB);
   1b0fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b100:	eb001a8e 	bl	21b40 <USBRequestCallCompletionRoutine>
			break;
   1b104:	ea0000ba 	b	1b3f4 <DWHCIDeviceChannelInterruptHandler+0x780>
		}

		pFrameScheduler->TransactionComplete (pFrameScheduler, nStatus);
   1b108:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b10c:	e593300c 	ldr	r3, [r3, #12]
   1b110:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b114:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b118:	e12fff33 	blx	r3

		DWHCITransferStageDataSetState (pStageData, StageStateCompleteSplit);
   1b11c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b120:	e3a01002 	mov	r1, #2
   1b124:	eb000899 	bl	1d390 <DWHCITransferStageDataSetState>
		DWHCITransferStageDataSetSplitComplete (pStageData, TRUE);
   1b128:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b12c:	e3a01001 	mov	r1, #1
   1b130:	eb00086e 	bl	1d2f0 <DWHCITransferStageDataSetSplitComplete>

		if (!pFrameScheduler->CompleteSplit (pFrameScheduler))
   1b134:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b138:	e5933008 	ldr	r3, [r3, #8]
   1b13c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b140:	e12fff33 	blx	r3
   1b144:	e1a03000 	mov	r3, r0
   1b148:	e3530000 	cmp	r3, #0
   1b14c:	1a000000 	bne	1b154 <DWHCIDeviceChannelInterruptHandler+0x4e0>
		{
			goto LeaveCompleteSplit;
   1b150:	ea000037 	b	1b234 <DWHCIDeviceChannelInterruptHandler+0x5c0>
		}
		
		DWHCIDeviceStartTransaction (pThis, pStageData);
   1b154:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b158:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b15c:	ebfffce8 	bl	1a504 <DWHCIDeviceStartTransaction>
		break;
   1b160:	ea0000a3 	b	1b3f4 <DWHCIDeviceChannelInterruptHandler+0x780>
		
	case StageStateCompleteSplit:
		nStatus = DWHCITransferStageDataGetTransactionStatus (pStageData);
   1b164:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b168:	eb000c2c 	bl	1e220 <DWHCITransferStageDataGetTransactionStatus>
   1b16c:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
		if (nStatus & DWHCI_HOST_CHAN_INT_ERROR_MASK)
   1b170:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   1b174:	e300378c 	movw	r3, #1932	; 0x78c
   1b178:	e0033002 	and	r3, r3, r2
   1b17c:	e3530000 	cmp	r3, #0
   1b180:	0a00001b 	beq	1b1f4 <DWHCIDeviceChannelInterruptHandler+0x580>
		{
			LogWrite (FromDWHCI, LOG_ERROR, "Transaction failed (status 0x%X)", nStatus);
   1b184:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   1b188:	e3400002 	movt	r0, #2
   1b18c:	e3a01001 	mov	r1, #1
   1b190:	e30e247c 	movw	r2, #58492	; 0xe47c
   1b194:	e3402002 	movt	r2, #2
   1b198:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b19c:	ebffedeb 	bl	16950 <LogWrite>

			USBRequestSetStatus (pURB, 0);
   1b1a0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b1a4:	e3a01000 	mov	r1, #0
   1b1a8:	eb001933 	bl	2167c <USBRequestSetStatus>

			DWHCIDeviceDisableChannelInterrupt (pThis, nChannel);
   1b1ac:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b1b0:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b1b4:	ebfffb21 	bl	19e40 <DWHCIDeviceDisableChannelInterrupt>

			_DWHCITransferStageData (pStageData);
   1b1b8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b1bc:	eb000778 	bl	1cfa4 <_DWHCITransferStageData>
			free (pStageData);
   1b1c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b1c4:	ebffee39 	bl	16ab0 <free>
			pThis->m_pStageData[nChannel] = 0;
   1b1c8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1b1cc:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
   1b1d0:	e2822002 	add	r2, r2, #2
   1b1d4:	e3a01000 	mov	r1, #0
   1b1d8:	e7831102 	str	r1, [r3, r2, lsl #2]

			DWHCIDeviceFreeChannel (pThis, nChannel);
   1b1dc:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b1e0:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b1e4:	eb000196 	bl	1b844 <DWHCIDeviceFreeChannel>

			USBRequestCallCompletionRoutine (pURB);
   1b1e8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b1ec:	eb001a53 	bl	21b40 <USBRequestCallCompletionRoutine>
			break;
   1b1f0:	ea00007f 	b	1b3f4 <DWHCIDeviceChannelInterruptHandler+0x780>
		}
		
		pFrameScheduler->TransactionComplete (pFrameScheduler, nStatus);
   1b1f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b1f8:	e593300c 	ldr	r3, [r3, #12]
   1b1fc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b200:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b204:	e12fff33 	blx	r3

		if (pFrameScheduler->CompleteSplit (pFrameScheduler))
   1b208:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b20c:	e5933008 	ldr	r3, [r3, #8]
   1b210:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b214:	e12fff33 	blx	r3
   1b218:	e1a03000 	mov	r3, r0
   1b21c:	e3530000 	cmp	r3, #0
   1b220:	0a000003 	beq	1b234 <DWHCIDeviceChannelInterruptHandler+0x5c0>
		{
			DWHCIDeviceStartTransaction (pThis, pStageData);
   1b224:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b228:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b22c:	ebfffcb4 	bl	1a504 <DWHCIDeviceStartTransaction>
			break;
   1b230:	ea00006f 	b	1b3f4 <DWHCIDeviceChannelInterruptHandler+0x780>
		}

	LeaveCompleteSplit:
		if (!DWHCITransferStageDataIsStageComplete (pStageData))
   1b234:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b238:	eb000c20 	bl	1e2c0 <DWHCITransferStageDataIsStageComplete>
   1b23c:	e1a03000 	mov	r3, r0
   1b240:	e3530000 	cmp	r3, #0
   1b244:	1a000043 	bne	1b358 <DWHCIDeviceChannelInterruptHandler+0x6e4>
		{
			if (!DWHCITransferStageDataBeginSplitCycle (pStageData))
   1b248:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b24c:	eb0008c7 	bl	1d570 <DWHCITransferStageDataBeginSplitCycle>
   1b250:	e1a03000 	mov	r3, r0
   1b254:	e3530000 	cmp	r3, #0
   1b258:	1a000014 	bne	1b2b0 <DWHCIDeviceChannelInterruptHandler+0x63c>
			{
				USBRequestSetStatus (pURB, 0);
   1b25c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b260:	e3a01000 	mov	r1, #0
   1b264:	eb001904 	bl	2167c <USBRequestSetStatus>

				DWHCIDeviceDisableChannelInterrupt (pThis, nChannel);
   1b268:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b26c:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b270:	ebfffaf2 	bl	19e40 <DWHCIDeviceDisableChannelInterrupt>

				_DWHCITransferStageData (pStageData);
   1b274:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b278:	eb000749 	bl	1cfa4 <_DWHCITransferStageData>
				free (pStageData);
   1b27c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b280:	ebffee0a 	bl	16ab0 <free>
				pThis->m_pStageData[nChannel] = 0;
   1b284:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1b288:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
   1b28c:	e2822002 	add	r2, r2, #2
   1b290:	e3a01000 	mov	r1, #0
   1b294:	e7831102 	str	r1, [r3, r2, lsl #2]

				DWHCIDeviceFreeChannel (pThis, nChannel);
   1b298:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b29c:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b2a0:	eb000167 	bl	1b844 <DWHCIDeviceFreeChannel>

				USBRequestCallCompletionRoutine (pURB);
   1b2a4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b2a8:	eb001a24 	bl	21b40 <USBRequestCallCompletionRoutine>
				break;
   1b2ac:	ea000050 	b	1b3f4 <DWHCIDeviceChannelInterruptHandler+0x780>
			}

			if (!DWHCITransferStageDataIsPeriodic (pStageData))
   1b2b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b2b4:	eb0008df 	bl	1d638 <DWHCITransferStageDataIsPeriodic>
   1b2b8:	e1a03000 	mov	r3, r0
   1b2bc:	e3530000 	cmp	r3, #0
   1b2c0:	1a00000d 	bne	1b2fc <DWHCIDeviceChannelInterruptHandler+0x688>
			{
				DWHCITransferStageDataSetState (pStageData, StageStateStartSplit);
   1b2c4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b2c8:	e3a01001 	mov	r1, #1
   1b2cc:	eb00082f 	bl	1d390 <DWHCITransferStageDataSetState>
				DWHCITransferStageDataSetSplitComplete (pStageData, FALSE);
   1b2d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b2d4:	e3a01000 	mov	r1, #0
   1b2d8:	eb000804 	bl	1d2f0 <DWHCITransferStageDataSetSplitComplete>

				pFrameScheduler->StartSplit (pFrameScheduler);
   1b2dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b2e0:	e5933004 	ldr	r3, [r3, #4]
   1b2e4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b2e8:	e12fff33 	blx	r3

				DWHCIDeviceStartTransaction (pThis, pStageData);
   1b2ec:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b2f0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b2f4:	ebfffc82 	bl	1a504 <DWHCIDeviceStartTransaction>

				unsigned nInterval = USBEndpointGetInterval (USBRequestGetEndpoint (pURB));

				StartKernelTimer (MSEC2HZ (nInterval), DWHCIDeviceTimerHandler, pStageData, pThis);
			}
			break;
   1b2f8:	ea00003d 	b	1b3f4 <DWHCIDeviceChannelInterruptHandler+0x780>

				DWHCIDeviceStartTransaction (pThis, pStageData);
			}
			else
			{
				DWHCITransferStageDataSetState (pStageData, StageStatePeriodicDelay);
   1b2fc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b300:	e3a01003 	mov	r1, #3
   1b304:	eb000821 	bl	1d390 <DWHCITransferStageDataSetState>

				unsigned nInterval = USBEndpointGetInterval (USBRequestGetEndpoint (pURB));
   1b308:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b30c:	eb0018b2 	bl	215dc <USBRequestGetEndpoint>
   1b310:	e1a03000 	mov	r3, r0
   1b314:	e1a00003 	mov	r0, r3
   1b318:	eb001758 	bl	21080 <USBEndpointGetInterval>
   1b31c:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4

				StartKernelTimer (MSEC2HZ (nInterval), DWHCIDeviceTimerHandler, pStageData, pThis);
   1b320:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b324:	e3a02064 	mov	r2, #100	; 0x64
   1b328:	e0020392 	mul	r2, r2, r3
   1b32c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
   1b330:	e3413062 	movt	r3, #4194	; 0x1062
   1b334:	e0832392 	umull	r2, r3, r2, r3
   1b338:	e1a03323 	lsr	r3, r3, #6
   1b33c:	e1a00003 	mov	r0, r3
   1b340:	e30b15c8 	movw	r1, #46536	; 0xb5c8
   1b344:	e3401001 	movt	r1, #1
   1b348:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b34c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1b350:	ebffecb4 	bl	16628 <StartKernelTimer>
			}
			break;
   1b354:	ea000026 	b	1b3f4 <DWHCIDeviceChannelInterruptHandler+0x780>
		}

		DWHCIDeviceDisableChannelInterrupt (pThis, nChannel);
   1b358:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b35c:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b360:	ebfffab6 	bl	19e40 <DWHCIDeviceDisableChannelInterrupt>

		if (!DWHCITransferStageDataIsStatusStage (pStageData))
   1b364:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b368:	eb000a25 	bl	1dc04 <DWHCITransferStageDataIsStatusStage>
   1b36c:	e1a03000 	mov	r3, r0
   1b370:	e3530000 	cmp	r3, #0
   1b374:	1a000005 	bne	1b390 <DWHCIDeviceChannelInterruptHandler+0x71c>
		{
			USBRequestSetResultLen (pURB, DWHCITransferStageDataGetResultLen (pStageData));
   1b378:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b37c:	eb000bf2 	bl	1e34c <DWHCITransferStageDataGetResultLen>
   1b380:	e1a03000 	mov	r3, r0
   1b384:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b388:	e1a01003 	mov	r1, r3
   1b38c:	eb0018d8 	bl	216f4 <USBRequestSetResultLen>
		}
		USBRequestSetStatus (pURB, 1);
   1b390:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b394:	e3a01001 	mov	r1, #1
   1b398:	eb0018b7 	bl	2167c <USBRequestSetStatus>

		_DWHCITransferStageData (pStageData);
   1b39c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b3a0:	eb0006ff 	bl	1cfa4 <_DWHCITransferStageData>
		free (pStageData);
   1b3a4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b3a8:	ebffedc0 	bl	16ab0 <free>
		pThis->m_pStageData[nChannel] = 0;
   1b3ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1b3b0:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
   1b3b4:	e2822002 	add	r2, r2, #2
   1b3b8:	e3a01000 	mov	r1, #0
   1b3bc:	e7831102 	str	r1, [r3, r2, lsl #2]

		DWHCIDeviceFreeChannel (pThis, nChannel);
   1b3c0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b3c4:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b3c8:	eb00011d 	bl	1b844 <DWHCIDeviceFreeChannel>

		USBRequestCallCompletionRoutine (pURB);
   1b3cc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b3d0:	eb0019da 	bl	21b40 <USBRequestCallCompletionRoutine>
		break;
   1b3d4:	ea000006 	b	1b3f4 <DWHCIDeviceChannelInterruptHandler+0x780>

	default:
		assert (0);
   1b3d8:	e30e0478 	movw	r0, #58488	; 0xe478
   1b3dc:	e3400002 	movt	r0, #2
   1b3e0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b3e4:	e3401002 	movt	r1, #2
   1b3e8:	e3002492 	movw	r2, #1170	; 0x492
   1b3ec:	ebffed6f 	bl	169b0 <uspi_assertion_failed>
		break;
   1b3f0:	e1a00000 	nop			; (mov r0, r0)
   1b3f4:	e3a04001 	mov	r4, #1
   1b3f8:	e1a03005 	mov	r3, r5
   1b3fc:	e30a0c74 	movw	r0, #44148	; 0xac74
   1b400:	e3400001 	movt	r0, #1
   1b404:	e1a01003 	mov	r1, r3
   1b408:	ebffe915 	bl	15864 <__cyg_profile_func_exit>
   1b40c:	e3540001 	cmp	r4, #1
	}
}
   1b410:	e24bd010 	sub	sp, fp, #16
   1b414:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

0001b418 <DWHCIDeviceInterruptHandler>:

void DWHCIDeviceInterruptHandler (void *pParam)
{
   1b418:	e92d4810 	push	{r4, fp, lr}
   1b41c:	e28db008 	add	fp, sp, #8
   1b420:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   1b424:	e1a0400e 	mov	r4, lr
   1b428:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
   1b42c:	e1a03004 	mov	r3, r4
   1b430:	e30b0418 	movw	r0, #46104	; 0xb418
   1b434:	e3400001 	movt	r0, #1
   1b438:	e1a01003 	mov	r1, r3
   1b43c:	ebffe8b6 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIDevice *pThis = (TDWHCIDevice *) pParam;
   1b440:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b444:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	assert (pThis != 0);
   1b448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b44c:	e3530000 	cmp	r3, #0
   1b450:	1a000005 	bne	1b46c <DWHCIDeviceInterruptHandler+0x54>
   1b454:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1b458:	e3400002 	movt	r0, #2
   1b45c:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b460:	e3401002 	movt	r1, #2
   1b464:	e300249a 	movw	r2, #1178	; 0x49a
   1b468:	ebffed50 	bl	169b0 <uspi_assertion_failed>

	DataMemBarrier ();
   1b46c:	f57ff05f 	dmb	sy

	TDWHCIRegister IntStatus;
	DWHCIRegister (&IntStatus, DWHCI_CORE_INT_STAT);
   1b470:	e24b3024 	sub	r3, fp, #36	; 0x24
   1b474:	e1a00003 	mov	r0, r3
   1b478:	e3a01014 	mov	r1, #20
   1b47c:	e3431f98 	movt	r1, #16280	; 0x3f98
   1b480:	eb000304 	bl	1c098 <DWHCIRegister>
	DWHCIRegisterRead (&IntStatus);
   1b484:	e24b3024 	sub	r3, fp, #36	; 0x24
   1b488:	e1a00003 	mov	r0, r3
   1b48c:	eb000364 	bl	1c224 <DWHCIRegisterRead>

	if (DWHCIRegisterGet (&IntStatus) & DWHCI_CORE_INT_STAT_HC_INTR)
   1b490:	e24b3024 	sub	r3, fp, #36	; 0x24
   1b494:	e1a00003 	mov	r0, r3
   1b498:	eb0003b1 	bl	1c364 <DWHCIRegisterGet>
   1b49c:	e1a03000 	mov	r3, r0
   1b4a0:	e2033402 	and	r3, r3, #33554432	; 0x2000000
   1b4a4:	e3530000 	cmp	r3, #0
   1b4a8:	0a000038 	beq	1b590 <DWHCIDeviceInterruptHandler+0x178>
	{
		TDWHCIRegister AllChanInterrupt;
		DWHCIRegister (&AllChanInterrupt, DWHCI_HOST_ALLCHAN_INT);
   1b4ac:	e24b3030 	sub	r3, fp, #48	; 0x30
   1b4b0:	e1a00003 	mov	r0, r3
   1b4b4:	e3001414 	movw	r1, #1044	; 0x414
   1b4b8:	e3431f98 	movt	r1, #16280	; 0x3f98
   1b4bc:	eb0002f5 	bl	1c098 <DWHCIRegister>
		DWHCIRegisterRead (&AllChanInterrupt);
   1b4c0:	e24b3030 	sub	r3, fp, #48	; 0x30
   1b4c4:	e1a00003 	mov	r0, r3
   1b4c8:	eb000355 	bl	1c224 <DWHCIRegisterRead>
		DWHCIRegisterWrite (&AllChanInterrupt);
   1b4cc:	e24b3030 	sub	r3, fp, #48	; 0x30
   1b4d0:	e1a00003 	mov	r0, r3
   1b4d4:	eb000378 	bl	1c2bc <DWHCIRegisterWrite>
		
		unsigned nChannelMask = 1;
   1b4d8:	e3a03001 	mov	r3, #1
   1b4dc:	e50b3010 	str	r3, [fp, #-16]
		for (unsigned nChannel = 0; nChannel < pThis->m_nChannels; nChannel++)
   1b4e0:	e3a03000 	mov	r3, #0
   1b4e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1b4e8:	ea000020 	b	1b570 <DWHCIDeviceInterruptHandler+0x158>
		{
			if (DWHCIRegisterGet (&AllChanInterrupt) & nChannelMask)
   1b4ec:	e24b3030 	sub	r3, fp, #48	; 0x30
   1b4f0:	e1a00003 	mov	r0, r3
   1b4f4:	eb00039a 	bl	1c364 <DWHCIRegisterGet>
   1b4f8:	e1a02000 	mov	r2, r0
   1b4fc:	e51b3010 	ldr	r3, [fp, #-16]
   1b500:	e0033002 	and	r3, r3, r2
   1b504:	e3530000 	cmp	r3, #0
   1b508:	0a000012 	beq	1b558 <DWHCIDeviceInterruptHandler+0x140>
			{
				TDWHCIRegister ChanInterruptMask;
				DWHCIRegister2 (&ChanInterruptMask, DWHCI_HOST_CHAN_INT_MASK(nChannel), 0);
   1b50c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1b510:	e1a02283 	lsl	r2, r3, #5
   1b514:	e300350c 	movw	r3, #1292	; 0x50c
   1b518:	e3433f98 	movt	r3, #16280	; 0x3f98
   1b51c:	e0823003 	add	r3, r2, r3
   1b520:	e24b203c 	sub	r2, fp, #60	; 0x3c
   1b524:	e1a00002 	mov	r0, r2
   1b528:	e1a01003 	mov	r1, r3
   1b52c:	e3a02000 	mov	r2, #0
   1b530:	eb0002f9 	bl	1c11c <DWHCIRegister2>
				DWHCIRegisterWrite (&ChanInterruptMask);
   1b534:	e24b303c 	sub	r3, fp, #60	; 0x3c
   1b538:	e1a00003 	mov	r0, r3
   1b53c:	eb00035e 	bl	1c2bc <DWHCIRegisterWrite>
				
				DWHCIDeviceChannelInterruptHandler (pThis, nChannel);
   1b540:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b544:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1b548:	ebfffdc9 	bl	1ac74 <DWHCIDeviceChannelInterruptHandler>

				_DWHCIRegister (&ChanInterruptMask);
   1b54c:	e24b303c 	sub	r3, fp, #60	; 0x3c
   1b550:	e1a00003 	mov	r0, r3
   1b554:	eb000315 	bl	1c1b0 <_DWHCIRegister>
			}
			
			nChannelMask <<= 1;
   1b558:	e51b3010 	ldr	r3, [fp, #-16]
   1b55c:	e1a03083 	lsl	r3, r3, #1
   1b560:	e50b3010 	str	r3, [fp, #-16]
		DWHCIRegister (&AllChanInterrupt, DWHCI_HOST_ALLCHAN_INT);
		DWHCIRegisterRead (&AllChanInterrupt);
		DWHCIRegisterWrite (&AllChanInterrupt);
		
		unsigned nChannelMask = 1;
		for (unsigned nChannel = 0; nChannel < pThis->m_nChannels; nChannel++)
   1b564:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1b568:	e2833001 	add	r3, r3, #1
   1b56c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1b570:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b574:	e5932000 	ldr	r2, [r3]
   1b578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1b57c:	e1520003 	cmp	r2, r3
   1b580:	8affffd9 	bhi	1b4ec <DWHCIDeviceInterruptHandler+0xd4>
			}
			
			nChannelMask <<= 1;
		}

		_DWHCIRegister (&AllChanInterrupt);
   1b584:	e24b3030 	sub	r3, fp, #48	; 0x30
   1b588:	e1a00003 	mov	r0, r3
   1b58c:	eb000307 	bl	1c1b0 <_DWHCIRegister>
		HostPort.Write ();
		
		IntStatus.Or (DWHCI_CORE_INT_STAT_PORT_INTR);
	}
#endif
	DWHCIRegisterWrite (&IntStatus);
   1b590:	e24b3024 	sub	r3, fp, #36	; 0x24
   1b594:	e1a00003 	mov	r0, r3
   1b598:	eb000347 	bl	1c2bc <DWHCIRegisterWrite>

	DataMemBarrier ();
   1b59c:	f57ff05f 	dmb	sy
	
	_DWHCIRegister (&IntStatus);
   1b5a0:	e24b3024 	sub	r3, fp, #36	; 0x24
   1b5a4:	e1a00003 	mov	r0, r3
   1b5a8:	eb000300 	bl	1c1b0 <_DWHCIRegister>
   1b5ac:	e1a03004 	mov	r3, r4
   1b5b0:	e30b0418 	movw	r0, #46104	; 0xb418
   1b5b4:	e3400001 	movt	r0, #1
   1b5b8:	e1a01003 	mov	r1, r3
   1b5bc:	ebffe8a8 	bl	15864 <__cyg_profile_func_exit>
}
   1b5c0:	e24bd008 	sub	sp, fp, #8
   1b5c4:	e8bd8810 	pop	{r4, fp, pc}

0001b5c8 <DWHCIDeviceTimerHandler>:

void DWHCIDeviceTimerHandler (unsigned hTimer, void *pParam, void *pContext)
{
   1b5c8:	e92d4810 	push	{r4, fp, lr}
   1b5cc:	e28db008 	add	fp, sp, #8
   1b5d0:	e24dd024 	sub	sp, sp, #36	; 0x24
   1b5d4:	e1a0400e 	mov	r4, lr
   1b5d8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1b5dc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   1b5e0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   1b5e4:	e1a03004 	mov	r3, r4
   1b5e8:	e30b05c8 	movw	r0, #46536	; 0xb5c8
   1b5ec:	e3400001 	movt	r0, #1
   1b5f0:	e1a01003 	mov	r1, r3
   1b5f4:	ebffe848 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIDevice *pThis = (TDWHCIDevice *) pContext;
   1b5f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b5fc:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   1b600:	e51b3010 	ldr	r3, [fp, #-16]
   1b604:	e3530000 	cmp	r3, #0
   1b608:	1a000005 	bne	1b624 <DWHCIDeviceTimerHandler+0x5c>
   1b60c:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1b610:	e3400002 	movt	r0, #2
   1b614:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b618:	e3401002 	movt	r1, #2
   1b61c:	e30024d7 	movw	r2, #1239	; 0x4d7
   1b620:	ebffece2 	bl	169b0 <uspi_assertion_failed>
	
	TDWHCITransferStageData *pStageData = (TDWHCITransferStageData *) pParam;
   1b624:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b628:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	assert (pStageData != 0);
   1b62c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1b630:	e3530000 	cmp	r3, #0
   1b634:	1a000005 	bne	1b650 <DWHCIDeviceTimerHandler+0x88>
   1b638:	e30e0374 	movw	r0, #58228	; 0xe374
   1b63c:	e3400002 	movt	r0, #2
   1b640:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b644:	e3401002 	movt	r1, #2
   1b648:	e30024da 	movw	r2, #1242	; 0x4da
   1b64c:	ebffecd7 	bl	169b0 <uspi_assertion_failed>
	
	DataMemBarrier ();
   1b650:	f57ff05f 	dmb	sy

	assert (pStageData != 0);
   1b654:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1b658:	e3530000 	cmp	r3, #0
   1b65c:	1a000005 	bne	1b678 <DWHCIDeviceTimerHandler+0xb0>
   1b660:	e30e0374 	movw	r0, #58228	; 0xe374
   1b664:	e3400002 	movt	r0, #2
   1b668:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b66c:	e3401002 	movt	r1, #2
   1b670:	e30024de 	movw	r2, #1246	; 0x4de
   1b674:	ebffeccd 	bl	169b0 <uspi_assertion_failed>
	assert (DWHCITransferStageDataGetState (pStageData) == StageStatePeriodicDelay);
   1b678:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1b67c:	eb000761 	bl	1d408 <DWHCITransferStageDataGetState>
   1b680:	e1a03000 	mov	r3, r0
   1b684:	e3530003 	cmp	r3, #3
   1b688:	0a000005 	beq	1b6a4 <DWHCIDeviceTimerHandler+0xdc>
   1b68c:	e30e04a0 	movw	r0, #58528	; 0xe4a0
   1b690:	e3400002 	movt	r0, #2
   1b694:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b698:	e3401002 	movt	r1, #2
   1b69c:	e30024df 	movw	r2, #1247	; 0x4df
   1b6a0:	ebffecc2 	bl	169b0 <uspi_assertion_failed>

	if (DWHCITransferStageDataIsSplit (pStageData))
   1b6a4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1b6a8:	eb0009d8 	bl	1de10 <DWHCITransferStageDataIsSplit>
   1b6ac:	e1a03000 	mov	r3, r0
   1b6b0:	e3530000 	cmp	r3, #0
   1b6b4:	0a000016 	beq	1b714 <DWHCIDeviceTimerHandler+0x14c>
	{
		DWHCITransferStageDataSetState (pStageData, StageStateStartSplit);
   1b6b8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1b6bc:	e3a01001 	mov	r1, #1
   1b6c0:	eb000732 	bl	1d390 <DWHCITransferStageDataSetState>
		
		DWHCITransferStageDataSetSplitComplete (pStageData, FALSE);
   1b6c4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1b6c8:	e3a01000 	mov	r1, #0
   1b6cc:	eb000707 	bl	1d2f0 <DWHCITransferStageDataSetSplitComplete>
		TDWHCIFrameScheduler *pFrameScheduler =
   1b6d0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1b6d4:	eb000b6b 	bl	1e488 <DWHCITransferStageDataGetFrameScheduler>
   1b6d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
			DWHCITransferStageDataGetFrameScheduler (pStageData);
		assert (pFrameScheduler != 0);
   1b6dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b6e0:	e3530000 	cmp	r3, #0
   1b6e4:	1a000005 	bne	1b700 <DWHCIDeviceTimerHandler+0x138>
   1b6e8:	e30e03a8 	movw	r0, #58280	; 0xe3a8
   1b6ec:	e3400002 	movt	r0, #2
   1b6f0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b6f4:	e3401002 	movt	r1, #2
   1b6f8:	e30024e8 	movw	r2, #1256	; 0x4e8
   1b6fc:	ebffecab 	bl	169b0 <uspi_assertion_failed>
		pFrameScheduler->StartSplit (pFrameScheduler);
   1b700:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b704:	e5933004 	ldr	r3, [r3, #4]
   1b708:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b70c:	e12fff33 	blx	r3
   1b710:	ea000002 	b	1b720 <DWHCIDeviceTimerHandler+0x158>
	}
	else
	{
		DWHCITransferStageDataSetState (pStageData, StageStateNoSplitTransfer);
   1b714:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1b718:	e3a01000 	mov	r1, #0
   1b71c:	eb00071b 	bl	1d390 <DWHCITransferStageDataSetState>
	}

	DWHCIDeviceStartTransaction (pThis, pStageData);
   1b720:	e51b0010 	ldr	r0, [fp, #-16]
   1b724:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1b728:	ebfffb75 	bl	1a504 <DWHCIDeviceStartTransaction>

	DataMemBarrier ();
   1b72c:	f57ff05f 	dmb	sy
   1b730:	e1a03004 	mov	r3, r4
   1b734:	e30b05c8 	movw	r0, #46536	; 0xb5c8
   1b738:	e3400001 	movt	r0, #1
   1b73c:	e1a01003 	mov	r1, r3
   1b740:	ebffe847 	bl	15864 <__cyg_profile_func_exit>
}
   1b744:	e24bd008 	sub	sp, fp, #8
   1b748:	e8bd8810 	pop	{r4, fp, pc}

0001b74c <DWHCIDeviceAllocateChannel>:

unsigned DWHCIDeviceAllocateChannel (TDWHCIDevice *pThis)
{
   1b74c:	e92d4830 	push	{r4, r5, fp, lr}
   1b750:	e28db00c 	add	fp, sp, #12
   1b754:	e24dd010 	sub	sp, sp, #16
   1b758:	e1a0500e 	mov	r5, lr
   1b75c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1b760:	e1a03005 	mov	r3, r5
   1b764:	e30b074c 	movw	r0, #46924	; 0xb74c
   1b768:	e3400001 	movt	r0, #1
   1b76c:	e1a01003 	mov	r1, r3
   1b770:	ebffe7e9 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1b774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b778:	e3530000 	cmp	r3, #0
   1b77c:	1a000005 	bne	1b798 <DWHCIDeviceAllocateChannel+0x4c>
   1b780:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1b784:	e3400002 	movt	r0, #2
   1b788:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b78c:	e3401002 	movt	r1, #2
   1b790:	e30024f7 	movw	r2, #1271	; 0x4f7
   1b794:	ebffec85 	bl	169b0 <uspi_assertion_failed>

	uspi_EnterCritical ();
   1b798:	eb00450f 	bl	2cbdc <uspi_EnterCritical>

	unsigned nChannelMask = 1;
   1b79c:	e3a03001 	mov	r3, #1
   1b7a0:	e50b3010 	str	r3, [fp, #-16]
	for (unsigned nChannel = 0; nChannel < pThis->m_nChannels; nChannel++)
   1b7a4:	e3a03000 	mov	r3, #0
   1b7a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1b7ac:	ea000014 	b	1b804 <DWHCIDeviceAllocateChannel+0xb8>
	{
		if (!(pThis->m_nChannelAllocated & nChannelMask))
   1b7b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b7b4:	e5932004 	ldr	r2, [r3, #4]
   1b7b8:	e51b3010 	ldr	r3, [fp, #-16]
   1b7bc:	e0033002 	and	r3, r3, r2
   1b7c0:	e3530000 	cmp	r3, #0
   1b7c4:	1a000008 	bne	1b7ec <DWHCIDeviceAllocateChannel+0xa0>
		{
			pThis->m_nChannelAllocated |= nChannelMask;
   1b7c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b7cc:	e5932004 	ldr	r2, [r3, #4]
   1b7d0:	e51b3010 	ldr	r3, [fp, #-16]
   1b7d4:	e1822003 	orr	r2, r2, r3
   1b7d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b7dc:	e5832004 	str	r2, [r3, #4]

			uspi_LeaveCritical ();
   1b7e0:	eb004524 	bl	2cc78 <uspi_LeaveCritical>
			
			return nChannel;
   1b7e4:	e51b4014 	ldr	r4, [fp, #-20]	; 0xffffffec
   1b7e8:	ea00000c 	b	1b820 <DWHCIDeviceAllocateChannel+0xd4>
		}
		
		nChannelMask <<= 1;
   1b7ec:	e51b3010 	ldr	r3, [fp, #-16]
   1b7f0:	e1a03083 	lsl	r3, r3, #1
   1b7f4:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);

	uspi_EnterCritical ();

	unsigned nChannelMask = 1;
	for (unsigned nChannel = 0; nChannel < pThis->m_nChannels; nChannel++)
   1b7f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1b7fc:	e2833001 	add	r3, r3, #1
   1b800:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1b804:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b808:	e5932000 	ldr	r2, [r3]
   1b80c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1b810:	e1520003 	cmp	r2, r3
   1b814:	8affffe5 	bhi	1b7b0 <DWHCIDeviceAllocateChannel+0x64>
		}
		
		nChannelMask <<= 1;
	}
	
	uspi_LeaveCritical ();
   1b818:	eb004516 	bl	2cc78 <uspi_LeaveCritical>
	
	return DWHCI_MAX_CHANNELS;
   1b81c:	e3a04010 	mov	r4, #16
   1b820:	e1a03005 	mov	r3, r5
   1b824:	e30b074c 	movw	r0, #46924	; 0xb74c
   1b828:	e3400001 	movt	r0, #1
   1b82c:	e1a01003 	mov	r1, r3
   1b830:	ebffe80b 	bl	15864 <__cyg_profile_func_exit>
   1b834:	e1a03004 	mov	r3, r4
}
   1b838:	e1a00003 	mov	r0, r3
   1b83c:	e24bd00c 	sub	sp, fp, #12
   1b840:	e8bd8830 	pop	{r4, r5, fp, pc}

0001b844 <DWHCIDeviceFreeChannel>:

void DWHCIDeviceFreeChannel (TDWHCIDevice *pThis, unsigned nChannel)
{
   1b844:	e92d4810 	push	{r4, fp, lr}
   1b848:	e28db008 	add	fp, sp, #8
   1b84c:	e24dd014 	sub	sp, sp, #20
   1b850:	e1a0400e 	mov	r4, lr
   1b854:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1b858:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1b85c:	e1a03004 	mov	r3, r4
   1b860:	e30b0844 	movw	r0, #47172	; 0xb844
   1b864:	e3400001 	movt	r0, #1
   1b868:	e1a01003 	mov	r1, r3
   1b86c:	ebffe7aa 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1b870:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b874:	e3530000 	cmp	r3, #0
   1b878:	1a000005 	bne	1b894 <DWHCIDeviceFreeChannel+0x50>
   1b87c:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1b880:	e3400002 	movt	r0, #2
   1b884:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b888:	e3401002 	movt	r1, #2
   1b88c:	e3002511 	movw	r2, #1297	; 0x511
   1b890:	ebffec46 	bl	169b0 <uspi_assertion_failed>

	assert (nChannel < pThis->m_nChannels);
   1b894:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b898:	e5932000 	ldr	r2, [r3]
   1b89c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b8a0:	e1520003 	cmp	r2, r3
   1b8a4:	8a000005 	bhi	1b8c0 <DWHCIDeviceFreeChannel+0x7c>
   1b8a8:	e30e03c0 	movw	r0, #58304	; 0xe3c0
   1b8ac:	e3400002 	movt	r0, #2
   1b8b0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b8b4:	e3401002 	movt	r1, #2
   1b8b8:	e3002513 	movw	r2, #1299	; 0x513
   1b8bc:	ebffec3b 	bl	169b0 <uspi_assertion_failed>
	unsigned nChannelMask = 1 << nChannel; 
   1b8c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b8c4:	e3a02001 	mov	r2, #1
   1b8c8:	e1a03312 	lsl	r3, r2, r3
   1b8cc:	e50b3010 	str	r3, [fp, #-16]
	
	uspi_EnterCritical ();
   1b8d0:	eb0044c1 	bl	2cbdc <uspi_EnterCritical>
	
	assert (pThis->m_nChannelAllocated & nChannelMask);
   1b8d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b8d8:	e5932004 	ldr	r2, [r3, #4]
   1b8dc:	e51b3010 	ldr	r3, [fp, #-16]
   1b8e0:	e0033002 	and	r3, r3, r2
   1b8e4:	e3530000 	cmp	r3, #0
   1b8e8:	1a000005 	bne	1b904 <DWHCIDeviceFreeChannel+0xc0>
   1b8ec:	e30e04e8 	movw	r0, #58600	; 0xe4e8
   1b8f0:	e3400002 	movt	r0, #2
   1b8f4:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b8f8:	e3401002 	movt	r1, #2
   1b8fc:	e3002518 	movw	r2, #1304	; 0x518
   1b900:	ebffec2a 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nChannelAllocated &= ~nChannelMask;
   1b904:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b908:	e5932004 	ldr	r2, [r3, #4]
   1b90c:	e51b3010 	ldr	r3, [fp, #-16]
   1b910:	e1e03003 	mvn	r3, r3
   1b914:	e0022003 	and	r2, r2, r3
   1b918:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b91c:	e5832004 	str	r2, [r3, #4]
	
	uspi_LeaveCritical ();
   1b920:	eb0044d4 	bl	2cc78 <uspi_LeaveCritical>
   1b924:	e1a03004 	mov	r3, r4
   1b928:	e30b0844 	movw	r0, #47172	; 0xb844
   1b92c:	e3400001 	movt	r0, #1
   1b930:	e1a01003 	mov	r1, r3
   1b934:	ebffe7ca 	bl	15864 <__cyg_profile_func_exit>
}
   1b938:	e24bd008 	sub	sp, fp, #8
   1b93c:	e8bd8810 	pop	{r4, fp, pc}

0001b940 <DWHCIDeviceWaitForBit>:

boolean DWHCIDeviceWaitForBit (TDWHCIDevice *pThis, TDWHCIRegister *pRegister, u32 nMask, boolean bWaitUntilSet, unsigned nMsTimeout)
{
   1b940:	e92d4830 	push	{r4, r5, fp, lr}
   1b944:	e28db00c 	add	fp, sp, #12
   1b948:	e24dd010 	sub	sp, sp, #16
   1b94c:	e1a0500e 	mov	r5, lr
   1b950:	e50b0010 	str	r0, [fp, #-16]
   1b954:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1b958:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   1b95c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   1b960:	e1a03005 	mov	r3, r5
   1b964:	e30b0940 	movw	r0, #47424	; 0xb940
   1b968:	e3400001 	movt	r0, #1
   1b96c:	e1a01003 	mov	r1, r3
   1b970:	ebffe769 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1b974:	e51b3010 	ldr	r3, [fp, #-16]
   1b978:	e3530000 	cmp	r3, #0
   1b97c:	1a000005 	bne	1b998 <DWHCIDeviceWaitForBit+0x58>
   1b980:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1b984:	e3400002 	movt	r0, #2
   1b988:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b98c:	e3401002 	movt	r1, #2
   1b990:	e3a02e52 	mov	r2, #1312	; 0x520
   1b994:	ebffec05 	bl	169b0 <uspi_assertion_failed>

	assert (pRegister != 0);
   1b998:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1b99c:	e3530000 	cmp	r3, #0
   1b9a0:	1a000005 	bne	1b9bc <DWHCIDeviceWaitForBit+0x7c>
   1b9a4:	e30e0514 	movw	r0, #58644	; 0xe514
   1b9a8:	e3400002 	movt	r0, #2
   1b9ac:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b9b0:	e3401002 	movt	r1, #2
   1b9b4:	e3002522 	movw	r2, #1314	; 0x522
   1b9b8:	ebffebfc 	bl	169b0 <uspi_assertion_failed>
	assert (nMask != 0);
   1b9bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b9c0:	e3530000 	cmp	r3, #0
   1b9c4:	1a000005 	bne	1b9e0 <DWHCIDeviceWaitForBit+0xa0>
   1b9c8:	e30e0524 	movw	r0, #58660	; 0xe524
   1b9cc:	e3400002 	movt	r0, #2
   1b9d0:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b9d4:	e3401002 	movt	r1, #2
   1b9d8:	e3002523 	movw	r2, #1315	; 0x523
   1b9dc:	ebffebf3 	bl	169b0 <uspi_assertion_failed>
	assert (nMsTimeout > 0);
   1b9e0:	e59b3004 	ldr	r3, [fp, #4]
   1b9e4:	e3530000 	cmp	r3, #0
   1b9e8:	1a000005 	bne	1ba04 <DWHCIDeviceWaitForBit+0xc4>
   1b9ec:	e30e0530 	movw	r0, #58672	; 0xe530
   1b9f0:	e3400002 	movt	r0, #2
   1b9f4:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1b9f8:	e3401002 	movt	r1, #2
   1b9fc:	e3002524 	movw	r2, #1316	; 0x524
   1ba00:	ebffebea 	bl	169b0 <uspi_assertion_failed>

	while ((DWHCIRegisterRead (pRegister) & nMask) ? !bWaitUntilSet : bWaitUntilSet)
   1ba04:	ea000009 	b	1ba30 <DWHCIDeviceWaitForBit+0xf0>
	{
		MsDelay (1);
   1ba08:	e3a00001 	mov	r0, #1
   1ba0c:	ebffeadb 	bl	16580 <MsDelay>

		if (--nMsTimeout == 0)
   1ba10:	e59b3004 	ldr	r3, [fp, #4]
   1ba14:	e2433001 	sub	r3, r3, #1
   1ba18:	e58b3004 	str	r3, [fp, #4]
   1ba1c:	e59b3004 	ldr	r3, [fp, #4]
   1ba20:	e3530000 	cmp	r3, #0
   1ba24:	1a000001 	bne	1ba30 <DWHCIDeviceWaitForBit+0xf0>
		{
			//LogWrite (FromDWHCI, LOG_WARNING, "Timeout");
#ifndef NDEBUG
			//DWHCIRegisterDump (pRegister);
#endif
			return FALSE;
   1ba28:	e3a04000 	mov	r4, #0
   1ba2c:	ea000014 	b	1ba84 <DWHCIDeviceWaitForBit+0x144>

	assert (pRegister != 0);
	assert (nMask != 0);
	assert (nMsTimeout > 0);

	while ((DWHCIRegisterRead (pRegister) & nMask) ? !bWaitUntilSet : bWaitUntilSet)
   1ba30:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1ba34:	eb0001fa 	bl	1c224 <DWHCIRegisterRead>
   1ba38:	e1a02000 	mov	r2, r0
   1ba3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ba40:	e0033002 	and	r3, r3, r2
   1ba44:	e3530000 	cmp	r3, #0
   1ba48:	0a000005 	beq	1ba64 <DWHCIDeviceWaitForBit+0x124>
   1ba4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ba50:	e3530000 	cmp	r3, #0
   1ba54:	03a03001 	moveq	r3, #1
   1ba58:	13a03000 	movne	r3, #0
   1ba5c:	e6ef3073 	uxtb	r3, r3
   1ba60:	ea000004 	b	1ba78 <DWHCIDeviceWaitForBit+0x138>
   1ba64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ba68:	e3530000 	cmp	r3, #0
   1ba6c:	13a03001 	movne	r3, #1
   1ba70:	03a03000 	moveq	r3, #0
   1ba74:	e6ef3073 	uxtb	r3, r3
   1ba78:	e3530000 	cmp	r3, #0
   1ba7c:	1affffe1 	bne	1ba08 <DWHCIDeviceWaitForBit+0xc8>
#endif
			return FALSE;
		}
	}
	
	return TRUE;
   1ba80:	e3a04001 	mov	r4, #1
   1ba84:	e1a03005 	mov	r3, r5
   1ba88:	e30b0940 	movw	r0, #47424	; 0xb940
   1ba8c:	e3400001 	movt	r0, #1
   1ba90:	e1a01003 	mov	r1, r3
   1ba94:	ebffe772 	bl	15864 <__cyg_profile_func_exit>
   1ba98:	e1a03004 	mov	r3, r4
}
   1ba9c:	e1a00003 	mov	r0, r3
   1baa0:	e24bd00c 	sub	sp, fp, #12
   1baa4:	e8bd8830 	pop	{r4, r5, fp, pc}

0001baa8 <DWHCIDeviceGetPortSpeed>:

TUSBSpeed DWHCIDeviceGetPortSpeed (TDWHCIDevice *pThis)
{
   1baa8:	e92d4830 	push	{r4, r5, fp, lr}
   1baac:	e28db00c 	add	fp, sp, #12
   1bab0:	e24dd018 	sub	sp, sp, #24
   1bab4:	e1a0500e 	mov	r5, lr
   1bab8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1babc:	e1a03005 	mov	r3, r5
   1bac0:	e30b0aa8 	movw	r0, #47784	; 0xbaa8
   1bac4:	e3400001 	movt	r0, #1
   1bac8:	e1a01003 	mov	r1, r3
   1bacc:	ebffe712 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1bad0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bad4:	e3530000 	cmp	r3, #0
   1bad8:	1a000005 	bne	1baf4 <DWHCIDeviceGetPortSpeed+0x4c>
   1badc:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1bae0:	e3400002 	movt	r0, #2
   1bae4:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1bae8:	e3401002 	movt	r1, #2
   1baec:	e3002539 	movw	r2, #1337	; 0x539
   1baf0:	ebffebae 	bl	169b0 <uspi_assertion_failed>

	TUSBSpeed Result = USBSpeedUnknown;
   1baf4:	e3a03003 	mov	r3, #3
   1baf8:	e54b300d 	strb	r3, [fp, #-13]
	
	TDWHCIRegister HostPort;
	DWHCIRegister (&HostPort, DWHCI_HOST_PORT);
   1bafc:	e24b301c 	sub	r3, fp, #28
   1bb00:	e1a00003 	mov	r0, r3
   1bb04:	e3a01d11 	mov	r1, #1088	; 0x440
   1bb08:	e3431f98 	movt	r1, #16280	; 0x3f98
   1bb0c:	eb000161 	bl	1c098 <DWHCIRegister>

	switch (DWHCI_HOST_PORT_SPEED (DWHCIRegisterRead (&HostPort)))
   1bb10:	e24b301c 	sub	r3, fp, #28
   1bb14:	e1a00003 	mov	r0, r3
   1bb18:	eb0001c1 	bl	1c224 <DWHCIRegisterRead>
   1bb1c:	e1a03000 	mov	r3, r0
   1bb20:	e1a038a3 	lsr	r3, r3, #17
   1bb24:	e2033003 	and	r3, r3, #3
   1bb28:	e3530001 	cmp	r3, #1
   1bb2c:	0a000007 	beq	1bb50 <DWHCIDeviceGetPortSpeed+0xa8>
   1bb30:	e3530001 	cmp	r3, #1
   1bb34:	3a000002 	bcc	1bb44 <DWHCIDeviceGetPortSpeed+0x9c>
   1bb38:	e3530002 	cmp	r3, #2
   1bb3c:	0a000006 	beq	1bb5c <DWHCIDeviceGetPortSpeed+0xb4>
	case DWHCI_HOST_PORT_SPEED_LOW:
		Result = USBSpeedLow;
		break;

	default:
		break;
   1bb40:	ea000008 	b	1bb68 <DWHCIDeviceGetPortSpeed+0xc0>
	DWHCIRegister (&HostPort, DWHCI_HOST_PORT);

	switch (DWHCI_HOST_PORT_SPEED (DWHCIRegisterRead (&HostPort)))
	{
	case DWHCI_HOST_PORT_SPEED_HIGH:
		Result = USBSpeedHigh;
   1bb44:	e3a03002 	mov	r3, #2
   1bb48:	e54b300d 	strb	r3, [fp, #-13]
		break;
   1bb4c:	ea000005 	b	1bb68 <DWHCIDeviceGetPortSpeed+0xc0>

	case DWHCI_HOST_PORT_SPEED_FULL:
		Result = USBSpeedFull;
   1bb50:	e3a03001 	mov	r3, #1
   1bb54:	e54b300d 	strb	r3, [fp, #-13]
		break;
   1bb58:	ea000002 	b	1bb68 <DWHCIDeviceGetPortSpeed+0xc0>

	case DWHCI_HOST_PORT_SPEED_LOW:
		Result = USBSpeedLow;
   1bb5c:	e3a03000 	mov	r3, #0
   1bb60:	e54b300d 	strb	r3, [fp, #-13]
		break;
   1bb64:	e1a00000 	nop			; (mov r0, r0)

	default:
		break;
	}

	_DWHCIRegister (&HostPort);
   1bb68:	e24b301c 	sub	r3, fp, #28
   1bb6c:	e1a00003 	mov	r0, r3
   1bb70:	eb00018e 	bl	1c1b0 <_DWHCIRegister>

	return Result;
   1bb74:	e55b400d 	ldrb	r4, [fp, #-13]
   1bb78:	e1a03005 	mov	r3, r5
   1bb7c:	e30b0aa8 	movw	r0, #47784	; 0xbaa8
   1bb80:	e3400001 	movt	r0, #1
   1bb84:	e1a01003 	mov	r1, r3
   1bb88:	ebffe735 	bl	15864 <__cyg_profile_func_exit>
   1bb8c:	e1a03004 	mov	r3, r4
}
   1bb90:	e1a00003 	mov	r0, r3
   1bb94:	e24bd00c 	sub	sp, fp, #12
   1bb98:	e8bd8830 	pop	{r4, r5, fp, pc}

0001bb9c <DWHCIDeviceOvercurrentDetected>:

boolean DWHCIDeviceOvercurrentDetected (TDWHCIDevice *pThis)
{
   1bb9c:	e92d4830 	push	{r4, r5, fp, lr}
   1bba0:	e28db00c 	add	fp, sp, #12
   1bba4:	e24dd018 	sub	sp, sp, #24
   1bba8:	e1a0500e 	mov	r5, lr
   1bbac:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1bbb0:	e1a03005 	mov	r3, r5
   1bbb4:	e30b0b9c 	movw	r0, #48028	; 0xbb9c
   1bbb8:	e3400001 	movt	r0, #1
   1bbbc:	e1a01003 	mov	r1, r3
   1bbc0:	ebffe6d5 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1bbc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bbc8:	e3530000 	cmp	r3, #0
   1bbcc:	1a000005 	bne	1bbe8 <DWHCIDeviceOvercurrentDetected+0x4c>
   1bbd0:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1bbd4:	e3400002 	movt	r0, #2
   1bbd8:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1bbdc:	e3401002 	movt	r1, #2
   1bbe0:	e3002559 	movw	r2, #1369	; 0x559
   1bbe4:	ebffeb71 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister HostPort;
	DWHCIRegister (&HostPort, DWHCI_HOST_PORT);
   1bbe8:	e24b3018 	sub	r3, fp, #24
   1bbec:	e1a00003 	mov	r0, r3
   1bbf0:	e3a01d11 	mov	r1, #1088	; 0x440
   1bbf4:	e3431f98 	movt	r1, #16280	; 0x3f98
   1bbf8:	eb000126 	bl	1c098 <DWHCIRegister>

	if (DWHCIRegisterRead (&HostPort) & DWHCI_HOST_PORT_OVERCURRENT)
   1bbfc:	e24b3018 	sub	r3, fp, #24
   1bc00:	e1a00003 	mov	r0, r3
   1bc04:	eb000186 	bl	1c224 <DWHCIRegisterRead>
   1bc08:	e1a03000 	mov	r3, r0
   1bc0c:	e2033010 	and	r3, r3, #16
   1bc10:	e3530000 	cmp	r3, #0
   1bc14:	0a000004 	beq	1bc2c <DWHCIDeviceOvercurrentDetected+0x90>
	{
		_DWHCIRegister (&HostPort);
   1bc18:	e24b3018 	sub	r3, fp, #24
   1bc1c:	e1a00003 	mov	r0, r3
   1bc20:	eb000162 	bl	1c1b0 <_DWHCIRegister>

		return TRUE;
   1bc24:	e3a04001 	mov	r4, #1
   1bc28:	ea000003 	b	1bc3c <DWHCIDeviceOvercurrentDetected+0xa0>
	}

	_DWHCIRegister (&HostPort);
   1bc2c:	e24b3018 	sub	r3, fp, #24
   1bc30:	e1a00003 	mov	r0, r3
   1bc34:	eb00015d 	bl	1c1b0 <_DWHCIRegister>

	return FALSE;
   1bc38:	e3a04000 	mov	r4, #0
   1bc3c:	e1a03005 	mov	r3, r5
   1bc40:	e30b0b9c 	movw	r0, #48028	; 0xbb9c
   1bc44:	e3400001 	movt	r0, #1
   1bc48:	e1a01003 	mov	r1, r3
   1bc4c:	ebffe704 	bl	15864 <__cyg_profile_func_exit>
   1bc50:	e1a03004 	mov	r3, r4
}
   1bc54:	e1a00003 	mov	r0, r3
   1bc58:	e24bd00c 	sub	sp, fp, #12
   1bc5c:	e8bd8830 	pop	{r4, r5, fp, pc}

0001bc60 <DWHCIDeviceDisableRootPort>:

void DWHCIDeviceDisableRootPort (TDWHCIDevice *pThis)
{
   1bc60:	e92d4810 	push	{r4, fp, lr}
   1bc64:	e28db008 	add	fp, sp, #8
   1bc68:	e24dd01c 	sub	sp, sp, #28
   1bc6c:	e1a0400e 	mov	r4, lr
   1bc70:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1bc74:	e1a03004 	mov	r3, r4
   1bc78:	e30b0c60 	movw	r0, #48224	; 0xbc60
   1bc7c:	e3400001 	movt	r0, #1
   1bc80:	e1a01003 	mov	r1, r3
   1bc84:	ebffe6a4 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1bc88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bc8c:	e3530000 	cmp	r3, #0
   1bc90:	1a000005 	bne	1bcac <DWHCIDeviceDisableRootPort+0x4c>
   1bc94:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1bc98:	e3400002 	movt	r0, #2
   1bc9c:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1bca0:	e3401002 	movt	r1, #2
   1bca4:	e300256c 	movw	r2, #1388	; 0x56c
   1bca8:	ebffeb40 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister HostPort;
	DWHCIRegister (&HostPort, DWHCI_HOST_PORT);
   1bcac:	e24b3018 	sub	r3, fp, #24
   1bcb0:	e1a00003 	mov	r0, r3
   1bcb4:	e3a01d11 	mov	r1, #1088	; 0x440
   1bcb8:	e3431f98 	movt	r1, #16280	; 0x3f98
   1bcbc:	eb0000f5 	bl	1c098 <DWHCIRegister>

	DWHCIRegisterRead (&HostPort);
   1bcc0:	e24b3018 	sub	r3, fp, #24
   1bcc4:	e1a00003 	mov	r0, r3
   1bcc8:	eb000155 	bl	1c224 <DWHCIRegisterRead>
	DWHCIRegisterAnd (&HostPort, ~DWHCI_HOST_PORT_POWER);
   1bccc:	e24b3018 	sub	r3, fp, #24
   1bcd0:	e1a00003 	mov	r0, r3
   1bcd4:	e3e01a01 	mvn	r1, #4096	; 0x1000
   1bcd8:	eb00021a 	bl	1c548 <DWHCIRegisterAnd>
	DWHCIRegisterWrite (&HostPort);
   1bcdc:	e24b3018 	sub	r3, fp, #24
   1bce0:	e1a00003 	mov	r0, r3
   1bce4:	eb000174 	bl	1c2bc <DWHCIRegisterWrite>

	_DWHCIRegister (&HostPort);
   1bce8:	e24b3018 	sub	r3, fp, #24
   1bcec:	e1a00003 	mov	r0, r3
   1bcf0:	eb00012e 	bl	1c1b0 <_DWHCIRegister>
   1bcf4:	e1a03004 	mov	r3, r4
   1bcf8:	e30b0c60 	movw	r0, #48224	; 0xbc60
   1bcfc:	e3400001 	movt	r0, #1
   1bd00:	e1a01003 	mov	r1, r3
   1bd04:	ebffe6d6 	bl	15864 <__cyg_profile_func_exit>
}
   1bd08:	e24bd008 	sub	sp, fp, #8
   1bd0c:	e8bd8810 	pop	{r4, fp, pc}

0001bd10 <DWHCIDeviceDumpRegister>:

#ifndef NDEBUG

void DWHCIDeviceDumpRegister (TDWHCIDevice *pThis, const char *pName, u32 nAddress)
{
   1bd10:	e92d4810 	push	{r4, fp, lr}
   1bd14:	e28db008 	add	fp, sp, #8
   1bd18:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1bd1c:	e1a0400e 	mov	r4, lr
   1bd20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1bd24:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   1bd28:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   1bd2c:	e1a03004 	mov	r3, r4
   1bd30:	e30b0d10 	movw	r0, #48400	; 0xbd10
   1bd34:	e3400001 	movt	r0, #1
   1bd38:	e1a01003 	mov	r1, r3
   1bd3c:	ebffe676 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1bd40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bd44:	e3530000 	cmp	r3, #0
   1bd48:	1a000005 	bne	1bd64 <DWHCIDeviceDumpRegister+0x54>
   1bd4c:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1bd50:	e3400002 	movt	r0, #2
   1bd54:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1bd58:	e3401002 	movt	r1, #2
   1bd5c:	e300257c 	movw	r2, #1404	; 0x57c
   1bd60:	ebffeb12 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister Register;
	DWHCIRegister (&Register, nAddress);
   1bd64:	e24b3018 	sub	r3, fp, #24
   1bd68:	e1a00003 	mov	r0, r3
   1bd6c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   1bd70:	eb0000c8 	bl	1c098 <DWHCIRegister>

	DataMemBarrier ();
   1bd74:	f57ff05f 	dmb	sy

	LogWrite (FromDWHCI, LOG_DEBUG, "0x%08X %s", DWHCIRegisterRead (&Register), pName);
   1bd78:	e24b3018 	sub	r3, fp, #24
   1bd7c:	e1a00003 	mov	r0, r3
   1bd80:	eb000127 	bl	1c224 <DWHCIRegisterRead>
   1bd84:	e1a0c000 	mov	ip, r0
   1bd88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bd8c:	e58d3000 	str	r3, [sp]
   1bd90:	e30e00d4 	movw	r0, #57556	; 0xe0d4
   1bd94:	e3400002 	movt	r0, #2
   1bd98:	e3a01004 	mov	r1, #4
   1bd9c:	e30e2540 	movw	r2, #58688	; 0xe540
   1bda0:	e3402002 	movt	r2, #2
   1bda4:	e1a0300c 	mov	r3, ip
   1bda8:	ebffeae8 	bl	16950 <LogWrite>

	_DWHCIRegister (&Register);
   1bdac:	e24b3018 	sub	r3, fp, #24
   1bdb0:	e1a00003 	mov	r0, r3
   1bdb4:	eb0000fd 	bl	1c1b0 <_DWHCIRegister>
   1bdb8:	e1a03004 	mov	r3, r4
   1bdbc:	e30b0d10 	movw	r0, #48400	; 0xbd10
   1bdc0:	e3400001 	movt	r0, #1
   1bdc4:	e1a01003 	mov	r1, r3
   1bdc8:	ebffe6a5 	bl	15864 <__cyg_profile_func_exit>
}
   1bdcc:	e24bd008 	sub	sp, fp, #8
   1bdd0:	e8bd8810 	pop	{r4, fp, pc}

0001bdd4 <DWHCIDeviceDumpStatus>:

void DWHCIDeviceDumpStatus (TDWHCIDevice *pThis, unsigned nChannel)
{
   1bdd4:	e92d4810 	push	{r4, fp, lr}
   1bdd8:	e28db008 	add	fp, sp, #8
   1bddc:	e24dd00c 	sub	sp, sp, #12
   1bde0:	e1a0400e 	mov	r4, lr
   1bde4:	e50b0010 	str	r0, [fp, #-16]
   1bde8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1bdec:	e1a03004 	mov	r3, r4
   1bdf0:	e30b0dd4 	movw	r0, #48596	; 0xbdd4
   1bdf4:	e3400001 	movt	r0, #1
   1bdf8:	e1a01003 	mov	r1, r3
   1bdfc:	ebffe646 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1be00:	e51b3010 	ldr	r3, [fp, #-16]
   1be04:	e3530000 	cmp	r3, #0
   1be08:	1a000005 	bne	1be24 <DWHCIDeviceDumpStatus+0x50>
   1be0c:	e30e00dc 	movw	r0, #57564	; 0xe0dc
   1be10:	e3400002 	movt	r0, #2
   1be14:	e30e10e8 	movw	r1, #57576	; 0xe0e8
   1be18:	e3401002 	movt	r1, #2
   1be1c:	e300258a 	movw	r2, #1418	; 0x58a
   1be20:	ebffeae2 	bl	169b0 <uspi_assertion_failed>

	DWHCIDeviceDumpRegister (pThis, "OTG_CTRL",                DWHCI_CORE_OTG_CTRL);
   1be24:	e51b0010 	ldr	r0, [fp, #-16]
   1be28:	e30e154c 	movw	r1, #58700	; 0xe54c
   1be2c:	e3401002 	movt	r1, #2
   1be30:	e3a02000 	mov	r2, #0
   1be34:	e3432f98 	movt	r2, #16280	; 0x3f98
   1be38:	ebffffb4 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "AHB_CFG",                 DWHCI_CORE_AHB_CFG);
   1be3c:	e51b0010 	ldr	r0, [fp, #-16]
   1be40:	e30e1558 	movw	r1, #58712	; 0xe558
   1be44:	e3401002 	movt	r1, #2
   1be48:	e3a02008 	mov	r2, #8
   1be4c:	e3432f98 	movt	r2, #16280	; 0x3f98
   1be50:	ebffffae 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "USB_CFG",                 DWHCI_CORE_USB_CFG);
   1be54:	e51b0010 	ldr	r0, [fp, #-16]
   1be58:	e30e1560 	movw	r1, #58720	; 0xe560
   1be5c:	e3401002 	movt	r1, #2
   1be60:	e3a0200c 	mov	r2, #12
   1be64:	e3432f98 	movt	r2, #16280	; 0x3f98
   1be68:	ebffffa8 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "RESET",                   DWHCI_CORE_RESET);
   1be6c:	e51b0010 	ldr	r0, [fp, #-16]
   1be70:	e30e1568 	movw	r1, #58728	; 0xe568
   1be74:	e3401002 	movt	r1, #2
   1be78:	e3a02010 	mov	r2, #16
   1be7c:	e3432f98 	movt	r2, #16280	; 0x3f98
   1be80:	ebffffa2 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "INT_STAT",                DWHCI_CORE_INT_STAT);
   1be84:	e51b0010 	ldr	r0, [fp, #-16]
   1be88:	e30e1570 	movw	r1, #58736	; 0xe570
   1be8c:	e3401002 	movt	r1, #2
   1be90:	e3a02014 	mov	r2, #20
   1be94:	e3432f98 	movt	r2, #16280	; 0x3f98
   1be98:	ebffff9c 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "INT_MASK",                DWHCI_CORE_INT_MASK);
   1be9c:	e51b0010 	ldr	r0, [fp, #-16]
   1bea0:	e30e157c 	movw	r1, #58748	; 0xe57c
   1bea4:	e3401002 	movt	r1, #2
   1bea8:	e3a02018 	mov	r2, #24
   1beac:	e3432f98 	movt	r2, #16280	; 0x3f98
   1beb0:	ebffff96 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "RX_FIFO_SIZ",             DWHCI_CORE_RX_FIFO_SIZ);
   1beb4:	e51b0010 	ldr	r0, [fp, #-16]
   1beb8:	e30e1588 	movw	r1, #58760	; 0xe588
   1bebc:	e3401002 	movt	r1, #2
   1bec0:	e3a02024 	mov	r2, #36	; 0x24
   1bec4:	e3432f98 	movt	r2, #16280	; 0x3f98
   1bec8:	ebffff90 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "NPER_TX_FIFO_SIZ",        DWHCI_CORE_NPER_TX_FIFO_SIZ);
   1becc:	e51b0010 	ldr	r0, [fp, #-16]
   1bed0:	e30e1594 	movw	r1, #58772	; 0xe594
   1bed4:	e3401002 	movt	r1, #2
   1bed8:	e3a02028 	mov	r2, #40	; 0x28
   1bedc:	e3432f98 	movt	r2, #16280	; 0x3f98
   1bee0:	ebffff8a 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "NPER_TX_STAT",            DWHCI_CORE_NPER_TX_STAT);
   1bee4:	e51b0010 	ldr	r0, [fp, #-16]
   1bee8:	e30e15a8 	movw	r1, #58792	; 0xe5a8
   1beec:	e3401002 	movt	r1, #2
   1bef0:	e3a0202c 	mov	r2, #44	; 0x2c
   1bef4:	e3432f98 	movt	r2, #16280	; 0x3f98
   1bef8:	ebffff84 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "HOST_PER_TX_FIFO_SIZ",    DWHCI_CORE_HOST_PER_TX_FIFO_SIZ);
   1befc:	e51b0010 	ldr	r0, [fp, #-16]
   1bf00:	e30e15b8 	movw	r1, #58808	; 0xe5b8
   1bf04:	e3401002 	movt	r1, #2
   1bf08:	e3a02c01 	mov	r2, #256	; 0x100
   1bf0c:	e3432f98 	movt	r2, #16280	; 0x3f98
   1bf10:	ebffff7e 	bl	1bd10 <DWHCIDeviceDumpRegister>

	DWHCIDeviceDumpRegister (pThis, "HOST_CFG",                DWHCI_HOST_CFG);
   1bf14:	e51b0010 	ldr	r0, [fp, #-16]
   1bf18:	e30e15d0 	movw	r1, #58832	; 0xe5d0
   1bf1c:	e3401002 	movt	r1, #2
   1bf20:	e3a02b01 	mov	r2, #1024	; 0x400
   1bf24:	e3432f98 	movt	r2, #16280	; 0x3f98
   1bf28:	ebffff78 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "HOST_PER_TX_FIFO_STAT",   DWHCI_HOST_PER_TX_FIFO_STAT);
   1bf2c:	e51b0010 	ldr	r0, [fp, #-16]
   1bf30:	e30e15dc 	movw	r1, #58844	; 0xe5dc
   1bf34:	e3401002 	movt	r1, #2
   1bf38:	e3a02e41 	mov	r2, #1040	; 0x410
   1bf3c:	e3432f98 	movt	r2, #16280	; 0x3f98
   1bf40:	ebffff72 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "HOST_ALLCHAN_INT",        DWHCI_HOST_ALLCHAN_INT);
   1bf44:	e51b0010 	ldr	r0, [fp, #-16]
   1bf48:	e30e15f4 	movw	r1, #58868	; 0xe5f4
   1bf4c:	e3401002 	movt	r1, #2
   1bf50:	e3002414 	movw	r2, #1044	; 0x414
   1bf54:	e3432f98 	movt	r2, #16280	; 0x3f98
   1bf58:	ebffff6c 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "HOST_ALLCHAN_INT_MASK",   DWHCI_HOST_ALLCHAN_INT_MASK);
   1bf5c:	e51b0010 	ldr	r0, [fp, #-16]
   1bf60:	e30e1608 	movw	r1, #58888	; 0xe608
   1bf64:	e3401002 	movt	r1, #2
   1bf68:	e3002418 	movw	r2, #1048	; 0x418
   1bf6c:	e3432f98 	movt	r2, #16280	; 0x3f98
   1bf70:	ebffff66 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "HOST_PORT",               DWHCI_HOST_PORT);
   1bf74:	e51b0010 	ldr	r0, [fp, #-16]
   1bf78:	e30e1620 	movw	r1, #58912	; 0xe620
   1bf7c:	e3401002 	movt	r1, #2
   1bf80:	e3a02d11 	mov	r2, #1088	; 0x440
   1bf84:	e3432f98 	movt	r2, #16280	; 0x3f98
   1bf88:	ebffff60 	bl	1bd10 <DWHCIDeviceDumpRegister>

	DWHCIDeviceDumpRegister (pThis, "HOST_CHAN_CHARACTER(n)",  DWHCI_HOST_CHAN_CHARACTER (nChannel));
   1bf8c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1bf90:	e30c3028 	movw	r3, #49192	; 0xc028
   1bf94:	e34031fc 	movt	r3, #508	; 0x1fc
   1bf98:	e0823003 	add	r3, r2, r3
   1bf9c:	e1a03283 	lsl	r3, r3, #5
   1bfa0:	e51b0010 	ldr	r0, [fp, #-16]
   1bfa4:	e30e162c 	movw	r1, #58924	; 0xe62c
   1bfa8:	e3401002 	movt	r1, #2
   1bfac:	e1a02003 	mov	r2, r3
   1bfb0:	ebffff56 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "HOST_CHAN_SPLIT_CTRL(n)", DWHCI_HOST_CHAN_SPLIT_CTRL (nChannel));
   1bfb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1bfb8:	e1a02283 	lsl	r2, r3, #5
   1bfbc:	e3003504 	movw	r3, #1284	; 0x504
   1bfc0:	e3433f98 	movt	r3, #16280	; 0x3f98
   1bfc4:	e0823003 	add	r3, r2, r3
   1bfc8:	e51b0010 	ldr	r0, [fp, #-16]
   1bfcc:	e30e1644 	movw	r1, #58948	; 0xe644
   1bfd0:	e3401002 	movt	r1, #2
   1bfd4:	e1a02003 	mov	r2, r3
   1bfd8:	ebffff4c 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "HOST_CHAN_INT(n)",        DWHCI_HOST_CHAN_INT (nChannel));
   1bfdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1bfe0:	e1a02283 	lsl	r2, r3, #5
   1bfe4:	e3003508 	movw	r3, #1288	; 0x508
   1bfe8:	e3433f98 	movt	r3, #16280	; 0x3f98
   1bfec:	e0823003 	add	r3, r2, r3
   1bff0:	e51b0010 	ldr	r0, [fp, #-16]
   1bff4:	e30e165c 	movw	r1, #58972	; 0xe65c
   1bff8:	e3401002 	movt	r1, #2
   1bffc:	e1a02003 	mov	r2, r3
   1c000:	ebffff42 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "HOST_CHAN_INT_MASK(n)",   DWHCI_HOST_CHAN_INT_MASK (nChannel));
   1c004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c008:	e1a02283 	lsl	r2, r3, #5
   1c00c:	e300350c 	movw	r3, #1292	; 0x50c
   1c010:	e3433f98 	movt	r3, #16280	; 0x3f98
   1c014:	e0823003 	add	r3, r2, r3
   1c018:	e51b0010 	ldr	r0, [fp, #-16]
   1c01c:	e30e1670 	movw	r1, #58992	; 0xe670
   1c020:	e3401002 	movt	r1, #2
   1c024:	e1a02003 	mov	r2, r3
   1c028:	ebffff38 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "HOST_CHAN_XFER_SIZ(n)",   DWHCI_HOST_CHAN_XFER_SIZ (nChannel));
   1c02c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c030:	e1a02283 	lsl	r2, r3, #5
   1c034:	e3a03e51 	mov	r3, #1296	; 0x510
   1c038:	e3433f98 	movt	r3, #16280	; 0x3f98
   1c03c:	e0823003 	add	r3, r2, r3
   1c040:	e51b0010 	ldr	r0, [fp, #-16]
   1c044:	e30e1688 	movw	r1, #59016	; 0xe688
   1c048:	e3401002 	movt	r1, #2
   1c04c:	e1a02003 	mov	r2, r3
   1c050:	ebffff2e 	bl	1bd10 <DWHCIDeviceDumpRegister>
	DWHCIDeviceDumpRegister (pThis, "HOST_CHAN_DMA_ADDR(n)",   DWHCI_HOST_CHAN_DMA_ADDR (nChannel));
   1c054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c058:	e1a02283 	lsl	r2, r3, #5
   1c05c:	e3003514 	movw	r3, #1300	; 0x514
   1c060:	e3433f98 	movt	r3, #16280	; 0x3f98
   1c064:	e0823003 	add	r3, r2, r3
   1c068:	e51b0010 	ldr	r0, [fp, #-16]
   1c06c:	e30e16a0 	movw	r1, #59040	; 0xe6a0
   1c070:	e3401002 	movt	r1, #2
   1c074:	e1a02003 	mov	r2, r3
   1c078:	ebffff24 	bl	1bd10 <DWHCIDeviceDumpRegister>
   1c07c:	e1a03004 	mov	r3, r4
   1c080:	e30b0dd4 	movw	r0, #48596	; 0xbdd4
   1c084:	e3400001 	movt	r0, #1
   1c088:	e1a01003 	mov	r1, r3
   1c08c:	ebffe5f4 	bl	15864 <__cyg_profile_func_exit>
}
   1c090:	e24bd008 	sub	sp, fp, #8
   1c094:	e8bd8810 	pop	{r4, fp, pc}

0001c098 <DWHCIRegister>:
#include <uspi/dwhciregister.h>
#include <uspios.h>
#include <uspi/assert.h>

void DWHCIRegister (TDWHCIRegister *pThis, u32 nAddress)
{
   1c098:	e92d4810 	push	{r4, fp, lr}
   1c09c:	e28db008 	add	fp, sp, #8
   1c0a0:	e24dd00c 	sub	sp, sp, #12
   1c0a4:	e1a0400e 	mov	r4, lr
   1c0a8:	e50b0010 	str	r0, [fp, #-16]
   1c0ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1c0b0:	e1a03004 	mov	r3, r4
   1c0b4:	e30c0098 	movw	r0, #49304	; 0xc098
   1c0b8:	e3400001 	movt	r0, #1
   1c0bc:	e1a01003 	mov	r1, r3
   1c0c0:	ebffe595 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c0c4:	e51b3010 	ldr	r3, [fp, #-16]
   1c0c8:	e3530000 	cmp	r3, #0
   1c0cc:	1a000005 	bne	1c0e8 <DWHCIRegister+0x50>
   1c0d0:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c0d4:	e3400002 	movt	r0, #2
   1c0d8:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c0dc:	e3401002 	movt	r1, #2
   1c0e0:	e3a0201a 	mov	r2, #26
   1c0e4:	ebffea31 	bl	169b0 <uspi_assertion_failed>
	pThis->m_bValid = FALSE;
   1c0e8:	e51b3010 	ldr	r3, [fp, #-16]
   1c0ec:	e3a02000 	mov	r2, #0
   1c0f0:	e5832000 	str	r2, [r3]
	pThis->m_nAddress = nAddress;
   1c0f4:	e51b3010 	ldr	r3, [fp, #-16]
   1c0f8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1c0fc:	e5832004 	str	r2, [r3, #4]
   1c100:	e1a03004 	mov	r3, r4
   1c104:	e30c0098 	movw	r0, #49304	; 0xc098
   1c108:	e3400001 	movt	r0, #1
   1c10c:	e1a01003 	mov	r1, r3
   1c110:	ebffe5d3 	bl	15864 <__cyg_profile_func_exit>
}
   1c114:	e24bd008 	sub	sp, fp, #8
   1c118:	e8bd8810 	pop	{r4, fp, pc}

0001c11c <DWHCIRegister2>:

void DWHCIRegister2 (TDWHCIRegister *pThis, u32 nAddress, u32 nValue)
{
   1c11c:	e92d4810 	push	{r4, fp, lr}
   1c120:	e28db008 	add	fp, sp, #8
   1c124:	e24dd014 	sub	sp, sp, #20
   1c128:	e1a0400e 	mov	r4, lr
   1c12c:	e50b0010 	str	r0, [fp, #-16]
   1c130:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1c134:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   1c138:	e1a03004 	mov	r3, r4
   1c13c:	e30c011c 	movw	r0, #49436	; 0xc11c
   1c140:	e3400001 	movt	r0, #1
   1c144:	e1a01003 	mov	r1, r3
   1c148:	ebffe573 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c14c:	e51b3010 	ldr	r3, [fp, #-16]
   1c150:	e3530000 	cmp	r3, #0
   1c154:	1a000005 	bne	1c170 <DWHCIRegister2+0x54>
   1c158:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c15c:	e3400002 	movt	r0, #2
   1c160:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c164:	e3401002 	movt	r1, #2
   1c168:	e3a02021 	mov	r2, #33	; 0x21
   1c16c:	ebffea0f 	bl	169b0 <uspi_assertion_failed>
	pThis->m_bValid = TRUE;
   1c170:	e51b3010 	ldr	r3, [fp, #-16]
   1c174:	e3a02001 	mov	r2, #1
   1c178:	e5832000 	str	r2, [r3]
	pThis->m_nAddress = nAddress;
   1c17c:	e51b3010 	ldr	r3, [fp, #-16]
   1c180:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1c184:	e5832004 	str	r2, [r3, #4]
	pThis->m_nBuffer = nValue;
   1c188:	e51b3010 	ldr	r3, [fp, #-16]
   1c18c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c190:	e5832008 	str	r2, [r3, #8]
   1c194:	e1a03004 	mov	r3, r4
   1c198:	e30c011c 	movw	r0, #49436	; 0xc11c
   1c19c:	e3400001 	movt	r0, #1
   1c1a0:	e1a01003 	mov	r1, r3
   1c1a4:	ebffe5ae 	bl	15864 <__cyg_profile_func_exit>
}
   1c1a8:	e24bd008 	sub	sp, fp, #8
   1c1ac:	e8bd8810 	pop	{r4, fp, pc}

0001c1b0 <_DWHCIRegister>:

void _DWHCIRegister (TDWHCIRegister *pThis)
{
   1c1b0:	e92d4810 	push	{r4, fp, lr}
   1c1b4:	e28db008 	add	fp, sp, #8
   1c1b8:	e24dd00c 	sub	sp, sp, #12
   1c1bc:	e1a0400e 	mov	r4, lr
   1c1c0:	e50b0010 	str	r0, [fp, #-16]
   1c1c4:	e1a03004 	mov	r3, r4
   1c1c8:	e30c01b0 	movw	r0, #49584	; 0xc1b0
   1c1cc:	e3400001 	movt	r0, #1
   1c1d0:	e1a01003 	mov	r1, r3
   1c1d4:	ebffe550 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c1d8:	e51b3010 	ldr	r3, [fp, #-16]
   1c1dc:	e3530000 	cmp	r3, #0
   1c1e0:	1a000005 	bne	1c1fc <_DWHCIRegister+0x4c>
   1c1e4:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c1e8:	e3400002 	movt	r0, #2
   1c1ec:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c1f0:	e3401002 	movt	r1, #2
   1c1f4:	e3a02029 	mov	r2, #41	; 0x29
   1c1f8:	ebffe9ec 	bl	169b0 <uspi_assertion_failed>
	pThis->m_bValid = FALSE;
   1c1fc:	e51b3010 	ldr	r3, [fp, #-16]
   1c200:	e3a02000 	mov	r2, #0
   1c204:	e5832000 	str	r2, [r3]
   1c208:	e1a03004 	mov	r3, r4
   1c20c:	e30c01b0 	movw	r0, #49584	; 0xc1b0
   1c210:	e3400001 	movt	r0, #1
   1c214:	e1a01003 	mov	r1, r3
   1c218:	ebffe591 	bl	15864 <__cyg_profile_func_exit>
}
   1c21c:	e24bd008 	sub	sp, fp, #8
   1c220:	e8bd8810 	pop	{r4, fp, pc}

0001c224 <DWHCIRegisterRead>:

u32 DWHCIRegisterRead (TDWHCIRegister *pThis)
{
   1c224:	e92d4830 	push	{r4, r5, fp, lr}
   1c228:	e28db00c 	add	fp, sp, #12
   1c22c:	e24dd008 	sub	sp, sp, #8
   1c230:	e1a0500e 	mov	r5, lr
   1c234:	e50b0010 	str	r0, [fp, #-16]
   1c238:	e1a03005 	mov	r3, r5
   1c23c:	e30c0224 	movw	r0, #49700	; 0xc224
   1c240:	e3400001 	movt	r0, #1
   1c244:	e1a01003 	mov	r1, r3
   1c248:	ebffe533 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c24c:	e51b3010 	ldr	r3, [fp, #-16]
   1c250:	e3530000 	cmp	r3, #0
   1c254:	1a000005 	bne	1c270 <DWHCIRegisterRead+0x4c>
   1c258:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c25c:	e3400002 	movt	r0, #2
   1c260:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c264:	e3401002 	movt	r1, #2
   1c268:	e3a0202f 	mov	r2, #47	; 0x2f
   1c26c:	ebffe9cf 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nBuffer = *(u32 *) pThis->m_nAddress;
   1c270:	e51b3010 	ldr	r3, [fp, #-16]
   1c274:	e5933004 	ldr	r3, [r3, #4]
   1c278:	e5932000 	ldr	r2, [r3]
   1c27c:	e51b3010 	ldr	r3, [fp, #-16]
   1c280:	e5832008 	str	r2, [r3, #8]
	pThis->m_bValid = TRUE;
   1c284:	e51b3010 	ldr	r3, [fp, #-16]
   1c288:	e3a02001 	mov	r2, #1
   1c28c:	e5832000 	str	r2, [r3]
	
	return pThis->m_nBuffer;
   1c290:	e51b3010 	ldr	r3, [fp, #-16]
   1c294:	e5934008 	ldr	r4, [r3, #8]
   1c298:	e1a03005 	mov	r3, r5
   1c29c:	e30c0224 	movw	r0, #49700	; 0xc224
   1c2a0:	e3400001 	movt	r0, #1
   1c2a4:	e1a01003 	mov	r1, r3
   1c2a8:	ebffe56d 	bl	15864 <__cyg_profile_func_exit>
   1c2ac:	e1a03004 	mov	r3, r4
}
   1c2b0:	e1a00003 	mov	r0, r3
   1c2b4:	e24bd00c 	sub	sp, fp, #12
   1c2b8:	e8bd8830 	pop	{r4, r5, fp, pc}

0001c2bc <DWHCIRegisterWrite>:

void DWHCIRegisterWrite (TDWHCIRegister *pThis)
{
   1c2bc:	e92d4810 	push	{r4, fp, lr}
   1c2c0:	e28db008 	add	fp, sp, #8
   1c2c4:	e24dd00c 	sub	sp, sp, #12
   1c2c8:	e1a0400e 	mov	r4, lr
   1c2cc:	e50b0010 	str	r0, [fp, #-16]
   1c2d0:	e1a03004 	mov	r3, r4
   1c2d4:	e30c02bc 	movw	r0, #49852	; 0xc2bc
   1c2d8:	e3400001 	movt	r0, #1
   1c2dc:	e1a01003 	mov	r1, r3
   1c2e0:	ebffe50d 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c2e4:	e51b3010 	ldr	r3, [fp, #-16]
   1c2e8:	e3530000 	cmp	r3, #0
   1c2ec:	1a000005 	bne	1c308 <DWHCIRegisterWrite+0x4c>
   1c2f0:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c2f4:	e3400002 	movt	r0, #2
   1c2f8:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c2fc:	e3401002 	movt	r1, #2
   1c300:	e3a02038 	mov	r2, #56	; 0x38
   1c304:	ebffe9a9 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   1c308:	e51b3010 	ldr	r3, [fp, #-16]
   1c30c:	e5933000 	ldr	r3, [r3]
   1c310:	e3530000 	cmp	r3, #0
   1c314:	1a000005 	bne	1c330 <DWHCIRegisterWrite+0x74>
   1c318:	e30e0728 	movw	r0, #59176	; 0xe728
   1c31c:	e3400002 	movt	r0, #2
   1c320:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c324:	e3401002 	movt	r1, #2
   1c328:	e3a02039 	mov	r2, #57	; 0x39
   1c32c:	ebffe99f 	bl	169b0 <uspi_assertion_failed>
	*(u32 *) pThis->m_nAddress = pThis->m_nBuffer;
   1c330:	e51b3010 	ldr	r3, [fp, #-16]
   1c334:	e5933004 	ldr	r3, [r3, #4]
   1c338:	e1a02003 	mov	r2, r3
   1c33c:	e51b3010 	ldr	r3, [fp, #-16]
   1c340:	e5933008 	ldr	r3, [r3, #8]
   1c344:	e5823000 	str	r3, [r2]
   1c348:	e1a03004 	mov	r3, r4
   1c34c:	e30c02bc 	movw	r0, #49852	; 0xc2bc
   1c350:	e3400001 	movt	r0, #1
   1c354:	e1a01003 	mov	r1, r3
   1c358:	ebffe541 	bl	15864 <__cyg_profile_func_exit>
}
   1c35c:	e24bd008 	sub	sp, fp, #8
   1c360:	e8bd8810 	pop	{r4, fp, pc}

0001c364 <DWHCIRegisterGet>:

u32 DWHCIRegisterGet (TDWHCIRegister *pThis)
{
   1c364:	e92d4830 	push	{r4, r5, fp, lr}
   1c368:	e28db00c 	add	fp, sp, #12
   1c36c:	e24dd008 	sub	sp, sp, #8
   1c370:	e1a0500e 	mov	r5, lr
   1c374:	e50b0010 	str	r0, [fp, #-16]
   1c378:	e1a03005 	mov	r3, r5
   1c37c:	e30c0364 	movw	r0, #50020	; 0xc364
   1c380:	e3400001 	movt	r0, #1
   1c384:	e1a01003 	mov	r1, r3
   1c388:	ebffe4e3 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c38c:	e51b3010 	ldr	r3, [fp, #-16]
   1c390:	e3530000 	cmp	r3, #0
   1c394:	1a000005 	bne	1c3b0 <DWHCIRegisterGet+0x4c>
   1c398:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c39c:	e3400002 	movt	r0, #2
   1c3a0:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c3a4:	e3401002 	movt	r1, #2
   1c3a8:	e3a0203f 	mov	r2, #63	; 0x3f
   1c3ac:	ebffe97f 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   1c3b0:	e51b3010 	ldr	r3, [fp, #-16]
   1c3b4:	e5933000 	ldr	r3, [r3]
   1c3b8:	e3530000 	cmp	r3, #0
   1c3bc:	1a000005 	bne	1c3d8 <DWHCIRegisterGet+0x74>
   1c3c0:	e30e0728 	movw	r0, #59176	; 0xe728
   1c3c4:	e3400002 	movt	r0, #2
   1c3c8:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c3cc:	e3401002 	movt	r1, #2
   1c3d0:	e3a02040 	mov	r2, #64	; 0x40
   1c3d4:	ebffe975 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nBuffer;
   1c3d8:	e51b3010 	ldr	r3, [fp, #-16]
   1c3dc:	e5934008 	ldr	r4, [r3, #8]
   1c3e0:	e1a03005 	mov	r3, r5
   1c3e4:	e30c0364 	movw	r0, #50020	; 0xc364
   1c3e8:	e3400001 	movt	r0, #1
   1c3ec:	e1a01003 	mov	r1, r3
   1c3f0:	ebffe51b 	bl	15864 <__cyg_profile_func_exit>
   1c3f4:	e1a03004 	mov	r3, r4
}
   1c3f8:	e1a00003 	mov	r0, r3
   1c3fc:	e24bd00c 	sub	sp, fp, #12
   1c400:	e8bd8830 	pop	{r4, r5, fp, pc}

0001c404 <DWHCIRegisterSet>:

void DWHCIRegisterSet (TDWHCIRegister *pThis, u32 nValue)
{
   1c404:	e92d4810 	push	{r4, fp, lr}
   1c408:	e28db008 	add	fp, sp, #8
   1c40c:	e24dd00c 	sub	sp, sp, #12
   1c410:	e1a0400e 	mov	r4, lr
   1c414:	e50b0010 	str	r0, [fp, #-16]
   1c418:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1c41c:	e1a03004 	mov	r3, r4
   1c420:	e30c0404 	movw	r0, #50180	; 0xc404
   1c424:	e3400001 	movt	r0, #1
   1c428:	e1a01003 	mov	r1, r3
   1c42c:	ebffe4ba 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c430:	e51b3010 	ldr	r3, [fp, #-16]
   1c434:	e3530000 	cmp	r3, #0
   1c438:	1a000005 	bne	1c454 <DWHCIRegisterSet+0x50>
   1c43c:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c440:	e3400002 	movt	r0, #2
   1c444:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c448:	e3401002 	movt	r1, #2
   1c44c:	e3a02046 	mov	r2, #70	; 0x46
   1c450:	ebffe956 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nBuffer = nValue;
   1c454:	e51b3010 	ldr	r3, [fp, #-16]
   1c458:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1c45c:	e5832008 	str	r2, [r3, #8]
	pThis->m_bValid = TRUE;
   1c460:	e51b3010 	ldr	r3, [fp, #-16]
   1c464:	e3a02001 	mov	r2, #1
   1c468:	e5832000 	str	r2, [r3]
   1c46c:	e1a03004 	mov	r3, r4
   1c470:	e30c0404 	movw	r0, #50180	; 0xc404
   1c474:	e3400001 	movt	r0, #1
   1c478:	e1a01003 	mov	r1, r3
   1c47c:	ebffe4f8 	bl	15864 <__cyg_profile_func_exit>
}
   1c480:	e24bd008 	sub	sp, fp, #8
   1c484:	e8bd8810 	pop	{r4, fp, pc}

0001c488 <DWHCIRegisterIsSet>:

boolean DWHCIRegisterIsSet (TDWHCIRegister *pThis, u32 nMask)
{
   1c488:	e92d4830 	push	{r4, r5, fp, lr}
   1c48c:	e28db00c 	add	fp, sp, #12
   1c490:	e24dd008 	sub	sp, sp, #8
   1c494:	e1a0400e 	mov	r4, lr
   1c498:	e50b0010 	str	r0, [fp, #-16]
   1c49c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1c4a0:	e1a03004 	mov	r3, r4
   1c4a4:	e30c0488 	movw	r0, #50312	; 0xc488
   1c4a8:	e3400001 	movt	r0, #1
   1c4ac:	e1a01003 	mov	r1, r3
   1c4b0:	ebffe499 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c4b4:	e51b3010 	ldr	r3, [fp, #-16]
   1c4b8:	e3530000 	cmp	r3, #0
   1c4bc:	1a000005 	bne	1c4d8 <DWHCIRegisterIsSet+0x50>
   1c4c0:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c4c4:	e3400002 	movt	r0, #2
   1c4c8:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c4cc:	e3401002 	movt	r1, #2
   1c4d0:	e3a0204d 	mov	r2, #77	; 0x4d
   1c4d4:	ebffe935 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   1c4d8:	e51b3010 	ldr	r3, [fp, #-16]
   1c4dc:	e5933000 	ldr	r3, [r3]
   1c4e0:	e3530000 	cmp	r3, #0
   1c4e4:	1a000005 	bne	1c500 <DWHCIRegisterIsSet+0x78>
   1c4e8:	e30e0728 	movw	r0, #59176	; 0xe728
   1c4ec:	e3400002 	movt	r0, #2
   1c4f0:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c4f4:	e3401002 	movt	r1, #2
   1c4f8:	e3a0204e 	mov	r2, #78	; 0x4e
   1c4fc:	ebffe92b 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nBuffer & nMask ? TRUE : FALSE;
   1c500:	e51b3010 	ldr	r3, [fp, #-16]
   1c504:	e5932008 	ldr	r2, [r3, #8]
   1c508:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c50c:	e0033002 	and	r3, r3, r2
   1c510:	e3530000 	cmp	r3, #0
   1c514:	13a03001 	movne	r3, #1
   1c518:	03a03000 	moveq	r3, #0
   1c51c:	e6ef3073 	uxtb	r3, r3
   1c520:	e1a05003 	mov	r5, r3
   1c524:	e1a03004 	mov	r3, r4
   1c528:	e30c0488 	movw	r0, #50312	; 0xc488
   1c52c:	e3400001 	movt	r0, #1
   1c530:	e1a01003 	mov	r1, r3
   1c534:	ebffe4ca 	bl	15864 <__cyg_profile_func_exit>
   1c538:	e1a03005 	mov	r3, r5
}
   1c53c:	e1a00003 	mov	r0, r3
   1c540:	e24bd00c 	sub	sp, fp, #12
   1c544:	e8bd8830 	pop	{r4, r5, fp, pc}

0001c548 <DWHCIRegisterAnd>:

void DWHCIRegisterAnd (TDWHCIRegister *pThis, u32 nMask)
{
   1c548:	e92d4810 	push	{r4, fp, lr}
   1c54c:	e28db008 	add	fp, sp, #8
   1c550:	e24dd00c 	sub	sp, sp, #12
   1c554:	e1a0400e 	mov	r4, lr
   1c558:	e50b0010 	str	r0, [fp, #-16]
   1c55c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1c560:	e1a03004 	mov	r3, r4
   1c564:	e30c0548 	movw	r0, #50504	; 0xc548
   1c568:	e3400001 	movt	r0, #1
   1c56c:	e1a01003 	mov	r1, r3
   1c570:	ebffe469 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c574:	e51b3010 	ldr	r3, [fp, #-16]
   1c578:	e3530000 	cmp	r3, #0
   1c57c:	1a000005 	bne	1c598 <DWHCIRegisterAnd+0x50>
   1c580:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c584:	e3400002 	movt	r0, #2
   1c588:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c58c:	e3401002 	movt	r1, #2
   1c590:	e3a02054 	mov	r2, #84	; 0x54
   1c594:	ebffe905 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   1c598:	e51b3010 	ldr	r3, [fp, #-16]
   1c59c:	e5933000 	ldr	r3, [r3]
   1c5a0:	e3530000 	cmp	r3, #0
   1c5a4:	1a000005 	bne	1c5c0 <DWHCIRegisterAnd+0x78>
   1c5a8:	e30e0728 	movw	r0, #59176	; 0xe728
   1c5ac:	e3400002 	movt	r0, #2
   1c5b0:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c5b4:	e3401002 	movt	r1, #2
   1c5b8:	e3a02055 	mov	r2, #85	; 0x55
   1c5bc:	ebffe8fb 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nBuffer &= nMask;
   1c5c0:	e51b3010 	ldr	r3, [fp, #-16]
   1c5c4:	e5932008 	ldr	r2, [r3, #8]
   1c5c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c5cc:	e0022003 	and	r2, r2, r3
   1c5d0:	e51b3010 	ldr	r3, [fp, #-16]
   1c5d4:	e5832008 	str	r2, [r3, #8]
   1c5d8:	e1a03004 	mov	r3, r4
   1c5dc:	e30c0548 	movw	r0, #50504	; 0xc548
   1c5e0:	e3400001 	movt	r0, #1
   1c5e4:	e1a01003 	mov	r1, r3
   1c5e8:	ebffe49d 	bl	15864 <__cyg_profile_func_exit>
}
   1c5ec:	e24bd008 	sub	sp, fp, #8
   1c5f0:	e8bd8810 	pop	{r4, fp, pc}

0001c5f4 <DWHCIRegisterOr>:

void DWHCIRegisterOr (TDWHCIRegister *pThis, u32 nMask)
{
   1c5f4:	e92d4810 	push	{r4, fp, lr}
   1c5f8:	e28db008 	add	fp, sp, #8
   1c5fc:	e24dd00c 	sub	sp, sp, #12
   1c600:	e1a0400e 	mov	r4, lr
   1c604:	e50b0010 	str	r0, [fp, #-16]
   1c608:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1c60c:	e1a03004 	mov	r3, r4
   1c610:	e30c05f4 	movw	r0, #50676	; 0xc5f4
   1c614:	e3400001 	movt	r0, #1
   1c618:	e1a01003 	mov	r1, r3
   1c61c:	ebffe43e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c620:	e51b3010 	ldr	r3, [fp, #-16]
   1c624:	e3530000 	cmp	r3, #0
   1c628:	1a000005 	bne	1c644 <DWHCIRegisterOr+0x50>
   1c62c:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c630:	e3400002 	movt	r0, #2
   1c634:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c638:	e3401002 	movt	r1, #2
   1c63c:	e3a0205b 	mov	r2, #91	; 0x5b
   1c640:	ebffe8da 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   1c644:	e51b3010 	ldr	r3, [fp, #-16]
   1c648:	e5933000 	ldr	r3, [r3]
   1c64c:	e3530000 	cmp	r3, #0
   1c650:	1a000005 	bne	1c66c <DWHCIRegisterOr+0x78>
   1c654:	e30e0728 	movw	r0, #59176	; 0xe728
   1c658:	e3400002 	movt	r0, #2
   1c65c:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c660:	e3401002 	movt	r1, #2
   1c664:	e3a0205c 	mov	r2, #92	; 0x5c
   1c668:	ebffe8d0 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nBuffer |= nMask;
   1c66c:	e51b3010 	ldr	r3, [fp, #-16]
   1c670:	e5932008 	ldr	r2, [r3, #8]
   1c674:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c678:	e1822003 	orr	r2, r2, r3
   1c67c:	e51b3010 	ldr	r3, [fp, #-16]
   1c680:	e5832008 	str	r2, [r3, #8]
   1c684:	e1a03004 	mov	r3, r4
   1c688:	e30c05f4 	movw	r0, #50676	; 0xc5f4
   1c68c:	e3400001 	movt	r0, #1
   1c690:	e1a01003 	mov	r1, r3
   1c694:	ebffe472 	bl	15864 <__cyg_profile_func_exit>
}
   1c698:	e24bd008 	sub	sp, fp, #8
   1c69c:	e8bd8810 	pop	{r4, fp, pc}

0001c6a0 <DWHCIRegisterClearBit>:

void DWHCIRegisterClearBit (TDWHCIRegister *pThis, unsigned nBit)
{
   1c6a0:	e92d4810 	push	{r4, fp, lr}
   1c6a4:	e28db008 	add	fp, sp, #8
   1c6a8:	e24dd00c 	sub	sp, sp, #12
   1c6ac:	e1a0400e 	mov	r4, lr
   1c6b0:	e50b0010 	str	r0, [fp, #-16]
   1c6b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1c6b8:	e1a03004 	mov	r3, r4
   1c6bc:	e30c06a0 	movw	r0, #50848	; 0xc6a0
   1c6c0:	e3400001 	movt	r0, #1
   1c6c4:	e1a01003 	mov	r1, r3
   1c6c8:	ebffe413 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c6cc:	e51b3010 	ldr	r3, [fp, #-16]
   1c6d0:	e3530000 	cmp	r3, #0
   1c6d4:	1a000005 	bne	1c6f0 <DWHCIRegisterClearBit+0x50>
   1c6d8:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c6dc:	e3400002 	movt	r0, #2
   1c6e0:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c6e4:	e3401002 	movt	r1, #2
   1c6e8:	e3a02062 	mov	r2, #98	; 0x62
   1c6ec:	ebffe8af 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   1c6f0:	e51b3010 	ldr	r3, [fp, #-16]
   1c6f4:	e5933000 	ldr	r3, [r3]
   1c6f8:	e3530000 	cmp	r3, #0
   1c6fc:	1a000005 	bne	1c718 <DWHCIRegisterClearBit+0x78>
   1c700:	e30e0728 	movw	r0, #59176	; 0xe728
   1c704:	e3400002 	movt	r0, #2
   1c708:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c70c:	e3401002 	movt	r1, #2
   1c710:	e3a02063 	mov	r2, #99	; 0x63
   1c714:	ebffe8a5 	bl	169b0 <uspi_assertion_failed>
	assert (nBit < sizeof pThis->m_nBuffer * 8);
   1c718:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c71c:	e353001f 	cmp	r3, #31
   1c720:	9a000005 	bls	1c73c <DWHCIRegisterClearBit+0x9c>
   1c724:	e30e0738 	movw	r0, #59192	; 0xe738
   1c728:	e3400002 	movt	r0, #2
   1c72c:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c730:	e3401002 	movt	r1, #2
   1c734:	e3a02064 	mov	r2, #100	; 0x64
   1c738:	ebffe89c 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nBuffer &= ~(1 << nBit);
   1c73c:	e51b3010 	ldr	r3, [fp, #-16]
   1c740:	e5933008 	ldr	r3, [r3, #8]
   1c744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1c748:	e3a01001 	mov	r1, #1
   1c74c:	e1a02211 	lsl	r2, r1, r2
   1c750:	e1e02002 	mvn	r2, r2
   1c754:	e0022003 	and	r2, r2, r3
   1c758:	e51b3010 	ldr	r3, [fp, #-16]
   1c75c:	e5832008 	str	r2, [r3, #8]
   1c760:	e1a03004 	mov	r3, r4
   1c764:	e30c06a0 	movw	r0, #50848	; 0xc6a0
   1c768:	e3400001 	movt	r0, #1
   1c76c:	e1a01003 	mov	r1, r3
   1c770:	ebffe43b 	bl	15864 <__cyg_profile_func_exit>
}
   1c774:	e24bd008 	sub	sp, fp, #8
   1c778:	e8bd8810 	pop	{r4, fp, pc}

0001c77c <DWHCIRegisterSetBit>:

void DWHCIRegisterSetBit (TDWHCIRegister *pThis, unsigned nBit)
{
   1c77c:	e92d4810 	push	{r4, fp, lr}
   1c780:	e28db008 	add	fp, sp, #8
   1c784:	e24dd00c 	sub	sp, sp, #12
   1c788:	e1a0400e 	mov	r4, lr
   1c78c:	e50b0010 	str	r0, [fp, #-16]
   1c790:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1c794:	e1a03004 	mov	r3, r4
   1c798:	e30c077c 	movw	r0, #51068	; 0xc77c
   1c79c:	e3400001 	movt	r0, #1
   1c7a0:	e1a01003 	mov	r1, r3
   1c7a4:	ebffe3dc 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c7a8:	e51b3010 	ldr	r3, [fp, #-16]
   1c7ac:	e3530000 	cmp	r3, #0
   1c7b0:	1a000005 	bne	1c7cc <DWHCIRegisterSetBit+0x50>
   1c7b4:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c7b8:	e3400002 	movt	r0, #2
   1c7bc:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c7c0:	e3401002 	movt	r1, #2
   1c7c4:	e3a0206a 	mov	r2, #106	; 0x6a
   1c7c8:	ebffe878 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   1c7cc:	e51b3010 	ldr	r3, [fp, #-16]
   1c7d0:	e5933000 	ldr	r3, [r3]
   1c7d4:	e3530000 	cmp	r3, #0
   1c7d8:	1a000005 	bne	1c7f4 <DWHCIRegisterSetBit+0x78>
   1c7dc:	e30e0728 	movw	r0, #59176	; 0xe728
   1c7e0:	e3400002 	movt	r0, #2
   1c7e4:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c7e8:	e3401002 	movt	r1, #2
   1c7ec:	e3a0206b 	mov	r2, #107	; 0x6b
   1c7f0:	ebffe86e 	bl	169b0 <uspi_assertion_failed>
	assert (nBit < sizeof pThis->m_nBuffer * 8);
   1c7f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c7f8:	e353001f 	cmp	r3, #31
   1c7fc:	9a000005 	bls	1c818 <DWHCIRegisterSetBit+0x9c>
   1c800:	e30e0738 	movw	r0, #59192	; 0xe738
   1c804:	e3400002 	movt	r0, #2
   1c808:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c80c:	e3401002 	movt	r1, #2
   1c810:	e3a0206c 	mov	r2, #108	; 0x6c
   1c814:	ebffe865 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nBuffer |= 1 << nBit;
   1c818:	e51b3010 	ldr	r3, [fp, #-16]
   1c81c:	e5933008 	ldr	r3, [r3, #8]
   1c820:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1c824:	e3a01001 	mov	r1, #1
   1c828:	e1a02211 	lsl	r2, r1, r2
   1c82c:	e1832002 	orr	r2, r3, r2
   1c830:	e51b3010 	ldr	r3, [fp, #-16]
   1c834:	e5832008 	str	r2, [r3, #8]
   1c838:	e1a03004 	mov	r3, r4
   1c83c:	e30c077c 	movw	r0, #51068	; 0xc77c
   1c840:	e3400001 	movt	r0, #1
   1c844:	e1a01003 	mov	r1, r3
   1c848:	ebffe405 	bl	15864 <__cyg_profile_func_exit>
}
   1c84c:	e24bd008 	sub	sp, fp, #8
   1c850:	e8bd8810 	pop	{r4, fp, pc}

0001c854 <DWHCIRegisterClearAll>:

void DWHCIRegisterClearAll (TDWHCIRegister *pThis)
{
   1c854:	e92d4810 	push	{r4, fp, lr}
   1c858:	e28db008 	add	fp, sp, #8
   1c85c:	e24dd00c 	sub	sp, sp, #12
   1c860:	e1a0400e 	mov	r4, lr
   1c864:	e50b0010 	str	r0, [fp, #-16]
   1c868:	e1a03004 	mov	r3, r4
   1c86c:	e30c0854 	movw	r0, #51284	; 0xc854
   1c870:	e3400001 	movt	r0, #1
   1c874:	e1a01003 	mov	r1, r3
   1c878:	ebffe3a7 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c87c:	e51b3010 	ldr	r3, [fp, #-16]
   1c880:	e3530000 	cmp	r3, #0
   1c884:	1a000005 	bne	1c8a0 <DWHCIRegisterClearAll+0x4c>
   1c888:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c88c:	e3400002 	movt	r0, #2
   1c890:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c894:	e3401002 	movt	r1, #2
   1c898:	e3a02072 	mov	r2, #114	; 0x72
   1c89c:	ebffe843 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nBuffer = 0;
   1c8a0:	e51b3010 	ldr	r3, [fp, #-16]
   1c8a4:	e3a02000 	mov	r2, #0
   1c8a8:	e5832008 	str	r2, [r3, #8]
	pThis->m_bValid = TRUE;
   1c8ac:	e51b3010 	ldr	r3, [fp, #-16]
   1c8b0:	e3a02001 	mov	r2, #1
   1c8b4:	e5832000 	str	r2, [r3]
   1c8b8:	e1a03004 	mov	r3, r4
   1c8bc:	e30c0854 	movw	r0, #51284	; 0xc854
   1c8c0:	e3400001 	movt	r0, #1
   1c8c4:	e1a01003 	mov	r1, r3
   1c8c8:	ebffe3e5 	bl	15864 <__cyg_profile_func_exit>
}
   1c8cc:	e24bd008 	sub	sp, fp, #8
   1c8d0:	e8bd8810 	pop	{r4, fp, pc}

0001c8d4 <DWHCIRegisterSetAll>:

void DWHCIRegisterSetAll (TDWHCIRegister *pThis)
{
   1c8d4:	e92d4810 	push	{r4, fp, lr}
   1c8d8:	e28db008 	add	fp, sp, #8
   1c8dc:	e24dd00c 	sub	sp, sp, #12
   1c8e0:	e1a0400e 	mov	r4, lr
   1c8e4:	e50b0010 	str	r0, [fp, #-16]
   1c8e8:	e1a03004 	mov	r3, r4
   1c8ec:	e30c08d4 	movw	r0, #51412	; 0xc8d4
   1c8f0:	e3400001 	movt	r0, #1
   1c8f4:	e1a01003 	mov	r1, r3
   1c8f8:	ebffe387 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c8fc:	e51b3010 	ldr	r3, [fp, #-16]
   1c900:	e3530000 	cmp	r3, #0
   1c904:	1a000005 	bne	1c920 <DWHCIRegisterSetAll+0x4c>
   1c908:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c90c:	e3400002 	movt	r0, #2
   1c910:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c914:	e3401002 	movt	r1, #2
   1c918:	e3a02079 	mov	r2, #121	; 0x79
   1c91c:	ebffe823 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nBuffer = (u32) -1;
   1c920:	e51b3010 	ldr	r3, [fp, #-16]
   1c924:	e3e02000 	mvn	r2, #0
   1c928:	e5832008 	str	r2, [r3, #8]
	pThis->m_bValid = TRUE;
   1c92c:	e51b3010 	ldr	r3, [fp, #-16]
   1c930:	e3a02001 	mov	r2, #1
   1c934:	e5832000 	str	r2, [r3]
   1c938:	e1a03004 	mov	r3, r4
   1c93c:	e30c08d4 	movw	r0, #51412	; 0xc8d4
   1c940:	e3400001 	movt	r0, #1
   1c944:	e1a01003 	mov	r1, r3
   1c948:	ebffe3c5 	bl	15864 <__cyg_profile_func_exit>
}
   1c94c:	e24bd008 	sub	sp, fp, #8
   1c950:	e8bd8810 	pop	{r4, fp, pc}

0001c954 <DWHCIRegisterDump>:

#ifndef NDEBUG

void DWHCIRegisterDump (TDWHCIRegister *pThis)
{
   1c954:	e92d4810 	push	{r4, fp, lr}
   1c958:	e28db008 	add	fp, sp, #8
   1c95c:	e24dd014 	sub	sp, sp, #20
   1c960:	e1a0400e 	mov	r4, lr
   1c964:	e50b0010 	str	r0, [fp, #-16]
   1c968:	e1a03004 	mov	r3, r4
   1c96c:	e30c0954 	movw	r0, #51540	; 0xc954
   1c970:	e3400001 	movt	r0, #1
   1c974:	e1a01003 	mov	r1, r3
   1c978:	ebffe367 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1c97c:	e51b3010 	ldr	r3, [fp, #-16]
   1c980:	e3530000 	cmp	r3, #0
   1c984:	1a000005 	bne	1c9a0 <DWHCIRegisterDump+0x4c>
   1c988:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   1c98c:	e3400002 	movt	r0, #2
   1c990:	e30e16c4 	movw	r1, #59076	; 0xe6c4
   1c994:	e3401002 	movt	r1, #2
   1c998:	e3a02082 	mov	r2, #130	; 0x82
   1c99c:	ebffe803 	bl	169b0 <uspi_assertion_failed>
	if (pThis->m_bValid)
   1c9a0:	e51b3010 	ldr	r3, [fp, #-16]
   1c9a4:	e5933000 	ldr	r3, [r3]
   1c9a8:	e3530000 	cmp	r3, #0
   1c9ac:	0a00000d 	beq	1c9e8 <DWHCIRegisterDump+0x94>
	{
		LogWrite ("dwhci", LOG_DEBUG,
			     "Register at 0x%X is 0x%X",
			     pThis->m_nAddress & 0xFFF, pThis->m_nBuffer);
   1c9b0:	e51b3010 	ldr	r3, [fp, #-16]
   1c9b4:	e5933004 	ldr	r3, [r3, #4]
void DWHCIRegisterDump (TDWHCIRegister *pThis)
{
	assert (pThis != 0);
	if (pThis->m_bValid)
	{
		LogWrite ("dwhci", LOG_DEBUG,
   1c9b8:	e7ebc053 	ubfx	ip, r3, #0, #12
   1c9bc:	e51b3010 	ldr	r3, [fp, #-16]
   1c9c0:	e5933008 	ldr	r3, [r3, #8]
   1c9c4:	e58d3000 	str	r3, [sp]
   1c9c8:	e30e075c 	movw	r0, #59228	; 0xe75c
   1c9cc:	e3400002 	movt	r0, #2
   1c9d0:	e3a01004 	mov	r1, #4
   1c9d4:	e30e2764 	movw	r2, #59236	; 0xe764
   1c9d8:	e3402002 	movt	r2, #2
   1c9dc:	e1a0300c 	mov	r3, ip
   1c9e0:	ebffe7da 	bl	16950 <LogWrite>
   1c9e4:	ea000008 	b	1ca0c <DWHCIRegisterDump+0xb8>
	}
	else
	{
		LogWrite ("dwhci", LOG_DEBUG,
			     "Register at 0x%X was not set",
			     pThis->m_nAddress & 0xFFF);
   1c9e8:	e51b3010 	ldr	r3, [fp, #-16]
   1c9ec:	e5933004 	ldr	r3, [r3, #4]
			     "Register at 0x%X is 0x%X",
			     pThis->m_nAddress & 0xFFF, pThis->m_nBuffer);
	}
	else
	{
		LogWrite ("dwhci", LOG_DEBUG,
   1c9f0:	e7eb3053 	ubfx	r3, r3, #0, #12
   1c9f4:	e30e075c 	movw	r0, #59228	; 0xe75c
   1c9f8:	e3400002 	movt	r0, #2
   1c9fc:	e3a01004 	mov	r1, #4
   1ca00:	e30e2780 	movw	r2, #59264	; 0xe780
   1ca04:	e3402002 	movt	r2, #2
   1ca08:	ebffe7d0 	bl	16950 <LogWrite>
   1ca0c:	e1a03004 	mov	r3, r4
   1ca10:	e30c0954 	movw	r0, #51540	; 0xc954
   1ca14:	e3400001 	movt	r0, #1
   1ca18:	e1a01003 	mov	r1, r3
   1ca1c:	ebffe390 	bl	15864 <__cyg_profile_func_exit>
			     "Register at 0x%X was not set",
			     pThis->m_nAddress & 0xFFF);
	}
}
   1ca20:	e24bd008 	sub	sp, fp, #8
   1ca24:	e8bd8810 	pop	{r4, fp, pc}

0001ca28 <DWHCITransferStageData>:
#include <uspi/dwhci.h>
#include <uspios.h>
#include <uspi/assert.h>

void DWHCITransferStageData (TDWHCITransferStageData *pThis, unsigned nChannel, TUSBRequest *pURB, boolean bIn, boolean bStatusStage)
{
   1ca28:	e92d4830 	push	{r4, r5, fp, lr}
   1ca2c:	e28db00c 	add	fp, sp, #12
   1ca30:	e24dd010 	sub	sp, sp, #16
   1ca34:	e1a0500e 	mov	r5, lr
   1ca38:	e50b0010 	str	r0, [fp, #-16]
   1ca3c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1ca40:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   1ca44:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   1ca48:	e1a03005 	mov	r3, r5
   1ca4c:	e30c0a28 	movw	r0, #51752	; 0xca28
   1ca50:	e3400001 	movt	r0, #1
   1ca54:	e1a01003 	mov	r1, r3
   1ca58:	ebffe32f 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1ca5c:	e51b3010 	ldr	r3, [fp, #-16]
   1ca60:	e3530000 	cmp	r3, #0
   1ca64:	1a000005 	bne	1ca80 <DWHCITransferStageData+0x58>
   1ca68:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1ca6c:	e3400002 	movt	r0, #2
   1ca70:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1ca74:	e3401002 	movt	r1, #2
   1ca78:	e3a0201e 	mov	r2, #30
   1ca7c:	ebffe7cb 	bl	169b0 <uspi_assertion_failed>

	pThis->m_nChannel = nChannel;
   1ca80:	e51b3010 	ldr	r3, [fp, #-16]
   1ca84:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1ca88:	e5832000 	str	r2, [r3]
	pThis->m_pURB = pURB;
   1ca8c:	e51b3010 	ldr	r3, [fp, #-16]
   1ca90:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ca94:	e5832004 	str	r2, [r3, #4]
	pThis->m_bIn = bIn;
   1ca98:	e51b3010 	ldr	r3, [fp, #-16]
   1ca9c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   1caa0:	e5832008 	str	r2, [r3, #8]
	pThis->m_bStatusStage = bStatusStage;
   1caa4:	e51b3010 	ldr	r3, [fp, #-16]
   1caa8:	e59b2004 	ldr	r2, [fp, #4]
   1caac:	e583200c 	str	r2, [r3, #12]
	pThis->m_bSplitComplete = FALSE;
   1cab0:	e51b3010 	ldr	r3, [fp, #-16]
   1cab4:	e3a02000 	mov	r2, #0
   1cab8:	e5832014 	str	r2, [r3, #20]
	pThis->m_nTotalBytesTransfered = 0;
   1cabc:	e51b3010 	ldr	r3, [fp, #-16]
   1cac0:	e3a02000 	mov	r2, #0
   1cac4:	e5832038 	str	r2, [r3, #56]	; 0x38
	pThis->m_nState = 0;
   1cac8:	e51b3010 	ldr	r3, [fp, #-16]
   1cacc:	e3a02000 	mov	r2, #0
   1cad0:	e583203c 	str	r2, [r3, #60]	; 0x3c
	pThis->m_nSubState = 0;
   1cad4:	e51b3010 	ldr	r3, [fp, #-16]
   1cad8:	e3a02000 	mov	r2, #0
   1cadc:	e5832040 	str	r2, [r3, #64]	; 0x40
	pThis->m_nTransactionStatus = 0;
   1cae0:	e51b3010 	ldr	r3, [fp, #-16]
   1cae4:	e3a02000 	mov	r2, #0
   1cae8:	e5832044 	str	r2, [r3, #68]	; 0x44
	pThis->m_pTempBuffer = 0;
   1caec:	e51b3010 	ldr	r3, [fp, #-16]
   1caf0:	e3a02000 	mov	r2, #0
   1caf4:	e5832048 	str	r2, [r3, #72]	; 0x48
	pThis->m_pFrameScheduler = 0;
   1caf8:	e51b3010 	ldr	r3, [fp, #-16]
   1cafc:	e3a02000 	mov	r2, #0
   1cb00:	e5832050 	str	r2, [r3, #80]	; 0x50

	assert (pThis->m_pURB != 0);
   1cb04:	e51b3010 	ldr	r3, [fp, #-16]
   1cb08:	e5933004 	ldr	r3, [r3, #4]
   1cb0c:	e3530000 	cmp	r3, #0
   1cb10:	1a000005 	bne	1cb2c <DWHCITransferStageData+0x104>
   1cb14:	e30e0814 	movw	r0, #59412	; 0xe814
   1cb18:	e3400002 	movt	r0, #2
   1cb1c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1cb20:	e3401002 	movt	r1, #2
   1cb24:	e3a0202c 	mov	r2, #44	; 0x2c
   1cb28:	ebffe7a0 	bl	169b0 <uspi_assertion_failed>

	pThis->m_pEndpoint = USBRequestGetEndpoint (pURB);
   1cb2c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cb30:	eb0012a9 	bl	215dc <USBRequestGetEndpoint>
   1cb34:	e1a02000 	mov	r2, r0
   1cb38:	e51b3010 	ldr	r3, [fp, #-16]
   1cb3c:	e583201c 	str	r2, [r3, #28]
	assert (pThis->m_pEndpoint != 0);
   1cb40:	e51b3010 	ldr	r3, [fp, #-16]
   1cb44:	e593301c 	ldr	r3, [r3, #28]
   1cb48:	e3530000 	cmp	r3, #0
   1cb4c:	1a000005 	bne	1cb68 <DWHCITransferStageData+0x140>
   1cb50:	e30e0828 	movw	r0, #59432	; 0xe828
   1cb54:	e3400002 	movt	r0, #2
   1cb58:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1cb5c:	e3401002 	movt	r1, #2
   1cb60:	e3a0202f 	mov	r2, #47	; 0x2f
   1cb64:	ebffe791 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pDevice = USBEndpointGetDevice (pThis->m_pEndpoint);
   1cb68:	e51b3010 	ldr	r3, [fp, #-16]
   1cb6c:	e593301c 	ldr	r3, [r3, #28]
   1cb70:	e1a00003 	mov	r0, r3
   1cb74:	eb001083 	bl	20d88 <USBEndpointGetDevice>
   1cb78:	e1a02000 	mov	r2, r0
   1cb7c:	e51b3010 	ldr	r3, [fp, #-16]
   1cb80:	e5832018 	str	r2, [r3, #24]
	assert (pThis->m_pDevice != 0);
   1cb84:	e51b3010 	ldr	r3, [fp, #-16]
   1cb88:	e5933018 	ldr	r3, [r3, #24]
   1cb8c:	e3530000 	cmp	r3, #0
   1cb90:	1a000005 	bne	1cbac <DWHCITransferStageData+0x184>
   1cb94:	e30e0840 	movw	r0, #59456	; 0xe840
   1cb98:	e3400002 	movt	r0, #2
   1cb9c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1cba0:	e3401002 	movt	r1, #2
   1cba4:	e3a02031 	mov	r2, #49	; 0x31
   1cba8:	ebffe780 	bl	169b0 <uspi_assertion_failed>

	pThis->m_Speed = USBDeviceGetSpeed (pThis->m_pDevice);
   1cbac:	e51b3010 	ldr	r3, [fp, #-16]
   1cbb0:	e5933018 	ldr	r3, [r3, #24]
   1cbb4:	e1a00003 	mov	r0, r3
   1cbb8:	eb000c8f 	bl	1fdfc <USBDeviceGetSpeed>
   1cbbc:	e1a03000 	mov	r3, r0
   1cbc0:	e1a02003 	mov	r2, r3
   1cbc4:	e51b3010 	ldr	r3, [fp, #-16]
   1cbc8:	e5c32020 	strb	r2, [r3, #32]
	pThis->m_nMaxPacketSize = USBEndpointGetMaxPacketSize (pThis->m_pEndpoint);
   1cbcc:	e51b3010 	ldr	r3, [fp, #-16]
   1cbd0:	e593301c 	ldr	r3, [r3, #28]
   1cbd4:	e1a00003 	mov	r0, r3
   1cbd8:	eb00110a 	bl	21008 <USBEndpointGetMaxPacketSize>
   1cbdc:	e1a02000 	mov	r2, r0
   1cbe0:	e51b3010 	ldr	r3, [fp, #-16]
   1cbe4:	e5832024 	str	r2, [r3, #36]	; 0x24
	
	pThis->m_bSplitTransaction =    USBDeviceGetHubAddress (pThis->m_pDevice) != 0
   1cbe8:	e51b3010 	ldr	r3, [fp, #-16]
   1cbec:	e5933018 	ldr	r3, [r3, #24]
   1cbf0:	e1a00003 	mov	r0, r3
   1cbf4:	eb000c9e 	bl	1fe74 <USBDeviceGetHubAddress>
   1cbf8:	e1a03000 	mov	r3, r0
				     && pThis->m_Speed != USBSpeedHigh;
   1cbfc:	e3530000 	cmp	r3, #0
   1cc00:	0a000005 	beq	1cc1c <DWHCITransferStageData+0x1f4>
   1cc04:	e51b3010 	ldr	r3, [fp, #-16]
   1cc08:	e5d33020 	ldrb	r3, [r3, #32]
   1cc0c:	e3530002 	cmp	r3, #2
   1cc10:	0a000001 	beq	1cc1c <DWHCITransferStageData+0x1f4>
   1cc14:	e3a02001 	mov	r2, #1
   1cc18:	ea000000 	b	1cc20 <DWHCITransferStageData+0x1f8>
   1cc1c:	e3a02000 	mov	r2, #0
	assert (pThis->m_pDevice != 0);

	pThis->m_Speed = USBDeviceGetSpeed (pThis->m_pDevice);
	pThis->m_nMaxPacketSize = USBEndpointGetMaxPacketSize (pThis->m_pEndpoint);
	
	pThis->m_bSplitTransaction =    USBDeviceGetHubAddress (pThis->m_pDevice) != 0
   1cc20:	e51b3010 	ldr	r3, [fp, #-16]
   1cc24:	e5832010 	str	r2, [r3, #16]
				     && pThis->m_Speed != USBSpeedHigh;

	if (!bStatusStage)
   1cc28:	e59b3004 	ldr	r3, [fp, #4]
   1cc2c:	e3530000 	cmp	r3, #0
   1cc30:	1a000049 	bne	1cd5c <DWHCITransferStageData+0x334>
	{
		if (USBEndpointGetNextPID (pThis->m_pEndpoint, bStatusStage) == USBPIDSetup)
   1cc34:	e51b3010 	ldr	r3, [fp, #-16]
   1cc38:	e593301c 	ldr	r3, [r3, #28]
   1cc3c:	e1a00003 	mov	r0, r3
   1cc40:	e59b1004 	ldr	r1, [fp, #4]
   1cc44:	eb001135 	bl	21120 <USBEndpointGetNextPID>
   1cc48:	e1a03000 	mov	r3, r0
   1cc4c:	e3530000 	cmp	r3, #0
   1cc50:	1a000008 	bne	1cc78 <DWHCITransferStageData+0x250>
		{
			pThis->m_pBufferPointer = USBRequestGetSetupData (pURB);
   1cc54:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cc58:	eb001309 	bl	21884 <USBRequestGetSetupData>
   1cc5c:	e1a02000 	mov	r2, r0
   1cc60:	e51b3010 	ldr	r3, [fp, #-16]
   1cc64:	e583204c 	str	r2, [r3, #76]	; 0x4c
			pThis->m_nTransferSize = sizeof (TSetupData);
   1cc68:	e51b3010 	ldr	r3, [fp, #-16]
   1cc6c:	e3a02008 	mov	r2, #8
   1cc70:	e5832028 	str	r2, [r3, #40]	; 0x28
   1cc74:	ea000009 	b	1cca0 <DWHCITransferStageData+0x278>
		}
		else
		{
			pThis->m_pBufferPointer = USBRequestGetBuffer (pURB);
   1cc78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cc7c:	eb001335 	bl	21958 <USBRequestGetBuffer>
   1cc80:	e1a02000 	mov	r2, r0
   1cc84:	e51b3010 	ldr	r3, [fp, #-16]
   1cc88:	e583204c 	str	r2, [r3, #76]	; 0x4c
			pThis->m_nTransferSize = USBRequestGetBufLen (pURB);
   1cc8c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cc90:	eb00135c 	bl	21a08 <USBRequestGetBufLen>
   1cc94:	e1a02000 	mov	r2, r0
   1cc98:	e51b3010 	ldr	r3, [fp, #-16]
   1cc9c:	e5832028 	str	r2, [r3, #40]	; 0x28
		}

		pThis->m_nPackets = (pThis->m_nTransferSize + pThis->m_nMaxPacketSize - 1) / pThis->m_nMaxPacketSize;
   1cca0:	e51b3010 	ldr	r3, [fp, #-16]
   1cca4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   1cca8:	e51b3010 	ldr	r3, [fp, #-16]
   1ccac:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1ccb0:	e0823003 	add	r3, r2, r3
   1ccb4:	e2432001 	sub	r2, r3, #1
   1ccb8:	e51b3010 	ldr	r3, [fp, #-16]
   1ccbc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1ccc0:	e1a00002 	mov	r0, r2
   1ccc4:	e1a01003 	mov	r1, r3
   1ccc8:	eb004372 	bl	2da98 <__aeabi_uidiv>
   1cccc:	e1a03000 	mov	r3, r0
   1ccd0:	e1a02003 	mov	r2, r3
   1ccd4:	e51b3010 	ldr	r3, [fp, #-16]
   1ccd8:	e583202c 	str	r2, [r3, #44]	; 0x2c
		
		if (pThis->m_bSplitTransaction)
   1ccdc:	e51b3010 	ldr	r3, [fp, #-16]
   1cce0:	e5933010 	ldr	r3, [r3, #16]
   1cce4:	e3530000 	cmp	r3, #0
   1cce8:	0a000012 	beq	1cd38 <DWHCITransferStageData+0x310>
		{
			if (pThis->m_nTransferSize > pThis->m_nMaxPacketSize)
   1ccec:	e51b3010 	ldr	r3, [fp, #-16]
   1ccf0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   1ccf4:	e51b3010 	ldr	r3, [fp, #-16]
   1ccf8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1ccfc:	e1520003 	cmp	r2, r3
   1cd00:	9a000004 	bls	1cd18 <DWHCITransferStageData+0x2f0>
			{
				pThis->m_nBytesPerTransaction = pThis->m_nMaxPacketSize;
   1cd04:	e51b3010 	ldr	r3, [fp, #-16]
   1cd08:	e5932024 	ldr	r2, [r3, #36]	; 0x24
   1cd0c:	e51b3010 	ldr	r3, [fp, #-16]
   1cd10:	e5832030 	str	r2, [r3, #48]	; 0x30
   1cd14:	ea000003 	b	1cd28 <DWHCITransferStageData+0x300>
			}
			else
			{
				pThis->m_nBytesPerTransaction = pThis->m_nTransferSize;
   1cd18:	e51b3010 	ldr	r3, [fp, #-16]
   1cd1c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   1cd20:	e51b3010 	ldr	r3, [fp, #-16]
   1cd24:	e5832030 	str	r2, [r3, #48]	; 0x30
			}
			
			pThis->m_nPacketsPerTransaction = 1;
   1cd28:	e51b3010 	ldr	r3, [fp, #-16]
   1cd2c:	e3a02001 	mov	r2, #1
   1cd30:	e5832034 	str	r2, [r3, #52]	; 0x34
   1cd34:	ea000032 	b	1ce04 <DWHCITransferStageData+0x3dc>
		}
		else
		{
			pThis->m_nBytesPerTransaction = pThis->m_nTransferSize;
   1cd38:	e51b3010 	ldr	r3, [fp, #-16]
   1cd3c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   1cd40:	e51b3010 	ldr	r3, [fp, #-16]
   1cd44:	e5832030 	str	r2, [r3, #48]	; 0x30
			pThis->m_nPacketsPerTransaction = pThis->m_nPackets;
   1cd48:	e51b3010 	ldr	r3, [fp, #-16]
   1cd4c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1cd50:	e51b3010 	ldr	r3, [fp, #-16]
   1cd54:	e5832034 	str	r2, [r3, #52]	; 0x34
   1cd58:	ea000029 	b	1ce04 <DWHCITransferStageData+0x3dc>
		}
	}
	else
	{
		assert (pThis->m_pTempBuffer == 0);
   1cd5c:	e51b3010 	ldr	r3, [fp, #-16]
   1cd60:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1cd64:	e3530000 	cmp	r3, #0
   1cd68:	0a000005 	beq	1cd84 <DWHCITransferStageData+0x35c>
   1cd6c:	e30e0858 	movw	r0, #59480	; 0xe858
   1cd70:	e3400002 	movt	r0, #2
   1cd74:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1cd78:	e3401002 	movt	r1, #2
   1cd7c:	e3a0205d 	mov	r2, #93	; 0x5d
   1cd80:	ebffe70a 	bl	169b0 <uspi_assertion_failed>
		pThis->m_pTempBuffer = (u32 *) malloc (sizeof (u32));
   1cd84:	e3a00004 	mov	r0, #4
   1cd88:	ebffe732 	bl	16a58 <malloc>
   1cd8c:	e1a03000 	mov	r3, r0
   1cd90:	e1a02003 	mov	r2, r3
   1cd94:	e51b3010 	ldr	r3, [fp, #-16]
   1cd98:	e5832048 	str	r2, [r3, #72]	; 0x48
		assert (pThis->m_pTempBuffer != 0);
   1cd9c:	e51b3010 	ldr	r3, [fp, #-16]
   1cda0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1cda4:	e3530000 	cmp	r3, #0
   1cda8:	1a000005 	bne	1cdc4 <DWHCITransferStageData+0x39c>
   1cdac:	e30e0874 	movw	r0, #59508	; 0xe874
   1cdb0:	e3400002 	movt	r0, #2
   1cdb4:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1cdb8:	e3401002 	movt	r1, #2
   1cdbc:	e3a0205f 	mov	r2, #95	; 0x5f
   1cdc0:	ebffe6fa 	bl	169b0 <uspi_assertion_failed>
		pThis->m_pBufferPointer = pThis->m_pTempBuffer;
   1cdc4:	e51b3010 	ldr	r3, [fp, #-16]
   1cdc8:	e5932048 	ldr	r2, [r3, #72]	; 0x48
   1cdcc:	e51b3010 	ldr	r3, [fp, #-16]
   1cdd0:	e583204c 	str	r2, [r3, #76]	; 0x4c

		pThis->m_nTransferSize = 0;
   1cdd4:	e51b3010 	ldr	r3, [fp, #-16]
   1cdd8:	e3a02000 	mov	r2, #0
   1cddc:	e5832028 	str	r2, [r3, #40]	; 0x28
		pThis->m_nBytesPerTransaction = 0;
   1cde0:	e51b3010 	ldr	r3, [fp, #-16]
   1cde4:	e3a02000 	mov	r2, #0
   1cde8:	e5832030 	str	r2, [r3, #48]	; 0x30
		pThis->m_nPackets = 1;
   1cdec:	e51b3010 	ldr	r3, [fp, #-16]
   1cdf0:	e3a02001 	mov	r2, #1
   1cdf4:	e583202c 	str	r2, [r3, #44]	; 0x2c
		pThis->m_nPacketsPerTransaction = 1;
   1cdf8:	e51b3010 	ldr	r3, [fp, #-16]
   1cdfc:	e3a02001 	mov	r2, #1
   1ce00:	e5832034 	str	r2, [r3, #52]	; 0x34
	}

	assert (pThis->m_pBufferPointer != 0);
   1ce04:	e51b3010 	ldr	r3, [fp, #-16]
   1ce08:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   1ce0c:	e3530000 	cmp	r3, #0
   1ce10:	1a000005 	bne	1ce2c <DWHCITransferStageData+0x404>
   1ce14:	e30e0890 	movw	r0, #59536	; 0xe890
   1ce18:	e3400002 	movt	r0, #2
   1ce1c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1ce20:	e3401002 	movt	r1, #2
   1ce24:	e3a02068 	mov	r2, #104	; 0x68
   1ce28:	ebffe6e0 	bl	169b0 <uspi_assertion_failed>
	assert (((u32) pThis->m_pBufferPointer & 3) == 0);
   1ce2c:	e51b3010 	ldr	r3, [fp, #-16]
   1ce30:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   1ce34:	e2033003 	and	r3, r3, #3
   1ce38:	e3530000 	cmp	r3, #0
   1ce3c:	0a000005 	beq	1ce58 <DWHCITransferStageData+0x430>
   1ce40:	e30e08b0 	movw	r0, #59568	; 0xe8b0
   1ce44:	e3400002 	movt	r0, #2
   1ce48:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1ce4c:	e3401002 	movt	r1, #2
   1ce50:	e3a02069 	mov	r2, #105	; 0x69
   1ce54:	ebffe6d5 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_bSplitTransaction)
   1ce58:	e51b3010 	ldr	r3, [fp, #-16]
   1ce5c:	e5933010 	ldr	r3, [r3, #16]
   1ce60:	e3530000 	cmp	r3, #0
   1ce64:	0a000024 	beq	1cefc <DWHCITransferStageData+0x4d4>
	{
		if (DWHCITransferStageDataIsPeriodic (pThis))
   1ce68:	e51b0010 	ldr	r0, [fp, #-16]
   1ce6c:	eb0001f1 	bl	1d638 <DWHCITransferStageDataIsPeriodic>
   1ce70:	e1a03000 	mov	r3, r0
   1ce74:	e3530000 	cmp	r3, #0
   1ce78:	0a00000a 	beq	1cea8 <DWHCITransferStageData+0x480>
		{
			pThis->m_pFrameScheduler = (TDWHCIFrameScheduler *) malloc (sizeof (TDWHCIFrameSchedulerPeriodic));
   1ce7c:	e3a00024 	mov	r0, #36	; 0x24
   1ce80:	ebffe6f4 	bl	16a58 <malloc>
   1ce84:	e1a03000 	mov	r3, r0
   1ce88:	e1a02003 	mov	r2, r3
   1ce8c:	e51b3010 	ldr	r3, [fp, #-16]
   1ce90:	e5832050 	str	r2, [r3, #80]	; 0x50
			DWHCIFrameSchedulerPeriodic ((TDWHCIFrameSchedulerPeriodic *) pThis->m_pFrameScheduler);
   1ce94:	e51b3010 	ldr	r3, [fp, #-16]
   1ce98:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   1ce9c:	e1a00003 	mov	r0, r3
   1cea0:	eb002ccf 	bl	281e4 <DWHCIFrameSchedulerPeriodic>
   1cea4:	ea000009 	b	1ced0 <DWHCITransferStageData+0x4a8>
		}
		else
		{
			pThis->m_pFrameScheduler = (TDWHCIFrameScheduler *) malloc (sizeof (TDWHCIFrameSchedulerNonPeriodic));
   1cea8:	e3a00020 	mov	r0, #32
   1ceac:	ebffe6e9 	bl	16a58 <malloc>
   1ceb0:	e1a03000 	mov	r3, r0
   1ceb4:	e1a02003 	mov	r2, r3
   1ceb8:	e51b3010 	ldr	r3, [fp, #-16]
   1cebc:	e5832050 	str	r2, [r3, #80]	; 0x50
			DWHCIFrameSchedulerNonPeriodic ((TDWHCIFrameSchedulerNonPeriodic *) pThis->m_pFrameScheduler);
   1cec0:	e51b3010 	ldr	r3, [fp, #-16]
   1cec4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   1cec8:	e1a00003 	mov	r0, r3
   1cecc:	eb002b6f 	bl	27c90 <DWHCIFrameSchedulerNonPeriodic>
		}

		assert (pThis->m_pFrameScheduler != 0);
   1ced0:	e51b3010 	ldr	r3, [fp, #-16]
   1ced4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   1ced8:	e3530000 	cmp	r3, #0
   1cedc:	1a000029 	bne	1cf88 <DWHCITransferStageData+0x560>
   1cee0:	e30e08dc 	movw	r0, #59612	; 0xe8dc
   1cee4:	e3400002 	movt	r0, #2
   1cee8:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1ceec:	e3401002 	movt	r1, #2
   1cef0:	e3a02078 	mov	r2, #120	; 0x78
   1cef4:	ebffe6ad 	bl	169b0 <uspi_assertion_failed>
   1cef8:	ea000022 	b	1cf88 <DWHCITransferStageData+0x560>
	}
	else
	{
		if (   USBDeviceGetHubAddress (pThis->m_pDevice) == 0
   1cefc:	e51b3010 	ldr	r3, [fp, #-16]
   1cf00:	e5933018 	ldr	r3, [r3, #24]
   1cf04:	e1a00003 	mov	r0, r3
   1cf08:	eb000bd9 	bl	1fe74 <USBDeviceGetHubAddress>
   1cf0c:	e1a03000 	mov	r3, r0
   1cf10:	e3530000 	cmp	r3, #0
   1cf14:	1a00001b 	bne	1cf88 <DWHCITransferStageData+0x560>
		    && pThis->m_Speed != USBSpeedHigh)
   1cf18:	e51b3010 	ldr	r3, [fp, #-16]
   1cf1c:	e5d33020 	ldrb	r3, [r3, #32]
   1cf20:	e3530002 	cmp	r3, #2
   1cf24:	0a000017 	beq	1cf88 <DWHCITransferStageData+0x560>
		{
			pThis->m_pFrameScheduler = (TDWHCIFrameScheduler *) malloc (sizeof (TDWHCIFrameSchedulerNoSplit));
   1cf28:	e3a00020 	mov	r0, #32
   1cf2c:	ebffe6c9 	bl	16a58 <malloc>
   1cf30:	e1a03000 	mov	r3, r0
   1cf34:	e1a02003 	mov	r2, r3
   1cf38:	e51b3010 	ldr	r3, [fp, #-16]
   1cf3c:	e5832050 	str	r2, [r3, #80]	; 0x50
			DWHCIFrameSchedulerNoSplit ((TDWHCIFrameSchedulerNoSplit *) pThis->m_pFrameScheduler, DWHCITransferStageDataIsPeriodic (pThis));
   1cf40:	e51b3010 	ldr	r3, [fp, #-16]
   1cf44:	e5934050 	ldr	r4, [r3, #80]	; 0x50
   1cf48:	e51b0010 	ldr	r0, [fp, #-16]
   1cf4c:	eb0001b9 	bl	1d638 <DWHCITransferStageDataIsPeriodic>
   1cf50:	e1a03000 	mov	r3, r0
   1cf54:	e1a00004 	mov	r0, r4
   1cf58:	e1a01003 	mov	r1, r3
   1cf5c:	eb0037de 	bl	2aedc <DWHCIFrameSchedulerNoSplit>
			assert (pThis->m_pFrameScheduler != 0);
   1cf60:	e51b3010 	ldr	r3, [fp, #-16]
   1cf64:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   1cf68:	e3530000 	cmp	r3, #0
   1cf6c:	1a000005 	bne	1cf88 <DWHCITransferStageData+0x560>
   1cf70:	e30e08dc 	movw	r0, #59612	; 0xe8dc
   1cf74:	e3400002 	movt	r0, #2
   1cf78:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1cf7c:	e3401002 	movt	r1, #2
   1cf80:	e3a02081 	mov	r2, #129	; 0x81
   1cf84:	ebffe689 	bl	169b0 <uspi_assertion_failed>
   1cf88:	e1a03005 	mov	r3, r5
   1cf8c:	e30c0a28 	movw	r0, #51752	; 0xca28
   1cf90:	e3400001 	movt	r0, #1
   1cf94:	e1a01003 	mov	r1, r3
   1cf98:	ebffe231 	bl	15864 <__cyg_profile_func_exit>
		}
	}
}
   1cf9c:	e24bd00c 	sub	sp, fp, #12
   1cfa0:	e8bd8830 	pop	{r4, r5, fp, pc}

0001cfa4 <_DWHCITransferStageData>:

void _DWHCITransferStageData (TDWHCITransferStageData *pThis)
{
   1cfa4:	e92d4810 	push	{r4, fp, lr}
   1cfa8:	e28db008 	add	fp, sp, #8
   1cfac:	e24dd00c 	sub	sp, sp, #12
   1cfb0:	e1a0400e 	mov	r4, lr
   1cfb4:	e50b0010 	str	r0, [fp, #-16]
   1cfb8:	e1a03004 	mov	r3, r4
   1cfbc:	e30c0fa4 	movw	r0, #53156	; 0xcfa4
   1cfc0:	e3400001 	movt	r0, #1
   1cfc4:	e1a01003 	mov	r1, r3
   1cfc8:	ebffe1d3 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1cfcc:	e51b3010 	ldr	r3, [fp, #-16]
   1cfd0:	e3530000 	cmp	r3, #0
   1cfd4:	1a000005 	bne	1cff0 <_DWHCITransferStageData+0x4c>
   1cfd8:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1cfdc:	e3400002 	movt	r0, #2
   1cfe0:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1cfe4:	e3401002 	movt	r1, #2
   1cfe8:	e3a02088 	mov	r2, #136	; 0x88
   1cfec:	ebffe66f 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pFrameScheduler != 0)
   1cff0:	e51b3010 	ldr	r3, [fp, #-16]
   1cff4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   1cff8:	e3530000 	cmp	r3, #0
   1cffc:	0a00000d 	beq	1d038 <_DWHCITransferStageData+0x94>
	{
		pThis->m_pFrameScheduler->_DWHCIFrameScheduler (pThis->m_pFrameScheduler);
   1d000:	e51b3010 	ldr	r3, [fp, #-16]
   1d004:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   1d008:	e5933000 	ldr	r3, [r3]
   1d00c:	e51b2010 	ldr	r2, [fp, #-16]
   1d010:	e5922050 	ldr	r2, [r2, #80]	; 0x50
   1d014:	e1a00002 	mov	r0, r2
   1d018:	e12fff33 	blx	r3
		free (pThis->m_pFrameScheduler);
   1d01c:	e51b3010 	ldr	r3, [fp, #-16]
   1d020:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   1d024:	e1a00003 	mov	r0, r3
   1d028:	ebffe6a0 	bl	16ab0 <free>
		pThis->m_pFrameScheduler = 0;
   1d02c:	e51b3010 	ldr	r3, [fp, #-16]
   1d030:	e3a02000 	mov	r2, #0
   1d034:	e5832050 	str	r2, [r3, #80]	; 0x50
	}

	pThis->m_pBufferPointer = 0;
   1d038:	e51b3010 	ldr	r3, [fp, #-16]
   1d03c:	e3a02000 	mov	r2, #0
   1d040:	e583204c 	str	r2, [r3, #76]	; 0x4c

	if (pThis->m_pTempBuffer != 0)
   1d044:	e51b3010 	ldr	r3, [fp, #-16]
   1d048:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1d04c:	e3530000 	cmp	r3, #0
   1d050:	0a000006 	beq	1d070 <_DWHCITransferStageData+0xcc>
	{
		free (pThis->m_pTempBuffer);
   1d054:	e51b3010 	ldr	r3, [fp, #-16]
   1d058:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1d05c:	e1a00003 	mov	r0, r3
   1d060:	ebffe692 	bl	16ab0 <free>
		pThis->m_pTempBuffer = 0;
   1d064:	e51b3010 	ldr	r3, [fp, #-16]
   1d068:	e3a02000 	mov	r2, #0
   1d06c:	e5832048 	str	r2, [r3, #72]	; 0x48
	}

	pThis->m_pEndpoint = 0;
   1d070:	e51b3010 	ldr	r3, [fp, #-16]
   1d074:	e3a02000 	mov	r2, #0
   1d078:	e583201c 	str	r2, [r3, #28]
	pThis->m_pDevice = 0;
   1d07c:	e51b3010 	ldr	r3, [fp, #-16]
   1d080:	e3a02000 	mov	r2, #0
   1d084:	e5832018 	str	r2, [r3, #24]
	pThis->m_pURB = 0;
   1d088:	e51b3010 	ldr	r3, [fp, #-16]
   1d08c:	e3a02000 	mov	r2, #0
   1d090:	e5832004 	str	r2, [r3, #4]
   1d094:	e1a03004 	mov	r3, r4
   1d098:	e30c0fa4 	movw	r0, #53156	; 0xcfa4
   1d09c:	e3400001 	movt	r0, #1
   1d0a0:	e1a01003 	mov	r1, r3
   1d0a4:	ebffe1ee 	bl	15864 <__cyg_profile_func_exit>
}
   1d0a8:	e24bd008 	sub	sp, fp, #8
   1d0ac:	e8bd8810 	pop	{r4, fp, pc}

0001d0b0 <DWHCITransferStageDataTransactionComplete>:

void DWHCITransferStageDataTransactionComplete (TDWHCITransferStageData *pThis, u32 nStatus, u32 nPacketsLeft, u32 nBytesLeft)
{
   1d0b0:	e92d4830 	push	{r4, r5, fp, lr}
   1d0b4:	e28db00c 	add	fp, sp, #12
   1d0b8:	e24dd018 	sub	sp, sp, #24
   1d0bc:	e1a0500e 	mov	r5, lr
   1d0c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1d0c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1d0c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   1d0cc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   1d0d0:	e1a03005 	mov	r3, r5
   1d0d4:	e30d00b0 	movw	r0, #53424	; 0xd0b0
   1d0d8:	e3400001 	movt	r0, #1
   1d0dc:	e1a01003 	mov	r1, r3
   1d0e0:	ebffe18d 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d0e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d0e8:	e3530000 	cmp	r3, #0
   1d0ec:	1a000005 	bne	1d108 <DWHCITransferStageDataTransactionComplete+0x58>
   1d0f0:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d0f4:	e3400002 	movt	r0, #2
   1d0f8:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d0fc:	e3401002 	movt	r1, #2
   1d100:	e3a020a0 	mov	r2, #160	; 0xa0
   1d104:	ebffe629 	bl	169b0 <uspi_assertion_failed>
			       "Transaction complete (status 0x%X, packets 0x%X, bytes 0x%X)",
			       nStatus, nPacketsLeft, nBytesLeft);
	}
#endif

	pThis->m_nTransactionStatus = nStatus;
   1d108:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d10c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d110:	e5832044 	str	r2, [r3, #68]	; 0x44

	if (  nStatus
	    & (  DWHCI_HOST_CHAN_INT_ERROR_MASK
   1d114:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d118:	e30037dc 	movw	r3, #2012	; 0x7dc
   1d11c:	e0033002 	and	r3, r3, r2
	}
#endif

	pThis->m_nTransactionStatus = nStatus;

	if (  nStatus
   1d120:	e3530000 	cmp	r3, #0
   1d124:	0a000001 	beq	1d130 <DWHCITransferStageDataTransactionComplete+0x80>
   1d128:	e3a04000 	mov	r4, #0
	    & (  DWHCI_HOST_CHAN_INT_ERROR_MASK
	       | DWHCI_HOST_CHAN_INT_NAK
	       | DWHCI_HOST_CHAN_INT_NYET))
	{
		return;
   1d12c:	ea000067 	b	1d2d0 <DWHCITransferStageDataTransactionComplete+0x220>
	}

	u32 nPacketsTransfered = pThis->m_nPacketsPerTransaction - nPacketsLeft;
   1d130:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d134:	e5932034 	ldr	r2, [r3, #52]	; 0x34
   1d138:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d13c:	e0633002 	rsb	r3, r3, r2
   1d140:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	u32 nBytesTransfered = pThis->m_nBytesPerTransaction - nBytesLeft;
   1d144:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d148:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   1d14c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d150:	e0633002 	rsb	r3, r3, r2
   1d154:	e50b3010 	str	r3, [fp, #-16]

	if (   pThis->m_bSplitTransaction
   1d158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d15c:	e5933010 	ldr	r3, [r3, #16]
   1d160:	e3530000 	cmp	r3, #0
   1d164:	0a00000f 	beq	1d1a8 <DWHCITransferStageDataTransactionComplete+0xf8>
	    && pThis->m_bSplitComplete
   1d168:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d16c:	e5933014 	ldr	r3, [r3, #20]
   1d170:	e3530000 	cmp	r3, #0
   1d174:	0a00000b 	beq	1d1a8 <DWHCITransferStageDataTransactionComplete+0xf8>
	    && nBytesTransfered == 0
   1d178:	e51b3010 	ldr	r3, [fp, #-16]
   1d17c:	e3530000 	cmp	r3, #0
   1d180:	1a000008 	bne	1d1a8 <DWHCITransferStageDataTransactionComplete+0xf8>
	    && pThis->m_nBytesPerTransaction > 0)
   1d184:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d188:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   1d18c:	e3530000 	cmp	r3, #0
   1d190:	0a000004 	beq	1d1a8 <DWHCITransferStageDataTransactionComplete+0xf8>
	{
		nBytesTransfered = pThis->m_nMaxPacketSize * nPacketsTransfered;
   1d194:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d198:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1d19c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1d1a0:	e0030392 	mul	r3, r2, r3
   1d1a4:	e50b3010 	str	r3, [fp, #-16]
	}
	
	pThis->m_nTotalBytesTransfered += nBytesTransfered;
   1d1a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d1ac:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1d1b0:	e51b3010 	ldr	r3, [fp, #-16]
   1d1b4:	e0822003 	add	r2, r2, r3
   1d1b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d1bc:	e5832038 	str	r2, [r3, #56]	; 0x38
	pThis->m_pBufferPointer = (u8 *) pThis->m_pBufferPointer + nBytesTransfered;
   1d1c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d1c4:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
   1d1c8:	e51b3010 	ldr	r3, [fp, #-16]
   1d1cc:	e0822003 	add	r2, r2, r3
   1d1d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d1d4:	e583204c 	str	r2, [r3, #76]	; 0x4c
	
	if (   !pThis->m_bSplitTransaction
   1d1d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d1dc:	e5933010 	ldr	r3, [r3, #16]
   1d1e0:	e3530000 	cmp	r3, #0
   1d1e4:	0a000003 	beq	1d1f8 <DWHCITransferStageDataTransactionComplete+0x148>
	    || pThis->m_bSplitComplete)
   1d1e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d1ec:	e5933014 	ldr	r3, [r3, #20]
   1d1f0:	e3530000 	cmp	r3, #0
   1d1f4:	0a000007 	beq	1d218 <DWHCITransferStageDataTransactionComplete+0x168>
	{
		USBEndpointSkipPID (pThis->m_pEndpoint, nPacketsTransfered, pThis->m_bStatusStage);
   1d1f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d1fc:	e593201c 	ldr	r2, [r3, #28]
   1d200:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d204:	e593300c 	ldr	r3, [r3, #12]
   1d208:	e1a00002 	mov	r0, r2
   1d20c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1d210:	e1a02003 	mov	r2, r3
   1d214:	eb000fef 	bl	211d8 <USBEndpointSkipPID>
	}

	assert (nPacketsTransfered <= pThis->m_nPackets);
   1d218:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d21c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1d220:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1d224:	e1520003 	cmp	r2, r3
   1d228:	2a000005 	bcs	1d244 <DWHCITransferStageDataTransactionComplete+0x194>
   1d22c:	e30e08fc 	movw	r0, #59644	; 0xe8fc
   1d230:	e3400002 	movt	r0, #2
   1d234:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d238:	e3401002 	movt	r1, #2
   1d23c:	e3a020c9 	mov	r2, #201	; 0xc9
   1d240:	ebffe5da 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nPackets -= nPacketsTransfered;
   1d244:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d248:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1d24c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1d250:	e0632002 	rsb	r2, r3, r2
   1d254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d258:	e583202c 	str	r2, [r3, #44]	; 0x2c

	// if (pThis->m_nTotalBytesTransfered > pThis->m_nTransferSize) this will be false:
	if (pThis->m_nTransferSize - pThis->m_nTotalBytesTransfered < pThis->m_nBytesPerTransaction)
   1d25c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d260:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   1d264:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d268:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1d26c:	e0632002 	rsb	r2, r3, r2
   1d270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d274:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   1d278:	e1520003 	cmp	r2, r3
   1d27c:	2a000012 	bcs	1d2cc <DWHCITransferStageDataTransactionComplete+0x21c>
	{
		assert (pThis->m_nTotalBytesTransfered <= pThis->m_nTransferSize);
   1d280:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d284:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1d288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d28c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   1d290:	e1520003 	cmp	r2, r3
   1d294:	9a000005 	bls	1d2b0 <DWHCITransferStageDataTransactionComplete+0x200>
   1d298:	e30e0924 	movw	r0, #59684	; 0xe924
   1d29c:	e3400002 	movt	r0, #2
   1d2a0:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d2a4:	e3401002 	movt	r1, #2
   1d2a8:	e3a020cf 	mov	r2, #207	; 0xcf
   1d2ac:	ebffe5bf 	bl	169b0 <uspi_assertion_failed>
		pThis->m_nBytesPerTransaction = pThis->m_nTransferSize - pThis->m_nTotalBytesTransfered;
   1d2b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d2b4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   1d2b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d2bc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1d2c0:	e0632002 	rsb	r2, r3, r2
   1d2c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d2c8:	e5832030 	str	r2, [r3, #48]	; 0x30
   1d2cc:	e3a04001 	mov	r4, #1
   1d2d0:	e1a03005 	mov	r3, r5
   1d2d4:	e30d00b0 	movw	r0, #53424	; 0xd0b0
   1d2d8:	e3400001 	movt	r0, #1
   1d2dc:	e1a01003 	mov	r1, r3
   1d2e0:	ebffe15f 	bl	15864 <__cyg_profile_func_exit>
   1d2e4:	e3540001 	cmp	r4, #1
	}
}
   1d2e8:	e24bd00c 	sub	sp, fp, #12
   1d2ec:	e8bd8830 	pop	{r4, r5, fp, pc}

0001d2f0 <DWHCITransferStageDataSetSplitComplete>:

void DWHCITransferStageDataSetSplitComplete (TDWHCITransferStageData *pThis, boolean bComplete)
{
   1d2f0:	e92d4810 	push	{r4, fp, lr}
   1d2f4:	e28db008 	add	fp, sp, #8
   1d2f8:	e24dd00c 	sub	sp, sp, #12
   1d2fc:	e1a0400e 	mov	r4, lr
   1d300:	e50b0010 	str	r0, [fp, #-16]
   1d304:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1d308:	e1a03004 	mov	r3, r4
   1d30c:	e30d02f0 	movw	r0, #54000	; 0xd2f0
   1d310:	e3400001 	movt	r0, #1
   1d314:	e1a01003 	mov	r1, r3
   1d318:	ebffe0ff 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d31c:	e51b3010 	ldr	r3, [fp, #-16]
   1d320:	e3530000 	cmp	r3, #0
   1d324:	1a000005 	bne	1d340 <DWHCITransferStageDataSetSplitComplete+0x50>
   1d328:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d32c:	e3400002 	movt	r0, #2
   1d330:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d334:	e3401002 	movt	r1, #2
   1d338:	e3a020d6 	mov	r2, #214	; 0xd6
   1d33c:	ebffe59b 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bSplitTransaction);
   1d340:	e51b3010 	ldr	r3, [fp, #-16]
   1d344:	e5933010 	ldr	r3, [r3, #16]
   1d348:	e3530000 	cmp	r3, #0
   1d34c:	1a000005 	bne	1d368 <DWHCITransferStageDataSetSplitComplete+0x78>
   1d350:	e30e0960 	movw	r0, #59744	; 0xe960
   1d354:	e3400002 	movt	r0, #2
   1d358:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d35c:	e3401002 	movt	r1, #2
   1d360:	e3a020d7 	mov	r2, #215	; 0xd7
   1d364:	ebffe591 	bl	169b0 <uspi_assertion_failed>
	
	pThis->m_bSplitComplete = bComplete;
   1d368:	e51b3010 	ldr	r3, [fp, #-16]
   1d36c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1d370:	e5832014 	str	r2, [r3, #20]
   1d374:	e1a03004 	mov	r3, r4
   1d378:	e30d02f0 	movw	r0, #54000	; 0xd2f0
   1d37c:	e3400001 	movt	r0, #1
   1d380:	e1a01003 	mov	r1, r3
   1d384:	ebffe136 	bl	15864 <__cyg_profile_func_exit>
}
   1d388:	e24bd008 	sub	sp, fp, #8
   1d38c:	e8bd8810 	pop	{r4, fp, pc}

0001d390 <DWHCITransferStageDataSetState>:

void DWHCITransferStageDataSetState (TDWHCITransferStageData *pThis, unsigned nState)
{
   1d390:	e92d4810 	push	{r4, fp, lr}
   1d394:	e28db008 	add	fp, sp, #8
   1d398:	e24dd00c 	sub	sp, sp, #12
   1d39c:	e1a0400e 	mov	r4, lr
   1d3a0:	e50b0010 	str	r0, [fp, #-16]
   1d3a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1d3a8:	e1a03004 	mov	r3, r4
   1d3ac:	e30d0390 	movw	r0, #54160	; 0xd390
   1d3b0:	e3400001 	movt	r0, #1
   1d3b4:	e1a01003 	mov	r1, r3
   1d3b8:	ebffe0d7 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d3bc:	e51b3010 	ldr	r3, [fp, #-16]
   1d3c0:	e3530000 	cmp	r3, #0
   1d3c4:	1a000005 	bne	1d3e0 <DWHCITransferStageDataSetState+0x50>
   1d3c8:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d3cc:	e3400002 	movt	r0, #2
   1d3d0:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d3d4:	e3401002 	movt	r1, #2
   1d3d8:	e3a020de 	mov	r2, #222	; 0xde
   1d3dc:	ebffe573 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nState = nState;
   1d3e0:	e51b3010 	ldr	r3, [fp, #-16]
   1d3e4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1d3e8:	e583203c 	str	r2, [r3, #60]	; 0x3c
   1d3ec:	e1a03004 	mov	r3, r4
   1d3f0:	e30d0390 	movw	r0, #54160	; 0xd390
   1d3f4:	e3400001 	movt	r0, #1
   1d3f8:	e1a01003 	mov	r1, r3
   1d3fc:	ebffe118 	bl	15864 <__cyg_profile_func_exit>
}
   1d400:	e24bd008 	sub	sp, fp, #8
   1d404:	e8bd8810 	pop	{r4, fp, pc}

0001d408 <DWHCITransferStageDataGetState>:

unsigned DWHCITransferStageDataGetState (TDWHCITransferStageData *pThis)
{
   1d408:	e92d4830 	push	{r4, r5, fp, lr}
   1d40c:	e28db00c 	add	fp, sp, #12
   1d410:	e24dd008 	sub	sp, sp, #8
   1d414:	e1a0500e 	mov	r5, lr
   1d418:	e50b0010 	str	r0, [fp, #-16]
   1d41c:	e1a03005 	mov	r3, r5
   1d420:	e30d0408 	movw	r0, #54280	; 0xd408
   1d424:	e3400001 	movt	r0, #1
   1d428:	e1a01003 	mov	r1, r3
   1d42c:	ebffe0ba 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d430:	e51b3010 	ldr	r3, [fp, #-16]
   1d434:	e3530000 	cmp	r3, #0
   1d438:	1a000005 	bne	1d454 <DWHCITransferStageDataGetState+0x4c>
   1d43c:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d440:	e3400002 	movt	r0, #2
   1d444:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d448:	e3401002 	movt	r1, #2
   1d44c:	e3a020e4 	mov	r2, #228	; 0xe4
   1d450:	ebffe556 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nState;
   1d454:	e51b3010 	ldr	r3, [fp, #-16]
   1d458:	e593403c 	ldr	r4, [r3, #60]	; 0x3c
   1d45c:	e1a03005 	mov	r3, r5
   1d460:	e30d0408 	movw	r0, #54280	; 0xd408
   1d464:	e3400001 	movt	r0, #1
   1d468:	e1a01003 	mov	r1, r3
   1d46c:	ebffe0fc 	bl	15864 <__cyg_profile_func_exit>
   1d470:	e1a03004 	mov	r3, r4
}
   1d474:	e1a00003 	mov	r0, r3
   1d478:	e24bd00c 	sub	sp, fp, #12
   1d47c:	e8bd8830 	pop	{r4, r5, fp, pc}

0001d480 <DWHCITransferStageDataSetSubState>:

void DWHCITransferStageDataSetSubState (TDWHCITransferStageData *pThis, unsigned nSubState)
{
   1d480:	e92d4810 	push	{r4, fp, lr}
   1d484:	e28db008 	add	fp, sp, #8
   1d488:	e24dd00c 	sub	sp, sp, #12
   1d48c:	e1a0400e 	mov	r4, lr
   1d490:	e50b0010 	str	r0, [fp, #-16]
   1d494:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1d498:	e1a03004 	mov	r3, r4
   1d49c:	e30d0480 	movw	r0, #54400	; 0xd480
   1d4a0:	e3400001 	movt	r0, #1
   1d4a4:	e1a01003 	mov	r1, r3
   1d4a8:	ebffe09b 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d4ac:	e51b3010 	ldr	r3, [fp, #-16]
   1d4b0:	e3530000 	cmp	r3, #0
   1d4b4:	1a000005 	bne	1d4d0 <DWHCITransferStageDataSetSubState+0x50>
   1d4b8:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d4bc:	e3400002 	movt	r0, #2
   1d4c0:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d4c4:	e3401002 	movt	r1, #2
   1d4c8:	e3a020ea 	mov	r2, #234	; 0xea
   1d4cc:	ebffe537 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nSubState = nSubState;
   1d4d0:	e51b3010 	ldr	r3, [fp, #-16]
   1d4d4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1d4d8:	e5832040 	str	r2, [r3, #64]	; 0x40
   1d4dc:	e1a03004 	mov	r3, r4
   1d4e0:	e30d0480 	movw	r0, #54400	; 0xd480
   1d4e4:	e3400001 	movt	r0, #1
   1d4e8:	e1a01003 	mov	r1, r3
   1d4ec:	ebffe0dc 	bl	15864 <__cyg_profile_func_exit>
}
   1d4f0:	e24bd008 	sub	sp, fp, #8
   1d4f4:	e8bd8810 	pop	{r4, fp, pc}

0001d4f8 <DWHCITransferStageDataGetSubState>:

unsigned DWHCITransferStageDataGetSubState (TDWHCITransferStageData *pThis)
{
   1d4f8:	e92d4830 	push	{r4, r5, fp, lr}
   1d4fc:	e28db00c 	add	fp, sp, #12
   1d500:	e24dd008 	sub	sp, sp, #8
   1d504:	e1a0500e 	mov	r5, lr
   1d508:	e50b0010 	str	r0, [fp, #-16]
   1d50c:	e1a03005 	mov	r3, r5
   1d510:	e30d04f8 	movw	r0, #54520	; 0xd4f8
   1d514:	e3400001 	movt	r0, #1
   1d518:	e1a01003 	mov	r1, r3
   1d51c:	ebffe07e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d520:	e51b3010 	ldr	r3, [fp, #-16]
   1d524:	e3530000 	cmp	r3, #0
   1d528:	1a000005 	bne	1d544 <DWHCITransferStageDataGetSubState+0x4c>
   1d52c:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d530:	e3400002 	movt	r0, #2
   1d534:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d538:	e3401002 	movt	r1, #2
   1d53c:	e3a020f0 	mov	r2, #240	; 0xf0
   1d540:	ebffe51a 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nSubState;
   1d544:	e51b3010 	ldr	r3, [fp, #-16]
   1d548:	e5934040 	ldr	r4, [r3, #64]	; 0x40
   1d54c:	e1a03005 	mov	r3, r5
   1d550:	e30d04f8 	movw	r0, #54520	; 0xd4f8
   1d554:	e3400001 	movt	r0, #1
   1d558:	e1a01003 	mov	r1, r3
   1d55c:	ebffe0c0 	bl	15864 <__cyg_profile_func_exit>
   1d560:	e1a03004 	mov	r3, r4
}
   1d564:	e1a00003 	mov	r0, r3
   1d568:	e24bd00c 	sub	sp, fp, #12
   1d56c:	e8bd8830 	pop	{r4, r5, fp, pc}

0001d570 <DWHCITransferStageDataBeginSplitCycle>:

boolean DWHCITransferStageDataBeginSplitCycle (TDWHCITransferStageData *pThis)
{
   1d570:	e92d4830 	push	{r4, r5, fp, lr}
   1d574:	e28db00c 	add	fp, sp, #12
   1d578:	e24dd008 	sub	sp, sp, #8
   1d57c:	e1a0500e 	mov	r5, lr
   1d580:	e50b0010 	str	r0, [fp, #-16]
   1d584:	e1a03005 	mov	r3, r5
   1d588:	e30d0570 	movw	r0, #54640	; 0xd570
   1d58c:	e3400001 	movt	r0, #1
   1d590:	e1a01003 	mov	r1, r3
   1d594:	ebffe060 	bl	1571c <__cyg_profile_func_enter>
	return TRUE;
   1d598:	e3a04001 	mov	r4, #1
   1d59c:	e1a03005 	mov	r3, r5
   1d5a0:	e30d0570 	movw	r0, #54640	; 0xd570
   1d5a4:	e3400001 	movt	r0, #1
   1d5a8:	e1a01003 	mov	r1, r3
   1d5ac:	ebffe0ac 	bl	15864 <__cyg_profile_func_exit>
   1d5b0:	e1a03004 	mov	r3, r4
}
   1d5b4:	e1a00003 	mov	r0, r3
   1d5b8:	e24bd00c 	sub	sp, fp, #12
   1d5bc:	e8bd8830 	pop	{r4, r5, fp, pc}

0001d5c0 <DWHCITransferStageDataGetChannelNumber>:

unsigned DWHCITransferStageDataGetChannelNumber (TDWHCITransferStageData *pThis)
{
   1d5c0:	e92d4830 	push	{r4, r5, fp, lr}
   1d5c4:	e28db00c 	add	fp, sp, #12
   1d5c8:	e24dd008 	sub	sp, sp, #8
   1d5cc:	e1a0500e 	mov	r5, lr
   1d5d0:	e50b0010 	str	r0, [fp, #-16]
   1d5d4:	e1a03005 	mov	r3, r5
   1d5d8:	e30d05c0 	movw	r0, #54720	; 0xd5c0
   1d5dc:	e3400001 	movt	r0, #1
   1d5e0:	e1a01003 	mov	r1, r3
   1d5e4:	ebffe04c 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d5e8:	e51b3010 	ldr	r3, [fp, #-16]
   1d5ec:	e3530000 	cmp	r3, #0
   1d5f0:	1a000005 	bne	1d60c <DWHCITransferStageDataGetChannelNumber+0x4c>
   1d5f4:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d5f8:	e3400002 	movt	r0, #2
   1d5fc:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d600:	e3401002 	movt	r1, #2
   1d604:	e3a020fb 	mov	r2, #251	; 0xfb
   1d608:	ebffe4e8 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nChannel;
   1d60c:	e51b3010 	ldr	r3, [fp, #-16]
   1d610:	e5934000 	ldr	r4, [r3]
   1d614:	e1a03005 	mov	r3, r5
   1d618:	e30d05c0 	movw	r0, #54720	; 0xd5c0
   1d61c:	e3400001 	movt	r0, #1
   1d620:	e1a01003 	mov	r1, r3
   1d624:	ebffe08e 	bl	15864 <__cyg_profile_func_exit>
   1d628:	e1a03004 	mov	r3, r4
}
   1d62c:	e1a00003 	mov	r0, r3
   1d630:	e24bd00c 	sub	sp, fp, #12
   1d634:	e8bd8830 	pop	{r4, r5, fp, pc}

0001d638 <DWHCITransferStageDataIsPeriodic>:

boolean DWHCITransferStageDataIsPeriodic (TDWHCITransferStageData *pThis)
{
   1d638:	e92d4830 	push	{r4, r5, fp, lr}
   1d63c:	e28db00c 	add	fp, sp, #12
   1d640:	e24dd010 	sub	sp, sp, #16
   1d644:	e1a0500e 	mov	r5, lr
   1d648:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1d64c:	e1a03005 	mov	r3, r5
   1d650:	e30d0638 	movw	r0, #54840	; 0xd638
   1d654:	e3400001 	movt	r0, #1
   1d658:	e1a01003 	mov	r1, r3
   1d65c:	ebffe02e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d660:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d664:	e3530000 	cmp	r3, #0
   1d668:	1a000005 	bne	1d684 <DWHCITransferStageDataIsPeriodic+0x4c>
   1d66c:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d670:	e3400002 	movt	r0, #2
   1d674:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d678:	e3401002 	movt	r1, #2
   1d67c:	e3002101 	movw	r2, #257	; 0x101
   1d680:	ebffe4ca 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pEndpoint != 0);
   1d684:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d688:	e593301c 	ldr	r3, [r3, #28]
   1d68c:	e3530000 	cmp	r3, #0
   1d690:	1a000005 	bne	1d6ac <DWHCITransferStageDataIsPeriodic+0x74>
   1d694:	e30e0828 	movw	r0, #59432	; 0xe828
   1d698:	e3400002 	movt	r0, #2
   1d69c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d6a0:	e3401002 	movt	r1, #2
   1d6a4:	e3002102 	movw	r2, #258	; 0x102
   1d6a8:	ebffe4c0 	bl	169b0 <uspi_assertion_failed>
	TEndpointType Type = USBEndpointGetType (pThis->m_pEndpoint);
   1d6ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d6b0:	e593301c 	ldr	r3, [r3, #28]
   1d6b4:	e1a00003 	mov	r0, r3
   1d6b8:	eb000df8 	bl	20ea0 <USBEndpointGetType>
   1d6bc:	e1a03000 	mov	r3, r0
   1d6c0:	e54b300d 	strb	r3, [fp, #-13]
	
	return    Type == EndpointTypeInterrupt
	       || Type == EndpointTypeIsochronous;
   1d6c4:	e55b300d 	ldrb	r3, [fp, #-13]
   1d6c8:	e3530002 	cmp	r3, #2
   1d6cc:	0a000002 	beq	1d6dc <DWHCITransferStageDataIsPeriodic+0xa4>
   1d6d0:	e55b300d 	ldrb	r3, [fp, #-13]
   1d6d4:	e3530003 	cmp	r3, #3
   1d6d8:	1a000001 	bne	1d6e4 <DWHCITransferStageDataIsPeriodic+0xac>
   1d6dc:	e3a04001 	mov	r4, #1
   1d6e0:	ea000000 	b	1d6e8 <DWHCITransferStageDataIsPeriodic+0xb0>
   1d6e4:	e3a04000 	mov	r4, #0
   1d6e8:	e1a03005 	mov	r3, r5
   1d6ec:	e30d0638 	movw	r0, #54840	; 0xd638
   1d6f0:	e3400001 	movt	r0, #1
   1d6f4:	e1a01003 	mov	r1, r3
   1d6f8:	ebffe059 	bl	15864 <__cyg_profile_func_exit>
{
	assert (pThis != 0);
	assert (pThis->m_pEndpoint != 0);
	TEndpointType Type = USBEndpointGetType (pThis->m_pEndpoint);
	
	return    Type == EndpointTypeInterrupt
   1d6fc:	e1a03004 	mov	r3, r4
	       || Type == EndpointTypeIsochronous;
}
   1d700:	e1a00003 	mov	r0, r3
   1d704:	e24bd00c 	sub	sp, fp, #12
   1d708:	e8bd8830 	pop	{r4, r5, fp, pc}

0001d70c <DWHCITransferStageDataGetDeviceAddress>:

u8 DWHCITransferStageDataGetDeviceAddress (TDWHCITransferStageData *pThis)
{
   1d70c:	e92d4830 	push	{r4, r5, fp, lr}
   1d710:	e28db00c 	add	fp, sp, #12
   1d714:	e24dd008 	sub	sp, sp, #8
   1d718:	e1a0400e 	mov	r4, lr
   1d71c:	e50b0010 	str	r0, [fp, #-16]
   1d720:	e1a03004 	mov	r3, r4
   1d724:	e30d070c 	movw	r0, #55052	; 0xd70c
   1d728:	e3400001 	movt	r0, #1
   1d72c:	e1a01003 	mov	r1, r3
   1d730:	ebffdff9 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d734:	e51b3010 	ldr	r3, [fp, #-16]
   1d738:	e3530000 	cmp	r3, #0
   1d73c:	1a000005 	bne	1d758 <DWHCITransferStageDataGetDeviceAddress+0x4c>
   1d740:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d744:	e3400002 	movt	r0, #2
   1d748:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d74c:	e3401002 	movt	r1, #2
   1d750:	e300210b 	movw	r2, #267	; 0x10b
   1d754:	ebffe495 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pDevice != 0);
   1d758:	e51b3010 	ldr	r3, [fp, #-16]
   1d75c:	e5933018 	ldr	r3, [r3, #24]
   1d760:	e3530000 	cmp	r3, #0
   1d764:	1a000005 	bne	1d780 <DWHCITransferStageDataGetDeviceAddress+0x74>
   1d768:	e30e0840 	movw	r0, #59456	; 0xe840
   1d76c:	e3400002 	movt	r0, #2
   1d770:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d774:	e3401002 	movt	r1, #2
   1d778:	e3a02f43 	mov	r2, #268	; 0x10c
   1d77c:	ebffe48b 	bl	169b0 <uspi_assertion_failed>
	return USBDeviceGetAddress (pThis->m_pDevice);
   1d780:	e51b3010 	ldr	r3, [fp, #-16]
   1d784:	e5933018 	ldr	r3, [r3, #24]
   1d788:	e1a00003 	mov	r0, r3
   1d78c:	eb00097c 	bl	1fd84 <USBDeviceGetAddress>
   1d790:	e1a03000 	mov	r3, r0
   1d794:	e1a05003 	mov	r5, r3
   1d798:	e1a03004 	mov	r3, r4
   1d79c:	e30d070c 	movw	r0, #55052	; 0xd70c
   1d7a0:	e3400001 	movt	r0, #1
   1d7a4:	e1a01003 	mov	r1, r3
   1d7a8:	ebffe02d 	bl	15864 <__cyg_profile_func_exit>
   1d7ac:	e1a03005 	mov	r3, r5
}
   1d7b0:	e1a00003 	mov	r0, r3
   1d7b4:	e24bd00c 	sub	sp, fp, #12
   1d7b8:	e8bd8830 	pop	{r4, r5, fp, pc}

0001d7bc <DWHCITransferStageDataGetEndpointType>:

u8 DWHCITransferStageDataGetEndpointType (TDWHCITransferStageData *pThis)
{
   1d7bc:	e92d4830 	push	{r4, r5, fp, lr}
   1d7c0:	e28db00c 	add	fp, sp, #12
   1d7c4:	e24dd010 	sub	sp, sp, #16
   1d7c8:	e1a0500e 	mov	r5, lr
   1d7cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1d7d0:	e1a03005 	mov	r3, r5
   1d7d4:	e30d07bc 	movw	r0, #55228	; 0xd7bc
   1d7d8:	e3400001 	movt	r0, #1
   1d7dc:	e1a01003 	mov	r1, r3
   1d7e0:	ebffdfcd 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d7e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d7e8:	e3530000 	cmp	r3, #0
   1d7ec:	1a000005 	bne	1d808 <DWHCITransferStageDataGetEndpointType+0x4c>
   1d7f0:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d7f4:	e3400002 	movt	r0, #2
   1d7f8:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d7fc:	e3401002 	movt	r1, #2
   1d800:	e3002112 	movw	r2, #274	; 0x112
   1d804:	ebffe469 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pEndpoint != 0);
   1d808:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d80c:	e593301c 	ldr	r3, [r3, #28]
   1d810:	e3530000 	cmp	r3, #0
   1d814:	1a000005 	bne	1d830 <DWHCITransferStageDataGetEndpointType+0x74>
   1d818:	e30e0828 	movw	r0, #59432	; 0xe828
   1d81c:	e3400002 	movt	r0, #2
   1d820:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d824:	e3401002 	movt	r1, #2
   1d828:	e3002113 	movw	r2, #275	; 0x113
   1d82c:	ebffe45f 	bl	169b0 <uspi_assertion_failed>
	
	unsigned nEndpointType = 0;
   1d830:	e3a03000 	mov	r3, #0
   1d834:	e50b3010 	str	r3, [fp, #-16]

	switch (USBEndpointGetType (pThis->m_pEndpoint))
   1d838:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d83c:	e593301c 	ldr	r3, [r3, #28]
   1d840:	e1a00003 	mov	r0, r3
   1d844:	eb000d95 	bl	20ea0 <USBEndpointGetType>
   1d848:	e1a03000 	mov	r3, r0
   1d84c:	e3530001 	cmp	r3, #1
   1d850:	0a000006 	beq	1d870 <DWHCITransferStageDataGetEndpointType+0xb4>
   1d854:	e3530002 	cmp	r3, #2
   1d858:	0a000007 	beq	1d87c <DWHCITransferStageDataGetEndpointType+0xc0>
   1d85c:	e3530000 	cmp	r3, #0
   1d860:	1a000008 	bne	1d888 <DWHCITransferStageDataGetEndpointType+0xcc>
	{
	case EndpointTypeControl:
		nEndpointType = DWHCI_HOST_CHAN_CHARACTER_EP_TYPE_CONTROL;
   1d864:	e3a03000 	mov	r3, #0
   1d868:	e50b3010 	str	r3, [fp, #-16]
		break;
   1d86c:	ea00000c 	b	1d8a4 <DWHCITransferStageDataGetEndpointType+0xe8>

	case EndpointTypeBulk:
		nEndpointType = DWHCI_HOST_CHAN_CHARACTER_EP_TYPE_BULK;
   1d870:	e3a03002 	mov	r3, #2
   1d874:	e50b3010 	str	r3, [fp, #-16]
		break;
   1d878:	ea000009 	b	1d8a4 <DWHCITransferStageDataGetEndpointType+0xe8>

	case EndpointTypeInterrupt:
		nEndpointType = DWHCI_HOST_CHAN_CHARACTER_EP_TYPE_INTERRUPT;
   1d87c:	e3a03003 	mov	r3, #3
   1d880:	e50b3010 	str	r3, [fp, #-16]
		break;
   1d884:	ea000006 	b	1d8a4 <DWHCITransferStageDataGetEndpointType+0xe8>

	default:
		assert (0);
   1d888:	e30e097c 	movw	r0, #59772	; 0xe97c
   1d88c:	e3400002 	movt	r0, #2
   1d890:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d894:	e3401002 	movt	r1, #2
   1d898:	e3002126 	movw	r2, #294	; 0x126
   1d89c:	ebffe443 	bl	169b0 <uspi_assertion_failed>
		break;
   1d8a0:	e1a00000 	nop			; (mov r0, r0)
	}
	
	return nEndpointType;
   1d8a4:	e51b3010 	ldr	r3, [fp, #-16]
   1d8a8:	e6ef4073 	uxtb	r4, r3
   1d8ac:	e1a03005 	mov	r3, r5
   1d8b0:	e30d07bc 	movw	r0, #55228	; 0xd7bc
   1d8b4:	e3400001 	movt	r0, #1
   1d8b8:	e1a01003 	mov	r1, r3
   1d8bc:	ebffdfe8 	bl	15864 <__cyg_profile_func_exit>
   1d8c0:	e1a03004 	mov	r3, r4
}
   1d8c4:	e1a00003 	mov	r0, r3
   1d8c8:	e24bd00c 	sub	sp, fp, #12
   1d8cc:	e8bd8830 	pop	{r4, r5, fp, pc}

0001d8d0 <DWHCITransferStageDataGetEndpointNumber>:

u8 DWHCITransferStageDataGetEndpointNumber (TDWHCITransferStageData *pThis)
{
   1d8d0:	e92d4830 	push	{r4, r5, fp, lr}
   1d8d4:	e28db00c 	add	fp, sp, #12
   1d8d8:	e24dd008 	sub	sp, sp, #8
   1d8dc:	e1a0400e 	mov	r4, lr
   1d8e0:	e50b0010 	str	r0, [fp, #-16]
   1d8e4:	e1a03004 	mov	r3, r4
   1d8e8:	e30d08d0 	movw	r0, #55504	; 0xd8d0
   1d8ec:	e3400001 	movt	r0, #1
   1d8f0:	e1a01003 	mov	r1, r3
   1d8f4:	ebffdf88 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d8f8:	e51b3010 	ldr	r3, [fp, #-16]
   1d8fc:	e3530000 	cmp	r3, #0
   1d900:	1a000005 	bne	1d91c <DWHCITransferStageDataGetEndpointNumber+0x4c>
   1d904:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d908:	e3400002 	movt	r0, #2
   1d90c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d910:	e3401002 	movt	r1, #2
   1d914:	e300212f 	movw	r2, #303	; 0x12f
   1d918:	ebffe424 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pEndpoint != 0);
   1d91c:	e51b3010 	ldr	r3, [fp, #-16]
   1d920:	e593301c 	ldr	r3, [r3, #28]
   1d924:	e3530000 	cmp	r3, #0
   1d928:	1a000005 	bne	1d944 <DWHCITransferStageDataGetEndpointNumber+0x74>
   1d92c:	e30e0828 	movw	r0, #59432	; 0xe828
   1d930:	e3400002 	movt	r0, #2
   1d934:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d938:	e3401002 	movt	r1, #2
   1d93c:	e3a02e13 	mov	r2, #304	; 0x130
   1d940:	ebffe41a 	bl	169b0 <uspi_assertion_failed>
	return USBEndpointGetNumber (pThis->m_pEndpoint);
   1d944:	e51b3010 	ldr	r3, [fp, #-16]
   1d948:	e593301c 	ldr	r3, [r3, #28]
   1d94c:	e1a00003 	mov	r0, r3
   1d950:	eb000d34 	bl	20e28 <USBEndpointGetNumber>
   1d954:	e1a03000 	mov	r3, r0
   1d958:	e1a05003 	mov	r5, r3
   1d95c:	e1a03004 	mov	r3, r4
   1d960:	e30d08d0 	movw	r0, #55504	; 0xd8d0
   1d964:	e3400001 	movt	r0, #1
   1d968:	e1a01003 	mov	r1, r3
   1d96c:	ebffdfbc 	bl	15864 <__cyg_profile_func_exit>
   1d970:	e1a03005 	mov	r3, r5
}
   1d974:	e1a00003 	mov	r0, r3
   1d978:	e24bd00c 	sub	sp, fp, #12
   1d97c:	e8bd8830 	pop	{r4, r5, fp, pc}

0001d980 <DWHCITransferStageDataGetMaxPacketSize>:

u32 DWHCITransferStageDataGetMaxPacketSize (TDWHCITransferStageData *pThis)
{
   1d980:	e92d4830 	push	{r4, r5, fp, lr}
   1d984:	e28db00c 	add	fp, sp, #12
   1d988:	e24dd008 	sub	sp, sp, #8
   1d98c:	e1a0500e 	mov	r5, lr
   1d990:	e50b0010 	str	r0, [fp, #-16]
   1d994:	e1a03005 	mov	r3, r5
   1d998:	e30d0980 	movw	r0, #55680	; 0xd980
   1d99c:	e3400001 	movt	r0, #1
   1d9a0:	e1a01003 	mov	r1, r3
   1d9a4:	ebffdf5c 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1d9a8:	e51b3010 	ldr	r3, [fp, #-16]
   1d9ac:	e3530000 	cmp	r3, #0
   1d9b0:	1a000005 	bne	1d9cc <DWHCITransferStageDataGetMaxPacketSize+0x4c>
   1d9b4:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1d9b8:	e3400002 	movt	r0, #2
   1d9bc:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1d9c0:	e3401002 	movt	r1, #2
   1d9c4:	e3002136 	movw	r2, #310	; 0x136
   1d9c8:	ebffe3f8 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nMaxPacketSize;
   1d9cc:	e51b3010 	ldr	r3, [fp, #-16]
   1d9d0:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   1d9d4:	e1a03005 	mov	r3, r5
   1d9d8:	e30d0980 	movw	r0, #55680	; 0xd980
   1d9dc:	e3400001 	movt	r0, #1
   1d9e0:	e1a01003 	mov	r1, r3
   1d9e4:	ebffdf9e 	bl	15864 <__cyg_profile_func_exit>
   1d9e8:	e1a03004 	mov	r3, r4
}
   1d9ec:	e1a00003 	mov	r0, r3
   1d9f0:	e24bd00c 	sub	sp, fp, #12
   1d9f4:	e8bd8830 	pop	{r4, r5, fp, pc}

0001d9f8 <DWHCITransferStageDataGetSpeed>:

TUSBSpeed DWHCITransferStageDataGetSpeed (TDWHCITransferStageData *pThis)
{
   1d9f8:	e92d4830 	push	{r4, r5, fp, lr}
   1d9fc:	e28db00c 	add	fp, sp, #12
   1da00:	e24dd008 	sub	sp, sp, #8
   1da04:	e1a0500e 	mov	r5, lr
   1da08:	e50b0010 	str	r0, [fp, #-16]
   1da0c:	e1a03005 	mov	r3, r5
   1da10:	e30d09f8 	movw	r0, #55800	; 0xd9f8
   1da14:	e3400001 	movt	r0, #1
   1da18:	e1a01003 	mov	r1, r3
   1da1c:	ebffdf3e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1da20:	e51b3010 	ldr	r3, [fp, #-16]
   1da24:	e3530000 	cmp	r3, #0
   1da28:	1a000005 	bne	1da44 <DWHCITransferStageDataGetSpeed+0x4c>
   1da2c:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1da30:	e3400002 	movt	r0, #2
   1da34:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1da38:	e3401002 	movt	r1, #2
   1da3c:	e3a02f4f 	mov	r2, #316	; 0x13c
   1da40:	ebffe3da 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_Speed;
   1da44:	e51b3010 	ldr	r3, [fp, #-16]
   1da48:	e5d34020 	ldrb	r4, [r3, #32]
   1da4c:	e1a03005 	mov	r3, r5
   1da50:	e30d09f8 	movw	r0, #55800	; 0xd9f8
   1da54:	e3400001 	movt	r0, #1
   1da58:	e1a01003 	mov	r1, r3
   1da5c:	ebffdf80 	bl	15864 <__cyg_profile_func_exit>
   1da60:	e1a03004 	mov	r3, r4
}
   1da64:	e1a00003 	mov	r0, r3
   1da68:	e24bd00c 	sub	sp, fp, #12
   1da6c:	e8bd8830 	pop	{r4, r5, fp, pc}

0001da70 <DWHCITransferStageDataGetPID>:

u8 DWHCITransferStageDataGetPID (TDWHCITransferStageData *pThis)
{
   1da70:	e92d4830 	push	{r4, r5, fp, lr}
   1da74:	e28db00c 	add	fp, sp, #12
   1da78:	e24dd010 	sub	sp, sp, #16
   1da7c:	e1a0500e 	mov	r5, lr
   1da80:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1da84:	e1a03005 	mov	r3, r5
   1da88:	e30d0a70 	movw	r0, #55920	; 0xda70
   1da8c:	e3400001 	movt	r0, #1
   1da90:	e1a01003 	mov	r1, r3
   1da94:	ebffdf20 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1da98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1da9c:	e3530000 	cmp	r3, #0
   1daa0:	1a000005 	bne	1dabc <DWHCITransferStageDataGetPID+0x4c>
   1daa4:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1daa8:	e3400002 	movt	r0, #2
   1daac:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1dab0:	e3401002 	movt	r1, #2
   1dab4:	e3002142 	movw	r2, #322	; 0x142
   1dab8:	ebffe3bc 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pEndpoint != 0);
   1dabc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dac0:	e593301c 	ldr	r3, [r3, #28]
   1dac4:	e3530000 	cmp	r3, #0
   1dac8:	1a000005 	bne	1dae4 <DWHCITransferStageDataGetPID+0x74>
   1dacc:	e30e0828 	movw	r0, #59432	; 0xe828
   1dad0:	e3400002 	movt	r0, #2
   1dad4:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1dad8:	e3401002 	movt	r1, #2
   1dadc:	e3002143 	movw	r2, #323	; 0x143
   1dae0:	ebffe3b2 	bl	169b0 <uspi_assertion_failed>
	
	u8 ucPID = 0;
   1dae4:	e3a03000 	mov	r3, #0
   1dae8:	e54b300d 	strb	r3, [fp, #-13]
	
	switch (USBEndpointGetNextPID (pThis->m_pEndpoint, pThis->m_bStatusStage))
   1daec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1daf0:	e593201c 	ldr	r2, [r3, #28]
   1daf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1daf8:	e593300c 	ldr	r3, [r3, #12]
   1dafc:	e1a00002 	mov	r0, r2
   1db00:	e1a01003 	mov	r1, r3
   1db04:	eb000d85 	bl	21120 <USBEndpointGetNextPID>
   1db08:	e1a03000 	mov	r3, r0
   1db0c:	e3530001 	cmp	r3, #1
   1db10:	0a000006 	beq	1db30 <DWHCITransferStageDataGetPID+0xc0>
   1db14:	e3530002 	cmp	r3, #2
   1db18:	0a000007 	beq	1db3c <DWHCITransferStageDataGetPID+0xcc>
   1db1c:	e3530000 	cmp	r3, #0
   1db20:	1a000008 	bne	1db48 <DWHCITransferStageDataGetPID+0xd8>
	{
	case USBPIDSetup:
		ucPID = DWHCI_HOST_CHAN_XFER_SIZ_PID_SETUP;
   1db24:	e3a03003 	mov	r3, #3
   1db28:	e54b300d 	strb	r3, [fp, #-13]
		break;
   1db2c:	ea00000c 	b	1db64 <DWHCITransferStageDataGetPID+0xf4>

	case USBPIDData0:
		ucPID = DWHCI_HOST_CHAN_XFER_SIZ_PID_DATA0;
   1db30:	e3a03000 	mov	r3, #0
   1db34:	e54b300d 	strb	r3, [fp, #-13]
		break;
   1db38:	ea000009 	b	1db64 <DWHCITransferStageDataGetPID+0xf4>
		
	case USBPIDData1:
		ucPID = DWHCI_HOST_CHAN_XFER_SIZ_PID_DATA1;
   1db3c:	e3a03002 	mov	r3, #2
   1db40:	e54b300d 	strb	r3, [fp, #-13]
		break;
   1db44:	ea000006 	b	1db64 <DWHCITransferStageDataGetPID+0xf4>

	default:
		assert (0);
   1db48:	e30e097c 	movw	r0, #59772	; 0xe97c
   1db4c:	e3400002 	movt	r0, #2
   1db50:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1db54:	e3401002 	movt	r1, #2
   1db58:	e3002156 	movw	r2, #342	; 0x156
   1db5c:	ebffe393 	bl	169b0 <uspi_assertion_failed>
		break;
   1db60:	e1a00000 	nop			; (mov r0, r0)
	}
	
	return ucPID;
   1db64:	e55b400d 	ldrb	r4, [fp, #-13]
   1db68:	e1a03005 	mov	r3, r5
   1db6c:	e30d0a70 	movw	r0, #55920	; 0xda70
   1db70:	e3400001 	movt	r0, #1
   1db74:	e1a01003 	mov	r1, r3
   1db78:	ebffdf39 	bl	15864 <__cyg_profile_func_exit>
   1db7c:	e1a03004 	mov	r3, r4
}
   1db80:	e1a00003 	mov	r0, r3
   1db84:	e24bd00c 	sub	sp, fp, #12
   1db88:	e8bd8830 	pop	{r4, r5, fp, pc}

0001db8c <DWHCITransferStageDataIsDirectionIn>:

boolean DWHCITransferStageDataIsDirectionIn (TDWHCITransferStageData *pThis)
{
   1db8c:	e92d4830 	push	{r4, r5, fp, lr}
   1db90:	e28db00c 	add	fp, sp, #12
   1db94:	e24dd008 	sub	sp, sp, #8
   1db98:	e1a0500e 	mov	r5, lr
   1db9c:	e50b0010 	str	r0, [fp, #-16]
   1dba0:	e1a03005 	mov	r3, r5
   1dba4:	e30d0b8c 	movw	r0, #56204	; 0xdb8c
   1dba8:	e3400001 	movt	r0, #1
   1dbac:	e1a01003 	mov	r1, r3
   1dbb0:	ebffded9 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1dbb4:	e51b3010 	ldr	r3, [fp, #-16]
   1dbb8:	e3530000 	cmp	r3, #0
   1dbbc:	1a000005 	bne	1dbd8 <DWHCITransferStageDataIsDirectionIn+0x4c>
   1dbc0:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1dbc4:	e3400002 	movt	r0, #2
   1dbc8:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1dbcc:	e3401002 	movt	r1, #2
   1dbd0:	e300215f 	movw	r2, #351	; 0x15f
   1dbd4:	ebffe375 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_bIn;
   1dbd8:	e51b3010 	ldr	r3, [fp, #-16]
   1dbdc:	e5934008 	ldr	r4, [r3, #8]
   1dbe0:	e1a03005 	mov	r3, r5
   1dbe4:	e30d0b8c 	movw	r0, #56204	; 0xdb8c
   1dbe8:	e3400001 	movt	r0, #1
   1dbec:	e1a01003 	mov	r1, r3
   1dbf0:	ebffdf1b 	bl	15864 <__cyg_profile_func_exit>
   1dbf4:	e1a03004 	mov	r3, r4
}
   1dbf8:	e1a00003 	mov	r0, r3
   1dbfc:	e24bd00c 	sub	sp, fp, #12
   1dc00:	e8bd8830 	pop	{r4, r5, fp, pc}

0001dc04 <DWHCITransferStageDataIsStatusStage>:

boolean DWHCITransferStageDataIsStatusStage (TDWHCITransferStageData *pThis)
{
   1dc04:	e92d4830 	push	{r4, r5, fp, lr}
   1dc08:	e28db00c 	add	fp, sp, #12
   1dc0c:	e24dd008 	sub	sp, sp, #8
   1dc10:	e1a0500e 	mov	r5, lr
   1dc14:	e50b0010 	str	r0, [fp, #-16]
   1dc18:	e1a03005 	mov	r3, r5
   1dc1c:	e30d0c04 	movw	r0, #56324	; 0xdc04
   1dc20:	e3400001 	movt	r0, #1
   1dc24:	e1a01003 	mov	r1, r3
   1dc28:	ebffdebb 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1dc2c:	e51b3010 	ldr	r3, [fp, #-16]
   1dc30:	e3530000 	cmp	r3, #0
   1dc34:	1a000005 	bne	1dc50 <DWHCITransferStageDataIsStatusStage+0x4c>
   1dc38:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1dc3c:	e3400002 	movt	r0, #2
   1dc40:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1dc44:	e3401002 	movt	r1, #2
   1dc48:	e3002165 	movw	r2, #357	; 0x165
   1dc4c:	ebffe357 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_bStatusStage;
   1dc50:	e51b3010 	ldr	r3, [fp, #-16]
   1dc54:	e593400c 	ldr	r4, [r3, #12]
   1dc58:	e1a03005 	mov	r3, r5
   1dc5c:	e30d0c04 	movw	r0, #56324	; 0xdc04
   1dc60:	e3400001 	movt	r0, #1
   1dc64:	e1a01003 	mov	r1, r3
   1dc68:	ebffdefd 	bl	15864 <__cyg_profile_func_exit>
   1dc6c:	e1a03004 	mov	r3, r4
}
   1dc70:	e1a00003 	mov	r0, r3
   1dc74:	e24bd00c 	sub	sp, fp, #12
   1dc78:	e8bd8830 	pop	{r4, r5, fp, pc}

0001dc7c <DWHCITransferStageDataGetDMAAddress>:

u32 DWHCITransferStageDataGetDMAAddress (TDWHCITransferStageData *pThis)
{
   1dc7c:	e92d4830 	push	{r4, r5, fp, lr}
   1dc80:	e28db00c 	add	fp, sp, #12
   1dc84:	e24dd008 	sub	sp, sp, #8
   1dc88:	e1a0400e 	mov	r4, lr
   1dc8c:	e50b0010 	str	r0, [fp, #-16]
   1dc90:	e1a03004 	mov	r3, r4
   1dc94:	e30d0c7c 	movw	r0, #56444	; 0xdc7c
   1dc98:	e3400001 	movt	r0, #1
   1dc9c:	e1a01003 	mov	r1, r3
   1dca0:	ebffde9d 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1dca4:	e51b3010 	ldr	r3, [fp, #-16]
   1dca8:	e3530000 	cmp	r3, #0
   1dcac:	1a000005 	bne	1dcc8 <DWHCITransferStageDataGetDMAAddress+0x4c>
   1dcb0:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1dcb4:	e3400002 	movt	r0, #2
   1dcb8:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1dcbc:	e3401002 	movt	r1, #2
   1dcc0:	e300216b 	movw	r2, #363	; 0x16b
   1dcc4:	ebffe339 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pBufferPointer != 0);
   1dcc8:	e51b3010 	ldr	r3, [fp, #-16]
   1dccc:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   1dcd0:	e3530000 	cmp	r3, #0
   1dcd4:	1a000005 	bne	1dcf0 <DWHCITransferStageDataGetDMAAddress+0x74>
   1dcd8:	e30e0890 	movw	r0, #59536	; 0xe890
   1dcdc:	e3400002 	movt	r0, #2
   1dce0:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1dce4:	e3401002 	movt	r1, #2
   1dce8:	e3a02f5b 	mov	r2, #364	; 0x16c
   1dcec:	ebffe32f 	bl	169b0 <uspi_assertion_failed>

	return (u32) pThis->m_pBufferPointer;
   1dcf0:	e51b3010 	ldr	r3, [fp, #-16]
   1dcf4:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   1dcf8:	e1a05003 	mov	r5, r3
   1dcfc:	e1a03004 	mov	r3, r4
   1dd00:	e30d0c7c 	movw	r0, #56444	; 0xdc7c
   1dd04:	e3400001 	movt	r0, #1
   1dd08:	e1a01003 	mov	r1, r3
   1dd0c:	ebffded4 	bl	15864 <__cyg_profile_func_exit>
   1dd10:	e1a03005 	mov	r3, r5
}
   1dd14:	e1a00003 	mov	r0, r3
   1dd18:	e24bd00c 	sub	sp, fp, #12
   1dd1c:	e8bd8830 	pop	{r4, r5, fp, pc}

0001dd20 <DWHCITransferStageDataGetBytesToTransfer>:

u32 DWHCITransferStageDataGetBytesToTransfer (TDWHCITransferStageData *pThis)
{
   1dd20:	e92d4830 	push	{r4, r5, fp, lr}
   1dd24:	e28db00c 	add	fp, sp, #12
   1dd28:	e24dd008 	sub	sp, sp, #8
   1dd2c:	e1a0500e 	mov	r5, lr
   1dd30:	e50b0010 	str	r0, [fp, #-16]
   1dd34:	e1a03005 	mov	r3, r5
   1dd38:	e30d0d20 	movw	r0, #56608	; 0xdd20
   1dd3c:	e3400001 	movt	r0, #1
   1dd40:	e1a01003 	mov	r1, r3
   1dd44:	ebffde74 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1dd48:	e51b3010 	ldr	r3, [fp, #-16]
   1dd4c:	e3530000 	cmp	r3, #0
   1dd50:	1a000005 	bne	1dd6c <DWHCITransferStageDataGetBytesToTransfer+0x4c>
   1dd54:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1dd58:	e3400002 	movt	r0, #2
   1dd5c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1dd60:	e3401002 	movt	r1, #2
   1dd64:	e3002173 	movw	r2, #371	; 0x173
   1dd68:	ebffe310 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nBytesPerTransaction;
   1dd6c:	e51b3010 	ldr	r3, [fp, #-16]
   1dd70:	e5934030 	ldr	r4, [r3, #48]	; 0x30
   1dd74:	e1a03005 	mov	r3, r5
   1dd78:	e30d0d20 	movw	r0, #56608	; 0xdd20
   1dd7c:	e3400001 	movt	r0, #1
   1dd80:	e1a01003 	mov	r1, r3
   1dd84:	ebffdeb6 	bl	15864 <__cyg_profile_func_exit>
   1dd88:	e1a03004 	mov	r3, r4
}
   1dd8c:	e1a00003 	mov	r0, r3
   1dd90:	e24bd00c 	sub	sp, fp, #12
   1dd94:	e8bd8830 	pop	{r4, r5, fp, pc}

0001dd98 <DWHCITransferStageDataGetPacketsToTransfer>:

u32 DWHCITransferStageDataGetPacketsToTransfer (TDWHCITransferStageData *pThis)
{
   1dd98:	e92d4830 	push	{r4, r5, fp, lr}
   1dd9c:	e28db00c 	add	fp, sp, #12
   1dda0:	e24dd008 	sub	sp, sp, #8
   1dda4:	e1a0500e 	mov	r5, lr
   1dda8:	e50b0010 	str	r0, [fp, #-16]
   1ddac:	e1a03005 	mov	r3, r5
   1ddb0:	e30d0d98 	movw	r0, #56728	; 0xdd98
   1ddb4:	e3400001 	movt	r0, #1
   1ddb8:	e1a01003 	mov	r1, r3
   1ddbc:	ebffde56 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1ddc0:	e51b3010 	ldr	r3, [fp, #-16]
   1ddc4:	e3530000 	cmp	r3, #0
   1ddc8:	1a000005 	bne	1dde4 <DWHCITransferStageDataGetPacketsToTransfer+0x4c>
   1ddcc:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1ddd0:	e3400002 	movt	r0, #2
   1ddd4:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1ddd8:	e3401002 	movt	r1, #2
   1dddc:	e3002179 	movw	r2, #377	; 0x179
   1dde0:	ebffe2f2 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nPacketsPerTransaction;
   1dde4:	e51b3010 	ldr	r3, [fp, #-16]
   1dde8:	e5934034 	ldr	r4, [r3, #52]	; 0x34
   1ddec:	e1a03005 	mov	r3, r5
   1ddf0:	e30d0d98 	movw	r0, #56728	; 0xdd98
   1ddf4:	e3400001 	movt	r0, #1
   1ddf8:	e1a01003 	mov	r1, r3
   1ddfc:	ebffde98 	bl	15864 <__cyg_profile_func_exit>
   1de00:	e1a03004 	mov	r3, r4
}
   1de04:	e1a00003 	mov	r0, r3
   1de08:	e24bd00c 	sub	sp, fp, #12
   1de0c:	e8bd8830 	pop	{r4, r5, fp, pc}

0001de10 <DWHCITransferStageDataIsSplit>:

boolean DWHCITransferStageDataIsSplit (TDWHCITransferStageData *pThis)
{
   1de10:	e92d4830 	push	{r4, r5, fp, lr}
   1de14:	e28db00c 	add	fp, sp, #12
   1de18:	e24dd008 	sub	sp, sp, #8
   1de1c:	e1a0500e 	mov	r5, lr
   1de20:	e50b0010 	str	r0, [fp, #-16]
   1de24:	e1a03005 	mov	r3, r5
   1de28:	e30d0e10 	movw	r0, #56848	; 0xde10
   1de2c:	e3400001 	movt	r0, #1
   1de30:	e1a01003 	mov	r1, r3
   1de34:	ebffde38 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1de38:	e51b3010 	ldr	r3, [fp, #-16]
   1de3c:	e3530000 	cmp	r3, #0
   1de40:	1a000005 	bne	1de5c <DWHCITransferStageDataIsSplit+0x4c>
   1de44:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1de48:	e3400002 	movt	r0, #2
   1de4c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1de50:	e3401002 	movt	r1, #2
   1de54:	e300217f 	movw	r2, #383	; 0x17f
   1de58:	ebffe2d4 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_bSplitTransaction;
   1de5c:	e51b3010 	ldr	r3, [fp, #-16]
   1de60:	e5934010 	ldr	r4, [r3, #16]
   1de64:	e1a03005 	mov	r3, r5
   1de68:	e30d0e10 	movw	r0, #56848	; 0xde10
   1de6c:	e3400001 	movt	r0, #1
   1de70:	e1a01003 	mov	r1, r3
   1de74:	ebffde7a 	bl	15864 <__cyg_profile_func_exit>
   1de78:	e1a03004 	mov	r3, r4
}
   1de7c:	e1a00003 	mov	r0, r3
   1de80:	e24bd00c 	sub	sp, fp, #12
   1de84:	e8bd8830 	pop	{r4, r5, fp, pc}

0001de88 <DWHCITransferStageDataIsSplitComplete>:

boolean DWHCITransferStageDataIsSplitComplete (TDWHCITransferStageData *pThis)
{
   1de88:	e92d4830 	push	{r4, r5, fp, lr}
   1de8c:	e28db00c 	add	fp, sp, #12
   1de90:	e24dd008 	sub	sp, sp, #8
   1de94:	e1a0500e 	mov	r5, lr
   1de98:	e50b0010 	str	r0, [fp, #-16]
   1de9c:	e1a03005 	mov	r3, r5
   1dea0:	e30d0e88 	movw	r0, #56968	; 0xde88
   1dea4:	e3400001 	movt	r0, #1
   1dea8:	e1a01003 	mov	r1, r3
   1deac:	ebffde1a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1deb0:	e51b3010 	ldr	r3, [fp, #-16]
   1deb4:	e3530000 	cmp	r3, #0
   1deb8:	1a000005 	bne	1ded4 <DWHCITransferStageDataIsSplitComplete+0x4c>
   1debc:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1dec0:	e3400002 	movt	r0, #2
   1dec4:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1dec8:	e3401002 	movt	r1, #2
   1decc:	e3002185 	movw	r2, #389	; 0x185
   1ded0:	ebffe2b6 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bSplitTransaction);
   1ded4:	e51b3010 	ldr	r3, [fp, #-16]
   1ded8:	e5933010 	ldr	r3, [r3, #16]
   1dedc:	e3530000 	cmp	r3, #0
   1dee0:	1a000005 	bne	1defc <DWHCITransferStageDataIsSplitComplete+0x74>
   1dee4:	e30e0960 	movw	r0, #59744	; 0xe960
   1dee8:	e3400002 	movt	r0, #2
   1deec:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1def0:	e3401002 	movt	r1, #2
   1def4:	e3002186 	movw	r2, #390	; 0x186
   1def8:	ebffe2ac 	bl	169b0 <uspi_assertion_failed>
	
	return pThis->m_bSplitComplete;
   1defc:	e51b3010 	ldr	r3, [fp, #-16]
   1df00:	e5934014 	ldr	r4, [r3, #20]
   1df04:	e1a03005 	mov	r3, r5
   1df08:	e30d0e88 	movw	r0, #56968	; 0xde88
   1df0c:	e3400001 	movt	r0, #1
   1df10:	e1a01003 	mov	r1, r3
   1df14:	ebffde52 	bl	15864 <__cyg_profile_func_exit>
   1df18:	e1a03004 	mov	r3, r4
}
   1df1c:	e1a00003 	mov	r0, r3
   1df20:	e24bd00c 	sub	sp, fp, #12
   1df24:	e8bd8830 	pop	{r4, r5, fp, pc}

0001df28 <DWHCITransferStageDataGetHubAddress>:

u8 DWHCITransferStageDataGetHubAddress (TDWHCITransferStageData *pThis)
{
   1df28:	e92d4830 	push	{r4, r5, fp, lr}
   1df2c:	e28db00c 	add	fp, sp, #12
   1df30:	e24dd008 	sub	sp, sp, #8
   1df34:	e1a0400e 	mov	r4, lr
   1df38:	e50b0010 	str	r0, [fp, #-16]
   1df3c:	e1a03004 	mov	r3, r4
   1df40:	e30d0f28 	movw	r0, #57128	; 0xdf28
   1df44:	e3400001 	movt	r0, #1
   1df48:	e1a01003 	mov	r1, r3
   1df4c:	ebffddf2 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1df50:	e51b3010 	ldr	r3, [fp, #-16]
   1df54:	e3530000 	cmp	r3, #0
   1df58:	1a000005 	bne	1df74 <DWHCITransferStageDataGetHubAddress+0x4c>
   1df5c:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1df60:	e3400002 	movt	r0, #2
   1df64:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1df68:	e3401002 	movt	r1, #2
   1df6c:	e300218d 	movw	r2, #397	; 0x18d
   1df70:	ebffe28e 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bSplitTransaction);
   1df74:	e51b3010 	ldr	r3, [fp, #-16]
   1df78:	e5933010 	ldr	r3, [r3, #16]
   1df7c:	e3530000 	cmp	r3, #0
   1df80:	1a000005 	bne	1df9c <DWHCITransferStageDataGetHubAddress+0x74>
   1df84:	e30e0960 	movw	r0, #59744	; 0xe960
   1df88:	e3400002 	movt	r0, #2
   1df8c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1df90:	e3401002 	movt	r1, #2
   1df94:	e300218e 	movw	r2, #398	; 0x18e
   1df98:	ebffe284 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pDevice != 0);
   1df9c:	e51b3010 	ldr	r3, [fp, #-16]
   1dfa0:	e5933018 	ldr	r3, [r3, #24]
   1dfa4:	e3530000 	cmp	r3, #0
   1dfa8:	1a000005 	bne	1dfc4 <DWHCITransferStageDataGetHubAddress+0x9c>
   1dfac:	e30e0840 	movw	r0, #59456	; 0xe840
   1dfb0:	e3400002 	movt	r0, #2
   1dfb4:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1dfb8:	e3401002 	movt	r1, #2
   1dfbc:	e3a02e19 	mov	r2, #400	; 0x190
   1dfc0:	ebffe27a 	bl	169b0 <uspi_assertion_failed>
	return USBDeviceGetHubAddress (pThis->m_pDevice);
   1dfc4:	e51b3010 	ldr	r3, [fp, #-16]
   1dfc8:	e5933018 	ldr	r3, [r3, #24]
   1dfcc:	e1a00003 	mov	r0, r3
   1dfd0:	eb0007a7 	bl	1fe74 <USBDeviceGetHubAddress>
   1dfd4:	e1a03000 	mov	r3, r0
   1dfd8:	e1a05003 	mov	r5, r3
   1dfdc:	e1a03004 	mov	r3, r4
   1dfe0:	e30d0f28 	movw	r0, #57128	; 0xdf28
   1dfe4:	e3400001 	movt	r0, #1
   1dfe8:	e1a01003 	mov	r1, r3
   1dfec:	ebffde1c 	bl	15864 <__cyg_profile_func_exit>
   1dff0:	e1a03005 	mov	r3, r5
}
   1dff4:	e1a00003 	mov	r0, r3
   1dff8:	e24bd00c 	sub	sp, fp, #12
   1dffc:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e000 <DWHCITransferStageDataGetHubPortAddress>:

u8 DWHCITransferStageDataGetHubPortAddress (TDWHCITransferStageData *pThis)
{
   1e000:	e92d4830 	push	{r4, r5, fp, lr}
   1e004:	e28db00c 	add	fp, sp, #12
   1e008:	e24dd008 	sub	sp, sp, #8
   1e00c:	e1a0400e 	mov	r4, lr
   1e010:	e50b0010 	str	r0, [fp, #-16]
   1e014:	e1a03004 	mov	r3, r4
   1e018:	e30e0000 	movw	r0, #57344	; 0xe000
   1e01c:	e3400001 	movt	r0, #1
   1e020:	e1a01003 	mov	r1, r3
   1e024:	ebffddbc 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e028:	e51b3010 	ldr	r3, [fp, #-16]
   1e02c:	e3530000 	cmp	r3, #0
   1e030:	1a000005 	bne	1e04c <DWHCITransferStageDataGetHubPortAddress+0x4c>
   1e034:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1e038:	e3400002 	movt	r0, #2
   1e03c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e040:	e3401002 	movt	r1, #2
   1e044:	e3002196 	movw	r2, #406	; 0x196
   1e048:	ebffe258 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bSplitTransaction);
   1e04c:	e51b3010 	ldr	r3, [fp, #-16]
   1e050:	e5933010 	ldr	r3, [r3, #16]
   1e054:	e3530000 	cmp	r3, #0
   1e058:	1a000005 	bne	1e074 <DWHCITransferStageDataGetHubPortAddress+0x74>
   1e05c:	e30e0960 	movw	r0, #59744	; 0xe960
   1e060:	e3400002 	movt	r0, #2
   1e064:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e068:	e3401002 	movt	r1, #2
   1e06c:	e3002197 	movw	r2, #407	; 0x197
   1e070:	ebffe24e 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pDevice != 0);
   1e074:	e51b3010 	ldr	r3, [fp, #-16]
   1e078:	e5933018 	ldr	r3, [r3, #24]
   1e07c:	e3530000 	cmp	r3, #0
   1e080:	1a000005 	bne	1e09c <DWHCITransferStageDataGetHubPortAddress+0x9c>
   1e084:	e30e0840 	movw	r0, #59456	; 0xe840
   1e088:	e3400002 	movt	r0, #2
   1e08c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e090:	e3401002 	movt	r1, #2
   1e094:	e3002199 	movw	r2, #409	; 0x199
   1e098:	ebffe244 	bl	169b0 <uspi_assertion_failed>
	return USBDeviceGetHubPortNumber (pThis->m_pDevice);
   1e09c:	e51b3010 	ldr	r3, [fp, #-16]
   1e0a0:	e5933018 	ldr	r3, [r3, #24]
   1e0a4:	e1a00003 	mov	r0, r3
   1e0a8:	eb00078f 	bl	1feec <USBDeviceGetHubPortNumber>
   1e0ac:	e1a03000 	mov	r3, r0
   1e0b0:	e1a05003 	mov	r5, r3
   1e0b4:	e1a03004 	mov	r3, r4
   1e0b8:	e30e0000 	movw	r0, #57344	; 0xe000
   1e0bc:	e3400001 	movt	r0, #1
   1e0c0:	e1a01003 	mov	r1, r3
   1e0c4:	ebffdde6 	bl	15864 <__cyg_profile_func_exit>
   1e0c8:	e1a03005 	mov	r3, r5
}
   1e0cc:	e1a00003 	mov	r0, r3
   1e0d0:	e24bd00c 	sub	sp, fp, #12
   1e0d4:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e0d8 <DWHCITransferStageDataGetSplitPosition>:

u8 DWHCITransferStageDataGetSplitPosition (TDWHCITransferStageData *pThis)
{
   1e0d8:	e92d4830 	push	{r4, r5, fp, lr}
   1e0dc:	e28db00c 	add	fp, sp, #12
   1e0e0:	e24dd008 	sub	sp, sp, #8
   1e0e4:	e1a0500e 	mov	r5, lr
   1e0e8:	e50b0010 	str	r0, [fp, #-16]
   1e0ec:	e1a03005 	mov	r3, r5
   1e0f0:	e30e00d8 	movw	r0, #57560	; 0xe0d8
   1e0f4:	e3400001 	movt	r0, #1
   1e0f8:	e1a01003 	mov	r1, r3
   1e0fc:	ebffdd86 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e100:	e51b3010 	ldr	r3, [fp, #-16]
   1e104:	e3530000 	cmp	r3, #0
   1e108:	1a000005 	bne	1e124 <DWHCITransferStageDataGetSplitPosition+0x4c>
   1e10c:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1e110:	e3400002 	movt	r0, #2
   1e114:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e118:	e3401002 	movt	r1, #2
   1e11c:	e300219f 	movw	r2, #415	; 0x19f
   1e120:	ebffe222 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_nTransferSize <= 188);		// TODO
   1e124:	e51b3010 	ldr	r3, [fp, #-16]
   1e128:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   1e12c:	e35300bc 	cmp	r3, #188	; 0xbc
   1e130:	9a000005 	bls	1e14c <DWHCITransferStageDataGetSplitPosition+0x74>
   1e134:	e30e0980 	movw	r0, #59776	; 0xe980
   1e138:	e3400002 	movt	r0, #2
   1e13c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e140:	e3401002 	movt	r1, #2
   1e144:	e3a02e1a 	mov	r2, #416	; 0x1a0
   1e148:	ebffe218 	bl	169b0 <uspi_assertion_failed>
	return DWHCI_HOST_CHAN_SPLIT_CTRL_ALL;
   1e14c:	e3a04003 	mov	r4, #3
   1e150:	e1a03005 	mov	r3, r5
   1e154:	e30e00d8 	movw	r0, #57560	; 0xe0d8
   1e158:	e3400001 	movt	r0, #1
   1e15c:	e1a01003 	mov	r1, r3
   1e160:	ebffddbf 	bl	15864 <__cyg_profile_func_exit>
   1e164:	e1a03004 	mov	r3, r4
}
   1e168:	e1a00003 	mov	r0, r3
   1e16c:	e24bd00c 	sub	sp, fp, #12
   1e170:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e174 <DWHCITransferStageDataGetStatusMask>:

u32 DWHCITransferStageDataGetStatusMask (TDWHCITransferStageData *pThis)
{
   1e174:	e92d4830 	push	{r4, r5, fp, lr}
   1e178:	e28db00c 	add	fp, sp, #12
   1e17c:	e24dd010 	sub	sp, sp, #16
   1e180:	e1a0500e 	mov	r5, lr
   1e184:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1e188:	e1a03005 	mov	r3, r5
   1e18c:	e30e0174 	movw	r0, #57716	; 0xe174
   1e190:	e3400001 	movt	r0, #1
   1e194:	e1a01003 	mov	r1, r3
   1e198:	ebffdd5f 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e19c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e1a0:	e3530000 	cmp	r3, #0
   1e1a4:	1a000005 	bne	1e1c0 <DWHCITransferStageDataGetStatusMask+0x4c>
   1e1a8:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1e1ac:	e3400002 	movt	r0, #2
   1e1b0:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e1b4:	e3401002 	movt	r1, #2
   1e1b8:	e30021a6 	movw	r2, #422	; 0x1a6
   1e1bc:	ebffe1fb 	bl	169b0 <uspi_assertion_failed>
	u32 nMask =   DWHCI_HOST_CHAN_INT_XFER_COMPLETE
   1e1c0:	e300378f 	movw	r3, #1935	; 0x78f
   1e1c4:	e50b3010 	str	r3, [fp, #-16]
		    | DWHCI_HOST_CHAN_INT_HALTED
		    | DWHCI_HOST_CHAN_INT_ERROR_MASK;
		    
	if (   pThis->m_bSplitTransaction
   1e1c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e1cc:	e5933010 	ldr	r3, [r3, #16]
   1e1d0:	e3530000 	cmp	r3, #0
   1e1d4:	1a000004 	bne	1e1ec <DWHCITransferStageDataGetStatusMask+0x78>
	    || DWHCITransferStageDataIsPeriodic (pThis))
   1e1d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1e1dc:	ebfffd15 	bl	1d638 <DWHCITransferStageDataIsPeriodic>
   1e1e0:	e1a03000 	mov	r3, r0
   1e1e4:	e3530000 	cmp	r3, #0
   1e1e8:	0a000002 	beq	1e1f8 <DWHCITransferStageDataGetStatusMask+0x84>
	{
		nMask |=   DWHCI_HOST_CHAN_INT_ACK
   1e1ec:	e51b3010 	ldr	r3, [fp, #-16]
   1e1f0:	e3833070 	orr	r3, r3, #112	; 0x70
   1e1f4:	e50b3010 	str	r3, [fp, #-16]
			 | DWHCI_HOST_CHAN_INT_NAK
			 | DWHCI_HOST_CHAN_INT_NYET;
	}
	
	return	nMask;
   1e1f8:	e51b4010 	ldr	r4, [fp, #-16]
   1e1fc:	e1a03005 	mov	r3, r5
   1e200:	e30e0174 	movw	r0, #57716	; 0xe174
   1e204:	e3400001 	movt	r0, #1
   1e208:	e1a01003 	mov	r1, r3
   1e20c:	ebffdd94 	bl	15864 <__cyg_profile_func_exit>
   1e210:	e1a03004 	mov	r3, r4
}
   1e214:	e1a00003 	mov	r0, r3
   1e218:	e24bd00c 	sub	sp, fp, #12
   1e21c:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e220 <DWHCITransferStageDataGetTransactionStatus>:

u32 DWHCITransferStageDataGetTransactionStatus (TDWHCITransferStageData *pThis)
{
   1e220:	e92d4830 	push	{r4, r5, fp, lr}
   1e224:	e28db00c 	add	fp, sp, #12
   1e228:	e24dd008 	sub	sp, sp, #8
   1e22c:	e1a0500e 	mov	r5, lr
   1e230:	e50b0010 	str	r0, [fp, #-16]
   1e234:	e1a03005 	mov	r3, r5
   1e238:	e30e0220 	movw	r0, #57888	; 0xe220
   1e23c:	e3400001 	movt	r0, #1
   1e240:	e1a01003 	mov	r1, r3
   1e244:	ebffdd34 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e248:	e51b3010 	ldr	r3, [fp, #-16]
   1e24c:	e3530000 	cmp	r3, #0
   1e250:	1a000005 	bne	1e26c <DWHCITransferStageDataGetTransactionStatus+0x4c>
   1e254:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1e258:	e3400002 	movt	r0, #2
   1e25c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e260:	e3401002 	movt	r1, #2
   1e264:	e3a02f6e 	mov	r2, #440	; 0x1b8
   1e268:	ebffe1d0 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_nTransactionStatus != 0);
   1e26c:	e51b3010 	ldr	r3, [fp, #-16]
   1e270:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   1e274:	e3530000 	cmp	r3, #0
   1e278:	1a000005 	bne	1e294 <DWHCITransferStageDataGetTransactionStatus+0x74>
   1e27c:	e30e09a0 	movw	r0, #59808	; 0xe9a0
   1e280:	e3400002 	movt	r0, #2
   1e284:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e288:	e3401002 	movt	r1, #2
   1e28c:	e30021b9 	movw	r2, #441	; 0x1b9
   1e290:	ebffe1c6 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nTransactionStatus;
   1e294:	e51b3010 	ldr	r3, [fp, #-16]
   1e298:	e5934044 	ldr	r4, [r3, #68]	; 0x44
   1e29c:	e1a03005 	mov	r3, r5
   1e2a0:	e30e0220 	movw	r0, #57888	; 0xe220
   1e2a4:	e3400001 	movt	r0, #1
   1e2a8:	e1a01003 	mov	r1, r3
   1e2ac:	ebffdd6c 	bl	15864 <__cyg_profile_func_exit>
   1e2b0:	e1a03004 	mov	r3, r4
}
   1e2b4:	e1a00003 	mov	r0, r3
   1e2b8:	e24bd00c 	sub	sp, fp, #12
   1e2bc:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e2c0 <DWHCITransferStageDataIsStageComplete>:

boolean DWHCITransferStageDataIsStageComplete (TDWHCITransferStageData *pThis)
{
   1e2c0:	e92d4830 	push	{r4, r5, fp, lr}
   1e2c4:	e28db00c 	add	fp, sp, #12
   1e2c8:	e24dd008 	sub	sp, sp, #8
   1e2cc:	e1a0400e 	mov	r4, lr
   1e2d0:	e50b0010 	str	r0, [fp, #-16]
   1e2d4:	e1a03004 	mov	r3, r4
   1e2d8:	e30e02c0 	movw	r0, #58048	; 0xe2c0
   1e2dc:	e3400001 	movt	r0, #1
   1e2e0:	e1a01003 	mov	r1, r3
   1e2e4:	ebffdd0c 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e2e8:	e51b3010 	ldr	r3, [fp, #-16]
   1e2ec:	e3530000 	cmp	r3, #0
   1e2f0:	1a000005 	bne	1e30c <DWHCITransferStageDataIsStageComplete+0x4c>
   1e2f4:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1e2f8:	e3400002 	movt	r0, #2
   1e2fc:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e300:	e3401002 	movt	r1, #2
   1e304:	e30021bf 	movw	r2, #447	; 0x1bf
   1e308:	ebffe1a8 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nPackets == 0;
   1e30c:	e51b3010 	ldr	r3, [fp, #-16]
   1e310:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1e314:	e3530000 	cmp	r3, #0
   1e318:	03a03001 	moveq	r3, #1
   1e31c:	13a03000 	movne	r3, #0
   1e320:	e6ef3073 	uxtb	r3, r3
   1e324:	e1a05003 	mov	r5, r3
   1e328:	e1a03004 	mov	r3, r4
   1e32c:	e30e02c0 	movw	r0, #58048	; 0xe2c0
   1e330:	e3400001 	movt	r0, #1
   1e334:	e1a01003 	mov	r1, r3
   1e338:	ebffdd49 	bl	15864 <__cyg_profile_func_exit>
   1e33c:	e1a03005 	mov	r3, r5
}
   1e340:	e1a00003 	mov	r0, r3
   1e344:	e24bd00c 	sub	sp, fp, #12
   1e348:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e34c <DWHCITransferStageDataGetResultLen>:

u32 DWHCITransferStageDataGetResultLen (TDWHCITransferStageData *pThis)
{
   1e34c:	e92d4830 	push	{r4, r5, fp, lr}
   1e350:	e28db00c 	add	fp, sp, #12
   1e354:	e24dd008 	sub	sp, sp, #8
   1e358:	e1a0500e 	mov	r5, lr
   1e35c:	e50b0010 	str	r0, [fp, #-16]
   1e360:	e1a03005 	mov	r3, r5
   1e364:	e30e034c 	movw	r0, #58188	; 0xe34c
   1e368:	e3400001 	movt	r0, #1
   1e36c:	e1a01003 	mov	r1, r3
   1e370:	ebffdce9 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e374:	e51b3010 	ldr	r3, [fp, #-16]
   1e378:	e3530000 	cmp	r3, #0
   1e37c:	1a000005 	bne	1e398 <DWHCITransferStageDataGetResultLen+0x4c>
   1e380:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1e384:	e3400002 	movt	r0, #2
   1e388:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e38c:	e3401002 	movt	r1, #2
   1e390:	e30021c5 	movw	r2, #453	; 0x1c5
   1e394:	ebffe185 	bl	169b0 <uspi_assertion_failed>
	if (pThis->m_nTotalBytesTransfered > pThis->m_nTransferSize)
   1e398:	e51b3010 	ldr	r3, [fp, #-16]
   1e39c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1e3a0:	e51b3010 	ldr	r3, [fp, #-16]
   1e3a4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   1e3a8:	e1520003 	cmp	r2, r3
   1e3ac:	9a000002 	bls	1e3bc <DWHCITransferStageDataGetResultLen+0x70>
	{
		return pThis->m_nTransferSize;
   1e3b0:	e51b3010 	ldr	r3, [fp, #-16]
   1e3b4:	e5934028 	ldr	r4, [r3, #40]	; 0x28
   1e3b8:	ea000001 	b	1e3c4 <DWHCITransferStageDataGetResultLen+0x78>
	}
	
	return pThis->m_nTotalBytesTransfered;
   1e3bc:	e51b3010 	ldr	r3, [fp, #-16]
   1e3c0:	e5934038 	ldr	r4, [r3, #56]	; 0x38
   1e3c4:	e1a03005 	mov	r3, r5
   1e3c8:	e30e034c 	movw	r0, #58188	; 0xe34c
   1e3cc:	e3400001 	movt	r0, #1
   1e3d0:	e1a01003 	mov	r1, r3
   1e3d4:	ebffdd22 	bl	15864 <__cyg_profile_func_exit>
   1e3d8:	e1a03004 	mov	r3, r4
}
   1e3dc:	e1a00003 	mov	r0, r3
   1e3e0:	e24bd00c 	sub	sp, fp, #12
   1e3e4:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e3e8 <DWHCITransferStageDataGetURB>:

TUSBRequest *DWHCITransferStageDataGetURB (TDWHCITransferStageData *pThis)
{
   1e3e8:	e92d4830 	push	{r4, r5, fp, lr}
   1e3ec:	e28db00c 	add	fp, sp, #12
   1e3f0:	e24dd008 	sub	sp, sp, #8
   1e3f4:	e1a0500e 	mov	r5, lr
   1e3f8:	e50b0010 	str	r0, [fp, #-16]
   1e3fc:	e1a03005 	mov	r3, r5
   1e400:	e30e03e8 	movw	r0, #58344	; 0xe3e8
   1e404:	e3400001 	movt	r0, #1
   1e408:	e1a01003 	mov	r1, r3
   1e40c:	ebffdcc2 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e410:	e51b3010 	ldr	r3, [fp, #-16]
   1e414:	e3530000 	cmp	r3, #0
   1e418:	1a000005 	bne	1e434 <DWHCITransferStageDataGetURB+0x4c>
   1e41c:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1e420:	e3400002 	movt	r0, #2
   1e424:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e428:	e3401002 	movt	r1, #2
   1e42c:	e3a02e1d 	mov	r2, #464	; 0x1d0
   1e430:	ebffe15e 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pURB != 0);
   1e434:	e51b3010 	ldr	r3, [fp, #-16]
   1e438:	e5933004 	ldr	r3, [r3, #4]
   1e43c:	e3530000 	cmp	r3, #0
   1e440:	1a000005 	bne	1e45c <DWHCITransferStageDataGetURB+0x74>
   1e444:	e30e0814 	movw	r0, #59412	; 0xe814
   1e448:	e3400002 	movt	r0, #2
   1e44c:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e450:	e3401002 	movt	r1, #2
   1e454:	e30021d1 	movw	r2, #465	; 0x1d1
   1e458:	ebffe154 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_pURB;
   1e45c:	e51b3010 	ldr	r3, [fp, #-16]
   1e460:	e5934004 	ldr	r4, [r3, #4]
   1e464:	e1a03005 	mov	r3, r5
   1e468:	e30e03e8 	movw	r0, #58344	; 0xe3e8
   1e46c:	e3400001 	movt	r0, #1
   1e470:	e1a01003 	mov	r1, r3
   1e474:	ebffdcfa 	bl	15864 <__cyg_profile_func_exit>
   1e478:	e1a03004 	mov	r3, r4
}
   1e47c:	e1a00003 	mov	r0, r3
   1e480:	e24bd00c 	sub	sp, fp, #12
   1e484:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e488 <DWHCITransferStageDataGetFrameScheduler>:

TDWHCIFrameScheduler *DWHCITransferStageDataGetFrameScheduler (TDWHCITransferStageData *pThis)
{
   1e488:	e92d4830 	push	{r4, r5, fp, lr}
   1e48c:	e28db00c 	add	fp, sp, #12
   1e490:	e24dd008 	sub	sp, sp, #8
   1e494:	e1a0500e 	mov	r5, lr
   1e498:	e50b0010 	str	r0, [fp, #-16]
   1e49c:	e1a03005 	mov	r3, r5
   1e4a0:	e30e0488 	movw	r0, #58504	; 0xe488
   1e4a4:	e3400001 	movt	r0, #1
   1e4a8:	e1a01003 	mov	r1, r3
   1e4ac:	ebffdc9a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e4b0:	e51b3010 	ldr	r3, [fp, #-16]
   1e4b4:	e3530000 	cmp	r3, #0
   1e4b8:	1a000005 	bne	1e4d4 <DWHCITransferStageDataGetFrameScheduler+0x4c>
   1e4bc:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   1e4c0:	e3400002 	movt	r0, #2
   1e4c4:	e30e17ac 	movw	r1, #59308	; 0xe7ac
   1e4c8:	e3401002 	movt	r1, #2
   1e4cc:	e30021d7 	movw	r2, #471	; 0x1d7
   1e4d0:	ebffe136 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_pFrameScheduler;
   1e4d4:	e51b3010 	ldr	r3, [fp, #-16]
   1e4d8:	e5934050 	ldr	r4, [r3, #80]	; 0x50
   1e4dc:	e1a03005 	mov	r3, r5
   1e4e0:	e30e0488 	movw	r0, #58504	; 0xe488
   1e4e4:	e3400001 	movt	r0, #1
   1e4e8:	e1a01003 	mov	r1, r3
   1e4ec:	ebffdcdc 	bl	15864 <__cyg_profile_func_exit>
   1e4f0:	e1a03004 	mov	r3, r4
}
   1e4f4:	e1a00003 	mov	r0, r3
   1e4f8:	e24bd00c 	sub	sp, fp, #12
   1e4fc:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e500 <USBConfigurationParser>:
#include <uspi/assert.h>

#define SKIP_BYTES(pDesc, nBytes)	((TUSBDescriptor *) ((u8 *) (pDesc) + (nBytes)))

void USBConfigurationParser (TUSBConfigurationParser *pThis, const void *pBuffer, unsigned nBufLen)
{
   1e500:	e92d4830 	push	{r4, r5, fp, lr}
   1e504:	e28db00c 	add	fp, sp, #12
   1e508:	e24dd020 	sub	sp, sp, #32
   1e50c:	e1a0500e 	mov	r5, lr
   1e510:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1e514:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   1e518:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   1e51c:	e1a03005 	mov	r3, r5
   1e520:	e30e0500 	movw	r0, #58624	; 0xe500
   1e524:	e3400001 	movt	r0, #1
   1e528:	e1a01003 	mov	r1, r3
   1e52c:	ebffdc7a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e530:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e534:	e3530000 	cmp	r3, #0
   1e538:	1a000005 	bne	1e554 <USBConfigurationParser+0x54>
   1e53c:	e30e09c4 	movw	r0, #59844	; 0xe9c4
   1e540:	e3400002 	movt	r0, #2
   1e544:	e30e19d0 	movw	r1, #59856	; 0xe9d0
   1e548:	e3401002 	movt	r1, #2
   1e54c:	e3a0201c 	mov	r2, #28
   1e550:	ebffe116 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pBuffer = (TUSBDescriptor *) pBuffer;
   1e554:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e558:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   1e55c:	e5832000 	str	r2, [r3]
	pThis->m_nBufLen = nBufLen;
   1e560:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e564:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   1e568:	e5832004 	str	r2, [r3, #4]
	pThis->m_bValid = FALSE;
   1e56c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e570:	e3a02000 	mov	r2, #0
   1e574:	e5832008 	str	r2, [r3, #8]
	pThis->m_pEndPosition = SKIP_BYTES (pThis->m_pBuffer, nBufLen);
   1e578:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e57c:	e5932000 	ldr	r2, [r3]
   1e580:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e584:	e0822003 	add	r2, r2, r3
   1e588:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e58c:	e583200c 	str	r2, [r3, #12]
	pThis->m_pCurrentPosition = pThis->m_pBuffer;
   1e590:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e594:	e5932000 	ldr	r2, [r3]
   1e598:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e59c:	e5832010 	str	r2, [r3, #16]
	pThis->m_pErrorPosition = pThis->m_pBuffer;
   1e5a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e5a4:	e5932000 	ldr	r2, [r3]
   1e5a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e5ac:	e5832014 	str	r2, [r3, #20]

	assert (pThis->m_pBuffer != 0);
   1e5b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e5b4:	e5933000 	ldr	r3, [r3]
   1e5b8:	e3530000 	cmp	r3, #0
   1e5bc:	1a000005 	bne	1e5d8 <USBConfigurationParser+0xd8>
   1e5c0:	e30e0a34 	movw	r0, #59956	; 0xea34
   1e5c4:	e3400002 	movt	r0, #2
   1e5c8:	e30e19d0 	movw	r1, #59856	; 0xe9d0
   1e5cc:	e3401002 	movt	r1, #2
   1e5d0:	e3a02024 	mov	r2, #36	; 0x24
   1e5d4:	ebffe0f5 	bl	169b0 <uspi_assertion_failed>
	
	if (   pThis->m_nBufLen < 4		// wTotalLength must exist
   1e5d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e5dc:	e5933004 	ldr	r3, [r3, #4]
   1e5e0:	e3530003 	cmp	r3, #3
   1e5e4:	9a000003 	bls	1e5f8 <USBConfigurationParser+0xf8>
	    || pThis->m_nBufLen > 512)		// best guess
   1e5e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e5ec:	e5933004 	ldr	r3, [r3, #4]
   1e5f0:	e3530c02 	cmp	r3, #512	; 0x200
   1e5f4:	9a000001 	bls	1e600 <USBConfigurationParser+0x100>
   1e5f8:	e3a04000 	mov	r4, #0
	{
		return;
   1e5fc:	ea000090 	b	1e844 <USBConfigurationParser+0x344>
	}

	if (   pThis->m_pBuffer->Configuration.bLength         != sizeof (TUSBConfigurationDescriptor)
   1e600:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e604:	e5933000 	ldr	r3, [r3]
   1e608:	e5d33000 	ldrb	r3, [r3]
   1e60c:	e3530009 	cmp	r3, #9
   1e610:	1a00000c 	bne	1e648 <USBConfigurationParser+0x148>
	    || pThis->m_pBuffer->Configuration.bDescriptorType != DESCRIPTOR_CONFIGURATION
   1e614:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e618:	e5933000 	ldr	r3, [r3]
   1e61c:	e5d33001 	ldrb	r3, [r3, #1]
   1e620:	e3530002 	cmp	r3, #2
   1e624:	1a000007 	bne	1e648 <USBConfigurationParser+0x148>
	    || pThis->m_pBuffer->Configuration.wTotalLength    >  nBufLen)
   1e628:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e62c:	e5933000 	ldr	r3, [r3]
   1e630:	e1d330b2 	ldrh	r3, [r3, #2]
   1e634:	e6ff3073 	uxth	r3, r3
   1e638:	e1a02003 	mov	r2, r3
   1e63c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e640:	e1520003 	cmp	r2, r3
   1e644:	9a000001 	bls	1e650 <USBConfigurationParser+0x150>
   1e648:	e3a04000 	mov	r4, #0
	{
		return;
   1e64c:	ea00007c 	b	1e844 <USBConfigurationParser+0x344>
	}

	if (pThis->m_pBuffer->Configuration.wTotalLength < nBufLen)
   1e650:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e654:	e5933000 	ldr	r3, [r3]
   1e658:	e1d330b2 	ldrh	r3, [r3, #2]
   1e65c:	e6ff3073 	uxth	r3, r3
   1e660:	e1a02003 	mov	r2, r3
   1e664:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e668:	e1520003 	cmp	r2, r3
   1e66c:	2a000008 	bcs	1e694 <USBConfigurationParser+0x194>
	{
		pThis->m_pEndPosition = SKIP_BYTES (pThis->m_pBuffer, pThis->m_pBuffer->Configuration.wTotalLength);
   1e670:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e674:	e5933000 	ldr	r3, [r3]
   1e678:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   1e67c:	e5922000 	ldr	r2, [r2]
   1e680:	e1d220b2 	ldrh	r2, [r2, #2]
   1e684:	e6ff2072 	uxth	r2, r2
   1e688:	e0832002 	add	r2, r3, r2
   1e68c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e690:	e583200c 	str	r2, [r3, #12]
	}

	const TUSBDescriptor *pCurrentPosition = pThis->m_pBuffer;
   1e694:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e698:	e5933000 	ldr	r3, [r3]
   1e69c:	e50b3010 	str	r3, [fp, #-16]
	u8 ucLastDescType = 0;
   1e6a0:	e3a03000 	mov	r3, #0
   1e6a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	while (SKIP_BYTES (pCurrentPosition, 2) < pThis->m_pEndPosition)
   1e6a8:	ea000051 	b	1e7f4 <USBConfigurationParser+0x2f4>
	{
		u8 ucDescLen  = pCurrentPosition->Header.bLength;
   1e6ac:	e51b3010 	ldr	r3, [fp, #-16]
   1e6b0:	e5d33000 	ldrb	r3, [r3]
   1e6b4:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
		u8 ucDescType = pCurrentPosition->Header.bDescriptorType;
   1e6b8:	e51b3010 	ldr	r3, [fp, #-16]
   1e6bc:	e5d33001 	ldrb	r3, [r3, #1]
   1e6c0:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec

		TUSBDescriptor *pDescEnd = SKIP_BYTES (pCurrentPosition, ucDescLen);
   1e6c4:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
   1e6c8:	e51b2010 	ldr	r2, [fp, #-16]
   1e6cc:	e0823003 	add	r3, r2, r3
   1e6d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		if (pDescEnd > pThis->m_pEndPosition)
   1e6d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e6d8:	e593200c 	ldr	r2, [r3, #12]
   1e6dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e6e0:	e1520003 	cmp	r2, r3
   1e6e4:	2a000004 	bcs	1e6fc <USBConfigurationParser+0x1fc>
		{
			pThis->m_pErrorPosition = pCurrentPosition;
   1e6e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e6ec:	e51b2010 	ldr	r2, [fp, #-16]
   1e6f0:	e5832014 	str	r2, [r3, #20]
   1e6f4:	e3a04000 	mov	r4, #0
			return;
   1e6f8:	ea000051 	b	1e844 <USBConfigurationParser+0x344>
		}

		u8 ucExpectedLen = 0;
   1e6fc:	e3a03000 	mov	r3, #0
   1e700:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
		switch (ucDescType)
   1e704:	e55b3014 	ldrb	r3, [fp, #-20]	; 0xffffffec
   1e708:	e3530004 	cmp	r3, #4
   1e70c:	0a00000f 	beq	1e750 <USBConfigurationParser+0x250>
   1e710:	e3530005 	cmp	r3, #5
   1e714:	0a000018 	beq	1e77c <USBConfigurationParser+0x27c>
   1e718:	e3530002 	cmp	r3, #2
   1e71c:	0a000000 	beq	1e724 <USBConfigurationParser+0x224>
			}
			ucExpectedLen = sizeof (TUSBEndpointDescriptor);
			break;

		default:
			break;
   1e720:	ea000023 	b	1e7b4 <USBConfigurationParser+0x2b4>

		u8 ucExpectedLen = 0;
		switch (ucDescType)
		{
		case DESCRIPTOR_CONFIGURATION:
			if (ucLastDescType != 0)
   1e724:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1e728:	e3530000 	cmp	r3, #0
   1e72c:	0a000004 	beq	1e744 <USBConfigurationParser+0x244>
			{
				pThis->m_pErrorPosition = pCurrentPosition;
   1e730:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e734:	e51b2010 	ldr	r2, [fp, #-16]
   1e738:	e5832014 	str	r2, [r3, #20]
   1e73c:	e3a04000 	mov	r4, #0
				return;
   1e740:	ea00003f 	b	1e844 <USBConfigurationParser+0x344>
			}
			ucExpectedLen = sizeof (TUSBConfigurationDescriptor);
   1e744:	e3a03009 	mov	r3, #9
   1e748:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
			break;
   1e74c:	ea000018 	b	1e7b4 <USBConfigurationParser+0x2b4>

		case DESCRIPTOR_INTERFACE:
			if (ucLastDescType == 0)
   1e750:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1e754:	e3530000 	cmp	r3, #0
   1e758:	1a000004 	bne	1e770 <USBConfigurationParser+0x270>
			{
				pThis->m_pErrorPosition = pCurrentPosition;
   1e75c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e760:	e51b2010 	ldr	r2, [fp, #-16]
   1e764:	e5832014 	str	r2, [r3, #20]
   1e768:	e3a04000 	mov	r4, #0
				return;
   1e76c:	ea000034 	b	1e844 <USBConfigurationParser+0x344>
			}
			ucExpectedLen = sizeof (TUSBInterfaceDescriptor);
   1e770:	e3a03009 	mov	r3, #9
   1e774:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
			break;
   1e778:	ea00000d 	b	1e7b4 <USBConfigurationParser+0x2b4>

		case DESCRIPTOR_ENDPOINT:
			if (   ucLastDescType == 0
   1e77c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1e780:	e3530000 	cmp	r3, #0
   1e784:	0a000002 	beq	1e794 <USBConfigurationParser+0x294>
			    || ucLastDescType == DESCRIPTOR_CONFIGURATION)
   1e788:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1e78c:	e3530002 	cmp	r3, #2
   1e790:	1a000004 	bne	1e7a8 <USBConfigurationParser+0x2a8>
			{
				pThis->m_pErrorPosition = pCurrentPosition;
   1e794:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e798:	e51b2010 	ldr	r2, [fp, #-16]
   1e79c:	e5832014 	str	r2, [r3, #20]
   1e7a0:	e3a04000 	mov	r4, #0
				return;
   1e7a4:	ea000026 	b	1e844 <USBConfigurationParser+0x344>
			}
			ucExpectedLen = sizeof (TUSBEndpointDescriptor);
   1e7a8:	e3a03007 	mov	r3, #7
   1e7ac:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
			break;
   1e7b0:	e1a00000 	nop			; (mov r0, r0)

		default:
			break;
		}

		if (   ucExpectedLen != 0
   1e7b4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   1e7b8:	e3530000 	cmp	r3, #0
   1e7bc:	0a000008 	beq	1e7e4 <USBConfigurationParser+0x2e4>
		    && ucDescLen != ucExpectedLen)
   1e7c0:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
   1e7c4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   1e7c8:	e1520003 	cmp	r2, r3
   1e7cc:	0a000004 	beq	1e7e4 <USBConfigurationParser+0x2e4>
		{
			pThis->m_pErrorPosition = pCurrentPosition;
   1e7d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e7d4:	e51b2010 	ldr	r2, [fp, #-16]
   1e7d8:	e5832014 	str	r2, [r3, #20]
   1e7dc:	e3a04000 	mov	r4, #0
			return;
   1e7e0:	ea000017 	b	1e844 <USBConfigurationParser+0x344>
		}

		ucLastDescType = ucDescType;
   1e7e4:	e55b3014 	ldrb	r3, [fp, #-20]	; 0xffffffec
   1e7e8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		pCurrentPosition = pDescEnd;
   1e7ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e7f0:	e50b3010 	str	r3, [fp, #-16]
		pThis->m_pEndPosition = SKIP_BYTES (pThis->m_pBuffer, pThis->m_pBuffer->Configuration.wTotalLength);
	}

	const TUSBDescriptor *pCurrentPosition = pThis->m_pBuffer;
	u8 ucLastDescType = 0;
	while (SKIP_BYTES (pCurrentPosition, 2) < pThis->m_pEndPosition)
   1e7f4:	e51b3010 	ldr	r3, [fp, #-16]
   1e7f8:	e2832002 	add	r2, r3, #2
   1e7fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e800:	e593300c 	ldr	r3, [r3, #12]
   1e804:	e1520003 	cmp	r2, r3
   1e808:	3affffa7 	bcc	1e6ac <USBConfigurationParser+0x1ac>

		ucLastDescType = ucDescType;
		pCurrentPosition = pDescEnd;
	}

	if (pCurrentPosition != pThis->m_pEndPosition)
   1e80c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e810:	e593200c 	ldr	r2, [r3, #12]
   1e814:	e51b3010 	ldr	r3, [fp, #-16]
   1e818:	e1520003 	cmp	r2, r3
   1e81c:	0a000004 	beq	1e834 <USBConfigurationParser+0x334>
	{
		pThis->m_pErrorPosition = pCurrentPosition;
   1e820:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e824:	e51b2010 	ldr	r2, [fp, #-16]
   1e828:	e5832014 	str	r2, [r3, #20]
   1e82c:	e3a04000 	mov	r4, #0
		return;
   1e830:	ea000003 	b	1e844 <USBConfigurationParser+0x344>
	}

	pThis->m_bValid = TRUE;
   1e834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e838:	e3a02001 	mov	r2, #1
   1e83c:	e5832008 	str	r2, [r3, #8]
   1e840:	e3a04001 	mov	r4, #1
   1e844:	e1a03005 	mov	r3, r5
   1e848:	e30e0500 	movw	r0, #58624	; 0xe500
   1e84c:	e3400001 	movt	r0, #1
   1e850:	e1a01003 	mov	r1, r3
   1e854:	ebffdc02 	bl	15864 <__cyg_profile_func_exit>
   1e858:	e3540001 	cmp	r4, #1
}
   1e85c:	e24bd00c 	sub	sp, fp, #12
   1e860:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e864 <_USBConfigurationParser>:

void _USBConfigurationParser (TUSBConfigurationParser *pThis)
{
   1e864:	e92d4810 	push	{r4, fp, lr}
   1e868:	e28db008 	add	fp, sp, #8
   1e86c:	e24dd00c 	sub	sp, sp, #12
   1e870:	e1a0400e 	mov	r4, lr
   1e874:	e50b0010 	str	r0, [fp, #-16]
   1e878:	e1a03004 	mov	r3, r4
   1e87c:	e30e0864 	movw	r0, #59492	; 0xe864
   1e880:	e3400001 	movt	r0, #1
   1e884:	e1a01003 	mov	r1, r3
   1e888:	ebffdba3 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e88c:	e51b3010 	ldr	r3, [fp, #-16]
   1e890:	e3530000 	cmp	r3, #0
   1e894:	1a000005 	bne	1e8b0 <_USBConfigurationParser+0x4c>
   1e898:	e30e09c4 	movw	r0, #59844	; 0xe9c4
   1e89c:	e3400002 	movt	r0, #2
   1e8a0:	e30e19d0 	movw	r1, #59856	; 0xe9d0
   1e8a4:	e3401002 	movt	r1, #2
   1e8a8:	e3a0207f 	mov	r2, #127	; 0x7f
   1e8ac:	ebffe03f 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pBuffer = 0;
   1e8b0:	e51b3010 	ldr	r3, [fp, #-16]
   1e8b4:	e3a02000 	mov	r2, #0
   1e8b8:	e5832000 	str	r2, [r3]
   1e8bc:	e1a03004 	mov	r3, r4
   1e8c0:	e30e0864 	movw	r0, #59492	; 0xe864
   1e8c4:	e3400001 	movt	r0, #1
   1e8c8:	e1a01003 	mov	r1, r3
   1e8cc:	ebffdbe4 	bl	15864 <__cyg_profile_func_exit>
}
   1e8d0:	e24bd008 	sub	sp, fp, #8
   1e8d4:	e8bd8810 	pop	{r4, fp, pc}

0001e8d8 <USBConfigurationParserIsValid>:

boolean USBConfigurationParserIsValid (TUSBConfigurationParser *pThis)
{
   1e8d8:	e92d4830 	push	{r4, r5, fp, lr}
   1e8dc:	e28db00c 	add	fp, sp, #12
   1e8e0:	e24dd008 	sub	sp, sp, #8
   1e8e4:	e1a0500e 	mov	r5, lr
   1e8e8:	e50b0010 	str	r0, [fp, #-16]
   1e8ec:	e1a03005 	mov	r3, r5
   1e8f0:	e30e08d8 	movw	r0, #59608	; 0xe8d8
   1e8f4:	e3400001 	movt	r0, #1
   1e8f8:	e1a01003 	mov	r1, r3
   1e8fc:	ebffdb86 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e900:	e51b3010 	ldr	r3, [fp, #-16]
   1e904:	e3530000 	cmp	r3, #0
   1e908:	1a000005 	bne	1e924 <USBConfigurationParserIsValid+0x4c>
   1e90c:	e30e09c4 	movw	r0, #59844	; 0xe9c4
   1e910:	e3400002 	movt	r0, #2
   1e914:	e30e19d0 	movw	r1, #59856	; 0xe9d0
   1e918:	e3401002 	movt	r1, #2
   1e91c:	e3a02085 	mov	r2, #133	; 0x85
   1e920:	ebffe022 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_bValid;
   1e924:	e51b3010 	ldr	r3, [fp, #-16]
   1e928:	e5934008 	ldr	r4, [r3, #8]
   1e92c:	e1a03005 	mov	r3, r5
   1e930:	e30e08d8 	movw	r0, #59608	; 0xe8d8
   1e934:	e3400001 	movt	r0, #1
   1e938:	e1a01003 	mov	r1, r3
   1e93c:	ebffdbc8 	bl	15864 <__cyg_profile_func_exit>
   1e940:	e1a03004 	mov	r3, r4
}
   1e944:	e1a00003 	mov	r0, r3
   1e948:	e24bd00c 	sub	sp, fp, #12
   1e94c:	e8bd8830 	pop	{r4, r5, fp, pc}

0001e950 <USBConfigurationParserGetDescriptor>:

const TUSBDescriptor *USBConfigurationParserGetDescriptor (TUSBConfigurationParser *pThis, u8 ucType)
{
   1e950:	e92d4830 	push	{r4, r5, fp, lr}
   1e954:	e28db00c 	add	fp, sp, #12
   1e958:	e24dd018 	sub	sp, sp, #24
   1e95c:	e1a0500e 	mov	r5, lr
   1e960:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1e964:	e1a03001 	mov	r3, r1
   1e968:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
   1e96c:	e1a03005 	mov	r3, r5
   1e970:	e30e0950 	movw	r0, #59728	; 0xe950
   1e974:	e3400001 	movt	r0, #1
   1e978:	e1a01003 	mov	r1, r3
   1e97c:	ebffdb66 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1e980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e984:	e3530000 	cmp	r3, #0
   1e988:	1a000005 	bne	1e9a4 <USBConfigurationParserGetDescriptor+0x54>
   1e98c:	e30e09c4 	movw	r0, #59844	; 0xe9c4
   1e990:	e3400002 	movt	r0, #2
   1e994:	e30e19d0 	movw	r1, #59856	; 0xe9d0
   1e998:	e3401002 	movt	r1, #2
   1e99c:	e3a0208b 	mov	r2, #139	; 0x8b
   1e9a0:	ebffe002 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   1e9a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e9a8:	e5933008 	ldr	r3, [r3, #8]
   1e9ac:	e3530000 	cmp	r3, #0
   1e9b0:	1a000005 	bne	1e9cc <USBConfigurationParserGetDescriptor+0x7c>
   1e9b4:	e30e0a4c 	movw	r0, #59980	; 0xea4c
   1e9b8:	e3400002 	movt	r0, #2
   1e9bc:	e30e19d0 	movw	r1, #59856	; 0xe9d0
   1e9c0:	e3401002 	movt	r1, #2
   1e9c4:	e3a0208c 	mov	r2, #140	; 0x8c
   1e9c8:	ebffdff8 	bl	169b0 <uspi_assertion_failed>

	const TUSBDescriptor *pResult = 0;
   1e9cc:	e3a03000 	mov	r3, #0
   1e9d0:	e50b3010 	str	r3, [fp, #-16]
	
	while (pThis->m_pCurrentPosition < pThis->m_pEndPosition)
   1e9d4:	ea00002c 	b	1ea8c <USBConfigurationParserGetDescriptor+0x13c>
	{
		u8 ucDescLen  = pThis->m_pCurrentPosition->Header.bLength;
   1e9d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e9dc:	e5933010 	ldr	r3, [r3, #16]
   1e9e0:	e5d33000 	ldrb	r3, [r3]
   1e9e4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		u8 ucDescType = pThis->m_pCurrentPosition->Header.bDescriptorType;
   1e9e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e9ec:	e5933010 	ldr	r3, [r3, #16]
   1e9f0:	e5d33001 	ldrb	r3, [r3, #1]
   1e9f4:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

		TUSBDescriptor *pDescEnd = SKIP_BYTES (pThis->m_pCurrentPosition, ucDescLen);
   1e9f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e9fc:	e5932010 	ldr	r2, [r3, #16]
   1ea00:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1ea04:	e0823003 	add	r3, r2, r3
   1ea08:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		assert (pDescEnd <= pThis->m_pEndPosition);
   1ea0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ea10:	e593200c 	ldr	r2, [r3, #12]
   1ea14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ea18:	e1520003 	cmp	r2, r3
   1ea1c:	2a000005 	bcs	1ea38 <USBConfigurationParserGetDescriptor+0xe8>
   1ea20:	e30e0a5c 	movw	r0, #59996	; 0xea5c
   1ea24:	e3400002 	movt	r0, #2
   1ea28:	e30e19d0 	movw	r1, #59856	; 0xe9d0
   1ea2c:	e3401002 	movt	r1, #2
   1ea30:	e3a02096 	mov	r2, #150	; 0x96
   1ea34:	ebffdfdd 	bl	169b0 <uspi_assertion_failed>

		if (   ucType     == DESCRIPTOR_ENDPOINT
   1ea38:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1ea3c:	e3530005 	cmp	r3, #5
   1ea40:	1a000003 	bne	1ea54 <USBConfigurationParserGetDescriptor+0x104>
		    && ucDescType == DESCRIPTOR_INTERFACE)
   1ea44:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   1ea48:	e3530004 	cmp	r3, #4
   1ea4c:	1a000000 	bne	1ea54 <USBConfigurationParserGetDescriptor+0x104>
		{
			break;
   1ea50:	ea000013 	b	1eaa4 <USBConfigurationParserGetDescriptor+0x154>
		}

		if (ucDescType == ucType)
   1ea54:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
   1ea58:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1ea5c:	e1520003 	cmp	r2, r3
   1ea60:	1a000006 	bne	1ea80 <USBConfigurationParserGetDescriptor+0x130>
		{
			pResult = pThis->m_pCurrentPosition;
   1ea64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ea68:	e5933010 	ldr	r3, [r3, #16]
   1ea6c:	e50b3010 	str	r3, [fp, #-16]
			pThis->m_pCurrentPosition = pDescEnd;
   1ea70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ea74:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ea78:	e5832010 	str	r2, [r3, #16]
			break;
   1ea7c:	ea000008 	b	1eaa4 <USBConfigurationParserGetDescriptor+0x154>
		}

		pThis->m_pCurrentPosition = pDescEnd;
   1ea80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ea84:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ea88:	e5832010 	str	r2, [r3, #16]
	assert (pThis != 0);
	assert (pThis->m_bValid);

	const TUSBDescriptor *pResult = 0;
	
	while (pThis->m_pCurrentPosition < pThis->m_pEndPosition)
   1ea8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ea90:	e5932010 	ldr	r2, [r3, #16]
   1ea94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ea98:	e593300c 	ldr	r3, [r3, #12]
   1ea9c:	e1520003 	cmp	r2, r3
   1eaa0:	3affffcc 	bcc	1e9d8 <USBConfigurationParserGetDescriptor+0x88>
		}

		pThis->m_pCurrentPosition = pDescEnd;
	}

	if (pResult != 0)
   1eaa4:	e51b3010 	ldr	r3, [fp, #-16]
   1eaa8:	e3530000 	cmp	r3, #0
   1eaac:	0a000002 	beq	1eabc <USBConfigurationParserGetDescriptor+0x16c>
	{
		pThis->m_pErrorPosition = pResult;
   1eab0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1eab4:	e51b2010 	ldr	r2, [fp, #-16]
   1eab8:	e5832014 	str	r2, [r3, #20]
	}

	return pResult;
   1eabc:	e51b4010 	ldr	r4, [fp, #-16]
   1eac0:	e1a03005 	mov	r3, r5
   1eac4:	e30e0950 	movw	r0, #59728	; 0xe950
   1eac8:	e3400001 	movt	r0, #1
   1eacc:	e1a01003 	mov	r1, r3
   1ead0:	ebffdb63 	bl	15864 <__cyg_profile_func_exit>
   1ead4:	e1a03004 	mov	r3, r4
}
   1ead8:	e1a00003 	mov	r0, r3
   1eadc:	e24bd00c 	sub	sp, fp, #12
   1eae0:	e8bd8830 	pop	{r4, r5, fp, pc}

0001eae4 <USBConfigurationParserError>:


void USBConfigurationParserError (TUSBConfigurationParser *pThis, const char *pSource)
{
   1eae4:	e92d4810 	push	{r4, fp, lr}
   1eae8:	e28db008 	add	fp, sp, #8
   1eaec:	e24dd00c 	sub	sp, sp, #12
   1eaf0:	e1a0400e 	mov	r4, lr
   1eaf4:	e50b0010 	str	r0, [fp, #-16]
   1eaf8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1eafc:	e1a03004 	mov	r3, r4
   1eb00:	e30e0ae4 	movw	r0, #60132	; 0xeae4
   1eb04:	e3400001 	movt	r0, #1
   1eb08:	e1a01003 	mov	r1, r3
   1eb0c:	ebffdb02 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1eb10:	e51b3010 	ldr	r3, [fp, #-16]
   1eb14:	e3530000 	cmp	r3, #0
   1eb18:	1a000005 	bne	1eb34 <USBConfigurationParserError+0x50>
   1eb1c:	e30e09c4 	movw	r0, #59844	; 0xe9c4
   1eb20:	e3400002 	movt	r0, #2
   1eb24:	e30e19d0 	movw	r1, #59856	; 0xe9d0
   1eb28:	e3401002 	movt	r1, #2
   1eb2c:	e3a020b3 	mov	r2, #179	; 0xb3
   1eb30:	ebffdf9e 	bl	169b0 <uspi_assertion_failed>
	assert (pSource != 0);
   1eb34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1eb38:	e3530000 	cmp	r3, #0
   1eb3c:	1a000005 	bne	1eb58 <USBConfigurationParserError+0x74>
   1eb40:	e30e0a80 	movw	r0, #60032	; 0xea80
   1eb44:	e3400002 	movt	r0, #2
   1eb48:	e30e19d0 	movw	r1, #59856	; 0xe9d0
   1eb4c:	e3401002 	movt	r1, #2
   1eb50:	e3a020b4 	mov	r2, #180	; 0xb4
   1eb54:	ebffdf95 	bl	169b0 <uspi_assertion_failed>
	LogWrite (pSource, LOG_ERROR,
		     "Invalid configuration descriptor (offset 0x%X)",
		     (unsigned) pThis->m_pErrorPosition - (unsigned) pThis->m_pBuffer);
   1eb58:	e51b3010 	ldr	r3, [fp, #-16]
   1eb5c:	e5933014 	ldr	r3, [r3, #20]
   1eb60:	e1a02003 	mov	r2, r3
   1eb64:	e51b3010 	ldr	r3, [fp, #-16]
   1eb68:	e5933000 	ldr	r3, [r3]

void USBConfigurationParserError (TUSBConfigurationParser *pThis, const char *pSource)
{
	assert (pThis != 0);
	assert (pSource != 0);
	LogWrite (pSource, LOG_ERROR,
   1eb6c:	e0633002 	rsb	r3, r3, r2
   1eb70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1eb74:	e3a01001 	mov	r1, #1
   1eb78:	e30e2a90 	movw	r2, #60048	; 0xea90
   1eb7c:	e3402002 	movt	r2, #2
   1eb80:	ebffdf72 	bl	16950 <LogWrite>
		     "Invalid configuration descriptor (offset 0x%X)",
		     (unsigned) pThis->m_pErrorPosition - (unsigned) pThis->m_pBuffer);
#ifndef NDEBUG
	DebugHexdump (pThis->m_pBuffer, pThis->m_nBufLen, pSource);
   1eb84:	e51b3010 	ldr	r3, [fp, #-16]
   1eb88:	e5932000 	ldr	r2, [r3]
   1eb8c:	e51b3010 	ldr	r3, [fp, #-16]
   1eb90:	e5933004 	ldr	r3, [r3, #4]
   1eb94:	e1a00002 	mov	r0, r2
   1eb98:	e1a01003 	mov	r1, r3
   1eb9c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1eba0:	ebffdf99 	bl	16a0c <DebugHexdump>
   1eba4:	e1a03004 	mov	r3, r4
   1eba8:	e30e0ae4 	movw	r0, #60132	; 0xeae4
   1ebac:	e3400001 	movt	r0, #1
   1ebb0:	e1a01003 	mov	r1, r3
   1ebb4:	ebffdb2a 	bl	15864 <__cyg_profile_func_exit>
#endif
}
   1ebb8:	e24bd008 	sub	sp, fp, #8
   1ebbc:	e8bd8810 	pop	{r4, fp, pc}

0001ebc0 <USBDevice>:
static const char FromDevice[] = "usbdev";

static u8 s_ucNextAddress = USB_FIRST_DEDICATED_ADDRESS;

void USBDevice (TUSBDevice *pThis, struct TDWHCIDevice *pHost, TUSBSpeed Speed, u8 ucHubAddress, u8 ucHubPortNumber)
{
   1ebc0:	e92d4810 	push	{r4, fp, lr}
   1ebc4:	e28db008 	add	fp, sp, #8
   1ebc8:	e24dd014 	sub	sp, sp, #20
   1ebcc:	e1a0400e 	mov	r4, lr
   1ebd0:	e50b0010 	str	r0, [fp, #-16]
   1ebd4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1ebd8:	e1a01002 	mov	r1, r2
   1ebdc:	e1a02003 	mov	r2, r3
   1ebe0:	e1a03001 	mov	r3, r1
   1ebe4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   1ebe8:	e1a03002 	mov	r3, r2
   1ebec:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
   1ebf0:	e1a03004 	mov	r3, r4
   1ebf4:	e30e0bc0 	movw	r0, #60352	; 0xebc0
   1ebf8:	e3400001 	movt	r0, #1
   1ebfc:	e1a01003 	mov	r1, r3
   1ec00:	ebffdac5 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1ec04:	e51b3010 	ldr	r3, [fp, #-16]
   1ec08:	e3530000 	cmp	r3, #0
   1ec0c:	1a000005 	bne	1ec28 <USBDevice+0x68>
   1ec10:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1ec14:	e3400002 	movt	r0, #2
   1ec18:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ec1c:	e3401002 	movt	r1, #2
   1ec20:	e3a0202c 	mov	r2, #44	; 0x2c
   1ec24:	ebffdf61 	bl	169b0 <uspi_assertion_failed>

	pThis->Configure = USBDeviceConfigure;
   1ec28:	e51b2010 	ldr	r2, [fp, #-16]
   1ec2c:	e30f39ac 	movw	r3, #63916	; 0xf9ac
   1ec30:	e3403001 	movt	r3, #1
   1ec34:	e5823000 	str	r3, [r2]

	pThis->m_pHost = pHost;
   1ec38:	e51b3010 	ldr	r3, [fp, #-16]
   1ec3c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1ec40:	e5832004 	str	r2, [r3, #4]
	pThis->m_ucAddress = USB_DEFAULT_ADDRESS;
   1ec44:	e51b3010 	ldr	r3, [fp, #-16]
   1ec48:	e3a02000 	mov	r2, #0
   1ec4c:	e5c32008 	strb	r2, [r3, #8]
	pThis->m_Speed = Speed;
   1ec50:	e51b3010 	ldr	r3, [fp, #-16]
   1ec54:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
   1ec58:	e5c32009 	strb	r2, [r3, #9]
	pThis->m_pEndpoint0 = 0;
   1ec5c:	e51b3010 	ldr	r3, [fp, #-16]
   1ec60:	e3a02000 	mov	r2, #0
   1ec64:	e583200c 	str	r2, [r3, #12]
	pThis->m_ucHubAddress = ucHubAddress;
   1ec68:	e51b3010 	ldr	r3, [fp, #-16]
   1ec6c:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
   1ec70:	e5c32010 	strb	r2, [r3, #16]
	pThis->m_ucHubPortNumber = ucHubPortNumber;
   1ec74:	e51b3010 	ldr	r3, [fp, #-16]
   1ec78:	e5db2004 	ldrb	r2, [fp, #4]
   1ec7c:	e5c32011 	strb	r2, [r3, #17]
	pThis->m_pDeviceDesc = 0;
   1ec80:	e51b3010 	ldr	r3, [fp, #-16]
   1ec84:	e3a02000 	mov	r2, #0
   1ec88:	e5832014 	str	r2, [r3, #20]
	pThis->m_pConfigDesc = 0;
   1ec8c:	e51b3010 	ldr	r3, [fp, #-16]
   1ec90:	e3a02000 	mov	r2, #0
   1ec94:	e5832018 	str	r2, [r3, #24]
	pThis->m_pConfigParser = 0;
   1ec98:	e51b3010 	ldr	r3, [fp, #-16]
   1ec9c:	e3a02000 	mov	r2, #0
   1eca0:	e583201c 	str	r2, [r3, #28]

	assert (pThis->m_pHost != 0);
   1eca4:	e51b3010 	ldr	r3, [fp, #-16]
   1eca8:	e5933004 	ldr	r3, [r3, #4]
   1ecac:	e3530000 	cmp	r3, #0
   1ecb0:	1a000005 	bne	1eccc <USBDevice+0x10c>
   1ecb4:	e30e0b34 	movw	r0, #60212	; 0xeb34
   1ecb8:	e3400002 	movt	r0, #2
   1ecbc:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ecc0:	e3401002 	movt	r1, #2
   1ecc4:	e3a0203a 	mov	r2, #58	; 0x3a
   1ecc8:	ebffdf38 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pEndpoint0 == 0);
   1eccc:	e51b3010 	ldr	r3, [fp, #-16]
   1ecd0:	e593300c 	ldr	r3, [r3, #12]
   1ecd4:	e3530000 	cmp	r3, #0
   1ecd8:	0a000005 	beq	1ecf4 <USBDevice+0x134>
   1ecdc:	e30e0b48 	movw	r0, #60232	; 0xeb48
   1ece0:	e3400002 	movt	r0, #2
   1ece4:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ece8:	e3401002 	movt	r1, #2
   1ecec:	e3a0203c 	mov	r2, #60	; 0x3c
   1ecf0:	ebffdf2e 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pEndpoint0 = (TUSBEndpoint *) malloc (sizeof (TUSBEndpoint));
   1ecf4:	e3a00018 	mov	r0, #24
   1ecf8:	ebffdf56 	bl	16a58 <malloc>
   1ecfc:	e1a03000 	mov	r3, r0
   1ed00:	e1a02003 	mov	r2, r3
   1ed04:	e51b3010 	ldr	r3, [fp, #-16]
   1ed08:	e583200c 	str	r2, [r3, #12]
	assert (pThis->m_pEndpoint0 != 0);
   1ed0c:	e51b3010 	ldr	r3, [fp, #-16]
   1ed10:	e593300c 	ldr	r3, [r3, #12]
   1ed14:	e3530000 	cmp	r3, #0
   1ed18:	1a000005 	bne	1ed34 <USBDevice+0x174>
   1ed1c:	e30e0b64 	movw	r0, #60260	; 0xeb64
   1ed20:	e3400002 	movt	r0, #2
   1ed24:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ed28:	e3401002 	movt	r1, #2
   1ed2c:	e3a0203e 	mov	r2, #62	; 0x3e
   1ed30:	ebffdf1e 	bl	169b0 <uspi_assertion_failed>
	USBEndpoint (pThis->m_pEndpoint0, pThis);
   1ed34:	e51b3010 	ldr	r3, [fp, #-16]
   1ed38:	e593300c 	ldr	r3, [r3, #12]
   1ed3c:	e1a00003 	mov	r0, r3
   1ed40:	e51b1010 	ldr	r1, [fp, #-16]
   1ed44:	eb0006c5 	bl	20860 <USBEndpoint>
	
	assert (ucHubPortNumber >= 1);
   1ed48:	e5db3004 	ldrb	r3, [fp, #4]
   1ed4c:	e3530000 	cmp	r3, #0
   1ed50:	1a000005 	bne	1ed6c <USBDevice+0x1ac>
   1ed54:	e30e0b80 	movw	r0, #60288	; 0xeb80
   1ed58:	e3400002 	movt	r0, #2
   1ed5c:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ed60:	e3401002 	movt	r1, #2
   1ed64:	e3a02041 	mov	r2, #65	; 0x41
   1ed68:	ebffdf10 	bl	169b0 <uspi_assertion_failed>

	USBString (&pThis->m_ManufacturerString, pThis);
   1ed6c:	e51b3010 	ldr	r3, [fp, #-16]
   1ed70:	e2833020 	add	r3, r3, #32
   1ed74:	e1a00003 	mov	r0, r3
   1ed78:	e51b1010 	ldr	r1, [fp, #-16]
   1ed7c:	eb0037fe 	bl	2cd7c <USBString>
	USBString (&pThis->m_ProductString, pThis);
   1ed80:	e51b3010 	ldr	r3, [fp, #-16]
   1ed84:	e283302c 	add	r3, r3, #44	; 0x2c
   1ed88:	e1a00003 	mov	r0, r3
   1ed8c:	e51b1010 	ldr	r1, [fp, #-16]
   1ed90:	eb0037f9 	bl	2cd7c <USBString>
   1ed94:	e1a03004 	mov	r3, r4
   1ed98:	e30e0bc0 	movw	r0, #60352	; 0xebc0
   1ed9c:	e3400001 	movt	r0, #1
   1eda0:	e1a01003 	mov	r1, r3
   1eda4:	ebffdaae 	bl	15864 <__cyg_profile_func_exit>
}
   1eda8:	e24bd008 	sub	sp, fp, #8
   1edac:	e8bd8810 	pop	{r4, fp, pc}

0001edb0 <USBDeviceCopy>:

void USBDeviceCopy (TUSBDevice *pThis, TUSBDevice *pDevice)
{
   1edb0:	e92d4810 	push	{r4, fp, lr}
   1edb4:	e28db008 	add	fp, sp, #8
   1edb8:	e24dd014 	sub	sp, sp, #20
   1edbc:	e1a0400e 	mov	r4, lr
   1edc0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1edc4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1edc8:	e1a03004 	mov	r3, r4
   1edcc:	e30e0db0 	movw	r0, #60848	; 0xedb0
   1edd0:	e3400001 	movt	r0, #1
   1edd4:	e1a01003 	mov	r1, r3
   1edd8:	ebffda4f 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1eddc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ede0:	e3530000 	cmp	r3, #0
   1ede4:	1a000005 	bne	1ee00 <USBDeviceCopy+0x50>
   1ede8:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1edec:	e3400002 	movt	r0, #2
   1edf0:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1edf4:	e3401002 	movt	r1, #2
   1edf8:	e3a02049 	mov	r2, #73	; 0x49
   1edfc:	ebffdeeb 	bl	169b0 <uspi_assertion_failed>

	assert (pDevice != 0);
   1ee00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ee04:	e3530000 	cmp	r3, #0
   1ee08:	1a000005 	bne	1ee24 <USBDeviceCopy+0x74>
   1ee0c:	e30e0b98 	movw	r0, #60312	; 0xeb98
   1ee10:	e3400002 	movt	r0, #2
   1ee14:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ee18:	e3401002 	movt	r1, #2
   1ee1c:	e3a0204b 	mov	r2, #75	; 0x4b
   1ee20:	ebffdee2 	bl	169b0 <uspi_assertion_failed>

	pThis->Configure = pDevice->Configure;
   1ee24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ee28:	e5932000 	ldr	r2, [r3]
   1ee2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee30:	e5832000 	str	r2, [r3]

	pThis->m_pEndpoint0 = 0;
   1ee34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee38:	e3a02000 	mov	r2, #0
   1ee3c:	e583200c 	str	r2, [r3, #12]
	pThis->m_pDeviceDesc = 0;
   1ee40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee44:	e3a02000 	mov	r2, #0
   1ee48:	e5832014 	str	r2, [r3, #20]
	pThis->m_pConfigDesc = 0;
   1ee4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee50:	e3a02000 	mov	r2, #0
   1ee54:	e5832018 	str	r2, [r3, #24]
	pThis->m_pConfigParser = 0;
   1ee58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee5c:	e3a02000 	mov	r2, #0
   1ee60:	e583201c 	str	r2, [r3, #28]

	pThis->m_pHost		 = pDevice->m_pHost;
   1ee64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ee68:	e5932004 	ldr	r2, [r3, #4]
   1ee6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee70:	e5832004 	str	r2, [r3, #4]
	pThis->m_ucAddress	 = pDevice->m_ucAddress;
   1ee74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ee78:	e5d32008 	ldrb	r2, [r3, #8]
   1ee7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee80:	e5c32008 	strb	r2, [r3, #8]
	pThis->m_Speed		 = pDevice->m_Speed;
   1ee84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ee88:	e5d32009 	ldrb	r2, [r3, #9]
   1ee8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee90:	e5c32009 	strb	r2, [r3, #9]
	pThis->m_ucHubAddress	 = pDevice->m_ucHubAddress;
   1ee94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ee98:	e5d32010 	ldrb	r2, [r3, #16]
   1ee9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1eea0:	e5c32010 	strb	r2, [r3, #16]
	pThis->m_ucHubPortNumber = pDevice->m_ucHubPortNumber;
   1eea4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1eea8:	e5d32011 	ldrb	r2, [r3, #17]
   1eeac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1eeb0:	e5c32011 	strb	r2, [r3, #17]

	USBStringCopy (&pThis->m_ManufacturerString, &pDevice->m_ManufacturerString);
   1eeb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1eeb8:	e2832020 	add	r2, r3, #32
   1eebc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1eec0:	e2833020 	add	r3, r3, #32
   1eec4:	e1a00002 	mov	r0, r2
   1eec8:	e1a01003 	mov	r1, r3
   1eecc:	eb0037e9 	bl	2ce78 <USBStringCopy>
	USBStringCopy (&pThis->m_ProductString, &pDevice->m_ProductString);
   1eed0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1eed4:	e283202c 	add	r2, r3, #44	; 0x2c
   1eed8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1eedc:	e283302c 	add	r3, r3, #44	; 0x2c
   1eee0:	e1a00002 	mov	r0, r2
   1eee4:	e1a01003 	mov	r1, r3
   1eee8:	eb0037e2 	bl	2ce78 <USBStringCopy>
	
	pThis->m_pEndpoint0 = (TUSBEndpoint *) malloc (sizeof (TUSBEndpoint));
   1eeec:	e3a00018 	mov	r0, #24
   1eef0:	ebffded8 	bl	16a58 <malloc>
   1eef4:	e1a03000 	mov	r3, r0
   1eef8:	e1a02003 	mov	r2, r3
   1eefc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ef00:	e583200c 	str	r2, [r3, #12]
	assert (pThis->m_pEndpoint0 != 0);
   1ef04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ef08:	e593300c 	ldr	r3, [r3, #12]
   1ef0c:	e3530000 	cmp	r3, #0
   1ef10:	1a000005 	bne	1ef2c <USBDeviceCopy+0x17c>
   1ef14:	e30e0b64 	movw	r0, #60260	; 0xeb64
   1ef18:	e3400002 	movt	r0, #2
   1ef1c:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ef20:	e3401002 	movt	r1, #2
   1ef24:	e3a0205e 	mov	r2, #94	; 0x5e
   1ef28:	ebffdea0 	bl	169b0 <uspi_assertion_failed>
	USBEndpointCopy (pThis->m_pEndpoint0, pDevice->m_pEndpoint0, pThis);
   1ef2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ef30:	e593200c 	ldr	r2, [r3, #12]
   1ef34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ef38:	e593300c 	ldr	r3, [r3, #12]
   1ef3c:	e1a00002 	mov	r0, r2
   1ef40:	e1a01003 	mov	r1, r3
   1ef44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ef48:	eb000727 	bl	20bec <USBEndpointCopy>
	
	if (pDevice->m_pDeviceDesc != 0)
   1ef4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ef50:	e5933014 	ldr	r3, [r3, #20]
   1ef54:	e3530000 	cmp	r3, #0
   1ef58:	0a000017 	beq	1efbc <USBDeviceCopy+0x20c>
	{
		pThis->m_pDeviceDesc = (TUSBDeviceDescriptor *) malloc (sizeof (TUSBDeviceDescriptor));
   1ef5c:	e3a00012 	mov	r0, #18
   1ef60:	ebffdebc 	bl	16a58 <malloc>
   1ef64:	e1a03000 	mov	r3, r0
   1ef68:	e1a02003 	mov	r2, r3
   1ef6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ef70:	e5832014 	str	r2, [r3, #20]
		assert (pThis->m_pDeviceDesc != 0);
   1ef74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ef78:	e5933014 	ldr	r3, [r3, #20]
   1ef7c:	e3530000 	cmp	r3, #0
   1ef80:	1a000005 	bne	1ef9c <USBDeviceCopy+0x1ec>
   1ef84:	e30e0ba8 	movw	r0, #60328	; 0xeba8
   1ef88:	e3400002 	movt	r0, #2
   1ef8c:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ef90:	e3401002 	movt	r1, #2
   1ef94:	e3a02064 	mov	r2, #100	; 0x64
   1ef98:	ebffde84 	bl	169b0 <uspi_assertion_failed>

		memcpy (pThis->m_pDeviceDesc, pDevice->m_pDeviceDesc, sizeof (TUSBDeviceDescriptor));
   1ef9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1efa0:	e5932014 	ldr	r2, [r3, #20]
   1efa4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1efa8:	e5933014 	ldr	r3, [r3, #20]
   1efac:	e1a00002 	mov	r0, r2
   1efb0:	e1a01003 	mov	r1, r3
   1efb4:	e3a02012 	mov	r2, #18
   1efb8:	eb001c47 	bl	260dc <uspi_memcpy>
	}

	if (pDevice->m_pConfigDesc != 0)
   1efbc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1efc0:	e5933018 	ldr	r3, [r3, #24]
   1efc4:	e3530000 	cmp	r3, #0
   1efc8:	0a000041 	beq	1f0d4 <USBDeviceCopy+0x324>
	{
		unsigned nTotalLength = pDevice->m_pConfigDesc->wTotalLength;
   1efcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1efd0:	e5933018 	ldr	r3, [r3, #24]
   1efd4:	e1d330b2 	ldrh	r3, [r3, #2]
   1efd8:	e6ff3073 	uxth	r3, r3
   1efdc:	e50b3010 	str	r3, [fp, #-16]
		assert (nTotalLength <= MAX_CONFIG_DESC_SIZE);
   1efe0:	e51b3010 	ldr	r3, [fp, #-16]
   1efe4:	e3530c02 	cmp	r3, #512	; 0x200
   1efe8:	9a000005 	bls	1f004 <USBDeviceCopy+0x254>
   1efec:	e30e0bc4 	movw	r0, #60356	; 0xebc4
   1eff0:	e3400002 	movt	r0, #2
   1eff4:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1eff8:	e3401002 	movt	r1, #2
   1effc:	e3a0206c 	mov	r2, #108	; 0x6c
   1f000:	ebffde6a 	bl	169b0 <uspi_assertion_failed>

		pThis->m_pConfigDesc = (TUSBConfigurationDescriptor *) malloc (nTotalLength);
   1f004:	e51b0010 	ldr	r0, [fp, #-16]
   1f008:	ebffde92 	bl	16a58 <malloc>
   1f00c:	e1a03000 	mov	r3, r0
   1f010:	e1a02003 	mov	r2, r3
   1f014:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f018:	e5832018 	str	r2, [r3, #24]
		assert (pThis->m_pConfigDesc != 0);
   1f01c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f020:	e5933018 	ldr	r3, [r3, #24]
   1f024:	e3530000 	cmp	r3, #0
   1f028:	1a000005 	bne	1f044 <USBDeviceCopy+0x294>
   1f02c:	e30e0bec 	movw	r0, #60396	; 0xebec
   1f030:	e3400002 	movt	r0, #2
   1f034:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f038:	e3401002 	movt	r1, #2
   1f03c:	e3a0206f 	mov	r2, #111	; 0x6f
   1f040:	ebffde5a 	bl	169b0 <uspi_assertion_failed>

		memcpy (pThis->m_pConfigDesc, pDevice->m_pConfigDesc, nTotalLength);
   1f044:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f048:	e5932018 	ldr	r2, [r3, #24]
   1f04c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f050:	e5933018 	ldr	r3, [r3, #24]
   1f054:	e1a00002 	mov	r0, r2
   1f058:	e1a01003 	mov	r1, r3
   1f05c:	e51b2010 	ldr	r2, [fp, #-16]
   1f060:	eb001c1d 	bl	260dc <uspi_memcpy>

		if (pDevice->m_pConfigParser != 0)
   1f064:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f068:	e593301c 	ldr	r3, [r3, #28]
   1f06c:	e3530000 	cmp	r3, #0
   1f070:	0a000017 	beq	1f0d4 <USBDeviceCopy+0x324>
		{
			pThis->m_pConfigParser = (TUSBConfigurationParser *) malloc (sizeof (TUSBConfigurationParser));
   1f074:	e3a00018 	mov	r0, #24
   1f078:	ebffde76 	bl	16a58 <malloc>
   1f07c:	e1a03000 	mov	r3, r0
   1f080:	e1a02003 	mov	r2, r3
   1f084:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f088:	e583201c 	str	r2, [r3, #28]
			assert (pThis->m_pConfigParser != 0);
   1f08c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f090:	e593301c 	ldr	r3, [r3, #28]
   1f094:	e3530000 	cmp	r3, #0
   1f098:	1a000005 	bne	1f0b4 <USBDeviceCopy+0x304>
   1f09c:	e30e0c08 	movw	r0, #60424	; 0xec08
   1f0a0:	e3400002 	movt	r0, #2
   1f0a4:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f0a8:	e3401002 	movt	r1, #2
   1f0ac:	e3a02076 	mov	r2, #118	; 0x76
   1f0b0:	ebffde3e 	bl	169b0 <uspi_assertion_failed>
			USBConfigurationParser (pThis->m_pConfigParser, pThis->m_pConfigDesc, nTotalLength);
   1f0b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f0b8:	e593201c 	ldr	r2, [r3, #28]
   1f0bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f0c0:	e5933018 	ldr	r3, [r3, #24]
   1f0c4:	e1a00002 	mov	r0, r2
   1f0c8:	e1a01003 	mov	r1, r3
   1f0cc:	e51b2010 	ldr	r2, [fp, #-16]
   1f0d0:	ebfffd0a 	bl	1e500 <USBConfigurationParser>
   1f0d4:	e1a03004 	mov	r3, r4
   1f0d8:	e30e0db0 	movw	r0, #60848	; 0xedb0
   1f0dc:	e3400001 	movt	r0, #1
   1f0e0:	e1a01003 	mov	r1, r3
   1f0e4:	ebffd9de 	bl	15864 <__cyg_profile_func_exit>
		}
	}
}
   1f0e8:	e24bd008 	sub	sp, fp, #8
   1f0ec:	e8bd8810 	pop	{r4, fp, pc}

0001f0f0 <_USBDevice>:

void _USBDevice (TUSBDevice *pThis)
{
   1f0f0:	e92d4810 	push	{r4, fp, lr}
   1f0f4:	e28db008 	add	fp, sp, #8
   1f0f8:	e24dd00c 	sub	sp, sp, #12
   1f0fc:	e1a0400e 	mov	r4, lr
   1f100:	e50b0010 	str	r0, [fp, #-16]
   1f104:	e1a03004 	mov	r3, r4
   1f108:	e30f00f0 	movw	r0, #61680	; 0xf0f0
   1f10c:	e3400001 	movt	r0, #1
   1f110:	e1a01003 	mov	r1, r3
   1f114:	ebffd980 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1f118:	e51b3010 	ldr	r3, [fp, #-16]
   1f11c:	e3530000 	cmp	r3, #0
   1f120:	1a000005 	bne	1f13c <_USBDevice+0x4c>
   1f124:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1f128:	e3400002 	movt	r0, #2
   1f12c:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f130:	e3401002 	movt	r1, #2
   1f134:	e3a0207e 	mov	r2, #126	; 0x7e
   1f138:	ebffde1c 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pConfigParser != 0)
   1f13c:	e51b3010 	ldr	r3, [fp, #-16]
   1f140:	e593301c 	ldr	r3, [r3, #28]
   1f144:	e3530000 	cmp	r3, #0
   1f148:	0a00000a 	beq	1f178 <_USBDevice+0x88>
	{
		_USBConfigurationParser (pThis->m_pConfigParser);
   1f14c:	e51b3010 	ldr	r3, [fp, #-16]
   1f150:	e593301c 	ldr	r3, [r3, #28]
   1f154:	e1a00003 	mov	r0, r3
   1f158:	ebfffdc1 	bl	1e864 <_USBConfigurationParser>
		free (pThis->m_pConfigParser);
   1f15c:	e51b3010 	ldr	r3, [fp, #-16]
   1f160:	e593301c 	ldr	r3, [r3, #28]
   1f164:	e1a00003 	mov	r0, r3
   1f168:	ebffde50 	bl	16ab0 <free>
		pThis->m_pConfigParser = 0;
   1f16c:	e51b3010 	ldr	r3, [fp, #-16]
   1f170:	e3a02000 	mov	r2, #0
   1f174:	e583201c 	str	r2, [r3, #28]
	}

	if (pThis->m_pConfigDesc != 0)
   1f178:	e51b3010 	ldr	r3, [fp, #-16]
   1f17c:	e5933018 	ldr	r3, [r3, #24]
   1f180:	e3530000 	cmp	r3, #0
   1f184:	0a000006 	beq	1f1a4 <_USBDevice+0xb4>
	{
		free (pThis->m_pConfigDesc);
   1f188:	e51b3010 	ldr	r3, [fp, #-16]
   1f18c:	e5933018 	ldr	r3, [r3, #24]
   1f190:	e1a00003 	mov	r0, r3
   1f194:	ebffde45 	bl	16ab0 <free>
		pThis->m_pConfigDesc = 0;
   1f198:	e51b3010 	ldr	r3, [fp, #-16]
   1f19c:	e3a02000 	mov	r2, #0
   1f1a0:	e5832018 	str	r2, [r3, #24]
	}

	if (pThis->m_pDeviceDesc != 0)
   1f1a4:	e51b3010 	ldr	r3, [fp, #-16]
   1f1a8:	e5933014 	ldr	r3, [r3, #20]
   1f1ac:	e3530000 	cmp	r3, #0
   1f1b0:	0a000006 	beq	1f1d0 <_USBDevice+0xe0>
	{
		free (pThis->m_pDeviceDesc);
   1f1b4:	e51b3010 	ldr	r3, [fp, #-16]
   1f1b8:	e5933014 	ldr	r3, [r3, #20]
   1f1bc:	e1a00003 	mov	r0, r3
   1f1c0:	ebffde3a 	bl	16ab0 <free>
		pThis->m_pDeviceDesc = 0;
   1f1c4:	e51b3010 	ldr	r3, [fp, #-16]
   1f1c8:	e3a02000 	mov	r2, #0
   1f1cc:	e5832014 	str	r2, [r3, #20]
	}

	if (pThis->m_pEndpoint0 != 0)
   1f1d0:	e51b3010 	ldr	r3, [fp, #-16]
   1f1d4:	e593300c 	ldr	r3, [r3, #12]
   1f1d8:	e3530000 	cmp	r3, #0
   1f1dc:	0a00000a 	beq	1f20c <_USBDevice+0x11c>
	{
		_USBEndpoint (pThis->m_pEndpoint0);
   1f1e0:	e51b3010 	ldr	r3, [fp, #-16]
   1f1e4:	e593300c 	ldr	r3, [r3, #12]
   1f1e8:	e1a00003 	mov	r0, r3
   1f1ec:	eb0006c8 	bl	20d14 <_USBEndpoint>
		free (pThis->m_pEndpoint0);
   1f1f0:	e51b3010 	ldr	r3, [fp, #-16]
   1f1f4:	e593300c 	ldr	r3, [r3, #12]
   1f1f8:	e1a00003 	mov	r0, r3
   1f1fc:	ebffde2b 	bl	16ab0 <free>
		pThis->m_pEndpoint0 = 0;
   1f200:	e51b3010 	ldr	r3, [fp, #-16]
   1f204:	e3a02000 	mov	r2, #0
   1f208:	e583200c 	str	r2, [r3, #12]
	}

	pThis->Configure = 0;
   1f20c:	e51b3010 	ldr	r3, [fp, #-16]
   1f210:	e3a02000 	mov	r2, #0
   1f214:	e5832000 	str	r2, [r3]
	
	pThis->m_pHost = 0;
   1f218:	e51b3010 	ldr	r3, [fp, #-16]
   1f21c:	e3a02000 	mov	r2, #0
   1f220:	e5832004 	str	r2, [r3, #4]

	_USBString (&pThis->m_ProductString);
   1f224:	e51b3010 	ldr	r3, [fp, #-16]
   1f228:	e283302c 	add	r3, r3, #44	; 0x2c
   1f22c:	e1a00003 	mov	r0, r3
   1f230:	eb003781 	bl	2d03c <_USBString>
	_USBString (&pThis->m_ManufacturerString);
   1f234:	e51b3010 	ldr	r3, [fp, #-16]
   1f238:	e2833020 	add	r3, r3, #32
   1f23c:	e1a00003 	mov	r0, r3
   1f240:	eb00377d 	bl	2d03c <_USBString>
   1f244:	e1a03004 	mov	r3, r4
   1f248:	e30f00f0 	movw	r0, #61680	; 0xf0f0
   1f24c:	e3400001 	movt	r0, #1
   1f250:	e1a01003 	mov	r1, r3
   1f254:	ebffd982 	bl	15864 <__cyg_profile_func_exit>
}
   1f258:	e24bd008 	sub	sp, fp, #8
   1f25c:	e8bd8810 	pop	{r4, fp, pc}

0001f260 <USBDeviceInitialize>:

boolean USBDeviceInitialize (TUSBDevice *pThis)
{
   1f260:	e92d4830 	push	{r4, r5, fp, lr}
   1f264:	e28db00c 	add	fp, sp, #12
   1f268:	e24dd020 	sub	sp, sp, #32
   1f26c:	e1a0500e 	mov	r5, lr
   1f270:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1f274:	e1a03005 	mov	r3, r5
   1f278:	e30f0260 	movw	r0, #62048	; 0xf260
   1f27c:	e3400001 	movt	r0, #1
   1f280:	e1a01003 	mov	r1, r3
   1f284:	ebffd924 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1f288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f28c:	e3530000 	cmp	r3, #0
   1f290:	1a000005 	bne	1f2ac <USBDeviceInitialize+0x4c>
   1f294:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1f298:	e3400002 	movt	r0, #2
   1f29c:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f2a0:	e3401002 	movt	r1, #2
   1f2a4:	e3a020a4 	mov	r2, #164	; 0xa4
   1f2a8:	ebffddc0 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pDeviceDesc == 0);
   1f2ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f2b0:	e5933014 	ldr	r3, [r3, #20]
   1f2b4:	e3530000 	cmp	r3, #0
   1f2b8:	0a000005 	beq	1f2d4 <USBDeviceInitialize+0x74>
   1f2bc:	e30e0c24 	movw	r0, #60452	; 0xec24
   1f2c0:	e3400002 	movt	r0, #2
   1f2c4:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f2c8:	e3401002 	movt	r1, #2
   1f2cc:	e3a020a6 	mov	r2, #166	; 0xa6
   1f2d0:	ebffddb6 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pDeviceDesc = (TUSBDeviceDescriptor *) malloc (sizeof (TUSBDeviceDescriptor));
   1f2d4:	e3a00012 	mov	r0, #18
   1f2d8:	ebffddde 	bl	16a58 <malloc>
   1f2dc:	e1a03000 	mov	r3, r0
   1f2e0:	e1a02003 	mov	r2, r3
   1f2e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f2e8:	e5832014 	str	r2, [r3, #20]
	assert (pThis->m_pDeviceDesc != 0);
   1f2ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f2f0:	e5933014 	ldr	r3, [r3, #20]
   1f2f4:	e3530000 	cmp	r3, #0
   1f2f8:	1a000005 	bne	1f314 <USBDeviceInitialize+0xb4>
   1f2fc:	e30e0ba8 	movw	r0, #60328	; 0xeba8
   1f300:	e3400002 	movt	r0, #2
   1f304:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f308:	e3401002 	movt	r1, #2
   1f30c:	e3a020a8 	mov	r2, #168	; 0xa8
   1f310:	ebffdda6 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pHost != 0);
   1f314:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f318:	e5933004 	ldr	r3, [r3, #4]
   1f31c:	e3530000 	cmp	r3, #0
   1f320:	1a000005 	bne	1f33c <USBDeviceInitialize+0xdc>
   1f324:	e30e0b34 	movw	r0, #60212	; 0xeb34
   1f328:	e3400002 	movt	r0, #2
   1f32c:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f330:	e3401002 	movt	r1, #2
   1f334:	e3a020aa 	mov	r2, #170	; 0xaa
   1f338:	ebffdd9c 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pEndpoint0 != 0);
   1f33c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f340:	e593300c 	ldr	r3, [r3, #12]
   1f344:	e3530000 	cmp	r3, #0
   1f348:	1a000005 	bne	1f364 <USBDeviceInitialize+0x104>
   1f34c:	e30e0b64 	movw	r0, #60260	; 0xeb64
   1f350:	e3400002 	movt	r0, #2
   1f354:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f358:	e3401002 	movt	r1, #2
   1f35c:	e3a020ab 	mov	r2, #171	; 0xab
   1f360:	ebffdd92 	bl	169b0 <uspi_assertion_failed>
	
	assert (sizeof *pThis->m_pDeviceDesc >= USB_DEFAULT_MAX_PACKET_SIZE);
	if (DWHCIDeviceGetDescriptor (pThis->m_pHost, pThis->m_pEndpoint0,
   1f364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f368:	e5931004 	ldr	r1, [r3, #4]
   1f36c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f370:	e593200c 	ldr	r2, [r3, #12]
				    DESCRIPTOR_DEVICE, DESCRIPTOR_INDEX_DEFAULT,
				    pThis->m_pDeviceDesc, USB_DEFAULT_MAX_PACKET_SIZE, REQUEST_IN)
   1f374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f378:	e5933014 	ldr	r3, [r3, #20]

	assert (pThis->m_pHost != 0);
	assert (pThis->m_pEndpoint0 != 0);
	
	assert (sizeof *pThis->m_pDeviceDesc >= USB_DEFAULT_MAX_PACKET_SIZE);
	if (DWHCIDeviceGetDescriptor (pThis->m_pHost, pThis->m_pEndpoint0,
   1f37c:	e58d3000 	str	r3, [sp]
   1f380:	e3a03008 	mov	r3, #8
   1f384:	e58d3004 	str	r3, [sp, #4]
   1f388:	e3a03080 	mov	r3, #128	; 0x80
   1f38c:	e58d3008 	str	r3, [sp, #8]
   1f390:	e1a00001 	mov	r0, r1
   1f394:	e1a01002 	mov	r1, r2
   1f398:	e3a02001 	mov	r2, #1
   1f39c:	e3a03000 	mov	r3, #0
   1f3a0:	ebffe54b 	bl	188d4 <DWHCIDeviceGetDescriptor>
   1f3a4:	e1a03000 	mov	r3, r0
   1f3a8:	e3530008 	cmp	r3, #8
   1f3ac:	0a00000e 	beq	1f3ec <USBDeviceInitialize+0x18c>
				    DESCRIPTOR_DEVICE, DESCRIPTOR_INDEX_DEFAULT,
				    pThis->m_pDeviceDesc, USB_DEFAULT_MAX_PACKET_SIZE, REQUEST_IN)
	    != USB_DEFAULT_MAX_PACKET_SIZE)
	{
		LogWrite (FromDevice, LOG_ERROR, "Cannot get device descriptor (short)");
   1f3b0:	e30e0ac0 	movw	r0, #60096	; 0xeac0
   1f3b4:	e3400002 	movt	r0, #2
   1f3b8:	e3a01001 	mov	r1, #1
   1f3bc:	e30e2c40 	movw	r2, #60480	; 0xec40
   1f3c0:	e3402002 	movt	r2, #2
   1f3c4:	ebffdd61 	bl	16950 <LogWrite>

		free (pThis->m_pDeviceDesc);
   1f3c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f3cc:	e5933014 	ldr	r3, [r3, #20]
   1f3d0:	e1a00003 	mov	r0, r3
   1f3d4:	ebffddb5 	bl	16ab0 <free>
		pThis->m_pDeviceDesc = 0;
   1f3d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f3dc:	e3a02000 	mov	r2, #0
   1f3e0:	e5832014 	str	r2, [r3, #20]

		return FALSE;
   1f3e4:	e3a04000 	mov	r4, #0
   1f3e8:	ea000166 	b	1f988 <USBDeviceInitialize+0x728>
	}

	if (   pThis->m_pDeviceDesc->bLength	     != sizeof *pThis->m_pDeviceDesc
   1f3ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f3f0:	e5933014 	ldr	r3, [r3, #20]
   1f3f4:	e5d33000 	ldrb	r3, [r3]
   1f3f8:	e3530012 	cmp	r3, #18
   1f3fc:	1a000004 	bne	1f414 <USBDeviceInitialize+0x1b4>
	    || pThis->m_pDeviceDesc->bDescriptorType != DESCRIPTOR_DEVICE)
   1f400:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f404:	e5933014 	ldr	r3, [r3, #20]
   1f408:	e5d33001 	ldrb	r3, [r3, #1]
   1f40c:	e3530001 	cmp	r3, #1
   1f410:	0a00000e 	beq	1f450 <USBDeviceInitialize+0x1f0>
	{
		LogWrite (FromDevice, LOG_ERROR, "Invalid device descriptor");
   1f414:	e30e0ac0 	movw	r0, #60096	; 0xeac0
   1f418:	e3400002 	movt	r0, #2
   1f41c:	e3a01001 	mov	r1, #1
   1f420:	e30e2c68 	movw	r2, #60520	; 0xec68
   1f424:	e3402002 	movt	r2, #2
   1f428:	ebffdd48 	bl	16950 <LogWrite>

		free (pThis->m_pDeviceDesc);
   1f42c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f430:	e5933014 	ldr	r3, [r3, #20]
   1f434:	e1a00003 	mov	r0, r3
   1f438:	ebffdd9c 	bl	16ab0 <free>
		pThis->m_pDeviceDesc = 0;
   1f43c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f440:	e3a02000 	mov	r2, #0
   1f444:	e5832014 	str	r2, [r3, #20]

		return FALSE;
   1f448:	e3a04000 	mov	r4, #0
   1f44c:	ea00014d 	b	1f988 <USBDeviceInitialize+0x728>
	}

	USBEndpointSetMaxPacketSize (pThis->m_pEndpoint0, pThis->m_pDeviceDesc->bMaxPacketSize0);
   1f450:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f454:	e593200c 	ldr	r2, [r3, #12]
   1f458:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f45c:	e5933014 	ldr	r3, [r3, #20]
   1f460:	e5d33007 	ldrb	r3, [r3, #7]
   1f464:	e1a00002 	mov	r0, r2
   1f468:	e1a01003 	mov	r1, r3
   1f46c:	eb0006c7 	bl	20f90 <USBEndpointSetMaxPacketSize>

	if (DWHCIDeviceGetDescriptor (pThis->m_pHost, pThis->m_pEndpoint0,
   1f470:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f474:	e5931004 	ldr	r1, [r3, #4]
   1f478:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f47c:	e593200c 	ldr	r2, [r3, #12]
				    DESCRIPTOR_DEVICE, DESCRIPTOR_INDEX_DEFAULT,
				    pThis->m_pDeviceDesc, sizeof *pThis->m_pDeviceDesc, REQUEST_IN)
   1f480:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f484:	e5933014 	ldr	r3, [r3, #20]
		return FALSE;
	}

	USBEndpointSetMaxPacketSize (pThis->m_pEndpoint0, pThis->m_pDeviceDesc->bMaxPacketSize0);

	if (DWHCIDeviceGetDescriptor (pThis->m_pHost, pThis->m_pEndpoint0,
   1f488:	e58d3000 	str	r3, [sp]
   1f48c:	e3a03012 	mov	r3, #18
   1f490:	e58d3004 	str	r3, [sp, #4]
   1f494:	e3a03080 	mov	r3, #128	; 0x80
   1f498:	e58d3008 	str	r3, [sp, #8]
   1f49c:	e1a00001 	mov	r0, r1
   1f4a0:	e1a01002 	mov	r1, r2
   1f4a4:	e3a02001 	mov	r2, #1
   1f4a8:	e3a03000 	mov	r3, #0
   1f4ac:	ebffe508 	bl	188d4 <DWHCIDeviceGetDescriptor>
   1f4b0:	e1a03000 	mov	r3, r0
   1f4b4:	e3530012 	cmp	r3, #18
   1f4b8:	0a00000e 	beq	1f4f8 <USBDeviceInitialize+0x298>
				    DESCRIPTOR_DEVICE, DESCRIPTOR_INDEX_DEFAULT,
				    pThis->m_pDeviceDesc, sizeof *pThis->m_pDeviceDesc, REQUEST_IN)
	    != (int) sizeof *pThis->m_pDeviceDesc)
	{
		LogWrite (FromDevice, LOG_ERROR, "Cannot get device descriptor");
   1f4bc:	e30e0ac0 	movw	r0, #60096	; 0xeac0
   1f4c0:	e3400002 	movt	r0, #2
   1f4c4:	e3a01001 	mov	r1, #1
   1f4c8:	e30e2c84 	movw	r2, #60548	; 0xec84
   1f4cc:	e3402002 	movt	r2, #2
   1f4d0:	ebffdd1e 	bl	16950 <LogWrite>

		free (pThis->m_pDeviceDesc);
   1f4d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f4d8:	e5933014 	ldr	r3, [r3, #20]
   1f4dc:	e1a00003 	mov	r0, r3
   1f4e0:	ebffdd72 	bl	16ab0 <free>
		pThis->m_pDeviceDesc = 0;
   1f4e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f4e8:	e3a02000 	mov	r2, #0
   1f4ec:	e5832014 	str	r2, [r3, #20]

		return FALSE;
   1f4f0:	e3a04000 	mov	r4, #0
   1f4f4:	ea000123 	b	1f988 <USBDeviceInitialize+0x728>

#ifndef NDEBUG
	//DebugHexdump (pThis->m_pDeviceDesc, sizeof *pThis->m_pDeviceDesc, FromDevice);
#endif
	
	u8 ucAddress = s_ucNextAddress++;
   1f4f8:	e3003b7c 	movw	r3, #2940	; 0xb7c
   1f4fc:	e3403003 	movt	r3, #3
   1f500:	e5d32000 	ldrb	r2, [r3]
   1f504:	e2823001 	add	r3, r2, #1
   1f508:	e6ef1073 	uxtb	r1, r3
   1f50c:	e3003b7c 	movw	r3, #2940	; 0xb7c
   1f510:	e3403003 	movt	r3, #3
   1f514:	e5c31000 	strb	r1, [r3]
   1f518:	e1a03002 	mov	r3, r2
   1f51c:	e54b300d 	strb	r3, [fp, #-13]
	if (ucAddress > USB_MAX_ADDRESS)
   1f520:	e55b300d 	ldrb	r3, [fp, #-13]
   1f524:	e6af3073 	sxtb	r3, r3
   1f528:	e3530000 	cmp	r3, #0
   1f52c:	aa000007 	bge	1f550 <USBDeviceInitialize+0x2f0>
	{
		LogWrite (FromDevice, LOG_ERROR, "Too many devices");
   1f530:	e30e0ac0 	movw	r0, #60096	; 0xeac0
   1f534:	e3400002 	movt	r0, #2
   1f538:	e3a01001 	mov	r1, #1
   1f53c:	e30e2ca4 	movw	r2, #60580	; 0xeca4
   1f540:	e3402002 	movt	r2, #2
   1f544:	ebffdd01 	bl	16950 <LogWrite>

		return FALSE;
   1f548:	e3a04000 	mov	r4, #0
   1f54c:	ea00010d 	b	1f988 <USBDeviceInitialize+0x728>
	}

	if (!DWHCIDeviceSetAddress (pThis->m_pHost, pThis->m_pEndpoint0, ucAddress))
   1f550:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f554:	e5931004 	ldr	r1, [r3, #4]
   1f558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f55c:	e593200c 	ldr	r2, [r3, #12]
   1f560:	e55b300d 	ldrb	r3, [fp, #-13]
   1f564:	e1a00001 	mov	r0, r1
   1f568:	e1a01002 	mov	r1, r2
   1f56c:	e1a02003 	mov	r2, r3
   1f570:	ebffe511 	bl	189bc <DWHCIDeviceSetAddress>
   1f574:	e1a03000 	mov	r3, r0
   1f578:	e3530000 	cmp	r3, #0
   1f57c:	1a000008 	bne	1f5a4 <USBDeviceInitialize+0x344>
	{
		LogWrite (FromDevice, LOG_ERROR,
   1f580:	e55b300d 	ldrb	r3, [fp, #-13]
   1f584:	e30e0ac0 	movw	r0, #60096	; 0xeac0
   1f588:	e3400002 	movt	r0, #2
   1f58c:	e3a01001 	mov	r1, #1
   1f590:	e30e2cb8 	movw	r2, #60600	; 0xecb8
   1f594:	e3402002 	movt	r2, #2
   1f598:	ebffdcec 	bl	16950 <LogWrite>
			     "Cannot set address %u", (unsigned) ucAddress);

		return FALSE;
   1f59c:	e3a04000 	mov	r4, #0
   1f5a0:	ea0000f8 	b	1f988 <USBDeviceInitialize+0x728>
	}
	
	USBDeviceSetAddress (pThis, ucAddress);
   1f5a4:	e55b300d 	ldrb	r3, [fp, #-13]
   1f5a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f5ac:	e1a01003 	mov	r1, r3
   1f5b0:	eb000364 	bl	20348 <USBDeviceSetAddress>

	if (   pThis->m_pDeviceDesc->iManufacturer != 0
   1f5b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f5b8:	e5933014 	ldr	r3, [r3, #20]
   1f5bc:	e5d3300e 	ldrb	r3, [r3, #14]
   1f5c0:	e3530000 	cmp	r3, #0
   1f5c4:	1a000004 	bne	1f5dc <USBDeviceInitialize+0x37c>
	    || pThis->m_pDeviceDesc->iProduct != 0)
   1f5c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f5cc:	e5933014 	ldr	r3, [r3, #20]
   1f5d0:	e5d3300f 	ldrb	r3, [r3, #15]
   1f5d4:	e3530000 	cmp	r3, #0
   1f5d8:	0a000023 	beq	1f66c <USBDeviceInitialize+0x40c>
	{
		u16 usLanguageID = USBStringGetLanguageID (&pThis->m_ManufacturerString);
   1f5dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f5e0:	e2833020 	add	r3, r3, #32
   1f5e4:	e1a00003 	mov	r0, r3
   1f5e8:	eb00384c 	bl	2d720 <USBStringGetLanguageID>
   1f5ec:	e1a03000 	mov	r3, r0
   1f5f0:	e14b31b0 	strh	r3, [fp, #-16]

		if (pThis->m_pDeviceDesc->iManufacturer != 0)
   1f5f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f5f8:	e5933014 	ldr	r3, [r3, #20]
   1f5fc:	e5d3300e 	ldrb	r3, [r3, #14]
   1f600:	e3530000 	cmp	r3, #0
   1f604:	0a000009 	beq	1f630 <USBDeviceInitialize+0x3d0>
		{
			USBStringGetFromDescriptor (&pThis->m_ManufacturerString,
   1f608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f60c:	e2831020 	add	r1, r3, #32
						    pThis->m_pDeviceDesc->iManufacturer, usLanguageID);
   1f610:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f614:	e5933014 	ldr	r3, [r3, #20]
	{
		u16 usLanguageID = USBStringGetLanguageID (&pThis->m_ManufacturerString);

		if (pThis->m_pDeviceDesc->iManufacturer != 0)
		{
			USBStringGetFromDescriptor (&pThis->m_ManufacturerString,
   1f618:	e5d3200e 	ldrb	r2, [r3, #14]
   1f61c:	e15b31b0 	ldrh	r3, [fp, #-16]
   1f620:	e1a00001 	mov	r0, r1
   1f624:	e1a01002 	mov	r1, r2
   1f628:	e1a02003 	mov	r2, r3
   1f62c:	eb0036bf 	bl	2d130 <USBStringGetFromDescriptor>
						    pThis->m_pDeviceDesc->iManufacturer, usLanguageID);
		}

		if (pThis->m_pDeviceDesc->iProduct != 0)
   1f630:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f634:	e5933014 	ldr	r3, [r3, #20]
   1f638:	e5d3300f 	ldrb	r3, [r3, #15]
   1f63c:	e3530000 	cmp	r3, #0
   1f640:	0a000009 	beq	1f66c <USBDeviceInitialize+0x40c>
		{
			USBStringGetFromDescriptor (&pThis->m_ProductString,
   1f644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f648:	e283102c 	add	r1, r3, #44	; 0x2c
						    pThis->m_pDeviceDesc->iProduct, usLanguageID);
   1f64c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f650:	e5933014 	ldr	r3, [r3, #20]
						    pThis->m_pDeviceDesc->iManufacturer, usLanguageID);
		}

		if (pThis->m_pDeviceDesc->iProduct != 0)
		{
			USBStringGetFromDescriptor (&pThis->m_ProductString,
   1f654:	e5d3200f 	ldrb	r2, [r3, #15]
   1f658:	e15b31b0 	ldrh	r3, [fp, #-16]
   1f65c:	e1a00001 	mov	r0, r1
   1f660:	e1a01002 	mov	r1, r2
   1f664:	e1a02003 	mov	r2, r3
   1f668:	eb0036b0 	bl	2d130 <USBStringGetFromDescriptor>
						    pThis->m_pDeviceDesc->iProduct, usLanguageID);
		}
	}

	assert (pThis->m_pConfigDesc == 0);
   1f66c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f670:	e5933018 	ldr	r3, [r3, #24]
   1f674:	e3530000 	cmp	r3, #0
   1f678:	0a000005 	beq	1f694 <USBDeviceInitialize+0x434>
   1f67c:	e30e0cd0 	movw	r0, #60624	; 0xecd0
   1f680:	e3400002 	movt	r0, #2
   1f684:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f688:	e3401002 	movt	r1, #2
   1f68c:	e3a020fd 	mov	r2, #253	; 0xfd
   1f690:	ebffdcc6 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pConfigDesc = (TUSBConfigurationDescriptor *) malloc (sizeof (TUSBConfigurationDescriptor));
   1f694:	e3a00009 	mov	r0, #9
   1f698:	ebffdcee 	bl	16a58 <malloc>
   1f69c:	e1a03000 	mov	r3, r0
   1f6a0:	e1a02003 	mov	r2, r3
   1f6a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f6a8:	e5832018 	str	r2, [r3, #24]
	assert (pThis->m_pConfigDesc != 0);
   1f6ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f6b0:	e5933018 	ldr	r3, [r3, #24]
   1f6b4:	e3530000 	cmp	r3, #0
   1f6b8:	1a000005 	bne	1f6d4 <USBDeviceInitialize+0x474>
   1f6bc:	e30e0bec 	movw	r0, #60396	; 0xebec
   1f6c0:	e3400002 	movt	r0, #2
   1f6c4:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f6c8:	e3401002 	movt	r1, #2
   1f6cc:	e3a020ff 	mov	r2, #255	; 0xff
   1f6d0:	ebffdcb6 	bl	169b0 <uspi_assertion_failed>

	if (DWHCIDeviceGetDescriptor (pThis->m_pHost, pThis->m_pEndpoint0,
   1f6d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f6d8:	e5931004 	ldr	r1, [r3, #4]
   1f6dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f6e0:	e593200c 	ldr	r2, [r3, #12]
				    DESCRIPTOR_CONFIGURATION, DESCRIPTOR_INDEX_DEFAULT,
				    pThis->m_pConfigDesc, sizeof *pThis->m_pConfigDesc, REQUEST_IN)
   1f6e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f6e8:	e5933018 	ldr	r3, [r3, #24]

	assert (pThis->m_pConfigDesc == 0);
	pThis->m_pConfigDesc = (TUSBConfigurationDescriptor *) malloc (sizeof (TUSBConfigurationDescriptor));
	assert (pThis->m_pConfigDesc != 0);

	if (DWHCIDeviceGetDescriptor (pThis->m_pHost, pThis->m_pEndpoint0,
   1f6ec:	e58d3000 	str	r3, [sp]
   1f6f0:	e3a03009 	mov	r3, #9
   1f6f4:	e58d3004 	str	r3, [sp, #4]
   1f6f8:	e3a03080 	mov	r3, #128	; 0x80
   1f6fc:	e58d3008 	str	r3, [sp, #8]
   1f700:	e1a00001 	mov	r0, r1
   1f704:	e1a01002 	mov	r1, r2
   1f708:	e3a02002 	mov	r2, #2
   1f70c:	e3a03000 	mov	r3, #0
   1f710:	ebffe46f 	bl	188d4 <DWHCIDeviceGetDescriptor>
   1f714:	e1a03000 	mov	r3, r0
   1f718:	e3530009 	cmp	r3, #9
   1f71c:	0a00000e 	beq	1f75c <USBDeviceInitialize+0x4fc>
				    DESCRIPTOR_CONFIGURATION, DESCRIPTOR_INDEX_DEFAULT,
				    pThis->m_pConfigDesc, sizeof *pThis->m_pConfigDesc, REQUEST_IN)
	    != (int) sizeof *pThis->m_pConfigDesc)
	{
		LogWrite (FromDevice, LOG_ERROR, "Cannot get configuration descriptor (short)");
   1f720:	e30e0ac0 	movw	r0, #60096	; 0xeac0
   1f724:	e3400002 	movt	r0, #2
   1f728:	e3a01001 	mov	r1, #1
   1f72c:	e30e2cec 	movw	r2, #60652	; 0xecec
   1f730:	e3402002 	movt	r2, #2
   1f734:	ebffdc85 	bl	16950 <LogWrite>

		free (pThis->m_pConfigDesc);
   1f738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f73c:	e5933018 	ldr	r3, [r3, #24]
   1f740:	e1a00003 	mov	r0, r3
   1f744:	ebffdcd9 	bl	16ab0 <free>
		pThis->m_pConfigDesc = 0;
   1f748:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f74c:	e3a02000 	mov	r2, #0
   1f750:	e5832018 	str	r2, [r3, #24]

		return FALSE;
   1f754:	e3a04000 	mov	r4, #0
   1f758:	ea00008a 	b	1f988 <USBDeviceInitialize+0x728>
	}

	if (   pThis->m_pConfigDesc->bLength         != sizeof *pThis->m_pConfigDesc
   1f75c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f760:	e5933018 	ldr	r3, [r3, #24]
   1f764:	e5d33000 	ldrb	r3, [r3]
   1f768:	e3530009 	cmp	r3, #9
   1f76c:	1a00000a 	bne	1f79c <USBDeviceInitialize+0x53c>
	    || pThis->m_pConfigDesc->bDescriptorType != DESCRIPTOR_CONFIGURATION
   1f770:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f774:	e5933018 	ldr	r3, [r3, #24]
   1f778:	e5d33001 	ldrb	r3, [r3, #1]
   1f77c:	e3530002 	cmp	r3, #2
   1f780:	1a000005 	bne	1f79c <USBDeviceInitialize+0x53c>
	    || pThis->m_pConfigDesc->wTotalLength    >  MAX_CONFIG_DESC_SIZE)
   1f784:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f788:	e5933018 	ldr	r3, [r3, #24]
   1f78c:	e1d330b2 	ldrh	r3, [r3, #2]
   1f790:	e6ff3073 	uxth	r3, r3
   1f794:	e3530c02 	cmp	r3, #512	; 0x200
   1f798:	9a00000e 	bls	1f7d8 <USBDeviceInitialize+0x578>
	{
		LogWrite (FromDevice, LOG_ERROR, "Invalid configuration descriptor");
   1f79c:	e30e0ac0 	movw	r0, #60096	; 0xeac0
   1f7a0:	e3400002 	movt	r0, #2
   1f7a4:	e3a01001 	mov	r1, #1
   1f7a8:	e30e2d18 	movw	r2, #60696	; 0xed18
   1f7ac:	e3402002 	movt	r2, #2
   1f7b0:	ebffdc66 	bl	16950 <LogWrite>
		
		free (pThis->m_pConfigDesc);
   1f7b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f7b8:	e5933018 	ldr	r3, [r3, #24]
   1f7bc:	e1a00003 	mov	r0, r3
   1f7c0:	ebffdcba 	bl	16ab0 <free>
		pThis->m_pConfigDesc = 0;
   1f7c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f7c8:	e3a02000 	mov	r2, #0
   1f7cc:	e5832018 	str	r2, [r3, #24]

		return FALSE;
   1f7d0:	e3a04000 	mov	r4, #0
   1f7d4:	ea00006b 	b	1f988 <USBDeviceInitialize+0x728>
	}

	unsigned nTotalLength = pThis->m_pConfigDesc->wTotalLength;
   1f7d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f7dc:	e5933018 	ldr	r3, [r3, #24]
   1f7e0:	e1d330b2 	ldrh	r3, [r3, #2]
   1f7e4:	e6ff3073 	uxth	r3, r3
   1f7e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	free (pThis->m_pConfigDesc);
   1f7ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f7f0:	e5933018 	ldr	r3, [r3, #24]
   1f7f4:	e1a00003 	mov	r0, r3
   1f7f8:	ebffdcac 	bl	16ab0 <free>

	pThis->m_pConfigDesc = (TUSBConfigurationDescriptor *) malloc (nTotalLength);
   1f7fc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1f800:	ebffdc94 	bl	16a58 <malloc>
   1f804:	e1a03000 	mov	r3, r0
   1f808:	e1a02003 	mov	r2, r3
   1f80c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f810:	e5832018 	str	r2, [r3, #24]
	assert (pThis->m_pConfigDesc != 0);
   1f814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f818:	e5933018 	ldr	r3, [r3, #24]
   1f81c:	e3530000 	cmp	r3, #0
   1f820:	1a000005 	bne	1f83c <USBDeviceInitialize+0x5dc>
   1f824:	e30e0bec 	movw	r0, #60396	; 0xebec
   1f828:	e3400002 	movt	r0, #2
   1f82c:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f830:	e3401002 	movt	r1, #2
   1f834:	e300211f 	movw	r2, #287	; 0x11f
   1f838:	ebffdc5c 	bl	169b0 <uspi_assertion_failed>

	if (DWHCIDeviceGetDescriptor (pThis->m_pHost, pThis->m_pEndpoint0,
   1f83c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f840:	e5931004 	ldr	r1, [r3, #4]
   1f844:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f848:	e593200c 	ldr	r2, [r3, #12]
				    DESCRIPTOR_CONFIGURATION, DESCRIPTOR_INDEX_DEFAULT,
				    pThis->m_pConfigDesc, nTotalLength, REQUEST_IN)
   1f84c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f850:	e5933018 	ldr	r3, [r3, #24]
	free (pThis->m_pConfigDesc);

	pThis->m_pConfigDesc = (TUSBConfigurationDescriptor *) malloc (nTotalLength);
	assert (pThis->m_pConfigDesc != 0);

	if (DWHCIDeviceGetDescriptor (pThis->m_pHost, pThis->m_pEndpoint0,
   1f854:	e58d3000 	str	r3, [sp]
   1f858:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1f85c:	e58d3004 	str	r3, [sp, #4]
   1f860:	e3a03080 	mov	r3, #128	; 0x80
   1f864:	e58d3008 	str	r3, [sp, #8]
   1f868:	e1a00001 	mov	r0, r1
   1f86c:	e1a01002 	mov	r1, r2
   1f870:	e3a02002 	mov	r2, #2
   1f874:	e3a03000 	mov	r3, #0
   1f878:	ebffe415 	bl	188d4 <DWHCIDeviceGetDescriptor>
   1f87c:	e1a02000 	mov	r2, r0
				    DESCRIPTOR_CONFIGURATION, DESCRIPTOR_INDEX_DEFAULT,
				    pThis->m_pConfigDesc, nTotalLength, REQUEST_IN)
	    != (int) nTotalLength)
   1f880:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
	free (pThis->m_pConfigDesc);

	pThis->m_pConfigDesc = (TUSBConfigurationDescriptor *) malloc (nTotalLength);
	assert (pThis->m_pConfigDesc != 0);

	if (DWHCIDeviceGetDescriptor (pThis->m_pHost, pThis->m_pEndpoint0,
   1f884:	e1520003 	cmp	r2, r3
   1f888:	0a00000e 	beq	1f8c8 <USBDeviceInitialize+0x668>
				    DESCRIPTOR_CONFIGURATION, DESCRIPTOR_INDEX_DEFAULT,
				    pThis->m_pConfigDesc, nTotalLength, REQUEST_IN)
	    != (int) nTotalLength)
	{
		LogWrite (FromDevice, LOG_ERROR, "Cannot get configuration descriptor");
   1f88c:	e30e0ac0 	movw	r0, #60096	; 0xeac0
   1f890:	e3400002 	movt	r0, #2
   1f894:	e3a01001 	mov	r1, #1
   1f898:	e30e2d3c 	movw	r2, #60732	; 0xed3c
   1f89c:	e3402002 	movt	r2, #2
   1f8a0:	ebffdc2a 	bl	16950 <LogWrite>

		free (pThis->m_pConfigDesc);
   1f8a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f8a8:	e5933018 	ldr	r3, [r3, #24]
   1f8ac:	e1a00003 	mov	r0, r3
   1f8b0:	ebffdc7e 	bl	16ab0 <free>
		pThis->m_pConfigDesc = 0;
   1f8b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f8b8:	e3a02000 	mov	r2, #0
   1f8bc:	e5832018 	str	r2, [r3, #24]

		return FALSE;
   1f8c0:	e3a04000 	mov	r4, #0
   1f8c4:	ea00002f 	b	1f988 <USBDeviceInitialize+0x728>

#ifndef NDEBUG
	//DebugHexdump (pThis->m_pConfigDesc, nTotalLength, FromDevice);
#endif

	assert (pThis->m_pConfigParser == 0);
   1f8c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f8cc:	e593301c 	ldr	r3, [r3, #28]
   1f8d0:	e3530000 	cmp	r3, #0
   1f8d4:	0a000005 	beq	1f8f0 <USBDeviceInitialize+0x690>
   1f8d8:	e30e0d60 	movw	r0, #60768	; 0xed60
   1f8dc:	e3400002 	movt	r0, #2
   1f8e0:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f8e4:	e3401002 	movt	r1, #2
   1f8e8:	e3002132 	movw	r2, #306	; 0x132
   1f8ec:	ebffdc2f 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pConfigParser = malloc (sizeof (TUSBConfigurationParser));
   1f8f0:	e3a00018 	mov	r0, #24
   1f8f4:	ebffdc57 	bl	16a58 <malloc>
   1f8f8:	e1a03000 	mov	r3, r0
   1f8fc:	e1a02003 	mov	r2, r3
   1f900:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f904:	e583201c 	str	r2, [r3, #28]
	assert (pThis->m_pConfigParser != 0);
   1f908:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f90c:	e593301c 	ldr	r3, [r3, #28]
   1f910:	e3530000 	cmp	r3, #0
   1f914:	1a000005 	bne	1f930 <USBDeviceInitialize+0x6d0>
   1f918:	e30e0c08 	movw	r0, #60424	; 0xec08
   1f91c:	e3400002 	movt	r0, #2
   1f920:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f924:	e3401002 	movt	r1, #2
   1f928:	e3a02f4d 	mov	r2, #308	; 0x134
   1f92c:	ebffdc1f 	bl	169b0 <uspi_assertion_failed>
	USBConfigurationParser (pThis->m_pConfigParser, pThis->m_pConfigDesc, nTotalLength);
   1f930:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f934:	e593201c 	ldr	r2, [r3, #28]
   1f938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f93c:	e5933018 	ldr	r3, [r3, #24]
   1f940:	e1a00002 	mov	r0, r2
   1f944:	e1a01003 	mov	r1, r3
   1f948:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1f94c:	ebfffaeb 	bl	1e500 <USBConfigurationParser>
	
	if (!USBConfigurationParserIsValid (pThis->m_pConfigParser))
   1f950:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f954:	e593301c 	ldr	r3, [r3, #28]
   1f958:	e1a00003 	mov	r0, r3
   1f95c:	ebfffbdd 	bl	1e8d8 <USBConfigurationParserIsValid>
   1f960:	e1a03000 	mov	r3, r0
   1f964:	e3530000 	cmp	r3, #0
   1f968:	1a000005 	bne	1f984 <USBDeviceInitialize+0x724>
	{
		USBDeviceConfigurationError (pThis, FromDevice);
   1f96c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f970:	e30e1ac0 	movw	r1, #60096	; 0xeac0
   1f974:	e3401002 	movt	r1, #2
   1f978:	eb000248 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   1f97c:	e3a04000 	mov	r4, #0
   1f980:	ea000000 	b	1f988 <USBDeviceInitialize+0x728>
	}

	return TRUE;
   1f984:	e3a04001 	mov	r4, #1
   1f988:	e1a03005 	mov	r3, r5
   1f98c:	e30f0260 	movw	r0, #62048	; 0xf260
   1f990:	e3400001 	movt	r0, #1
   1f994:	e1a01003 	mov	r1, r3
   1f998:	ebffd7b1 	bl	15864 <__cyg_profile_func_exit>
   1f99c:	e1a03004 	mov	r3, r4
}
   1f9a0:	e1a00003 	mov	r0, r3
   1f9a4:	e24bd00c 	sub	sp, fp, #12
   1f9a8:	e8bd8830 	pop	{r4, r5, fp, pc}

0001f9ac <USBDeviceConfigure>:

boolean USBDeviceConfigure (TUSBDevice *pThis)
{
   1f9ac:	e92d4830 	push	{r4, r5, fp, lr}
   1f9b0:	e28db00c 	add	fp, sp, #12
   1f9b4:	e24dd008 	sub	sp, sp, #8
   1f9b8:	e1a0500e 	mov	r5, lr
   1f9bc:	e50b0010 	str	r0, [fp, #-16]
   1f9c0:	e1a03005 	mov	r3, r5
   1f9c4:	e30f09ac 	movw	r0, #63916	; 0xf9ac
   1f9c8:	e3400001 	movt	r0, #1
   1f9cc:	e1a01003 	mov	r1, r3
   1f9d0:	ebffd751 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1f9d4:	e51b3010 	ldr	r3, [fp, #-16]
   1f9d8:	e3530000 	cmp	r3, #0
   1f9dc:	1a000005 	bne	1f9f8 <USBDeviceConfigure+0x4c>
   1f9e0:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1f9e4:	e3400002 	movt	r0, #2
   1f9e8:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1f9ec:	e3401002 	movt	r1, #2
   1f9f0:	e3002143 	movw	r2, #323	; 0x143
   1f9f4:	ebffdbed 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pHost != 0);
   1f9f8:	e51b3010 	ldr	r3, [fp, #-16]
   1f9fc:	e5933004 	ldr	r3, [r3, #4]
   1fa00:	e3530000 	cmp	r3, #0
   1fa04:	1a000005 	bne	1fa20 <USBDeviceConfigure+0x74>
   1fa08:	e30e0b34 	movw	r0, #60212	; 0xeb34
   1fa0c:	e3400002 	movt	r0, #2
   1fa10:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1fa14:	e3401002 	movt	r1, #2
   1fa18:	e3002145 	movw	r2, #325	; 0x145
   1fa1c:	ebffdbe3 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pEndpoint0 != 0);
   1fa20:	e51b3010 	ldr	r3, [fp, #-16]
   1fa24:	e593300c 	ldr	r3, [r3, #12]
   1fa28:	e3530000 	cmp	r3, #0
   1fa2c:	1a000005 	bne	1fa48 <USBDeviceConfigure+0x9c>
   1fa30:	e30e0b64 	movw	r0, #60260	; 0xeb64
   1fa34:	e3400002 	movt	r0, #2
   1fa38:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1fa3c:	e3401002 	movt	r1, #2
   1fa40:	e3002146 	movw	r2, #326	; 0x146
   1fa44:	ebffdbd9 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pConfigDesc == 0)		// not initialized
   1fa48:	e51b3010 	ldr	r3, [fp, #-16]
   1fa4c:	e5933018 	ldr	r3, [r3, #24]
   1fa50:	e3530000 	cmp	r3, #0
   1fa54:	1a000001 	bne	1fa60 <USBDeviceConfigure+0xb4>
	{
		return FALSE;
   1fa58:	e3a04000 	mov	r4, #0
   1fa5c:	ea000019 	b	1fac8 <USBDeviceConfigure+0x11c>
	}

	if (!DWHCIDeviceSetConfiguration (pThis->m_pHost, pThis->m_pEndpoint0, pThis->m_pConfigDesc->bConfigurationValue))
   1fa60:	e51b3010 	ldr	r3, [fp, #-16]
   1fa64:	e5931004 	ldr	r1, [r3, #4]
   1fa68:	e51b3010 	ldr	r3, [fp, #-16]
   1fa6c:	e593200c 	ldr	r2, [r3, #12]
   1fa70:	e51b3010 	ldr	r3, [fp, #-16]
   1fa74:	e5933018 	ldr	r3, [r3, #24]
   1fa78:	e5d33005 	ldrb	r3, [r3, #5]
   1fa7c:	e1a00001 	mov	r0, r1
   1fa80:	e1a01002 	mov	r1, r2
   1fa84:	e1a02003 	mov	r2, r3
   1fa88:	ebffe400 	bl	18a90 <DWHCIDeviceSetConfiguration>
   1fa8c:	e1a03000 	mov	r3, r0
   1fa90:	e3530000 	cmp	r3, #0
   1fa94:	1a00000a 	bne	1fac4 <USBDeviceConfigure+0x118>
	{
		LogWrite (FromDevice, LOG_ERROR, "Cannot set configuration (%u)",
			     (unsigned) pThis->m_pConfigDesc->bConfigurationValue);
   1fa98:	e51b3010 	ldr	r3, [fp, #-16]
   1fa9c:	e5933018 	ldr	r3, [r3, #24]
   1faa0:	e5d33005 	ldrb	r3, [r3, #5]
		return FALSE;
	}

	if (!DWHCIDeviceSetConfiguration (pThis->m_pHost, pThis->m_pEndpoint0, pThis->m_pConfigDesc->bConfigurationValue))
	{
		LogWrite (FromDevice, LOG_ERROR, "Cannot set configuration (%u)",
   1faa4:	e30e0ac0 	movw	r0, #60096	; 0xeac0
   1faa8:	e3400002 	movt	r0, #2
   1faac:	e3a01001 	mov	r1, #1
   1fab0:	e30e2d7c 	movw	r2, #60796	; 0xed7c
   1fab4:	e3402002 	movt	r2, #2
   1fab8:	ebffdba4 	bl	16950 <LogWrite>
			     (unsigned) pThis->m_pConfigDesc->bConfigurationValue);

		return FALSE;
   1fabc:	e3a04000 	mov	r4, #0
   1fac0:	ea000000 	b	1fac8 <USBDeviceConfigure+0x11c>
	}

	return TRUE;
   1fac4:	e3a04001 	mov	r4, #1
   1fac8:	e1a03005 	mov	r3, r5
   1facc:	e30f09ac 	movw	r0, #63916	; 0xf9ac
   1fad0:	e3400001 	movt	r0, #1
   1fad4:	e1a01003 	mov	r1, r3
   1fad8:	ebffd761 	bl	15864 <__cyg_profile_func_exit>
   1fadc:	e1a03004 	mov	r3, r4
}
   1fae0:	e1a00003 	mov	r0, r3
   1fae4:	e24bd00c 	sub	sp, fp, #12
   1fae8:	e8bd8830 	pop	{r4, r5, fp, pc}

0001faec <USBDeviceGetName>:

TString *USBDeviceGetName (TUSBDevice *pThis, TDeviceNameSelector Selector)
{
   1faec:	e92d4830 	push	{r4, r5, fp, lr}
   1faf0:	e28db00c 	add	fp, sp, #12
   1faf4:	e24dd018 	sub	sp, sp, #24
   1faf8:	e1a0500e 	mov	r5, lr
   1fafc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1fb00:	e1a03001 	mov	r3, r1
   1fb04:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   1fb08:	e1a03005 	mov	r3, r5
   1fb0c:	e30f0aec 	movw	r0, #64236	; 0xfaec
   1fb10:	e3400001 	movt	r0, #1
   1fb14:	e1a01003 	mov	r1, r3
   1fb18:	ebffd6ff 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1fb1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fb20:	e3530000 	cmp	r3, #0
   1fb24:	1a000005 	bne	1fb40 <USBDeviceGetName+0x54>
   1fb28:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1fb2c:	e3400002 	movt	r0, #2
   1fb30:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1fb34:	e3401002 	movt	r1, #2
   1fb38:	e300215a 	movw	r2, #346	; 0x15a
   1fb3c:	ebffdb9b 	bl	169b0 <uspi_assertion_failed>

	TString *pString = malloc (sizeof (TString));
   1fb40:	e3a0000c 	mov	r0, #12
   1fb44:	ebffdbc3 	bl	16a58 <malloc>
   1fb48:	e1a03000 	mov	r3, r0
   1fb4c:	e50b3010 	str	r3, [fp, #-16]
	assert (pString != 0);
   1fb50:	e51b3010 	ldr	r3, [fp, #-16]
   1fb54:	e3530000 	cmp	r3, #0
   1fb58:	1a000005 	bne	1fb74 <USBDeviceGetName+0x88>
   1fb5c:	e30e0d9c 	movw	r0, #60828	; 0xed9c
   1fb60:	e3400002 	movt	r0, #2
   1fb64:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1fb68:	e3401002 	movt	r1, #2
   1fb6c:	e300215d 	movw	r2, #349	; 0x15d
   1fb70:	ebffdb8e 	bl	169b0 <uspi_assertion_failed>
	String (pString);
   1fb74:	e51b0010 	ldr	r0, [fp, #-16]
   1fb78:	eb001492 	bl	24dc8 <String>
	
	switch (Selector)
   1fb7c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1fb80:	e3530001 	cmp	r3, #1
   1fb84:	0a00001b 	beq	1fbf8 <USBDeviceGetName+0x10c>
   1fb88:	e3530002 	cmp	r3, #2
   1fb8c:	0a00003f 	beq	1fc90 <USBDeviceGetName+0x1a4>
   1fb90:	e3530000 	cmp	r3, #0
   1fb94:	1a000065 	bne	1fd30 <USBDeviceGetName+0x244>
	{
	case DeviceNameVendor:
		assert (pThis->m_pDeviceDesc != 0);
   1fb98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fb9c:	e5933014 	ldr	r3, [r3, #20]
   1fba0:	e3530000 	cmp	r3, #0
   1fba4:	1a000005 	bne	1fbc0 <USBDeviceGetName+0xd4>
   1fba8:	e30e0ba8 	movw	r0, #60328	; 0xeba8
   1fbac:	e3400002 	movt	r0, #2
   1fbb0:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1fbb4:	e3401002 	movt	r1, #2
   1fbb8:	e3002163 	movw	r2, #355	; 0x163
   1fbbc:	ebffdb7b 	bl	169b0 <uspi_assertion_failed>
		StringFormat (pString, "ven%x-%x",
				 (unsigned) pThis->m_pDeviceDesc->idVendor,
   1fbc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fbc4:	e5933014 	ldr	r3, [r3, #20]
   1fbc8:	e1d330b8 	ldrh	r3, [r3, #8]
   1fbcc:	e6ff3073 	uxth	r3, r3
	
	switch (Selector)
	{
	case DeviceNameVendor:
		assert (pThis->m_pDeviceDesc != 0);
		StringFormat (pString, "ven%x-%x",
   1fbd0:	e1a02003 	mov	r2, r3
				 (unsigned) pThis->m_pDeviceDesc->idVendor,
				 (unsigned) pThis->m_pDeviceDesc->idProduct);
   1fbd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fbd8:	e5933014 	ldr	r3, [r3, #20]
   1fbdc:	e1d330ba 	ldrh	r3, [r3, #10]
   1fbe0:	e6ff3073 	uxth	r3, r3
	
	switch (Selector)
	{
	case DeviceNameVendor:
		assert (pThis->m_pDeviceDesc != 0);
		StringFormat (pString, "ven%x-%x",
   1fbe4:	e51b0010 	ldr	r0, [fp, #-16]
   1fbe8:	e30e1dac 	movw	r1, #60844	; 0xedac
   1fbec:	e3401002 	movt	r1, #2
   1fbf0:	eb001618 	bl	25458 <StringFormat>
				 (unsigned) pThis->m_pDeviceDesc->idVendor,
				 (unsigned) pThis->m_pDeviceDesc->idProduct);
		break;
   1fbf4:	ea000058 	b	1fd5c <USBDeviceGetName+0x270>
		
	case DeviceNameDevice:
		assert (pThis->m_pDeviceDesc != 0);
   1fbf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fbfc:	e5933014 	ldr	r3, [r3, #20]
   1fc00:	e3530000 	cmp	r3, #0
   1fc04:	1a000005 	bne	1fc20 <USBDeviceGetName+0x134>
   1fc08:	e30e0ba8 	movw	r0, #60328	; 0xeba8
   1fc0c:	e3400002 	movt	r0, #2
   1fc10:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1fc14:	e3401002 	movt	r1, #2
   1fc18:	e300216a 	movw	r2, #362	; 0x16a
   1fc1c:	ebffdb63 	bl	169b0 <uspi_assertion_failed>
		if (   pThis->m_pDeviceDesc->bDeviceClass == 0
   1fc20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fc24:	e5933014 	ldr	r3, [r3, #20]
   1fc28:	e5d33004 	ldrb	r3, [r3, #4]
   1fc2c:	e3530000 	cmp	r3, #0
   1fc30:	0a000044 	beq	1fd48 <USBDeviceGetName+0x25c>
		    || pThis->m_pDeviceDesc->bDeviceClass == 0xFF)
   1fc34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fc38:	e5933014 	ldr	r3, [r3, #20]
   1fc3c:	e5d33004 	ldrb	r3, [r3, #4]
   1fc40:	e35300ff 	cmp	r3, #255	; 0xff
   1fc44:	0a00003f 	beq	1fd48 <USBDeviceGetName+0x25c>
		{
			goto unknown;
		}
		StringFormat (pString, "dev%x-%x-%x",
				 (unsigned) pThis->m_pDeviceDesc->bDeviceClass,
   1fc48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fc4c:	e5933014 	ldr	r3, [r3, #20]
   1fc50:	e5d33004 	ldrb	r3, [r3, #4]
		if (   pThis->m_pDeviceDesc->bDeviceClass == 0
		    || pThis->m_pDeviceDesc->bDeviceClass == 0xFF)
		{
			goto unknown;
		}
		StringFormat (pString, "dev%x-%x-%x",
   1fc54:	e1a02003 	mov	r2, r3
				 (unsigned) pThis->m_pDeviceDesc->bDeviceClass,
				 (unsigned) pThis->m_pDeviceDesc->bDeviceSubClass,
   1fc58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fc5c:	e5933014 	ldr	r3, [r3, #20]
   1fc60:	e5d33005 	ldrb	r3, [r3, #5]
		if (   pThis->m_pDeviceDesc->bDeviceClass == 0
		    || pThis->m_pDeviceDesc->bDeviceClass == 0xFF)
		{
			goto unknown;
		}
		StringFormat (pString, "dev%x-%x-%x",
   1fc64:	e1a0c003 	mov	ip, r3
				 (unsigned) pThis->m_pDeviceDesc->bDeviceClass,
				 (unsigned) pThis->m_pDeviceDesc->bDeviceSubClass,
				 (unsigned) pThis->m_pDeviceDesc->bDeviceProtocol);
   1fc68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fc6c:	e5933014 	ldr	r3, [r3, #20]
   1fc70:	e5d33006 	ldrb	r3, [r3, #6]
		if (   pThis->m_pDeviceDesc->bDeviceClass == 0
		    || pThis->m_pDeviceDesc->bDeviceClass == 0xFF)
		{
			goto unknown;
		}
		StringFormat (pString, "dev%x-%x-%x",
   1fc74:	e58d3000 	str	r3, [sp]
   1fc78:	e51b0010 	ldr	r0, [fp, #-16]
   1fc7c:	e30e1db8 	movw	r1, #60856	; 0xedb8
   1fc80:	e3401002 	movt	r1, #2
   1fc84:	e1a0300c 	mov	r3, ip
   1fc88:	eb0015f2 	bl	25458 <StringFormat>
				 (unsigned) pThis->m_pDeviceDesc->bDeviceClass,
				 (unsigned) pThis->m_pDeviceDesc->bDeviceSubClass,
				 (unsigned) pThis->m_pDeviceDesc->bDeviceProtocol);
		break;
   1fc8c:	ea000032 	b	1fd5c <USBDeviceGetName+0x270>
		
	case DeviceNameInterface: {
		TConfigurationHeader *pConfig = (TConfigurationHeader *) pThis->m_pConfigDesc;
   1fc90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fc94:	e5933018 	ldr	r3, [r3, #24]
   1fc98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		assert (pConfig != 0);
   1fc9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1fca0:	e3530000 	cmp	r3, #0
   1fca4:	1a000005 	bne	1fcc0 <USBDeviceGetName+0x1d4>
   1fca8:	e30e0dc4 	movw	r0, #60868	; 0xedc4
   1fcac:	e3400002 	movt	r0, #2
   1fcb0:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1fcb4:	e3401002 	movt	r1, #2
   1fcb8:	e3a02f5e 	mov	r2, #376	; 0x178
   1fcbc:	ebffdb3b 	bl	169b0 <uspi_assertion_failed>
		if (   pConfig->Configuration.wTotalLength < sizeof *pConfig
   1fcc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1fcc4:	e1d330b2 	ldrh	r3, [r3, #2]
   1fcc8:	e6ff3073 	uxth	r3, r3
   1fccc:	e3530011 	cmp	r3, #17
   1fcd0:	9a00001c 	bls	1fd48 <USBDeviceGetName+0x25c>
		    || pConfig->Interface.bInterfaceClass == 0
   1fcd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1fcd8:	e5d3300e 	ldrb	r3, [r3, #14]
   1fcdc:	e3530000 	cmp	r3, #0
   1fce0:	0a000018 	beq	1fd48 <USBDeviceGetName+0x25c>
		    || pConfig->Interface.bInterfaceClass == 0xFF)
   1fce4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1fce8:	e5d3300e 	ldrb	r3, [r3, #14]
   1fcec:	e35300ff 	cmp	r3, #255	; 0xff
   1fcf0:	0a000014 	beq	1fd48 <USBDeviceGetName+0x25c>
		{
			goto unknown;
		}
		StringFormat (pString, "int%x-%x-%x",
				 (unsigned) pConfig->Interface.bInterfaceClass,
   1fcf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1fcf8:	e5d3300e 	ldrb	r3, [r3, #14]
		    || pConfig->Interface.bInterfaceClass == 0
		    || pConfig->Interface.bInterfaceClass == 0xFF)
		{
			goto unknown;
		}
		StringFormat (pString, "int%x-%x-%x",
   1fcfc:	e1a02003 	mov	r2, r3
				 (unsigned) pConfig->Interface.bInterfaceClass,
				 (unsigned) pConfig->Interface.bInterfaceSubClass,
   1fd00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1fd04:	e5d3300f 	ldrb	r3, [r3, #15]
		    || pConfig->Interface.bInterfaceClass == 0
		    || pConfig->Interface.bInterfaceClass == 0xFF)
		{
			goto unknown;
		}
		StringFormat (pString, "int%x-%x-%x",
   1fd08:	e1a0c003 	mov	ip, r3
				 (unsigned) pConfig->Interface.bInterfaceClass,
				 (unsigned) pConfig->Interface.bInterfaceSubClass,
				 (unsigned) pConfig->Interface.bInterfaceProtocol);
   1fd0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1fd10:	e5d33010 	ldrb	r3, [r3, #16]
		    || pConfig->Interface.bInterfaceClass == 0
		    || pConfig->Interface.bInterfaceClass == 0xFF)
		{
			goto unknown;
		}
		StringFormat (pString, "int%x-%x-%x",
   1fd14:	e58d3000 	str	r3, [sp]
   1fd18:	e51b0010 	ldr	r0, [fp, #-16]
   1fd1c:	e30e1dd4 	movw	r1, #60884	; 0xedd4
   1fd20:	e3401002 	movt	r1, #2
   1fd24:	e1a0300c 	mov	r3, ip
   1fd28:	eb0015ca 	bl	25458 <StringFormat>
				 (unsigned) pConfig->Interface.bInterfaceClass,
				 (unsigned) pConfig->Interface.bInterfaceSubClass,
				 (unsigned) pConfig->Interface.bInterfaceProtocol);
		} break;
   1fd2c:	ea00000a 	b	1fd5c <USBDeviceGetName+0x270>

	default:
		assert (0);
   1fd30:	e30e0de0 	movw	r0, #60896	; 0xede0
   1fd34:	e3400002 	movt	r0, #2
   1fd38:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1fd3c:	e3401002 	movt	r1, #2
   1fd40:	e3002186 	movw	r2, #390	; 0x186
   1fd44:	ebffdb19 	bl	169b0 <uspi_assertion_failed>
	unknown:
		StringSet (pString, "unknown");
   1fd48:	e51b0010 	ldr	r0, [fp, #-16]
   1fd4c:	e30e1de4 	movw	r1, #60900	; 0xede4
   1fd50:	e3401002 	movt	r1, #2
   1fd54:	eb0014b3 	bl	25028 <StringSet>
		break;
   1fd58:	e1a00000 	nop			; (mov r0, r0)
	}
	
	return pString;
   1fd5c:	e51b4010 	ldr	r4, [fp, #-16]
   1fd60:	e1a03005 	mov	r3, r5
   1fd64:	e30f0aec 	movw	r0, #64236	; 0xfaec
   1fd68:	e3400001 	movt	r0, #1
   1fd6c:	e1a01003 	mov	r1, r3
   1fd70:	ebffd6bb 	bl	15864 <__cyg_profile_func_exit>
   1fd74:	e1a03004 	mov	r3, r4
}
   1fd78:	e1a00003 	mov	r0, r3
   1fd7c:	e24bd00c 	sub	sp, fp, #12
   1fd80:	e8bd8830 	pop	{r4, r5, fp, pc}

0001fd84 <USBDeviceGetAddress>:

u8 USBDeviceGetAddress (TUSBDevice *pThis)
{
   1fd84:	e92d4830 	push	{r4, r5, fp, lr}
   1fd88:	e28db00c 	add	fp, sp, #12
   1fd8c:	e24dd008 	sub	sp, sp, #8
   1fd90:	e1a0500e 	mov	r5, lr
   1fd94:	e50b0010 	str	r0, [fp, #-16]
   1fd98:	e1a03005 	mov	r3, r5
   1fd9c:	e30f0d84 	movw	r0, #64900	; 0xfd84
   1fda0:	e3400001 	movt	r0, #1
   1fda4:	e1a01003 	mov	r1, r3
   1fda8:	ebffd65b 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1fdac:	e51b3010 	ldr	r3, [fp, #-16]
   1fdb0:	e3530000 	cmp	r3, #0
   1fdb4:	1a000005 	bne	1fdd0 <USBDeviceGetAddress+0x4c>
   1fdb8:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1fdbc:	e3400002 	movt	r0, #2
   1fdc0:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1fdc4:	e3401002 	movt	r1, #2
   1fdc8:	e3002191 	movw	r2, #401	; 0x191
   1fdcc:	ebffdaf7 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_ucAddress;
   1fdd0:	e51b3010 	ldr	r3, [fp, #-16]
   1fdd4:	e5d34008 	ldrb	r4, [r3, #8]
   1fdd8:	e1a03005 	mov	r3, r5
   1fddc:	e30f0d84 	movw	r0, #64900	; 0xfd84
   1fde0:	e3400001 	movt	r0, #1
   1fde4:	e1a01003 	mov	r1, r3
   1fde8:	ebffd69d 	bl	15864 <__cyg_profile_func_exit>
   1fdec:	e1a03004 	mov	r3, r4
}
   1fdf0:	e1a00003 	mov	r0, r3
   1fdf4:	e24bd00c 	sub	sp, fp, #12
   1fdf8:	e8bd8830 	pop	{r4, r5, fp, pc}

0001fdfc <USBDeviceGetSpeed>:

TUSBSpeed USBDeviceGetSpeed (TUSBDevice *pThis)
{
   1fdfc:	e92d4830 	push	{r4, r5, fp, lr}
   1fe00:	e28db00c 	add	fp, sp, #12
   1fe04:	e24dd008 	sub	sp, sp, #8
   1fe08:	e1a0500e 	mov	r5, lr
   1fe0c:	e50b0010 	str	r0, [fp, #-16]
   1fe10:	e1a03005 	mov	r3, r5
   1fe14:	e30f0dfc 	movw	r0, #65020	; 0xfdfc
   1fe18:	e3400001 	movt	r0, #1
   1fe1c:	e1a01003 	mov	r1, r3
   1fe20:	ebffd63d 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1fe24:	e51b3010 	ldr	r3, [fp, #-16]
   1fe28:	e3530000 	cmp	r3, #0
   1fe2c:	1a000005 	bne	1fe48 <USBDeviceGetSpeed+0x4c>
   1fe30:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1fe34:	e3400002 	movt	r0, #2
   1fe38:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1fe3c:	e3401002 	movt	r1, #2
   1fe40:	e3002197 	movw	r2, #407	; 0x197
   1fe44:	ebffdad9 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_Speed;
   1fe48:	e51b3010 	ldr	r3, [fp, #-16]
   1fe4c:	e5d34009 	ldrb	r4, [r3, #9]
   1fe50:	e1a03005 	mov	r3, r5
   1fe54:	e30f0dfc 	movw	r0, #65020	; 0xfdfc
   1fe58:	e3400001 	movt	r0, #1
   1fe5c:	e1a01003 	mov	r1, r3
   1fe60:	ebffd67f 	bl	15864 <__cyg_profile_func_exit>
   1fe64:	e1a03004 	mov	r3, r4
}
   1fe68:	e1a00003 	mov	r0, r3
   1fe6c:	e24bd00c 	sub	sp, fp, #12
   1fe70:	e8bd8830 	pop	{r4, r5, fp, pc}

0001fe74 <USBDeviceGetHubAddress>:

u8 USBDeviceGetHubAddress (TUSBDevice *pThis)
{
   1fe74:	e92d4830 	push	{r4, r5, fp, lr}
   1fe78:	e28db00c 	add	fp, sp, #12
   1fe7c:	e24dd008 	sub	sp, sp, #8
   1fe80:	e1a0500e 	mov	r5, lr
   1fe84:	e50b0010 	str	r0, [fp, #-16]
   1fe88:	e1a03005 	mov	r3, r5
   1fe8c:	e30f0e74 	movw	r0, #65140	; 0xfe74
   1fe90:	e3400001 	movt	r0, #1
   1fe94:	e1a01003 	mov	r1, r3
   1fe98:	ebffd61f 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1fe9c:	e51b3010 	ldr	r3, [fp, #-16]
   1fea0:	e3530000 	cmp	r3, #0
   1fea4:	1a000005 	bne	1fec0 <USBDeviceGetHubAddress+0x4c>
   1fea8:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1feac:	e3400002 	movt	r0, #2
   1feb0:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1feb4:	e3401002 	movt	r1, #2
   1feb8:	e300219d 	movw	r2, #413	; 0x19d
   1febc:	ebffdabb 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_ucHubAddress;
   1fec0:	e51b3010 	ldr	r3, [fp, #-16]
   1fec4:	e5d34010 	ldrb	r4, [r3, #16]
   1fec8:	e1a03005 	mov	r3, r5
   1fecc:	e30f0e74 	movw	r0, #65140	; 0xfe74
   1fed0:	e3400001 	movt	r0, #1
   1fed4:	e1a01003 	mov	r1, r3
   1fed8:	ebffd661 	bl	15864 <__cyg_profile_func_exit>
   1fedc:	e1a03004 	mov	r3, r4
}
   1fee0:	e1a00003 	mov	r0, r3
   1fee4:	e24bd00c 	sub	sp, fp, #12
   1fee8:	e8bd8830 	pop	{r4, r5, fp, pc}

0001feec <USBDeviceGetHubPortNumber>:

u8 USBDeviceGetHubPortNumber (TUSBDevice *pThis)
{
   1feec:	e92d4830 	push	{r4, r5, fp, lr}
   1fef0:	e28db00c 	add	fp, sp, #12
   1fef4:	e24dd008 	sub	sp, sp, #8
   1fef8:	e1a0500e 	mov	r5, lr
   1fefc:	e50b0010 	str	r0, [fp, #-16]
   1ff00:	e1a03005 	mov	r3, r5
   1ff04:	e30f0eec 	movw	r0, #65260	; 0xfeec
   1ff08:	e3400001 	movt	r0, #1
   1ff0c:	e1a01003 	mov	r1, r3
   1ff10:	ebffd601 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1ff14:	e51b3010 	ldr	r3, [fp, #-16]
   1ff18:	e3530000 	cmp	r3, #0
   1ff1c:	1a000005 	bne	1ff38 <USBDeviceGetHubPortNumber+0x4c>
   1ff20:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1ff24:	e3400002 	movt	r0, #2
   1ff28:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ff2c:	e3401002 	movt	r1, #2
   1ff30:	e30021a3 	movw	r2, #419	; 0x1a3
   1ff34:	ebffda9d 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_ucHubPortNumber;
   1ff38:	e51b3010 	ldr	r3, [fp, #-16]
   1ff3c:	e5d34011 	ldrb	r4, [r3, #17]
   1ff40:	e1a03005 	mov	r3, r5
   1ff44:	e30f0eec 	movw	r0, #65260	; 0xfeec
   1ff48:	e3400001 	movt	r0, #1
   1ff4c:	e1a01003 	mov	r1, r3
   1ff50:	ebffd643 	bl	15864 <__cyg_profile_func_exit>
   1ff54:	e1a03004 	mov	r3, r4
}
   1ff58:	e1a00003 	mov	r0, r3
   1ff5c:	e24bd00c 	sub	sp, fp, #12
   1ff60:	e8bd8830 	pop	{r4, r5, fp, pc}

0001ff64 <USBDeviceGetEndpoint0>:

struct TUSBEndpoint *USBDeviceGetEndpoint0 (TUSBDevice *pThis)
{
   1ff64:	e92d4830 	push	{r4, r5, fp, lr}
   1ff68:	e28db00c 	add	fp, sp, #12
   1ff6c:	e24dd008 	sub	sp, sp, #8
   1ff70:	e1a0500e 	mov	r5, lr
   1ff74:	e50b0010 	str	r0, [fp, #-16]
   1ff78:	e1a03005 	mov	r3, r5
   1ff7c:	e30f0f64 	movw	r0, #65380	; 0xff64
   1ff80:	e3400001 	movt	r0, #1
   1ff84:	e1a01003 	mov	r1, r3
   1ff88:	ebffd5e3 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   1ff8c:	e51b3010 	ldr	r3, [fp, #-16]
   1ff90:	e3530000 	cmp	r3, #0
   1ff94:	1a000005 	bne	1ffb0 <USBDeviceGetEndpoint0+0x4c>
   1ff98:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   1ff9c:	e3400002 	movt	r0, #2
   1ffa0:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ffa4:	e3401002 	movt	r1, #2
   1ffa8:	e30021a9 	movw	r2, #425	; 0x1a9
   1ffac:	ebffda7f 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pEndpoint0 != 0);
   1ffb0:	e51b3010 	ldr	r3, [fp, #-16]
   1ffb4:	e593300c 	ldr	r3, [r3, #12]
   1ffb8:	e3530000 	cmp	r3, #0
   1ffbc:	1a000005 	bne	1ffd8 <USBDeviceGetEndpoint0+0x74>
   1ffc0:	e30e0b64 	movw	r0, #60260	; 0xeb64
   1ffc4:	e3400002 	movt	r0, #2
   1ffc8:	e30e1ad4 	movw	r1, #60116	; 0xead4
   1ffcc:	e3401002 	movt	r1, #2
   1ffd0:	e30021aa 	movw	r2, #426	; 0x1aa
   1ffd4:	ebffda75 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_pEndpoint0;
   1ffd8:	e51b3010 	ldr	r3, [fp, #-16]
   1ffdc:	e593400c 	ldr	r4, [r3, #12]
   1ffe0:	e1a03005 	mov	r3, r5
   1ffe4:	e30f0f64 	movw	r0, #65380	; 0xff64
   1ffe8:	e3400001 	movt	r0, #1
   1ffec:	e1a01003 	mov	r1, r3
   1fff0:	ebffd61b 	bl	15864 <__cyg_profile_func_exit>
   1fff4:	e1a03004 	mov	r3, r4
}
   1fff8:	e1a00003 	mov	r0, r3
   1fffc:	e24bd00c 	sub	sp, fp, #12
   20000:	e8bd8830 	pop	{r4, r5, fp, pc}

00020004 <USBDeviceGetHost>:

struct TDWHCIDevice *USBDeviceGetHost (TUSBDevice *pThis)
{
   20004:	e92d4830 	push	{r4, r5, fp, lr}
   20008:	e28db00c 	add	fp, sp, #12
   2000c:	e24dd008 	sub	sp, sp, #8
   20010:	e1a0500e 	mov	r5, lr
   20014:	e50b0010 	str	r0, [fp, #-16]
   20018:	e1a03005 	mov	r3, r5
   2001c:	e3000004 	movw	r0, #4
   20020:	e3400002 	movt	r0, #2
   20024:	e1a01003 	mov	r1, r3
   20028:	ebffd5bb 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2002c:	e51b3010 	ldr	r3, [fp, #-16]
   20030:	e3530000 	cmp	r3, #0
   20034:	1a000005 	bne	20050 <USBDeviceGetHost+0x4c>
   20038:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   2003c:	e3400002 	movt	r0, #2
   20040:	e30e1ad4 	movw	r1, #60116	; 0xead4
   20044:	e3401002 	movt	r1, #2
   20048:	e3a02e1b 	mov	r2, #432	; 0x1b0
   2004c:	ebffda57 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pHost != 0);
   20050:	e51b3010 	ldr	r3, [fp, #-16]
   20054:	e5933004 	ldr	r3, [r3, #4]
   20058:	e3530000 	cmp	r3, #0
   2005c:	1a000005 	bne	20078 <USBDeviceGetHost+0x74>
   20060:	e30e0b34 	movw	r0, #60212	; 0xeb34
   20064:	e3400002 	movt	r0, #2
   20068:	e30e1ad4 	movw	r1, #60116	; 0xead4
   2006c:	e3401002 	movt	r1, #2
   20070:	e30021b1 	movw	r2, #433	; 0x1b1
   20074:	ebffda4d 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_pHost;
   20078:	e51b3010 	ldr	r3, [fp, #-16]
   2007c:	e5934004 	ldr	r4, [r3, #4]
   20080:	e1a03005 	mov	r3, r5
   20084:	e3000004 	movw	r0, #4
   20088:	e3400002 	movt	r0, #2
   2008c:	e1a01003 	mov	r1, r3
   20090:	ebffd5f3 	bl	15864 <__cyg_profile_func_exit>
   20094:	e1a03004 	mov	r3, r4
}
   20098:	e1a00003 	mov	r0, r3
   2009c:	e24bd00c 	sub	sp, fp, #12
   200a0:	e8bd8830 	pop	{r4, r5, fp, pc}

000200a4 <USBDeviceGetDeviceDescriptor>:

const TUSBDeviceDescriptor *USBDeviceGetDeviceDescriptor (TUSBDevice *pThis)
{
   200a4:	e92d4830 	push	{r4, r5, fp, lr}
   200a8:	e28db00c 	add	fp, sp, #12
   200ac:	e24dd008 	sub	sp, sp, #8
   200b0:	e1a0500e 	mov	r5, lr
   200b4:	e50b0010 	str	r0, [fp, #-16]
   200b8:	e1a03005 	mov	r3, r5
   200bc:	e30000a4 	movw	r0, #164	; 0xa4
   200c0:	e3400002 	movt	r0, #2
   200c4:	e1a01003 	mov	r1, r3
   200c8:	ebffd593 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   200cc:	e51b3010 	ldr	r3, [fp, #-16]
   200d0:	e3530000 	cmp	r3, #0
   200d4:	1a000005 	bne	200f0 <USBDeviceGetDeviceDescriptor+0x4c>
   200d8:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   200dc:	e3400002 	movt	r0, #2
   200e0:	e30e1ad4 	movw	r1, #60116	; 0xead4
   200e4:	e3401002 	movt	r1, #2
   200e8:	e30021b7 	movw	r2, #439	; 0x1b7
   200ec:	ebffda2f 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pDeviceDesc != 0);
   200f0:	e51b3010 	ldr	r3, [fp, #-16]
   200f4:	e5933014 	ldr	r3, [r3, #20]
   200f8:	e3530000 	cmp	r3, #0
   200fc:	1a000005 	bne	20118 <USBDeviceGetDeviceDescriptor+0x74>
   20100:	e30e0ba8 	movw	r0, #60328	; 0xeba8
   20104:	e3400002 	movt	r0, #2
   20108:	e30e1ad4 	movw	r1, #60116	; 0xead4
   2010c:	e3401002 	movt	r1, #2
   20110:	e3a02f6e 	mov	r2, #440	; 0x1b8
   20114:	ebffda25 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_pDeviceDesc;
   20118:	e51b3010 	ldr	r3, [fp, #-16]
   2011c:	e5934014 	ldr	r4, [r3, #20]
   20120:	e1a03005 	mov	r3, r5
   20124:	e30000a4 	movw	r0, #164	; 0xa4
   20128:	e3400002 	movt	r0, #2
   2012c:	e1a01003 	mov	r1, r3
   20130:	ebffd5cb 	bl	15864 <__cyg_profile_func_exit>
   20134:	e1a03004 	mov	r3, r4
}
   20138:	e1a00003 	mov	r0, r3
   2013c:	e24bd00c 	sub	sp, fp, #12
   20140:	e8bd8830 	pop	{r4, r5, fp, pc}

00020144 <USBDeviceGetConfigurationDescriptor>:

const TUSBConfigurationDescriptor *USBDeviceGetConfigurationDescriptor (TUSBDevice *pThis)
{
   20144:	e92d4830 	push	{r4, r5, fp, lr}
   20148:	e28db00c 	add	fp, sp, #12
   2014c:	e24dd008 	sub	sp, sp, #8
   20150:	e1a0500e 	mov	r5, lr
   20154:	e50b0010 	str	r0, [fp, #-16]
   20158:	e1a03005 	mov	r3, r5
   2015c:	e3000144 	movw	r0, #324	; 0x144
   20160:	e3400002 	movt	r0, #2
   20164:	e1a01003 	mov	r1, r3
   20168:	ebffd56b 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2016c:	e51b3010 	ldr	r3, [fp, #-16]
   20170:	e3530000 	cmp	r3, #0
   20174:	1a000005 	bne	20190 <USBDeviceGetConfigurationDescriptor+0x4c>
   20178:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   2017c:	e3400002 	movt	r0, #2
   20180:	e30e1ad4 	movw	r1, #60116	; 0xead4
   20184:	e3401002 	movt	r1, #2
   20188:	e30021be 	movw	r2, #446	; 0x1be
   2018c:	ebffda07 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pConfigDesc != 0);
   20190:	e51b3010 	ldr	r3, [fp, #-16]
   20194:	e5933018 	ldr	r3, [r3, #24]
   20198:	e3530000 	cmp	r3, #0
   2019c:	1a000005 	bne	201b8 <USBDeviceGetConfigurationDescriptor+0x74>
   201a0:	e30e0bec 	movw	r0, #60396	; 0xebec
   201a4:	e3400002 	movt	r0, #2
   201a8:	e30e1ad4 	movw	r1, #60116	; 0xead4
   201ac:	e3401002 	movt	r1, #2
   201b0:	e30021bf 	movw	r2, #447	; 0x1bf
   201b4:	ebffd9fd 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_pConfigDesc;
   201b8:	e51b3010 	ldr	r3, [fp, #-16]
   201bc:	e5934018 	ldr	r4, [r3, #24]
   201c0:	e1a03005 	mov	r3, r5
   201c4:	e3000144 	movw	r0, #324	; 0x144
   201c8:	e3400002 	movt	r0, #2
   201cc:	e1a01003 	mov	r1, r3
   201d0:	ebffd5a3 	bl	15864 <__cyg_profile_func_exit>
   201d4:	e1a03004 	mov	r3, r4
}
   201d8:	e1a00003 	mov	r0, r3
   201dc:	e24bd00c 	sub	sp, fp, #12
   201e0:	e8bd8830 	pop	{r4, r5, fp, pc}

000201e4 <USBDeviceGetDescriptor>:

const TUSBDescriptor *USBDeviceGetDescriptor (TUSBDevice *pThis, u8 ucType)
{
   201e4:	e92d4830 	push	{r4, r5, fp, lr}
   201e8:	e28db00c 	add	fp, sp, #12
   201ec:	e24dd008 	sub	sp, sp, #8
   201f0:	e1a0400e 	mov	r4, lr
   201f4:	e50b0010 	str	r0, [fp, #-16]
   201f8:	e1a03001 	mov	r3, r1
   201fc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   20200:	e1a03004 	mov	r3, r4
   20204:	e30001e4 	movw	r0, #484	; 0x1e4
   20208:	e3400002 	movt	r0, #2
   2020c:	e1a01003 	mov	r1, r3
   20210:	ebffd541 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   20214:	e51b3010 	ldr	r3, [fp, #-16]
   20218:	e3530000 	cmp	r3, #0
   2021c:	1a000005 	bne	20238 <USBDeviceGetDescriptor+0x54>
   20220:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   20224:	e3400002 	movt	r0, #2
   20228:	e30e1ad4 	movw	r1, #60116	; 0xead4
   2022c:	e3401002 	movt	r1, #2
   20230:	e30021c5 	movw	r2, #453	; 0x1c5
   20234:	ebffd9dd 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pConfigParser != 0);
   20238:	e51b3010 	ldr	r3, [fp, #-16]
   2023c:	e593301c 	ldr	r3, [r3, #28]
   20240:	e3530000 	cmp	r3, #0
   20244:	1a000005 	bne	20260 <USBDeviceGetDescriptor+0x7c>
   20248:	e30e0c08 	movw	r0, #60424	; 0xec08
   2024c:	e3400002 	movt	r0, #2
   20250:	e30e1ad4 	movw	r1, #60116	; 0xead4
   20254:	e3401002 	movt	r1, #2
   20258:	e30021c6 	movw	r2, #454	; 0x1c6
   2025c:	ebffd9d3 	bl	169b0 <uspi_assertion_failed>
	return USBConfigurationParserGetDescriptor (pThis->m_pConfigParser, ucType);
   20260:	e51b3010 	ldr	r3, [fp, #-16]
   20264:	e593201c 	ldr	r2, [r3, #28]
   20268:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   2026c:	e1a00002 	mov	r0, r2
   20270:	e1a01003 	mov	r1, r3
   20274:	ebfff9b5 	bl	1e950 <USBConfigurationParserGetDescriptor>
   20278:	e1a05000 	mov	r5, r0
   2027c:	e1a03004 	mov	r3, r4
   20280:	e30001e4 	movw	r0, #484	; 0x1e4
   20284:	e3400002 	movt	r0, #2
   20288:	e1a01003 	mov	r1, r3
   2028c:	ebffd574 	bl	15864 <__cyg_profile_func_exit>
   20290:	e1a03005 	mov	r3, r5
}
   20294:	e1a00003 	mov	r0, r3
   20298:	e24bd00c 	sub	sp, fp, #12
   2029c:	e8bd8830 	pop	{r4, r5, fp, pc}

000202a0 <USBDeviceConfigurationError>:

void USBDeviceConfigurationError (TUSBDevice *pThis, const char *pSource)
{
   202a0:	e92d4810 	push	{r4, fp, lr}
   202a4:	e28db008 	add	fp, sp, #8
   202a8:	e24dd00c 	sub	sp, sp, #12
   202ac:	e1a0400e 	mov	r4, lr
   202b0:	e50b0010 	str	r0, [fp, #-16]
   202b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   202b8:	e1a03004 	mov	r3, r4
   202bc:	e30002a0 	movw	r0, #672	; 0x2a0
   202c0:	e3400002 	movt	r0, #2
   202c4:	e1a01003 	mov	r1, r3
   202c8:	ebffd513 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   202cc:	e51b3010 	ldr	r3, [fp, #-16]
   202d0:	e3530000 	cmp	r3, #0
   202d4:	1a000005 	bne	202f0 <USBDeviceConfigurationError+0x50>
   202d8:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   202dc:	e3400002 	movt	r0, #2
   202e0:	e30e1ad4 	movw	r1, #60116	; 0xead4
   202e4:	e3401002 	movt	r1, #2
   202e8:	e3a02f73 	mov	r2, #460	; 0x1cc
   202ec:	ebffd9af 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pConfigParser != 0);
   202f0:	e51b3010 	ldr	r3, [fp, #-16]
   202f4:	e593301c 	ldr	r3, [r3, #28]
   202f8:	e3530000 	cmp	r3, #0
   202fc:	1a000005 	bne	20318 <USBDeviceConfigurationError+0x78>
   20300:	e30e0c08 	movw	r0, #60424	; 0xec08
   20304:	e3400002 	movt	r0, #2
   20308:	e30e1ad4 	movw	r1, #60116	; 0xead4
   2030c:	e3401002 	movt	r1, #2
   20310:	e30021cd 	movw	r2, #461	; 0x1cd
   20314:	ebffd9a5 	bl	169b0 <uspi_assertion_failed>
	USBConfigurationParserError (pThis->m_pConfigParser, pSource);
   20318:	e51b3010 	ldr	r3, [fp, #-16]
   2031c:	e593301c 	ldr	r3, [r3, #28]
   20320:	e1a00003 	mov	r0, r3
   20324:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   20328:	ebfff9ed 	bl	1eae4 <USBConfigurationParserError>
   2032c:	e1a03004 	mov	r3, r4
   20330:	e30002a0 	movw	r0, #672	; 0x2a0
   20334:	e3400002 	movt	r0, #2
   20338:	e1a01003 	mov	r1, r3
   2033c:	ebffd548 	bl	15864 <__cyg_profile_func_exit>
}
   20340:	e24bd008 	sub	sp, fp, #8
   20344:	e8bd8810 	pop	{r4, fp, pc}

00020348 <USBDeviceSetAddress>:

void USBDeviceSetAddress (TUSBDevice *pThis, u8 ucAddress)
{
   20348:	e92d4810 	push	{r4, fp, lr}
   2034c:	e28db008 	add	fp, sp, #8
   20350:	e24dd00c 	sub	sp, sp, #12
   20354:	e1a0400e 	mov	r4, lr
   20358:	e50b0010 	str	r0, [fp, #-16]
   2035c:	e1a03001 	mov	r3, r1
   20360:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   20364:	e1a03004 	mov	r3, r4
   20368:	e3000348 	movw	r0, #840	; 0x348
   2036c:	e3400002 	movt	r0, #2
   20370:	e1a01003 	mov	r1, r3
   20374:	ebffd4e8 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   20378:	e51b3010 	ldr	r3, [fp, #-16]
   2037c:	e3530000 	cmp	r3, #0
   20380:	1a000005 	bne	2039c <USBDeviceSetAddress+0x54>
   20384:	e30e0ac8 	movw	r0, #60104	; 0xeac8
   20388:	e3400002 	movt	r0, #2
   2038c:	e30e1ad4 	movw	r1, #60116	; 0xead4
   20390:	e3401002 	movt	r1, #2
   20394:	e30021d3 	movw	r2, #467	; 0x1d3
   20398:	ebffd984 	bl	169b0 <uspi_assertion_failed>

	assert (ucAddress <= USB_MAX_ADDRESS);
   2039c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   203a0:	e6af3073 	sxtb	r3, r3
   203a4:	e3530000 	cmp	r3, #0
   203a8:	aa000005 	bge	203c4 <USBDeviceSetAddress+0x7c>
   203ac:	e30e0dec 	movw	r0, #60908	; 0xedec
   203b0:	e3400002 	movt	r0, #2
   203b4:	e30e1ad4 	movw	r1, #60116	; 0xead4
   203b8:	e3401002 	movt	r1, #2
   203bc:	e30021d5 	movw	r2, #469	; 0x1d5
   203c0:	ebffd97a 	bl	169b0 <uspi_assertion_failed>
	pThis->m_ucAddress = ucAddress;
   203c4:	e51b3010 	ldr	r3, [fp, #-16]
   203c8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
   203cc:	e5c32008 	strb	r2, [r3, #8]
   203d0:	e1a03004 	mov	r3, r4
   203d4:	e3000348 	movw	r0, #840	; 0x348
   203d8:	e3400002 	movt	r0, #2
   203dc:	e1a01003 	mov	r1, r3
   203e0:	ebffd51f 	bl	15864 <__cyg_profile_func_exit>

	//LogWrite (FromDevice, LOG_DEBUG, "Device address set to %u", (unsigned) pThis->m_ucAddress);
}
   203e4:	e24bd008 	sub	sp, fp, #8
   203e8:	e8bd8810 	pop	{r4, fp, pc}

000203ec <USBDeviceFactoryGetDevice>:
#include <uspi/smsc951x.h>

TUSBDevice *GetDevice (TUSBDevice *pParent, TString *pName);

TUSBDevice *USBDeviceFactoryGetDevice (TUSBDevice *pParent)
{
   203ec:	e92d4830 	push	{r4, r5, fp, lr}
   203f0:	e28db00c 	add	fp, sp, #12
   203f4:	e24dd010 	sub	sp, sp, #16
   203f8:	e1a0500e 	mov	r5, lr
   203fc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   20400:	e1a03005 	mov	r3, r5
   20404:	e30003ec 	movw	r0, #1004	; 0x3ec
   20408:	e3400002 	movt	r0, #2
   2040c:	e1a01003 	mov	r1, r3
   20410:	ebffd4c1 	bl	1571c <__cyg_profile_func_enter>
	assert (pParent != 0);
   20414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20418:	e3530000 	cmp	r3, #0
   2041c:	1a000005 	bne	20438 <USBDeviceFactoryGetDevice+0x4c>
   20420:	e30e0e0c 	movw	r0, #60940	; 0xee0c
   20424:	e3400002 	movt	r0, #2
   20428:	e30e1e1c 	movw	r1, #60956	; 0xee1c
   2042c:	e3401002 	movt	r1, #2
   20430:	e3a02024 	mov	r2, #36	; 0x24
   20434:	ebffd95d 	bl	169b0 <uspi_assertion_failed>

	TUSBDevice *pResult;
	if (   (pResult = GetDevice (pParent, USBDeviceGetName (pParent, DeviceNameVendor))) == 0
   20438:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2043c:	e3a01000 	mov	r1, #0
   20440:	ebfffda9 	bl	1faec <USBDeviceGetName>
   20444:	e1a03000 	mov	r3, r0
   20448:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2044c:	e1a01003 	mov	r1, r3
   20450:	eb00002e 	bl	20510 <GetDevice>
   20454:	e50b0010 	str	r0, [fp, #-16]
   20458:	e51b3010 	ldr	r3, [fp, #-16]
   2045c:	e3530000 	cmp	r3, #0
   20460:	1a000017 	bne	204c4 <USBDeviceFactoryGetDevice+0xd8>
	    && (pResult = GetDevice (pParent, USBDeviceGetName (pParent, DeviceNameDevice))) == 0
   20464:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   20468:	e3a01001 	mov	r1, #1
   2046c:	ebfffd9e 	bl	1faec <USBDeviceGetName>
   20470:	e1a03000 	mov	r3, r0
   20474:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   20478:	e1a01003 	mov	r1, r3
   2047c:	eb000023 	bl	20510 <GetDevice>
   20480:	e50b0010 	str	r0, [fp, #-16]
   20484:	e51b3010 	ldr	r3, [fp, #-16]
   20488:	e3530000 	cmp	r3, #0
   2048c:	1a00000c 	bne	204c4 <USBDeviceFactoryGetDevice+0xd8>
	    && (pResult = GetDevice (pParent, USBDeviceGetName (pParent, DeviceNameInterface))) == 0)
   20490:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   20494:	e3a01002 	mov	r1, #2
   20498:	ebfffd93 	bl	1faec <USBDeviceGetName>
   2049c:	e1a03000 	mov	r3, r0
   204a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   204a4:	e1a01003 	mov	r1, r3
   204a8:	eb000018 	bl	20510 <GetDevice>
   204ac:	e50b0010 	str	r0, [fp, #-16]
   204b0:	e51b3010 	ldr	r3, [fp, #-16]
   204b4:	e3530000 	cmp	r3, #0
   204b8:	1a000001 	bne	204c4 <USBDeviceFactoryGetDevice+0xd8>
	{
		return 0;
   204bc:	e3a04000 	mov	r4, #0
   204c0:	ea000009 	b	204ec <USBDeviceFactoryGetDevice+0x100>
	}

	assert (pResult != 0);
   204c4:	e51b3010 	ldr	r3, [fp, #-16]
   204c8:	e3530000 	cmp	r3, #0
   204cc:	1a000005 	bne	204e8 <USBDeviceFactoryGetDevice+0xfc>
   204d0:	e30e0e80 	movw	r0, #61056	; 0xee80
   204d4:	e3400002 	movt	r0, #2
   204d8:	e30e1e1c 	movw	r1, #60956	; 0xee1c
   204dc:	e3401002 	movt	r1, #2
   204e0:	e3a0202e 	mov	r2, #46	; 0x2e
   204e4:	ebffd931 	bl	169b0 <uspi_assertion_failed>

	return pResult;
   204e8:	e51b4010 	ldr	r4, [fp, #-16]
   204ec:	e1a03005 	mov	r3, r5
   204f0:	e30003ec 	movw	r0, #1004	; 0x3ec
   204f4:	e3400002 	movt	r0, #2
   204f8:	e1a01003 	mov	r1, r3
   204fc:	ebffd4d8 	bl	15864 <__cyg_profile_func_exit>
   20500:	e1a03004 	mov	r3, r4
}
   20504:	e1a00003 	mov	r0, r3
   20508:	e24bd00c 	sub	sp, fp, #12
   2050c:	e8bd8830 	pop	{r4, r5, fp, pc}

00020510 <GetDevice>:

TUSBDevice *GetDevice (TUSBDevice *pParent, TString *pName)
{
   20510:	e92d4830 	push	{r4, r5, fp, lr}
   20514:	e28db00c 	add	fp, sp, #12
   20518:	e24dd028 	sub	sp, sp, #40	; 0x28
   2051c:	e1a0500e 	mov	r5, lr
   20520:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   20524:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
   20528:	e1a03005 	mov	r3, r5
   2052c:	e3000510 	movw	r0, #1296	; 0x510
   20530:	e3400002 	movt	r0, #2
   20534:	e1a01003 	mov	r1, r3
   20538:	ebffd477 	bl	1571c <__cyg_profile_func_enter>
	assert (pParent != 0);
   2053c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20540:	e3530000 	cmp	r3, #0
   20544:	1a000005 	bne	20560 <GetDevice+0x50>
   20548:	e30e0e0c 	movw	r0, #60940	; 0xee0c
   2054c:	e3400002 	movt	r0, #2
   20550:	e30e1e1c 	movw	r1, #60956	; 0xee1c
   20554:	e3401002 	movt	r1, #2
   20558:	e3a02035 	mov	r2, #53	; 0x35
   2055c:	ebffd913 	bl	169b0 <uspi_assertion_failed>
	assert (pName != 0);
   20560:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   20564:	e3530000 	cmp	r3, #0
   20568:	1a000005 	bne	20584 <GetDevice+0x74>
   2056c:	e30e0e90 	movw	r0, #61072	; 0xee90
   20570:	e3400002 	movt	r0, #2
   20574:	e30e1e1c 	movw	r1, #60956	; 0xee1c
   20578:	e3401002 	movt	r1, #2
   2057c:	e3a02036 	mov	r2, #54	; 0x36
   20580:	ebffd90a 	bl	169b0 <uspi_assertion_failed>
	
	TUSBDevice *pResult = 0;
   20584:	e3a03000 	mov	r3, #0
   20588:	e50b3010 	str	r3, [fp, #-16]

	if (StringCompare (pName, "dev9-0-2") == 0)
   2058c:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   20590:	e30e1e9c 	movw	r1, #61084	; 0xee9c
   20594:	e3401002 	movt	r1, #2
   20598:	eb001354 	bl	252f0 <StringCompare>
   2059c:	e1a03000 	mov	r3, r0
   205a0:	e3530000 	cmp	r3, #0
   205a4:	1a000012 	bne	205f4 <GetDevice+0xe4>
	{
		TUSBStandardHub *pDevice = (TUSBStandardHub *) malloc (sizeof (TUSBStandardHub));
   205a8:	e3a00080 	mov	r0, #128	; 0x80
   205ac:	ebffd929 	bl	16a58 <malloc>
   205b0:	e1a03000 	mov	r3, r0
   205b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		assert (pDevice != 0);
   205b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   205bc:	e3530000 	cmp	r3, #0
   205c0:	1a000005 	bne	205dc <GetDevice+0xcc>
   205c4:	e30e0ea8 	movw	r0, #61096	; 0xeea8
   205c8:	e3400002 	movt	r0, #2
   205cc:	e30e1e1c 	movw	r1, #60956	; 0xee1c
   205d0:	e3401002 	movt	r1, #2
   205d4:	e3a0203d 	mov	r2, #61	; 0x3d
   205d8:	ebffd8f4 	bl	169b0 <uspi_assertion_failed>
		USBStandardHub (pDevice, pParent);
   205dc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   205e0:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   205e4:	eb000581 	bl	21bf0 <USBStandardHub>
		pResult = (TUSBDevice *) pDevice;
   205e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   205ec:	e50b3010 	str	r3, [fp, #-16]
   205f0:	ea000080 	b	207f8 <GetDevice+0x2e8>
	}
	else if (StringCompare (pName, "int8-6-50") == 0)
   205f4:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   205f8:	e30e1eb8 	movw	r1, #61112	; 0xeeb8
   205fc:	e3401002 	movt	r1, #2
   20600:	eb00133a 	bl	252f0 <StringCompare>
   20604:	e1a03000 	mov	r3, r0
   20608:	e3530000 	cmp	r3, #0
   2060c:	1a000012 	bne	2065c <GetDevice+0x14c>
	{
		TUSBBulkOnlyMassStorageDevice *pDevice = (TUSBBulkOnlyMassStorageDevice *) malloc (sizeof (TUSBBulkOnlyMassStorageDevice));
   20610:	e3a00050 	mov	r0, #80	; 0x50
   20614:	ebffd90f 	bl	16a58 <malloc>
   20618:	e1a03000 	mov	r3, r0
   2061c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		assert (pDevice != 0);
   20620:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20624:	e3530000 	cmp	r3, #0
   20628:	1a000005 	bne	20644 <GetDevice+0x134>
   2062c:	e30e0ea8 	movw	r0, #61096	; 0xeea8
   20630:	e3400002 	movt	r0, #2
   20634:	e30e1e1c 	movw	r1, #60956	; 0xee1c
   20638:	e3401002 	movt	r1, #2
   2063c:	e3a02044 	mov	r2, #68	; 0x44
   20640:	ebffd8da 	bl	169b0 <uspi_assertion_failed>
		USBBulkOnlyMassStorageDevice (pDevice, pParent);
   20644:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   20648:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   2064c:	eb001850 	bl	26794 <USBBulkOnlyMassStorageDevice>
		pResult = (TUSBDevice *) pDevice;
   20650:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20654:	e50b3010 	str	r3, [fp, #-16]
   20658:	ea000066 	b	207f8 <GetDevice+0x2e8>
	}
	else if (StringCompare (pName, "int3-1-1") == 0)
   2065c:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   20660:	e30e1ec4 	movw	r1, #61124	; 0xeec4
   20664:	e3401002 	movt	r1, #2
   20668:	eb001320 	bl	252f0 <StringCompare>
   2066c:	e1a03000 	mov	r3, r0
   20670:	e3530000 	cmp	r3, #0
   20674:	1a000012 	bne	206c4 <GetDevice+0x1b4>
	{
		TUSBKeyboardDevice *pDevice = (TUSBKeyboardDevice *) malloc (sizeof (TUSBKeyboardDevice));
   20678:	e3a00f7b 	mov	r0, #492	; 0x1ec
   2067c:	ebffd8f5 	bl	16a58 <malloc>
   20680:	e1a03000 	mov	r3, r0
   20684:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		assert (pDevice != 0);
   20688:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2068c:	e3530000 	cmp	r3, #0
   20690:	1a000005 	bne	206ac <GetDevice+0x19c>
   20694:	e30e0ea8 	movw	r0, #61096	; 0xeea8
   20698:	e3400002 	movt	r0, #2
   2069c:	e30e1e1c 	movw	r1, #60956	; 0xee1c
   206a0:	e3401002 	movt	r1, #2
   206a4:	e3a0204b 	mov	r2, #75	; 0x4b
   206a8:	ebffd8c0 	bl	169b0 <uspi_assertion_failed>
		USBKeyboardDevice (pDevice, pParent);
   206ac:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   206b0:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   206b4:	eb002267 	bl	29058 <USBKeyboardDevice>
		pResult = (TUSBDevice *) pDevice;
   206b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   206bc:	e50b3010 	str	r3, [fp, #-16]
   206c0:	ea00004c 	b	207f8 <GetDevice+0x2e8>
	}
	else if (StringCompare (pName, "int3-1-2") == 0)
   206c4:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   206c8:	e30e1ed0 	movw	r1, #61136	; 0xeed0
   206cc:	e3401002 	movt	r1, #2
   206d0:	eb001306 	bl	252f0 <StringCompare>
   206d4:	e1a03000 	mov	r3, r0
   206d8:	e3530000 	cmp	r3, #0
   206dc:	1a000012 	bne	2072c <GetDevice+0x21c>
	{
		TUSBMouseDevice *pDevice = (TUSBMouseDevice *) malloc (sizeof (TUSBMouseDevice));
   206e0:	e3a0004c 	mov	r0, #76	; 0x4c
   206e4:	ebffd8db 	bl	16a58 <malloc>
   206e8:	e1a03000 	mov	r3, r0
   206ec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		assert (pDevice != 0);
   206f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   206f4:	e3530000 	cmp	r3, #0
   206f8:	1a000005 	bne	20714 <GetDevice+0x204>
   206fc:	e30e0ea8 	movw	r0, #61096	; 0xeea8
   20700:	e3400002 	movt	r0, #2
   20704:	e30e1e1c 	movw	r1, #60956	; 0xee1c
   20708:	e3401002 	movt	r1, #2
   2070c:	e3a02052 	mov	r2, #82	; 0x52
   20710:	ebffd8a6 	bl	169b0 <uspi_assertion_failed>
		USBMouseDevice (pDevice, pParent);
   20714:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   20718:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   2071c:	eb00276e 	bl	2a4dc <USBMouseDevice>
		pResult = (TUSBDevice *) pDevice;
   20720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   20724:	e50b3010 	str	r3, [fp, #-16]
   20728:	ea000032 	b	207f8 <GetDevice+0x2e8>
	}
	else if (StringCompare (pName, "ven424-ec00") == 0)
   2072c:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   20730:	e30e1edc 	movw	r1, #61148	; 0xeedc
   20734:	e3401002 	movt	r1, #2
   20738:	eb0012ec 	bl	252f0 <StringCompare>
   2073c:	e1a03000 	mov	r3, r0
   20740:	e3530000 	cmp	r3, #0
   20744:	1a000012 	bne	20794 <GetDevice+0x284>
	{
		TSMSC951xDevice *pDevice = (TSMSC951xDevice *) malloc (sizeof (TSMSC951xDevice));
   20748:	e3a00050 	mov	r0, #80	; 0x50
   2074c:	ebffd8c1 	bl	16a58 <malloc>
   20750:	e1a03000 	mov	r3, r0
   20754:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		assert (pDevice != 0);
   20758:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2075c:	e3530000 	cmp	r3, #0
   20760:	1a000005 	bne	2077c <GetDevice+0x26c>
   20764:	e30e0ea8 	movw	r0, #61096	; 0xeea8
   20768:	e3400002 	movt	r0, #2
   2076c:	e30e1e1c 	movw	r1, #60956	; 0xee1c
   20770:	e3401002 	movt	r1, #2
   20774:	e3a02059 	mov	r2, #89	; 0x59
   20778:	ebffd88c 	bl	169b0 <uspi_assertion_failed>
		SMSC951xDevice (pDevice, pParent);
   2077c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   20780:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   20784:	eb000d59 	bl	23cf0 <SMSC951xDevice>
		pResult = (TUSBDevice *) pDevice;
   20788:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2078c:	e50b3010 	str	r3, [fp, #-16]
   20790:	ea000018 	b	207f8 <GetDevice+0x2e8>
	}
    else if (StringCompare (pName, "int3-0-0") == 0)
   20794:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   20798:	e30e1ee8 	movw	r1, #61160	; 0xeee8
   2079c:	e3401002 	movt	r1, #2
   207a0:	eb0012d2 	bl	252f0 <StringCompare>
   207a4:	e1a03000 	mov	r3, r0
   207a8:	e3530000 	cmp	r3, #0
   207ac:	1a000011 	bne	207f8 <GetDevice+0x2e8>
    {
        TUSBGamePadDevice *pDevice = (TUSBGamePadDevice *) malloc (sizeof (TUSBGamePadDevice));
   207b0:	e3a000d0 	mov	r0, #208	; 0xd0
   207b4:	ebffd8a7 	bl	16a58 <malloc>
   207b8:	e1a03000 	mov	r3, r0
   207bc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
        assert (pDevice != 0);
   207c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   207c4:	e3530000 	cmp	r3, #0
   207c8:	1a000005 	bne	207e4 <GetDevice+0x2d4>
   207cc:	e30e0ea8 	movw	r0, #61096	; 0xeea8
   207d0:	e3400002 	movt	r0, #2
   207d4:	e30e1e1c 	movw	r1, #60956	; 0xee1c
   207d8:	e3401002 	movt	r1, #2
   207dc:	e3a02060 	mov	r2, #96	; 0x60
   207e0:	ebffd872 	bl	169b0 <uspi_assertion_failed>
        USBGamePadDevice (pDevice, pParent);
   207e4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   207e8:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   207ec:	eb002aaf 	bl	2b2b0 <USBGamePadDevice>
        pResult = (TUSBDevice *) pDevice;
   207f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   207f4:	e50b3010 	str	r3, [fp, #-16]
    }
	// new devices follow

	if (pResult != 0)
   207f8:	e51b3010 	ldr	r3, [fp, #-16]
   207fc:	e3530000 	cmp	r3, #0
   20800:	0a000008 	beq	20828 <GetDevice+0x318>
	{
		LogWrite ("usbdev", LOG_NOTICE, "Using device %s", StringGet (pName));
   20804:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   20808:	eb0011e1 	bl	24f94 <StringGet>
   2080c:	e1a03000 	mov	r3, r0
   20810:	e30e0ef4 	movw	r0, #61172	; 0xeef4
   20814:	e3400002 	movt	r0, #2
   20818:	e3a01003 	mov	r1, #3
   2081c:	e30e2efc 	movw	r2, #61180	; 0xeefc
   20820:	e3402002 	movt	r2, #2
   20824:	ebffd849 	bl	16950 <LogWrite>
	}
	
	_String (pName);
   20828:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   2082c:	eb0011b3 	bl	24f00 <_String>
	free (pName);
   20830:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   20834:	ebffd89d 	bl	16ab0 <free>
	
	return pResult;
   20838:	e51b4010 	ldr	r4, [fp, #-16]
   2083c:	e1a03005 	mov	r3, r5
   20840:	e3000510 	movw	r0, #1296	; 0x510
   20844:	e3400002 	movt	r0, #2
   20848:	e1a01003 	mov	r1, r3
   2084c:	ebffd404 	bl	15864 <__cyg_profile_func_exit>
   20850:	e1a03004 	mov	r3, r4
}
   20854:	e1a00003 	mov	r0, r3
   20858:	e24bd00c 	sub	sp, fp, #12
   2085c:	e8bd8830 	pop	{r4, r5, fp, pc}

00020860 <USBEndpoint>:
//
#include <uspi/usbendpoint.h>
#include <uspi/assert.h>

void USBEndpoint (TUSBEndpoint *pThis, TUSBDevice *pDevice)
{
   20860:	e92d4810 	push	{r4, fp, lr}
   20864:	e28db008 	add	fp, sp, #8
   20868:	e24dd00c 	sub	sp, sp, #12
   2086c:	e1a0400e 	mov	r4, lr
   20870:	e50b0010 	str	r0, [fp, #-16]
   20874:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   20878:	e1a03004 	mov	r3, r4
   2087c:	e3000860 	movw	r0, #2144	; 0x860
   20880:	e3400002 	movt	r0, #2
   20884:	e1a01003 	mov	r1, r3
   20888:	ebffd3a3 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2088c:	e51b3010 	ldr	r3, [fp, #-16]
   20890:	e3530000 	cmp	r3, #0
   20894:	1a000005 	bne	208b0 <USBEndpoint+0x50>
   20898:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   2089c:	e3400002 	movt	r0, #2
   208a0:	e30e1f18 	movw	r1, #61208	; 0xef18
   208a4:	e3401002 	movt	r1, #2
   208a8:	e3a02019 	mov	r2, #25
   208ac:	ebffd83f 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pDevice = pDevice;
   208b0:	e51b3010 	ldr	r3, [fp, #-16]
   208b4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   208b8:	e5832000 	str	r2, [r3]
	pThis->m_ucNumber = 0;
   208bc:	e51b3010 	ldr	r3, [fp, #-16]
   208c0:	e3a02000 	mov	r2, #0
   208c4:	e5c32004 	strb	r2, [r3, #4]
	pThis->m_Type = EndpointTypeControl;
   208c8:	e51b3010 	ldr	r3, [fp, #-16]
   208cc:	e3a02000 	mov	r2, #0
   208d0:	e5c32005 	strb	r2, [r3, #5]
	pThis->m_bDirectionIn = FALSE;
   208d4:	e51b3010 	ldr	r3, [fp, #-16]
   208d8:	e3a02000 	mov	r2, #0
   208dc:	e5832008 	str	r2, [r3, #8]
	pThis->m_nMaxPacketSize = USB_DEFAULT_MAX_PACKET_SIZE;
   208e0:	e51b3010 	ldr	r3, [fp, #-16]
   208e4:	e3a02008 	mov	r2, #8
   208e8:	e583200c 	str	r2, [r3, #12]
	pThis->m_nInterval = 1;
   208ec:	e51b3010 	ldr	r3, [fp, #-16]
   208f0:	e3a02001 	mov	r2, #1
   208f4:	e5832010 	str	r2, [r3, #16]
	pThis->m_NextPID = USBPIDSetup;
   208f8:	e51b3010 	ldr	r3, [fp, #-16]
   208fc:	e3a02000 	mov	r2, #0
   20900:	e5c32014 	strb	r2, [r3, #20]

	assert (pThis->m_pDevice != 0);
   20904:	e51b3010 	ldr	r3, [fp, #-16]
   20908:	e5933000 	ldr	r3, [r3]
   2090c:	e3530000 	cmp	r3, #0
   20910:	1a000005 	bne	2092c <USBEndpoint+0xcc>
   20914:	e30e0f78 	movw	r0, #61304	; 0xef78
   20918:	e3400002 	movt	r0, #2
   2091c:	e30e1f18 	movw	r1, #61208	; 0xef18
   20920:	e3401002 	movt	r1, #2
   20924:	e3a02022 	mov	r2, #34	; 0x22
   20928:	ebffd820 	bl	169b0 <uspi_assertion_failed>
   2092c:	e1a03004 	mov	r3, r4
   20930:	e3000860 	movw	r0, #2144	; 0x860
   20934:	e3400002 	movt	r0, #2
   20938:	e1a01003 	mov	r1, r3
   2093c:	ebffd3c8 	bl	15864 <__cyg_profile_func_exit>
}
   20940:	e24bd008 	sub	sp, fp, #8
   20944:	e8bd8810 	pop	{r4, fp, pc}

00020948 <USBEndpoint2>:

void USBEndpoint2 (TUSBEndpoint *pThis, TUSBDevice *pDevice, const TUSBEndpointDescriptor *pDesc)
{
   20948:	e92d4830 	push	{r4, r5, fp, lr}
   2094c:	e28db00c 	add	fp, sp, #12
   20950:	e24dd018 	sub	sp, sp, #24
   20954:	e1a0500e 	mov	r5, lr
   20958:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2095c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   20960:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   20964:	e1a03005 	mov	r3, r5
   20968:	e3000948 	movw	r0, #2376	; 0x948
   2096c:	e3400002 	movt	r0, #2
   20970:	e1a01003 	mov	r1, r3
   20974:	ebffd368 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   20978:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2097c:	e3530000 	cmp	r3, #0
   20980:	1a000005 	bne	2099c <USBEndpoint2+0x54>
   20984:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   20988:	e3400002 	movt	r0, #2
   2098c:	e30e1f18 	movw	r1, #61208	; 0xef18
   20990:	e3401002 	movt	r1, #2
   20994:	e3a02027 	mov	r2, #39	; 0x27
   20998:	ebffd804 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pDevice = pDevice;
   2099c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   209a0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   209a4:	e5832000 	str	r2, [r3]
	pThis->m_nInterval = 1;
   209a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   209ac:	e3a02001 	mov	r2, #1
   209b0:	e5832010 	str	r2, [r3, #16]

	assert (pThis->m_pDevice != 0);
   209b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   209b8:	e5933000 	ldr	r3, [r3]
   209bc:	e3530000 	cmp	r3, #0
   209c0:	1a000005 	bne	209dc <USBEndpoint2+0x94>
   209c4:	e30e0f78 	movw	r0, #61304	; 0xef78
   209c8:	e3400002 	movt	r0, #2
   209cc:	e30e1f18 	movw	r1, #61208	; 0xef18
   209d0:	e3401002 	movt	r1, #2
   209d4:	e3a0202b 	mov	r2, #43	; 0x2b
   209d8:	ebffd7f4 	bl	169b0 <uspi_assertion_failed>

	assert (pDesc != 0);
   209dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   209e0:	e3530000 	cmp	r3, #0
   209e4:	1a000005 	bne	20a00 <USBEndpoint2+0xb8>
   209e8:	e30e0f90 	movw	r0, #61328	; 0xef90
   209ec:	e3400002 	movt	r0, #2
   209f0:	e30e1f18 	movw	r1, #61208	; 0xef18
   209f4:	e3401002 	movt	r1, #2
   209f8:	e3a0202d 	mov	r2, #45	; 0x2d
   209fc:	ebffd7eb 	bl	169b0 <uspi_assertion_failed>
	assert (pDesc->bLength == sizeof *pDesc);
   20a00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   20a04:	e5d33000 	ldrb	r3, [r3]
   20a08:	e3530007 	cmp	r3, #7
   20a0c:	0a000005 	beq	20a28 <USBEndpoint2+0xe0>
   20a10:	e30e0f9c 	movw	r0, #61340	; 0xef9c
   20a14:	e3400002 	movt	r0, #2
   20a18:	e30e1f18 	movw	r1, #61208	; 0xef18
   20a1c:	e3401002 	movt	r1, #2
   20a20:	e3a0202e 	mov	r2, #46	; 0x2e
   20a24:	ebffd7e1 	bl	169b0 <uspi_assertion_failed>
	assert (pDesc->bDescriptorType == DESCRIPTOR_ENDPOINT);
   20a28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   20a2c:	e5d33001 	ldrb	r3, [r3, #1]
   20a30:	e3530005 	cmp	r3, #5
   20a34:	0a000005 	beq	20a50 <USBEndpoint2+0x108>
   20a38:	e30e0fbc 	movw	r0, #61372	; 0xefbc
   20a3c:	e3400002 	movt	r0, #2
   20a40:	e30e1f18 	movw	r1, #61208	; 0xef18
   20a44:	e3401002 	movt	r1, #2
   20a48:	e3a0202f 	mov	r2, #47	; 0x2f
   20a4c:	ebffd7d7 	bl	169b0 <uspi_assertion_failed>

	switch (pDesc->bmAttributes & 0x03)
   20a50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   20a54:	e5d33003 	ldrb	r3, [r3, #3]
   20a58:	e2033003 	and	r3, r3, #3
   20a5c:	e3530002 	cmp	r3, #2
   20a60:	0a000002 	beq	20a70 <USBEndpoint2+0x128>
   20a64:	e3530003 	cmp	r3, #3
   20a68:	0a000007 	beq	20a8c <USBEndpoint2+0x144>
   20a6c:	ea00000d 	b	20aa8 <USBEndpoint2+0x160>
	{
	case 2:
		pThis->m_Type = EndpointTypeBulk;
   20a70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20a74:	e3a02001 	mov	r2, #1
   20a78:	e5c32005 	strb	r2, [r3, #5]
		pThis->m_NextPID = USBPIDData0;
   20a7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20a80:	e3a02001 	mov	r2, #1
   20a84:	e5c32014 	strb	r2, [r3, #20]
		break;
   20a88:	ea00000e 	b	20ac8 <USBEndpoint2+0x180>

	case 3:
		pThis->m_Type = EndpointTypeInterrupt;
   20a8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20a90:	e3a02002 	mov	r2, #2
   20a94:	e5c32005 	strb	r2, [r3, #5]
		pThis->m_NextPID = USBPIDData0;
   20a98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20a9c:	e3a02001 	mov	r2, #1
   20aa0:	e5c32014 	strb	r2, [r3, #20]
		break;
   20aa4:	ea000007 	b	20ac8 <USBEndpoint2+0x180>

	default:
		assert (0);	// endpoint configuration should be checked by function driver
   20aa8:	e30e0fec 	movw	r0, #61420	; 0xefec
   20aac:	e3400002 	movt	r0, #2
   20ab0:	e30e1f18 	movw	r1, #61208	; 0xef18
   20ab4:	e3401002 	movt	r1, #2
   20ab8:	e3a0203e 	mov	r2, #62	; 0x3e
   20abc:	ebffd7bb 	bl	169b0 <uspi_assertion_failed>
   20ac0:	e3a04000 	mov	r4, #0
		return;
   20ac4:	ea000040 	b	20bcc <USBEndpoint2+0x284>
	}
	
	pThis->m_ucNumber       = pDesc->bEndpointAddress & 0x0F;
   20ac8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   20acc:	e5d33002 	ldrb	r3, [r3, #2]
   20ad0:	e203300f 	and	r3, r3, #15
   20ad4:	e6ef2073 	uxtb	r2, r3
   20ad8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20adc:	e5c32004 	strb	r2, [r3, #4]
	pThis->m_bDirectionIn   = pDesc->bEndpointAddress & 0x80 ? TRUE : FALSE;
   20ae0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   20ae4:	e5d33002 	ldrb	r3, [r3, #2]
   20ae8:	e6ef3073 	uxtb	r3, r3
   20aec:	e1a033a3 	lsr	r3, r3, #7
   20af0:	e6ef3073 	uxtb	r3, r3
   20af4:	e1a02003 	mov	r2, r3
   20af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20afc:	e5832008 	str	r2, [r3, #8]
	pThis->m_nMaxPacketSize = pDesc->wMaxPacketSize;
   20b00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   20b04:	e1d330b4 	ldrh	r3, [r3, #4]
   20b08:	e6ff3073 	uxth	r3, r3
   20b0c:	e1a02003 	mov	r2, r3
   20b10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20b14:	e583200c 	str	r2, [r3, #12]
	
	if (pThis->m_Type == EndpointTypeInterrupt)
   20b18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20b1c:	e5d33005 	ldrb	r3, [r3, #5]
   20b20:	e3530002 	cmp	r3, #2
   20b24:	1a000027 	bne	20bc8 <USBEndpoint2+0x280>
	{
		u8 ucInterval = pDesc->bInterval;
   20b28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   20b2c:	e5d33006 	ldrb	r3, [r3, #6]
   20b30:	e54b300d 	strb	r3, [fp, #-13]
		if (ucInterval < 1)
   20b34:	e55b300d 	ldrb	r3, [fp, #-13]
   20b38:	e3530000 	cmp	r3, #0
   20b3c:	1a000001 	bne	20b48 <USBEndpoint2+0x200>
		{
			ucInterval = 1;
   20b40:	e3a03001 	mov	r3, #1
   20b44:	e54b300d 	strb	r3, [fp, #-13]
		}

		// see USB 2.0 spec chapter 9.6.6
		if (USBDeviceGetSpeed (pThis->m_pDevice) != USBSpeedHigh)
   20b48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20b4c:	e5933000 	ldr	r3, [r3]
   20b50:	e1a00003 	mov	r0, r3
   20b54:	ebfffca8 	bl	1fdfc <USBDeviceGetSpeed>
   20b58:	e1a03000 	mov	r3, r0
   20b5c:	e3530002 	cmp	r3, #2
   20b60:	0a000003 	beq	20b74 <USBEndpoint2+0x22c>
		{
			pThis->m_nInterval = ucInterval;
   20b64:	e55b200d 	ldrb	r2, [fp, #-13]
   20b68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20b6c:	e5832010 	str	r2, [r3, #16]
   20b70:	ea000014 	b	20bc8 <USBEndpoint2+0x280>
		}
		else
		{
			if (ucInterval > 16)
   20b74:	e55b300d 	ldrb	r3, [fp, #-13]
   20b78:	e3530010 	cmp	r3, #16
   20b7c:	9a000001 	bls	20b88 <USBEndpoint2+0x240>
			{
				ucInterval = 16;
   20b80:	e3a03010 	mov	r3, #16
   20b84:	e54b300d 	strb	r3, [fp, #-13]
			}

			unsigned nValue = 1 << (ucInterval - 1);
   20b88:	e55b300d 	ldrb	r3, [fp, #-13]
   20b8c:	e2433001 	sub	r3, r3, #1
   20b90:	e3a02001 	mov	r2, #1
   20b94:	e1a03312 	lsl	r3, r2, r3
   20b98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

			pThis->m_nInterval = nValue / 8;
   20b9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20ba0:	e1a021a3 	lsr	r2, r3, #3
   20ba4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20ba8:	e5832010 	str	r2, [r3, #16]

			if (pThis->m_nInterval < 1)
   20bac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20bb0:	e5933010 	ldr	r3, [r3, #16]
   20bb4:	e3530000 	cmp	r3, #0
   20bb8:	1a000002 	bne	20bc8 <USBEndpoint2+0x280>
			{
				pThis->m_nInterval = 1;
   20bbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20bc0:	e3a02001 	mov	r2, #1
   20bc4:	e5832010 	str	r2, [r3, #16]
   20bc8:	e3a04001 	mov	r4, #1
   20bcc:	e1a03005 	mov	r3, r5
   20bd0:	e3000948 	movw	r0, #2376	; 0x948
   20bd4:	e3400002 	movt	r0, #2
   20bd8:	e1a01003 	mov	r1, r3
   20bdc:	ebffd320 	bl	15864 <__cyg_profile_func_exit>
   20be0:	e3540001 	cmp	r4, #1
			}
		}
	}
}
   20be4:	e24bd00c 	sub	sp, fp, #12
   20be8:	e8bd8830 	pop	{r4, r5, fp, pc}

00020bec <USBEndpointCopy>:

void USBEndpointCopy (TUSBEndpoint *pThis, TUSBEndpoint *pEndpoint, TUSBDevice *pDevice)
{
   20bec:	e92d4810 	push	{r4, fp, lr}
   20bf0:	e28db008 	add	fp, sp, #8
   20bf4:	e24dd014 	sub	sp, sp, #20
   20bf8:	e1a0400e 	mov	r4, lr
   20bfc:	e50b0010 	str	r0, [fp, #-16]
   20c00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   20c04:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   20c08:	e1a03004 	mov	r3, r4
   20c0c:	e3000bec 	movw	r0, #3052	; 0xbec
   20c10:	e3400002 	movt	r0, #2
   20c14:	e1a01003 	mov	r1, r3
   20c18:	ebffd2bf 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   20c1c:	e51b3010 	ldr	r3, [fp, #-16]
   20c20:	e3530000 	cmp	r3, #0
   20c24:	1a000005 	bne	20c40 <USBEndpointCopy+0x54>
   20c28:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   20c2c:	e3400002 	movt	r0, #2
   20c30:	e30e1f18 	movw	r1, #61208	; 0xef18
   20c34:	e3401002 	movt	r1, #2
   20c38:	e3a02068 	mov	r2, #104	; 0x68
   20c3c:	ebffd75b 	bl	169b0 <uspi_assertion_failed>

	assert (pEndpoint != 0);
   20c40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20c44:	e3530000 	cmp	r3, #0
   20c48:	1a000005 	bne	20c64 <USBEndpointCopy+0x78>
   20c4c:	e30e0ff0 	movw	r0, #61424	; 0xeff0
   20c50:	e3400002 	movt	r0, #2
   20c54:	e30e1f18 	movw	r1, #61208	; 0xef18
   20c58:	e3401002 	movt	r1, #2
   20c5c:	e3a0206a 	mov	r2, #106	; 0x6a
   20c60:	ebffd752 	bl	169b0 <uspi_assertion_failed>

	pThis->m_pDevice = pDevice;
   20c64:	e51b3010 	ldr	r3, [fp, #-16]
   20c68:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   20c6c:	e5832000 	str	r2, [r3]
	assert (pThis->m_pDevice != 0);
   20c70:	e51b3010 	ldr	r3, [fp, #-16]
   20c74:	e5933000 	ldr	r3, [r3]
   20c78:	e3530000 	cmp	r3, #0
   20c7c:	1a000005 	bne	20c98 <USBEndpointCopy+0xac>
   20c80:	e30e0f78 	movw	r0, #61304	; 0xef78
   20c84:	e3400002 	movt	r0, #2
   20c88:	e30e1f18 	movw	r1, #61208	; 0xef18
   20c8c:	e3401002 	movt	r1, #2
   20c90:	e3a0206d 	mov	r2, #109	; 0x6d
   20c94:	ebffd745 	bl	169b0 <uspi_assertion_failed>

	pThis->m_ucNumber	 = pEndpoint->m_ucNumber;
   20c98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20c9c:	e5d32004 	ldrb	r2, [r3, #4]
   20ca0:	e51b3010 	ldr	r3, [fp, #-16]
   20ca4:	e5c32004 	strb	r2, [r3, #4]
	pThis->m_Type		 = pEndpoint->m_Type;
   20ca8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20cac:	e5d32005 	ldrb	r2, [r3, #5]
   20cb0:	e51b3010 	ldr	r3, [fp, #-16]
   20cb4:	e5c32005 	strb	r2, [r3, #5]
	pThis->m_bDirectionIn	 = pEndpoint->m_bDirectionIn;
   20cb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20cbc:	e5932008 	ldr	r2, [r3, #8]
   20cc0:	e51b3010 	ldr	r3, [fp, #-16]
   20cc4:	e5832008 	str	r2, [r3, #8]
	pThis->m_nMaxPacketSize  = pEndpoint->m_nMaxPacketSize;
   20cc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20ccc:	e593200c 	ldr	r2, [r3, #12]
   20cd0:	e51b3010 	ldr	r3, [fp, #-16]
   20cd4:	e583200c 	str	r2, [r3, #12]
	pThis->m_nInterval       = pEndpoint->m_nInterval;
   20cd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20cdc:	e5932010 	ldr	r2, [r3, #16]
   20ce0:	e51b3010 	ldr	r3, [fp, #-16]
   20ce4:	e5832010 	str	r2, [r3, #16]
	pThis->m_NextPID	 = pEndpoint->m_NextPID;
   20ce8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20cec:	e5d32014 	ldrb	r2, [r3, #20]
   20cf0:	e51b3010 	ldr	r3, [fp, #-16]
   20cf4:	e5c32014 	strb	r2, [r3, #20]
   20cf8:	e1a03004 	mov	r3, r4
   20cfc:	e3000bec 	movw	r0, #3052	; 0xbec
   20d00:	e3400002 	movt	r0, #2
   20d04:	e1a01003 	mov	r1, r3
   20d08:	ebffd2d5 	bl	15864 <__cyg_profile_func_exit>
}
   20d0c:	e24bd008 	sub	sp, fp, #8
   20d10:	e8bd8810 	pop	{r4, fp, pc}

00020d14 <_USBEndpoint>:

void _USBEndpoint (TUSBEndpoint *pThis)
{
   20d14:	e92d4810 	push	{r4, fp, lr}
   20d18:	e28db008 	add	fp, sp, #8
   20d1c:	e24dd00c 	sub	sp, sp, #12
   20d20:	e1a0400e 	mov	r4, lr
   20d24:	e50b0010 	str	r0, [fp, #-16]
   20d28:	e1a03004 	mov	r3, r4
   20d2c:	e3000d14 	movw	r0, #3348	; 0xd14
   20d30:	e3400002 	movt	r0, #2
   20d34:	e1a01003 	mov	r1, r3
   20d38:	ebffd277 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   20d3c:	e51b3010 	ldr	r3, [fp, #-16]
   20d40:	e3530000 	cmp	r3, #0
   20d44:	1a000005 	bne	20d60 <_USBEndpoint+0x4c>
   20d48:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   20d4c:	e3400002 	movt	r0, #2
   20d50:	e30e1f18 	movw	r1, #61208	; 0xef18
   20d54:	e3401002 	movt	r1, #2
   20d58:	e3a02079 	mov	r2, #121	; 0x79
   20d5c:	ebffd713 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pDevice = 0;
   20d60:	e51b3010 	ldr	r3, [fp, #-16]
   20d64:	e3a02000 	mov	r2, #0
   20d68:	e5832000 	str	r2, [r3]
   20d6c:	e1a03004 	mov	r3, r4
   20d70:	e3000d14 	movw	r0, #3348	; 0xd14
   20d74:	e3400002 	movt	r0, #2
   20d78:	e1a01003 	mov	r1, r3
   20d7c:	ebffd2b8 	bl	15864 <__cyg_profile_func_exit>
}
   20d80:	e24bd008 	sub	sp, fp, #8
   20d84:	e8bd8810 	pop	{r4, fp, pc}

00020d88 <USBEndpointGetDevice>:

TUSBDevice *USBEndpointGetDevice (TUSBEndpoint *pThis)
{
   20d88:	e92d4830 	push	{r4, r5, fp, lr}
   20d8c:	e28db00c 	add	fp, sp, #12
   20d90:	e24dd008 	sub	sp, sp, #8
   20d94:	e1a0500e 	mov	r5, lr
   20d98:	e50b0010 	str	r0, [fp, #-16]
   20d9c:	e1a03005 	mov	r3, r5
   20da0:	e3000d88 	movw	r0, #3464	; 0xd88
   20da4:	e3400002 	movt	r0, #2
   20da8:	e1a01003 	mov	r1, r3
   20dac:	ebffd25a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   20db0:	e51b3010 	ldr	r3, [fp, #-16]
   20db4:	e3530000 	cmp	r3, #0
   20db8:	1a000005 	bne	20dd4 <USBEndpointGetDevice+0x4c>
   20dbc:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   20dc0:	e3400002 	movt	r0, #2
   20dc4:	e30e1f18 	movw	r1, #61208	; 0xef18
   20dc8:	e3401002 	movt	r1, #2
   20dcc:	e3a0207f 	mov	r2, #127	; 0x7f
   20dd0:	ebffd6f6 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pDevice != 0);
   20dd4:	e51b3010 	ldr	r3, [fp, #-16]
   20dd8:	e5933000 	ldr	r3, [r3]
   20ddc:	e3530000 	cmp	r3, #0
   20de0:	1a000005 	bne	20dfc <USBEndpointGetDevice+0x74>
   20de4:	e30e0f78 	movw	r0, #61304	; 0xef78
   20de8:	e3400002 	movt	r0, #2
   20dec:	e30e1f18 	movw	r1, #61208	; 0xef18
   20df0:	e3401002 	movt	r1, #2
   20df4:	e3a02080 	mov	r2, #128	; 0x80
   20df8:	ebffd6ec 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_pDevice;
   20dfc:	e51b3010 	ldr	r3, [fp, #-16]
   20e00:	e5934000 	ldr	r4, [r3]
   20e04:	e1a03005 	mov	r3, r5
   20e08:	e3000d88 	movw	r0, #3464	; 0xd88
   20e0c:	e3400002 	movt	r0, #2
   20e10:	e1a01003 	mov	r1, r3
   20e14:	ebffd292 	bl	15864 <__cyg_profile_func_exit>
   20e18:	e1a03004 	mov	r3, r4
}
   20e1c:	e1a00003 	mov	r0, r3
   20e20:	e24bd00c 	sub	sp, fp, #12
   20e24:	e8bd8830 	pop	{r4, r5, fp, pc}

00020e28 <USBEndpointGetNumber>:

u8 USBEndpointGetNumber (TUSBEndpoint *pThis)
{
   20e28:	e92d4830 	push	{r4, r5, fp, lr}
   20e2c:	e28db00c 	add	fp, sp, #12
   20e30:	e24dd008 	sub	sp, sp, #8
   20e34:	e1a0500e 	mov	r5, lr
   20e38:	e50b0010 	str	r0, [fp, #-16]
   20e3c:	e1a03005 	mov	r3, r5
   20e40:	e3000e28 	movw	r0, #3624	; 0xe28
   20e44:	e3400002 	movt	r0, #2
   20e48:	e1a01003 	mov	r1, r3
   20e4c:	ebffd232 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   20e50:	e51b3010 	ldr	r3, [fp, #-16]
   20e54:	e3530000 	cmp	r3, #0
   20e58:	1a000005 	bne	20e74 <USBEndpointGetNumber+0x4c>
   20e5c:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   20e60:	e3400002 	movt	r0, #2
   20e64:	e30e1f18 	movw	r1, #61208	; 0xef18
   20e68:	e3401002 	movt	r1, #2
   20e6c:	e3a02086 	mov	r2, #134	; 0x86
   20e70:	ebffd6ce 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_ucNumber;
   20e74:	e51b3010 	ldr	r3, [fp, #-16]
   20e78:	e5d34004 	ldrb	r4, [r3, #4]
   20e7c:	e1a03005 	mov	r3, r5
   20e80:	e3000e28 	movw	r0, #3624	; 0xe28
   20e84:	e3400002 	movt	r0, #2
   20e88:	e1a01003 	mov	r1, r3
   20e8c:	ebffd274 	bl	15864 <__cyg_profile_func_exit>
   20e90:	e1a03004 	mov	r3, r4
}
   20e94:	e1a00003 	mov	r0, r3
   20e98:	e24bd00c 	sub	sp, fp, #12
   20e9c:	e8bd8830 	pop	{r4, r5, fp, pc}

00020ea0 <USBEndpointGetType>:

TEndpointType USBEndpointGetType (TUSBEndpoint *pThis)
{
   20ea0:	e92d4830 	push	{r4, r5, fp, lr}
   20ea4:	e28db00c 	add	fp, sp, #12
   20ea8:	e24dd008 	sub	sp, sp, #8
   20eac:	e1a0500e 	mov	r5, lr
   20eb0:	e50b0010 	str	r0, [fp, #-16]
   20eb4:	e1a03005 	mov	r3, r5
   20eb8:	e3000ea0 	movw	r0, #3744	; 0xea0
   20ebc:	e3400002 	movt	r0, #2
   20ec0:	e1a01003 	mov	r1, r3
   20ec4:	ebffd214 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   20ec8:	e51b3010 	ldr	r3, [fp, #-16]
   20ecc:	e3530000 	cmp	r3, #0
   20ed0:	1a000005 	bne	20eec <USBEndpointGetType+0x4c>
   20ed4:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   20ed8:	e3400002 	movt	r0, #2
   20edc:	e30e1f18 	movw	r1, #61208	; 0xef18
   20ee0:	e3401002 	movt	r1, #2
   20ee4:	e3a0208c 	mov	r2, #140	; 0x8c
   20ee8:	ebffd6b0 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_Type;
   20eec:	e51b3010 	ldr	r3, [fp, #-16]
   20ef0:	e5d34005 	ldrb	r4, [r3, #5]
   20ef4:	e1a03005 	mov	r3, r5
   20ef8:	e3000ea0 	movw	r0, #3744	; 0xea0
   20efc:	e3400002 	movt	r0, #2
   20f00:	e1a01003 	mov	r1, r3
   20f04:	ebffd256 	bl	15864 <__cyg_profile_func_exit>
   20f08:	e1a03004 	mov	r3, r4
}
   20f0c:	e1a00003 	mov	r0, r3
   20f10:	e24bd00c 	sub	sp, fp, #12
   20f14:	e8bd8830 	pop	{r4, r5, fp, pc}

00020f18 <USBEndpointIsDirectionIn>:

boolean USBEndpointIsDirectionIn (TUSBEndpoint *pThis)
{
   20f18:	e92d4830 	push	{r4, r5, fp, lr}
   20f1c:	e28db00c 	add	fp, sp, #12
   20f20:	e24dd008 	sub	sp, sp, #8
   20f24:	e1a0500e 	mov	r5, lr
   20f28:	e50b0010 	str	r0, [fp, #-16]
   20f2c:	e1a03005 	mov	r3, r5
   20f30:	e3000f18 	movw	r0, #3864	; 0xf18
   20f34:	e3400002 	movt	r0, #2
   20f38:	e1a01003 	mov	r1, r3
   20f3c:	ebffd1f6 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   20f40:	e51b3010 	ldr	r3, [fp, #-16]
   20f44:	e3530000 	cmp	r3, #0
   20f48:	1a000005 	bne	20f64 <USBEndpointIsDirectionIn+0x4c>
   20f4c:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   20f50:	e3400002 	movt	r0, #2
   20f54:	e30e1f18 	movw	r1, #61208	; 0xef18
   20f58:	e3401002 	movt	r1, #2
   20f5c:	e3a02092 	mov	r2, #146	; 0x92
   20f60:	ebffd692 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_bDirectionIn;
   20f64:	e51b3010 	ldr	r3, [fp, #-16]
   20f68:	e5934008 	ldr	r4, [r3, #8]
   20f6c:	e1a03005 	mov	r3, r5
   20f70:	e3000f18 	movw	r0, #3864	; 0xf18
   20f74:	e3400002 	movt	r0, #2
   20f78:	e1a01003 	mov	r1, r3
   20f7c:	ebffd238 	bl	15864 <__cyg_profile_func_exit>
   20f80:	e1a03004 	mov	r3, r4
}
   20f84:	e1a00003 	mov	r0, r3
   20f88:	e24bd00c 	sub	sp, fp, #12
   20f8c:	e8bd8830 	pop	{r4, r5, fp, pc}

00020f90 <USBEndpointSetMaxPacketSize>:

void USBEndpointSetMaxPacketSize (TUSBEndpoint *pThis, u32 nMaxPacketSize)
{
   20f90:	e92d4810 	push	{r4, fp, lr}
   20f94:	e28db008 	add	fp, sp, #8
   20f98:	e24dd00c 	sub	sp, sp, #12
   20f9c:	e1a0400e 	mov	r4, lr
   20fa0:	e50b0010 	str	r0, [fp, #-16]
   20fa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   20fa8:	e1a03004 	mov	r3, r4
   20fac:	e3000f90 	movw	r0, #3984	; 0xf90
   20fb0:	e3400002 	movt	r0, #2
   20fb4:	e1a01003 	mov	r1, r3
   20fb8:	ebffd1d7 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   20fbc:	e51b3010 	ldr	r3, [fp, #-16]
   20fc0:	e3530000 	cmp	r3, #0
   20fc4:	1a000005 	bne	20fe0 <USBEndpointSetMaxPacketSize+0x50>
   20fc8:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   20fcc:	e3400002 	movt	r0, #2
   20fd0:	e30e1f18 	movw	r1, #61208	; 0xef18
   20fd4:	e3401002 	movt	r1, #2
   20fd8:	e3a02098 	mov	r2, #152	; 0x98
   20fdc:	ebffd673 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nMaxPacketSize = nMaxPacketSize;
   20fe0:	e51b3010 	ldr	r3, [fp, #-16]
   20fe4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20fe8:	e583200c 	str	r2, [r3, #12]
   20fec:	e1a03004 	mov	r3, r4
   20ff0:	e3000f90 	movw	r0, #3984	; 0xf90
   20ff4:	e3400002 	movt	r0, #2
   20ff8:	e1a01003 	mov	r1, r3
   20ffc:	ebffd218 	bl	15864 <__cyg_profile_func_exit>
}
   21000:	e24bd008 	sub	sp, fp, #8
   21004:	e8bd8810 	pop	{r4, fp, pc}

00021008 <USBEndpointGetMaxPacketSize>:

u32 USBEndpointGetMaxPacketSize (TUSBEndpoint *pThis)
{
   21008:	e92d4830 	push	{r4, r5, fp, lr}
   2100c:	e28db00c 	add	fp, sp, #12
   21010:	e24dd008 	sub	sp, sp, #8
   21014:	e1a0500e 	mov	r5, lr
   21018:	e50b0010 	str	r0, [fp, #-16]
   2101c:	e1a03005 	mov	r3, r5
   21020:	e3010008 	movw	r0, #4104	; 0x1008
   21024:	e3400002 	movt	r0, #2
   21028:	e1a01003 	mov	r1, r3
   2102c:	ebffd1ba 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21030:	e51b3010 	ldr	r3, [fp, #-16]
   21034:	e3530000 	cmp	r3, #0
   21038:	1a000005 	bne	21054 <USBEndpointGetMaxPacketSize+0x4c>
   2103c:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   21040:	e3400002 	movt	r0, #2
   21044:	e30e1f18 	movw	r1, #61208	; 0xef18
   21048:	e3401002 	movt	r1, #2
   2104c:	e3a0209e 	mov	r2, #158	; 0x9e
   21050:	ebffd656 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nMaxPacketSize;
   21054:	e51b3010 	ldr	r3, [fp, #-16]
   21058:	e593400c 	ldr	r4, [r3, #12]
   2105c:	e1a03005 	mov	r3, r5
   21060:	e3010008 	movw	r0, #4104	; 0x1008
   21064:	e3400002 	movt	r0, #2
   21068:	e1a01003 	mov	r1, r3
   2106c:	ebffd1fc 	bl	15864 <__cyg_profile_func_exit>
   21070:	e1a03004 	mov	r3, r4
}
   21074:	e1a00003 	mov	r0, r3
   21078:	e24bd00c 	sub	sp, fp, #12
   2107c:	e8bd8830 	pop	{r4, r5, fp, pc}

00021080 <USBEndpointGetInterval>:

unsigned USBEndpointGetInterval (TUSBEndpoint *pThis)
{
   21080:	e92d4830 	push	{r4, r5, fp, lr}
   21084:	e28db00c 	add	fp, sp, #12
   21088:	e24dd008 	sub	sp, sp, #8
   2108c:	e1a0500e 	mov	r5, lr
   21090:	e50b0010 	str	r0, [fp, #-16]
   21094:	e1a03005 	mov	r3, r5
   21098:	e3010080 	movw	r0, #4224	; 0x1080
   2109c:	e3400002 	movt	r0, #2
   210a0:	e1a01003 	mov	r1, r3
   210a4:	ebffd19c 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   210a8:	e51b3010 	ldr	r3, [fp, #-16]
   210ac:	e3530000 	cmp	r3, #0
   210b0:	1a000005 	bne	210cc <USBEndpointGetInterval+0x4c>
   210b4:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   210b8:	e3400002 	movt	r0, #2
   210bc:	e30e1f18 	movw	r1, #61208	; 0xef18
   210c0:	e3401002 	movt	r1, #2
   210c4:	e3a020a4 	mov	r2, #164	; 0xa4
   210c8:	ebffd638 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_Type == EndpointTypeInterrupt);
   210cc:	e51b3010 	ldr	r3, [fp, #-16]
   210d0:	e5d33005 	ldrb	r3, [r3, #5]
   210d4:	e3530002 	cmp	r3, #2
   210d8:	0a000005 	beq	210f4 <USBEndpointGetInterval+0x74>
   210dc:	e30f0000 	movw	r0, #61440	; 0xf000
   210e0:	e3400002 	movt	r0, #2
   210e4:	e30e1f18 	movw	r1, #61208	; 0xef18
   210e8:	e3401002 	movt	r1, #2
   210ec:	e3a020a5 	mov	r2, #165	; 0xa5
   210f0:	ebffd62e 	bl	169b0 <uspi_assertion_failed>

	return pThis->m_nInterval;
   210f4:	e51b3010 	ldr	r3, [fp, #-16]
   210f8:	e5934010 	ldr	r4, [r3, #16]
   210fc:	e1a03005 	mov	r3, r5
   21100:	e3010080 	movw	r0, #4224	; 0x1080
   21104:	e3400002 	movt	r0, #2
   21108:	e1a01003 	mov	r1, r3
   2110c:	ebffd1d4 	bl	15864 <__cyg_profile_func_exit>
   21110:	e1a03004 	mov	r3, r4
}
   21114:	e1a00003 	mov	r0, r3
   21118:	e24bd00c 	sub	sp, fp, #12
   2111c:	e8bd8830 	pop	{r4, r5, fp, pc}

00021120 <USBEndpointGetNextPID>:

TUSBPID USBEndpointGetNextPID (TUSBEndpoint *pThis, boolean bStatusStage)
{
   21120:	e92d4830 	push	{r4, r5, fp, lr}
   21124:	e28db00c 	add	fp, sp, #12
   21128:	e24dd008 	sub	sp, sp, #8
   2112c:	e1a0500e 	mov	r5, lr
   21130:	e50b0010 	str	r0, [fp, #-16]
   21134:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   21138:	e1a03005 	mov	r3, r5
   2113c:	e3010120 	movw	r0, #4384	; 0x1120
   21140:	e3400002 	movt	r0, #2
   21144:	e1a01003 	mov	r1, r3
   21148:	ebffd173 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2114c:	e51b3010 	ldr	r3, [fp, #-16]
   21150:	e3530000 	cmp	r3, #0
   21154:	1a000005 	bne	21170 <USBEndpointGetNextPID+0x50>
   21158:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   2115c:	e3400002 	movt	r0, #2
   21160:	e30e1f18 	movw	r1, #61208	; 0xef18
   21164:	e3401002 	movt	r1, #2
   21168:	e3a020ac 	mov	r2, #172	; 0xac
   2116c:	ebffd60f 	bl	169b0 <uspi_assertion_failed>
	if (bStatusStage)
   21170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21174:	e3530000 	cmp	r3, #0
   21178:	0a00000b 	beq	211ac <USBEndpointGetNextPID+0x8c>
	{
		assert (pThis->m_Type == EndpointTypeControl);
   2117c:	e51b3010 	ldr	r3, [fp, #-16]
   21180:	e5d33005 	ldrb	r3, [r3, #5]
   21184:	e3530000 	cmp	r3, #0
   21188:	0a000005 	beq	211a4 <USBEndpointGetNextPID+0x84>
   2118c:	e30f0028 	movw	r0, #61480	; 0xf028
   21190:	e3400002 	movt	r0, #2
   21194:	e30e1f18 	movw	r1, #61208	; 0xef18
   21198:	e3401002 	movt	r1, #2
   2119c:	e3a020af 	mov	r2, #175	; 0xaf
   211a0:	ebffd602 	bl	169b0 <uspi_assertion_failed>

		return USBPIDData1;
   211a4:	e3a04002 	mov	r4, #2
   211a8:	ea000001 	b	211b4 <USBEndpointGetNextPID+0x94>
	}
	
	return pThis->m_NextPID;
   211ac:	e51b3010 	ldr	r3, [fp, #-16]
   211b0:	e5d34014 	ldrb	r4, [r3, #20]
   211b4:	e1a03005 	mov	r3, r5
   211b8:	e3010120 	movw	r0, #4384	; 0x1120
   211bc:	e3400002 	movt	r0, #2
   211c0:	e1a01003 	mov	r1, r3
   211c4:	ebffd1a6 	bl	15864 <__cyg_profile_func_exit>
   211c8:	e1a03004 	mov	r3, r4
}
   211cc:	e1a00003 	mov	r0, r3
   211d0:	e24bd00c 	sub	sp, fp, #12
   211d4:	e8bd8830 	pop	{r4, r5, fp, pc}

000211d8 <USBEndpointSkipPID>:

void USBEndpointSkipPID (TUSBEndpoint *pThis, unsigned nPackets, boolean bStatusStage)
{
   211d8:	e92d4810 	push	{r4, fp, lr}
   211dc:	e28db008 	add	fp, sp, #8
   211e0:	e24dd014 	sub	sp, sp, #20
   211e4:	e1a0400e 	mov	r4, lr
   211e8:	e50b0010 	str	r0, [fp, #-16]
   211ec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   211f0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   211f4:	e1a03004 	mov	r3, r4
   211f8:	e30101d8 	movw	r0, #4568	; 0x11d8
   211fc:	e3400002 	movt	r0, #2
   21200:	e1a01003 	mov	r1, r3
   21204:	ebffd144 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21208:	e51b3010 	ldr	r3, [fp, #-16]
   2120c:	e3530000 	cmp	r3, #0
   21210:	1a000005 	bne	2122c <USBEndpointSkipPID+0x54>
   21214:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   21218:	e3400002 	movt	r0, #2
   2121c:	e30e1f18 	movw	r1, #61208	; 0xef18
   21220:	e3401002 	movt	r1, #2
   21224:	e3a020b9 	mov	r2, #185	; 0xb9
   21228:	ebffd5e0 	bl	169b0 <uspi_assertion_failed>
	assert (   pThis->m_Type == EndpointTypeControl
   2122c:	e51b3010 	ldr	r3, [fp, #-16]
   21230:	e5d33005 	ldrb	r3, [r3, #5]
   21234:	e3530000 	cmp	r3, #0
   21238:	0a00000d 	beq	21274 <USBEndpointSkipPID+0x9c>
   2123c:	e51b3010 	ldr	r3, [fp, #-16]
   21240:	e5d33005 	ldrb	r3, [r3, #5]
   21244:	e3530001 	cmp	r3, #1
   21248:	0a000009 	beq	21274 <USBEndpointSkipPID+0x9c>
   2124c:	e51b3010 	ldr	r3, [fp, #-16]
   21250:	e5d33005 	ldrb	r3, [r3, #5]
   21254:	e3530002 	cmp	r3, #2
   21258:	0a000005 	beq	21274 <USBEndpointSkipPID+0x9c>
   2125c:	e30f0050 	movw	r0, #61520	; 0xf050
   21260:	e3400002 	movt	r0, #2
   21264:	e30e1f18 	movw	r1, #61208	; 0xef18
   21268:	e3401002 	movt	r1, #2
   2126c:	e3a020bc 	mov	r2, #188	; 0xbc
   21270:	ebffd5ce 	bl	169b0 <uspi_assertion_failed>
		|| pThis->m_Type == EndpointTypeBulk
		|| pThis->m_Type == EndpointTypeInterrupt);
	
	if (!bStatusStage)
   21274:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21278:	e3530000 	cmp	r3, #0
   2127c:	1a000025 	bne	21318 <USBEndpointSkipPID+0x140>
	{
		switch (pThis->m_NextPID)
   21280:	e51b3010 	ldr	r3, [fp, #-16]
   21284:	e5d33014 	ldrb	r3, [r3, #20]
   21288:	e3530001 	cmp	r3, #1
   2128c:	0a000007 	beq	212b0 <USBEndpointSkipPID+0xd8>
   21290:	e3530002 	cmp	r3, #2
   21294:	0a00000e 	beq	212d4 <USBEndpointSkipPID+0xfc>
   21298:	e3530000 	cmp	r3, #0
   2129c:	1a000015 	bne	212f8 <USBEndpointSkipPID+0x120>
		{
		case USBPIDSetup:
			pThis->m_NextPID = USBPIDData1;
   212a0:	e51b3010 	ldr	r3, [fp, #-16]
   212a4:	e3a02002 	mov	r2, #2
   212a8:	e5c32014 	strb	r2, [r3, #20]
			break;
   212ac:	ea000018 	b	21314 <USBEndpointSkipPID+0x13c>

		case USBPIDData0:
			if (nPackets & 1)
   212b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   212b4:	e2033001 	and	r3, r3, #1
   212b8:	e3530000 	cmp	r3, #0
   212bc:	0a000003 	beq	212d0 <USBEndpointSkipPID+0xf8>
			{
				pThis->m_NextPID = USBPIDData1;
   212c0:	e51b3010 	ldr	r3, [fp, #-16]
   212c4:	e3a02002 	mov	r2, #2
   212c8:	e5c32014 	strb	r2, [r3, #20]
			}
			break;
   212cc:	ea000010 	b	21314 <USBEndpointSkipPID+0x13c>
   212d0:	ea00000f 	b	21314 <USBEndpointSkipPID+0x13c>
			
		case USBPIDData1:
			if (nPackets & 1)
   212d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   212d8:	e2033001 	and	r3, r3, #1
   212dc:	e3530000 	cmp	r3, #0
   212e0:	0a000003 	beq	212f4 <USBEndpointSkipPID+0x11c>
			{
				pThis->m_NextPID = USBPIDData0;
   212e4:	e51b3010 	ldr	r3, [fp, #-16]
   212e8:	e3a02001 	mov	r2, #1
   212ec:	e5c32014 	strb	r2, [r3, #20]
			}
			break;
   212f0:	ea000007 	b	21314 <USBEndpointSkipPID+0x13c>
   212f4:	ea000006 	b	21314 <USBEndpointSkipPID+0x13c>

		default:
			assert (0);
   212f8:	e30e0fec 	movw	r0, #61420	; 0xefec
   212fc:	e3400002 	movt	r0, #2
   21300:	e30e1f18 	movw	r1, #61208	; 0xef18
   21304:	e3401002 	movt	r1, #2
   21308:	e3a020d5 	mov	r2, #213	; 0xd5
   2130c:	ebffd5a7 	bl	169b0 <uspi_assertion_failed>
			break;
   21310:	e1a00000 	nop			; (mov r0, r0)
   21314:	ea00000c 	b	2134c <USBEndpointSkipPID+0x174>
		}
	}
	else
	{
		assert (pThis->m_Type == EndpointTypeControl);
   21318:	e51b3010 	ldr	r3, [fp, #-16]
   2131c:	e5d33005 	ldrb	r3, [r3, #5]
   21320:	e3530000 	cmp	r3, #0
   21324:	0a000005 	beq	21340 <USBEndpointSkipPID+0x168>
   21328:	e30f0028 	movw	r0, #61480	; 0xf028
   2132c:	e3400002 	movt	r0, #2
   21330:	e30e1f18 	movw	r1, #61208	; 0xef18
   21334:	e3401002 	movt	r1, #2
   21338:	e3a020db 	mov	r2, #219	; 0xdb
   2133c:	ebffd59b 	bl	169b0 <uspi_assertion_failed>

		pThis->m_NextPID = USBPIDSetup;
   21340:	e51b3010 	ldr	r3, [fp, #-16]
   21344:	e3a02000 	mov	r2, #0
   21348:	e5c32014 	strb	r2, [r3, #20]
   2134c:	e1a03004 	mov	r3, r4
   21350:	e30101d8 	movw	r0, #4568	; 0x11d8
   21354:	e3400002 	movt	r0, #2
   21358:	e1a01003 	mov	r1, r3
   2135c:	ebffd140 	bl	15864 <__cyg_profile_func_exit>
	}
}
   21360:	e24bd008 	sub	sp, fp, #8
   21364:	e8bd8810 	pop	{r4, fp, pc}

00021368 <USBEndpointResetPID>:

void USBEndpointResetPID (TUSBEndpoint *pThis)
{
   21368:	e92d4810 	push	{r4, fp, lr}
   2136c:	e28db008 	add	fp, sp, #8
   21370:	e24dd00c 	sub	sp, sp, #12
   21374:	e1a0400e 	mov	r4, lr
   21378:	e50b0010 	str	r0, [fp, #-16]
   2137c:	e1a03004 	mov	r3, r4
   21380:	e3010368 	movw	r0, #4968	; 0x1368
   21384:	e3400002 	movt	r0, #2
   21388:	e1a01003 	mov	r1, r3
   2138c:	ebffd0e2 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21390:	e51b3010 	ldr	r3, [fp, #-16]
   21394:	e3530000 	cmp	r3, #0
   21398:	1a000005 	bne	213b4 <USBEndpointResetPID+0x4c>
   2139c:	e30e0f0c 	movw	r0, #61196	; 0xef0c
   213a0:	e3400002 	movt	r0, #2
   213a4:	e30e1f18 	movw	r1, #61208	; 0xef18
   213a8:	e3401002 	movt	r1, #2
   213ac:	e3a020e3 	mov	r2, #227	; 0xe3
   213b0:	ebffd57e 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_Type == EndpointTypeBulk);
   213b4:	e51b3010 	ldr	r3, [fp, #-16]
   213b8:	e5d33005 	ldrb	r3, [r3, #5]
   213bc:	e3530001 	cmp	r3, #1
   213c0:	0a000005 	beq	213dc <USBEndpointResetPID+0x74>
   213c4:	e30f00c4 	movw	r0, #61636	; 0xf0c4
   213c8:	e3400002 	movt	r0, #2
   213cc:	e30e1f18 	movw	r1, #61208	; 0xef18
   213d0:	e3401002 	movt	r1, #2
   213d4:	e3a020e4 	mov	r2, #228	; 0xe4
   213d8:	ebffd574 	bl	169b0 <uspi_assertion_failed>

	pThis->m_NextPID = USBPIDData0;
   213dc:	e51b3010 	ldr	r3, [fp, #-16]
   213e0:	e3a02001 	mov	r2, #1
   213e4:	e5c32014 	strb	r2, [r3, #20]
   213e8:	e1a03004 	mov	r3, r4
   213ec:	e3010368 	movw	r0, #4968	; 0x1368
   213f0:	e3400002 	movt	r0, #2
   213f4:	e1a01003 	mov	r1, r3
   213f8:	ebffd119 	bl	15864 <__cyg_profile_func_exit>
}
   213fc:	e24bd008 	sub	sp, fp, #8
   21400:	e8bd8810 	pop	{r4, fp, pc}

00021404 <USBRequest>:
//
#include <uspi/usbrequest.h>
#include <uspi/assert.h>

void USBRequest (TUSBRequest *pThis, TUSBEndpoint *pEndpoint, void *pBuffer, u32 nBufLen, TSetupData *pSetupData)
{
   21404:	e92d4810 	push	{r4, fp, lr}
   21408:	e28db008 	add	fp, sp, #8
   2140c:	e24dd014 	sub	sp, sp, #20
   21410:	e1a0400e 	mov	r4, lr
   21414:	e50b0010 	str	r0, [fp, #-16]
   21418:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2141c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   21420:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   21424:	e1a03004 	mov	r3, r4
   21428:	e3010404 	movw	r0, #5124	; 0x1404
   2142c:	e3400002 	movt	r0, #2
   21430:	e1a01003 	mov	r1, r3
   21434:	ebffd0b8 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21438:	e51b3010 	ldr	r3, [fp, #-16]
   2143c:	e3530000 	cmp	r3, #0
   21440:	1a000005 	bne	2145c <USBRequest+0x58>
   21444:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   21448:	e3400002 	movt	r0, #2
   2144c:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21450:	e3401002 	movt	r1, #2
   21454:	e3a02019 	mov	r2, #25
   21458:	ebffd554 	bl	169b0 <uspi_assertion_failed>

	pThis->m_pEndpoint = pEndpoint;
   2145c:	e51b3010 	ldr	r3, [fp, #-16]
   21460:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   21464:	e5832000 	str	r2, [r3]
	pThis->m_pSetupData = pSetupData;
   21468:	e51b3010 	ldr	r3, [fp, #-16]
   2146c:	e59b2004 	ldr	r2, [fp, #4]
   21470:	e5832004 	str	r2, [r3, #4]
	pThis->m_pBuffer = pBuffer;
   21474:	e51b3010 	ldr	r3, [fp, #-16]
   21478:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2147c:	e5832008 	str	r2, [r3, #8]
	pThis->m_nBufLen = nBufLen;
   21480:	e51b3010 	ldr	r3, [fp, #-16]
   21484:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   21488:	e583200c 	str	r2, [r3, #12]
	pThis->m_bStatus = 0;
   2148c:	e51b3010 	ldr	r3, [fp, #-16]
   21490:	e3a02000 	mov	r2, #0
   21494:	e5832010 	str	r2, [r3, #16]
	pThis->m_nResultLen = 0;
   21498:	e51b3010 	ldr	r3, [fp, #-16]
   2149c:	e3a02000 	mov	r2, #0
   214a0:	e5832014 	str	r2, [r3, #20]
	pThis->m_pCompletionRoutine = 0;
   214a4:	e51b3010 	ldr	r3, [fp, #-16]
   214a8:	e3a02000 	mov	r2, #0
   214ac:	e5832018 	str	r2, [r3, #24]
	pThis->m_pCompletionParam = 0;
   214b0:	e51b3010 	ldr	r3, [fp, #-16]
   214b4:	e3a02000 	mov	r2, #0
   214b8:	e583201c 	str	r2, [r3, #28]
	pThis->m_pCompletionContext = 0;
   214bc:	e51b3010 	ldr	r3, [fp, #-16]
   214c0:	e3a02000 	mov	r2, #0
   214c4:	e5832020 	str	r2, [r3, #32]

	assert (pThis->m_pEndpoint != 0);
   214c8:	e51b3010 	ldr	r3, [fp, #-16]
   214cc:	e5933000 	ldr	r3, [r3]
   214d0:	e3530000 	cmp	r3, #0
   214d4:	1a000005 	bne	214f0 <USBRequest+0xec>
   214d8:	e30f0154 	movw	r0, #61780	; 0xf154
   214dc:	e3400002 	movt	r0, #2
   214e0:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   214e4:	e3401002 	movt	r1, #2
   214e8:	e3a02025 	mov	r2, #37	; 0x25
   214ec:	ebffd52f 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pBuffer != 0 || pThis->m_nBufLen == 0);
   214f0:	e51b3010 	ldr	r3, [fp, #-16]
   214f4:	e5933008 	ldr	r3, [r3, #8]
   214f8:	e3530000 	cmp	r3, #0
   214fc:	1a000009 	bne	21528 <USBRequest+0x124>
   21500:	e51b3010 	ldr	r3, [fp, #-16]
   21504:	e593300c 	ldr	r3, [r3, #12]
   21508:	e3530000 	cmp	r3, #0
   2150c:	0a000005 	beq	21528 <USBRequest+0x124>
   21510:	e30f016c 	movw	r0, #61804	; 0xf16c
   21514:	e3400002 	movt	r0, #2
   21518:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   2151c:	e3401002 	movt	r1, #2
   21520:	e3a02026 	mov	r2, #38	; 0x26
   21524:	ebffd521 	bl	169b0 <uspi_assertion_failed>
   21528:	e1a03004 	mov	r3, r4
   2152c:	e3010404 	movw	r0, #5124	; 0x1404
   21530:	e3400002 	movt	r0, #2
   21534:	e1a01003 	mov	r1, r3
   21538:	ebffd0c9 	bl	15864 <__cyg_profile_func_exit>
}
   2153c:	e24bd008 	sub	sp, fp, #8
   21540:	e8bd8810 	pop	{r4, fp, pc}

00021544 <_USBRequest>:

void _USBRequest (TUSBRequest *pThis)
{
   21544:	e92d4810 	push	{r4, fp, lr}
   21548:	e28db008 	add	fp, sp, #8
   2154c:	e24dd00c 	sub	sp, sp, #12
   21550:	e1a0400e 	mov	r4, lr
   21554:	e50b0010 	str	r0, [fp, #-16]
   21558:	e1a03004 	mov	r3, r4
   2155c:	e3010544 	movw	r0, #5444	; 0x1544
   21560:	e3400002 	movt	r0, #2
   21564:	e1a01003 	mov	r1, r3
   21568:	ebffd06b 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2156c:	e51b3010 	ldr	r3, [fp, #-16]
   21570:	e3530000 	cmp	r3, #0
   21574:	1a000005 	bne	21590 <_USBRequest+0x4c>
   21578:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   2157c:	e3400002 	movt	r0, #2
   21580:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21584:	e3401002 	movt	r1, #2
   21588:	e3a0202b 	mov	r2, #43	; 0x2b
   2158c:	ebffd507 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pEndpoint = 0;
   21590:	e51b3010 	ldr	r3, [fp, #-16]
   21594:	e3a02000 	mov	r2, #0
   21598:	e5832000 	str	r2, [r3]
	pThis->m_pSetupData = 0;
   2159c:	e51b3010 	ldr	r3, [fp, #-16]
   215a0:	e3a02000 	mov	r2, #0
   215a4:	e5832004 	str	r2, [r3, #4]
	pThis->m_pBuffer = 0;
   215a8:	e51b3010 	ldr	r3, [fp, #-16]
   215ac:	e3a02000 	mov	r2, #0
   215b0:	e5832008 	str	r2, [r3, #8]
	pThis->m_pCompletionRoutine = 0;
   215b4:	e51b3010 	ldr	r3, [fp, #-16]
   215b8:	e3a02000 	mov	r2, #0
   215bc:	e5832018 	str	r2, [r3, #24]
   215c0:	e1a03004 	mov	r3, r4
   215c4:	e3010544 	movw	r0, #5444	; 0x1544
   215c8:	e3400002 	movt	r0, #2
   215cc:	e1a01003 	mov	r1, r3
   215d0:	ebffd0a3 	bl	15864 <__cyg_profile_func_exit>
}
   215d4:	e24bd008 	sub	sp, fp, #8
   215d8:	e8bd8810 	pop	{r4, fp, pc}

000215dc <USBRequestGetEndpoint>:

TUSBEndpoint *USBRequestGetEndpoint (TUSBRequest *pThis)
{
   215dc:	e92d4830 	push	{r4, r5, fp, lr}
   215e0:	e28db00c 	add	fp, sp, #12
   215e4:	e24dd008 	sub	sp, sp, #8
   215e8:	e1a0500e 	mov	r5, lr
   215ec:	e50b0010 	str	r0, [fp, #-16]
   215f0:	e1a03005 	mov	r3, r5
   215f4:	e30105dc 	movw	r0, #5596	; 0x15dc
   215f8:	e3400002 	movt	r0, #2
   215fc:	e1a01003 	mov	r1, r3
   21600:	ebffd045 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21604:	e51b3010 	ldr	r3, [fp, #-16]
   21608:	e3530000 	cmp	r3, #0
   2160c:	1a000005 	bne	21628 <USBRequestGetEndpoint+0x4c>
   21610:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   21614:	e3400002 	movt	r0, #2
   21618:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   2161c:	e3401002 	movt	r1, #2
   21620:	e3a02034 	mov	r2, #52	; 0x34
   21624:	ebffd4e1 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pEndpoint != 0);
   21628:	e51b3010 	ldr	r3, [fp, #-16]
   2162c:	e5933000 	ldr	r3, [r3]
   21630:	e3530000 	cmp	r3, #0
   21634:	1a000005 	bne	21650 <USBRequestGetEndpoint+0x74>
   21638:	e30f0154 	movw	r0, #61780	; 0xf154
   2163c:	e3400002 	movt	r0, #2
   21640:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21644:	e3401002 	movt	r1, #2
   21648:	e3a02035 	mov	r2, #53	; 0x35
   2164c:	ebffd4d7 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_pEndpoint;
   21650:	e51b3010 	ldr	r3, [fp, #-16]
   21654:	e5934000 	ldr	r4, [r3]
   21658:	e1a03005 	mov	r3, r5
   2165c:	e30105dc 	movw	r0, #5596	; 0x15dc
   21660:	e3400002 	movt	r0, #2
   21664:	e1a01003 	mov	r1, r3
   21668:	ebffd07d 	bl	15864 <__cyg_profile_func_exit>
   2166c:	e1a03004 	mov	r3, r4
}
   21670:	e1a00003 	mov	r0, r3
   21674:	e24bd00c 	sub	sp, fp, #12
   21678:	e8bd8830 	pop	{r4, r5, fp, pc}

0002167c <USBRequestSetStatus>:

void USBRequestSetStatus (TUSBRequest *pThis, int bStatus)
{
   2167c:	e92d4810 	push	{r4, fp, lr}
   21680:	e28db008 	add	fp, sp, #8
   21684:	e24dd00c 	sub	sp, sp, #12
   21688:	e1a0400e 	mov	r4, lr
   2168c:	e50b0010 	str	r0, [fp, #-16]
   21690:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   21694:	e1a03004 	mov	r3, r4
   21698:	e301067c 	movw	r0, #5756	; 0x167c
   2169c:	e3400002 	movt	r0, #2
   216a0:	e1a01003 	mov	r1, r3
   216a4:	ebffd01c 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   216a8:	e51b3010 	ldr	r3, [fp, #-16]
   216ac:	e3530000 	cmp	r3, #0
   216b0:	1a000005 	bne	216cc <USBRequestSetStatus+0x50>
   216b4:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   216b8:	e3400002 	movt	r0, #2
   216bc:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   216c0:	e3401002 	movt	r1, #2
   216c4:	e3a0203b 	mov	r2, #59	; 0x3b
   216c8:	ebffd4b8 	bl	169b0 <uspi_assertion_failed>
	pThis->m_bStatus = bStatus;
   216cc:	e51b3010 	ldr	r3, [fp, #-16]
   216d0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   216d4:	e5832010 	str	r2, [r3, #16]
   216d8:	e1a03004 	mov	r3, r4
   216dc:	e301067c 	movw	r0, #5756	; 0x167c
   216e0:	e3400002 	movt	r0, #2
   216e4:	e1a01003 	mov	r1, r3
   216e8:	ebffd05d 	bl	15864 <__cyg_profile_func_exit>
}
   216ec:	e24bd008 	sub	sp, fp, #8
   216f0:	e8bd8810 	pop	{r4, fp, pc}

000216f4 <USBRequestSetResultLen>:

void USBRequestSetResultLen (TUSBRequest *pThis, u32 nLength)
{
   216f4:	e92d4810 	push	{r4, fp, lr}
   216f8:	e28db008 	add	fp, sp, #8
   216fc:	e24dd00c 	sub	sp, sp, #12
   21700:	e1a0400e 	mov	r4, lr
   21704:	e50b0010 	str	r0, [fp, #-16]
   21708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2170c:	e1a03004 	mov	r3, r4
   21710:	e30106f4 	movw	r0, #5876	; 0x16f4
   21714:	e3400002 	movt	r0, #2
   21718:	e1a01003 	mov	r1, r3
   2171c:	ebffcffe 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21720:	e51b3010 	ldr	r3, [fp, #-16]
   21724:	e3530000 	cmp	r3, #0
   21728:	1a000005 	bne	21744 <USBRequestSetResultLen+0x50>
   2172c:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   21730:	e3400002 	movt	r0, #2
   21734:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21738:	e3401002 	movt	r1, #2
   2173c:	e3a02041 	mov	r2, #65	; 0x41
   21740:	ebffd49a 	bl	169b0 <uspi_assertion_failed>
	pThis->m_nResultLen = nLength;
   21744:	e51b3010 	ldr	r3, [fp, #-16]
   21748:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2174c:	e5832014 	str	r2, [r3, #20]
   21750:	e1a03004 	mov	r3, r4
   21754:	e30106f4 	movw	r0, #5876	; 0x16f4
   21758:	e3400002 	movt	r0, #2
   2175c:	e1a01003 	mov	r1, r3
   21760:	ebffd03f 	bl	15864 <__cyg_profile_func_exit>
}
   21764:	e24bd008 	sub	sp, fp, #8
   21768:	e8bd8810 	pop	{r4, fp, pc}

0002176c <USBRequestGetStatus>:

int USBRequestGetStatus (TUSBRequest *pThis)
{
   2176c:	e92d4830 	push	{r4, r5, fp, lr}
   21770:	e28db00c 	add	fp, sp, #12
   21774:	e24dd008 	sub	sp, sp, #8
   21778:	e1a0500e 	mov	r5, lr
   2177c:	e50b0010 	str	r0, [fp, #-16]
   21780:	e1a03005 	mov	r3, r5
   21784:	e301076c 	movw	r0, #5996	; 0x176c
   21788:	e3400002 	movt	r0, #2
   2178c:	e1a01003 	mov	r1, r3
   21790:	ebffcfe1 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21794:	e51b3010 	ldr	r3, [fp, #-16]
   21798:	e3530000 	cmp	r3, #0
   2179c:	1a000005 	bne	217b8 <USBRequestGetStatus+0x4c>
   217a0:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   217a4:	e3400002 	movt	r0, #2
   217a8:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   217ac:	e3401002 	movt	r1, #2
   217b0:	e3a02047 	mov	r2, #71	; 0x47
   217b4:	ebffd47d 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_bStatus;
   217b8:	e51b3010 	ldr	r3, [fp, #-16]
   217bc:	e5934010 	ldr	r4, [r3, #16]
   217c0:	e1a03005 	mov	r3, r5
   217c4:	e301076c 	movw	r0, #5996	; 0x176c
   217c8:	e3400002 	movt	r0, #2
   217cc:	e1a01003 	mov	r1, r3
   217d0:	ebffd023 	bl	15864 <__cyg_profile_func_exit>
   217d4:	e1a03004 	mov	r3, r4
}
   217d8:	e1a00003 	mov	r0, r3
   217dc:	e24bd00c 	sub	sp, fp, #12
   217e0:	e8bd8830 	pop	{r4, r5, fp, pc}

000217e4 <USBRequestGetResultLength>:

u32 USBRequestGetResultLength (TUSBRequest *pThis)
{
   217e4:	e92d4830 	push	{r4, r5, fp, lr}
   217e8:	e28db00c 	add	fp, sp, #12
   217ec:	e24dd008 	sub	sp, sp, #8
   217f0:	e1a0500e 	mov	r5, lr
   217f4:	e50b0010 	str	r0, [fp, #-16]
   217f8:	e1a03005 	mov	r3, r5
   217fc:	e30107e4 	movw	r0, #6116	; 0x17e4
   21800:	e3400002 	movt	r0, #2
   21804:	e1a01003 	mov	r1, r3
   21808:	ebffcfc3 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2180c:	e51b3010 	ldr	r3, [fp, #-16]
   21810:	e3530000 	cmp	r3, #0
   21814:	1a000005 	bne	21830 <USBRequestGetResultLength+0x4c>
   21818:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   2181c:	e3400002 	movt	r0, #2
   21820:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21824:	e3401002 	movt	r1, #2
   21828:	e3a0204d 	mov	r2, #77	; 0x4d
   2182c:	ebffd45f 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bStatus);
   21830:	e51b3010 	ldr	r3, [fp, #-16]
   21834:	e5933010 	ldr	r3, [r3, #16]
   21838:	e3530000 	cmp	r3, #0
   2183c:	1a000005 	bne	21858 <USBRequestGetResultLength+0x74>
   21840:	e30f019c 	movw	r0, #61852	; 0xf19c
   21844:	e3400002 	movt	r0, #2
   21848:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   2184c:	e3401002 	movt	r1, #2
   21850:	e3a0204e 	mov	r2, #78	; 0x4e
   21854:	ebffd455 	bl	169b0 <uspi_assertion_failed>

	return pThis->m_nResultLen;
   21858:	e51b3010 	ldr	r3, [fp, #-16]
   2185c:	e5934014 	ldr	r4, [r3, #20]
   21860:	e1a03005 	mov	r3, r5
   21864:	e30107e4 	movw	r0, #6116	; 0x17e4
   21868:	e3400002 	movt	r0, #2
   2186c:	e1a01003 	mov	r1, r3
   21870:	ebffcffb 	bl	15864 <__cyg_profile_func_exit>
   21874:	e1a03004 	mov	r3, r4
}
   21878:	e1a00003 	mov	r0, r3
   2187c:	e24bd00c 	sub	sp, fp, #12
   21880:	e8bd8830 	pop	{r4, r5, fp, pc}

00021884 <USBRequestGetSetupData>:

TSetupData *USBRequestGetSetupData (TUSBRequest *pThis)
{
   21884:	e92d4830 	push	{r4, r5, fp, lr}
   21888:	e28db00c 	add	fp, sp, #12
   2188c:	e24dd008 	sub	sp, sp, #8
   21890:	e1a0500e 	mov	r5, lr
   21894:	e50b0010 	str	r0, [fp, #-16]
   21898:	e1a03005 	mov	r3, r5
   2189c:	e3010884 	movw	r0, #6276	; 0x1884
   218a0:	e3400002 	movt	r0, #2
   218a4:	e1a01003 	mov	r1, r3
   218a8:	ebffcf9b 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   218ac:	e51b3010 	ldr	r3, [fp, #-16]
   218b0:	e3530000 	cmp	r3, #0
   218b4:	1a000005 	bne	218d0 <USBRequestGetSetupData+0x4c>
   218b8:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   218bc:	e3400002 	movt	r0, #2
   218c0:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   218c4:	e3401002 	movt	r1, #2
   218c8:	e3a02055 	mov	r2, #85	; 0x55
   218cc:	ebffd437 	bl	169b0 <uspi_assertion_failed>
	assert (USBEndpointGetType (pThis->m_pEndpoint) == EndpointTypeControl);
   218d0:	e51b3010 	ldr	r3, [fp, #-16]
   218d4:	e5933000 	ldr	r3, [r3]
   218d8:	e1a00003 	mov	r0, r3
   218dc:	ebfffd6f 	bl	20ea0 <USBEndpointGetType>
   218e0:	e1a03000 	mov	r3, r0
   218e4:	e3530000 	cmp	r3, #0
   218e8:	0a000005 	beq	21904 <USBRequestGetSetupData+0x80>
   218ec:	e30f01b0 	movw	r0, #61872	; 0xf1b0
   218f0:	e3400002 	movt	r0, #2
   218f4:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   218f8:	e3401002 	movt	r1, #2
   218fc:	e3a02056 	mov	r2, #86	; 0x56
   21900:	ebffd42a 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pSetupData != 0);
   21904:	e51b3010 	ldr	r3, [fp, #-16]
   21908:	e5933004 	ldr	r3, [r3, #4]
   2190c:	e3530000 	cmp	r3, #0
   21910:	1a000005 	bne	2192c <USBRequestGetSetupData+0xa8>
   21914:	e30f01f0 	movw	r0, #61936	; 0xf1f0
   21918:	e3400002 	movt	r0, #2
   2191c:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21920:	e3401002 	movt	r1, #2
   21924:	e3a02057 	mov	r2, #87	; 0x57
   21928:	ebffd420 	bl	169b0 <uspi_assertion_failed>

	return pThis->m_pSetupData;
   2192c:	e51b3010 	ldr	r3, [fp, #-16]
   21930:	e5934004 	ldr	r4, [r3, #4]
   21934:	e1a03005 	mov	r3, r5
   21938:	e3010884 	movw	r0, #6276	; 0x1884
   2193c:	e3400002 	movt	r0, #2
   21940:	e1a01003 	mov	r1, r3
   21944:	ebffcfc6 	bl	15864 <__cyg_profile_func_exit>
   21948:	e1a03004 	mov	r3, r4
}
   2194c:	e1a00003 	mov	r0, r3
   21950:	e24bd00c 	sub	sp, fp, #12
   21954:	e8bd8830 	pop	{r4, r5, fp, pc}

00021958 <USBRequestGetBuffer>:

void *USBRequestGetBuffer (TUSBRequest *pThis)
{
   21958:	e92d4830 	push	{r4, r5, fp, lr}
   2195c:	e28db00c 	add	fp, sp, #12
   21960:	e24dd008 	sub	sp, sp, #8
   21964:	e1a0500e 	mov	r5, lr
   21968:	e50b0010 	str	r0, [fp, #-16]
   2196c:	e1a03005 	mov	r3, r5
   21970:	e3010958 	movw	r0, #6488	; 0x1958
   21974:	e3400002 	movt	r0, #2
   21978:	e1a01003 	mov	r1, r3
   2197c:	ebffcf66 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21980:	e51b3010 	ldr	r3, [fp, #-16]
   21984:	e3530000 	cmp	r3, #0
   21988:	1a000005 	bne	219a4 <USBRequestGetBuffer+0x4c>
   2198c:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   21990:	e3400002 	movt	r0, #2
   21994:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21998:	e3401002 	movt	r1, #2
   2199c:	e3a0205e 	mov	r2, #94	; 0x5e
   219a0:	ebffd402 	bl	169b0 <uspi_assertion_failed>
	assert (   pThis->m_pBuffer != 0
   219a4:	e51b3010 	ldr	r3, [fp, #-16]
   219a8:	e5933008 	ldr	r3, [r3, #8]
   219ac:	e3530000 	cmp	r3, #0
   219b0:	1a000009 	bne	219dc <USBRequestGetBuffer+0x84>
   219b4:	e51b3010 	ldr	r3, [fp, #-16]
   219b8:	e593300c 	ldr	r3, [r3, #12]
   219bc:	e3530000 	cmp	r3, #0
   219c0:	0a000005 	beq	219dc <USBRequestGetBuffer+0x84>
   219c4:	e30f016c 	movw	r0, #61804	; 0xf16c
   219c8:	e3400002 	movt	r0, #2
   219cc:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   219d0:	e3401002 	movt	r1, #2
   219d4:	e3a02060 	mov	r2, #96	; 0x60
   219d8:	ebffd3f4 	bl	169b0 <uspi_assertion_failed>
		|| pThis->m_nBufLen == 0);

	return pThis->m_pBuffer;
   219dc:	e51b3010 	ldr	r3, [fp, #-16]
   219e0:	e5934008 	ldr	r4, [r3, #8]
   219e4:	e1a03005 	mov	r3, r5
   219e8:	e3010958 	movw	r0, #6488	; 0x1958
   219ec:	e3400002 	movt	r0, #2
   219f0:	e1a01003 	mov	r1, r3
   219f4:	ebffcf9a 	bl	15864 <__cyg_profile_func_exit>
   219f8:	e1a03004 	mov	r3, r4
}
   219fc:	e1a00003 	mov	r0, r3
   21a00:	e24bd00c 	sub	sp, fp, #12
   21a04:	e8bd8830 	pop	{r4, r5, fp, pc}

00021a08 <USBRequestGetBufLen>:

u32 USBRequestGetBufLen (TUSBRequest *pThis)
{
   21a08:	e92d4830 	push	{r4, r5, fp, lr}
   21a0c:	e28db00c 	add	fp, sp, #12
   21a10:	e24dd008 	sub	sp, sp, #8
   21a14:	e1a0500e 	mov	r5, lr
   21a18:	e50b0010 	str	r0, [fp, #-16]
   21a1c:	e1a03005 	mov	r3, r5
   21a20:	e3010a08 	movw	r0, #6664	; 0x1a08
   21a24:	e3400002 	movt	r0, #2
   21a28:	e1a01003 	mov	r1, r3
   21a2c:	ebffcf3a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21a30:	e51b3010 	ldr	r3, [fp, #-16]
   21a34:	e3530000 	cmp	r3, #0
   21a38:	1a000005 	bne	21a54 <USBRequestGetBufLen+0x4c>
   21a3c:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   21a40:	e3400002 	movt	r0, #2
   21a44:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21a48:	e3401002 	movt	r1, #2
   21a4c:	e3a02067 	mov	r2, #103	; 0x67
   21a50:	ebffd3d6 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_nBufLen;
   21a54:	e51b3010 	ldr	r3, [fp, #-16]
   21a58:	e593400c 	ldr	r4, [r3, #12]
   21a5c:	e1a03005 	mov	r3, r5
   21a60:	e3010a08 	movw	r0, #6664	; 0x1a08
   21a64:	e3400002 	movt	r0, #2
   21a68:	e1a01003 	mov	r1, r3
   21a6c:	ebffcf7c 	bl	15864 <__cyg_profile_func_exit>
   21a70:	e1a03004 	mov	r3, r4
}
   21a74:	e1a00003 	mov	r0, r3
   21a78:	e24bd00c 	sub	sp, fp, #12
   21a7c:	e8bd8830 	pop	{r4, r5, fp, pc}

00021a80 <USBRequestSetCompletionRoutine>:

void USBRequestSetCompletionRoutine (TUSBRequest *pThis, TURBCompletionRoutine *pRoutine, void *pParam, void *pContext)
{
   21a80:	e92d4810 	push	{r4, fp, lr}
   21a84:	e28db008 	add	fp, sp, #8
   21a88:	e24dd014 	sub	sp, sp, #20
   21a8c:	e1a0400e 	mov	r4, lr
   21a90:	e50b0010 	str	r0, [fp, #-16]
   21a94:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   21a98:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   21a9c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   21aa0:	e1a03004 	mov	r3, r4
   21aa4:	e3010a80 	movw	r0, #6784	; 0x1a80
   21aa8:	e3400002 	movt	r0, #2
   21aac:	e1a01003 	mov	r1, r3
   21ab0:	ebffcf19 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21ab4:	e51b3010 	ldr	r3, [fp, #-16]
   21ab8:	e3530000 	cmp	r3, #0
   21abc:	1a000005 	bne	21ad8 <USBRequestSetCompletionRoutine+0x58>
   21ac0:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   21ac4:	e3400002 	movt	r0, #2
   21ac8:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21acc:	e3401002 	movt	r1, #2
   21ad0:	e3a0206d 	mov	r2, #109	; 0x6d
   21ad4:	ebffd3b5 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pCompletionRoutine = pRoutine;
   21ad8:	e51b3010 	ldr	r3, [fp, #-16]
   21adc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   21ae0:	e5832018 	str	r2, [r3, #24]
	pThis->m_pCompletionParam   = pParam;
   21ae4:	e51b3010 	ldr	r3, [fp, #-16]
   21ae8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21aec:	e583201c 	str	r2, [r3, #28]
	pThis->m_pCompletionContext = pContext;
   21af0:	e51b3010 	ldr	r3, [fp, #-16]
   21af4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   21af8:	e5832020 	str	r2, [r3, #32]

	assert (pThis->m_pCompletionRoutine != 0);
   21afc:	e51b3010 	ldr	r3, [fp, #-16]
   21b00:	e5933018 	ldr	r3, [r3, #24]
   21b04:	e3530000 	cmp	r3, #0
   21b08:	1a000005 	bne	21b24 <USBRequestSetCompletionRoutine+0xa4>
   21b0c:	e30f020c 	movw	r0, #61964	; 0xf20c
   21b10:	e3400002 	movt	r0, #2
   21b14:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21b18:	e3401002 	movt	r1, #2
   21b1c:	e3a02072 	mov	r2, #114	; 0x72
   21b20:	ebffd3a2 	bl	169b0 <uspi_assertion_failed>
   21b24:	e1a03004 	mov	r3, r4
   21b28:	e3010a80 	movw	r0, #6784	; 0x1a80
   21b2c:	e3400002 	movt	r0, #2
   21b30:	e1a01003 	mov	r1, r3
   21b34:	ebffcf4a 	bl	15864 <__cyg_profile_func_exit>
}
   21b38:	e24bd008 	sub	sp, fp, #8
   21b3c:	e8bd8810 	pop	{r4, fp, pc}

00021b40 <USBRequestCallCompletionRoutine>:

void USBRequestCallCompletionRoutine (TUSBRequest *pThis)
{
   21b40:	e92d4810 	push	{r4, fp, lr}
   21b44:	e28db008 	add	fp, sp, #8
   21b48:	e24dd00c 	sub	sp, sp, #12
   21b4c:	e1a0400e 	mov	r4, lr
   21b50:	e50b0010 	str	r0, [fp, #-16]
   21b54:	e1a03004 	mov	r3, r4
   21b58:	e3010b40 	movw	r0, #6976	; 0x1b40
   21b5c:	e3400002 	movt	r0, #2
   21b60:	e1a01003 	mov	r1, r3
   21b64:	ebffceec 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21b68:	e51b3010 	ldr	r3, [fp, #-16]
   21b6c:	e3530000 	cmp	r3, #0
   21b70:	1a000005 	bne	21b8c <USBRequestCallCompletionRoutine+0x4c>
   21b74:	e30f00e8 	movw	r0, #61672	; 0xf0e8
   21b78:	e3400002 	movt	r0, #2
   21b7c:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21b80:	e3401002 	movt	r1, #2
   21b84:	e3a02077 	mov	r2, #119	; 0x77
   21b88:	ebffd388 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pCompletionRoutine != 0);
   21b8c:	e51b3010 	ldr	r3, [fp, #-16]
   21b90:	e5933018 	ldr	r3, [r3, #24]
   21b94:	e3530000 	cmp	r3, #0
   21b98:	1a000005 	bne	21bb4 <USBRequestCallCompletionRoutine+0x74>
   21b9c:	e30f020c 	movw	r0, #61964	; 0xf20c
   21ba0:	e3400002 	movt	r0, #2
   21ba4:	e30f10f4 	movw	r1, #61684	; 0xf0f4
   21ba8:	e3401002 	movt	r1, #2
   21bac:	e3a02078 	mov	r2, #120	; 0x78
   21bb0:	ebffd37e 	bl	169b0 <uspi_assertion_failed>
	
	(*pThis->m_pCompletionRoutine) (pThis, pThis->m_pCompletionParam, pThis->m_pCompletionContext);
   21bb4:	e51b3010 	ldr	r3, [fp, #-16]
   21bb8:	e5933018 	ldr	r3, [r3, #24]
   21bbc:	e51b2010 	ldr	r2, [fp, #-16]
   21bc0:	e592101c 	ldr	r1, [r2, #28]
   21bc4:	e51b2010 	ldr	r2, [fp, #-16]
   21bc8:	e5922020 	ldr	r2, [r2, #32]
   21bcc:	e51b0010 	ldr	r0, [fp, #-16]
   21bd0:	e12fff33 	blx	r3
   21bd4:	e1a03004 	mov	r3, r4
   21bd8:	e3010b40 	movw	r0, #6976	; 0x1b40
   21bdc:	e3400002 	movt	r0, #2
   21be0:	e1a01003 	mov	r1, r3
   21be4:	ebffcf1e 	bl	15864 <__cyg_profile_func_exit>
}
   21be8:	e24bd008 	sub	sp, fp, #8
   21bec:	e8bd8810 	pop	{r4, fp, pc}

00021bf0 <USBStandardHub>:
boolean USBStandardHubEnumeratePorts (TUSBStandardHub *pThis);

static const char FromHub[] = "usbhub";

void USBStandardHub (TUSBStandardHub *pThis, TUSBDevice *pDevice)
{
   21bf0:	e92d4810 	push	{r4, fp, lr}
   21bf4:	e28db008 	add	fp, sp, #8
   21bf8:	e24dd014 	sub	sp, sp, #20
   21bfc:	e1a0400e 	mov	r4, lr
   21c00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21c04:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   21c08:	e1a03004 	mov	r3, r4
   21c0c:	e3010bf0 	movw	r0, #7152	; 0x1bf0
   21c10:	e3400002 	movt	r0, #2
   21c14:	e1a01003 	mov	r1, r3
   21c18:	ebffcebf 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21c1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21c20:	e3530000 	cmp	r3, #0
   21c24:	1a000005 	bne	21c40 <USBStandardHub+0x50>
   21c28:	e30f0238 	movw	r0, #62008	; 0xf238
   21c2c:	e3400002 	movt	r0, #2
   21c30:	e30f1244 	movw	r1, #62020	; 0xf244
   21c34:	e3401002 	movt	r1, #2
   21c38:	e3a02020 	mov	r2, #32
   21c3c:	ebffd35b 	bl	169b0 <uspi_assertion_failed>

	USBDeviceCopy (&pThis->m_USBDevice, pDevice);
   21c40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21c44:	e1a00003 	mov	r0, r3
   21c48:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   21c4c:	ebfff457 	bl	1edb0 <USBDeviceCopy>
	pThis->m_USBDevice.Configure = USBStandardHubConfigure;
   21c50:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21c54:	e3013ed8 	movw	r3, #7896	; 0x1ed8
   21c58:	e3403002 	movt	r3, #2
   21c5c:	e5823000 	str	r3, [r2]
	
	pThis->m_pHubDesc = 0;
   21c60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21c64:	e3a02000 	mov	r2, #0
   21c68:	e5832038 	str	r2, [r3, #56]	; 0x38
	pThis->m_nPorts = 0;
   21c6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21c70:	e3a02000 	mov	r2, #0
   21c74:	e583203c 	str	r2, [r3, #60]	; 0x3c

	for (unsigned nPort = 0; nPort < USB_HUB_MAX_PORTS; nPort++)
   21c78:	e3a03000 	mov	r3, #0
   21c7c:	e50b3010 	str	r3, [fp, #-16]
   21c80:	ea00000c 	b	21cb8 <USBStandardHub+0xc8>
	{
		pThis->m_pDevice[nPort] = 0;
   21c84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21c88:	e51b2010 	ldr	r2, [fp, #-16]
   21c8c:	e2822010 	add	r2, r2, #16
   21c90:	e3a01000 	mov	r1, #0
   21c94:	e7831102 	str	r1, [r3, r2, lsl #2]
		pThis->m_pStatus[nPort] = 0;
   21c98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21c9c:	e51b2010 	ldr	r2, [fp, #-16]
   21ca0:	e2822018 	add	r2, r2, #24
   21ca4:	e3a01000 	mov	r1, #0
   21ca8:	e7831102 	str	r1, [r3, r2, lsl #2]
	pThis->m_USBDevice.Configure = USBStandardHubConfigure;
	
	pThis->m_pHubDesc = 0;
	pThis->m_nPorts = 0;

	for (unsigned nPort = 0; nPort < USB_HUB_MAX_PORTS; nPort++)
   21cac:	e51b3010 	ldr	r3, [fp, #-16]
   21cb0:	e2833001 	add	r3, r3, #1
   21cb4:	e50b3010 	str	r3, [fp, #-16]
   21cb8:	e51b3010 	ldr	r3, [fp, #-16]
   21cbc:	e3530007 	cmp	r3, #7
   21cc0:	9affffef 	bls	21c84 <USBStandardHub+0x94>
   21cc4:	e1a03004 	mov	r3, r4
   21cc8:	e3010bf0 	movw	r0, #7152	; 0x1bf0
   21ccc:	e3400002 	movt	r0, #2
   21cd0:	e1a01003 	mov	r1, r3
   21cd4:	ebffcee2 	bl	15864 <__cyg_profile_func_exit>
	{
		pThis->m_pDevice[nPort] = 0;
		pThis->m_pStatus[nPort] = 0;
	}
}
   21cd8:	e24bd008 	sub	sp, fp, #8
   21cdc:	e8bd8810 	pop	{r4, fp, pc}

00021ce0 <_USBStandardHub>:

void _USBStandardHub (TUSBStandardHub *pThis)
{
   21ce0:	e92d4810 	push	{r4, fp, lr}
   21ce4:	e28db008 	add	fp, sp, #8
   21ce8:	e24dd014 	sub	sp, sp, #20
   21cec:	e1a0400e 	mov	r4, lr
   21cf0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21cf4:	e1a03004 	mov	r3, r4
   21cf8:	e3010ce0 	movw	r0, #7392	; 0x1ce0
   21cfc:	e3400002 	movt	r0, #2
   21d00:	e1a01003 	mov	r1, r3
   21d04:	ebffce84 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21d08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21d0c:	e3530000 	cmp	r3, #0
   21d10:	1a000005 	bne	21d2c <_USBStandardHub+0x4c>
   21d14:	e30f0238 	movw	r0, #62008	; 0xf238
   21d18:	e3400002 	movt	r0, #2
   21d1c:	e30f1244 	movw	r1, #62020	; 0xf244
   21d20:	e3401002 	movt	r1, #2
   21d24:	e3a02031 	mov	r2, #49	; 0x31
   21d28:	ebffd320 	bl	169b0 <uspi_assertion_failed>

	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   21d2c:	e3a03000 	mov	r3, #0
   21d30:	e50b3010 	str	r3, [fp, #-16]
   21d34:	ea00002a 	b	21de4 <_USBStandardHub+0x104>
	{
		if (pThis->m_pStatus[nPort] != 0)
   21d38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21d3c:	e51b2010 	ldr	r2, [fp, #-16]
   21d40:	e2822018 	add	r2, r2, #24
   21d44:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   21d48:	e3530000 	cmp	r3, #0
   21d4c:	0a00000a 	beq	21d7c <_USBStandardHub+0x9c>
		{
			free (pThis->m_pStatus[nPort]);
   21d50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21d54:	e51b2010 	ldr	r2, [fp, #-16]
   21d58:	e2822018 	add	r2, r2, #24
   21d5c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   21d60:	e1a00003 	mov	r0, r3
   21d64:	ebffd351 	bl	16ab0 <free>
			pThis->m_pStatus[nPort] = 0;
   21d68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21d6c:	e51b2010 	ldr	r2, [fp, #-16]
   21d70:	e2822018 	add	r2, r2, #24
   21d74:	e3a01000 	mov	r1, #0
   21d78:	e7831102 	str	r1, [r3, r2, lsl #2]
		}

		if (pThis->m_pDevice[nPort] != 0)
   21d7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21d80:	e51b2010 	ldr	r2, [fp, #-16]
   21d84:	e2822010 	add	r2, r2, #16
   21d88:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   21d8c:	e3530000 	cmp	r3, #0
   21d90:	0a000010 	beq	21dd8 <_USBStandardHub+0xf8>
		{
			_USBDevice (pThis->m_pDevice[nPort]);
   21d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21d98:	e51b2010 	ldr	r2, [fp, #-16]
   21d9c:	e2822010 	add	r2, r2, #16
   21da0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   21da4:	e1a00003 	mov	r0, r3
   21da8:	ebfff4d0 	bl	1f0f0 <_USBDevice>
			free (pThis->m_pDevice[nPort]);
   21dac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21db0:	e51b2010 	ldr	r2, [fp, #-16]
   21db4:	e2822010 	add	r2, r2, #16
   21db8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   21dbc:	e1a00003 	mov	r0, r3
   21dc0:	ebffd33a 	bl	16ab0 <free>
			pThis->m_pDevice[nPort] = 0;
   21dc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21dc8:	e51b2010 	ldr	r2, [fp, #-16]
   21dcc:	e2822010 	add	r2, r2, #16
   21dd0:	e3a01000 	mov	r1, #0
   21dd4:	e7831102 	str	r1, [r3, r2, lsl #2]

void _USBStandardHub (TUSBStandardHub *pThis)
{
	assert (pThis != 0);

	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   21dd8:	e51b3010 	ldr	r3, [fp, #-16]
   21ddc:	e2833001 	add	r3, r3, #1
   21de0:	e50b3010 	str	r3, [fp, #-16]
   21de4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21de8:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   21dec:	e51b3010 	ldr	r3, [fp, #-16]
   21df0:	e1520003 	cmp	r2, r3
   21df4:	8affffcf 	bhi	21d38 <_USBStandardHub+0x58>
			free (pThis->m_pDevice[nPort]);
			pThis->m_pDevice[nPort] = 0;
		}
	}

	pThis->m_nPorts = 0;
   21df8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21dfc:	e3a02000 	mov	r2, #0
   21e00:	e583203c 	str	r2, [r3, #60]	; 0x3c

	if (pThis->m_pHubDesc != 0)
   21e04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21e08:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   21e0c:	e3530000 	cmp	r3, #0
   21e10:	0a000006 	beq	21e30 <_USBStandardHub+0x150>
	{
		free (pThis->m_pHubDesc);
   21e14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21e18:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   21e1c:	e1a00003 	mov	r0, r3
   21e20:	ebffd322 	bl	16ab0 <free>
		pThis->m_pHubDesc = 0;
   21e24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21e28:	e3a02000 	mov	r2, #0
   21e2c:	e5832038 	str	r2, [r3, #56]	; 0x38
	}

	_USBDevice (&pThis->m_USBDevice);
   21e30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21e34:	e1a00003 	mov	r0, r3
   21e38:	ebfff4ac 	bl	1f0f0 <_USBDevice>
   21e3c:	e1a03004 	mov	r3, r4
   21e40:	e3010ce0 	movw	r0, #7392	; 0x1ce0
   21e44:	e3400002 	movt	r0, #2
   21e48:	e1a01003 	mov	r1, r3
   21e4c:	ebffce84 	bl	15864 <__cyg_profile_func_exit>
}
   21e50:	e24bd008 	sub	sp, fp, #8
   21e54:	e8bd8810 	pop	{r4, fp, pc}

00021e58 <USBStandardHubInitialize>:

boolean USBStandardHubInitialize (TUSBStandardHub *pThis)
{
   21e58:	e92d4830 	push	{r4, r5, fp, lr}
   21e5c:	e28db00c 	add	fp, sp, #12
   21e60:	e24dd008 	sub	sp, sp, #8
   21e64:	e1a0400e 	mov	r4, lr
   21e68:	e50b0010 	str	r0, [fp, #-16]
   21e6c:	e1a03004 	mov	r3, r4
   21e70:	e3010e58 	movw	r0, #7768	; 0x1e58
   21e74:	e3400002 	movt	r0, #2
   21e78:	e1a01003 	mov	r1, r3
   21e7c:	ebffce26 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   21e80:	e51b3010 	ldr	r3, [fp, #-16]
   21e84:	e3530000 	cmp	r3, #0
   21e88:	1a000005 	bne	21ea4 <USBStandardHubInitialize+0x4c>
   21e8c:	e30f0238 	movw	r0, #62008	; 0xf238
   21e90:	e3400002 	movt	r0, #2
   21e94:	e30f1244 	movw	r1, #62020	; 0xf244
   21e98:	e3401002 	movt	r1, #2
   21e9c:	e3a02050 	mov	r2, #80	; 0x50
   21ea0:	ebffd2c2 	bl	169b0 <uspi_assertion_failed>
	return USBDeviceInitialize (&pThis->m_USBDevice);
   21ea4:	e51b3010 	ldr	r3, [fp, #-16]
   21ea8:	e1a00003 	mov	r0, r3
   21eac:	ebfff4eb 	bl	1f260 <USBDeviceInitialize>
   21eb0:	e1a05000 	mov	r5, r0
   21eb4:	e1a03004 	mov	r3, r4
   21eb8:	e3010e58 	movw	r0, #7768	; 0x1e58
   21ebc:	e3400002 	movt	r0, #2
   21ec0:	e1a01003 	mov	r1, r3
   21ec4:	ebffce66 	bl	15864 <__cyg_profile_func_exit>
   21ec8:	e1a03005 	mov	r3, r5
}
   21ecc:	e1a00003 	mov	r0, r3
   21ed0:	e24bd00c 	sub	sp, fp, #12
   21ed4:	e8bd8830 	pop	{r4, r5, fp, pc}

00021ed8 <USBStandardHubConfigure>:

boolean USBStandardHubConfigure (TUSBDevice *pUSBDevice)
{
   21ed8:	e92d4830 	push	{r4, r5, fp, lr}
   21edc:	e28db00c 	add	fp, sp, #12
   21ee0:	e24dd030 	sub	sp, sp, #48	; 0x30
   21ee4:	e1a0500e 	mov	r5, lr
   21ee8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   21eec:	e1a03005 	mov	r3, r5
   21ef0:	e3010ed8 	movw	r0, #7896	; 0x1ed8
   21ef4:	e3400002 	movt	r0, #2
   21ef8:	e1a01003 	mov	r1, r3
   21efc:	ebffce06 	bl	1571c <__cyg_profile_func_enter>
	TUSBStandardHub *pThis = (TUSBStandardHub *) pUSBDevice;
   21f00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   21f04:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   21f08:	e51b3010 	ldr	r3, [fp, #-16]
   21f0c:	e3530000 	cmp	r3, #0
   21f10:	1a000005 	bne	21f2c <USBStandardHubConfigure+0x54>
   21f14:	e30f0238 	movw	r0, #62008	; 0xf238
   21f18:	e3400002 	movt	r0, #2
   21f1c:	e30f1244 	movw	r1, #62020	; 0xf244
   21f20:	e3401002 	movt	r1, #2
   21f24:	e3a02057 	mov	r2, #87	; 0x57
   21f28:	ebffd2a0 	bl	169b0 <uspi_assertion_failed>

	const TUSBDeviceDescriptor *pDeviceDesc = USBDeviceGetDeviceDescriptor (&pThis->m_USBDevice);
   21f2c:	e51b3010 	ldr	r3, [fp, #-16]
   21f30:	e1a00003 	mov	r0, r3
   21f34:	ebfff85a 	bl	200a4 <USBDeviceGetDeviceDescriptor>
   21f38:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	assert (pDeviceDesc != 0);
   21f3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21f40:	e3530000 	cmp	r3, #0
   21f44:	1a000005 	bne	21f60 <USBStandardHubConfigure+0x88>
   21f48:	e30f02a8 	movw	r0, #62120	; 0xf2a8
   21f4c:	e3400002 	movt	r0, #2
   21f50:	e30f1244 	movw	r1, #62020	; 0xf244
   21f54:	e3401002 	movt	r1, #2
   21f58:	e3a0205a 	mov	r2, #90	; 0x5a
   21f5c:	ebffd293 	bl	169b0 <uspi_assertion_failed>

	if (   pDeviceDesc->bDeviceClass       != USB_DEVICE_CLASS_HUB
   21f60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21f64:	e5d33004 	ldrb	r3, [r3, #4]
   21f68:	e3530009 	cmp	r3, #9
   21f6c:	1a00000b 	bne	21fa0 <USBStandardHubConfigure+0xc8>
	    || pDeviceDesc->bDeviceSubClass    != 0
   21f70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21f74:	e5d33005 	ldrb	r3, [r3, #5]
   21f78:	e3530000 	cmp	r3, #0
   21f7c:	1a000007 	bne	21fa0 <USBStandardHubConfigure+0xc8>
	    || pDeviceDesc->bDeviceProtocol    != 2		// hub with multiple TTs
   21f80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21f84:	e5d33006 	ldrb	r3, [r3, #6]
   21f88:	e3530002 	cmp	r3, #2
   21f8c:	1a000003 	bne	21fa0 <USBStandardHubConfigure+0xc8>
	    || pDeviceDesc->bNumConfigurations != 1)
   21f90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21f94:	e5d33011 	ldrb	r3, [r3, #17]
   21f98:	e3530001 	cmp	r3, #1
   21f9c:	0a000009 	beq	21fc8 <USBStandardHubConfigure+0xf0>
	{
		LogWrite (FromHub, LOG_ERROR, "Unsupported hub (proto %u)",
			     (unsigned) pDeviceDesc->bDeviceProtocol);
   21fa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21fa4:	e5d33006 	ldrb	r3, [r3, #6]
	if (   pDeviceDesc->bDeviceClass       != USB_DEVICE_CLASS_HUB
	    || pDeviceDesc->bDeviceSubClass    != 0
	    || pDeviceDesc->bDeviceProtocol    != 2		// hub with multiple TTs
	    || pDeviceDesc->bNumConfigurations != 1)
	{
		LogWrite (FromHub, LOG_ERROR, "Unsupported hub (proto %u)",
   21fa8:	e30f0230 	movw	r0, #62000	; 0xf230
   21fac:	e3400002 	movt	r0, #2
   21fb0:	e3a01001 	mov	r1, #1
   21fb4:	e30f22bc 	movw	r2, #62140	; 0xf2bc
   21fb8:	e3402002 	movt	r2, #2
   21fbc:	ebffd263 	bl	16950 <LogWrite>
			     (unsigned) pDeviceDesc->bDeviceProtocol);

		return FALSE;
   21fc0:	e3a04000 	mov	r4, #0
   21fc4:	ea0000fb 	b	223b8 <USBStandardHubConfigure+0x4e0>
	}

	const TUSBConfigurationDescriptor *pConfigDesc =
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
   21fc8:	e51b3010 	ldr	r3, [fp, #-16]
			     (unsigned) pDeviceDesc->bDeviceProtocol);

		return FALSE;
	}

	const TUSBConfigurationDescriptor *pConfigDesc =
   21fcc:	e1a00003 	mov	r0, r3
   21fd0:	e3a01002 	mov	r1, #2
   21fd4:	ebfff882 	bl	201e4 <USBDeviceGetDescriptor>
   21fd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
	if (   pConfigDesc == 0
   21fdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21fe0:	e3530000 	cmp	r3, #0
   21fe4:	0a000003 	beq	21ff8 <USBStandardHubConfigure+0x120>
	    || pConfigDesc->bNumInterfaces != 1)
   21fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21fec:	e5d33004 	ldrb	r3, [r3, #4]
   21ff0:	e3530001 	cmp	r3, #1
   21ff4:	0a000006 	beq	22014 <USBStandardHubConfigure+0x13c>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromHub);
   21ff8:	e51b3010 	ldr	r3, [fp, #-16]
   21ffc:	e1a00003 	mov	r0, r3
   22000:	e30f1230 	movw	r1, #62000	; 0xf230
   22004:	e3401002 	movt	r1, #2
   22008:	ebfff8a4 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   2200c:	e3a04000 	mov	r4, #0
   22010:	ea0000e8 	b	223b8 <USBStandardHubConfigure+0x4e0>
	}

	const TUSBInterfaceDescriptor *pInterfaceDesc;
	while ((pInterfaceDesc = (TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE)) != 0)
   22014:	ea000032 	b	220e4 <USBStandardHubConfigure+0x20c>
	{
		if (   pInterfaceDesc->bInterfaceClass    != USB_DEVICE_CLASS_HUB
   22018:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2201c:	e5d33005 	ldrb	r3, [r3, #5]
   22020:	e3530009 	cmp	r3, #9
   22024:	1a000007 	bne	22048 <USBStandardHubConfigure+0x170>
		    || pInterfaceDesc->bInterfaceSubClass != 0
   22028:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2202c:	e5d33006 	ldrb	r3, [r3, #6]
   22030:	e3530000 	cmp	r3, #0
   22034:	1a000003 	bne	22048 <USBStandardHubConfigure+0x170>
		    || pInterfaceDesc->bInterfaceProtocol != 2)
   22038:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2203c:	e5d33007 	ldrb	r3, [r3, #7]
   22040:	e3530002 	cmp	r3, #2
   22044:	0a000000 	beq	2204c <USBStandardHubConfigure+0x174>
		{
			continue;
   22048:	ea000025 	b	220e4 <USBStandardHubConfigure+0x20c>
		}

		if (pInterfaceDesc->bNumEndpoints != 1)
   2204c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22050:	e5d33004 	ldrb	r3, [r3, #4]
   22054:	e3530001 	cmp	r3, #1
   22058:	0a000006 	beq	22078 <USBStandardHubConfigure+0x1a0>
		{
			USBDeviceConfigurationError (&pThis->m_USBDevice, FromHub);
   2205c:	e51b3010 	ldr	r3, [fp, #-16]
   22060:	e1a00003 	mov	r0, r3
   22064:	e30f1230 	movw	r1, #62000	; 0xf230
   22068:	e3401002 	movt	r1, #2
   2206c:	ebfff88b 	bl	202a0 <USBDeviceConfigurationError>

			return FALSE;
   22070:	e3a04000 	mov	r4, #0
   22074:	ea0000cf 	b	223b8 <USBStandardHubConfigure+0x4e0>
		}

		const TUSBEndpointDescriptor *pEndpointDesc =
			(TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT);
   22078:	e51b3010 	ldr	r3, [fp, #-16]
			USBDeviceConfigurationError (&pThis->m_USBDevice, FromHub);

			return FALSE;
		}

		const TUSBEndpointDescriptor *pEndpointDesc =
   2207c:	e1a00003 	mov	r0, r3
   22080:	e3a01005 	mov	r1, #5
   22084:	ebfff856 	bl	201e4 <USBDeviceGetDescriptor>
   22088:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
			(TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT);
		if (   pEndpointDesc == 0
   2208c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22090:	e3530000 	cmp	r3, #0
   22094:	0a00000a 	beq	220c4 <USBStandardHubConfigure+0x1ec>
		    || (pEndpointDesc->bEndpointAddress & 0x80) != 0x80		// input EP
   22098:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2209c:	e5d33002 	ldrb	r3, [r3, #2]
   220a0:	e6ef3073 	uxtb	r3, r3
   220a4:	e6af3073 	sxtb	r3, r3
   220a8:	e3530000 	cmp	r3, #0
   220ac:	aa000004 	bge	220c4 <USBStandardHubConfigure+0x1ec>
		    || (pEndpointDesc->bmAttributes     & 0x3F) != 0x03)	// interrupt EP
   220b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   220b4:	e5d33003 	ldrb	r3, [r3, #3]
   220b8:	e203303f 	and	r3, r3, #63	; 0x3f
   220bc:	e3530003 	cmp	r3, #3
   220c0:	0a000006 	beq	220e0 <USBStandardHubConfigure+0x208>
		{
			USBDeviceConfigurationError (&pThis->m_USBDevice, FromHub);
   220c4:	e51b3010 	ldr	r3, [fp, #-16]
   220c8:	e1a00003 	mov	r0, r3
   220cc:	e30f1230 	movw	r1, #62000	; 0xf230
   220d0:	e3401002 	movt	r1, #2
   220d4:	ebfff871 	bl	202a0 <USBDeviceConfigurationError>

			return FALSE;
   220d8:	e3a04000 	mov	r4, #0
   220dc:	ea0000b5 	b	223b8 <USBStandardHubConfigure+0x4e0>
		}

		break;
   220e0:	ea000007 	b	22104 <USBStandardHubConfigure+0x22c>

		return FALSE;
	}

	const TUSBInterfaceDescriptor *pInterfaceDesc;
	while ((pInterfaceDesc = (TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE)) != 0)
   220e4:	e51b3010 	ldr	r3, [fp, #-16]
   220e8:	e1a00003 	mov	r0, r3
   220ec:	e3a01004 	mov	r1, #4
   220f0:	ebfff83b 	bl	201e4 <USBDeviceGetDescriptor>
   220f4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
   220f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   220fc:	e3530000 	cmp	r3, #0
   22100:	1affffc4 	bne	22018 <USBStandardHubConfigure+0x140>
		}

		break;
	}

	if (pInterfaceDesc == 0)
   22104:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22108:	e3530000 	cmp	r3, #0
   2210c:	1a000006 	bne	2212c <USBStandardHubConfigure+0x254>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromHub);
   22110:	e51b3010 	ldr	r3, [fp, #-16]
   22114:	e1a00003 	mov	r0, r3
   22118:	e30f1230 	movw	r1, #62000	; 0xf230
   2211c:	e3401002 	movt	r1, #2
   22120:	ebfff85e 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   22124:	e3a04000 	mov	r4, #0
   22128:	ea0000a2 	b	223b8 <USBStandardHubConfigure+0x4e0>
	}

	if (!USBDeviceConfigure (&pThis->m_USBDevice))
   2212c:	e51b3010 	ldr	r3, [fp, #-16]
   22130:	e1a00003 	mov	r0, r3
   22134:	ebfff61c 	bl	1f9ac <USBDeviceConfigure>
   22138:	e1a03000 	mov	r3, r0
   2213c:	e3530000 	cmp	r3, #0
   22140:	1a000007 	bne	22164 <USBStandardHubConfigure+0x28c>
	{
		LogWrite (FromHub, LOG_ERROR, "Cannot set configuration");
   22144:	e30f0230 	movw	r0, #62000	; 0xf230
   22148:	e3400002 	movt	r0, #2
   2214c:	e3a01001 	mov	r1, #1
   22150:	e30f22d8 	movw	r2, #62168	; 0xf2d8
   22154:	e3402002 	movt	r2, #2
   22158:	ebffd1fc 	bl	16950 <LogWrite>

		return FALSE;
   2215c:	e3a04000 	mov	r4, #0
   22160:	ea000094 	b	223b8 <USBStandardHubConfigure+0x4e0>
	}

	TUSBHostController *pHost = USBDeviceGetHost (&pThis->m_USBDevice);
   22164:	e51b3010 	ldr	r3, [fp, #-16]
   22168:	e1a00003 	mov	r0, r3
   2216c:	ebfff7a4 	bl	20004 <USBDeviceGetHost>
   22170:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
	assert (pHost != 0);
   22174:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   22178:	e3530000 	cmp	r3, #0
   2217c:	1a000005 	bne	22198 <USBStandardHubConfigure+0x2c0>
   22180:	e30f02f4 	movw	r0, #62196	; 0xf2f4
   22184:	e3400002 	movt	r0, #2
   22188:	e30f1244 	movw	r1, #62020	; 0xf244
   2218c:	e3401002 	movt	r1, #2
   22190:	e3a0209f 	mov	r2, #159	; 0x9f
   22194:	ebffd205 	bl	169b0 <uspi_assertion_failed>

	if (pInterfaceDesc->bAlternateSetting != 0)
   22198:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2219c:	e5d33003 	ldrb	r3, [r3, #3]
   221a0:	e3530000 	cmp	r3, #0
   221a4:	0a00001e 	beq	22224 <USBStandardHubConfigure+0x34c>
	{
		if (DWHCIDeviceControlMessage (pHost, USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   221a8:	e51b3010 	ldr	r3, [fp, #-16]
   221ac:	e1a00003 	mov	r0, r3
   221b0:	ebfff76b 	bl	1ff64 <USBDeviceGetEndpoint0>
   221b4:	e1a01000 	mov	r1, r0
						REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
						pInterfaceDesc->bAlternateSetting,
   221b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   221bc:	e5d33003 	ldrb	r3, [r3, #3]
	TUSBHostController *pHost = USBDeviceGetHost (&pThis->m_USBDevice);
	assert (pHost != 0);

	if (pInterfaceDesc->bAlternateSetting != 0)
	{
		if (DWHCIDeviceControlMessage (pHost, USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   221c0:	e6ff2073 	uxth	r2, r3
						REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
						pInterfaceDesc->bAlternateSetting,
						pInterfaceDesc->bInterfaceNumber, 0, 0) < 0)
   221c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   221c8:	e5d33002 	ldrb	r3, [r3, #2]
	TUSBHostController *pHost = USBDeviceGetHost (&pThis->m_USBDevice);
	assert (pHost != 0);

	if (pInterfaceDesc->bAlternateSetting != 0)
	{
		if (DWHCIDeviceControlMessage (pHost, USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   221cc:	e6ff3073 	uxth	r3, r3
   221d0:	e58d2000 	str	r2, [sp]
   221d4:	e58d3004 	str	r3, [sp, #4]
   221d8:	e3a03000 	mov	r3, #0
   221dc:	e58d3008 	str	r3, [sp, #8]
   221e0:	e3a03000 	mov	r3, #0
   221e4:	e58d300c 	str	r3, [sp, #12]
   221e8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   221ec:	e3a02001 	mov	r2, #1
   221f0:	e3a0300b 	mov	r3, #11
   221f4:	ebffda5a 	bl	18b64 <DWHCIDeviceControlMessage>
   221f8:	e1a03000 	mov	r3, r0
   221fc:	e3530000 	cmp	r3, #0
   22200:	aa000007 	bge	22224 <USBStandardHubConfigure+0x34c>
						REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
						pInterfaceDesc->bAlternateSetting,
						pInterfaceDesc->bInterfaceNumber, 0, 0) < 0)
		{
			LogWrite (FromHub, LOG_ERROR, "Cannot set interface");
   22204:	e30f0230 	movw	r0, #62000	; 0xf230
   22208:	e3400002 	movt	r0, #2
   2220c:	e3a01001 	mov	r1, #1
   22210:	e30f2300 	movw	r2, #62208	; 0xf300
   22214:	e3402002 	movt	r2, #2
   22218:	ebffd1cc 	bl	16950 <LogWrite>

			return FALSE;
   2221c:	e3a04000 	mov	r4, #0
   22220:	ea000064 	b	223b8 <USBStandardHubConfigure+0x4e0>
		}
	}

	assert (pThis->m_pHubDesc == 0);
   22224:	e51b3010 	ldr	r3, [fp, #-16]
   22228:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2222c:	e3530000 	cmp	r3, #0
   22230:	0a000005 	beq	2224c <USBStandardHubConfigure+0x374>
   22234:	e30f0318 	movw	r0, #62232	; 0xf318
   22238:	e3400002 	movt	r0, #2
   2223c:	e30f1244 	movw	r1, #62020	; 0xf244
   22240:	e3401002 	movt	r1, #2
   22244:	e3a020ae 	mov	r2, #174	; 0xae
   22248:	ebffd1d8 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pHubDesc = (TUSBHubDescriptor *) malloc (sizeof (TUSBHubDescriptor));
   2224c:	e3a00009 	mov	r0, #9
   22250:	ebffd200 	bl	16a58 <malloc>
   22254:	e1a03000 	mov	r3, r0
   22258:	e1a02003 	mov	r2, r3
   2225c:	e51b3010 	ldr	r3, [fp, #-16]
   22260:	e5832038 	str	r2, [r3, #56]	; 0x38
	assert (pThis->m_pHubDesc != 0);
   22264:	e51b3010 	ldr	r3, [fp, #-16]
   22268:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2226c:	e3530000 	cmp	r3, #0
   22270:	1a000005 	bne	2228c <USBStandardHubConfigure+0x3b4>
   22274:	e30f0330 	movw	r0, #62256	; 0xf330
   22278:	e3400002 	movt	r0, #2
   2227c:	e30f1244 	movw	r1, #62020	; 0xf244
   22280:	e3401002 	movt	r1, #2
   22284:	e3a020b0 	mov	r2, #176	; 0xb0
   22288:	ebffd1c8 	bl	169b0 <uspi_assertion_failed>

	if (DWHCIDeviceGetDescriptor (pHost, USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   2228c:	e51b3010 	ldr	r3, [fp, #-16]
   22290:	e1a00003 	mov	r0, r3
   22294:	ebfff732 	bl	1ff64 <USBDeviceGetEndpoint0>
   22298:	e1a02000 	mov	r2, r0
					DESCRIPTOR_HUB, DESCRIPTOR_INDEX_DEFAULT,
					pThis->m_pHubDesc, sizeof *pThis->m_pHubDesc,
   2229c:	e51b3010 	ldr	r3, [fp, #-16]
   222a0:	e5933038 	ldr	r3, [r3, #56]	; 0x38

	assert (pThis->m_pHubDesc == 0);
	pThis->m_pHubDesc = (TUSBHubDescriptor *) malloc (sizeof (TUSBHubDescriptor));
	assert (pThis->m_pHubDesc != 0);

	if (DWHCIDeviceGetDescriptor (pHost, USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   222a4:	e58d3000 	str	r3, [sp]
   222a8:	e3a03009 	mov	r3, #9
   222ac:	e58d3004 	str	r3, [sp, #4]
   222b0:	e3a030a0 	mov	r3, #160	; 0xa0
   222b4:	e58d3008 	str	r3, [sp, #8]
   222b8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   222bc:	e1a01002 	mov	r1, r2
   222c0:	e3a02029 	mov	r2, #41	; 0x29
   222c4:	e3a03000 	mov	r3, #0
   222c8:	ebffd981 	bl	188d4 <DWHCIDeviceGetDescriptor>
   222cc:	e1a03000 	mov	r3, r0
   222d0:	e3530009 	cmp	r3, #9
   222d4:	0a00000e 	beq	22314 <USBStandardHubConfigure+0x43c>
					DESCRIPTOR_HUB, DESCRIPTOR_INDEX_DEFAULT,
					pThis->m_pHubDesc, sizeof *pThis->m_pHubDesc,
					REQUEST_IN | REQUEST_CLASS)
	   != (int) sizeof *pThis->m_pHubDesc)
	{
		LogWrite (FromHub, LOG_ERROR, "Cannot get hub descriptor");
   222d8:	e30f0230 	movw	r0, #62000	; 0xf230
   222dc:	e3400002 	movt	r0, #2
   222e0:	e3a01001 	mov	r1, #1
   222e4:	e30f2348 	movw	r2, #62280	; 0xf348
   222e8:	e3402002 	movt	r2, #2
   222ec:	ebffd197 	bl	16950 <LogWrite>
		
		free (pThis->m_pHubDesc);
   222f0:	e51b3010 	ldr	r3, [fp, #-16]
   222f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   222f8:	e1a00003 	mov	r0, r3
   222fc:	ebffd1eb 	bl	16ab0 <free>
		pThis->m_pHubDesc = 0;
   22300:	e51b3010 	ldr	r3, [fp, #-16]
   22304:	e3a02000 	mov	r2, #0
   22308:	e5832038 	str	r2, [r3, #56]	; 0x38
		
		return FALSE;
   2230c:	e3a04000 	mov	r4, #0
   22310:	ea000028 	b	223b8 <USBStandardHubConfigure+0x4e0>

#ifndef NDEBUG
	//DebugHexdump (pThis->m_pHubDesc, sizeof *pThis->m_pHubDesc, FromHub);
#endif

	pThis->m_nPorts = pThis->m_pHubDesc->bNbrPorts;
   22314:	e51b3010 	ldr	r3, [fp, #-16]
   22318:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2231c:	e5d33002 	ldrb	r3, [r3, #2]
   22320:	e1a02003 	mov	r2, r3
   22324:	e51b3010 	ldr	r3, [fp, #-16]
   22328:	e583203c 	str	r2, [r3, #60]	; 0x3c
	if (pThis->m_nPorts > USB_HUB_MAX_PORTS)
   2232c:	e51b3010 	ldr	r3, [fp, #-16]
   22330:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   22334:	e3530008 	cmp	r3, #8
   22338:	9a000010 	bls	22380 <USBStandardHubConfigure+0x4a8>
	{
		LogWrite (FromHub, LOG_ERROR, "Too many ports (%u)", pThis->m_nPorts);
   2233c:	e51b3010 	ldr	r3, [fp, #-16]
   22340:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   22344:	e30f0230 	movw	r0, #62000	; 0xf230
   22348:	e3400002 	movt	r0, #2
   2234c:	e3a01001 	mov	r1, #1
   22350:	e30f2364 	movw	r2, #62308	; 0xf364
   22354:	e3402002 	movt	r2, #2
   22358:	ebffd17c 	bl	16950 <LogWrite>
		
		free (pThis->m_pHubDesc);
   2235c:	e51b3010 	ldr	r3, [fp, #-16]
   22360:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   22364:	e1a00003 	mov	r0, r3
   22368:	ebffd1d0 	bl	16ab0 <free>
		pThis->m_pHubDesc = 0;
   2236c:	e51b3010 	ldr	r3, [fp, #-16]
   22370:	e3a02000 	mov	r2, #0
   22374:	e5832038 	str	r2, [r3, #56]	; 0x38
		
		return FALSE;
   22378:	e3a04000 	mov	r4, #0
   2237c:	ea00000d 	b	223b8 <USBStandardHubConfigure+0x4e0>
	}

	if (!USBStandardHubEnumeratePorts (pThis))
   22380:	e51b0010 	ldr	r0, [fp, #-16]
   22384:	eb000014 	bl	223dc <USBStandardHubEnumeratePorts>
   22388:	e1a03000 	mov	r3, r0
   2238c:	e3530000 	cmp	r3, #0
   22390:	1a000007 	bne	223b4 <USBStandardHubConfigure+0x4dc>
	{
		LogWrite (FromHub, LOG_ERROR, "Port enumeration failed");
   22394:	e30f0230 	movw	r0, #62000	; 0xf230
   22398:	e3400002 	movt	r0, #2
   2239c:	e3a01001 	mov	r1, #1
   223a0:	e30f2378 	movw	r2, #62328	; 0xf378
   223a4:	e3402002 	movt	r2, #2
   223a8:	ebffd168 	bl	16950 <LogWrite>

		return FALSE;
   223ac:	e3a04000 	mov	r4, #0
   223b0:	ea000000 	b	223b8 <USBStandardHubConfigure+0x4e0>
	}

	return TRUE;
   223b4:	e3a04001 	mov	r4, #1
   223b8:	e1a03005 	mov	r3, r5
   223bc:	e3010ed8 	movw	r0, #7896	; 0x1ed8
   223c0:	e3400002 	movt	r0, #2
   223c4:	e1a01003 	mov	r1, r3
   223c8:	ebffcd25 	bl	15864 <__cyg_profile_func_exit>
   223cc:	e1a03004 	mov	r3, r4
}
   223d0:	e1a00003 	mov	r0, r3
   223d4:	e24bd00c 	sub	sp, fp, #12
   223d8:	e8bd8830 	pop	{r4, r5, fp, pc}

000223dc <USBStandardHubEnumeratePorts>:

boolean USBStandardHubEnumeratePorts (TUSBStandardHub *pThis)
{
   223dc:	e92d4830 	push	{r4, r5, fp, lr}
   223e0:	e28db00c 	add	fp, sp, #12
   223e4:	e24dd048 	sub	sp, sp, #72	; 0x48
   223e8:	e1a0500e 	mov	r5, lr
   223ec:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
   223f0:	e1a03005 	mov	r3, r5
   223f4:	e30203dc 	movw	r0, #9180	; 0x23dc
   223f8:	e3400002 	movt	r0, #2
   223fc:	e1a01003 	mov	r1, r3
   22400:	ebffccc5 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   22404:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22408:	e3530000 	cmp	r3, #0
   2240c:	1a000005 	bne	22428 <USBStandardHubEnumeratePorts+0x4c>
   22410:	e30f0238 	movw	r0, #62008	; 0xf238
   22414:	e3400002 	movt	r0, #2
   22418:	e30f1244 	movw	r1, #62020	; 0xf244
   2241c:	e3401002 	movt	r1, #2
   22420:	e3a020db 	mov	r2, #219	; 0xdb
   22424:	ebffd161 	bl	169b0 <uspi_assertion_failed>

	TUSBHostController *pHost = USBDeviceGetHost (&pThis->m_USBDevice);
   22428:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2242c:	e1a00003 	mov	r0, r3
   22430:	ebfff6f3 	bl	20004 <USBDeviceGetHost>
   22434:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
	assert (pHost != 0);
   22438:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2243c:	e3530000 	cmp	r3, #0
   22440:	1a000005 	bne	2245c <USBStandardHubEnumeratePorts+0x80>
   22444:	e30f02f4 	movw	r0, #62196	; 0xf2f4
   22448:	e3400002 	movt	r0, #2
   2244c:	e30f1244 	movw	r1, #62020	; 0xf244
   22450:	e3401002 	movt	r1, #2
   22454:	e3a020de 	mov	r2, #222	; 0xde
   22458:	ebffd154 	bl	169b0 <uspi_assertion_failed>
	
	TUSBEndpoint *pEndpoint0 = USBDeviceGetEndpoint0 (&pThis->m_USBDevice);
   2245c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22460:	e1a00003 	mov	r0, r3
   22464:	ebfff6be 	bl	1ff64 <USBDeviceGetEndpoint0>
   22468:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
	assert (pEndpoint0 != 0);
   2246c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22470:	e3530000 	cmp	r3, #0
   22474:	1a000005 	bne	22490 <USBStandardHubEnumeratePorts+0xb4>
   22478:	e30f0390 	movw	r0, #62352	; 0xf390
   2247c:	e3400002 	movt	r0, #2
   22480:	e30f1244 	movw	r1, #62020	; 0xf244
   22484:	e3401002 	movt	r1, #2
   22488:	e3a020e1 	mov	r2, #225	; 0xe1
   2248c:	ebffd147 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_nPorts > 0);
   22490:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22494:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   22498:	e3530000 	cmp	r3, #0
   2249c:	1a000005 	bne	224b8 <USBStandardHubEnumeratePorts+0xdc>
   224a0:	e30f03a0 	movw	r0, #62368	; 0xf3a0
   224a4:	e3400002 	movt	r0, #2
   224a8:	e30f1244 	movw	r1, #62020	; 0xf244
   224ac:	e3401002 	movt	r1, #2
   224b0:	e3a020e3 	mov	r2, #227	; 0xe3
   224b4:	ebffd13d 	bl	169b0 <uspi_assertion_failed>

	// first power on all ports
	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   224b8:	e3a03000 	mov	r3, #0
   224bc:	e50b3010 	str	r3, [fp, #-16]
   224c0:	ea00001f 	b	22544 <USBStandardHubEnumeratePorts+0x168>
	{
		if (DWHCIDeviceControlMessage (pHost, pEndpoint0,
   224c4:	e51b3010 	ldr	r3, [fp, #-16]
   224c8:	e6ff3073 	uxth	r3, r3
   224cc:	e2833001 	add	r3, r3, #1
   224d0:	e6ff3073 	uxth	r3, r3
   224d4:	e3a02008 	mov	r2, #8
   224d8:	e58d2000 	str	r2, [sp]
   224dc:	e58d3004 	str	r3, [sp, #4]
   224e0:	e3a03000 	mov	r3, #0
   224e4:	e58d3008 	str	r3, [sp, #8]
   224e8:	e3a03000 	mov	r3, #0
   224ec:	e58d300c 	str	r3, [sp, #12]
   224f0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   224f4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   224f8:	e3a02023 	mov	r2, #35	; 0x23
   224fc:	e3a03003 	mov	r3, #3
   22500:	ebffd997 	bl	18b64 <DWHCIDeviceControlMessage>
   22504:	e1a03000 	mov	r3, r0
   22508:	e3530000 	cmp	r3, #0
   2250c:	aa000009 	bge	22538 <USBStandardHubEnumeratePorts+0x15c>
			REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_OTHER,
			SET_FEATURE, PORT_POWER, nPort+1, 0, 0) < 0)
		{
			LogWrite (FromHub, LOG_ERROR, "Cannot power port %u", nPort+1);
   22510:	e51b3010 	ldr	r3, [fp, #-16]
   22514:	e2833001 	add	r3, r3, #1
   22518:	e30f0230 	movw	r0, #62000	; 0xf230
   2251c:	e3400002 	movt	r0, #2
   22520:	e3a01001 	mov	r1, #1
   22524:	e30f23b4 	movw	r2, #62388	; 0xf3b4
   22528:	e3402002 	movt	r2, #2
   2252c:	ebffd107 	bl	16950 <LogWrite>

			return FALSE;
   22530:	e3a04000 	mov	r4, #0
   22534:	ea000266 	b	22ed4 <USBStandardHubEnumeratePorts+0xaf8>
	assert (pEndpoint0 != 0);

	assert (pThis->m_nPorts > 0);

	// first power on all ports
	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   22538:	e51b3010 	ldr	r3, [fp, #-16]
   2253c:	e2833001 	add	r3, r3, #1
   22540:	e50b3010 	str	r3, [fp, #-16]
   22544:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22548:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   2254c:	e51b3010 	ldr	r3, [fp, #-16]
   22550:	e1520003 	cmp	r2, r3
   22554:	8affffda 	bhi	224c4 <USBStandardHubEnumeratePorts+0xe8>
		}
	}

	// pThis->m_pHubDesc->bPwrOn2PwrGood delay seems to be not enough
	// for some low speed devices, so we use the maximum here
	MsDelay (510);
   22558:	e30001fe 	movw	r0, #510	; 0x1fe
   2255c:	ebffd007 	bl	16580 <MsDelay>

	// now detect devices, reset and initialize them
	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   22560:	e3a03000 	mov	r3, #0
   22564:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   22568:	ea000150 	b	22ab0 <USBStandardHubEnumeratePorts+0x6d4>
	{
		assert (pThis->m_pStatus[nPort] == 0);
   2256c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22570:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22574:	e2822018 	add	r2, r2, #24
   22578:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   2257c:	e3530000 	cmp	r3, #0
   22580:	0a000005 	beq	2259c <USBStandardHubEnumeratePorts+0x1c0>
   22584:	e30f03cc 	movw	r0, #62412	; 0xf3cc
   22588:	e3400002 	movt	r0, #2
   2258c:	e30f1244 	movw	r1, #62020	; 0xf244
   22590:	e3401002 	movt	r1, #2
   22594:	e3a020f9 	mov	r2, #249	; 0xf9
   22598:	ebffd104 	bl	169b0 <uspi_assertion_failed>
		pThis->m_pStatus[nPort] = malloc (sizeof (TUSBPortStatus));
   2259c:	e3a00004 	mov	r0, #4
   225a0:	ebffd12c 	bl	16a58 <malloc>
   225a4:	e1a03000 	mov	r3, r0
   225a8:	e1a01003 	mov	r1, r3
   225ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   225b0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   225b4:	e2822018 	add	r2, r2, #24
   225b8:	e7831102 	str	r1, [r3, r2, lsl #2]
		assert (pThis->m_pStatus[nPort] != 0);
   225bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   225c0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   225c4:	e2822018 	add	r2, r2, #24
   225c8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   225cc:	e3530000 	cmp	r3, #0
   225d0:	1a000005 	bne	225ec <USBStandardHubEnumeratePorts+0x210>
   225d4:	e30f03ec 	movw	r0, #62444	; 0xf3ec
   225d8:	e3400002 	movt	r0, #2
   225dc:	e30f1244 	movw	r1, #62020	; 0xf244
   225e0:	e3401002 	movt	r1, #2
   225e4:	e3a020fb 	mov	r2, #251	; 0xfb
   225e8:	ebffd0f0 	bl	169b0 <uspi_assertion_failed>

		if (DWHCIDeviceControlMessage (pHost, pEndpoint0,
   225ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   225f0:	e6ff3073 	uxth	r3, r3
   225f4:	e2833001 	add	r3, r3, #1
   225f8:	e6ff2073 	uxth	r2, r3
			REQUEST_IN | REQUEST_CLASS | REQUEST_TO_OTHER,
			GET_STATUS, 0, nPort+1, pThis->m_pStatus[nPort], 4) != 4)
   225fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22600:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   22604:	e2811018 	add	r1, r1, #24
   22608:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	{
		assert (pThis->m_pStatus[nPort] == 0);
		pThis->m_pStatus[nPort] = malloc (sizeof (TUSBPortStatus));
		assert (pThis->m_pStatus[nPort] != 0);

		if (DWHCIDeviceControlMessage (pHost, pEndpoint0,
   2260c:	e3a01000 	mov	r1, #0
   22610:	e58d1000 	str	r1, [sp]
   22614:	e58d2004 	str	r2, [sp, #4]
   22618:	e58d3008 	str	r3, [sp, #8]
   2261c:	e3a03004 	mov	r3, #4
   22620:	e58d300c 	str	r3, [sp, #12]
   22624:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   22628:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   2262c:	e3a020a3 	mov	r2, #163	; 0xa3
   22630:	e3a03000 	mov	r3, #0
   22634:	ebffd94a 	bl	18b64 <DWHCIDeviceControlMessage>
   22638:	e1a03000 	mov	r3, r0
   2263c:	e3530004 	cmp	r3, #4
   22640:	0a000008 	beq	22668 <USBStandardHubEnumeratePorts+0x28c>
			REQUEST_IN | REQUEST_CLASS | REQUEST_TO_OTHER,
			GET_STATUS, 0, nPort+1, pThis->m_pStatus[nPort], 4) != 4)
		{
			LogWrite (FromHub, LOG_ERROR, "Cannot get status of port %u", nPort+1);
   22644:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22648:	e2833001 	add	r3, r3, #1
   2264c:	e30f0230 	movw	r0, #62000	; 0xf230
   22650:	e3400002 	movt	r0, #2
   22654:	e3a01001 	mov	r1, #1
   22658:	e30f240c 	movw	r2, #62476	; 0xf40c
   2265c:	e3402002 	movt	r2, #2
   22660:	ebffd0ba 	bl	16950 <LogWrite>

			continue;
   22664:	ea00010e 	b	22aa4 <USBStandardHubEnumeratePorts+0x6c8>
		}

		assert (pThis->m_pStatus[nPort]->wPortStatus & PORT_POWER__MASK);
   22668:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2266c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22670:	e2822018 	add	r2, r2, #24
   22674:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22678:	e1d330b0 	ldrh	r3, [r3]
   2267c:	e6ff3073 	uxth	r3, r3
   22680:	e2033c01 	and	r3, r3, #256	; 0x100
   22684:	e3530000 	cmp	r3, #0
   22688:	1a000005 	bne	226a4 <USBStandardHubEnumeratePorts+0x2c8>
   2268c:	e30f042c 	movw	r0, #62508	; 0xf42c
   22690:	e3400002 	movt	r0, #2
   22694:	e30f1244 	movw	r1, #62020	; 0xf244
   22698:	e3401002 	movt	r1, #2
   2269c:	e3002106 	movw	r2, #262	; 0x106
   226a0:	ebffd0c2 	bl	169b0 <uspi_assertion_failed>
		if (!(pThis->m_pStatus[nPort]->wPortStatus & PORT_CONNECTION__MASK))
   226a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   226a8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   226ac:	e2822018 	add	r2, r2, #24
   226b0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   226b4:	e1d330b0 	ldrh	r3, [r3]
   226b8:	e6ff3073 	uxth	r3, r3
   226bc:	e2033001 	and	r3, r3, #1
   226c0:	e3530000 	cmp	r3, #0
   226c4:	1a000000 	bne	226cc <USBStandardHubEnumeratePorts+0x2f0>
		{
			continue;
   226c8:	ea0000f5 	b	22aa4 <USBStandardHubEnumeratePorts+0x6c8>
		}

		if (DWHCIDeviceControlMessage (pHost, pEndpoint0,
   226cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   226d0:	e6ff3073 	uxth	r3, r3
   226d4:	e2833001 	add	r3, r3, #1
   226d8:	e6ff3073 	uxth	r3, r3
   226dc:	e3a02004 	mov	r2, #4
   226e0:	e58d2000 	str	r2, [sp]
   226e4:	e58d3004 	str	r3, [sp, #4]
   226e8:	e3a03000 	mov	r3, #0
   226ec:	e58d3008 	str	r3, [sp, #8]
   226f0:	e3a03000 	mov	r3, #0
   226f4:	e58d300c 	str	r3, [sp, #12]
   226f8:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   226fc:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   22700:	e3a02023 	mov	r2, #35	; 0x23
   22704:	e3a03003 	mov	r3, #3
   22708:	ebffd915 	bl	18b64 <DWHCIDeviceControlMessage>
   2270c:	e1a03000 	mov	r3, r0
   22710:	e3530000 	cmp	r3, #0
   22714:	aa000008 	bge	2273c <USBStandardHubEnumeratePorts+0x360>
			REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_OTHER,
			SET_FEATURE, PORT_RESET, nPort+1, 0, 0) < 0)
		{
			LogWrite (FromHub, LOG_ERROR, "Cannot reset port %u", nPort+1);
   22718:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2271c:	e2833001 	add	r3, r3, #1
   22720:	e30f0230 	movw	r0, #62000	; 0xf230
   22724:	e3400002 	movt	r0, #2
   22728:	e3a01001 	mov	r1, #1
   2272c:	e30f2464 	movw	r2, #62564	; 0xf464
   22730:	e3402002 	movt	r2, #2
   22734:	ebffd085 	bl	16950 <LogWrite>

			continue;
   22738:	ea0000d9 	b	22aa4 <USBStandardHubEnumeratePorts+0x6c8>
		}

		MsDelay (100);
   2273c:	e3a00064 	mov	r0, #100	; 0x64
   22740:	ebffcf8e 	bl	16580 <MsDelay>
		
		if (DWHCIDeviceControlMessage (pHost, pEndpoint0,
   22744:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22748:	e6ff3073 	uxth	r3, r3
   2274c:	e2833001 	add	r3, r3, #1
   22750:	e6ff2073 	uxth	r2, r3
			REQUEST_IN | REQUEST_CLASS | REQUEST_TO_OTHER,
			GET_STATUS, 0, nPort+1, pThis->m_pStatus[nPort], 4) != 4)
   22754:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22758:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   2275c:	e2811018 	add	r1, r1, #24
   22760:	e7933101 	ldr	r3, [r3, r1, lsl #2]
			continue;
		}

		MsDelay (100);
		
		if (DWHCIDeviceControlMessage (pHost, pEndpoint0,
   22764:	e3a01000 	mov	r1, #0
   22768:	e58d1000 	str	r1, [sp]
   2276c:	e58d2004 	str	r2, [sp, #4]
   22770:	e58d3008 	str	r3, [sp, #8]
   22774:	e3a03004 	mov	r3, #4
   22778:	e58d300c 	str	r3, [sp, #12]
   2277c:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   22780:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   22784:	e3a020a3 	mov	r2, #163	; 0xa3
   22788:	e3a03000 	mov	r3, #0
   2278c:	ebffd8f4 	bl	18b64 <DWHCIDeviceControlMessage>
   22790:	e1a03000 	mov	r3, r0
   22794:	e3530004 	cmp	r3, #4
   22798:	0a000001 	beq	227a4 <USBStandardHubEnumeratePorts+0x3c8>
			REQUEST_IN | REQUEST_CLASS | REQUEST_TO_OTHER,
			GET_STATUS, 0, nPort+1, pThis->m_pStatus[nPort], 4) != 4)
		{
			return FALSE;
   2279c:	e3a04000 	mov	r4, #0
   227a0:	ea0001cb 	b	22ed4 <USBStandardHubEnumeratePorts+0xaf8>
		}

		//LogWrite (FromHub, LOG_DEBUG, "Port %u status is 0x%04X", nPort+1, (unsigned) pThis->m_pStatus[nPort]->wPortStatus);
		
		if (!(pThis->m_pStatus[nPort]->wPortStatus & PORT_ENABLE__MASK))
   227a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   227a8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   227ac:	e2822018 	add	r2, r2, #24
   227b0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   227b4:	e1d330b0 	ldrh	r3, [r3]
   227b8:	e6ff3073 	uxth	r3, r3
   227bc:	e2033002 	and	r3, r3, #2
   227c0:	e3530000 	cmp	r3, #0
   227c4:	1a000008 	bne	227ec <USBStandardHubEnumeratePorts+0x410>
		{
			LogWrite (FromHub, LOG_ERROR, "Port %u is not enabled", nPort+1);
   227c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   227cc:	e2833001 	add	r3, r3, #1
   227d0:	e30f0230 	movw	r0, #62000	; 0xf230
   227d4:	e3400002 	movt	r0, #2
   227d8:	e3a01001 	mov	r1, #1
   227dc:	e30f247c 	movw	r2, #62588	; 0xf47c
   227e0:	e3402002 	movt	r2, #2
   227e4:	ebffd059 	bl	16950 <LogWrite>

			continue;
   227e8:	ea0000ad 	b	22aa4 <USBStandardHubEnumeratePorts+0x6c8>
		}

		// check for over-current
		if (pThis->m_pStatus[nPort]->wPortStatus & PORT_OVER_CURRENT__MASK)
   227ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   227f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   227f4:	e2822018 	add	r2, r2, #24
   227f8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   227fc:	e1d330b0 	ldrh	r3, [r3]
   22800:	e6ff3073 	uxth	r3, r3
   22804:	e2033008 	and	r3, r3, #8
   22808:	e3530000 	cmp	r3, #0
   2280c:	0a000019 	beq	22878 <USBStandardHubEnumeratePorts+0x49c>
		{
			DWHCIDeviceControlMessage (pHost, pEndpoint0,
   22810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22814:	e6ff3073 	uxth	r3, r3
   22818:	e2833001 	add	r3, r3, #1
   2281c:	e6ff3073 	uxth	r3, r3
   22820:	e3a02008 	mov	r2, #8
   22824:	e58d2000 	str	r2, [sp]
   22828:	e58d3004 	str	r3, [sp, #4]
   2282c:	e3a03000 	mov	r3, #0
   22830:	e58d3008 	str	r3, [sp, #8]
   22834:	e3a03000 	mov	r3, #0
   22838:	e58d300c 	str	r3, [sp, #12]
   2283c:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   22840:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   22844:	e3a02023 	mov	r2, #35	; 0x23
   22848:	e3a03001 	mov	r3, #1
   2284c:	ebffd8c4 	bl	18b64 <DWHCIDeviceControlMessage>
				REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_OTHER,
				CLEAR_FEATURE, PORT_POWER, nPort+1, 0, 0);

			LogWrite (FromHub, LOG_ERROR, "Over-current condition on port %u", nPort+1);
   22850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22854:	e2833001 	add	r3, r3, #1
   22858:	e30f0230 	movw	r0, #62000	; 0xf230
   2285c:	e3400002 	movt	r0, #2
   22860:	e3a01001 	mov	r1, #1
   22864:	e30f2494 	movw	r2, #62612	; 0xf494
   22868:	e3402002 	movt	r2, #2
   2286c:	ebffd037 	bl	16950 <LogWrite>

			return FALSE;
   22870:	e3a04000 	mov	r4, #0
   22874:	ea000196 	b	22ed4 <USBStandardHubEnumeratePorts+0xaf8>
		}

		TUSBSpeed Speed = USBSpeedUnknown;
   22878:	e3a03003 	mov	r3, #3
   2287c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		if (pThis->m_pStatus[nPort]->wPortStatus & PORT_LOW_SPEED__MASK)
   22880:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22884:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22888:	e2822018 	add	r2, r2, #24
   2288c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22890:	e1d330b0 	ldrh	r3, [r3]
   22894:	e6ff3073 	uxth	r3, r3
   22898:	e2033c02 	and	r3, r3, #512	; 0x200
   2289c:	e3530000 	cmp	r3, #0
   228a0:	0a000002 	beq	228b0 <USBStandardHubEnumeratePorts+0x4d4>
		{
			Speed = USBSpeedLow;
   228a4:	e3a03000 	mov	r3, #0
   228a8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   228ac:	ea00000d 	b	228e8 <USBStandardHubEnumeratePorts+0x50c>
		}
		else if (pThis->m_pStatus[nPort]->wPortStatus & PORT_HIGH_SPEED__MASK)
   228b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   228b4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   228b8:	e2822018 	add	r2, r2, #24
   228bc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   228c0:	e1d330b0 	ldrh	r3, [r3]
   228c4:	e6ff3073 	uxth	r3, r3
   228c8:	e2033b01 	and	r3, r3, #1024	; 0x400
   228cc:	e3530000 	cmp	r3, #0
   228d0:	0a000002 	beq	228e0 <USBStandardHubEnumeratePorts+0x504>
		{
			Speed = USBSpeedHigh;
   228d4:	e3a03002 	mov	r3, #2
   228d8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   228dc:	ea000001 	b	228e8 <USBStandardHubEnumeratePorts+0x50c>
		}
		else
		{
			Speed = USBSpeedFull;
   228e0:	e3a03001 	mov	r3, #1
   228e4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		}

		// first create default device
		assert (pThis->m_pDevice[nPort] == 0);
   228e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   228ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   228f0:	e2822010 	add	r2, r2, #16
   228f4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   228f8:	e3530000 	cmp	r3, #0
   228fc:	0a000005 	beq	22918 <USBStandardHubEnumeratePorts+0x53c>
   22900:	e30f04b8 	movw	r0, #62648	; 0xf4b8
   22904:	e3400002 	movt	r0, #2
   22908:	e30f1244 	movw	r1, #62020	; 0xf244
   2290c:	e3401002 	movt	r1, #2
   22910:	e3002142 	movw	r2, #322	; 0x142
   22914:	ebffd025 	bl	169b0 <uspi_assertion_failed>
		pThis->m_pDevice[nPort] = malloc (sizeof (TUSBDevice));
   22918:	e3a00038 	mov	r0, #56	; 0x38
   2291c:	ebffd04d 	bl	16a58 <malloc>
   22920:	e1a03000 	mov	r3, r0
   22924:	e1a01003 	mov	r1, r3
   22928:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2292c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22930:	e2822010 	add	r2, r2, #16
   22934:	e7831102 	str	r1, [r3, r2, lsl #2]
		assert (pThis->m_pDevice[nPort] != 0);
   22938:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2293c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22940:	e2822010 	add	r2, r2, #16
   22944:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22948:	e3530000 	cmp	r3, #0
   2294c:	1a000005 	bne	22968 <USBStandardHubEnumeratePorts+0x58c>
   22950:	e30f04d8 	movw	r0, #62680	; 0xf4d8
   22954:	e3400002 	movt	r0, #2
   22958:	e30f1244 	movw	r1, #62020	; 0xf244
   2295c:	e3401002 	movt	r1, #2
   22960:	e3a02f51 	mov	r2, #324	; 0x144
   22964:	ebffd011 	bl	169b0 <uspi_assertion_failed>
		USBDevice (pThis->m_pDevice[nPort], pHost, Speed, USBDeviceGetAddress (&pThis->m_USBDevice), nPort+1);
   22968:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2296c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22970:	e2822010 	add	r2, r2, #16
   22974:	e7934102 	ldr	r4, [r3, r2, lsl #2]
   22978:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2297c:	e1a00003 	mov	r0, r3
   22980:	ebfff4ff 	bl	1fd84 <USBDeviceGetAddress>
   22984:	e1a03000 	mov	r3, r0
   22988:	e1a0c003 	mov	ip, r3
   2298c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22990:	e6ef3073 	uxtb	r3, r3
   22994:	e2833001 	add	r3, r3, #1
   22998:	e6ef3073 	uxtb	r3, r3
   2299c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
   229a0:	e58d3000 	str	r3, [sp]
   229a4:	e1a00004 	mov	r0, r4
   229a8:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
   229ac:	e1a0300c 	mov	r3, ip
   229b0:	ebfff082 	bl	1ebc0 <USBDevice>

		if (!USBDeviceInitialize (pThis->m_pDevice[nPort]))
   229b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   229b8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   229bc:	e2822010 	add	r2, r2, #16
   229c0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   229c4:	e1a00003 	mov	r0, r3
   229c8:	ebfff224 	bl	1f260 <USBDeviceInitialize>
   229cc:	e1a03000 	mov	r3, r0
   229d0:	e3530000 	cmp	r3, #0
   229d4:	1a000011 	bne	22a20 <USBStandardHubEnumeratePorts+0x644>
		{
			_USBDevice (pThis->m_pDevice[nPort]);
   229d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   229dc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   229e0:	e2822010 	add	r2, r2, #16
   229e4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   229e8:	e1a00003 	mov	r0, r3
   229ec:	ebfff1bf 	bl	1f0f0 <_USBDevice>
			free (pThis->m_pDevice[nPort]);
   229f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   229f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   229f8:	e2822010 	add	r2, r2, #16
   229fc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22a00:	e1a00003 	mov	r0, r3
   22a04:	ebffd029 	bl	16ab0 <free>
			pThis->m_pDevice[nPort] = 0;
   22a08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22a0c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22a10:	e2822010 	add	r2, r2, #16
   22a14:	e3a01000 	mov	r1, #0
   22a18:	e7831102 	str	r1, [r3, r2, lsl #2]

			continue;
   22a1c:	ea000020 	b	22aa4 <USBStandardHubEnumeratePorts+0x6c8>
		}

		TString *pNames = USBStandardHubGetDeviceNames (pThis->m_pDevice[nPort]);
   22a20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22a24:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22a28:	e2822010 	add	r2, r2, #16
   22a2c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22a30:	e1a00003 	mov	r0, r3
   22a34:	eb00012f 	bl	22ef8 <USBStandardHubGetDeviceNames>
   22a38:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
		assert (pNames != 0);
   22a3c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22a40:	e3530000 	cmp	r3, #0
   22a44:	1a000005 	bne	22a60 <USBStandardHubEnumeratePorts+0x684>
   22a48:	e30f04f8 	movw	r0, #62712	; 0xf4f8
   22a4c:	e3400002 	movt	r0, #2
   22a50:	e30f1244 	movw	r1, #62020	; 0xf244
   22a54:	e3401002 	movt	r1, #2
   22a58:	e3002151 	movw	r2, #337	; 0x151
   22a5c:	ebffcfd3 	bl	169b0 <uspi_assertion_failed>

		LogWrite (FromHub, LOG_NOTICE, "Port %u: Device %s found", nPort+1, StringGet (pNames));
   22a60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22a64:	e2834001 	add	r4, r3, #1
   22a68:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   22a6c:	eb000948 	bl	24f94 <StringGet>
   22a70:	e1a03000 	mov	r3, r0
   22a74:	e58d3000 	str	r3, [sp]
   22a78:	e30f0230 	movw	r0, #62000	; 0xf230
   22a7c:	e3400002 	movt	r0, #2
   22a80:	e3a01003 	mov	r1, #3
   22a84:	e30f2504 	movw	r2, #62724	; 0xf504
   22a88:	e3402002 	movt	r2, #2
   22a8c:	e1a03004 	mov	r3, r4
   22a90:	ebffcfae 	bl	16950 <LogWrite>

		_String (pNames);
   22a94:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   22a98:	eb000918 	bl	24f00 <_String>
		free (pNames);
   22a9c:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   22aa0:	ebffd002 	bl	16ab0 <free>
	// pThis->m_pHubDesc->bPwrOn2PwrGood delay seems to be not enough
	// for some low speed devices, so we use the maximum here
	MsDelay (510);

	// now detect devices, reset and initialize them
	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   22aa4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22aa8:	e2833001 	add	r3, r3, #1
   22aac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   22ab0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22ab4:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   22ab8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22abc:	e1520003 	cmp	r2, r3
   22ac0:	8afffea9 	bhi	2256c <USBStandardHubEnumeratePorts+0x190>
		_String (pNames);
		free (pNames);
	}

	// now configure devices
	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   22ac4:	e3a03000 	mov	r3, #0
   22ac8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   22acc:	ea00005d 	b	22c48 <USBStandardHubEnumeratePorts+0x86c>
	{
		if (pThis->m_pDevice[nPort] == 0)
   22ad0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22ad4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22ad8:	e2822010 	add	r2, r2, #16
   22adc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22ae0:	e3530000 	cmp	r3, #0
   22ae4:	1a000000 	bne	22aec <USBStandardHubEnumeratePorts+0x710>
		{
			continue;
   22ae8:	ea000053 	b	22c3c <USBStandardHubEnumeratePorts+0x860>
		}

		// now create specific device from default device
		TUSBDevice *pChild = USBDeviceFactoryGetDevice (pThis->m_pDevice[nPort]);
   22aec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22af0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22af4:	e2822010 	add	r2, r2, #16
   22af8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22afc:	e1a00003 	mov	r0, r3
   22b00:	ebfff639 	bl	203ec <USBDeviceFactoryGetDevice>
   22b04:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
		if (pChild != 0)
   22b08:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   22b0c:	e3530000 	cmp	r3, #0
   22b10:	0a000030 	beq	22bd8 <USBStandardHubEnumeratePorts+0x7fc>
		{
			_USBDevice (pThis->m_pDevice[nPort]);		// delete default device
   22b14:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22b18:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22b1c:	e2822010 	add	r2, r2, #16
   22b20:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22b24:	e1a00003 	mov	r0, r3
   22b28:	ebfff170 	bl	1f0f0 <_USBDevice>
			free (pThis->m_pDevice[nPort]);
   22b2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22b30:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22b34:	e2822010 	add	r2, r2, #16
   22b38:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22b3c:	e1a00003 	mov	r0, r3
   22b40:	ebffcfda 	bl	16ab0 <free>
			pThis->m_pDevice[nPort] = pChild;		// assign specific device
   22b44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22b48:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22b4c:	e2822010 	add	r2, r2, #16
   22b50:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
   22b54:	e7831102 	str	r1, [r3, r2, lsl #2]

			if (!(*pThis->m_pDevice[nPort]->Configure) (pThis->m_pDevice[nPort]))
   22b58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22b60:	e2822010 	add	r2, r2, #16
   22b64:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22b68:	e5933000 	ldr	r3, [r3]
   22b6c:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
   22b70:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   22b74:	e2811010 	add	r1, r1, #16
   22b78:	e7922101 	ldr	r2, [r2, r1, lsl #2]
   22b7c:	e1a00002 	mov	r0, r2
   22b80:	e12fff33 	blx	r3
   22b84:	e1a03000 	mov	r3, r0
   22b88:	e3530000 	cmp	r3, #0
   22b8c:	1a000008 	bne	22bb4 <USBStandardHubEnumeratePorts+0x7d8>
			{
				LogWrite (FromHub, LOG_ERROR, "Port %u: Cannot configure device", nPort+1);
   22b90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22b94:	e2833001 	add	r3, r3, #1
   22b98:	e30f0230 	movw	r0, #62000	; 0xf230
   22b9c:	e3400002 	movt	r0, #2
   22ba0:	e3a01001 	mov	r1, #1
   22ba4:	e30f2520 	movw	r2, #62752	; 0xf520
   22ba8:	e3402002 	movt	r2, #2
   22bac:	ebffcf67 	bl	16950 <LogWrite>

				continue;
   22bb0:	ea000021 	b	22c3c <USBStandardHubEnumeratePorts+0x860>
			}
			
			LogWrite (FromHub, LOG_DEBUG, "Port %u: Device configured", nPort+1);
   22bb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22bb8:	e2833001 	add	r3, r3, #1
   22bbc:	e30f0230 	movw	r0, #62000	; 0xf230
   22bc0:	e3400002 	movt	r0, #2
   22bc4:	e3a01004 	mov	r1, #4
   22bc8:	e30f2544 	movw	r2, #62788	; 0xf544
   22bcc:	e3402002 	movt	r2, #2
   22bd0:	ebffcf5e 	bl	16950 <LogWrite>
   22bd4:	ea000018 	b	22c3c <USBStandardHubEnumeratePorts+0x860>
		}
		else
		{
			LogWrite (FromHub, LOG_NOTICE, "Port %u: Device is not supported", nPort+1);
   22bd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22bdc:	e2833001 	add	r3, r3, #1
   22be0:	e30f0230 	movw	r0, #62000	; 0xf230
   22be4:	e3400002 	movt	r0, #2
   22be8:	e3a01003 	mov	r1, #3
   22bec:	e30f2560 	movw	r2, #62816	; 0xf560
   22bf0:	e3402002 	movt	r2, #2
   22bf4:	ebffcf55 	bl	16950 <LogWrite>
			
			_USBDevice (pThis->m_pDevice[nPort]);
   22bf8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22bfc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22c00:	e2822010 	add	r2, r2, #16
   22c04:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22c08:	e1a00003 	mov	r0, r3
   22c0c:	ebfff137 	bl	1f0f0 <_USBDevice>
			free (pThis->m_pDevice[nPort]);
   22c10:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22c14:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22c18:	e2822010 	add	r2, r2, #16
   22c1c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22c20:	e1a00003 	mov	r0, r3
   22c24:	ebffcfa1 	bl	16ab0 <free>
			pThis->m_pDevice[nPort] = 0;
   22c28:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22c2c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22c30:	e2822010 	add	r2, r2, #16
   22c34:	e3a01000 	mov	r1, #0
   22c38:	e7831102 	str	r1, [r3, r2, lsl #2]
		_String (pNames);
		free (pNames);
	}

	// now configure devices
	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   22c3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22c40:	e2833001 	add	r3, r3, #1
   22c44:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   22c48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22c4c:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   22c50:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22c54:	e1520003 	cmp	r2, r3
   22c58:	8affff9c 	bhi	22ad0 <USBStandardHubEnumeratePorts+0x6f4>
			pThis->m_pDevice[nPort] = 0;
		}
	}

	// again check for over-current
	TUSBHubStatus *pHubStatus = malloc (sizeof (TUSBHubStatus));
   22c5c:	e3a00004 	mov	r0, #4
   22c60:	ebffcf7c 	bl	16a58 <malloc>
   22c64:	e1a03000 	mov	r3, r0
   22c68:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
	assert (pHubStatus != 0);
   22c6c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   22c70:	e3530000 	cmp	r3, #0
   22c74:	1a000005 	bne	22c90 <USBStandardHubEnumeratePorts+0x8b4>
   22c78:	e30f0584 	movw	r0, #62852	; 0xf584
   22c7c:	e3400002 	movt	r0, #2
   22c80:	e30f1244 	movw	r1, #62020	; 0xf244
   22c84:	e3401002 	movt	r1, #2
   22c88:	e300217e 	movw	r2, #382	; 0x17e
   22c8c:	ebffcf47 	bl	169b0 <uspi_assertion_failed>

	if (DWHCIDeviceControlMessage (pHost, pEndpoint0,
   22c90:	e3a03000 	mov	r3, #0
   22c94:	e58d3000 	str	r3, [sp]
   22c98:	e3a03000 	mov	r3, #0
   22c9c:	e58d3004 	str	r3, [sp, #4]
   22ca0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   22ca4:	e58d3008 	str	r3, [sp, #8]
   22ca8:	e3a03004 	mov	r3, #4
   22cac:	e58d300c 	str	r3, [sp, #12]
   22cb0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   22cb4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   22cb8:	e3a020a0 	mov	r2, #160	; 0xa0
   22cbc:	e3a03000 	mov	r3, #0
   22cc0:	ebffd7a7 	bl	18b64 <DWHCIDeviceControlMessage>
   22cc4:	e1a03000 	mov	r3, r0
   22cc8:	e3530004 	cmp	r3, #4
   22ccc:	0a000009 	beq	22cf8 <USBStandardHubEnumeratePorts+0x91c>
		REQUEST_IN | REQUEST_CLASS,
		GET_STATUS, 0, 0, pHubStatus, sizeof *pHubStatus) != (int) sizeof *pHubStatus)
	{
		LogWrite (FromHub, LOG_ERROR, "Cannot get hub status");
   22cd0:	e30f0230 	movw	r0, #62000	; 0xf230
   22cd4:	e3400002 	movt	r0, #2
   22cd8:	e3a01001 	mov	r1, #1
   22cdc:	e30f2594 	movw	r2, #62868	; 0xf594
   22ce0:	e3402002 	movt	r2, #2
   22ce4:	ebffcf19 	bl	16950 <LogWrite>

		free (pHubStatus);
   22ce8:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
   22cec:	ebffcf6f 	bl	16ab0 <free>

		return FALSE;
   22cf0:	e3a04000 	mov	r4, #0
   22cf4:	ea000076 	b	22ed4 <USBStandardHubEnumeratePorts+0xaf8>
	}

	if (pHubStatus->wHubStatus & HUB_OVER_CURRENT__MASK)
   22cf8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   22cfc:	e1d330b0 	ldrh	r3, [r3]
   22d00:	e6ff3073 	uxth	r3, r3
   22d04:	e2033002 	and	r3, r3, #2
   22d08:	e3530000 	cmp	r3, #0
   22d0c:	0a000024 	beq	22da4 <USBStandardHubEnumeratePorts+0x9c8>
	{
		for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   22d10:	e3a03000 	mov	r3, #0
   22d14:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   22d18:	ea000012 	b	22d68 <USBStandardHubEnumeratePorts+0x98c>
		{
			DWHCIDeviceControlMessage (pHost, pEndpoint0,
   22d1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22d20:	e6ff3073 	uxth	r3, r3
   22d24:	e2833001 	add	r3, r3, #1
   22d28:	e6ff3073 	uxth	r3, r3
   22d2c:	e3a02008 	mov	r2, #8
   22d30:	e58d2000 	str	r2, [sp]
   22d34:	e58d3004 	str	r3, [sp, #4]
   22d38:	e3a03000 	mov	r3, #0
   22d3c:	e58d3008 	str	r3, [sp, #8]
   22d40:	e3a03000 	mov	r3, #0
   22d44:	e58d300c 	str	r3, [sp, #12]
   22d48:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   22d4c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   22d50:	e3a02023 	mov	r2, #35	; 0x23
   22d54:	e3a03001 	mov	r3, #1
   22d58:	ebffd781 	bl	18b64 <DWHCIDeviceControlMessage>
		return FALSE;
	}

	if (pHubStatus->wHubStatus & HUB_OVER_CURRENT__MASK)
	{
		for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   22d5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22d60:	e2833001 	add	r3, r3, #1
   22d64:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   22d68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22d6c:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   22d70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22d74:	e1520003 	cmp	r2, r3
   22d78:	8affffe7 	bhi	22d1c <USBStandardHubEnumeratePorts+0x940>
			DWHCIDeviceControlMessage (pHost, pEndpoint0,
				REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_OTHER,
				CLEAR_FEATURE, PORT_POWER, nPort+1, 0, 0);
		}

		LogWrite (FromHub, LOG_ERROR, "Hub over-current condition");
   22d7c:	e30f0230 	movw	r0, #62000	; 0xf230
   22d80:	e3400002 	movt	r0, #2
   22d84:	e3a01001 	mov	r1, #1
   22d88:	e30f25ac 	movw	r2, #62892	; 0xf5ac
   22d8c:	e3402002 	movt	r2, #2
   22d90:	ebffceee 	bl	16950 <LogWrite>

		free (pHubStatus);
   22d94:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
   22d98:	ebffcf44 	bl	16ab0 <free>

		return FALSE;
   22d9c:	e3a04000 	mov	r4, #0
   22da0:	ea00004b 	b	22ed4 <USBStandardHubEnumeratePorts+0xaf8>
	}

	free (pHubStatus);
   22da4:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
   22da8:	ebffcf40 	bl	16ab0 <free>
	pHubStatus = 0;
   22dac:	e3a03000 	mov	r3, #0
   22db0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

	boolean bResult = TRUE;
   22db4:	e3a03001 	mov	r3, #1
   22db8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   22dbc:	e3a03000 	mov	r3, #0
   22dc0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   22dc4:	ea00003c 	b	22ebc <USBStandardHubEnumeratePorts+0xae0>
	{
		if (DWHCIDeviceControlMessage (pHost, pEndpoint0,
   22dc8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   22dcc:	e6ff3073 	uxth	r3, r3
   22dd0:	e2833001 	add	r3, r3, #1
   22dd4:	e6ff2073 	uxth	r2, r3
			REQUEST_IN | REQUEST_CLASS | REQUEST_TO_OTHER,
			GET_STATUS, 0, nPort+1, pThis->m_pStatus[nPort], 4) != 4)
   22dd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22ddc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   22de0:	e2811018 	add	r1, r1, #24
   22de4:	e7933101 	ldr	r3, [r3, r1, lsl #2]

	boolean bResult = TRUE;

	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
	{
		if (DWHCIDeviceControlMessage (pHost, pEndpoint0,
   22de8:	e3a01000 	mov	r1, #0
   22dec:	e58d1000 	str	r1, [sp]
   22df0:	e58d2004 	str	r2, [sp, #4]
   22df4:	e58d3008 	str	r3, [sp, #8]
   22df8:	e3a03004 	mov	r3, #4
   22dfc:	e58d300c 	str	r3, [sp, #12]
   22e00:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   22e04:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   22e08:	e3a020a3 	mov	r2, #163	; 0xa3
   22e0c:	e3a03000 	mov	r3, #0
   22e10:	ebffd753 	bl	18b64 <DWHCIDeviceControlMessage>
   22e14:	e1a03000 	mov	r3, r0
   22e18:	e3530004 	cmp	r3, #4
   22e1c:	0a000000 	beq	22e24 <USBStandardHubEnumeratePorts+0xa48>
			REQUEST_IN | REQUEST_CLASS | REQUEST_TO_OTHER,
			GET_STATUS, 0, nPort+1, pThis->m_pStatus[nPort], 4) != 4)
		{
			continue;
   22e20:	ea000022 	b	22eb0 <USBStandardHubEnumeratePorts+0xad4>
		}

		if (pThis->m_pStatus[nPort]->wPortStatus & PORT_OVER_CURRENT__MASK)
   22e24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22e28:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   22e2c:	e2822018 	add	r2, r2, #24
   22e30:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22e34:	e1d330b0 	ldrh	r3, [r3]
   22e38:	e6ff3073 	uxth	r3, r3
   22e3c:	e2033008 	and	r3, r3, #8
   22e40:	e3530000 	cmp	r3, #0
   22e44:	0a000019 	beq	22eb0 <USBStandardHubEnumeratePorts+0xad4>
		{
			DWHCIDeviceControlMessage (pHost, pEndpoint0,
   22e48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   22e4c:	e6ff3073 	uxth	r3, r3
   22e50:	e2833001 	add	r3, r3, #1
   22e54:	e6ff3073 	uxth	r3, r3
   22e58:	e3a02008 	mov	r2, #8
   22e5c:	e58d2000 	str	r2, [sp]
   22e60:	e58d3004 	str	r3, [sp, #4]
   22e64:	e3a03000 	mov	r3, #0
   22e68:	e58d3008 	str	r3, [sp, #8]
   22e6c:	e3a03000 	mov	r3, #0
   22e70:	e58d300c 	str	r3, [sp, #12]
   22e74:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   22e78:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   22e7c:	e3a02023 	mov	r2, #35	; 0x23
   22e80:	e3a03001 	mov	r3, #1
   22e84:	ebffd736 	bl	18b64 <DWHCIDeviceControlMessage>
				REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_OTHER,
				CLEAR_FEATURE, PORT_POWER, nPort+1, 0, 0);

			LogWrite (FromHub, LOG_ERROR, "Over-current condition on port %u", nPort+1);
   22e88:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   22e8c:	e2833001 	add	r3, r3, #1
   22e90:	e30f0230 	movw	r0, #62000	; 0xf230
   22e94:	e3400002 	movt	r0, #2
   22e98:	e3a01001 	mov	r1, #1
   22e9c:	e30f2494 	movw	r2, #62612	; 0xf494
   22ea0:	e3402002 	movt	r2, #2
   22ea4:	ebffcea9 	bl	16950 <LogWrite>

			bResult = FALSE;
   22ea8:	e3a03000 	mov	r3, #0
   22eac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
	free (pHubStatus);
	pHubStatus = 0;

	boolean bResult = TRUE;

	for (unsigned nPort = 0; nPort < pThis->m_nPorts; nPort++)
   22eb0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   22eb4:	e2833001 	add	r3, r3, #1
   22eb8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   22ebc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   22ec0:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   22ec4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   22ec8:	e1520003 	cmp	r2, r3
   22ecc:	8affffbd 	bhi	22dc8 <USBStandardHubEnumeratePorts+0x9ec>

			bResult = FALSE;
		}
	}

	return bResult;
   22ed0:	e51b4024 	ldr	r4, [fp, #-36]	; 0xffffffdc
   22ed4:	e1a03005 	mov	r3, r5
   22ed8:	e30203dc 	movw	r0, #9180	; 0x23dc
   22edc:	e3400002 	movt	r0, #2
   22ee0:	e1a01003 	mov	r1, r3
   22ee4:	ebffca5e 	bl	15864 <__cyg_profile_func_exit>
   22ee8:	e1a03004 	mov	r3, r4
}
   22eec:	e1a00003 	mov	r0, r3
   22ef0:	e24bd00c 	sub	sp, fp, #12
   22ef4:	e8bd8830 	pop	{r4, r5, fp, pc}

00022ef8 <USBStandardHubGetDeviceNames>:

TString *USBStandardHubGetDeviceNames (TUSBDevice *pDevice)
{
   22ef8:	e92d4830 	push	{r4, r5, fp, lr}
   22efc:	e28db00c 	add	fp, sp, #12
   22f00:	e24dd018 	sub	sp, sp, #24
   22f04:	e1a0500e 	mov	r5, lr
   22f08:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   22f0c:	e1a03005 	mov	r3, r5
   22f10:	e3020ef8 	movw	r0, #12024	; 0x2ef8
   22f14:	e3400002 	movt	r0, #2
   22f18:	e1a01003 	mov	r1, r3
   22f1c:	ebffc9fe 	bl	1571c <__cyg_profile_func_enter>
	assert (pDevice != 0);
   22f20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22f24:	e3530000 	cmp	r3, #0
   22f28:	1a000005 	bne	22f44 <USBStandardHubGetDeviceNames+0x4c>
   22f2c:	e30f05c8 	movw	r0, #62920	; 0xf5c8
   22f30:	e3400002 	movt	r0, #2
   22f34:	e30f1244 	movw	r1, #62020	; 0xf244
   22f38:	e3401002 	movt	r1, #2
   22f3c:	e30021ba 	movw	r2, #442	; 0x1ba
   22f40:	ebffce9a 	bl	169b0 <uspi_assertion_failed>
	
	TString *pResult = (TString *) malloc (sizeof (TString));
   22f44:	e3a0000c 	mov	r0, #12
   22f48:	ebffcec2 	bl	16a58 <malloc>
   22f4c:	e1a03000 	mov	r3, r0
   22f50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	assert (pResult != 0);
   22f54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22f58:	e3530000 	cmp	r3, #0
   22f5c:	1a000005 	bne	22f78 <USBStandardHubGetDeviceNames+0x80>
   22f60:	e30f05d8 	movw	r0, #62936	; 0xf5d8
   22f64:	e3400002 	movt	r0, #2
   22f68:	e30f1244 	movw	r1, #62020	; 0xf244
   22f6c:	e3401002 	movt	r1, #2
   22f70:	e30021bd 	movw	r2, #445	; 0x1bd
   22f74:	ebffce8d 	bl	169b0 <uspi_assertion_failed>
	String (pResult);
   22f78:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   22f7c:	eb000791 	bl	24dc8 <String>

	for (unsigned nSelector = DeviceNameVendor; nSelector < DeviceNameUnknown; nSelector++)
   22f80:	e3a03000 	mov	r3, #0
   22f84:	e50b3010 	str	r3, [fp, #-16]
   22f88:	ea00002b 	b	2303c <USBStandardHubGetDeviceNames+0x144>
	{
		TString *pName = USBDeviceGetName (pDevice, (TDeviceNameSelector) nSelector);
   22f8c:	e51b3010 	ldr	r3, [fp, #-16]
   22f90:	e6ef3073 	uxtb	r3, r3
   22f94:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   22f98:	e1a01003 	mov	r1, r3
   22f9c:	ebfff2d2 	bl	1faec <USBDeviceGetName>
   22fa0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
		assert (pName != 0);
   22fa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22fa8:	e3530000 	cmp	r3, #0
   22fac:	1a000005 	bne	22fc8 <USBStandardHubGetDeviceNames+0xd0>
   22fb0:	e30f05e8 	movw	r0, #62952	; 0xf5e8
   22fb4:	e3400002 	movt	r0, #2
   22fb8:	e30f1244 	movw	r1, #62020	; 0xf244
   22fbc:	e3401002 	movt	r1, #2
   22fc0:	e30021c3 	movw	r2, #451	; 0x1c3
   22fc4:	ebffce79 	bl	169b0 <uspi_assertion_failed>

		if (StringCompare (pName, "unknown") != 0)
   22fc8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   22fcc:	e30f15f4 	movw	r1, #62964	; 0xf5f4
   22fd0:	e3401002 	movt	r1, #2
   22fd4:	eb0008c5 	bl	252f0 <StringCompare>
   22fd8:	e1a03000 	mov	r3, r0
   22fdc:	e3530000 	cmp	r3, #0
   22fe0:	0a00000e 	beq	23020 <USBStandardHubGetDeviceNames+0x128>
		{
			if (StringGetLength (pResult) > 0)
   22fe4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   22fe8:	eb000848 	bl	25110 <StringGetLength>
   22fec:	e1a03000 	mov	r3, r0
   22ff0:	e3530000 	cmp	r3, #0
   22ff4:	0a000003 	beq	23008 <USBStandardHubGetDeviceNames+0x110>
			{
				StringAppend (pResult, ", ");
   22ff8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   22ffc:	e30f15fc 	movw	r1, #62972	; 0xf5fc
   23000:	e3401002 	movt	r1, #2
   23004:	eb000868 	bl	251ac <StringAppend>
			}

			StringAppend (pResult, StringGet (pName));
   23008:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2300c:	eb0007e0 	bl	24f94 <StringGet>
   23010:	e1a03000 	mov	r3, r0
   23014:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   23018:	e1a01003 	mov	r1, r3
   2301c:	eb000862 	bl	251ac <StringAppend>
		}

		_String (pName);
   23020:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   23024:	eb0007b5 	bl	24f00 <_String>
		free (pName);
   23028:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2302c:	ebffce9f 	bl	16ab0 <free>
	
	TString *pResult = (TString *) malloc (sizeof (TString));
	assert (pResult != 0);
	String (pResult);

	for (unsigned nSelector = DeviceNameVendor; nSelector < DeviceNameUnknown; nSelector++)
   23030:	e51b3010 	ldr	r3, [fp, #-16]
   23034:	e2833001 	add	r3, r3, #1
   23038:	e50b3010 	str	r3, [fp, #-16]
   2303c:	e51b3010 	ldr	r3, [fp, #-16]
   23040:	e3530002 	cmp	r3, #2
   23044:	9affffd0 	bls	22f8c <USBStandardHubGetDeviceNames+0x94>

		_String (pName);
		free (pName);
	}

	if (StringGetLength (pResult) == 0)
   23048:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2304c:	eb00082f 	bl	25110 <StringGetLength>
   23050:	e1a03000 	mov	r3, r0
   23054:	e3530000 	cmp	r3, #0
   23058:	1a000003 	bne	2306c <USBStandardHubGetDeviceNames+0x174>
	{
		StringSet (pResult, "unknown");
   2305c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   23060:	e30f15f4 	movw	r1, #62964	; 0xf5f4
   23064:	e3401002 	movt	r1, #2
   23068:	eb0007ee 	bl	25028 <StringSet>
	}

	return pResult;
   2306c:	e51b4014 	ldr	r4, [fp, #-20]	; 0xffffffec
   23070:	e1a03005 	mov	r3, r5
   23074:	e3020ef8 	movw	r0, #12024	; 0x2ef8
   23078:	e3400002 	movt	r0, #2
   2307c:	e1a01003 	mov	r1, r3
   23080:	ebffc9f7 	bl	15864 <__cyg_profile_func_exit>
   23084:	e1a03004 	mov	r3, r4
}
   23088:	e1a00003 	mov	r0, r3
   2308c:	e24bd00c 	sub	sp, fp, #12
   23090:	e8bd8830 	pop	{r4, r5, fp, pc}

00023094 <DeviceNameService>:
#include <uspios.h>

static TDeviceNameService *s_pThis = 0;

void DeviceNameService (TDeviceNameService *pThis)
{
   23094:	e92d4810 	push	{r4, fp, lr}
   23098:	e28db008 	add	fp, sp, #8
   2309c:	e24dd00c 	sub	sp, sp, #12
   230a0:	e1a0400e 	mov	r4, lr
   230a4:	e50b0010 	str	r0, [fp, #-16]
   230a8:	e1a03004 	mov	r3, r4
   230ac:	e3030094 	movw	r0, #12436	; 0x3094
   230b0:	e3400002 	movt	r0, #2
   230b4:	e1a01003 	mov	r1, r3
   230b8:	ebffc997 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   230bc:	e51b3010 	ldr	r3, [fp, #-16]
   230c0:	e3530000 	cmp	r3, #0
   230c4:	1a000005 	bne	230e0 <DeviceNameService+0x4c>
   230c8:	e30f0600 	movw	r0, #62976	; 0xf600
   230cc:	e3400002 	movt	r0, #2
   230d0:	e30f160c 	movw	r1, #62988	; 0xf60c
   230d4:	e3401002 	movt	r1, #2
   230d8:	e3a0201d 	mov	r2, #29
   230dc:	ebffce33 	bl	169b0 <uspi_assertion_failed>

	pThis->m_pList = 0;
   230e0:	e51b3010 	ldr	r3, [fp, #-16]
   230e4:	e3a02000 	mov	r2, #0
   230e8:	e5832000 	str	r2, [r3]

	assert (s_pThis == 0);
   230ec:	e30b30cc 	movw	r3, #45260	; 0xb0cc
   230f0:	e3403003 	movt	r3, #3
   230f4:	e5933000 	ldr	r3, [r3]
   230f8:	e3530000 	cmp	r3, #0
   230fc:	0a000005 	beq	23118 <DeviceNameService+0x84>
   23100:	e30f0674 	movw	r0, #63092	; 0xf674
   23104:	e3400002 	movt	r0, #2
   23108:	e30f160c 	movw	r1, #62988	; 0xf60c
   2310c:	e3401002 	movt	r1, #2
   23110:	e3a02021 	mov	r2, #33	; 0x21
   23114:	ebffce25 	bl	169b0 <uspi_assertion_failed>
	s_pThis = pThis;
   23118:	e30b30cc 	movw	r3, #45260	; 0xb0cc
   2311c:	e3403003 	movt	r3, #3
   23120:	e51b2010 	ldr	r2, [fp, #-16]
   23124:	e5832000 	str	r2, [r3]
   23128:	e1a03004 	mov	r3, r4
   2312c:	e3030094 	movw	r0, #12436	; 0x3094
   23130:	e3400002 	movt	r0, #2
   23134:	e1a01003 	mov	r1, r3
   23138:	ebffc9c9 	bl	15864 <__cyg_profile_func_exit>
}
   2313c:	e24bd008 	sub	sp, fp, #8
   23140:	e8bd8810 	pop	{r4, fp, pc}

00023144 <_DeviceNameService>:

void _DeviceNameService (TDeviceNameService *pThis)
{
   23144:	e92d4810 	push	{r4, fp, lr}
   23148:	e28db008 	add	fp, sp, #8
   2314c:	e24dd014 	sub	sp, sp, #20
   23150:	e1a0400e 	mov	r4, lr
   23154:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   23158:	e1a03004 	mov	r3, r4
   2315c:	e3030144 	movw	r0, #12612	; 0x3144
   23160:	e3400002 	movt	r0, #2
   23164:	e1a01003 	mov	r1, r3
   23168:	ebffc96b 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2316c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23170:	e3530000 	cmp	r3, #0
   23174:	1a000005 	bne	23190 <_DeviceNameService+0x4c>
   23178:	e30f0600 	movw	r0, #62976	; 0xf600
   2317c:	e3400002 	movt	r0, #2
   23180:	e30f160c 	movw	r1, #62988	; 0xf60c
   23184:	e3401002 	movt	r1, #2
   23188:	e3a02027 	mov	r2, #39	; 0x27
   2318c:	ebffce07 	bl	169b0 <uspi_assertion_failed>

	while (pThis->m_pList != 0)
   23190:	ea000022 	b	23220 <_DeviceNameService+0xdc>
	{
		TDeviceInfo *pNext = pThis->m_pList->pNext;
   23194:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23198:	e5933000 	ldr	r3, [r3]
   2319c:	e5933000 	ldr	r3, [r3]
   231a0:	e50b3010 	str	r3, [fp, #-16]

		assert (pThis->m_pList->pName != 0);
   231a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   231a8:	e5933000 	ldr	r3, [r3]
   231ac:	e5933004 	ldr	r3, [r3, #4]
   231b0:	e3530000 	cmp	r3, #0
   231b4:	1a000005 	bne	231d0 <_DeviceNameService+0x8c>
   231b8:	e30f0684 	movw	r0, #63108	; 0xf684
   231bc:	e3400002 	movt	r0, #2
   231c0:	e30f160c 	movw	r1, #62988	; 0xf60c
   231c4:	e3401002 	movt	r1, #2
   231c8:	e3a0202d 	mov	r2, #45	; 0x2d
   231cc:	ebffcdf7 	bl	169b0 <uspi_assertion_failed>
		free (pThis->m_pList->pName);
   231d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   231d4:	e5933000 	ldr	r3, [r3]
   231d8:	e5933004 	ldr	r3, [r3, #4]
   231dc:	e1a00003 	mov	r0, r3
   231e0:	ebffce32 	bl	16ab0 <free>
		pThis->m_pList->pName = 0;
   231e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   231e8:	e5933000 	ldr	r3, [r3]
   231ec:	e3a02000 	mov	r2, #0
   231f0:	e5832004 	str	r2, [r3, #4]
		
		pThis->m_pList->pDevice = 0;
   231f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   231f8:	e5933000 	ldr	r3, [r3]
   231fc:	e3a02000 	mov	r2, #0
   23200:	e5832008 	str	r2, [r3, #8]
		
		free (pThis->m_pList);
   23204:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23208:	e5933000 	ldr	r3, [r3]
   2320c:	e1a00003 	mov	r0, r3
   23210:	ebffce26 	bl	16ab0 <free>

		pThis->m_pList = pNext;
   23214:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23218:	e51b2010 	ldr	r2, [fp, #-16]
   2321c:	e5832000 	str	r2, [r3]

void _DeviceNameService (TDeviceNameService *pThis)
{
	assert (pThis != 0);

	while (pThis->m_pList != 0)
   23220:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23224:	e5933000 	ldr	r3, [r3]
   23228:	e3530000 	cmp	r3, #0
   2322c:	1affffd8 	bne	23194 <_DeviceNameService+0x50>
		free (pThis->m_pList);

		pThis->m_pList = pNext;
	}
	
	s_pThis = 0;
   23230:	e30b30cc 	movw	r3, #45260	; 0xb0cc
   23234:	e3403003 	movt	r3, #3
   23238:	e3a02000 	mov	r2, #0
   2323c:	e5832000 	str	r2, [r3]
   23240:	e1a03004 	mov	r3, r4
   23244:	e3030144 	movw	r0, #12612	; 0x3144
   23248:	e3400002 	movt	r0, #2
   2324c:	e1a01003 	mov	r1, r3
   23250:	ebffc983 	bl	15864 <__cyg_profile_func_exit>
}
   23254:	e24bd008 	sub	sp, fp, #8
   23258:	e8bd8810 	pop	{r4, fp, pc}

0002325c <DeviceNameServiceAddDevice>:

void DeviceNameServiceAddDevice (TDeviceNameService *pThis, const char *pName, void *pDevice, boolean bBlockDevice)
{
   2325c:	e92d4810 	push	{r4, fp, lr}
   23260:	e28db008 	add	fp, sp, #8
   23264:	e24dd01c 	sub	sp, sp, #28
   23268:	e1a0400e 	mov	r4, lr
   2326c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   23270:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   23274:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   23278:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   2327c:	e1a03004 	mov	r3, r4
   23280:	e303025c 	movw	r0, #12892	; 0x325c
   23284:	e3400002 	movt	r0, #2
   23288:	e1a01003 	mov	r1, r3
   2328c:	ebffc922 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   23290:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23294:	e3530000 	cmp	r3, #0
   23298:	1a000005 	bne	232b4 <DeviceNameServiceAddDevice+0x58>
   2329c:	e30f0600 	movw	r0, #62976	; 0xf600
   232a0:	e3400002 	movt	r0, #2
   232a4:	e30f160c 	movw	r1, #62988	; 0xf60c
   232a8:	e3401002 	movt	r1, #2
   232ac:	e3a0203d 	mov	r2, #61	; 0x3d
   232b0:	ebffcdbe 	bl	169b0 <uspi_assertion_failed>

	TDeviceInfo *pInfo = (TDeviceInfo *) malloc (sizeof (TDeviceInfo));
   232b4:	e3a00010 	mov	r0, #16
   232b8:	ebffcde6 	bl	16a58 <malloc>
   232bc:	e1a03000 	mov	r3, r0
   232c0:	e50b3010 	str	r3, [fp, #-16]
	assert (pInfo != 0);
   232c4:	e51b3010 	ldr	r3, [fp, #-16]
   232c8:	e3530000 	cmp	r3, #0
   232cc:	1a000005 	bne	232e8 <DeviceNameServiceAddDevice+0x8c>
   232d0:	e30f06a0 	movw	r0, #63136	; 0xf6a0
   232d4:	e3400002 	movt	r0, #2
   232d8:	e30f160c 	movw	r1, #62988	; 0xf60c
   232dc:	e3401002 	movt	r1, #2
   232e0:	e3a02040 	mov	r2, #64	; 0x40
   232e4:	ebffcdb1 	bl	169b0 <uspi_assertion_failed>

	assert (pName != 0);
   232e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   232ec:	e3530000 	cmp	r3, #0
   232f0:	1a000005 	bne	2330c <DeviceNameServiceAddDevice+0xb0>
   232f4:	e30f06ac 	movw	r0, #63148	; 0xf6ac
   232f8:	e3400002 	movt	r0, #2
   232fc:	e30f160c 	movw	r1, #62988	; 0xf60c
   23300:	e3401002 	movt	r1, #2
   23304:	e3a02042 	mov	r2, #66	; 0x42
   23308:	ebffcda8 	bl	169b0 <uspi_assertion_failed>
	pInfo->pName = (char *) malloc (strlen (pName)+1);
   2330c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   23310:	eb000bcf 	bl	26254 <uspi_strlen>
   23314:	e1a03000 	mov	r3, r0
   23318:	e2833001 	add	r3, r3, #1
   2331c:	e1a00003 	mov	r0, r3
   23320:	ebffcdcc 	bl	16a58 <malloc>
   23324:	e1a03000 	mov	r3, r0
   23328:	e1a02003 	mov	r2, r3
   2332c:	e51b3010 	ldr	r3, [fp, #-16]
   23330:	e5832004 	str	r2, [r3, #4]
	assert (pInfo->pName != 0);
   23334:	e51b3010 	ldr	r3, [fp, #-16]
   23338:	e5933004 	ldr	r3, [r3, #4]
   2333c:	e3530000 	cmp	r3, #0
   23340:	1a000005 	bne	2335c <DeviceNameServiceAddDevice+0x100>
   23344:	e30f06b8 	movw	r0, #63160	; 0xf6b8
   23348:	e3400002 	movt	r0, #2
   2334c:	e30f160c 	movw	r1, #62988	; 0xf60c
   23350:	e3401002 	movt	r1, #2
   23354:	e3a02044 	mov	r2, #68	; 0x44
   23358:	ebffcd94 	bl	169b0 <uspi_assertion_failed>
	strcpy (pInfo->pName, pName);
   2335c:	e51b3010 	ldr	r3, [fp, #-16]
   23360:	e5933004 	ldr	r3, [r3, #4]
   23364:	e1a00003 	mov	r0, r3
   23368:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2336c:	eb000c24 	bl	26404 <uspi_strcpy>

	assert (pDevice != 0);
   23370:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   23374:	e3530000 	cmp	r3, #0
   23378:	1a000005 	bne	23394 <DeviceNameServiceAddDevice+0x138>
   2337c:	e30f06cc 	movw	r0, #63180	; 0xf6cc
   23380:	e3400002 	movt	r0, #2
   23384:	e30f160c 	movw	r1, #62988	; 0xf60c
   23388:	e3401002 	movt	r1, #2
   2338c:	e3a02047 	mov	r2, #71	; 0x47
   23390:	ebffcd86 	bl	169b0 <uspi_assertion_failed>
	pInfo->pDevice = pDevice;
   23394:	e51b3010 	ldr	r3, [fp, #-16]
   23398:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2339c:	e5832008 	str	r2, [r3, #8]
	
	pInfo->bBlockDevice = bBlockDevice;
   233a0:	e51b3010 	ldr	r3, [fp, #-16]
   233a4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   233a8:	e583200c 	str	r2, [r3, #12]

	pInfo->pNext = pThis->m_pList;
   233ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   233b0:	e5932000 	ldr	r2, [r3]
   233b4:	e51b3010 	ldr	r3, [fp, #-16]
   233b8:	e5832000 	str	r2, [r3]
	pThis->m_pList = pInfo;
   233bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   233c0:	e51b2010 	ldr	r2, [fp, #-16]
   233c4:	e5832000 	str	r2, [r3]
   233c8:	e1a03004 	mov	r3, r4
   233cc:	e303025c 	movw	r0, #12892	; 0x325c
   233d0:	e3400002 	movt	r0, #2
   233d4:	e1a01003 	mov	r1, r3
   233d8:	ebffc921 	bl	15864 <__cyg_profile_func_exit>
}
   233dc:	e24bd008 	sub	sp, fp, #8
   233e0:	e8bd8810 	pop	{r4, fp, pc}

000233e4 <DeviceNameServiceGetDevice>:

void *DeviceNameServiceGetDevice (TDeviceNameService *pThis, const char *pName, boolean bBlockDevice)
{
   233e4:	e92d4830 	push	{r4, r5, fp, lr}
   233e8:	e28db00c 	add	fp, sp, #12
   233ec:	e24dd018 	sub	sp, sp, #24
   233f0:	e1a0500e 	mov	r5, lr
   233f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   233f8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   233fc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   23400:	e1a03005 	mov	r3, r5
   23404:	e30303e4 	movw	r0, #13284	; 0x33e4
   23408:	e3400002 	movt	r0, #2
   2340c:	e1a01003 	mov	r1, r3
   23410:	ebffc8c1 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   23414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23418:	e3530000 	cmp	r3, #0
   2341c:	1a000005 	bne	23438 <DeviceNameServiceGetDevice+0x54>
   23420:	e30f0600 	movw	r0, #62976	; 0xf600
   23424:	e3400002 	movt	r0, #2
   23428:	e30f160c 	movw	r1, #62988	; 0xf60c
   2342c:	e3401002 	movt	r1, #2
   23430:	e3a02052 	mov	r2, #82	; 0x52
   23434:	ebffcd5d 	bl	169b0 <uspi_assertion_failed>
	assert (pName != 0);
   23438:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2343c:	e3530000 	cmp	r3, #0
   23440:	1a000005 	bne	2345c <DeviceNameServiceGetDevice+0x78>
   23444:	e30f06ac 	movw	r0, #63148	; 0xf6ac
   23448:	e3400002 	movt	r0, #2
   2344c:	e30f160c 	movw	r1, #62988	; 0xf60c
   23450:	e3401002 	movt	r1, #2
   23454:	e3a02053 	mov	r2, #83	; 0x53
   23458:	ebffcd54 	bl	169b0 <uspi_assertion_failed>

	TDeviceInfo *pInfo = pThis->m_pList;
   2345c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23460:	e5933000 	ldr	r3, [r3]
   23464:	e50b3010 	str	r3, [fp, #-16]
	while (pInfo != 0)
   23468:	ea000026 	b	23508 <DeviceNameServiceGetDevice+0x124>
	{
		assert (pInfo->pName != 0);
   2346c:	e51b3010 	ldr	r3, [fp, #-16]
   23470:	e5933004 	ldr	r3, [r3, #4]
   23474:	e3530000 	cmp	r3, #0
   23478:	1a000005 	bne	23494 <DeviceNameServiceGetDevice+0xb0>
   2347c:	e30f06b8 	movw	r0, #63160	; 0xf6b8
   23480:	e3400002 	movt	r0, #2
   23484:	e30f160c 	movw	r1, #62988	; 0xf60c
   23488:	e3401002 	movt	r1, #2
   2348c:	e3a02058 	mov	r2, #88	; 0x58
   23490:	ebffcd46 	bl	169b0 <uspi_assertion_failed>
		if (   strcmp (pName, pInfo->pName) == 0
   23494:	e51b3010 	ldr	r3, [fp, #-16]
   23498:	e5933004 	ldr	r3, [r3, #4]
   2349c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   234a0:	e1a01003 	mov	r1, r3
   234a4:	eb000b8a 	bl	262d4 <uspi_strcmp>
   234a8:	e1a03000 	mov	r3, r0
   234ac:	e3530000 	cmp	r3, #0
   234b0:	1a000011 	bne	234fc <DeviceNameServiceGetDevice+0x118>
		    && pInfo->bBlockDevice == bBlockDevice)
   234b4:	e51b3010 	ldr	r3, [fp, #-16]
   234b8:	e593200c 	ldr	r2, [r3, #12]
   234bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   234c0:	e1520003 	cmp	r2, r3
   234c4:	1a00000c 	bne	234fc <DeviceNameServiceGetDevice+0x118>
		{
			assert (pInfo->pDevice != 0);
   234c8:	e51b3010 	ldr	r3, [fp, #-16]
   234cc:	e5933008 	ldr	r3, [r3, #8]
   234d0:	e3530000 	cmp	r3, #0
   234d4:	1a000005 	bne	234f0 <DeviceNameServiceGetDevice+0x10c>
   234d8:	e30f06dc 	movw	r0, #63196	; 0xf6dc
   234dc:	e3400002 	movt	r0, #2
   234e0:	e30f160c 	movw	r1, #62988	; 0xf60c
   234e4:	e3401002 	movt	r1, #2
   234e8:	e3a0205c 	mov	r2, #92	; 0x5c
   234ec:	ebffcd2f 	bl	169b0 <uspi_assertion_failed>
			return pInfo->pDevice;
   234f0:	e51b3010 	ldr	r3, [fp, #-16]
   234f4:	e5934008 	ldr	r4, [r3, #8]
   234f8:	ea000006 	b	23518 <DeviceNameServiceGetDevice+0x134>
		}

		pInfo = pInfo->pNext;
   234fc:	e51b3010 	ldr	r3, [fp, #-16]
   23500:	e5933000 	ldr	r3, [r3]
   23504:	e50b3010 	str	r3, [fp, #-16]
{
	assert (pThis != 0);
	assert (pName != 0);

	TDeviceInfo *pInfo = pThis->m_pList;
	while (pInfo != 0)
   23508:	e51b3010 	ldr	r3, [fp, #-16]
   2350c:	e3530000 	cmp	r3, #0
   23510:	1affffd5 	bne	2346c <DeviceNameServiceGetDevice+0x88>
		}

		pInfo = pInfo->pNext;
	}

	return 0;
   23514:	e3a04000 	mov	r4, #0
   23518:	e1a03005 	mov	r3, r5
   2351c:	e30303e4 	movw	r0, #13284	; 0x33e4
   23520:	e3400002 	movt	r0, #2
   23524:	e1a01003 	mov	r1, r3
   23528:	ebffc8cd 	bl	15864 <__cyg_profile_func_exit>
   2352c:	e1a03004 	mov	r3, r4
}
   23530:	e1a00003 	mov	r0, r3
   23534:	e24bd00c 	sub	sp, fp, #12
   23538:	e8bd8830 	pop	{r4, r5, fp, pc}

0002353c <DeviceNameServiceGet>:

TDeviceNameService *DeviceNameServiceGet (void)
{
   2353c:	e92d4830 	push	{r4, r5, fp, lr}
   23540:	e28db00c 	add	fp, sp, #12
   23544:	e1a0500e 	mov	r5, lr
   23548:	e1a03005 	mov	r3, r5
   2354c:	e303053c 	movw	r0, #13628	; 0x353c
   23550:	e3400002 	movt	r0, #2
   23554:	e1a01003 	mov	r1, r3
   23558:	ebffc86f 	bl	1571c <__cyg_profile_func_enter>
	assert (s_pThis != 0);
   2355c:	e30b30cc 	movw	r3, #45260	; 0xb0cc
   23560:	e3403003 	movt	r3, #3
   23564:	e5933000 	ldr	r3, [r3]
   23568:	e3530000 	cmp	r3, #0
   2356c:	1a000005 	bne	23588 <DeviceNameServiceGet+0x4c>
   23570:	e30f06f0 	movw	r0, #63216	; 0xf6f0
   23574:	e3400002 	movt	r0, #2
   23578:	e30f160c 	movw	r1, #62988	; 0xf60c
   2357c:	e3401002 	movt	r1, #2
   23580:	e3a02068 	mov	r2, #104	; 0x68
   23584:	ebffcd09 	bl	169b0 <uspi_assertion_failed>
	return s_pThis;
   23588:	e30b30cc 	movw	r3, #45260	; 0xb0cc
   2358c:	e3403003 	movt	r3, #3
   23590:	e5934000 	ldr	r4, [r3]
   23594:	e1a03005 	mov	r3, r5
   23598:	e303053c 	movw	r0, #13628	; 0x353c
   2359c:	e3400002 	movt	r0, #2
   235a0:	e1a01003 	mov	r1, r3
   235a4:	ebffc8ae 	bl	15864 <__cyg_profile_func_exit>
   235a8:	e1a03004 	mov	r3, r4
}
   235ac:	e1a00003 	mov	r0, r3
   235b0:	e8bd8830 	pop	{r4, r5, fp, pc}

000235b4 <MACAddress>:
#include <uspi/macaddress.h>
#include <uspi/util.h>
#include <uspi/assert.h>

void MACAddress (TMACAddress *pThis)
{
   235b4:	e92d4810 	push	{r4, fp, lr}
   235b8:	e28db008 	add	fp, sp, #8
   235bc:	e24dd00c 	sub	sp, sp, #12
   235c0:	e1a0400e 	mov	r4, lr
   235c4:	e50b0010 	str	r0, [fp, #-16]
   235c8:	e1a03004 	mov	r3, r4
   235cc:	e30305b4 	movw	r0, #13748	; 0x35b4
   235d0:	e3400002 	movt	r0, #2
   235d4:	e1a01003 	mov	r1, r3
   235d8:	ebffc84f 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   235dc:	e51b3010 	ldr	r3, [fp, #-16]
   235e0:	e3530000 	cmp	r3, #0
   235e4:	1a000005 	bne	23600 <MACAddress+0x4c>
   235e8:	e30f0700 	movw	r0, #63232	; 0xf700
   235ec:	e3400002 	movt	r0, #2
   235f0:	e30f170c 	movw	r1, #63244	; 0xf70c
   235f4:	e3401002 	movt	r1, #2
   235f8:	e3a0201a 	mov	r2, #26
   235fc:	ebffcceb 	bl	169b0 <uspi_assertion_failed>

	pThis->m_bValid = FALSE;
   23600:	e51b3010 	ldr	r3, [fp, #-16]
   23604:	e3a02000 	mov	r2, #0
   23608:	e5832000 	str	r2, [r3]
   2360c:	e1a03004 	mov	r3, r4
   23610:	e30305b4 	movw	r0, #13748	; 0x35b4
   23614:	e3400002 	movt	r0, #2
   23618:	e1a01003 	mov	r1, r3
   2361c:	ebffc890 	bl	15864 <__cyg_profile_func_exit>
}
   23620:	e24bd008 	sub	sp, fp, #8
   23624:	e8bd8810 	pop	{r4, fp, pc}

00023628 <MACAddress2>:

void MACAddress2 (TMACAddress *pThis, const u8 *pAddress)
{
   23628:	e92d4810 	push	{r4, fp, lr}
   2362c:	e28db008 	add	fp, sp, #8
   23630:	e24dd00c 	sub	sp, sp, #12
   23634:	e1a0400e 	mov	r4, lr
   23638:	e50b0010 	str	r0, [fp, #-16]
   2363c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   23640:	e1a03004 	mov	r3, r4
   23644:	e3030628 	movw	r0, #13864	; 0x3628
   23648:	e3400002 	movt	r0, #2
   2364c:	e1a01003 	mov	r1, r3
   23650:	ebffc831 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   23654:	e51b3010 	ldr	r3, [fp, #-16]
   23658:	e3530000 	cmp	r3, #0
   2365c:	1a000005 	bne	23678 <MACAddress2+0x50>
   23660:	e30f0700 	movw	r0, #63232	; 0xf700
   23664:	e3400002 	movt	r0, #2
   23668:	e30f170c 	movw	r1, #63244	; 0xf70c
   2366c:	e3401002 	movt	r1, #2
   23670:	e3a02021 	mov	r2, #33	; 0x21
   23674:	ebffcccd 	bl	169b0 <uspi_assertion_failed>

	MACAddressSet (pThis, pAddress);
   23678:	e51b0010 	ldr	r0, [fp, #-16]
   2367c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   23680:	eb000059 	bl	237ec <MACAddressSet>
   23684:	e1a03004 	mov	r3, r4
   23688:	e3030628 	movw	r0, #13864	; 0x3628
   2368c:	e3400002 	movt	r0, #2
   23690:	e1a01003 	mov	r1, r3
   23694:	ebffc872 	bl	15864 <__cyg_profile_func_exit>
}
   23698:	e24bd008 	sub	sp, fp, #8
   2369c:	e8bd8810 	pop	{r4, fp, pc}

000236a0 <_MACAddress>:

void _MACAddress (TMACAddress *pThis)
{
   236a0:	e92d4810 	push	{r4, fp, lr}
   236a4:	e28db008 	add	fp, sp, #8
   236a8:	e24dd00c 	sub	sp, sp, #12
   236ac:	e1a0400e 	mov	r4, lr
   236b0:	e50b0010 	str	r0, [fp, #-16]
   236b4:	e1a03004 	mov	r3, r4
   236b8:	e30306a0 	movw	r0, #13984	; 0x36a0
   236bc:	e3400002 	movt	r0, #2
   236c0:	e1a01003 	mov	r1, r3
   236c4:	ebffc814 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   236c8:	e51b3010 	ldr	r3, [fp, #-16]
   236cc:	e3530000 	cmp	r3, #0
   236d0:	1a000005 	bne	236ec <_MACAddress+0x4c>
   236d4:	e30f0700 	movw	r0, #63232	; 0xf700
   236d8:	e3400002 	movt	r0, #2
   236dc:	e30f170c 	movw	r1, #63244	; 0xf70c
   236e0:	e3401002 	movt	r1, #2
   236e4:	e3a02028 	mov	r2, #40	; 0x28
   236e8:	ebffccb0 	bl	169b0 <uspi_assertion_failed>

	pThis->m_bValid = FALSE;
   236ec:	e51b3010 	ldr	r3, [fp, #-16]
   236f0:	e3a02000 	mov	r2, #0
   236f4:	e5832000 	str	r2, [r3]
   236f8:	e1a03004 	mov	r3, r4
   236fc:	e30306a0 	movw	r0, #13984	; 0x36a0
   23700:	e3400002 	movt	r0, #2
   23704:	e1a01003 	mov	r1, r3
   23708:	ebffc855 	bl	15864 <__cyg_profile_func_exit>
}
   2370c:	e24bd008 	sub	sp, fp, #8
   23710:	e8bd8810 	pop	{r4, fp, pc}

00023714 <MACAddressIsEqual>:

boolean MACAddressIsEqual (TMACAddress *pThis, TMACAddress *pAddress2)
{
   23714:	e92d4830 	push	{r4, r5, fp, lr}
   23718:	e28db00c 	add	fp, sp, #12
   2371c:	e24dd008 	sub	sp, sp, #8
   23720:	e1a0500e 	mov	r5, lr
   23724:	e50b0010 	str	r0, [fp, #-16]
   23728:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2372c:	e1a03005 	mov	r3, r5
   23730:	e3030714 	movw	r0, #14100	; 0x3714
   23734:	e3400002 	movt	r0, #2
   23738:	e1a01003 	mov	r1, r3
   2373c:	ebffc7f6 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   23740:	e51b3010 	ldr	r3, [fp, #-16]
   23744:	e3530000 	cmp	r3, #0
   23748:	1a000005 	bne	23764 <MACAddressIsEqual+0x50>
   2374c:	e30f0700 	movw	r0, #63232	; 0xf700
   23750:	e3400002 	movt	r0, #2
   23754:	e30f170c 	movw	r1, #63244	; 0xf70c
   23758:	e3401002 	movt	r1, #2
   2375c:	e3a0202f 	mov	r2, #47	; 0x2f
   23760:	ebffcc92 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   23764:	e51b3010 	ldr	r3, [fp, #-16]
   23768:	e5933000 	ldr	r3, [r3]
   2376c:	e3530000 	cmp	r3, #0
   23770:	1a000005 	bne	2378c <MACAddressIsEqual+0x78>
   23774:	e30f076c 	movw	r0, #63340	; 0xf76c
   23778:	e3400002 	movt	r0, #2
   2377c:	e30f170c 	movw	r1, #63244	; 0xf70c
   23780:	e3401002 	movt	r1, #2
   23784:	e3a02030 	mov	r2, #48	; 0x30
   23788:	ebffcc88 	bl	169b0 <uspi_assertion_failed>
	
	return memcmp (pThis->m_Address, MACAddressGet (pAddress2), MAC_ADDRESS_SIZE) == 0 ? TRUE : FALSE;
   2378c:	e51b3010 	ldr	r3, [fp, #-16]
   23790:	e2834004 	add	r4, r3, #4
   23794:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   23798:	eb000063 	bl	2392c <MACAddressGet>
   2379c:	e1a03000 	mov	r3, r0
   237a0:	e1a00004 	mov	r0, r4
   237a4:	e1a01003 	mov	r1, r3
   237a8:	e3a02006 	mov	r2, #6
   237ac:	eb000a72 	bl	2617c <uspi_memcmp>
   237b0:	e1a03000 	mov	r3, r0
   237b4:	e3530000 	cmp	r3, #0
   237b8:	03a03001 	moveq	r3, #1
   237bc:	13a03000 	movne	r3, #0
   237c0:	e6ef3073 	uxtb	r3, r3
   237c4:	e1a04003 	mov	r4, r3
   237c8:	e1a03005 	mov	r3, r5
   237cc:	e3030714 	movw	r0, #14100	; 0x3714
   237d0:	e3400002 	movt	r0, #2
   237d4:	e1a01003 	mov	r1, r3
   237d8:	ebffc821 	bl	15864 <__cyg_profile_func_exit>
   237dc:	e1a03004 	mov	r3, r4
}
   237e0:	e1a00003 	mov	r0, r3
   237e4:	e24bd00c 	sub	sp, fp, #12
   237e8:	e8bd8830 	pop	{r4, r5, fp, pc}

000237ec <MACAddressSet>:

void MACAddressSet (TMACAddress *pThis, const u8 *pAddress)
{
   237ec:	e92d4810 	push	{r4, fp, lr}
   237f0:	e28db008 	add	fp, sp, #8
   237f4:	e24dd00c 	sub	sp, sp, #12
   237f8:	e1a0400e 	mov	r4, lr
   237fc:	e50b0010 	str	r0, [fp, #-16]
   23800:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   23804:	e1a03004 	mov	r3, r4
   23808:	e30307ec 	movw	r0, #14316	; 0x37ec
   2380c:	e3400002 	movt	r0, #2
   23810:	e1a01003 	mov	r1, r3
   23814:	ebffc7c0 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   23818:	e51b3010 	ldr	r3, [fp, #-16]
   2381c:	e3530000 	cmp	r3, #0
   23820:	1a000005 	bne	2383c <MACAddressSet+0x50>
   23824:	e30f0700 	movw	r0, #63232	; 0xf700
   23828:	e3400002 	movt	r0, #2
   2382c:	e30f170c 	movw	r1, #63244	; 0xf70c
   23830:	e3401002 	movt	r1, #2
   23834:	e3a02037 	mov	r2, #55	; 0x37
   23838:	ebffcc5c 	bl	169b0 <uspi_assertion_failed>
	assert (pAddress != 0);
   2383c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23840:	e3530000 	cmp	r3, #0
   23844:	1a000005 	bne	23860 <MACAddressSet+0x74>
   23848:	e30f077c 	movw	r0, #63356	; 0xf77c
   2384c:	e3400002 	movt	r0, #2
   23850:	e30f170c 	movw	r1, #63244	; 0xf70c
   23854:	e3401002 	movt	r1, #2
   23858:	e3a02038 	mov	r2, #56	; 0x38
   2385c:	ebffcc53 	bl	169b0 <uspi_assertion_failed>

	memcpy (pThis->m_Address, pAddress, MAC_ADDRESS_SIZE);
   23860:	e51b3010 	ldr	r3, [fp, #-16]
   23864:	e2833004 	add	r3, r3, #4
   23868:	e1a00003 	mov	r0, r3
   2386c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   23870:	e3a02006 	mov	r2, #6
   23874:	eb000a18 	bl	260dc <uspi_memcpy>
	pThis->m_bValid = TRUE;
   23878:	e51b3010 	ldr	r3, [fp, #-16]
   2387c:	e3a02001 	mov	r2, #1
   23880:	e5832000 	str	r2, [r3]
   23884:	e1a03004 	mov	r3, r4
   23888:	e30307ec 	movw	r0, #14316	; 0x37ec
   2388c:	e3400002 	movt	r0, #2
   23890:	e1a01003 	mov	r1, r3
   23894:	ebffc7f2 	bl	15864 <__cyg_profile_func_exit>
}
   23898:	e24bd008 	sub	sp, fp, #8
   2389c:	e8bd8810 	pop	{r4, fp, pc}

000238a0 <MACAddressSetBroadcast>:

void MACAddressSetBroadcast (TMACAddress *pThis)
{
   238a0:	e92d4810 	push	{r4, fp, lr}
   238a4:	e28db008 	add	fp, sp, #8
   238a8:	e24dd00c 	sub	sp, sp, #12
   238ac:	e1a0400e 	mov	r4, lr
   238b0:	e50b0010 	str	r0, [fp, #-16]
   238b4:	e1a03004 	mov	r3, r4
   238b8:	e30308a0 	movw	r0, #14496	; 0x38a0
   238bc:	e3400002 	movt	r0, #2
   238c0:	e1a01003 	mov	r1, r3
   238c4:	ebffc794 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   238c8:	e51b3010 	ldr	r3, [fp, #-16]
   238cc:	e3530000 	cmp	r3, #0
   238d0:	1a000005 	bne	238ec <MACAddressSetBroadcast+0x4c>
   238d4:	e30f0700 	movw	r0, #63232	; 0xf700
   238d8:	e3400002 	movt	r0, #2
   238dc:	e30f170c 	movw	r1, #63244	; 0xf70c
   238e0:	e3401002 	movt	r1, #2
   238e4:	e3a02040 	mov	r2, #64	; 0x40
   238e8:	ebffcc30 	bl	169b0 <uspi_assertion_failed>

	memset (pThis->m_Address, 0xFF, MAC_ADDRESS_SIZE);
   238ec:	e51b3010 	ldr	r3, [fp, #-16]
   238f0:	e2833004 	add	r3, r3, #4
   238f4:	e1a00003 	mov	r0, r3
   238f8:	e3a010ff 	mov	r1, #255	; 0xff
   238fc:	e3a02006 	mov	r2, #6
   23900:	eb0009d1 	bl	2604c <uspi_memset>
	pThis->m_bValid = TRUE;
   23904:	e51b3010 	ldr	r3, [fp, #-16]
   23908:	e3a02001 	mov	r2, #1
   2390c:	e5832000 	str	r2, [r3]
   23910:	e1a03004 	mov	r3, r4
   23914:	e30308a0 	movw	r0, #14496	; 0x38a0
   23918:	e3400002 	movt	r0, #2
   2391c:	e1a01003 	mov	r1, r3
   23920:	ebffc7cf 	bl	15864 <__cyg_profile_func_exit>
}
   23924:	e24bd008 	sub	sp, fp, #8
   23928:	e8bd8810 	pop	{r4, fp, pc}

0002392c <MACAddressGet>:

const u8 *MACAddressGet (TMACAddress *pThis)
{
   2392c:	e92d4830 	push	{r4, r5, fp, lr}
   23930:	e28db00c 	add	fp, sp, #12
   23934:	e24dd008 	sub	sp, sp, #8
   23938:	e1a0500e 	mov	r5, lr
   2393c:	e50b0010 	str	r0, [fp, #-16]
   23940:	e1a03005 	mov	r3, r5
   23944:	e303092c 	movw	r0, #14636	; 0x392c
   23948:	e3400002 	movt	r0, #2
   2394c:	e1a01003 	mov	r1, r3
   23950:	ebffc771 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   23954:	e51b3010 	ldr	r3, [fp, #-16]
   23958:	e3530000 	cmp	r3, #0
   2395c:	1a000005 	bne	23978 <MACAddressGet+0x4c>
   23960:	e30f0700 	movw	r0, #63232	; 0xf700
   23964:	e3400002 	movt	r0, #2
   23968:	e30f170c 	movw	r1, #63244	; 0xf70c
   2396c:	e3401002 	movt	r1, #2
   23970:	e3a02048 	mov	r2, #72	; 0x48
   23974:	ebffcc0d 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   23978:	e51b3010 	ldr	r3, [fp, #-16]
   2397c:	e5933000 	ldr	r3, [r3]
   23980:	e3530000 	cmp	r3, #0
   23984:	1a000005 	bne	239a0 <MACAddressGet+0x74>
   23988:	e30f076c 	movw	r0, #63340	; 0xf76c
   2398c:	e3400002 	movt	r0, #2
   23990:	e30f170c 	movw	r1, #63244	; 0xf70c
   23994:	e3401002 	movt	r1, #2
   23998:	e3a02049 	mov	r2, #73	; 0x49
   2399c:	ebffcc03 	bl	169b0 <uspi_assertion_failed>

	return pThis->m_Address;
   239a0:	e51b3010 	ldr	r3, [fp, #-16]
   239a4:	e2834004 	add	r4, r3, #4
   239a8:	e1a03005 	mov	r3, r5
   239ac:	e303092c 	movw	r0, #14636	; 0x392c
   239b0:	e3400002 	movt	r0, #2
   239b4:	e1a01003 	mov	r1, r3
   239b8:	ebffc7a9 	bl	15864 <__cyg_profile_func_exit>
   239bc:	e1a03004 	mov	r3, r4
}
   239c0:	e1a00003 	mov	r0, r3
   239c4:	e24bd00c 	sub	sp, fp, #12
   239c8:	e8bd8830 	pop	{r4, r5, fp, pc}

000239cc <MACAddressCopyTo>:

void MACAddressCopyTo (TMACAddress *pThis, u8 *pBuffer)
{
   239cc:	e92d4810 	push	{r4, fp, lr}
   239d0:	e28db008 	add	fp, sp, #8
   239d4:	e24dd00c 	sub	sp, sp, #12
   239d8:	e1a0400e 	mov	r4, lr
   239dc:	e50b0010 	str	r0, [fp, #-16]
   239e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   239e4:	e1a03004 	mov	r3, r4
   239e8:	e30309cc 	movw	r0, #14796	; 0x39cc
   239ec:	e3400002 	movt	r0, #2
   239f0:	e1a01003 	mov	r1, r3
   239f4:	ebffc748 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   239f8:	e51b3010 	ldr	r3, [fp, #-16]
   239fc:	e3530000 	cmp	r3, #0
   23a00:	1a000005 	bne	23a1c <MACAddressCopyTo+0x50>
   23a04:	e30f0700 	movw	r0, #63232	; 0xf700
   23a08:	e3400002 	movt	r0, #2
   23a0c:	e30f170c 	movw	r1, #63244	; 0xf70c
   23a10:	e3401002 	movt	r1, #2
   23a14:	e3a02050 	mov	r2, #80	; 0x50
   23a18:	ebffcbe4 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   23a1c:	e51b3010 	ldr	r3, [fp, #-16]
   23a20:	e5933000 	ldr	r3, [r3]
   23a24:	e3530000 	cmp	r3, #0
   23a28:	1a000005 	bne	23a44 <MACAddressCopyTo+0x78>
   23a2c:	e30f076c 	movw	r0, #63340	; 0xf76c
   23a30:	e3400002 	movt	r0, #2
   23a34:	e30f170c 	movw	r1, #63244	; 0xf70c
   23a38:	e3401002 	movt	r1, #2
   23a3c:	e3a02051 	mov	r2, #81	; 0x51
   23a40:	ebffcbda 	bl	169b0 <uspi_assertion_failed>
	assert (pBuffer != 0);
   23a44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23a48:	e3530000 	cmp	r3, #0
   23a4c:	1a000005 	bne	23a68 <MACAddressCopyTo+0x9c>
   23a50:	e30f078c 	movw	r0, #63372	; 0xf78c
   23a54:	e3400002 	movt	r0, #2
   23a58:	e30f170c 	movw	r1, #63244	; 0xf70c
   23a5c:	e3401002 	movt	r1, #2
   23a60:	e3a02052 	mov	r2, #82	; 0x52
   23a64:	ebffcbd1 	bl	169b0 <uspi_assertion_failed>

	memcpy (pBuffer, pThis->m_Address, MAC_ADDRESS_SIZE);
   23a68:	e51b3010 	ldr	r3, [fp, #-16]
   23a6c:	e2833004 	add	r3, r3, #4
   23a70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   23a74:	e1a01003 	mov	r1, r3
   23a78:	e3a02006 	mov	r2, #6
   23a7c:	eb000996 	bl	260dc <uspi_memcpy>
   23a80:	e1a03004 	mov	r3, r4
   23a84:	e30309cc 	movw	r0, #14796	; 0x39cc
   23a88:	e3400002 	movt	r0, #2
   23a8c:	e1a01003 	mov	r1, r3
   23a90:	ebffc773 	bl	15864 <__cyg_profile_func_exit>
}
   23a94:	e24bd008 	sub	sp, fp, #8
   23a98:	e8bd8810 	pop	{r4, fp, pc}

00023a9c <MACAddressIsBroadcast>:

boolean MACAddressIsBroadcast (TMACAddress *pThis)
{
   23a9c:	e92d4830 	push	{r4, r5, fp, lr}
   23aa0:	e28db00c 	add	fp, sp, #12
   23aa4:	e24dd010 	sub	sp, sp, #16
   23aa8:	e1a0500e 	mov	r5, lr
   23aac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   23ab0:	e1a03005 	mov	r3, r5
   23ab4:	e3030a9c 	movw	r0, #15004	; 0x3a9c
   23ab8:	e3400002 	movt	r0, #2
   23abc:	e1a01003 	mov	r1, r3
   23ac0:	ebffc715 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   23ac4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23ac8:	e3530000 	cmp	r3, #0
   23acc:	1a000005 	bne	23ae8 <MACAddressIsBroadcast+0x4c>
   23ad0:	e30f0700 	movw	r0, #63232	; 0xf700
   23ad4:	e3400002 	movt	r0, #2
   23ad8:	e30f170c 	movw	r1, #63244	; 0xf70c
   23adc:	e3401002 	movt	r1, #2
   23ae0:	e3a02059 	mov	r2, #89	; 0x59
   23ae4:	ebffcbb1 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   23ae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23aec:	e5933000 	ldr	r3, [r3]
   23af0:	e3530000 	cmp	r3, #0
   23af4:	1a000005 	bne	23b10 <MACAddressIsBroadcast+0x74>
   23af8:	e30f076c 	movw	r0, #63340	; 0xf76c
   23afc:	e3400002 	movt	r0, #2
   23b00:	e30f170c 	movw	r1, #63244	; 0xf70c
   23b04:	e3401002 	movt	r1, #2
   23b08:	e3a0205a 	mov	r2, #90	; 0x5a
   23b0c:	ebffcba7 	bl	169b0 <uspi_assertion_failed>

	for (unsigned i = 0; i < MAC_ADDRESS_SIZE; i++)
   23b10:	e3a03000 	mov	r3, #0
   23b14:	e50b3010 	str	r3, [fp, #-16]
   23b18:	ea00000a 	b	23b48 <MACAddressIsBroadcast+0xac>
	{
		if (pThis->m_Address[i] != 0xFF)
   23b1c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   23b20:	e51b3010 	ldr	r3, [fp, #-16]
   23b24:	e0823003 	add	r3, r2, r3
   23b28:	e5d33004 	ldrb	r3, [r3, #4]
   23b2c:	e35300ff 	cmp	r3, #255	; 0xff
   23b30:	0a000001 	beq	23b3c <MACAddressIsBroadcast+0xa0>
		{
			return FALSE;
   23b34:	e3a04000 	mov	r4, #0
   23b38:	ea000006 	b	23b58 <MACAddressIsBroadcast+0xbc>
boolean MACAddressIsBroadcast (TMACAddress *pThis)
{
	assert (pThis != 0);
	assert (pThis->m_bValid);

	for (unsigned i = 0; i < MAC_ADDRESS_SIZE; i++)
   23b3c:	e51b3010 	ldr	r3, [fp, #-16]
   23b40:	e2833001 	add	r3, r3, #1
   23b44:	e50b3010 	str	r3, [fp, #-16]
   23b48:	e51b3010 	ldr	r3, [fp, #-16]
   23b4c:	e3530005 	cmp	r3, #5
   23b50:	9afffff1 	bls	23b1c <MACAddressIsBroadcast+0x80>
		{
			return FALSE;
		}
	}

	return TRUE;
   23b54:	e3a04001 	mov	r4, #1
   23b58:	e1a03005 	mov	r3, r5
   23b5c:	e3030a9c 	movw	r0, #15004	; 0x3a9c
   23b60:	e3400002 	movt	r0, #2
   23b64:	e1a01003 	mov	r1, r3
   23b68:	ebffc73d 	bl	15864 <__cyg_profile_func_exit>
   23b6c:	e1a03004 	mov	r3, r4
}
   23b70:	e1a00003 	mov	r0, r3
   23b74:	e24bd00c 	sub	sp, fp, #12
   23b78:	e8bd8830 	pop	{r4, r5, fp, pc}

00023b7c <MACAddressGetSize>:

unsigned MACAddressGetSize (TMACAddress *pThis)
{
   23b7c:	e92d4830 	push	{r4, r5, fp, lr}
   23b80:	e28db00c 	add	fp, sp, #12
   23b84:	e24dd008 	sub	sp, sp, #8
   23b88:	e1a0500e 	mov	r5, lr
   23b8c:	e50b0010 	str	r0, [fp, #-16]
   23b90:	e1a03005 	mov	r3, r5
   23b94:	e3030b7c 	movw	r0, #15228	; 0x3b7c
   23b98:	e3400002 	movt	r0, #2
   23b9c:	e1a01003 	mov	r1, r3
   23ba0:	ebffc6dd 	bl	1571c <__cyg_profile_func_enter>
	return MAC_ADDRESS_SIZE;
   23ba4:	e3a04006 	mov	r4, #6
   23ba8:	e1a03005 	mov	r3, r5
   23bac:	e3030b7c 	movw	r0, #15228	; 0x3b7c
   23bb0:	e3400002 	movt	r0, #2
   23bb4:	e1a01003 	mov	r1, r3
   23bb8:	ebffc729 	bl	15864 <__cyg_profile_func_exit>
   23bbc:	e1a03004 	mov	r3, r4
}
   23bc0:	e1a00003 	mov	r0, r3
   23bc4:	e24bd00c 	sub	sp, fp, #12
   23bc8:	e8bd8830 	pop	{r4, r5, fp, pc}

00023bcc <MACAddressFormat>:

void MACAddressFormat (TMACAddress *pThis, TString *pString)
{
   23bcc:	e92d4810 	push	{r4, fp, lr}
   23bd0:	e28db008 	add	fp, sp, #8
   23bd4:	e24dd01c 	sub	sp, sp, #28
   23bd8:	e1a0400e 	mov	r4, lr
   23bdc:	e50b0010 	str	r0, [fp, #-16]
   23be0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   23be4:	e1a03004 	mov	r3, r4
   23be8:	e3030bcc 	movw	r0, #15308	; 0x3bcc
   23bec:	e3400002 	movt	r0, #2
   23bf0:	e1a01003 	mov	r1, r3
   23bf4:	ebffc6c8 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   23bf8:	e51b3010 	ldr	r3, [fp, #-16]
   23bfc:	e3530000 	cmp	r3, #0
   23c00:	1a000005 	bne	23c1c <MACAddressFormat+0x50>
   23c04:	e30f0700 	movw	r0, #63232	; 0xf700
   23c08:	e3400002 	movt	r0, #2
   23c0c:	e30f170c 	movw	r1, #63244	; 0xf70c
   23c10:	e3401002 	movt	r1, #2
   23c14:	e3a0206e 	mov	r2, #110	; 0x6e
   23c18:	ebffcb64 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_bValid);
   23c1c:	e51b3010 	ldr	r3, [fp, #-16]
   23c20:	e5933000 	ldr	r3, [r3]
   23c24:	e3530000 	cmp	r3, #0
   23c28:	1a000005 	bne	23c44 <MACAddressFormat+0x78>
   23c2c:	e30f076c 	movw	r0, #63340	; 0xf76c
   23c30:	e3400002 	movt	r0, #2
   23c34:	e30f170c 	movw	r1, #63244	; 0xf70c
   23c38:	e3401002 	movt	r1, #2
   23c3c:	e3a0206f 	mov	r2, #111	; 0x6f
   23c40:	ebffcb5a 	bl	169b0 <uspi_assertion_failed>

	assert (pString != 0);
   23c44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23c48:	e3530000 	cmp	r3, #0
   23c4c:	1a000005 	bne	23c68 <MACAddressFormat+0x9c>
   23c50:	e30f079c 	movw	r0, #63388	; 0xf79c
   23c54:	e3400002 	movt	r0, #2
   23c58:	e30f170c 	movw	r1, #63244	; 0xf70c
   23c5c:	e3401002 	movt	r1, #2
   23c60:	e3a02071 	mov	r2, #113	; 0x71
   23c64:	ebffcb51 	bl	169b0 <uspi_assertion_failed>
	StringFormat (pString, "%02X:%02X:%02X:%02X:%02X:%02X",
			(unsigned) pThis->m_Address[0], (unsigned) pThis->m_Address[1],
   23c68:	e51b3010 	ldr	r3, [fp, #-16]
   23c6c:	e5d33004 	ldrb	r3, [r3, #4]
{
	assert (pThis != 0);
	assert (pThis->m_bValid);

	assert (pString != 0);
	StringFormat (pString, "%02X:%02X:%02X:%02X:%02X:%02X",
   23c70:	e1a0e003 	mov	lr, r3
			(unsigned) pThis->m_Address[0], (unsigned) pThis->m_Address[1],
   23c74:	e51b3010 	ldr	r3, [fp, #-16]
   23c78:	e5d33005 	ldrb	r3, [r3, #5]
{
	assert (pThis != 0);
	assert (pThis->m_bValid);

	assert (pString != 0);
	StringFormat (pString, "%02X:%02X:%02X:%02X:%02X:%02X",
   23c7c:	e1a0c003 	mov	ip, r3
			(unsigned) pThis->m_Address[0], (unsigned) pThis->m_Address[1],
			(unsigned) pThis->m_Address[2], (unsigned) pThis->m_Address[3],
   23c80:	e51b3010 	ldr	r3, [fp, #-16]
   23c84:	e5d33006 	ldrb	r3, [r3, #6]
{
	assert (pThis != 0);
	assert (pThis->m_bValid);

	assert (pString != 0);
	StringFormat (pString, "%02X:%02X:%02X:%02X:%02X:%02X",
   23c88:	e1a00003 	mov	r0, r3
			(unsigned) pThis->m_Address[0], (unsigned) pThis->m_Address[1],
			(unsigned) pThis->m_Address[2], (unsigned) pThis->m_Address[3],
   23c8c:	e51b3010 	ldr	r3, [fp, #-16]
   23c90:	e5d33007 	ldrb	r3, [r3, #7]
{
	assert (pThis != 0);
	assert (pThis->m_bValid);

	assert (pString != 0);
	StringFormat (pString, "%02X:%02X:%02X:%02X:%02X:%02X",
   23c94:	e1a01003 	mov	r1, r3
			(unsigned) pThis->m_Address[0], (unsigned) pThis->m_Address[1],
			(unsigned) pThis->m_Address[2], (unsigned) pThis->m_Address[3],
			(unsigned) pThis->m_Address[4], (unsigned) pThis->m_Address[5]);
   23c98:	e51b3010 	ldr	r3, [fp, #-16]
   23c9c:	e5d33008 	ldrb	r3, [r3, #8]
{
	assert (pThis != 0);
	assert (pThis->m_bValid);

	assert (pString != 0);
	StringFormat (pString, "%02X:%02X:%02X:%02X:%02X:%02X",
   23ca0:	e1a02003 	mov	r2, r3
			(unsigned) pThis->m_Address[0], (unsigned) pThis->m_Address[1],
			(unsigned) pThis->m_Address[2], (unsigned) pThis->m_Address[3],
			(unsigned) pThis->m_Address[4], (unsigned) pThis->m_Address[5]);
   23ca4:	e51b3010 	ldr	r3, [fp, #-16]
   23ca8:	e5d33009 	ldrb	r3, [r3, #9]
{
	assert (pThis != 0);
	assert (pThis->m_bValid);

	assert (pString != 0);
	StringFormat (pString, "%02X:%02X:%02X:%02X:%02X:%02X",
   23cac:	e58d0000 	str	r0, [sp]
   23cb0:	e58d1004 	str	r1, [sp, #4]
   23cb4:	e58d2008 	str	r2, [sp, #8]
   23cb8:	e58d300c 	str	r3, [sp, #12]
   23cbc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   23cc0:	e30f17ac 	movw	r1, #63404	; 0xf7ac
   23cc4:	e3401002 	movt	r1, #2
   23cc8:	e1a0200e 	mov	r2, lr
   23ccc:	e1a0300c 	mov	r3, ip
   23cd0:	eb0005e0 	bl	25458 <StringFormat>
   23cd4:	e1a03004 	mov	r3, r4
   23cd8:	e3030bcc 	movw	r0, #15308	; 0x3bcc
   23cdc:	e3400002 	movt	r0, #2
   23ce0:	e1a01003 	mov	r1, r3
   23ce4:	ebffc6de 	bl	15864 <__cyg_profile_func_exit>
			(unsigned) pThis->m_Address[0], (unsigned) pThis->m_Address[1],
			(unsigned) pThis->m_Address[2], (unsigned) pThis->m_Address[3],
			(unsigned) pThis->m_Address[4], (unsigned) pThis->m_Address[5]);
}
   23ce8:	e24bd008 	sub	sp, fp, #8
   23cec:	e8bd8810 	pop	{r4, fp, pc}

00023cf0 <SMSC951xDevice>:
void SMSC951xDeviceDumpReg (TSMSC951xDevice *pThis, const char *pName, u32 nIndex);
void SMSC951xDeviceDumpRegs (TSMSC951xDevice *pThis);
#endif

void SMSC951xDevice (TSMSC951xDevice *pThis, TUSBDevice *pDevice)
{
   23cf0:	e92d4810 	push	{r4, fp, lr}
   23cf4:	e28db008 	add	fp, sp, #8
   23cf8:	e24dd00c 	sub	sp, sp, #12
   23cfc:	e1a0400e 	mov	r4, lr
   23d00:	e50b0010 	str	r0, [fp, #-16]
   23d04:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   23d08:	e1a03004 	mov	r3, r4
   23d0c:	e3030cf0 	movw	r0, #15600	; 0x3cf0
   23d10:	e3400002 	movt	r0, #2
   23d14:	e1a01003 	mov	r1, r3
   23d18:	ebffc67f 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   23d1c:	e51b3010 	ldr	r3, [fp, #-16]
   23d20:	e3530000 	cmp	r3, #0
   23d24:	1a000005 	bne	23d40 <SMSC951xDevice+0x50>
   23d28:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   23d2c:	e3400002 	movt	r0, #2
   23d30:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   23d34:	e3401002 	movt	r1, #2
   23d38:	e3a02088 	mov	r2, #136	; 0x88
   23d3c:	ebffcb1b 	bl	169b0 <uspi_assertion_failed>

	USBDeviceCopy (&pThis->m_USBDevice, pDevice);
   23d40:	e51b3010 	ldr	r3, [fp, #-16]
   23d44:	e1a00003 	mov	r0, r3
   23d48:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   23d4c:	ebffec17 	bl	1edb0 <USBDeviceCopy>
	pThis->m_USBDevice.Configure = SMSC951xDeviceConfigure;
   23d50:	e51b2010 	ldr	r2, [fp, #-16]
   23d54:	e3033ef8 	movw	r3, #16120	; 0x3ef8
   23d58:	e3403002 	movt	r3, #2
   23d5c:	e5823000 	str	r3, [r2]

	pThis->m_pEndpointBulkIn = 0;
   23d60:	e51b3010 	ldr	r3, [fp, #-16]
   23d64:	e3a02000 	mov	r2, #0
   23d68:	e5832038 	str	r2, [r3, #56]	; 0x38
	pThis->m_pEndpointBulkOut = 0;
   23d6c:	e51b3010 	ldr	r3, [fp, #-16]
   23d70:	e3a02000 	mov	r2, #0
   23d74:	e583203c 	str	r2, [r3, #60]	; 0x3c
	pThis->m_pTxBuffer = 0;
   23d78:	e51b3010 	ldr	r3, [fp, #-16]
   23d7c:	e3a02000 	mov	r2, #0
   23d80:	e583204c 	str	r2, [r3, #76]	; 0x4c

	pThis->m_pTxBuffer = malloc (FRAME_BUFFER_SIZE);
   23d84:	e3a00d19 	mov	r0, #1600	; 0x640
   23d88:	ebffcb32 	bl	16a58 <malloc>
   23d8c:	e1a03000 	mov	r3, r0
   23d90:	e1a02003 	mov	r2, r3
   23d94:	e51b3010 	ldr	r3, [fp, #-16]
   23d98:	e583204c 	str	r2, [r3, #76]	; 0x4c
	assert (pThis->m_pTxBuffer != 0);
   23d9c:	e51b3010 	ldr	r3, [fp, #-16]
   23da0:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   23da4:	e3530000 	cmp	r3, #0
   23da8:	1a000005 	bne	23dc4 <SMSC951xDevice+0xd4>
   23dac:	e30f0840 	movw	r0, #63552	; 0xf840
   23db0:	e3400002 	movt	r0, #2
   23db4:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   23db8:	e3401002 	movt	r1, #2
   23dbc:	e3a02092 	mov	r2, #146	; 0x92
   23dc0:	ebffcafa 	bl	169b0 <uspi_assertion_failed>
   23dc4:	e1a03004 	mov	r3, r4
   23dc8:	e3030cf0 	movw	r0, #15600	; 0x3cf0
   23dcc:	e3400002 	movt	r0, #2
   23dd0:	e1a01003 	mov	r1, r3
   23dd4:	ebffc6a2 	bl	15864 <__cyg_profile_func_exit>
}
   23dd8:	e24bd008 	sub	sp, fp, #8
   23ddc:	e8bd8810 	pop	{r4, fp, pc}

00023de0 <_SMSC951xDevice>:

void _SMSC951xDevice (TSMSC951xDevice *pThis)
{
   23de0:	e92d4810 	push	{r4, fp, lr}
   23de4:	e28db008 	add	fp, sp, #8
   23de8:	e24dd00c 	sub	sp, sp, #12
   23dec:	e1a0400e 	mov	r4, lr
   23df0:	e50b0010 	str	r0, [fp, #-16]
   23df4:	e1a03004 	mov	r3, r4
   23df8:	e3030de0 	movw	r0, #15840	; 0x3de0
   23dfc:	e3400002 	movt	r0, #2
   23e00:	e1a01003 	mov	r1, r3
   23e04:	ebffc644 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   23e08:	e51b3010 	ldr	r3, [fp, #-16]
   23e0c:	e3530000 	cmp	r3, #0
   23e10:	1a000005 	bne	23e2c <_SMSC951xDevice+0x4c>
   23e14:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   23e18:	e3400002 	movt	r0, #2
   23e1c:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   23e20:	e3401002 	movt	r1, #2
   23e24:	e3a02097 	mov	r2, #151	; 0x97
   23e28:	ebffcae0 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pTxBuffer != 0)
   23e2c:	e51b3010 	ldr	r3, [fp, #-16]
   23e30:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   23e34:	e3530000 	cmp	r3, #0
   23e38:	0a000006 	beq	23e58 <_SMSC951xDevice+0x78>
	{
		free (pThis->m_pTxBuffer);
   23e3c:	e51b3010 	ldr	r3, [fp, #-16]
   23e40:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   23e44:	e1a00003 	mov	r0, r3
   23e48:	ebffcb18 	bl	16ab0 <free>
		pThis->m_pTxBuffer = 0;
   23e4c:	e51b3010 	ldr	r3, [fp, #-16]
   23e50:	e3a02000 	mov	r2, #0
   23e54:	e583204c 	str	r2, [r3, #76]	; 0x4c
	}
	
	if (pThis->m_pEndpointBulkOut != 0)
   23e58:	e51b3010 	ldr	r3, [fp, #-16]
   23e5c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   23e60:	e3530000 	cmp	r3, #0
   23e64:	0a00000a 	beq	23e94 <_SMSC951xDevice+0xb4>
	{
		_USBEndpoint (pThis->m_pEndpointBulkOut);
   23e68:	e51b3010 	ldr	r3, [fp, #-16]
   23e6c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   23e70:	e1a00003 	mov	r0, r3
   23e74:	ebfff3a6 	bl	20d14 <_USBEndpoint>
		free (pThis->m_pEndpointBulkOut);
   23e78:	e51b3010 	ldr	r3, [fp, #-16]
   23e7c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   23e80:	e1a00003 	mov	r0, r3
   23e84:	ebffcb09 	bl	16ab0 <free>
		pThis->m_pEndpointBulkOut = 0;
   23e88:	e51b3010 	ldr	r3, [fp, #-16]
   23e8c:	e3a02000 	mov	r2, #0
   23e90:	e583203c 	str	r2, [r3, #60]	; 0x3c
	}
	
	if (pThis->m_pEndpointBulkIn != 0)
   23e94:	e51b3010 	ldr	r3, [fp, #-16]
   23e98:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   23e9c:	e3530000 	cmp	r3, #0
   23ea0:	0a00000a 	beq	23ed0 <_SMSC951xDevice+0xf0>
	{
		_USBEndpoint (pThis->m_pEndpointBulkIn);
   23ea4:	e51b3010 	ldr	r3, [fp, #-16]
   23ea8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   23eac:	e1a00003 	mov	r0, r3
   23eb0:	ebfff397 	bl	20d14 <_USBEndpoint>
		free (pThis->m_pEndpointBulkIn);
   23eb4:	e51b3010 	ldr	r3, [fp, #-16]
   23eb8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   23ebc:	e1a00003 	mov	r0, r3
   23ec0:	ebffcafa 	bl	16ab0 <free>
		pThis->m_pEndpointBulkIn = 0;
   23ec4:	e51b3010 	ldr	r3, [fp, #-16]
   23ec8:	e3a02000 	mov	r2, #0
   23ecc:	e5832038 	str	r2, [r3, #56]	; 0x38
	}
	
	_USBDevice (&pThis->m_USBDevice);
   23ed0:	e51b3010 	ldr	r3, [fp, #-16]
   23ed4:	e1a00003 	mov	r0, r3
   23ed8:	ebffec84 	bl	1f0f0 <_USBDevice>
   23edc:	e1a03004 	mov	r3, r4
   23ee0:	e3030de0 	movw	r0, #15840	; 0x3de0
   23ee4:	e3400002 	movt	r0, #2
   23ee8:	e1a01003 	mov	r1, r3
   23eec:	ebffc65c 	bl	15864 <__cyg_profile_func_exit>
}
   23ef0:	e24bd008 	sub	sp, fp, #8
   23ef4:	e8bd8810 	pop	{r4, fp, pc}

00023ef8 <SMSC951xDeviceConfigure>:

boolean SMSC951xDeviceConfigure (TUSBDevice *pUSBDevice)
{
   23ef8:	e92d4830 	push	{r4, r5, fp, lr}
   23efc:	e28db00c 	add	fp, sp, #12
   23f00:	e24dd048 	sub	sp, sp, #72	; 0x48
   23f04:	e1a0500e 	mov	r5, lr
   23f08:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
   23f0c:	e1a03005 	mov	r3, r5
   23f10:	e3030ef8 	movw	r0, #16120	; 0x3ef8
   23f14:	e3400002 	movt	r0, #2
   23f18:	e1a01003 	mov	r1, r3
   23f1c:	ebffc5fe 	bl	1571c <__cyg_profile_func_enter>
	TSMSC951xDevice *pThis = (TSMSC951xDevice *) pUSBDevice;
   23f20:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   23f24:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   23f28:	e51b3010 	ldr	r3, [fp, #-16]
   23f2c:	e3530000 	cmp	r3, #0
   23f30:	1a000005 	bne	23f4c <SMSC951xDeviceConfigure+0x54>
   23f34:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   23f38:	e3400002 	movt	r0, #2
   23f3c:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   23f40:	e3401002 	movt	r1, #2
   23f44:	e3a020b3 	mov	r2, #179	; 0xb3
   23f48:	ebffca98 	bl	169b0 <uspi_assertion_failed>

	u8 MACAddress[MAC_ADDRESS_SIZE];
	if (GetMACAddress (MACAddress))
   23f4c:	e24b302c 	sub	r3, fp, #44	; 0x2c
   23f50:	e1a00003 	mov	r0, r3
   23f54:	ebffca2f 	bl	16818 <GetMACAddress>
   23f58:	e1a03000 	mov	r3, r0
   23f5c:	e3530000 	cmp	r3, #0
   23f60:	0a000021 	beq	23fec <SMSC951xDeviceConfigure+0xf4>
	{
		MACAddressSet (&pThis->m_MACAddress, MACAddress);
   23f64:	e51b3010 	ldr	r3, [fp, #-16]
   23f68:	e2832040 	add	r2, r3, #64	; 0x40
   23f6c:	e24b302c 	sub	r3, fp, #44	; 0x2c
   23f70:	e1a00002 	mov	r0, r2
   23f74:	e1a01003 	mov	r1, r3
   23f78:	ebfffe1b 	bl	237ec <MACAddressSet>
		LogWrite (FromSMSC951x, LOG_ERROR, "Cannot get MAC address");

		return FALSE;
	}
	TString MACString;
	String (&MACString);
   23f7c:	e24b3038 	sub	r3, fp, #56	; 0x38
   23f80:	e1a00003 	mov	r0, r3
   23f84:	eb00038f 	bl	24dc8 <String>
	MACAddressFormat (&pThis->m_MACAddress, &MACString);
   23f88:	e51b3010 	ldr	r3, [fp, #-16]
   23f8c:	e2832040 	add	r2, r3, #64	; 0x40
   23f90:	e24b3038 	sub	r3, fp, #56	; 0x38
   23f94:	e1a00002 	mov	r0, r2
   23f98:	e1a01003 	mov	r1, r3
   23f9c:	ebffff0a 	bl	23bcc <MACAddressFormat>
	LogWrite (FromSMSC951x, LOG_DEBUG, "MAC address is %s", StringGet (&MACString));
   23fa0:	e24b3038 	sub	r3, fp, #56	; 0x38
   23fa4:	e1a00003 	mov	r0, r3
   23fa8:	eb0003f9 	bl	24f94 <StringGet>
   23fac:	e1a03000 	mov	r3, r0
   23fb0:	e30f07cc 	movw	r0, #63436	; 0xf7cc
   23fb4:	e3400002 	movt	r0, #2
   23fb8:	e3a01004 	mov	r1, #4
   23fbc:	e30f2870 	movw	r2, #63600	; 0xf870
   23fc0:	e3402002 	movt	r2, #2
   23fc4:	ebffca61 	bl	16950 <LogWrite>

	const TUSBConfigurationDescriptor *pConfigDesc =
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
   23fc8:	e51b3010 	ldr	r3, [fp, #-16]
	TString MACString;
	String (&MACString);
	MACAddressFormat (&pThis->m_MACAddress, &MACString);
	LogWrite (FromSMSC951x, LOG_DEBUG, "MAC address is %s", StringGet (&MACString));

	const TUSBConfigurationDescriptor *pConfigDesc =
   23fcc:	e1a00003 	mov	r0, r3
   23fd0:	e3a01002 	mov	r1, #2
   23fd4:	ebfff082 	bl	201e4 <USBDeviceGetDescriptor>
   23fd8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
	if (   pConfigDesc == 0
   23fdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23fe0:	e3530000 	cmp	r3, #0
   23fe4:	0a00000c 	beq	2401c <SMSC951xDeviceConfigure+0x124>
   23fe8:	ea000007 	b	2400c <SMSC951xDeviceConfigure+0x114>
	{
		MACAddressSet (&pThis->m_MACAddress, MACAddress);
	}
	else
	{
		LogWrite (FromSMSC951x, LOG_ERROR, "Cannot get MAC address");
   23fec:	e30f07cc 	movw	r0, #63436	; 0xf7cc
   23ff0:	e3400002 	movt	r0, #2
   23ff4:	e3a01001 	mov	r1, #1
   23ff8:	e30f2858 	movw	r2, #63576	; 0xf858
   23ffc:	e3402002 	movt	r2, #2
   24000:	ebffca52 	bl	16950 <LogWrite>

		return FALSE;
   24004:	e3a04000 	mov	r4, #0
   24008:	ea000117 	b	2446c <SMSC951xDeviceConfigure+0x574>
	LogWrite (FromSMSC951x, LOG_DEBUG, "MAC address is %s", StringGet (&MACString));

	const TUSBConfigurationDescriptor *pConfigDesc =
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
	if (   pConfigDesc == 0
	    || pConfigDesc->bNumInterfaces != 1)
   2400c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   24010:	e5d33004 	ldrb	r3, [r3, #4]
   24014:	e3530001 	cmp	r3, #1
   24018:	0a000009 	beq	24044 <SMSC951xDeviceConfigure+0x14c>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromSMSC951x);
   2401c:	e51b3010 	ldr	r3, [fp, #-16]
   24020:	e1a00003 	mov	r0, r3
   24024:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   24028:	e3401002 	movt	r1, #2
   2402c:	ebfff09b 	bl	202a0 <USBDeviceConfigurationError>

		_String (&MACString);
   24030:	e24b3038 	sub	r3, fp, #56	; 0x38
   24034:	e1a00003 	mov	r0, r3
   24038:	eb0003b0 	bl	24f00 <_String>

		return FALSE;
   2403c:	e3a04000 	mov	r4, #0
   24040:	ea000109 	b	2446c <SMSC951xDeviceConfigure+0x574>
	}

	const TUSBInterfaceDescriptor *pInterfaceDesc =
		(TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE);
   24044:	e51b3010 	ldr	r3, [fp, #-16]
		_String (&MACString);

		return FALSE;
	}

	const TUSBInterfaceDescriptor *pInterfaceDesc =
   24048:	e1a00003 	mov	r0, r3
   2404c:	e3a01004 	mov	r1, #4
   24050:	ebfff063 	bl	201e4 <USBDeviceGetDescriptor>
   24054:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
		(TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE);
	if (   pInterfaceDesc == 0
   24058:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2405c:	e3530000 	cmp	r3, #0
   24060:	0a00000b 	beq	24094 <SMSC951xDeviceConfigure+0x19c>
	    || pInterfaceDesc->bInterfaceNumber	 != 0x00
   24064:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24068:	e5d33002 	ldrb	r3, [r3, #2]
   2406c:	e3530000 	cmp	r3, #0
   24070:	1a000007 	bne	24094 <SMSC951xDeviceConfigure+0x19c>
	    || pInterfaceDesc->bAlternateSetting != 0x00
   24074:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24078:	e5d33003 	ldrb	r3, [r3, #3]
   2407c:	e3530000 	cmp	r3, #0
   24080:	1a000003 	bne	24094 <SMSC951xDeviceConfigure+0x19c>
	    || pInterfaceDesc->bNumEndpoints	 != 3)
   24084:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24088:	e5d33004 	ldrb	r3, [r3, #4]
   2408c:	e3530003 	cmp	r3, #3
   24090:	0a000009 	beq	240bc <SMSC951xDeviceConfigure+0x1c4>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromSMSC951x);
   24094:	e51b3010 	ldr	r3, [fp, #-16]
   24098:	e1a00003 	mov	r0, r3
   2409c:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   240a0:	e3401002 	movt	r1, #2
   240a4:	ebfff07d 	bl	202a0 <USBDeviceConfigurationError>

		_String (&MACString);
   240a8:	e24b3038 	sub	r3, fp, #56	; 0x38
   240ac:	e1a00003 	mov	r0, r3
   240b0:	eb000392 	bl	24f00 <_String>

		return FALSE;
   240b4:	e3a04000 	mov	r4, #0
   240b8:	ea0000eb 	b	2446c <SMSC951xDeviceConfigure+0x574>
	}

	const TUSBEndpointDescriptor *pEndpointDesc;
	while ((pEndpointDesc = (TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT)) != 0)
   240bc:	ea000055 	b	24218 <SMSC951xDeviceConfigure+0x320>
	{
		if ((pEndpointDesc->bmAttributes & 0x3F) == 0x02)		// Bulk
   240c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   240c4:	e5d33003 	ldrb	r3, [r3, #3]
   240c8:	e203303f 	and	r3, r3, #63	; 0x3f
   240cc:	e3530002 	cmp	r3, #2
   240d0:	1a000050 	bne	24218 <SMSC951xDeviceConfigure+0x320>
		{
			if ((pEndpointDesc->bEndpointAddress & 0x80) == 0x80)	// Input
   240d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   240d8:	e5d33002 	ldrb	r3, [r3, #2]
   240dc:	e6ef3073 	uxtb	r3, r3
   240e0:	e6af3073 	sxtb	r3, r3
   240e4:	e3530000 	cmp	r3, #0
   240e8:	aa000025 	bge	24184 <SMSC951xDeviceConfigure+0x28c>
			{
				if (pThis->m_pEndpointBulkIn != 0)
   240ec:	e51b3010 	ldr	r3, [fp, #-16]
   240f0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   240f4:	e3530000 	cmp	r3, #0
   240f8:	0a000009 	beq	24124 <SMSC951xDeviceConfigure+0x22c>
				{
					USBDeviceConfigurationError (&pThis->m_USBDevice, FromSMSC951x);
   240fc:	e51b3010 	ldr	r3, [fp, #-16]
   24100:	e1a00003 	mov	r0, r3
   24104:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   24108:	e3401002 	movt	r1, #2
   2410c:	ebfff063 	bl	202a0 <USBDeviceConfigurationError>

					_String (&MACString);
   24110:	e24b3038 	sub	r3, fp, #56	; 0x38
   24114:	e1a00003 	mov	r0, r3
   24118:	eb000378 	bl	24f00 <_String>

					return FALSE;
   2411c:	e3a04000 	mov	r4, #0
   24120:	ea0000d1 	b	2446c <SMSC951xDeviceConfigure+0x574>
				}

				pThis->m_pEndpointBulkIn = (TUSBEndpoint *) malloc (sizeof (TUSBEndpoint));
   24124:	e3a00018 	mov	r0, #24
   24128:	ebffca4a 	bl	16a58 <malloc>
   2412c:	e1a03000 	mov	r3, r0
   24130:	e1a02003 	mov	r2, r3
   24134:	e51b3010 	ldr	r3, [fp, #-16]
   24138:	e5832038 	str	r2, [r3, #56]	; 0x38
				assert (pThis->m_pEndpointBulkIn);
   2413c:	e51b3010 	ldr	r3, [fp, #-16]
   24140:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   24144:	e3530000 	cmp	r3, #0
   24148:	1a000005 	bne	24164 <SMSC951xDeviceConfigure+0x26c>
   2414c:	e30f0884 	movw	r0, #63620	; 0xf884
   24150:	e3400002 	movt	r0, #2
   24154:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24158:	e3401002 	movt	r1, #2
   2415c:	e3a020f0 	mov	r2, #240	; 0xf0
   24160:	ebffca12 	bl	169b0 <uspi_assertion_failed>
				USBEndpoint2 (pThis->m_pEndpointBulkIn, &pThis->m_USBDevice, pEndpointDesc);
   24164:	e51b3010 	ldr	r3, [fp, #-16]
   24168:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   2416c:	e51b3010 	ldr	r3, [fp, #-16]
   24170:	e1a00002 	mov	r0, r2
   24174:	e1a01003 	mov	r1, r3
   24178:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2417c:	ebfff1f1 	bl	20948 <USBEndpoint2>
   24180:	ea000024 	b	24218 <SMSC951xDeviceConfigure+0x320>
			}
			else							// Output
			{
				if (pThis->m_pEndpointBulkOut != 0)
   24184:	e51b3010 	ldr	r3, [fp, #-16]
   24188:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2418c:	e3530000 	cmp	r3, #0
   24190:	0a000009 	beq	241bc <SMSC951xDeviceConfigure+0x2c4>
				{
					USBDeviceConfigurationError (&pThis->m_USBDevice, FromSMSC951x);
   24194:	e51b3010 	ldr	r3, [fp, #-16]
   24198:	e1a00003 	mov	r0, r3
   2419c:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   241a0:	e3401002 	movt	r1, #2
   241a4:	ebfff03d 	bl	202a0 <USBDeviceConfigurationError>

					_String (&MACString);
   241a8:	e24b3038 	sub	r3, fp, #56	; 0x38
   241ac:	e1a00003 	mov	r0, r3
   241b0:	eb000352 	bl	24f00 <_String>

					return FALSE;
   241b4:	e3a04000 	mov	r4, #0
   241b8:	ea0000ab 	b	2446c <SMSC951xDeviceConfigure+0x574>
				}

				pThis->m_pEndpointBulkOut = (TUSBEndpoint *) malloc (sizeof (TUSBEndpoint));
   241bc:	e3a00018 	mov	r0, #24
   241c0:	ebffca24 	bl	16a58 <malloc>
   241c4:	e1a03000 	mov	r3, r0
   241c8:	e1a02003 	mov	r2, r3
   241cc:	e51b3010 	ldr	r3, [fp, #-16]
   241d0:	e583203c 	str	r2, [r3, #60]	; 0x3c
				assert (pThis->m_pEndpointBulkOut);
   241d4:	e51b3010 	ldr	r3, [fp, #-16]
   241d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   241dc:	e3530000 	cmp	r3, #0
   241e0:	1a000005 	bne	241fc <SMSC951xDeviceConfigure+0x304>
   241e4:	e30f08a0 	movw	r0, #63648	; 0xf8a0
   241e8:	e3400002 	movt	r0, #2
   241ec:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   241f0:	e3401002 	movt	r1, #2
   241f4:	e3a020ff 	mov	r2, #255	; 0xff
   241f8:	ebffc9ec 	bl	169b0 <uspi_assertion_failed>
				USBEndpoint2 (pThis->m_pEndpointBulkOut, &pThis->m_USBDevice, pEndpointDesc);
   241fc:	e51b3010 	ldr	r3, [fp, #-16]
   24200:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   24204:	e51b3010 	ldr	r3, [fp, #-16]
   24208:	e1a00002 	mov	r0, r2
   2420c:	e1a01003 	mov	r1, r3
   24210:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   24214:	ebfff1cb 	bl	20948 <USBEndpoint2>

		return FALSE;
	}

	const TUSBEndpointDescriptor *pEndpointDesc;
	while ((pEndpointDesc = (TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT)) != 0)
   24218:	e51b3010 	ldr	r3, [fp, #-16]
   2421c:	e1a00003 	mov	r0, r3
   24220:	e3a01005 	mov	r1, #5
   24224:	ebffefee 	bl	201e4 <USBDeviceGetDescriptor>
   24228:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
   2422c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   24230:	e3530000 	cmp	r3, #0
   24234:	1affffa1 	bne	240c0 <SMSC951xDeviceConfigure+0x1c8>
				USBEndpoint2 (pThis->m_pEndpointBulkOut, &pThis->m_USBDevice, pEndpointDesc);
			}
		}
	}

	if (   pThis->m_pEndpointBulkIn  == 0
   24238:	e51b3010 	ldr	r3, [fp, #-16]
   2423c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   24240:	e3530000 	cmp	r3, #0
   24244:	0a000003 	beq	24258 <SMSC951xDeviceConfigure+0x360>
	    || pThis->m_pEndpointBulkOut == 0)
   24248:	e51b3010 	ldr	r3, [fp, #-16]
   2424c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   24250:	e3530000 	cmp	r3, #0
   24254:	1a000009 	bne	24280 <SMSC951xDeviceConfigure+0x388>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromSMSC951x);
   24258:	e51b3010 	ldr	r3, [fp, #-16]
   2425c:	e1a00003 	mov	r0, r3
   24260:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   24264:	e3401002 	movt	r1, #2
   24268:	ebfff00c 	bl	202a0 <USBDeviceConfigurationError>

		_String (&MACString);
   2426c:	e24b3038 	sub	r3, fp, #56	; 0x38
   24270:	e1a00003 	mov	r0, r3
   24274:	eb000321 	bl	24f00 <_String>

		return FALSE;
   24278:	e3a04000 	mov	r4, #0
   2427c:	ea00007a 	b	2446c <SMSC951xDeviceConfigure+0x574>
	}

	if (!USBDeviceConfigure (&pThis->m_USBDevice))
   24280:	e51b3010 	ldr	r3, [fp, #-16]
   24284:	e1a00003 	mov	r0, r3
   24288:	ebffedc7 	bl	1f9ac <USBDeviceConfigure>
   2428c:	e1a03000 	mov	r3, r0
   24290:	e3530000 	cmp	r3, #0
   24294:	1a00000a 	bne	242c4 <SMSC951xDeviceConfigure+0x3cc>
	{
		LogWrite (FromSMSC951x, LOG_ERROR, "Cannot set configuration");
   24298:	e30f07cc 	movw	r0, #63436	; 0xf7cc
   2429c:	e3400002 	movt	r0, #2
   242a0:	e3a01001 	mov	r1, #1
   242a4:	e30f28bc 	movw	r2, #63676	; 0xf8bc
   242a8:	e3402002 	movt	r2, #2
   242ac:	ebffc9a7 	bl	16950 <LogWrite>

		_String (&MACString);
   242b0:	e24b3038 	sub	r3, fp, #56	; 0x38
   242b4:	e1a00003 	mov	r0, r3
   242b8:	eb000310 	bl	24f00 <_String>

		return FALSE;
   242bc:	e3a04000 	mov	r4, #0
   242c0:	ea000069 	b	2446c <SMSC951xDeviceConfigure+0x574>
	}

	u8 MACAddressBuffer[MAC_ADDRESS_SIZE];
	MACAddressCopyTo (&pThis->m_MACAddress, MACAddressBuffer);
   242c4:	e51b3010 	ldr	r3, [fp, #-16]
   242c8:	e2832040 	add	r2, r3, #64	; 0x40
   242cc:	e24b3040 	sub	r3, fp, #64	; 0x40
   242d0:	e1a00002 	mov	r0, r2
   242d4:	e1a01003 	mov	r1, r3
   242d8:	ebfffdbb 	bl	239cc <MACAddressCopyTo>
	u16 usMACAddressHigh = *(u16 *) &MACAddressBuffer[4];
   242dc:	e24b3040 	sub	r3, fp, #64	; 0x40
   242e0:	e2833004 	add	r3, r3, #4
   242e4:	e1d330b0 	ldrh	r3, [r3]
   242e8:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
	u32 nMACAddressLow   = *(u32 *) &MACAddressBuffer[0];
   242ec:	e24b3040 	sub	r3, fp, #64	; 0x40
   242f0:	e5933000 	ldr	r3, [r3]
   242f4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
	if (   !SMSC951xDeviceWriteReg (pThis, ADDRH, usMACAddressHigh)
   242f8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   242fc:	e51b0010 	ldr	r0, [fp, #-16]
   24300:	e3a01f41 	mov	r1, #260	; 0x104
   24304:	e1a02003 	mov	r2, r3
   24308:	eb000186 	bl	24928 <SMSC951xDeviceWriteReg>
   2430c:	e1a03000 	mov	r3, r0
   24310:	e3530000 	cmp	r3, #0
   24314:	0a000006 	beq	24334 <SMSC951xDeviceConfigure+0x43c>
	    || !SMSC951xDeviceWriteReg (pThis, ADDRL, nMACAddressLow))
   24318:	e51b0010 	ldr	r0, [fp, #-16]
   2431c:	e3a01f42 	mov	r1, #264	; 0x108
   24320:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   24324:	eb00017f 	bl	24928 <SMSC951xDeviceWriteReg>
   24328:	e1a03000 	mov	r3, r0
   2432c:	e3530000 	cmp	r3, #0
   24330:	1a00000a 	bne	24360 <SMSC951xDeviceConfigure+0x468>
	{
		LogWrite (FromSMSC951x, LOG_ERROR, "Cannot set MAC address");
   24334:	e30f07cc 	movw	r0, #63436	; 0xf7cc
   24338:	e3400002 	movt	r0, #2
   2433c:	e3a01001 	mov	r1, #1
   24340:	e30f28d8 	movw	r2, #63704	; 0xf8d8
   24344:	e3402002 	movt	r2, #2
   24348:	ebffc980 	bl	16950 <LogWrite>

		_String (&MACString);
   2434c:	e24b3038 	sub	r3, fp, #56	; 0x38
   24350:	e1a00003 	mov	r0, r3
   24354:	eb0002e9 	bl	24f00 <_String>

		return FALSE;
   24358:	e3a04000 	mov	r4, #0
   2435c:	ea000042 	b	2446c <SMSC951xDeviceConfigure+0x574>
	}

	if (   !SMSC951xDeviceWriteReg (pThis, LED_GPIO_CFG,   LED_GPIO_CFG_SPD_LED
   24360:	e51b0010 	ldr	r0, [fp, #-16]
   24364:	e3a01024 	mov	r1, #36	; 0x24
   24368:	e3a02000 	mov	r2, #0
   2436c:	e3402111 	movt	r2, #273	; 0x111
   24370:	eb00016c 	bl	24928 <SMSC951xDeviceWriteReg>
   24374:	e1a03000 	mov	r3, r0
   24378:	e3530000 	cmp	r3, #0
   2437c:	0a00000e 	beq	243bc <SMSC951xDeviceConfigure+0x4c4>
							     | LED_GPIO_CFG_LNK_LED
							     | LED_GPIO_CFG_FDX_LED)
	    || !SMSC951xDeviceWriteReg (pThis, MAC_CR,  MAC_CR_RCVOWN
   24380:	e51b0010 	ldr	r0, [fp, #-16]
   24384:	e3a01c01 	mov	r1, #256	; 0x100
   24388:	e3a0200c 	mov	r2, #12
   2438c:	e3402080 	movt	r2, #128	; 0x80
   24390:	eb000164 	bl	24928 <SMSC951xDeviceWriteReg>
   24394:	e1a03000 	mov	r3, r0
   24398:	e3530000 	cmp	r3, #0
   2439c:	0a000006 	beq	243bc <SMSC951xDeviceConfigure+0x4c4>
						       //| MAC_CR_PRMS		// promiscous mode
						       | MAC_CR_TXEN
						       | MAC_CR_RXEN)
	    || !SMSC951xDeviceWriteReg (pThis, TX_CFG, TX_CFG_ON))
   243a0:	e51b0010 	ldr	r0, [fp, #-16]
   243a4:	e3a01010 	mov	r1, #16
   243a8:	e3a02004 	mov	r2, #4
   243ac:	eb00015d 	bl	24928 <SMSC951xDeviceWriteReg>
   243b0:	e1a03000 	mov	r3, r0
   243b4:	e3530000 	cmp	r3, #0
   243b8:	1a00000a 	bne	243e8 <SMSC951xDeviceConfigure+0x4f0>
	{
		LogWrite (FromSMSC951x, LOG_ERROR, "Cannot start device");
   243bc:	e30f07cc 	movw	r0, #63436	; 0xf7cc
   243c0:	e3400002 	movt	r0, #2
   243c4:	e3a01001 	mov	r1, #1
   243c8:	e30f28f0 	movw	r2, #63728	; 0xf8f0
   243cc:	e3402002 	movt	r2, #2
   243d0:	ebffc95e 	bl	16950 <LogWrite>

		_String (&MACString);
   243d4:	e24b3038 	sub	r3, fp, #56	; 0x38
   243d8:	e1a00003 	mov	r0, r3
   243dc:	eb0002c7 	bl	24f00 <_String>

		return FALSE;
   243e0:	e3a04000 	mov	r4, #0
   243e4:	ea000020 	b	2446c <SMSC951xDeviceConfigure+0x574>
	}

	// TODO: check if PHY is up (wait for it)

	TString DeviceName;
	String (&DeviceName);
   243e8:	e24b304c 	sub	r3, fp, #76	; 0x4c
   243ec:	e1a00003 	mov	r0, r3
   243f0:	eb000274 	bl	24dc8 <String>
	StringFormat (&DeviceName, "eth%u", s_nDeviceNumber++);
   243f4:	e30b30d0 	movw	r3, #45264	; 0xb0d0
   243f8:	e3403003 	movt	r3, #3
   243fc:	e5932000 	ldr	r2, [r3]
   24400:	e2821001 	add	r1, r2, #1
   24404:	e30b30d0 	movw	r3, #45264	; 0xb0d0
   24408:	e3403003 	movt	r3, #3
   2440c:	e5831000 	str	r1, [r3]
   24410:	e24b304c 	sub	r3, fp, #76	; 0x4c
   24414:	e1a00003 	mov	r0, r3
   24418:	e30f1904 	movw	r1, #63748	; 0xf904
   2441c:	e3401002 	movt	r1, #2
   24420:	eb00040c 	bl	25458 <StringFormat>
	DeviceNameServiceAddDevice (DeviceNameServiceGet (), StringGet (&DeviceName), pThis, FALSE);
   24424:	ebfffc44 	bl	2353c <DeviceNameServiceGet>
   24428:	e1a04000 	mov	r4, r0
   2442c:	e24b304c 	sub	r3, fp, #76	; 0x4c
   24430:	e1a00003 	mov	r0, r3
   24434:	eb0002d6 	bl	24f94 <StringGet>
   24438:	e1a03000 	mov	r3, r0
   2443c:	e1a00004 	mov	r0, r4
   24440:	e1a01003 	mov	r1, r3
   24444:	e51b2010 	ldr	r2, [fp, #-16]
   24448:	e3a03000 	mov	r3, #0
   2444c:	ebfffb82 	bl	2325c <DeviceNameServiceAddDevice>

	_String (&DeviceName);
   24450:	e24b304c 	sub	r3, fp, #76	; 0x4c
   24454:	e1a00003 	mov	r0, r3
   24458:	eb0002a8 	bl	24f00 <_String>
	_String (&MACString);
   2445c:	e24b3038 	sub	r3, fp, #56	; 0x38
   24460:	e1a00003 	mov	r0, r3
   24464:	eb0002a5 	bl	24f00 <_String>

	return TRUE;
   24468:	e3a04001 	mov	r4, #1
   2446c:	e1a03005 	mov	r3, r5
   24470:	e3030ef8 	movw	r0, #16120	; 0x3ef8
   24474:	e3400002 	movt	r0, #2
   24478:	e1a01003 	mov	r1, r3
   2447c:	ebffc4f8 	bl	15864 <__cyg_profile_func_exit>
   24480:	e1a03004 	mov	r3, r4
}
   24484:	e1a00003 	mov	r0, r3
   24488:	e24bd00c 	sub	sp, fp, #12
   2448c:	e8bd8830 	pop	{r4, r5, fp, pc}

00024490 <SMSC951xDeviceGetMACAddress>:

TMACAddress *SMSC951xDeviceGetMACAddress (TSMSC951xDevice *pThis)
{
   24490:	e92d4830 	push	{r4, r5, fp, lr}
   24494:	e28db00c 	add	fp, sp, #12
   24498:	e24dd008 	sub	sp, sp, #8
   2449c:	e1a0500e 	mov	r5, lr
   244a0:	e50b0010 	str	r0, [fp, #-16]
   244a4:	e1a03005 	mov	r3, r5
   244a8:	e3040490 	movw	r0, #17552	; 0x4490
   244ac:	e3400002 	movt	r0, #2
   244b0:	e1a01003 	mov	r1, r3
   244b4:	ebffc498 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   244b8:	e51b3010 	ldr	r3, [fp, #-16]
   244bc:	e3530000 	cmp	r3, #0
   244c0:	1a000005 	bne	244dc <SMSC951xDeviceGetMACAddress+0x4c>
   244c4:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   244c8:	e3400002 	movt	r0, #2
   244cc:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   244d0:	e3401002 	movt	r1, #2
   244d4:	e3002145 	movw	r2, #325	; 0x145
   244d8:	ebffc934 	bl	169b0 <uspi_assertion_failed>

	return &pThis->m_MACAddress;
   244dc:	e51b3010 	ldr	r3, [fp, #-16]
   244e0:	e2834040 	add	r4, r3, #64	; 0x40
   244e4:	e1a03005 	mov	r3, r5
   244e8:	e3040490 	movw	r0, #17552	; 0x4490
   244ec:	e3400002 	movt	r0, #2
   244f0:	e1a01003 	mov	r1, r3
   244f4:	ebffc4da 	bl	15864 <__cyg_profile_func_exit>
   244f8:	e1a03004 	mov	r3, r4
}
   244fc:	e1a00003 	mov	r0, r3
   24500:	e24bd00c 	sub	sp, fp, #12
   24504:	e8bd8830 	pop	{r4, r5, fp, pc}

00024508 <SMSC951xDeviceSendFrame>:

boolean SMSC951xDeviceSendFrame (TSMSC951xDevice *pThis, const void *pBuffer, unsigned nLength)
{
   24508:	e92d4830 	push	{r4, r5, fp, lr}
   2450c:	e28db00c 	add	fp, sp, #12
   24510:	e24dd010 	sub	sp, sp, #16
   24514:	e1a0500e 	mov	r5, lr
   24518:	e50b0010 	str	r0, [fp, #-16]
   2451c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   24520:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   24524:	e1a03005 	mov	r3, r5
   24528:	e3040508 	movw	r0, #17672	; 0x4508
   2452c:	e3400002 	movt	r0, #2
   24530:	e1a01003 	mov	r1, r3
   24534:	ebffc478 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   24538:	e51b3010 	ldr	r3, [fp, #-16]
   2453c:	e3530000 	cmp	r3, #0
   24540:	1a000005 	bne	2455c <SMSC951xDeviceSendFrame+0x54>
   24544:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   24548:	e3400002 	movt	r0, #2
   2454c:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24550:	e3401002 	movt	r1, #2
   24554:	e3a02f53 	mov	r2, #332	; 0x14c
   24558:	ebffc914 	bl	169b0 <uspi_assertion_failed>

	if (nLength >= FRAME_BUFFER_SIZE-8)
   2455c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24560:	e3002637 	movw	r2, #1591	; 0x637
   24564:	e1530002 	cmp	r3, r2
   24568:	9a000001 	bls	24574 <SMSC951xDeviceSendFrame+0x6c>
	{
		return FALSE;
   2456c:	e3a04000 	mov	r4, #0
   24570:	ea00003c 	b	24668 <SMSC951xDeviceSendFrame+0x160>
	}

	assert (pThis->m_pTxBuffer != 0);
   24574:	e51b3010 	ldr	r3, [fp, #-16]
   24578:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   2457c:	e3530000 	cmp	r3, #0
   24580:	1a000005 	bne	2459c <SMSC951xDeviceSendFrame+0x94>
   24584:	e30f0840 	movw	r0, #63552	; 0xf840
   24588:	e3400002 	movt	r0, #2
   2458c:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24590:	e3401002 	movt	r1, #2
   24594:	e3002153 	movw	r2, #339	; 0x153
   24598:	ebffc904 	bl	169b0 <uspi_assertion_failed>
	assert (pBuffer != 0);
   2459c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   245a0:	e3530000 	cmp	r3, #0
   245a4:	1a000005 	bne	245c0 <SMSC951xDeviceSendFrame+0xb8>
   245a8:	e30f090c 	movw	r0, #63756	; 0xf90c
   245ac:	e3400002 	movt	r0, #2
   245b0:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   245b4:	e3401002 	movt	r1, #2
   245b8:	e3a02f55 	mov	r2, #340	; 0x154
   245bc:	ebffc8fb 	bl	169b0 <uspi_assertion_failed>
	memcpy (pThis->m_pTxBuffer+8, pBuffer, nLength);
   245c0:	e51b3010 	ldr	r3, [fp, #-16]
   245c4:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   245c8:	e2833008 	add	r3, r3, #8
   245cc:	e1a00003 	mov	r0, r3
   245d0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   245d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   245d8:	eb0006bf 	bl	260dc <uspi_memcpy>
	
	*(u32 *) &pThis->m_pTxBuffer[0] = TX_CMD_A_FIRST_SEG | TX_CMD_A_LAST_SEG | nLength;
   245dc:	e51b3010 	ldr	r3, [fp, #-16]
   245e0:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   245e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   245e8:	e3822a03 	orr	r2, r2, #12288	; 0x3000
   245ec:	e5832000 	str	r2, [r3]
	*(u32 *) &pThis->m_pTxBuffer[4] = nLength;
   245f0:	e51b3010 	ldr	r3, [fp, #-16]
   245f4:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   245f8:	e2833004 	add	r3, r3, #4
   245fc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   24600:	e5832000 	str	r2, [r3]
	
	assert (pThis->m_pEndpointBulkOut != 0);
   24604:	e51b3010 	ldr	r3, [fp, #-16]
   24608:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2460c:	e3530000 	cmp	r3, #0
   24610:	1a000005 	bne	2462c <SMSC951xDeviceSendFrame+0x124>
   24614:	e30f091c 	movw	r0, #63772	; 0xf91c
   24618:	e3400002 	movt	r0, #2
   2461c:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24620:	e3401002 	movt	r1, #2
   24624:	e300215a 	movw	r2, #346	; 0x15a
   24628:	ebffc8e0 	bl	169b0 <uspi_assertion_failed>
	return DWHCIDeviceTransfer (USBDeviceGetHost (&pThis->m_USBDevice), pThis->m_pEndpointBulkOut, pThis->m_pTxBuffer, nLength+8) >= 0;
   2462c:	e51b3010 	ldr	r3, [fp, #-16]
   24630:	e1a00003 	mov	r0, r3
   24634:	ebffee72 	bl	20004 <USBDeviceGetHost>
   24638:	e51b3010 	ldr	r3, [fp, #-16]
   2463c:	e593103c 	ldr	r1, [r3, #60]	; 0x3c
   24640:	e51b3010 	ldr	r3, [fp, #-16]
   24644:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
   24648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2464c:	e2833008 	add	r3, r3, #8
   24650:	ebffd19f 	bl	18cd4 <DWHCIDeviceTransfer>
   24654:	e1a03000 	mov	r3, r0
   24658:	e1e03003 	mvn	r3, r3
   2465c:	e1a03fa3 	lsr	r3, r3, #31
   24660:	e6ef3073 	uxtb	r3, r3
   24664:	e1a04003 	mov	r4, r3
   24668:	e1a03005 	mov	r3, r5
   2466c:	e3040508 	movw	r0, #17672	; 0x4508
   24670:	e3400002 	movt	r0, #2
   24674:	e1a01003 	mov	r1, r3
   24678:	ebffc479 	bl	15864 <__cyg_profile_func_exit>
   2467c:	e1a03004 	mov	r3, r4
}
   24680:	e1a00003 	mov	r0, r3
   24684:	e24bd00c 	sub	sp, fp, #12
   24688:	e8bd8830 	pop	{r4, r5, fp, pc}

0002468c <SMSC951xDeviceReceiveFrame>:

boolean SMSC951xDeviceReceiveFrame (TSMSC951xDevice *pThis, void *pBuffer, unsigned *pResultLength)
{
   2468c:	e92d4830 	push	{r4, r5, fp, lr}
   24690:	e28db00c 	add	fp, sp, #12
   24694:	e24dd048 	sub	sp, sp, #72	; 0x48
   24698:	e1a0500e 	mov	r5, lr
   2469c:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
   246a0:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
   246a4:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
   246a8:	e1a03005 	mov	r3, r5
   246ac:	e304068c 	movw	r0, #18060	; 0x468c
   246b0:	e3400002 	movt	r0, #2
   246b4:	e1a01003 	mov	r1, r3
   246b8:	ebffc417 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   246bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   246c0:	e3530000 	cmp	r3, #0
   246c4:	1a000005 	bne	246e0 <SMSC951xDeviceReceiveFrame+0x54>
   246c8:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   246cc:	e3400002 	movt	r0, #2
   246d0:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   246d4:	e3401002 	movt	r1, #2
   246d8:	e3a02e16 	mov	r2, #352	; 0x160
   246dc:	ebffc8b3 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pEndpointBulkIn != 0);
   246e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   246e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   246e8:	e3530000 	cmp	r3, #0
   246ec:	1a000005 	bne	24708 <SMSC951xDeviceReceiveFrame+0x7c>
   246f0:	e30f093c 	movw	r0, #63804	; 0xf93c
   246f4:	e3400002 	movt	r0, #2
   246f8:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   246fc:	e3401002 	movt	r1, #2
   24700:	e3002162 	movw	r2, #354	; 0x162
   24704:	ebffc8a9 	bl	169b0 <uspi_assertion_failed>
	assert (pBuffer != 0);
   24708:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
   2470c:	e3530000 	cmp	r3, #0
   24710:	1a000005 	bne	2472c <SMSC951xDeviceReceiveFrame+0xa0>
   24714:	e30f090c 	movw	r0, #63756	; 0xf90c
   24718:	e3400002 	movt	r0, #2
   2471c:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24720:	e3401002 	movt	r1, #2
   24724:	e3002163 	movw	r2, #355	; 0x163
   24728:	ebffc8a0 	bl	169b0 <uspi_assertion_failed>
	TUSBRequest URB;
	USBRequest (&URB, pThis->m_pEndpointBulkIn, pBuffer, FRAME_BUFFER_SIZE, 0);
   2472c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   24730:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   24734:	e24b103c 	sub	r1, fp, #60	; 0x3c
   24738:	e3a03000 	mov	r3, #0
   2473c:	e58d3000 	str	r3, [sp]
   24740:	e1a00001 	mov	r0, r1
   24744:	e1a01002 	mov	r1, r2
   24748:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
   2474c:	e3a03d19 	mov	r3, #1600	; 0x640
   24750:	ebfff32b 	bl	21404 <USBRequest>

	if (!DWHCIDeviceSubmitBlockingRequest (USBDeviceGetHost (&pThis->m_USBDevice), &URB))
   24754:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   24758:	e1a00003 	mov	r0, r3
   2475c:	ebffee28 	bl	20004 <USBDeviceGetHost>
   24760:	e1a02000 	mov	r2, r0
   24764:	e24b303c 	sub	r3, fp, #60	; 0x3c
   24768:	e1a00002 	mov	r0, r2
   2476c:	e1a01003 	mov	r1, r3
   24770:	ebffd190 	bl	18db8 <DWHCIDeviceSubmitBlockingRequest>
   24774:	e1a03000 	mov	r3, r0
   24778:	e3530000 	cmp	r3, #0
   2477c:	1a000004 	bne	24794 <SMSC951xDeviceReceiveFrame+0x108>
	{
		_USBRequest (&URB);
   24780:	e24b303c 	sub	r3, fp, #60	; 0x3c
   24784:	e1a00003 	mov	r0, r3
   24788:	ebfff36d 	bl	21544 <_USBRequest>

		return FALSE;
   2478c:	e3a04000 	mov	r4, #0
   24790:	ea00005b 	b	24904 <SMSC951xDeviceReceiveFrame+0x278>
	}

	u32 nResultLength = USBRequestGetResultLength (&URB);
   24794:	e24b303c 	sub	r3, fp, #60	; 0x3c
   24798:	e1a00003 	mov	r0, r3
   2479c:	ebfff410 	bl	217e4 <USBRequestGetResultLength>
   247a0:	e50b0010 	str	r0, [fp, #-16]
	if (nResultLength < 4)				// should not happen with HW_CFG_BIR set
   247a4:	e51b3010 	ldr	r3, [fp, #-16]
   247a8:	e3530003 	cmp	r3, #3
   247ac:	8a000004 	bhi	247c4 <SMSC951xDeviceReceiveFrame+0x138>
	{
		_USBRequest (&URB);
   247b0:	e24b303c 	sub	r3, fp, #60	; 0x3c
   247b4:	e1a00003 	mov	r0, r3
   247b8:	ebfff361 	bl	21544 <_USBRequest>

		return FALSE;
   247bc:	e3a04000 	mov	r4, #0
   247c0:	ea00004f 	b	24904 <SMSC951xDeviceReceiveFrame+0x278>
	}

	u32 nRxStatus = *(u32 *) pBuffer;
   247c4:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
   247c8:	e5933000 	ldr	r3, [r3]
   247cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if (nRxStatus & RX_STS_ERROR)
   247d0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   247d4:	e30930de 	movw	r3, #37086	; 0x90de
   247d8:	e3443000 	movt	r3, #16384	; 0x4000
   247dc:	e0033002 	and	r3, r3, r2
   247e0:	e3530000 	cmp	r3, #0
   247e4:	0a00000b 	beq	24818 <SMSC951xDeviceReceiveFrame+0x18c>
	{
		LogWrite (FromSMSC951x, LOG_WARNING, "RX error (status 0x%X)", nRxStatus);
   247e8:	e30f07cc 	movw	r0, #63436	; 0xf7cc
   247ec:	e3400002 	movt	r0, #2
   247f0:	e3a01002 	mov	r1, #2
   247f4:	e30f295c 	movw	r2, #63836	; 0xf95c
   247f8:	e3402002 	movt	r2, #2
   247fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   24800:	ebffc852 	bl	16950 <LogWrite>

		_USBRequest (&URB);
   24804:	e24b303c 	sub	r3, fp, #60	; 0x3c
   24808:	e1a00003 	mov	r0, r3
   2480c:	ebfff34c 	bl	21544 <_USBRequest>

		return FALSE;
   24810:	e3a04000 	mov	r4, #0
   24814:	ea00003a 	b	24904 <SMSC951xDeviceReceiveFrame+0x278>
	}
	
	u32 nFrameLength = RX_STS_FRAMELEN (nRxStatus);
   24818:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2481c:	e3a03000 	mov	r3, #0
   24820:	e3433fff 	movt	r3, #16383	; 0x3fff
   24824:	e0033002 	and	r3, r3, r2
   24828:	e1a03823 	lsr	r3, r3, #16
   2482c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	assert (nFrameLength == nResultLength-4);
   24830:	e51b3010 	ldr	r3, [fp, #-16]
   24834:	e2432004 	sub	r2, r3, #4
   24838:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2483c:	e1520003 	cmp	r2, r3
   24840:	0a000005 	beq	2485c <SMSC951xDeviceReceiveFrame+0x1d0>
   24844:	e30f0974 	movw	r0, #63860	; 0xf974
   24848:	e3400002 	movt	r0, #2
   2484c:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24850:	e3401002 	movt	r1, #2
   24854:	e3002181 	movw	r2, #385	; 0x181
   24858:	ebffc854 	bl	169b0 <uspi_assertion_failed>
	assert (nFrameLength > 4);
   2485c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24860:	e3530004 	cmp	r3, #4
   24864:	8a000005 	bhi	24880 <SMSC951xDeviceReceiveFrame+0x1f4>
   24868:	e30f0994 	movw	r0, #63892	; 0xf994
   2486c:	e3400002 	movt	r0, #2
   24870:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24874:	e3401002 	movt	r1, #2
   24878:	e3002182 	movw	r2, #386	; 0x182
   2487c:	ebffc84b 	bl	169b0 <uspi_assertion_failed>
	if (nFrameLength <= 4)
   24880:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24884:	e3530004 	cmp	r3, #4
   24888:	8a000004 	bhi	248a0 <SMSC951xDeviceReceiveFrame+0x214>
	{
		_USBRequest (&URB);
   2488c:	e24b303c 	sub	r3, fp, #60	; 0x3c
   24890:	e1a00003 	mov	r0, r3
   24894:	ebfff32a 	bl	21544 <_USBRequest>

		return FALSE;
   24898:	e3a04000 	mov	r4, #0
   2489c:	ea000018 	b	24904 <SMSC951xDeviceReceiveFrame+0x278>
	}
	nFrameLength -= 4;	// ignore CRC
   248a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   248a4:	e2433004 	sub	r3, r3, #4
   248a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	//LogWrite (FromSMSC951x, LOG_DEBUG, "Frame received (status 0x%X)", nRxStatus);

	memcpy (pBuffer, (u8 *) pBuffer + 4, nFrameLength);	// overwrite RX status
   248ac:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
   248b0:	e2833004 	add	r3, r3, #4
   248b4:	e51b0044 	ldr	r0, [fp, #-68]	; 0xffffffbc
   248b8:	e1a01003 	mov	r1, r3
   248bc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   248c0:	eb000605 	bl	260dc <uspi_memcpy>

	assert (pResultLength != 0);
   248c4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   248c8:	e3530000 	cmp	r3, #0
   248cc:	1a000005 	bne	248e8 <SMSC951xDeviceReceiveFrame+0x25c>
   248d0:	e30f09a8 	movw	r0, #63912	; 0xf9a8
   248d4:	e3400002 	movt	r0, #2
   248d8:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   248dc:	e3401002 	movt	r1, #2
   248e0:	e300218f 	movw	r2, #399	; 0x18f
   248e4:	ebffc831 	bl	169b0 <uspi_assertion_failed>
	*pResultLength = nFrameLength;
   248e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   248ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   248f0:	e5832000 	str	r2, [r3]
	
	_USBRequest (&URB);
   248f4:	e24b303c 	sub	r3, fp, #60	; 0x3c
   248f8:	e1a00003 	mov	r0, r3
   248fc:	ebfff310 	bl	21544 <_USBRequest>

	return TRUE;
   24900:	e3a04001 	mov	r4, #1
   24904:	e1a03005 	mov	r3, r5
   24908:	e304068c 	movw	r0, #18060	; 0x468c
   2490c:	e3400002 	movt	r0, #2
   24910:	e1a01003 	mov	r1, r3
   24914:	ebffc3d2 	bl	15864 <__cyg_profile_func_exit>
   24918:	e1a03004 	mov	r3, r4
}
   2491c:	e1a00003 	mov	r0, r3
   24920:	e24bd00c 	sub	sp, fp, #12
   24924:	e8bd8830 	pop	{r4, r5, fp, pc}

00024928 <SMSC951xDeviceWriteReg>:

boolean SMSC951xDeviceWriteReg (TSMSC951xDevice *pThis, u32 nIndex, u32 nValue)
{
   24928:	e92d4830 	push	{r4, r5, fp, lr}
   2492c:	e28db00c 	add	fp, sp, #12
   24930:	e24dd020 	sub	sp, sp, #32
   24934:	e1a0400e 	mov	r4, lr
   24938:	e50b0010 	str	r0, [fp, #-16]
   2493c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   24940:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   24944:	e1a03004 	mov	r3, r4
   24948:	e3040928 	movw	r0, #18728	; 0x4928
   2494c:	e3400002 	movt	r0, #2
   24950:	e1a01003 	mov	r1, r3
   24954:	ebffc370 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   24958:	e51b3010 	ldr	r3, [fp, #-16]
   2495c:	e3530000 	cmp	r3, #0
   24960:	1a000005 	bne	2497c <SMSC951xDeviceWriteReg+0x54>
   24964:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   24968:	e3400002 	movt	r0, #2
   2496c:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24970:	e3401002 	movt	r1, #2
   24974:	e3002199 	movw	r2, #409	; 0x199
   24978:	ebffc80c 	bl	169b0 <uspi_assertion_failed>

	return DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2497c:	e51b3010 	ldr	r3, [fp, #-16]
   24980:	e1a00003 	mov	r0, r3
   24984:	ebffed9e 	bl	20004 <USBDeviceGetHost>
   24988:	e1a05000 	mov	r5, r0
					  USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   2498c:	e51b3010 	ldr	r3, [fp, #-16]
   24990:	e1a00003 	mov	r0, r3
   24994:	ebffed72 	bl	1ff64 <USBDeviceGetEndpoint0>
   24998:	e1a01000 	mov	r1, r0

boolean SMSC951xDeviceWriteReg (TSMSC951xDevice *pThis, u32 nIndex, u32 nValue)
{
	assert (pThis != 0);

	return DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2499c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   249a0:	e6ff3073 	uxth	r3, r3
   249a4:	e3a02000 	mov	r2, #0
   249a8:	e58d2000 	str	r2, [sp]
   249ac:	e58d3004 	str	r3, [sp, #4]
   249b0:	e24b3018 	sub	r3, fp, #24
   249b4:	e58d3008 	str	r3, [sp, #8]
   249b8:	e3a03004 	mov	r3, #4
   249bc:	e58d300c 	str	r3, [sp, #12]
   249c0:	e1a00005 	mov	r0, r5
   249c4:	e3a02040 	mov	r2, #64	; 0x40
   249c8:	e3a030a0 	mov	r3, #160	; 0xa0
   249cc:	ebffd064 	bl	18b64 <DWHCIDeviceControlMessage>
   249d0:	e1a03000 	mov	r3, r0
					  USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
					  REQUEST_OUT | REQUEST_VENDOR, WRITE_REGISTER,
					  0, nIndex, &nValue, sizeof nValue) >= 0;
   249d4:	e1e03003 	mvn	r3, r3
   249d8:	e1a03fa3 	lsr	r3, r3, #31
   249dc:	e6ef3073 	uxtb	r3, r3

boolean SMSC951xDeviceWriteReg (TSMSC951xDevice *pThis, u32 nIndex, u32 nValue)
{
	assert (pThis != 0);

	return DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   249e0:	e1a05003 	mov	r5, r3
   249e4:	e1a03004 	mov	r3, r4
   249e8:	e3040928 	movw	r0, #18728	; 0x4928
   249ec:	e3400002 	movt	r0, #2
   249f0:	e1a01003 	mov	r1, r3
   249f4:	ebffc39a 	bl	15864 <__cyg_profile_func_exit>
   249f8:	e1a03005 	mov	r3, r5
					  USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
					  REQUEST_OUT | REQUEST_VENDOR, WRITE_REGISTER,
					  0, nIndex, &nValue, sizeof nValue) >= 0;
}
   249fc:	e1a00003 	mov	r0, r3
   24a00:	e24bd00c 	sub	sp, fp, #12
   24a04:	e8bd8830 	pop	{r4, r5, fp, pc}

00024a08 <SMSC951xDeviceReadReg>:

boolean SMSC951xDeviceReadReg (TSMSC951xDevice *pThis, u32 nIndex, u32 *pValue)
{
   24a08:	e92d4830 	push	{r4, r5, fp, lr}
   24a0c:	e28db00c 	add	fp, sp, #12
   24a10:	e24dd020 	sub	sp, sp, #32
   24a14:	e1a0400e 	mov	r4, lr
   24a18:	e50b0010 	str	r0, [fp, #-16]
   24a1c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   24a20:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   24a24:	e1a03004 	mov	r3, r4
   24a28:	e3040a08 	movw	r0, #18952	; 0x4a08
   24a2c:	e3400002 	movt	r0, #2
   24a30:	e1a01003 	mov	r1, r3
   24a34:	ebffc338 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   24a38:	e51b3010 	ldr	r3, [fp, #-16]
   24a3c:	e3530000 	cmp	r3, #0
   24a40:	1a000005 	bne	24a5c <SMSC951xDeviceReadReg+0x54>
   24a44:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   24a48:	e3400002 	movt	r0, #2
   24a4c:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24a50:	e3401002 	movt	r1, #2
   24a54:	e30021a3 	movw	r2, #419	; 0x1a3
   24a58:	ebffc7d4 	bl	169b0 <uspi_assertion_failed>

	return DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   24a5c:	e51b3010 	ldr	r3, [fp, #-16]
   24a60:	e1a00003 	mov	r0, r3
   24a64:	ebffed66 	bl	20004 <USBDeviceGetHost>
   24a68:	e1a05000 	mov	r5, r0
					  USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   24a6c:	e51b3010 	ldr	r3, [fp, #-16]
   24a70:	e1a00003 	mov	r0, r3
   24a74:	ebffed3a 	bl	1ff64 <USBDeviceGetEndpoint0>
   24a78:	e1a01000 	mov	r1, r0

boolean SMSC951xDeviceReadReg (TSMSC951xDevice *pThis, u32 nIndex, u32 *pValue)
{
	assert (pThis != 0);

	return DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   24a7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   24a80:	e6ff3073 	uxth	r3, r3
   24a84:	e3a02000 	mov	r2, #0
   24a88:	e58d2000 	str	r2, [sp]
   24a8c:	e58d3004 	str	r3, [sp, #4]
   24a90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24a94:	e58d3008 	str	r3, [sp, #8]
   24a98:	e3a03004 	mov	r3, #4
   24a9c:	e58d300c 	str	r3, [sp, #12]
   24aa0:	e1a00005 	mov	r0, r5
   24aa4:	e3a020c0 	mov	r2, #192	; 0xc0
   24aa8:	e3a030a1 	mov	r3, #161	; 0xa1
   24aac:	ebffd02c 	bl	18b64 <DWHCIDeviceControlMessage>
   24ab0:	e1a03000 	mov	r3, r0
					  USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
					  REQUEST_IN | REQUEST_VENDOR, READ_REGISTER,
					  0, nIndex, pValue, sizeof *pValue) == (int) sizeof *pValue;
   24ab4:	e3530004 	cmp	r3, #4
   24ab8:	03a03001 	moveq	r3, #1
   24abc:	13a03000 	movne	r3, #0
   24ac0:	e6ef3073 	uxtb	r3, r3

boolean SMSC951xDeviceReadReg (TSMSC951xDevice *pThis, u32 nIndex, u32 *pValue)
{
	assert (pThis != 0);

	return DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   24ac4:	e1a05003 	mov	r5, r3
   24ac8:	e1a03004 	mov	r3, r4
   24acc:	e3040a08 	movw	r0, #18952	; 0x4a08
   24ad0:	e3400002 	movt	r0, #2
   24ad4:	e1a01003 	mov	r1, r3
   24ad8:	ebffc361 	bl	15864 <__cyg_profile_func_exit>
   24adc:	e1a03005 	mov	r3, r5
					  USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
					  REQUEST_IN | REQUEST_VENDOR, READ_REGISTER,
					  0, nIndex, pValue, sizeof *pValue) == (int) sizeof *pValue;
}
   24ae0:	e1a00003 	mov	r0, r3
   24ae4:	e24bd00c 	sub	sp, fp, #12
   24ae8:	e8bd8830 	pop	{r4, r5, fp, pc}

00024aec <SMSC951xDeviceDumpReg>:

#ifndef NDEBUG

void SMSC951xDeviceDumpReg (TSMSC951xDevice *pThis, const char *pName, u32 nIndex)
{
   24aec:	e92d4830 	push	{r4, r5, fp, lr}
   24af0:	e28db00c 	add	fp, sp, #12
   24af4:	e24dd020 	sub	sp, sp, #32
   24af8:	e1a0500e 	mov	r5, lr
   24afc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   24b00:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   24b04:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   24b08:	e1a03005 	mov	r3, r5
   24b0c:	e3040aec 	movw	r0, #19180	; 0x4aec
   24b10:	e3400002 	movt	r0, #2
   24b14:	e1a01003 	mov	r1, r3
   24b18:	ebffc2ff 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   24b1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24b20:	e3530000 	cmp	r3, #0
   24b24:	1a000005 	bne	24b40 <SMSC951xDeviceDumpReg+0x54>
   24b28:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   24b2c:	e3400002 	movt	r0, #2
   24b30:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24b34:	e3401002 	movt	r1, #2
   24b38:	e30021af 	movw	r2, #431	; 0x1af
   24b3c:	ebffc79b 	bl	169b0 <uspi_assertion_failed>

	u32 nValue;
	if (!SMSC951xDeviceReadReg (pThis, nIndex, &nValue))
   24b40:	e24b3010 	sub	r3, fp, #16
   24b44:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   24b48:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24b4c:	e1a02003 	mov	r2, r3
   24b50:	ebffffac 	bl	24a08 <SMSC951xDeviceReadReg>
   24b54:	e1a03000 	mov	r3, r0
   24b58:	e3530000 	cmp	r3, #0
   24b5c:	1a000008 	bne	24b84 <SMSC951xDeviceDumpReg+0x98>
	{
		LogWrite (FromSMSC951x, LOG_ERROR, "Cannot read register 0x%X", nIndex);
   24b60:	e30f07cc 	movw	r0, #63436	; 0xf7cc
   24b64:	e3400002 	movt	r0, #2
   24b68:	e3a01001 	mov	r1, #1
   24b6c:	e30f29bc 	movw	r2, #63932	; 0xf9bc
   24b70:	e3402002 	movt	r2, #2
   24b74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24b78:	ebffc774 	bl	16950 <LogWrite>
   24b7c:	e3a04000 	mov	r4, #0
   24b80:	ea00000a 	b	24bb0 <SMSC951xDeviceDumpReg+0xc4>

		return;
	}

	LogWrite (FromSMSC951x, LOG_DEBUG, "%08X %s", nValue, pName);
   24b84:	e51bc010 	ldr	ip, [fp, #-16]
   24b88:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   24b8c:	e58d3000 	str	r3, [sp]
   24b90:	e30f07cc 	movw	r0, #63436	; 0xf7cc
   24b94:	e3400002 	movt	r0, #2
   24b98:	e3a01004 	mov	r1, #4
   24b9c:	e30f29d8 	movw	r2, #63960	; 0xf9d8
   24ba0:	e3402002 	movt	r2, #2
   24ba4:	e1a0300c 	mov	r3, ip
   24ba8:	ebffc768 	bl	16950 <LogWrite>
   24bac:	e3a04001 	mov	r4, #1
   24bb0:	e1a03005 	mov	r3, r5
   24bb4:	e3040aec 	movw	r0, #19180	; 0x4aec
   24bb8:	e3400002 	movt	r0, #2
   24bbc:	e1a01003 	mov	r1, r3
   24bc0:	ebffc327 	bl	15864 <__cyg_profile_func_exit>
   24bc4:	e3540001 	cmp	r4, #1
}
   24bc8:	e24bd00c 	sub	sp, fp, #12
   24bcc:	e8bd8830 	pop	{r4, r5, fp, pc}

00024bd0 <SMSC951xDeviceDumpRegs>:

void SMSC951xDeviceDumpRegs (TSMSC951xDevice *pThis)
{
   24bd0:	e92d4810 	push	{r4, fp, lr}
   24bd4:	e28db008 	add	fp, sp, #8
   24bd8:	e24dd00c 	sub	sp, sp, #12
   24bdc:	e1a0400e 	mov	r4, lr
   24be0:	e50b0010 	str	r0, [fp, #-16]
   24be4:	e1a03004 	mov	r3, r4
   24be8:	e3040bd0 	movw	r0, #19408	; 0x4bd0
   24bec:	e3400002 	movt	r0, #2
   24bf0:	e1a01003 	mov	r1, r3
   24bf4:	ebffc2c8 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   24bf8:	e51b3010 	ldr	r3, [fp, #-16]
   24bfc:	e3530000 	cmp	r3, #0
   24c00:	1a000005 	bne	24c1c <SMSC951xDeviceDumpRegs+0x4c>
   24c04:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   24c08:	e3400002 	movt	r0, #2
   24c0c:	e30f17e4 	movw	r1, #63460	; 0xf7e4
   24c10:	e3401002 	movt	r1, #2
   24c14:	e30021be 	movw	r2, #446	; 0x1be
   24c18:	ebffc764 	bl	169b0 <uspi_assertion_failed>

	SMSC951xDeviceDumpReg (pThis, "ID_REV",       ID_REV);
   24c1c:	e51b0010 	ldr	r0, [fp, #-16]
   24c20:	e30f19e0 	movw	r1, #63968	; 0xf9e0
   24c24:	e3401002 	movt	r1, #2
   24c28:	e3a02000 	mov	r2, #0
   24c2c:	ebffffae 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "INT_STS",      INT_STS);
   24c30:	e51b0010 	ldr	r0, [fp, #-16]
   24c34:	e30f19e8 	movw	r1, #63976	; 0xf9e8
   24c38:	e3401002 	movt	r1, #2
   24c3c:	e3a02008 	mov	r2, #8
   24c40:	ebffffa9 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "RX_CFG",       RX_CFG);
   24c44:	e51b0010 	ldr	r0, [fp, #-16]
   24c48:	e30f19f0 	movw	r1, #63984	; 0xf9f0
   24c4c:	e3401002 	movt	r1, #2
   24c50:	e3a0200c 	mov	r2, #12
   24c54:	ebffffa4 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "TX_CFG",       TX_CFG);
   24c58:	e51b0010 	ldr	r0, [fp, #-16]
   24c5c:	e30f19f8 	movw	r1, #63992	; 0xf9f8
   24c60:	e3401002 	movt	r1, #2
   24c64:	e3a02010 	mov	r2, #16
   24c68:	ebffff9f 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "HW_CFG",       HW_CFG);
   24c6c:	e51b0010 	ldr	r0, [fp, #-16]
   24c70:	e30f1a00 	movw	r1, #64000	; 0xfa00
   24c74:	e3401002 	movt	r1, #2
   24c78:	e3a02014 	mov	r2, #20
   24c7c:	ebffff9a 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "RX_FIFO_INF",  RX_FIFO_INF);
   24c80:	e51b0010 	ldr	r0, [fp, #-16]
   24c84:	e30f1a08 	movw	r1, #64008	; 0xfa08
   24c88:	e3401002 	movt	r1, #2
   24c8c:	e3a02018 	mov	r2, #24
   24c90:	ebffff95 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "PM_CTRL",      PM_CTRL);
   24c94:	e51b0010 	ldr	r0, [fp, #-16]
   24c98:	e30f1a14 	movw	r1, #64020	; 0xfa14
   24c9c:	e3401002 	movt	r1, #2
   24ca0:	e3a02020 	mov	r2, #32
   24ca4:	ebffff90 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "LED_GPIO_CFG", LED_GPIO_CFG);
   24ca8:	e51b0010 	ldr	r0, [fp, #-16]
   24cac:	e30f1a1c 	movw	r1, #64028	; 0xfa1c
   24cb0:	e3401002 	movt	r1, #2
   24cb4:	e3a02024 	mov	r2, #36	; 0x24
   24cb8:	ebffff8b 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "GPIO_CFG",     GPIO_CFG);
   24cbc:	e51b0010 	ldr	r0, [fp, #-16]
   24cc0:	e30f1a2c 	movw	r1, #64044	; 0xfa2c
   24cc4:	e3401002 	movt	r1, #2
   24cc8:	e3a02028 	mov	r2, #40	; 0x28
   24ccc:	ebffff86 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "AFC_CFG",      AFC_CFG);
   24cd0:	e51b0010 	ldr	r0, [fp, #-16]
   24cd4:	e30f1a38 	movw	r1, #64056	; 0xfa38
   24cd8:	e3401002 	movt	r1, #2
   24cdc:	e3a0202c 	mov	r2, #44	; 0x2c
   24ce0:	ebffff81 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "BURST_CAP",    BURST_CAP);
   24ce4:	e51b0010 	ldr	r0, [fp, #-16]
   24ce8:	e30f1a40 	movw	r1, #64064	; 0xfa40
   24cec:	e3401002 	movt	r1, #2
   24cf0:	e3a02038 	mov	r2, #56	; 0x38
   24cf4:	ebffff7c 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "INT_EP_CTL",   INT_EP_CTL);
   24cf8:	e51b0010 	ldr	r0, [fp, #-16]
   24cfc:	e30f1a4c 	movw	r1, #64076	; 0xfa4c
   24d00:	e3401002 	movt	r1, #2
   24d04:	e3a02068 	mov	r2, #104	; 0x68
   24d08:	ebffff77 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "BULK_IN_DLY",  BULK_IN_DLY);
   24d0c:	e51b0010 	ldr	r0, [fp, #-16]
   24d10:	e30f1a58 	movw	r1, #64088	; 0xfa58
   24d14:	e3401002 	movt	r1, #2
   24d18:	e3a0206c 	mov	r2, #108	; 0x6c
   24d1c:	ebffff72 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "MAC_CR",       MAC_CR);
   24d20:	e51b0010 	ldr	r0, [fp, #-16]
   24d24:	e30f1a64 	movw	r1, #64100	; 0xfa64
   24d28:	e3401002 	movt	r1, #2
   24d2c:	e3a02c01 	mov	r2, #256	; 0x100
   24d30:	ebffff6d 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "ADDRH",        ADDRH);
   24d34:	e51b0010 	ldr	r0, [fp, #-16]
   24d38:	e30f1a6c 	movw	r1, #64108	; 0xfa6c
   24d3c:	e3401002 	movt	r1, #2
   24d40:	e3a02f41 	mov	r2, #260	; 0x104
   24d44:	ebffff68 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "ADDRL",        ADDRL);
   24d48:	e51b0010 	ldr	r0, [fp, #-16]
   24d4c:	e30f1a74 	movw	r1, #64116	; 0xfa74
   24d50:	e3401002 	movt	r1, #2
   24d54:	e3a02f42 	mov	r2, #264	; 0x108
   24d58:	ebffff63 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "HASHH",        HASHH);
   24d5c:	e51b0010 	ldr	r0, [fp, #-16]
   24d60:	e30f1a7c 	movw	r1, #64124	; 0xfa7c
   24d64:	e3401002 	movt	r1, #2
   24d68:	e3a02f43 	mov	r2, #268	; 0x10c
   24d6c:	ebffff5e 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "HASHL",        HASHL);
   24d70:	e51b0010 	ldr	r0, [fp, #-16]
   24d74:	e30f1a84 	movw	r1, #64132	; 0xfa84
   24d78:	e3401002 	movt	r1, #2
   24d7c:	e3a02e11 	mov	r2, #272	; 0x110
   24d80:	ebffff59 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "FLOW",         FLOW);
   24d84:	e51b0010 	ldr	r0, [fp, #-16]
   24d88:	e30f1a8c 	movw	r1, #64140	; 0xfa8c
   24d8c:	e3401002 	movt	r1, #2
   24d90:	e3a02f47 	mov	r2, #284	; 0x11c
   24d94:	ebffff54 	bl	24aec <SMSC951xDeviceDumpReg>
	SMSC951xDeviceDumpReg (pThis, "WUCSR",        WUCSR);
   24d98:	e51b0010 	ldr	r0, [fp, #-16]
   24d9c:	e30f1a94 	movw	r1, #64148	; 0xfa94
   24da0:	e3401002 	movt	r1, #2
   24da4:	e3a02f4b 	mov	r2, #300	; 0x12c
   24da8:	ebffff4f 	bl	24aec <SMSC951xDeviceDumpReg>
   24dac:	e1a03004 	mov	r3, r4
   24db0:	e3040bd0 	movw	r0, #19408	; 0x4bd0
   24db4:	e3400002 	movt	r0, #2
   24db8:	e1a01003 	mov	r1, r3
   24dbc:	ebffc2a8 	bl	15864 <__cyg_profile_func_exit>
}
   24dc0:	e24bd008 	sub	sp, fp, #8
   24dc4:	e8bd8810 	pop	{r4, fp, pc}

00024dc8 <String>:
void StringPutString (TString *pThis, const char *pString);
void StringReserveSpace (TString *pThis, size_t nSpace);
char *ntoa (char *pDest, unsigned long ulNumber, unsigned nBase, boolean bUpcase);

void String (TString *pThis)
{
   24dc8:	e92d4810 	push	{r4, fp, lr}
   24dcc:	e28db008 	add	fp, sp, #8
   24dd0:	e24dd00c 	sub	sp, sp, #12
   24dd4:	e1a0400e 	mov	r4, lr
   24dd8:	e50b0010 	str	r0, [fp, #-16]
   24ddc:	e1a03004 	mov	r3, r4
   24de0:	e3040dc8 	movw	r0, #19912	; 0x4dc8
   24de4:	e3400002 	movt	r0, #2
   24de8:	e1a01003 	mov	r1, r3
   24dec:	ebffc24a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   24df0:	e51b3010 	ldr	r3, [fp, #-16]
   24df4:	e3530000 	cmp	r3, #0
   24df8:	1a000005 	bne	24e14 <String+0x4c>
   24dfc:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   24e00:	e3400002 	movt	r0, #2
   24e04:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   24e08:	e3401002 	movt	r1, #2
   24e0c:	e3a02023 	mov	r2, #35	; 0x23
   24e10:	ebffc6e6 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pBuffer = 0;
   24e14:	e51b3010 	ldr	r3, [fp, #-16]
   24e18:	e3a02000 	mov	r2, #0
   24e1c:	e5832000 	str	r2, [r3]
	pThis->m_nSize = 0;
   24e20:	e51b3010 	ldr	r3, [fp, #-16]
   24e24:	e3a02000 	mov	r2, #0
   24e28:	e5832004 	str	r2, [r3, #4]
   24e2c:	e1a03004 	mov	r3, r4
   24e30:	e3040dc8 	movw	r0, #19912	; 0x4dc8
   24e34:	e3400002 	movt	r0, #2
   24e38:	e1a01003 	mov	r1, r3
   24e3c:	ebffc288 	bl	15864 <__cyg_profile_func_exit>
}
   24e40:	e24bd008 	sub	sp, fp, #8
   24e44:	e8bd8810 	pop	{r4, fp, pc}

00024e48 <String2>:

void String2 (TString *pThis, const char *pString)
{
   24e48:	e92d4810 	push	{r4, fp, lr}
   24e4c:	e28db008 	add	fp, sp, #8
   24e50:	e24dd00c 	sub	sp, sp, #12
   24e54:	e1a0400e 	mov	r4, lr
   24e58:	e50b0010 	str	r0, [fp, #-16]
   24e5c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   24e60:	e1a03004 	mov	r3, r4
   24e64:	e3040e48 	movw	r0, #20040	; 0x4e48
   24e68:	e3400002 	movt	r0, #2
   24e6c:	e1a01003 	mov	r1, r3
   24e70:	ebffc229 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   24e74:	e51b3010 	ldr	r3, [fp, #-16]
   24e78:	e3530000 	cmp	r3, #0
   24e7c:	1a000005 	bne	24e98 <String2+0x50>
   24e80:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   24e84:	e3400002 	movt	r0, #2
   24e88:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   24e8c:	e3401002 	movt	r1, #2
   24e90:	e3a0202a 	mov	r2, #42	; 0x2a
   24e94:	ebffc6c5 	bl	169b0 <uspi_assertion_failed>

	pThis->m_nSize = strlen (pString)+1;
   24e98:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   24e9c:	eb0004ec 	bl	26254 <uspi_strlen>
   24ea0:	e1a03000 	mov	r3, r0
   24ea4:	e2832001 	add	r2, r3, #1
   24ea8:	e51b3010 	ldr	r3, [fp, #-16]
   24eac:	e5832004 	str	r2, [r3, #4]

	pThis->m_pBuffer = (char *) malloc (pThis->m_nSize);
   24eb0:	e51b3010 	ldr	r3, [fp, #-16]
   24eb4:	e5933004 	ldr	r3, [r3, #4]
   24eb8:	e1a00003 	mov	r0, r3
   24ebc:	ebffc6e5 	bl	16a58 <malloc>
   24ec0:	e1a03000 	mov	r3, r0
   24ec4:	e1a02003 	mov	r2, r3
   24ec8:	e51b3010 	ldr	r3, [fp, #-16]
   24ecc:	e5832000 	str	r2, [r3]

	strcpy (pThis->m_pBuffer, pString);
   24ed0:	e51b3010 	ldr	r3, [fp, #-16]
   24ed4:	e5933000 	ldr	r3, [r3]
   24ed8:	e1a00003 	mov	r0, r3
   24edc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   24ee0:	eb000547 	bl	26404 <uspi_strcpy>
   24ee4:	e1a03004 	mov	r3, r4
   24ee8:	e3040e48 	movw	r0, #20040	; 0x4e48
   24eec:	e3400002 	movt	r0, #2
   24ef0:	e1a01003 	mov	r1, r3
   24ef4:	ebffc25a 	bl	15864 <__cyg_profile_func_exit>
}
   24ef8:	e24bd008 	sub	sp, fp, #8
   24efc:	e8bd8810 	pop	{r4, fp, pc}

00024f00 <_String>:

void _String (TString *pThis)
{
   24f00:	e92d4810 	push	{r4, fp, lr}
   24f04:	e28db008 	add	fp, sp, #8
   24f08:	e24dd00c 	sub	sp, sp, #12
   24f0c:	e1a0400e 	mov	r4, lr
   24f10:	e50b0010 	str	r0, [fp, #-16]
   24f14:	e1a03004 	mov	r3, r4
   24f18:	e3040f00 	movw	r0, #20224	; 0x4f00
   24f1c:	e3400002 	movt	r0, #2
   24f20:	e1a01003 	mov	r1, r3
   24f24:	ebffc1fc 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   24f28:	e51b3010 	ldr	r3, [fp, #-16]
   24f2c:	e3530000 	cmp	r3, #0
   24f30:	1a000005 	bne	24f4c <_String+0x4c>
   24f34:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   24f38:	e3400002 	movt	r0, #2
   24f3c:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   24f40:	e3401002 	movt	r1, #2
   24f44:	e3a02035 	mov	r2, #53	; 0x35
   24f48:	ebffc698 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pBuffer != 0)
   24f4c:	e51b3010 	ldr	r3, [fp, #-16]
   24f50:	e5933000 	ldr	r3, [r3]
   24f54:	e3530000 	cmp	r3, #0
   24f58:	0a000006 	beq	24f78 <_String+0x78>
	{
		free (pThis->m_pBuffer);
   24f5c:	e51b3010 	ldr	r3, [fp, #-16]
   24f60:	e5933000 	ldr	r3, [r3]
   24f64:	e1a00003 	mov	r0, r3
   24f68:	ebffc6d0 	bl	16ab0 <free>
		pThis->m_pBuffer = 0;
   24f6c:	e51b3010 	ldr	r3, [fp, #-16]
   24f70:	e3a02000 	mov	r2, #0
   24f74:	e5832000 	str	r2, [r3]
   24f78:	e1a03004 	mov	r3, r4
   24f7c:	e3040f00 	movw	r0, #20224	; 0x4f00
   24f80:	e3400002 	movt	r0, #2
   24f84:	e1a01003 	mov	r1, r3
   24f88:	ebffc235 	bl	15864 <__cyg_profile_func_exit>
	}
}
   24f8c:	e24bd008 	sub	sp, fp, #8
   24f90:	e8bd8810 	pop	{r4, fp, pc}

00024f94 <StringGet>:

const char *StringGet (TString *pThis)
{
   24f94:	e92d4830 	push	{r4, r5, fp, lr}
   24f98:	e28db00c 	add	fp, sp, #12
   24f9c:	e24dd008 	sub	sp, sp, #8
   24fa0:	e1a0500e 	mov	r5, lr
   24fa4:	e50b0010 	str	r0, [fp, #-16]
   24fa8:	e1a03005 	mov	r3, r5
   24fac:	e3040f94 	movw	r0, #20372	; 0x4f94
   24fb0:	e3400002 	movt	r0, #2
   24fb4:	e1a01003 	mov	r1, r3
   24fb8:	ebffc1d7 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   24fbc:	e51b3010 	ldr	r3, [fp, #-16]
   24fc0:	e3530000 	cmp	r3, #0
   24fc4:	1a000005 	bne	24fe0 <StringGet+0x4c>
   24fc8:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   24fcc:	e3400002 	movt	r0, #2
   24fd0:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   24fd4:	e3401002 	movt	r1, #2
   24fd8:	e3a02040 	mov	r2, #64	; 0x40
   24fdc:	ebffc673 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pBuffer != 0)
   24fe0:	e51b3010 	ldr	r3, [fp, #-16]
   24fe4:	e5933000 	ldr	r3, [r3]
   24fe8:	e3530000 	cmp	r3, #0
   24fec:	0a000002 	beq	24ffc <StringGet+0x68>
	{
		return pThis->m_pBuffer;
   24ff0:	e51b3010 	ldr	r3, [fp, #-16]
   24ff4:	e5934000 	ldr	r4, [r3]
   24ff8:	ea000001 	b	25004 <StringGet+0x70>
	}

	return "";
   24ffc:	e30f4b04 	movw	r4, #64260	; 0xfb04
   25000:	e3404002 	movt	r4, #2
   25004:	e1a03005 	mov	r3, r5
   25008:	e3040f94 	movw	r0, #20372	; 0x4f94
   2500c:	e3400002 	movt	r0, #2
   25010:	e1a01003 	mov	r1, r3
   25014:	ebffc212 	bl	15864 <__cyg_profile_func_exit>
   25018:	e1a03004 	mov	r3, r4
}
   2501c:	e1a00003 	mov	r0, r3
   25020:	e24bd00c 	sub	sp, fp, #12
   25024:	e8bd8830 	pop	{r4, r5, fp, pc}

00025028 <StringSet>:

const char *StringSet (TString *pThis, const char *pString)
{
   25028:	e92d4830 	push	{r4, r5, fp, lr}
   2502c:	e28db00c 	add	fp, sp, #12
   25030:	e24dd008 	sub	sp, sp, #8
   25034:	e1a0500e 	mov	r5, lr
   25038:	e50b0010 	str	r0, [fp, #-16]
   2503c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   25040:	e1a03005 	mov	r3, r5
   25044:	e3050028 	movw	r0, #20520	; 0x5028
   25048:	e3400002 	movt	r0, #2
   2504c:	e1a01003 	mov	r1, r3
   25050:	ebffc1b1 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   25054:	e51b3010 	ldr	r3, [fp, #-16]
   25058:	e3530000 	cmp	r3, #0
   2505c:	1a000005 	bne	25078 <StringSet+0x50>
   25060:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   25064:	e3400002 	movt	r0, #2
   25068:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   2506c:	e3401002 	movt	r1, #2
   25070:	e3a0204c 	mov	r2, #76	; 0x4c
   25074:	ebffc64d 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pBuffer != 0)
   25078:	e51b3010 	ldr	r3, [fp, #-16]
   2507c:	e5933000 	ldr	r3, [r3]
   25080:	e3530000 	cmp	r3, #0
   25084:	0a000003 	beq	25098 <StringSet+0x70>
	{
		free (pThis->m_pBuffer);
   25088:	e51b3010 	ldr	r3, [fp, #-16]
   2508c:	e5933000 	ldr	r3, [r3]
   25090:	e1a00003 	mov	r0, r3
   25094:	ebffc685 	bl	16ab0 <free>
	}
	
	pThis->m_nSize = strlen (pString)+1;
   25098:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2509c:	eb00046c 	bl	26254 <uspi_strlen>
   250a0:	e1a03000 	mov	r3, r0
   250a4:	e2832001 	add	r2, r3, #1
   250a8:	e51b3010 	ldr	r3, [fp, #-16]
   250ac:	e5832004 	str	r2, [r3, #4]

	pThis->m_pBuffer = (char *) malloc (pThis->m_nSize);
   250b0:	e51b3010 	ldr	r3, [fp, #-16]
   250b4:	e5933004 	ldr	r3, [r3, #4]
   250b8:	e1a00003 	mov	r0, r3
   250bc:	ebffc665 	bl	16a58 <malloc>
   250c0:	e1a03000 	mov	r3, r0
   250c4:	e1a02003 	mov	r2, r3
   250c8:	e51b3010 	ldr	r3, [fp, #-16]
   250cc:	e5832000 	str	r2, [r3]

	strcpy (pThis->m_pBuffer, pString);
   250d0:	e51b3010 	ldr	r3, [fp, #-16]
   250d4:	e5933000 	ldr	r3, [r3]
   250d8:	e1a00003 	mov	r0, r3
   250dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   250e0:	eb0004c7 	bl	26404 <uspi_strcpy>

	return pThis->m_pBuffer;
   250e4:	e51b3010 	ldr	r3, [fp, #-16]
   250e8:	e5934000 	ldr	r4, [r3]
   250ec:	e1a03005 	mov	r3, r5
   250f0:	e3050028 	movw	r0, #20520	; 0x5028
   250f4:	e3400002 	movt	r0, #2
   250f8:	e1a01003 	mov	r1, r3
   250fc:	ebffc1d8 	bl	15864 <__cyg_profile_func_exit>
   25100:	e1a03004 	mov	r3, r4
}
   25104:	e1a00003 	mov	r0, r3
   25108:	e24bd00c 	sub	sp, fp, #12
   2510c:	e8bd8830 	pop	{r4, r5, fp, pc}

00025110 <StringGetLength>:

size_t StringGetLength (TString *pThis)
{
   25110:	e92d4830 	push	{r4, r5, fp, lr}
   25114:	e28db00c 	add	fp, sp, #12
   25118:	e24dd008 	sub	sp, sp, #8
   2511c:	e1a0500e 	mov	r5, lr
   25120:	e50b0010 	str	r0, [fp, #-16]
   25124:	e1a03005 	mov	r3, r5
   25128:	e3050110 	movw	r0, #20752	; 0x5110
   2512c:	e3400002 	movt	r0, #2
   25130:	e1a01003 	mov	r1, r3
   25134:	ebffc178 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   25138:	e51b3010 	ldr	r3, [fp, #-16]
   2513c:	e3530000 	cmp	r3, #0
   25140:	1a000005 	bne	2515c <StringGetLength+0x4c>
   25144:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   25148:	e3400002 	movt	r0, #2
   2514c:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   25150:	e3401002 	movt	r1, #2
   25154:	e3a0205e 	mov	r2, #94	; 0x5e
   25158:	ebffc614 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pBuffer == 0)
   2515c:	e51b3010 	ldr	r3, [fp, #-16]
   25160:	e5933000 	ldr	r3, [r3]
   25164:	e3530000 	cmp	r3, #0
   25168:	1a000001 	bne	25174 <StringGetLength+0x64>
	{
		return 0;
   2516c:	e3a04000 	mov	r4, #0
   25170:	ea000004 	b	25188 <StringGetLength+0x78>
	}
	
	return strlen (pThis->m_pBuffer);
   25174:	e51b3010 	ldr	r3, [fp, #-16]
   25178:	e5933000 	ldr	r3, [r3]
   2517c:	e1a00003 	mov	r0, r3
   25180:	eb000433 	bl	26254 <uspi_strlen>
   25184:	e1a04000 	mov	r4, r0
   25188:	e1a03005 	mov	r3, r5
   2518c:	e3050110 	movw	r0, #20752	; 0x5110
   25190:	e3400002 	movt	r0, #2
   25194:	e1a01003 	mov	r1, r3
   25198:	ebffc1b1 	bl	15864 <__cyg_profile_func_exit>
   2519c:	e1a03004 	mov	r3, r4
}
   251a0:	e1a00003 	mov	r0, r3
   251a4:	e24bd00c 	sub	sp, fp, #12
   251a8:	e8bd8830 	pop	{r4, r5, fp, pc}

000251ac <StringAppend>:

void StringAppend (TString *pThis, const char *pString)
{
   251ac:	e92d4810 	push	{r4, fp, lr}
   251b0:	e28db008 	add	fp, sp, #8
   251b4:	e24dd014 	sub	sp, sp, #20
   251b8:	e1a0400e 	mov	r4, lr
   251bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   251c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   251c4:	e1a03004 	mov	r3, r4
   251c8:	e30501ac 	movw	r0, #20908	; 0x51ac
   251cc:	e3400002 	movt	r0, #2
   251d0:	e1a01003 	mov	r1, r3
   251d4:	ebffc150 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   251d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   251dc:	e3530000 	cmp	r3, #0
   251e0:	1a000005 	bne	251fc <StringAppend+0x50>
   251e4:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   251e8:	e3400002 	movt	r0, #2
   251ec:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   251f0:	e3401002 	movt	r1, #2
   251f4:	e3a0206a 	mov	r2, #106	; 0x6a
   251f8:	ebffc5ec 	bl	169b0 <uspi_assertion_failed>

	pThis->m_nSize = 1;		// for terminating '\0'
   251fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25200:	e3a02001 	mov	r2, #1
   25204:	e5832004 	str	r2, [r3, #4]
	if (pThis->m_pBuffer != 0)
   25208:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2520c:	e5933000 	ldr	r3, [r3]
   25210:	e3530000 	cmp	r3, #0
   25214:	0a000009 	beq	25240 <StringAppend+0x94>
	{
		pThis->m_nSize += strlen (pThis->m_pBuffer);
   25218:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2521c:	e5933000 	ldr	r3, [r3]
   25220:	e1a00003 	mov	r0, r3
   25224:	eb00040a 	bl	26254 <uspi_strlen>
   25228:	e1a02000 	mov	r2, r0
   2522c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25230:	e5933004 	ldr	r3, [r3, #4]
   25234:	e0832002 	add	r2, r3, r2
   25238:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2523c:	e5832004 	str	r2, [r3, #4]
	}
	pThis->m_nSize += strlen (pString);
   25240:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   25244:	eb000402 	bl	26254 <uspi_strlen>
   25248:	e1a02000 	mov	r2, r0
   2524c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25250:	e5933004 	ldr	r3, [r3, #4]
   25254:	e0832002 	add	r2, r3, r2
   25258:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2525c:	e5832004 	str	r2, [r3, #4]

	char *pBuffer = (char *) malloc (pThis->m_nSize);
   25260:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25264:	e5933004 	ldr	r3, [r3, #4]
   25268:	e1a00003 	mov	r0, r3
   2526c:	ebffc5f9 	bl	16a58 <malloc>
   25270:	e1a03000 	mov	r3, r0
   25274:	e50b3010 	str	r3, [fp, #-16]

	if (pThis->m_pBuffer != 0)
   25278:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2527c:	e5933000 	ldr	r3, [r3]
   25280:	e3530000 	cmp	r3, #0
   25284:	0a000009 	beq	252b0 <StringAppend+0x104>
	{
		strcpy (pBuffer, pThis->m_pBuffer);
   25288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2528c:	e5933000 	ldr	r3, [r3]
   25290:	e51b0010 	ldr	r0, [fp, #-16]
   25294:	e1a01003 	mov	r1, r3
   25298:	eb000459 	bl	26404 <uspi_strcpy>
		free (pThis->m_pBuffer);
   2529c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   252a0:	e5933000 	ldr	r3, [r3]
   252a4:	e1a00003 	mov	r0, r3
   252a8:	ebffc600 	bl	16ab0 <free>
   252ac:	ea000002 	b	252bc <StringAppend+0x110>
	}
	else
	{
		*pBuffer = '\0';
   252b0:	e51b3010 	ldr	r3, [fp, #-16]
   252b4:	e3a02000 	mov	r2, #0
   252b8:	e5c32000 	strb	r2, [r3]
	}

	strcat (pBuffer, pString);
   252bc:	e51b0010 	ldr	r0, [fp, #-16]
   252c0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   252c4:	eb0004a7 	bl	26568 <uspi_strcat>

	pThis->m_pBuffer = pBuffer;
   252c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   252cc:	e51b2010 	ldr	r2, [fp, #-16]
   252d0:	e5832000 	str	r2, [r3]
   252d4:	e1a03004 	mov	r3, r4
   252d8:	e30501ac 	movw	r0, #20908	; 0x51ac
   252dc:	e3400002 	movt	r0, #2
   252e0:	e1a01003 	mov	r1, r3
   252e4:	ebffc15e 	bl	15864 <__cyg_profile_func_exit>
}
   252e8:	e24bd008 	sub	sp, fp, #8
   252ec:	e8bd8810 	pop	{r4, fp, pc}

000252f0 <StringCompare>:

int StringCompare (TString *pThis, const char *pString)
{
   252f0:	e92d4830 	push	{r4, r5, fp, lr}
   252f4:	e28db00c 	add	fp, sp, #12
   252f8:	e24dd008 	sub	sp, sp, #8
   252fc:	e1a0400e 	mov	r4, lr
   25300:	e50b0010 	str	r0, [fp, #-16]
   25304:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   25308:	e1a03004 	mov	r3, r4
   2530c:	e30502f0 	movw	r0, #21232	; 0x52f0
   25310:	e3400002 	movt	r0, #2
   25314:	e1a01003 	mov	r1, r3
   25318:	ebffc0ff 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2531c:	e51b3010 	ldr	r3, [fp, #-16]
   25320:	e3530000 	cmp	r3, #0
   25324:	1a000005 	bne	25340 <StringCompare+0x50>
   25328:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   2532c:	e3400002 	movt	r0, #2
   25330:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   25334:	e3401002 	movt	r1, #2
   25338:	e3a02086 	mov	r2, #134	; 0x86
   2533c:	ebffc59b 	bl	169b0 <uspi_assertion_failed>

	return strcmp (pThis->m_pBuffer, pString);
   25340:	e51b3010 	ldr	r3, [fp, #-16]
   25344:	e5933000 	ldr	r3, [r3]
   25348:	e1a00003 	mov	r0, r3
   2534c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   25350:	eb0003df 	bl	262d4 <uspi_strcmp>
   25354:	e1a05000 	mov	r5, r0
   25358:	e1a03004 	mov	r3, r4
   2535c:	e30502f0 	movw	r0, #21232	; 0x52f0
   25360:	e3400002 	movt	r0, #2
   25364:	e1a01003 	mov	r1, r3
   25368:	ebffc13d 	bl	15864 <__cyg_profile_func_exit>
   2536c:	e1a03005 	mov	r3, r5
}
   25370:	e1a00003 	mov	r0, r3
   25374:	e24bd00c 	sub	sp, fp, #12
   25378:	e8bd8830 	pop	{r4, r5, fp, pc}

0002537c <StringFind>:

int StringFind (TString *pThis, char chChar)
{
   2537c:	e92d4830 	push	{r4, r5, fp, lr}
   25380:	e28db00c 	add	fp, sp, #12
   25384:	e24dd010 	sub	sp, sp, #16
   25388:	e1a0500e 	mov	r5, lr
   2538c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25390:	e1a03001 	mov	r3, r1
   25394:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   25398:	e1a03005 	mov	r3, r5
   2539c:	e305037c 	movw	r0, #21372	; 0x537c
   253a0:	e3400002 	movt	r0, #2
   253a4:	e1a01003 	mov	r1, r3
   253a8:	ebffc0db 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   253ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   253b0:	e3530000 	cmp	r3, #0
   253b4:	1a000005 	bne	253d0 <StringFind+0x54>
   253b8:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   253bc:	e3400002 	movt	r0, #2
   253c0:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   253c4:	e3401002 	movt	r1, #2
   253c8:	e3a0208d 	mov	r2, #141	; 0x8d
   253cc:	ebffc577 	bl	169b0 <uspi_assertion_failed>

	int nPos = 0;
   253d0:	e3a03000 	mov	r3, #0
   253d4:	e50b3010 	str	r3, [fp, #-16]

	char *p;
	for (p = pThis->m_pBuffer; *p; p++)
   253d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   253dc:	e5933000 	ldr	r3, [r3]
   253e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   253e4:	ea00000d 	b	25420 <StringFind+0xa4>
	{
		if (*p == chChar)
   253e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   253ec:	e5d33000 	ldrb	r3, [r3]
   253f0:	e15b21d9 	ldrsb	r2, [fp, #-25]	; 0xffffffe7
   253f4:	e6af3073 	sxtb	r3, r3
   253f8:	e1520003 	cmp	r2, r3
   253fc:	1a000001 	bne	25408 <StringFind+0x8c>
		{
			return nPos;
   25400:	e51b4010 	ldr	r4, [fp, #-16]
   25404:	ea00000a 	b	25434 <StringFind+0xb8>
		}

		nPos++;
   25408:	e51b3010 	ldr	r3, [fp, #-16]
   2540c:	e2833001 	add	r3, r3, #1
   25410:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);

	int nPos = 0;

	char *p;
	for (p = pThis->m_pBuffer; *p; p++)
   25414:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25418:	e2833001 	add	r3, r3, #1
   2541c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   25420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25424:	e5d33000 	ldrb	r3, [r3]
   25428:	e3530000 	cmp	r3, #0
   2542c:	1affffed 	bne	253e8 <StringFind+0x6c>
		}

		nPos++;
	}

	return -1;
   25430:	e3e04000 	mvn	r4, #0
   25434:	e1a03005 	mov	r3, r5
   25438:	e305037c 	movw	r0, #21372	; 0x537c
   2543c:	e3400002 	movt	r0, #2
   25440:	e1a01003 	mov	r1, r3
   25444:	ebffc106 	bl	15864 <__cyg_profile_func_exit>
   25448:	e1a03004 	mov	r3, r4
}
   2544c:	e1a00003 	mov	r0, r3
   25450:	e24bd00c 	sub	sp, fp, #12
   25454:	e8bd8830 	pop	{r4, r5, fp, pc}

00025458 <StringFormat>:

void StringFormat (TString *pThis, const char *pFormat, ...)
{
   25458:	e92d000e 	push	{r1, r2, r3}
   2545c:	e92d4810 	push	{r4, fp, lr}
   25460:	e28db008 	add	fp, sp, #8
   25464:	e24dd010 	sub	sp, sp, #16
   25468:	e1a0400e 	mov	r4, lr
   2546c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
   25470:	e1a03004 	mov	r3, r4
   25474:	e3050458 	movw	r0, #21592	; 0x5458
   25478:	e3400002 	movt	r0, #2
   2547c:	e1a01003 	mov	r1, r3
   25480:	ebffc0a5 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   25484:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25488:	e3530000 	cmp	r3, #0
   2548c:	1a000005 	bne	254a8 <StringFormat+0x50>
   25490:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   25494:	e3400002 	movt	r0, #2
   25498:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   2549c:	e3401002 	movt	r1, #2
   254a0:	e3a020a1 	mov	r2, #161	; 0xa1
   254a4:	ebffc541 	bl	169b0 <uspi_assertion_failed>

	va_list var;
	va_start (var, pFormat);
   254a8:	e28b3008 	add	r3, fp, #8
   254ac:	e50b300c 	str	r3, [fp, #-12]

	StringFormatV (pThis, pFormat, var);
   254b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   254b4:	e59b1004 	ldr	r1, [fp, #4]
   254b8:	e51b200c 	ldr	r2, [fp, #-12]
   254bc:	eb000008 	bl	254e4 <StringFormatV>
   254c0:	e1a03004 	mov	r3, r4
   254c4:	e3050458 	movw	r0, #21592	; 0x5458
   254c8:	e3400002 	movt	r0, #2
   254cc:	e1a01003 	mov	r1, r3
   254d0:	ebffc0e3 	bl	15864 <__cyg_profile_func_exit>

	va_end (var);
}
   254d4:	e24bd008 	sub	sp, fp, #8
   254d8:	e8bd4810 	pop	{r4, fp, lr}
   254dc:	e28dd00c 	add	sp, sp, #12
   254e0:	e12fff1e 	bx	lr

000254e4 <StringFormatV>:

void StringFormatV (TString *pThis, const char *pFormat, va_list Args)
{
   254e4:	e92d4810 	push	{r4, fp, lr}
   254e8:	e28db008 	add	fp, sp, #8
   254ec:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   254f0:	e1a0400e 	mov	r4, lr
   254f4:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   254f8:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
   254fc:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
   25500:	e1a03004 	mov	r3, r4
   25504:	e30504e4 	movw	r0, #21732	; 0x54e4
   25508:	e3400002 	movt	r0, #2
   2550c:	e1a01003 	mov	r1, r3
   25510:	ebffc081 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   25514:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25518:	e3530000 	cmp	r3, #0
   2551c:	1a000005 	bne	25538 <StringFormatV+0x54>
   25520:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   25524:	e3400002 	movt	r0, #2
   25528:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   2552c:	e3401002 	movt	r1, #2
   25530:	e3a020ad 	mov	r2, #173	; 0xad
   25534:	ebffc51d 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pBuffer != 0)
   25538:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2553c:	e5933000 	ldr	r3, [r3]
   25540:	e3530000 	cmp	r3, #0
   25544:	0a000003 	beq	25558 <StringFormatV+0x74>
	{
		free (pThis->m_pBuffer);
   25548:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2554c:	e5933000 	ldr	r3, [r3]
   25550:	e1a00003 	mov	r0, r3
   25554:	ebffc555 	bl	16ab0 <free>
	}
	
	pThis->m_nSize = FORMAT_RESERVE;
   25558:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2555c:	e3a02040 	mov	r2, #64	; 0x40
   25560:	e5832004 	str	r2, [r3, #4]
	pThis->m_pBuffer = (char *) malloc (pThis->m_nSize);
   25564:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25568:	e5933004 	ldr	r3, [r3, #4]
   2556c:	e1a00003 	mov	r0, r3
   25570:	ebffc538 	bl	16a58 <malloc>
   25574:	e1a03000 	mov	r3, r0
   25578:	e1a02003 	mov	r2, r3
   2557c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25580:	e5832000 	str	r2, [r3]
	pThis->m_pInPtr = pThis->m_pBuffer;
   25584:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25588:	e5932000 	ldr	r2, [r3]
   2558c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25590:	e5832008 	str	r2, [r3, #8]

	while (*pFormat != '\0')
   25594:	ea000192 	b	25be4 <StringFormatV+0x700>
	{
		if (*pFormat == '%')
   25598:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2559c:	e5d33000 	ldrb	r3, [r3]
   255a0:	e6af3073 	sxtb	r3, r3
   255a4:	e3530025 	cmp	r3, #37	; 0x25
   255a8:	1a000183 	bne	25bbc <StringFormatV+0x6d8>
		{
			if (*++pFormat == '%')
   255ac:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   255b0:	e2833001 	add	r3, r3, #1
   255b4:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
   255b8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   255bc:	e5d33000 	ldrb	r3, [r3]
   255c0:	e6af3073 	sxtb	r3, r3
   255c4:	e3530025 	cmp	r3, #37	; 0x25
   255c8:	1a000007 	bne	255ec <StringFormatV+0x108>
			{
				StringPutChar (pThis, '%', 1);
   255cc:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   255d0:	e3a01025 	mov	r1, #37	; 0x25
   255d4:	e3a02001 	mov	r2, #1
   255d8:	eb000190 	bl	25c20 <StringPutChar>
				
				pFormat++;
   255dc:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   255e0:	e2833001 	add	r3, r3, #1
   255e4:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
   255e8:	ea00017d 	b	25be4 <StringFormatV+0x700>

				continue;
			}

			boolean bLeft = FALSE;
   255ec:	e3a03000 	mov	r3, #0
   255f0:	e50b3010 	str	r3, [fp, #-16]
			if (*pFormat == '-')
   255f4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   255f8:	e5d33000 	ldrb	r3, [r3]
   255fc:	e6af3073 	sxtb	r3, r3
   25600:	e353002d 	cmp	r3, #45	; 0x2d
   25604:	1a000004 	bne	2561c <StringFormatV+0x138>
			{
				bLeft = TRUE;
   25608:	e3a03001 	mov	r3, #1
   2560c:	e50b3010 	str	r3, [fp, #-16]

				pFormat++;
   25610:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   25614:	e2833001 	add	r3, r3, #1
   25618:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
			}

			boolean bNull = FALSE;
   2561c:	e3a03000 	mov	r3, #0
   25620:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			if (*pFormat == '0')
   25624:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   25628:	e5d33000 	ldrb	r3, [r3]
   2562c:	e6af3073 	sxtb	r3, r3
   25630:	e3530030 	cmp	r3, #48	; 0x30
   25634:	1a000004 	bne	2564c <StringFormatV+0x168>
			{
				bNull = TRUE;
   25638:	e3a03001 	mov	r3, #1
   2563c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

				pFormat++;
   25640:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   25644:	e2833001 	add	r3, r3, #1
   25648:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
			}

			size_t nWidth = 0;
   2564c:	e3a03000 	mov	r3, #0
   25650:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			while ('0' <= *pFormat && *pFormat <= '9')
   25654:	ea00000b 	b	25688 <StringFormatV+0x1a4>
			{
				nWidth = nWidth * 10 + (*pFormat - '0');
   25658:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2565c:	e3a0200a 	mov	r2, #10
   25660:	e0020392 	mul	r2, r2, r3
   25664:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   25668:	e5d33000 	ldrb	r3, [r3]
   2566c:	e6af3073 	sxtb	r3, r3
   25670:	e0823003 	add	r3, r2, r3
   25674:	e2433030 	sub	r3, r3, #48	; 0x30
   25678:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

				pFormat++;
   2567c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   25680:	e2833001 	add	r3, r3, #1
   25684:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4

				pFormat++;
			}

			size_t nWidth = 0;
			while ('0' <= *pFormat && *pFormat <= '9')
   25688:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2568c:	e5d33000 	ldrb	r3, [r3]
   25690:	e6af3073 	sxtb	r3, r3
   25694:	e353002f 	cmp	r3, #47	; 0x2f
   25698:	da000004 	ble	256b0 <StringFormatV+0x1cc>
   2569c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   256a0:	e5d33000 	ldrb	r3, [r3]
   256a4:	e6af3073 	sxtb	r3, r3
   256a8:	e3530039 	cmp	r3, #57	; 0x39
   256ac:	daffffe9 	ble	25658 <StringFormatV+0x174>
				nWidth = nWidth * 10 + (*pFormat - '0');

				pFormat++;
			}

			boolean bLong = FALSE;
   256b0:	e3a03000 	mov	r3, #0
   256b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			if (*pFormat == 'l')
   256b8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   256bc:	e5d33000 	ldrb	r3, [r3]
   256c0:	e6af3073 	sxtb	r3, r3
   256c4:	e353006c 	cmp	r3, #108	; 0x6c
   256c8:	1a000004 	bne	256e0 <StringFormatV+0x1fc>
			{
				bLong = TRUE;
   256cc:	e3a03001 	mov	r3, #1
   256d0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

				pFormat++;
   256d4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   256d8:	e2833001 	add	r3, r3, #1
   256dc:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
			const char *pArg;
			unsigned long ulArg;
			size_t nLen;
			unsigned nBase;
			char NumBuf[MAX_NUMBER_LEN+1];
			boolean bMinus = FALSE;
   256e0:	e3a03000 	mov	r3, #0
   256e4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
			long lArg;

			switch (*pFormat)
   256e8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   256ec:	e5d33000 	ldrb	r3, [r3]
   256f0:	e6af3073 	sxtb	r3, r3
   256f4:	e2433058 	sub	r3, r3, #88	; 0x58
   256f8:	e3530020 	cmp	r3, #32
   256fc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   25700:	ea000120 	b	25b88 <StringFormatV+0x6a4>
   25704:	00025a50 	andeq	r5, r2, r0, asr sl
   25708:	00025b88 	andeq	r5, r2, r8, lsl #23
   2570c:	00025b88 	andeq	r5, r2, r8, lsl #23
   25710:	00025b88 	andeq	r5, r2, r8, lsl #23
   25714:	00025b88 	andeq	r5, r2, r8, lsl #23
   25718:	00025b88 	andeq	r5, r2, r8, lsl #23
   2571c:	00025b88 	andeq	r5, r2, r8, lsl #23
   25720:	00025b88 	andeq	r5, r2, r8, lsl #23
   25724:	00025b88 	andeq	r5, r2, r8, lsl #23
   25728:	00025b88 	andeq	r5, r2, r8, lsl #23
   2572c:	00025b88 	andeq	r5, r2, r8, lsl #23
   25730:	00025788 	andeq	r5, r2, r8, lsl #15
   25734:	00025824 	andeq	r5, r2, r4, lsr #16
   25738:	00025b88 	andeq	r5, r2, r8, lsl #23
   2573c:	00025b88 	andeq	r5, r2, r8, lsl #23
   25740:	00025b88 	andeq	r5, r2, r8, lsl #23
   25744:	00025b88 	andeq	r5, r2, r8, lsl #23
   25748:	00025b88 	andeq	r5, r2, r8, lsl #23
   2574c:	00025b88 	andeq	r5, r2, r8, lsl #23
   25750:	00025b88 	andeq	r5, r2, r8, lsl #23
   25754:	00025b88 	andeq	r5, r2, r8, lsl #23
   25758:	00025b88 	andeq	r5, r2, r8, lsl #23
   2575c:	00025b88 	andeq	r5, r2, r8, lsl #23
   25760:	00025990 	muleq	r2, r0, r9
   25764:	00025b88 	andeq	r5, r2, r8, lsl #23
   25768:	00025b88 	andeq	r5, r2, r8, lsl #23
   2576c:	00025b88 	andeq	r5, r2, r8, lsl #23
   25770:	0002599c 	muleq	r2, ip, r9
   25774:	00025b88 	andeq	r5, r2, r8, lsl #23
   25778:	00025a44 	andeq	r5, r2, r4, asr #20
   2577c:	00025b88 	andeq	r5, r2, r8, lsl #23
   25780:	00025b88 	andeq	r5, r2, r8, lsl #23
   25784:	00025a50 	andeq	r5, r2, r0, asr sl
			{
			case 'c':
				chArg = (char) va_arg (Args, int);
   25788:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2578c:	e2832004 	add	r2, r3, #4
   25790:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
   25794:	e5933000 	ldr	r3, [r3]
   25798:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3
				if (bLeft)
   2579c:	e51b3010 	ldr	r3, [fp, #-16]
   257a0:	e3530000 	cmp	r3, #0
   257a4:	0a00000e 	beq	257e4 <StringFormatV+0x300>
				{
					StringPutChar (pThis, chArg, 1);
   257a8:	e15b32dd 	ldrsb	r3, [fp, #-45]	; 0xffffffd3
   257ac:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   257b0:	e1a01003 	mov	r1, r3
   257b4:	e3a02001 	mov	r2, #1
   257b8:	eb000118 	bl	25c20 <StringPutChar>
					if (nWidth > 1)
   257bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   257c0:	e3530001 	cmp	r3, #1
   257c4:	9a000015 	bls	25820 <StringFormatV+0x33c>
					{
						StringPutChar (pThis, ' ', nWidth-1);
   257c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   257cc:	e2433001 	sub	r3, r3, #1
   257d0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   257d4:	e3a01020 	mov	r1, #32
   257d8:	e1a02003 	mov	r2, r3
   257dc:	eb00010f 	bl	25c20 <StringPutChar>
					{
						StringPutChar (pThis, ' ', nWidth-1);
					}
					StringPutChar (pThis, chArg, 1);
				}
				break;
   257e0:	ea0000f4 	b	25bb8 <StringFormatV+0x6d4>
						StringPutChar (pThis, ' ', nWidth-1);
					}
				}
				else
				{
					if (nWidth > 1)
   257e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   257e8:	e3530001 	cmp	r3, #1
   257ec:	9a000005 	bls	25808 <StringFormatV+0x324>
					{
						StringPutChar (pThis, ' ', nWidth-1);
   257f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   257f4:	e2433001 	sub	r3, r3, #1
   257f8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   257fc:	e3a01020 	mov	r1, #32
   25800:	e1a02003 	mov	r2, r3
   25804:	eb000105 	bl	25c20 <StringPutChar>
					}
					StringPutChar (pThis, chArg, 1);
   25808:	e15b32dd 	ldrsb	r3, [fp, #-45]	; 0xffffffd3
   2580c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25810:	e1a01003 	mov	r1, r3
   25814:	e3a02001 	mov	r2, #1
   25818:	eb000100 	bl	25c20 <StringPutChar>
				}
				break;
   2581c:	ea0000e5 	b	25bb8 <StringFormatV+0x6d4>
   25820:	ea0000e4 	b	25bb8 <StringFormatV+0x6d4>

			case 'd':
				if (bLong)
   25824:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25828:	e3530000 	cmp	r3, #0
   2582c:	0a000005 	beq	25848 <StringFormatV+0x364>
				{
					lArg = va_arg (Args, long);
   25830:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   25834:	e2832004 	add	r2, r3, #4
   25838:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
   2583c:	e5933000 	ldr	r3, [r3]
   25840:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   25844:	ea000004 	b	2585c <StringFormatV+0x378>
				}
				else
				{
					lArg = va_arg (Args, int);
   25848:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2584c:	e2832004 	add	r2, r3, #4
   25850:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
   25854:	e5933000 	ldr	r3, [r3]
   25858:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
				}
				if (lArg < 0)
   2585c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   25860:	e3530000 	cmp	r3, #0
   25864:	aa000004 	bge	2587c <StringFormatV+0x398>
				{
					bMinus = TRUE;
   25868:	e3a03001 	mov	r3, #1
   2586c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
					lArg = -lArg;
   25870:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   25874:	e2633000 	rsb	r3, r3, #0
   25878:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
				}
				ntoa (NumBuf, (unsigned long) lArg, 10, FALSE);
   2587c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   25880:	e24b2044 	sub	r2, fp, #68	; 0x44
   25884:	e1a00002 	mov	r0, r2
   25888:	e1a01003 	mov	r1, r3
   2588c:	e3a0200a 	mov	r2, #10
   25890:	e3a03000 	mov	r3, #0
   25894:	eb00018f 	bl	25ed8 <ntoa>
				nLen = strlen (NumBuf) + (bMinus ? 1 : 0);
   25898:	e24b3044 	sub	r3, fp, #68	; 0x44
   2589c:	e1a00003 	mov	r0, r3
   258a0:	eb00026b 	bl	26254 <uspi_strlen>
   258a4:	e1a02000 	mov	r2, r0
   258a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   258ac:	e3530000 	cmp	r3, #0
   258b0:	0a000001 	beq	258bc <StringFormatV+0x3d8>
   258b4:	e3a03001 	mov	r3, #1
   258b8:	ea000000 	b	258c0 <StringFormatV+0x3dc>
   258bc:	e3a03000 	mov	r3, #0
   258c0:	e0823003 	add	r3, r2, r3
   258c4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
				if (bLeft)
   258c8:	e51b3010 	ldr	r3, [fp, #-16]
   258cc:	e3530000 	cmp	r3, #0
   258d0:	0a000016 	beq	25930 <StringFormatV+0x44c>
				{
					if (bMinus)
   258d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   258d8:	e3530000 	cmp	r3, #0
   258dc:	0a000003 	beq	258f0 <StringFormatV+0x40c>
					{
						StringPutChar (pThis, '-', 1);
   258e0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   258e4:	e3a0102d 	mov	r1, #45	; 0x2d
   258e8:	e3a02001 	mov	r2, #1
   258ec:	eb0000cb 	bl	25c20 <StringPutChar>
					}
					StringPutString (pThis, NumBuf);
   258f0:	e24b3044 	sub	r3, fp, #68	; 0x44
   258f4:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   258f8:	e1a01003 	mov	r1, r3
   258fc:	eb0000f4 	bl	25cd4 <StringPutString>
					if (nWidth > nLen)
   25900:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25904:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   25908:	e1520003 	cmp	r2, r3
   2590c:	9a00001e 	bls	2598c <StringFormatV+0x4a8>
					{
						StringPutChar (pThis, ' ', nWidth-nLen);
   25910:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25914:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   25918:	e0633002 	rsb	r3, r3, r2
   2591c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25920:	e3a01020 	mov	r1, #32
   25924:	e1a02003 	mov	r2, r3
   25928:	eb0000bc 	bl	25c20 <StringPutChar>
					{
						StringPutChar (pThis, '-', 1);
					}
					StringPutString (pThis, NumBuf);
				}
				break;
   2592c:	ea0000a1 	b	25bb8 <StringFormatV+0x6d4>
						StringPutChar (pThis, ' ', nWidth-nLen);
					}
				}
				else
				{
					if (nWidth > nLen)
   25930:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25934:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   25938:	e1520003 	cmp	r2, r3
   2593c:	9a000006 	bls	2595c <StringFormatV+0x478>
					{
						StringPutChar (pThis, ' ', nWidth-nLen);
   25940:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25944:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   25948:	e0633002 	rsb	r3, r3, r2
   2594c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25950:	e3a01020 	mov	r1, #32
   25954:	e1a02003 	mov	r2, r3
   25958:	eb0000b0 	bl	25c20 <StringPutChar>
					}
					if (bMinus)
   2595c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   25960:	e3530000 	cmp	r3, #0
   25964:	0a000003 	beq	25978 <StringFormatV+0x494>
					{
						StringPutChar (pThis, '-', 1);
   25968:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   2596c:	e3a0102d 	mov	r1, #45	; 0x2d
   25970:	e3a02001 	mov	r2, #1
   25974:	eb0000a9 	bl	25c20 <StringPutChar>
					}
					StringPutString (pThis, NumBuf);
   25978:	e24b3044 	sub	r3, fp, #68	; 0x44
   2597c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25980:	e1a01003 	mov	r1, r3
   25984:	eb0000d2 	bl	25cd4 <StringPutString>
				}
				break;
   25988:	ea00008a 	b	25bb8 <StringFormatV+0x6d4>
   2598c:	ea000089 	b	25bb8 <StringFormatV+0x6d4>

			case 'o':
				nBase = 8;
   25990:	e3a03008 	mov	r3, #8
   25994:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
				goto FormatNumber;
   25998:	ea00002f 	b	25a5c <StringFormatV+0x578>

			case 's':
				pArg = va_arg (Args, const char *);
   2599c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   259a0:	e2832004 	add	r2, r3, #4
   259a4:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
   259a8:	e5933000 	ldr	r3, [r3]
   259ac:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
				nLen = strlen (pArg);
   259b0:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   259b4:	eb000226 	bl	26254 <uspi_strlen>
   259b8:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
				if (bLeft)
   259bc:	e51b3010 	ldr	r3, [fp, #-16]
   259c0:	e3530000 	cmp	r3, #0
   259c4:	0a00000e 	beq	25a04 <StringFormatV+0x520>
				{
					StringPutString (pThis, pArg);
   259c8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   259cc:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
   259d0:	eb0000bf 	bl	25cd4 <StringPutString>
					if (nWidth > nLen)
   259d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   259d8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   259dc:	e1520003 	cmp	r2, r3
   259e0:	9a000016 	bls	25a40 <StringFormatV+0x55c>
					{
						StringPutChar (pThis, ' ', nWidth-nLen);
   259e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   259e8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   259ec:	e0633002 	rsb	r3, r3, r2
   259f0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   259f4:	e3a01020 	mov	r1, #32
   259f8:	e1a02003 	mov	r2, r3
   259fc:	eb000087 	bl	25c20 <StringPutChar>
					{
						StringPutChar (pThis, ' ', nWidth-nLen);
					}
					StringPutString (pThis, pArg);
				}
				break;
   25a00:	ea00006c 	b	25bb8 <StringFormatV+0x6d4>
						StringPutChar (pThis, ' ', nWidth-nLen);
					}
				}
				else
				{
					if (nWidth > nLen)
   25a04:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25a08:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   25a0c:	e1520003 	cmp	r2, r3
   25a10:	9a000006 	bls	25a30 <StringFormatV+0x54c>
					{
						StringPutChar (pThis, ' ', nWidth-nLen);
   25a14:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25a18:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   25a1c:	e0633002 	rsb	r3, r3, r2
   25a20:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25a24:	e3a01020 	mov	r1, #32
   25a28:	e1a02003 	mov	r2, r3
   25a2c:	eb00007b 	bl	25c20 <StringPutChar>
					}
					StringPutString (pThis, pArg);
   25a30:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25a34:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
   25a38:	eb0000a5 	bl	25cd4 <StringPutString>
				}
				break;
   25a3c:	ea00005d 	b	25bb8 <StringFormatV+0x6d4>
   25a40:	ea00005c 	b	25bb8 <StringFormatV+0x6d4>

			case 'u':
				nBase = 10;
   25a44:	e3a0300a 	mov	r3, #10
   25a48:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
				goto FormatNumber;
   25a4c:	ea000002 	b	25a5c <StringFormatV+0x578>

			case 'x':
			case 'X':
				nBase = 16;
   25a50:	e3a03010 	mov	r3, #16
   25a54:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
				goto FormatNumber;
   25a58:	e1a00000 	nop			; (mov r0, r0)

			FormatNumber:
				if (bLong)
   25a5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25a60:	e3530000 	cmp	r3, #0
   25a64:	0a000005 	beq	25a80 <StringFormatV+0x59c>
				{
					ulArg = va_arg (Args, unsigned long);
   25a68:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   25a6c:	e2832004 	add	r2, r3, #4
   25a70:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
   25a74:	e5933000 	ldr	r3, [r3]
   25a78:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   25a7c:	ea000004 	b	25a94 <StringFormatV+0x5b0>
				}
				else
				{
					ulArg = va_arg (Args, unsigned);
   25a80:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   25a84:	e2832004 	add	r2, r3, #4
   25a88:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
   25a8c:	e5933000 	ldr	r3, [r3]
   25a90:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				}
				ntoa (NumBuf, ulArg, nBase, *pFormat == 'X');
   25a94:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   25a98:	e5d33000 	ldrb	r3, [r3]
   25a9c:	e6af3073 	sxtb	r3, r3
   25aa0:	e3530058 	cmp	r3, #88	; 0x58
   25aa4:	03a03001 	moveq	r3, #1
   25aa8:	13a03000 	movne	r3, #0
   25aac:	e6ef3073 	uxtb	r3, r3
   25ab0:	e1a0c003 	mov	ip, r3
   25ab4:	e24b3044 	sub	r3, fp, #68	; 0x44
   25ab8:	e1a00003 	mov	r0, r3
   25abc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   25ac0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   25ac4:	e1a0300c 	mov	r3, ip
   25ac8:	eb000102 	bl	25ed8 <ntoa>
				nLen = strlen (NumBuf);
   25acc:	e24b3044 	sub	r3, fp, #68	; 0x44
   25ad0:	e1a00003 	mov	r0, r3
   25ad4:	eb0001de 	bl	26254 <uspi_strlen>
   25ad8:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
				if (bLeft)
   25adc:	e51b3010 	ldr	r3, [fp, #-16]
   25ae0:	e3530000 	cmp	r3, #0
   25ae4:	0a00000f 	beq	25b28 <StringFormatV+0x644>
				{
					StringPutString (pThis, NumBuf);
   25ae8:	e24b3044 	sub	r3, fp, #68	; 0x44
   25aec:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25af0:	e1a01003 	mov	r1, r3
   25af4:	eb000076 	bl	25cd4 <StringPutString>
					if (nWidth > nLen)
   25af8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25afc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   25b00:	e1520003 	cmp	r2, r3
   25b04:	9a00001e 	bls	25b84 <StringFormatV+0x6a0>
					{
						StringPutChar (pThis, ' ', nWidth-nLen);
   25b08:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25b0c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   25b10:	e0633002 	rsb	r3, r3, r2
   25b14:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25b18:	e3a01020 	mov	r1, #32
   25b1c:	e1a02003 	mov	r2, r3
   25b20:	eb00003e 	bl	25c20 <StringPutChar>
					{
						StringPutChar (pThis, bNull ? '0' : ' ', nWidth-nLen);
					}
					StringPutString (pThis, NumBuf);
				}
				break;
   25b24:	ea000023 	b	25bb8 <StringFormatV+0x6d4>
						StringPutChar (pThis, ' ', nWidth-nLen);
					}
				}
				else
				{
					if (nWidth > nLen)
   25b28:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25b2c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   25b30:	e1520003 	cmp	r2, r3
   25b34:	9a00000d 	bls	25b70 <StringFormatV+0x68c>
					{
						StringPutChar (pThis, bNull ? '0' : ' ', nWidth-nLen);
   25b38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25b3c:	e3530000 	cmp	r3, #0
   25b40:	0a000001 	beq	25b4c <StringFormatV+0x668>
   25b44:	e3a01030 	mov	r1, #48	; 0x30
   25b48:	ea000000 	b	25b50 <StringFormatV+0x66c>
   25b4c:	e3a01020 	mov	r1, #32
   25b50:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25b54:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   25b58:	e0633002 	rsb	r3, r3, r2
   25b5c:	e6af2071 	sxtb	r2, r1
   25b60:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25b64:	e1a01002 	mov	r1, r2
   25b68:	e1a02003 	mov	r2, r3
   25b6c:	eb00002b 	bl	25c20 <StringPutChar>
					}
					StringPutString (pThis, NumBuf);
   25b70:	e24b3044 	sub	r3, fp, #68	; 0x44
   25b74:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25b78:	e1a01003 	mov	r1, r3
   25b7c:	eb000054 	bl	25cd4 <StringPutString>
				}
				break;
   25b80:	ea00000c 	b	25bb8 <StringFormatV+0x6d4>
   25b84:	ea00000b 	b	25bb8 <StringFormatV+0x6d4>

			default:
				StringPutChar (pThis, '%', 1);
   25b88:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25b8c:	e3a01025 	mov	r1, #37	; 0x25
   25b90:	e3a02001 	mov	r2, #1
   25b94:	eb000021 	bl	25c20 <StringPutChar>
				StringPutChar (pThis, *pFormat, 1);
   25b98:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   25b9c:	e5d33000 	ldrb	r3, [r3]
   25ba0:	e6af3073 	sxtb	r3, r3
   25ba4:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25ba8:	e1a01003 	mov	r1, r3
   25bac:	e3a02001 	mov	r2, #1
   25bb0:	eb00001a 	bl	25c20 <StringPutChar>
				break;
   25bb4:	e1a00000 	nop			; (mov r0, r0)
   25bb8:	ea000006 	b	25bd8 <StringFormatV+0x6f4>
			}
		}
		else
		{
			StringPutChar (pThis, *pFormat, 1);
   25bbc:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   25bc0:	e5d33000 	ldrb	r3, [r3]
   25bc4:	e6af3073 	sxtb	r3, r3
   25bc8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
   25bcc:	e1a01003 	mov	r1, r3
   25bd0:	e3a02001 	mov	r2, #1
   25bd4:	eb000011 	bl	25c20 <StringPutChar>
		}

		pFormat++;
   25bd8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   25bdc:	e2833001 	add	r3, r3, #1
   25be0:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
	
	pThis->m_nSize = FORMAT_RESERVE;
	pThis->m_pBuffer = (char *) malloc (pThis->m_nSize);
	pThis->m_pInPtr = pThis->m_pBuffer;

	while (*pFormat != '\0')
   25be4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   25be8:	e5d33000 	ldrb	r3, [r3]
   25bec:	e3530000 	cmp	r3, #0
   25bf0:	1afffe68 	bne	25598 <StringFormatV+0xb4>
		}

		pFormat++;
	}

	*pThis->m_pInPtr = '\0';
   25bf4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25bf8:	e5933008 	ldr	r3, [r3, #8]
   25bfc:	e3a02000 	mov	r2, #0
   25c00:	e5c32000 	strb	r2, [r3]
   25c04:	e1a03004 	mov	r3, r4
   25c08:	e30504e4 	movw	r0, #21732	; 0x54e4
   25c0c:	e3400002 	movt	r0, #2
   25c10:	e1a01003 	mov	r1, r3
   25c14:	ebffbf12 	bl	15864 <__cyg_profile_func_exit>
}
   25c18:	e24bd008 	sub	sp, fp, #8
   25c1c:	e8bd8810 	pop	{r4, fp, pc}

00025c20 <StringPutChar>:

void StringPutChar (TString *pThis, char chChar, size_t nCount)
{
   25c20:	e92d4810 	push	{r4, fp, lr}
   25c24:	e28db008 	add	fp, sp, #8
   25c28:	e24dd014 	sub	sp, sp, #20
   25c2c:	e1a0400e 	mov	r4, lr
   25c30:	e50b0010 	str	r0, [fp, #-16]
   25c34:	e1a03001 	mov	r3, r1
   25c38:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   25c3c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   25c40:	e1a03004 	mov	r3, r4
   25c44:	e3050c20 	movw	r0, #23584	; 0x5c20
   25c48:	e3400002 	movt	r0, #2
   25c4c:	e1a01003 	mov	r1, r3
   25c50:	ebffbeb1 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   25c54:	e51b3010 	ldr	r3, [fp, #-16]
   25c58:	e3530000 	cmp	r3, #0
   25c5c:	1a000005 	bne	25c78 <StringPutChar+0x58>
   25c60:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   25c64:	e3400002 	movt	r0, #2
   25c68:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   25c6c:	e3401002 	movt	r1, #2
   25c70:	e3a02d06 	mov	r2, #384	; 0x180
   25c74:	ebffc34d 	bl	169b0 <uspi_assertion_failed>

	StringReserveSpace (pThis, nCount);
   25c78:	e51b0010 	ldr	r0, [fp, #-16]
   25c7c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   25c80:	eb00003f 	bl	25d84 <StringReserveSpace>

	while (nCount--)
   25c84:	ea000006 	b	25ca4 <StringPutChar+0x84>
	{
		*pThis->m_pInPtr++ = chChar;
   25c88:	e51b3010 	ldr	r3, [fp, #-16]
   25c8c:	e5933008 	ldr	r3, [r3, #8]
   25c90:	e2831001 	add	r1, r3, #1
   25c94:	e51b2010 	ldr	r2, [fp, #-16]
   25c98:	e5821008 	str	r1, [r2, #8]
   25c9c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
   25ca0:	e5c32000 	strb	r2, [r3]
{
	assert (pThis != 0);

	StringReserveSpace (pThis, nCount);

	while (nCount--)
   25ca4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25ca8:	e2432001 	sub	r2, r3, #1
   25cac:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   25cb0:	e3530000 	cmp	r3, #0
   25cb4:	1afffff3 	bne	25c88 <StringPutChar+0x68>
   25cb8:	e1a03004 	mov	r3, r4
   25cbc:	e3050c20 	movw	r0, #23584	; 0x5c20
   25cc0:	e3400002 	movt	r0, #2
   25cc4:	e1a01003 	mov	r1, r3
   25cc8:	ebffbee5 	bl	15864 <__cyg_profile_func_exit>
	{
		*pThis->m_pInPtr++ = chChar;
	}
}
   25ccc:	e24bd008 	sub	sp, fp, #8
   25cd0:	e8bd8810 	pop	{r4, fp, pc}

00025cd4 <StringPutString>:

void StringPutString (TString *pThis, const char *pString)
{
   25cd4:	e92d4810 	push	{r4, fp, lr}
   25cd8:	e28db008 	add	fp, sp, #8
   25cdc:	e24dd014 	sub	sp, sp, #20
   25ce0:	e1a0400e 	mov	r4, lr
   25ce4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25ce8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   25cec:	e1a03004 	mov	r3, r4
   25cf0:	e3050cd4 	movw	r0, #23764	; 0x5cd4
   25cf4:	e3400002 	movt	r0, #2
   25cf8:	e1a01003 	mov	r1, r3
   25cfc:	ebffbe86 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   25d00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25d04:	e3530000 	cmp	r3, #0
   25d08:	1a000005 	bne	25d24 <StringPutString+0x50>
   25d0c:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   25d10:	e3400002 	movt	r0, #2
   25d14:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   25d18:	e3401002 	movt	r1, #2
   25d1c:	e3a02f63 	mov	r2, #396	; 0x18c
   25d20:	ebffc322 	bl	169b0 <uspi_assertion_failed>

	size_t nLen = strlen (pString);
   25d24:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   25d28:	eb000149 	bl	26254 <uspi_strlen>
   25d2c:	e50b0010 	str	r0, [fp, #-16]
	
	StringReserveSpace (pThis, nLen);
   25d30:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   25d34:	e51b1010 	ldr	r1, [fp, #-16]
   25d38:	eb000011 	bl	25d84 <StringReserveSpace>
	
	strcpy (pThis->m_pInPtr, pString);
   25d3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25d40:	e5933008 	ldr	r3, [r3, #8]
   25d44:	e1a00003 	mov	r0, r3
   25d48:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   25d4c:	eb0001ac 	bl	26404 <uspi_strcpy>
	
	pThis->m_pInPtr += nLen;
   25d50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25d54:	e5932008 	ldr	r2, [r3, #8]
   25d58:	e51b3010 	ldr	r3, [fp, #-16]
   25d5c:	e0822003 	add	r2, r2, r3
   25d60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25d64:	e5832008 	str	r2, [r3, #8]
   25d68:	e1a03004 	mov	r3, r4
   25d6c:	e3050cd4 	movw	r0, #23764	; 0x5cd4
   25d70:	e3400002 	movt	r0, #2
   25d74:	e1a01003 	mov	r1, r3
   25d78:	ebffbeb9 	bl	15864 <__cyg_profile_func_exit>
}
   25d7c:	e24bd008 	sub	sp, fp, #8
   25d80:	e8bd8810 	pop	{r4, fp, pc}

00025d84 <StringReserveSpace>:

void StringReserveSpace (TString *pThis, size_t nSpace)
{
   25d84:	e92d4830 	push	{r4, r5, fp, lr}
   25d88:	e28db00c 	add	fp, sp, #12
   25d8c:	e24dd018 	sub	sp, sp, #24
   25d90:	e1a0500e 	mov	r5, lr
   25d94:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   25d98:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   25d9c:	e1a03005 	mov	r3, r5
   25da0:	e3050d84 	movw	r0, #23940	; 0x5d84
   25da4:	e3400002 	movt	r0, #2
   25da8:	e1a01003 	mov	r1, r3
   25dac:	ebffbe5a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   25db0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25db4:	e3530000 	cmp	r3, #0
   25db8:	1a000005 	bne	25dd4 <StringReserveSpace+0x50>
   25dbc:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
   25dc0:	e3400002 	movt	r0, #2
   25dc4:	e30f1aa8 	movw	r1, #64168	; 0xfaa8
   25dc8:	e3401002 	movt	r1, #2
   25dcc:	e3002199 	movw	r2, #409	; 0x199
   25dd0:	ebffc2f6 	bl	169b0 <uspi_assertion_failed>

	if (nSpace == 0)
   25dd4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25dd8:	e3530000 	cmp	r3, #0
   25ddc:	1a000001 	bne	25de8 <StringReserveSpace+0x64>
   25de0:	e3a04000 	mov	r4, #0
	{
		return;
   25de4:	ea000033 	b	25eb8 <StringReserveSpace+0x134>
	}
	
	size_t nOffset = pThis->m_pInPtr - pThis->m_pBuffer;
   25de8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25dec:	e5933008 	ldr	r3, [r3, #8]
   25df0:	e1a02003 	mov	r2, r3
   25df4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25df8:	e5933000 	ldr	r3, [r3]
   25dfc:	e0633002 	rsb	r3, r3, r2
   25e00:	e50b3010 	str	r3, [fp, #-16]
	size_t nNewSize = nOffset + nSpace + 1;
   25e04:	e51b2010 	ldr	r2, [fp, #-16]
   25e08:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25e0c:	e0823003 	add	r3, r2, r3
   25e10:	e2833001 	add	r3, r3, #1
   25e14:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if (pThis->m_nSize >= nNewSize)
   25e18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25e1c:	e5932004 	ldr	r2, [r3, #4]
   25e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25e24:	e1520003 	cmp	r2, r3
   25e28:	3a000001 	bcc	25e34 <StringReserveSpace+0xb0>
   25e2c:	e3a04000 	mov	r4, #0
	{
		return;
   25e30:	ea000020 	b	25eb8 <StringReserveSpace+0x134>
	}
	
	nNewSize += FORMAT_RESERVE;
   25e34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25e38:	e2833040 	add	r3, r3, #64	; 0x40
   25e3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	char *pNewBuffer = (char *) malloc (nNewSize);
   25e40:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   25e44:	ebffc303 	bl	16a58 <malloc>
   25e48:	e1a03000 	mov	r3, r0
   25e4c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		
	*pThis->m_pInPtr = '\0';
   25e50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25e54:	e5933008 	ldr	r3, [r3, #8]
   25e58:	e3a02000 	mov	r2, #0
   25e5c:	e5c32000 	strb	r2, [r3]
	strcpy (pNewBuffer, pThis->m_pBuffer);
   25e60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25e64:	e5933000 	ldr	r3, [r3]
   25e68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   25e6c:	e1a01003 	mov	r1, r3
   25e70:	eb000163 	bl	26404 <uspi_strcpy>
	
	free (pThis->m_pBuffer);
   25e74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25e78:	e5933000 	ldr	r3, [r3]
   25e7c:	e1a00003 	mov	r0, r3
   25e80:	ebffc30a 	bl	16ab0 <free>
	
	pThis->m_pBuffer = pNewBuffer;
   25e84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25e88:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25e8c:	e5832000 	str	r2, [r3]
	pThis->m_nSize = nNewSize;
   25e90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25e94:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25e98:	e5832004 	str	r2, [r3, #4]

	pThis->m_pInPtr = pThis->m_pBuffer + nOffset;
   25e9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25ea0:	e5932000 	ldr	r2, [r3]
   25ea4:	e51b3010 	ldr	r3, [fp, #-16]
   25ea8:	e0822003 	add	r2, r2, r3
   25eac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25eb0:	e5832008 	str	r2, [r3, #8]
   25eb4:	e3a04001 	mov	r4, #1
   25eb8:	e1a03005 	mov	r3, r5
   25ebc:	e3050d84 	movw	r0, #23940	; 0x5d84
   25ec0:	e3400002 	movt	r0, #2
   25ec4:	e1a01003 	mov	r1, r3
   25ec8:	ebffbe65 	bl	15864 <__cyg_profile_func_exit>
   25ecc:	e3540001 	cmp	r4, #1
}
   25ed0:	e24bd00c 	sub	sp, fp, #12
   25ed4:	e8bd8830 	pop	{r4, r5, fp, pc}

00025ed8 <ntoa>:

char *ntoa (char *pDest, unsigned long ulNumber, unsigned nBase, boolean bUpcase)
{
   25ed8:	e92d4830 	push	{r4, r5, fp, lr}
   25edc:	e28db00c 	add	fp, sp, #12
   25ee0:	e24dd020 	sub	sp, sp, #32
   25ee4:	e1a0500e 	mov	r5, lr
   25ee8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   25eec:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   25ef0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   25ef4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   25ef8:	e1a03005 	mov	r3, r5
   25efc:	e3050ed8 	movw	r0, #24280	; 0x5ed8
   25f00:	e3400002 	movt	r0, #2
   25f04:	e1a01003 	mov	r1, r3
   25f08:	ebffbe03 	bl	1571c <__cyg_profile_func_enter>
	unsigned long ulDigit;

	unsigned long ulDivisor = 1UL;
   25f0c:	e3a03001 	mov	r3, #1
   25f10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	while (1)
	{
		ulDigit = ulNumber / ulDivisor;
   25f14:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   25f18:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   25f1c:	eb001edd 	bl	2da98 <__aeabi_uidiv>
   25f20:	e1a03000 	mov	r3, r0
   25f24:	e50b3010 	str	r3, [fp, #-16]
		if (ulDigit < nBase)
   25f28:	e51b2010 	ldr	r2, [fp, #-16]
   25f2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   25f30:	e1520003 	cmp	r2, r3
   25f34:	2a000003 	bcs	25f48 <ntoa+0x70>
		{
			break;
   25f38:	e1a00000 	nop			; (mov r0, r0)
		}

		ulDivisor *= nBase;
	}

	char *p = pDest;
   25f3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25f40:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   25f44:	ea000004 	b	25f5c <ntoa+0x84>
		if (ulDigit < nBase)
		{
			break;
		}

		ulDivisor *= nBase;
   25f48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25f4c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   25f50:	e0030392 	mul	r3, r2, r3
   25f54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	}
   25f58:	eaffffed 	b	25f14 <ntoa+0x3c>

	char *p = pDest;
	while (1)
	{
		ulNumber %= ulDivisor;
   25f5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25f60:	e1a00003 	mov	r0, r3
   25f64:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   25f68:	eb001f07 	bl	2db8c <__aeabi_uidivmod>
   25f6c:	e1a03001 	mov	r3, r1
   25f70:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

		*p++ = ulDigit < 10 ? '0' + ulDigit : '0' + ulDigit + 7 + (bUpcase ? 0 : 0x20);
   25f74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25f78:	e2832001 	add	r2, r3, #1
   25f7c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   25f80:	e51b2010 	ldr	r2, [fp, #-16]
   25f84:	e3520009 	cmp	r2, #9
   25f88:	8a000005 	bhi	25fa4 <ntoa+0xcc>
   25f8c:	e51b2010 	ldr	r2, [fp, #-16]
   25f90:	e6ef2072 	uxtb	r2, r2
   25f94:	e2822030 	add	r2, r2, #48	; 0x30
   25f98:	e6ef2072 	uxtb	r2, r2
   25f9c:	e6ef2072 	uxtb	r2, r2
   25fa0:	ea00000c 	b	25fd8 <ntoa+0x100>
   25fa4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   25fa8:	e3520000 	cmp	r2, #0
   25fac:	0a000001 	beq	25fb8 <ntoa+0xe0>
   25fb0:	e3a01000 	mov	r1, #0
   25fb4:	ea000000 	b	25fbc <ntoa+0xe4>
   25fb8:	e3a01020 	mov	r1, #32
   25fbc:	e51b2010 	ldr	r2, [fp, #-16]
   25fc0:	e6ef2072 	uxtb	r2, r2
   25fc4:	e0812002 	add	r2, r1, r2
   25fc8:	e6ef2072 	uxtb	r2, r2
   25fcc:	e2822037 	add	r2, r2, #55	; 0x37
   25fd0:	e6ef2072 	uxtb	r2, r2
   25fd4:	e6ef2072 	uxtb	r2, r2
   25fd8:	e5c32000 	strb	r2, [r3]

		ulDivisor /= nBase;
   25fdc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   25fe0:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   25fe4:	eb001eab 	bl	2da98 <__aeabi_uidiv>
   25fe8:	e1a03000 	mov	r3, r0
   25fec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if (ulDivisor == 0)
   25ff0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25ff4:	e3530000 	cmp	r3, #0
   25ff8:	1a000000 	bne	26000 <ntoa+0x128>
		{
			break;
   25ffc:	ea000005 	b	26018 <ntoa+0x140>
		}

		ulDigit = ulNumber / ulDivisor;
   26000:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   26004:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   26008:	eb001ea2 	bl	2da98 <__aeabi_uidiv>
   2600c:	e1a03000 	mov	r3, r0
   26010:	e50b3010 	str	r3, [fp, #-16]
	}
   26014:	eaffffd0 	b	25f5c <ntoa+0x84>

	*p = '\0';
   26018:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2601c:	e3a02000 	mov	r2, #0
   26020:	e5c32000 	strb	r2, [r3]

	return pDest;
   26024:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
   26028:	e1a03005 	mov	r3, r5
   2602c:	e3050ed8 	movw	r0, #24280	; 0x5ed8
   26030:	e3400002 	movt	r0, #2
   26034:	e1a01003 	mov	r1, r3
   26038:	ebffbe09 	bl	15864 <__cyg_profile_func_exit>
   2603c:	e1a03004 	mov	r3, r4
}
   26040:	e1a00003 	mov	r0, r3
   26044:	e24bd00c 	sub	sp, fp, #12
   26048:	e8bd8830 	pop	{r4, r5, fp, pc}

0002604c <uspi_memset>:
#include <uspi/util.h>

#ifdef USPI_PROVIDE_MEM_FUNCTIONS

void *uspi_memset (void *pBuffer, int nValue, size_t nLength)
{
   2604c:	e92d4830 	push	{r4, r5, fp, lr}
   26050:	e28db00c 	add	fp, sp, #12
   26054:	e24dd018 	sub	sp, sp, #24
   26058:	e1a0500e 	mov	r5, lr
   2605c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26060:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   26064:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   26068:	e1a03005 	mov	r3, r5
   2606c:	e306004c 	movw	r0, #24652	; 0x604c
   26070:	e3400002 	movt	r0, #2
   26074:	e1a01003 	mov	r1, r3
   26078:	ebffbda7 	bl	1571c <__cyg_profile_func_enter>
	char *p = (char *) pBuffer;
   2607c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26080:	e50b3010 	str	r3, [fp, #-16]

	while (nLength--)
   26084:	ea000005 	b	260a0 <uspi_memset+0x54>
	{
		*p++ = (char) nValue;
   26088:	e51b3010 	ldr	r3, [fp, #-16]
   2608c:	e2832001 	add	r2, r3, #1
   26090:	e50b2010 	str	r2, [fp, #-16]
   26094:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   26098:	e6ef2072 	uxtb	r2, r2
   2609c:	e5c32000 	strb	r2, [r3]

void *uspi_memset (void *pBuffer, int nValue, size_t nLength)
{
	char *p = (char *) pBuffer;

	while (nLength--)
   260a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   260a4:	e2432001 	sub	r2, r3, #1
   260a8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   260ac:	e3530000 	cmp	r3, #0
   260b0:	1afffff4 	bne	26088 <uspi_memset+0x3c>
	{
		*p++ = (char) nValue;
	}

	return pBuffer;
   260b4:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   260b8:	e1a03005 	mov	r3, r5
   260bc:	e306004c 	movw	r0, #24652	; 0x604c
   260c0:	e3400002 	movt	r0, #2
   260c4:	e1a01003 	mov	r1, r3
   260c8:	ebffbde5 	bl	15864 <__cyg_profile_func_exit>
   260cc:	e1a03004 	mov	r3, r4
}
   260d0:	e1a00003 	mov	r0, r3
   260d4:	e24bd00c 	sub	sp, fp, #12
   260d8:	e8bd8830 	pop	{r4, r5, fp, pc}

000260dc <uspi_memcpy>:

void *uspi_memcpy (void *pDest, const void *pSrc, size_t nLength)
{
   260dc:	e92d4830 	push	{r4, r5, fp, lr}
   260e0:	e28db00c 	add	fp, sp, #12
   260e4:	e24dd018 	sub	sp, sp, #24
   260e8:	e1a0500e 	mov	r5, lr
   260ec:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   260f0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   260f4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   260f8:	e1a03005 	mov	r3, r5
   260fc:	e30600dc 	movw	r0, #24796	; 0x60dc
   26100:	e3400002 	movt	r0, #2
   26104:	e1a01003 	mov	r1, r3
   26108:	ebffbd83 	bl	1571c <__cyg_profile_func_enter>
	char *pd = (char *) pDest;
   2610c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26110:	e50b3010 	str	r3, [fp, #-16]
	char *ps = (char *) pSrc;
   26114:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26118:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	while (nLength--)
   2611c:	ea000007 	b	26140 <uspi_memcpy+0x64>
	{
		*pd++ = *ps++;
   26120:	e51b3010 	ldr	r3, [fp, #-16]
   26124:	e2832001 	add	r2, r3, #1
   26128:	e50b2010 	str	r2, [fp, #-16]
   2612c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26130:	e2821001 	add	r1, r2, #1
   26134:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   26138:	e5d22000 	ldrb	r2, [r2]
   2613c:	e5c32000 	strb	r2, [r3]
void *uspi_memcpy (void *pDest, const void *pSrc, size_t nLength)
{
	char *pd = (char *) pDest;
	char *ps = (char *) pSrc;

	while (nLength--)
   26140:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26144:	e2432001 	sub	r2, r3, #1
   26148:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   2614c:	e3530000 	cmp	r3, #0
   26150:	1afffff2 	bne	26120 <uspi_memcpy+0x44>
	{
		*pd++ = *ps++;
	}

	return pDest;
   26154:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   26158:	e1a03005 	mov	r3, r5
   2615c:	e30600dc 	movw	r0, #24796	; 0x60dc
   26160:	e3400002 	movt	r0, #2
   26164:	e1a01003 	mov	r1, r3
   26168:	ebffbdbd 	bl	15864 <__cyg_profile_func_exit>
   2616c:	e1a03004 	mov	r3, r4
}
   26170:	e1a00003 	mov	r0, r3
   26174:	e24bd00c 	sub	sp, fp, #12
   26178:	e8bd8830 	pop	{r4, r5, fp, pc}

0002617c <uspi_memcmp>:

int uspi_memcmp (const void *pBuffer1, const void *pBuffer2, size_t nLength)
{
   2617c:	e92d4830 	push	{r4, r5, fp, lr}
   26180:	e28db00c 	add	fp, sp, #12
   26184:	e24dd018 	sub	sp, sp, #24
   26188:	e1a0500e 	mov	r5, lr
   2618c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26190:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   26194:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   26198:	e1a03005 	mov	r3, r5
   2619c:	e306017c 	movw	r0, #24956	; 0x617c
   261a0:	e3400002 	movt	r0, #2
   261a4:	e1a01003 	mov	r1, r3
   261a8:	ebffbd5b 	bl	1571c <__cyg_profile_func_enter>
	const unsigned char *p1 = (const unsigned char *) pBuffer1;
   261ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   261b0:	e50b3010 	str	r3, [fp, #-16]
	const unsigned char *p2 = (const unsigned char *) pBuffer2;
   261b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   261b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	
	while (nLength-- > 0)
   261bc:	ea000015 	b	26218 <uspi_memcmp+0x9c>
	{
		if (*p1 > *p2)
   261c0:	e51b3010 	ldr	r3, [fp, #-16]
   261c4:	e5d32000 	ldrb	r2, [r3]
   261c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   261cc:	e5d33000 	ldrb	r3, [r3]
   261d0:	e1520003 	cmp	r2, r3
   261d4:	9a000001 	bls	261e0 <uspi_memcmp+0x64>
		{
			return 1;
   261d8:	e3a04001 	mov	r4, #1
   261dc:	ea000013 	b	26230 <uspi_memcmp+0xb4>
		}
		else if (*p1 < *p2)
   261e0:	e51b3010 	ldr	r3, [fp, #-16]
   261e4:	e5d32000 	ldrb	r2, [r3]
   261e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   261ec:	e5d33000 	ldrb	r3, [r3]
   261f0:	e1520003 	cmp	r2, r3
   261f4:	2a000001 	bcs	26200 <uspi_memcmp+0x84>
		{
			return -1;
   261f8:	e3e04000 	mvn	r4, #0
   261fc:	ea00000b 	b	26230 <uspi_memcmp+0xb4>
		}

		p1++;
   26200:	e51b3010 	ldr	r3, [fp, #-16]
   26204:	e2833001 	add	r3, r3, #1
   26208:	e50b3010 	str	r3, [fp, #-16]
		p2++;
   2620c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26210:	e2833001 	add	r3, r3, #1
   26214:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
int uspi_memcmp (const void *pBuffer1, const void *pBuffer2, size_t nLength)
{
	const unsigned char *p1 = (const unsigned char *) pBuffer1;
	const unsigned char *p2 = (const unsigned char *) pBuffer2;
	
	while (nLength-- > 0)
   26218:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2621c:	e2432001 	sub	r2, r3, #1
   26220:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   26224:	e3530000 	cmp	r3, #0
   26228:	1affffe4 	bne	261c0 <uspi_memcmp+0x44>

		p1++;
		p2++;
	}

	return 0;
   2622c:	e3a04000 	mov	r4, #0
   26230:	e1a03005 	mov	r3, r5
   26234:	e306017c 	movw	r0, #24956	; 0x617c
   26238:	e3400002 	movt	r0, #2
   2623c:	e1a01003 	mov	r1, r3
   26240:	ebffbd87 	bl	15864 <__cyg_profile_func_exit>
   26244:	e1a03004 	mov	r3, r4
}
   26248:	e1a00003 	mov	r0, r3
   2624c:	e24bd00c 	sub	sp, fp, #12
   26250:	e8bd8830 	pop	{r4, r5, fp, pc}

00026254 <uspi_strlen>:
#endif

#ifdef USPI_PROVIDE_STR_FUNCTIONS

size_t uspi_strlen (const char *pString)
{
   26254:	e92d4830 	push	{r4, r5, fp, lr}
   26258:	e28db00c 	add	fp, sp, #12
   2625c:	e24dd010 	sub	sp, sp, #16
   26260:	e1a0500e 	mov	r5, lr
   26264:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26268:	e1a03005 	mov	r3, r5
   2626c:	e3060254 	movw	r0, #25172	; 0x6254
   26270:	e3400002 	movt	r0, #2
   26274:	e1a01003 	mov	r1, r3
   26278:	ebffbd27 	bl	1571c <__cyg_profile_func_enter>
	size_t nResult = 0;
   2627c:	e3a03000 	mov	r3, #0
   26280:	e50b3010 	str	r3, [fp, #-16]

	while (*pString++)
   26284:	ea000002 	b	26294 <uspi_strlen+0x40>
	{
		nResult++;
   26288:	e51b3010 	ldr	r3, [fp, #-16]
   2628c:	e2833001 	add	r3, r3, #1
   26290:	e50b3010 	str	r3, [fp, #-16]

size_t uspi_strlen (const char *pString)
{
	size_t nResult = 0;

	while (*pString++)
   26294:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26298:	e2832001 	add	r2, r3, #1
   2629c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   262a0:	e5d33000 	ldrb	r3, [r3]
   262a4:	e3530000 	cmp	r3, #0
   262a8:	1afffff6 	bne	26288 <uspi_strlen+0x34>
	{
		nResult++;
	}

	return nResult;
   262ac:	e51b4010 	ldr	r4, [fp, #-16]
   262b0:	e1a03005 	mov	r3, r5
   262b4:	e3060254 	movw	r0, #25172	; 0x6254
   262b8:	e3400002 	movt	r0, #2
   262bc:	e1a01003 	mov	r1, r3
   262c0:	ebffbd67 	bl	15864 <__cyg_profile_func_exit>
   262c4:	e1a03004 	mov	r3, r4
}
   262c8:	e1a00003 	mov	r0, r3
   262cc:	e24bd00c 	sub	sp, fp, #12
   262d0:	e8bd8830 	pop	{r4, r5, fp, pc}

000262d4 <uspi_strcmp>:

int uspi_strcmp (const char *pString1, const char *pString2)
{
   262d4:	e92d4830 	push	{r4, r5, fp, lr}
   262d8:	e28db00c 	add	fp, sp, #12
   262dc:	e24dd008 	sub	sp, sp, #8
   262e0:	e1a0500e 	mov	r5, lr
   262e4:	e50b0010 	str	r0, [fp, #-16]
   262e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   262ec:	e1a03005 	mov	r3, r5
   262f0:	e30602d4 	movw	r0, #25300	; 0x62d4
   262f4:	e3400002 	movt	r0, #2
   262f8:	e1a01003 	mov	r1, r3
   262fc:	ebffbd06 	bl	1571c <__cyg_profile_func_enter>
	while (   *pString1 != '\0'
   26300:	ea000019 	b	2636c <uspi_strcmp+0x98>
	       && *pString2 != '\0')
	{
		if (*pString1 > *pString2)
   26304:	e51b3010 	ldr	r3, [fp, #-16]
   26308:	e5d32000 	ldrb	r2, [r3]
   2630c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26310:	e5d33000 	ldrb	r3, [r3]
   26314:	e6af2072 	sxtb	r2, r2
   26318:	e6af3073 	sxtb	r3, r3
   2631c:	e1520003 	cmp	r2, r3
   26320:	da000001 	ble	2632c <uspi_strcmp+0x58>
		{
			return 1;
   26324:	e3a04001 	mov	r4, #1
   26328:	ea00002c 	b	263e0 <uspi_strcmp+0x10c>
		}
		else if (*pString1 < *pString2)
   2632c:	e51b3010 	ldr	r3, [fp, #-16]
   26330:	e5d32000 	ldrb	r2, [r3]
   26334:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26338:	e5d33000 	ldrb	r3, [r3]
   2633c:	e6af2072 	sxtb	r2, r2
   26340:	e6af3073 	sxtb	r3, r3
   26344:	e1520003 	cmp	r2, r3
   26348:	aa000001 	bge	26354 <uspi_strcmp+0x80>
		{
			return -1;
   2634c:	e3e04000 	mvn	r4, #0
   26350:	ea000022 	b	263e0 <uspi_strcmp+0x10c>
		}

		pString1++;
   26354:	e51b3010 	ldr	r3, [fp, #-16]
   26358:	e2833001 	add	r3, r3, #1
   2635c:	e50b3010 	str	r3, [fp, #-16]
		pString2++;
   26360:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26364:	e2833001 	add	r3, r3, #1
   26368:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	return nResult;
}

int uspi_strcmp (const char *pString1, const char *pString2)
{
	while (   *pString1 != '\0'
   2636c:	e51b3010 	ldr	r3, [fp, #-16]
   26370:	e5d33000 	ldrb	r3, [r3]
   26374:	e3530000 	cmp	r3, #0
   26378:	0a000003 	beq	2638c <uspi_strcmp+0xb8>
	       && *pString2 != '\0')
   2637c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26380:	e5d33000 	ldrb	r3, [r3]
   26384:	e3530000 	cmp	r3, #0
   26388:	1affffdd 	bne	26304 <uspi_strcmp+0x30>

		pString1++;
		pString2++;
	}

	if (*pString1 > *pString2)
   2638c:	e51b3010 	ldr	r3, [fp, #-16]
   26390:	e5d32000 	ldrb	r2, [r3]
   26394:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26398:	e5d33000 	ldrb	r3, [r3]
   2639c:	e6af2072 	sxtb	r2, r2
   263a0:	e6af3073 	sxtb	r3, r3
   263a4:	e1520003 	cmp	r2, r3
   263a8:	da000001 	ble	263b4 <uspi_strcmp+0xe0>
	{
		return 1;
   263ac:	e3a04001 	mov	r4, #1
   263b0:	ea00000a 	b	263e0 <uspi_strcmp+0x10c>
	}
	else if (*pString1 < *pString2)
   263b4:	e51b3010 	ldr	r3, [fp, #-16]
   263b8:	e5d32000 	ldrb	r2, [r3]
   263bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   263c0:	e5d33000 	ldrb	r3, [r3]
   263c4:	e6af2072 	sxtb	r2, r2
   263c8:	e6af3073 	sxtb	r3, r3
   263cc:	e1520003 	cmp	r2, r3
   263d0:	aa000001 	bge	263dc <uspi_strcmp+0x108>
	{
		return -1;
   263d4:	e3e04000 	mvn	r4, #0
   263d8:	ea000000 	b	263e0 <uspi_strcmp+0x10c>
	}

	return 0;
   263dc:	e3a04000 	mov	r4, #0
   263e0:	e1a03005 	mov	r3, r5
   263e4:	e30602d4 	movw	r0, #25300	; 0x62d4
   263e8:	e3400002 	movt	r0, #2
   263ec:	e1a01003 	mov	r1, r3
   263f0:	ebffbd1b 	bl	15864 <__cyg_profile_func_exit>
   263f4:	e1a03004 	mov	r3, r4
}
   263f8:	e1a00003 	mov	r0, r3
   263fc:	e24bd00c 	sub	sp, fp, #12
   26400:	e8bd8830 	pop	{r4, r5, fp, pc}

00026404 <uspi_strcpy>:

char *uspi_strcpy (char *pDest, const char *pSrc)
{
   26404:	e92d4830 	push	{r4, r5, fp, lr}
   26408:	e28db00c 	add	fp, sp, #12
   2640c:	e24dd010 	sub	sp, sp, #16
   26410:	e1a0500e 	mov	r5, lr
   26414:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26418:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2641c:	e1a03005 	mov	r3, r5
   26420:	e3060404 	movw	r0, #25604	; 0x6404
   26424:	e3400002 	movt	r0, #2
   26428:	e1a01003 	mov	r1, r3
   2642c:	ebffbcba 	bl	1571c <__cyg_profile_func_enter>
	char *p = pDest;
   26430:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26434:	e50b3010 	str	r3, [fp, #-16]

	while (*pSrc)
   26438:	ea000007 	b	2645c <uspi_strcpy+0x58>
	{
		*p++ = *pSrc++;
   2643c:	e51b3010 	ldr	r3, [fp, #-16]
   26440:	e2832001 	add	r2, r3, #1
   26444:	e50b2010 	str	r2, [fp, #-16]
   26448:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2644c:	e2821001 	add	r1, r2, #1
   26450:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   26454:	e5d22000 	ldrb	r2, [r2]
   26458:	e5c32000 	strb	r2, [r3]

char *uspi_strcpy (char *pDest, const char *pSrc)
{
	char *p = pDest;

	while (*pSrc)
   2645c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26460:	e5d33000 	ldrb	r3, [r3]
   26464:	e3530000 	cmp	r3, #0
   26468:	1afffff3 	bne	2643c <uspi_strcpy+0x38>
	{
		*p++ = *pSrc++;
	}

	*p = '\0';
   2646c:	e51b3010 	ldr	r3, [fp, #-16]
   26470:	e3a02000 	mov	r2, #0
   26474:	e5c32000 	strb	r2, [r3]

	return pDest;
   26478:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   2647c:	e1a03005 	mov	r3, r5
   26480:	e3060404 	movw	r0, #25604	; 0x6404
   26484:	e3400002 	movt	r0, #2
   26488:	e1a01003 	mov	r1, r3
   2648c:	ebffbcf4 	bl	15864 <__cyg_profile_func_exit>
   26490:	e1a03004 	mov	r3, r4
}
   26494:	e1a00003 	mov	r0, r3
   26498:	e24bd00c 	sub	sp, fp, #12
   2649c:	e8bd8830 	pop	{r4, r5, fp, pc}

000264a0 <uspi_strncpy>:

char *uspi_strncpy (char *pDest, const char *pSrc, size_t nMaxLen)
{
   264a0:	e92d4830 	push	{r4, r5, fp, lr}
   264a4:	e28db00c 	add	fp, sp, #12
   264a8:	e24dd018 	sub	sp, sp, #24
   264ac:	e1a0500e 	mov	r5, lr
   264b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   264b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   264b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   264bc:	e1a03005 	mov	r3, r5
   264c0:	e30604a0 	movw	r0, #25760	; 0x64a0
   264c4:	e3400002 	movt	r0, #2
   264c8:	e1a01003 	mov	r1, r3
   264cc:	ebffbc92 	bl	1571c <__cyg_profile_func_enter>
	char *pResult = pDest;
   264d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   264d4:	e50b3010 	str	r3, [fp, #-16]

	while (nMaxLen > 0)
   264d8:	ea00000f 	b	2651c <uspi_strncpy+0x7c>
	{
		if (*pSrc == '\0')
   264dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   264e0:	e5d33000 	ldrb	r3, [r3]
   264e4:	e3530000 	cmp	r3, #0
   264e8:	1a000000 	bne	264f0 <uspi_strncpy+0x50>
		{
			break;
   264ec:	ea00000d 	b	26528 <uspi_strncpy+0x88>
		}

		*pDest++ = *pSrc++;
   264f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   264f4:	e2832001 	add	r2, r3, #1
   264f8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   264fc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   26500:	e2821001 	add	r1, r2, #1
   26504:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   26508:	e5d22000 	ldrb	r2, [r2]
   2650c:	e5c32000 	strb	r2, [r3]
		nMaxLen--;
   26510:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26514:	e2433001 	sub	r3, r3, #1
   26518:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

char *uspi_strncpy (char *pDest, const char *pSrc, size_t nMaxLen)
{
	char *pResult = pDest;

	while (nMaxLen > 0)
   2651c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26520:	e3530000 	cmp	r3, #0
   26524:	1affffec 	bne	264dc <uspi_strncpy+0x3c>

		*pDest++ = *pSrc++;
		nMaxLen--;
	}

	if (nMaxLen > 0)
   26528:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2652c:	e3530000 	cmp	r3, #0
   26530:	0a000002 	beq	26540 <uspi_strncpy+0xa0>
	{
		*pDest = '\0';
   26534:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26538:	e3a02000 	mov	r2, #0
   2653c:	e5c32000 	strb	r2, [r3]
	}

	return pResult;
   26540:	e51b4010 	ldr	r4, [fp, #-16]
   26544:	e1a03005 	mov	r3, r5
   26548:	e30604a0 	movw	r0, #25760	; 0x64a0
   2654c:	e3400002 	movt	r0, #2
   26550:	e1a01003 	mov	r1, r3
   26554:	ebffbcc2 	bl	15864 <__cyg_profile_func_exit>
   26558:	e1a03004 	mov	r3, r4
}
   2655c:	e1a00003 	mov	r0, r3
   26560:	e24bd00c 	sub	sp, fp, #12
   26564:	e8bd8830 	pop	{r4, r5, fp, pc}

00026568 <uspi_strcat>:

char *uspi_strcat (char *pDest, const char *pSrc)
{
   26568:	e92d4830 	push	{r4, r5, fp, lr}
   2656c:	e28db00c 	add	fp, sp, #12
   26570:	e24dd010 	sub	sp, sp, #16
   26574:	e1a0500e 	mov	r5, lr
   26578:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2657c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   26580:	e1a03005 	mov	r3, r5
   26584:	e3060568 	movw	r0, #25960	; 0x6568
   26588:	e3400002 	movt	r0, #2
   2658c:	e1a01003 	mov	r1, r3
   26590:	ebffbc61 	bl	1571c <__cyg_profile_func_enter>
	char *p = pDest;
   26594:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26598:	e50b3010 	str	r3, [fp, #-16]

	while (*p)
   2659c:	ea000002 	b	265ac <uspi_strcat+0x44>
	{
		p++;
   265a0:	e51b3010 	ldr	r3, [fp, #-16]
   265a4:	e2833001 	add	r3, r3, #1
   265a8:	e50b3010 	str	r3, [fp, #-16]

char *uspi_strcat (char *pDest, const char *pSrc)
{
	char *p = pDest;

	while (*p)
   265ac:	e51b3010 	ldr	r3, [fp, #-16]
   265b0:	e5d33000 	ldrb	r3, [r3]
   265b4:	e3530000 	cmp	r3, #0
   265b8:	1afffff8 	bne	265a0 <uspi_strcat+0x38>
	{
		p++;
	}

	while (*pSrc)
   265bc:	ea000007 	b	265e0 <uspi_strcat+0x78>
	{
		*p++ = *pSrc++;
   265c0:	e51b3010 	ldr	r3, [fp, #-16]
   265c4:	e2832001 	add	r2, r3, #1
   265c8:	e50b2010 	str	r2, [fp, #-16]
   265cc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   265d0:	e2821001 	add	r1, r2, #1
   265d4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   265d8:	e5d22000 	ldrb	r2, [r2]
   265dc:	e5c32000 	strb	r2, [r3]
	while (*p)
	{
		p++;
	}

	while (*pSrc)
   265e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   265e4:	e5d33000 	ldrb	r3, [r3]
   265e8:	e3530000 	cmp	r3, #0
   265ec:	1afffff3 	bne	265c0 <uspi_strcat+0x58>
	{
		*p++ = *pSrc++;
	}

	*p = '\0';
   265f0:	e51b3010 	ldr	r3, [fp, #-16]
   265f4:	e3a02000 	mov	r2, #0
   265f8:	e5c32000 	strb	r2, [r3]

	return pDest;
   265fc:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   26600:	e1a03005 	mov	r3, r5
   26604:	e3060568 	movw	r0, #25960	; 0x6568
   26608:	e3400002 	movt	r0, #2
   2660c:	e1a01003 	mov	r1, r3
   26610:	ebffbc93 	bl	15864 <__cyg_profile_func_exit>
   26614:	e1a03004 	mov	r3, r4
}
   26618:	e1a00003 	mov	r0, r3
   2661c:	e24bd00c 	sub	sp, fp, #12
   26620:	e8bd8830 	pop	{r4, r5, fp, pc}

00026624 <uspi_char2int>:

#endif

int uspi_char2int (char chValue)
{
   26624:	e92d4830 	push	{r4, r5, fp, lr}
   26628:	e28db00c 	add	fp, sp, #12
   2662c:	e24dd010 	sub	sp, sp, #16
   26630:	e1a0500e 	mov	r5, lr
   26634:	e1a03000 	mov	r3, r0
   26638:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   2663c:	e1a03005 	mov	r3, r5
   26640:	e3060624 	movw	r0, #26148	; 0x6624
   26644:	e3400002 	movt	r0, #2
   26648:	e1a01003 	mov	r1, r3
   2664c:	ebffbc32 	bl	1571c <__cyg_profile_func_enter>
	int nResult = chValue;
   26650:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
   26654:	e50b3010 	str	r3, [fp, #-16]

	if (nResult > 0x7F)
   26658:	e51b3010 	ldr	r3, [fp, #-16]
   2665c:	e353007f 	cmp	r3, #127	; 0x7f
   26660:	da000003 	ble	26674 <uspi_char2int+0x50>
	{
		nResult |= -0x100;
   26664:	e51b3010 	ldr	r3, [fp, #-16]
   26668:	e1e03c03 	mvn	r3, r3, lsl #24
   2666c:	e1e03c23 	mvn	r3, r3, lsr #24
   26670:	e50b3010 	str	r3, [fp, #-16]
	}

	return nResult;
   26674:	e51b4010 	ldr	r4, [fp, #-16]
   26678:	e1a03005 	mov	r3, r5
   2667c:	e3060624 	movw	r0, #26148	; 0x6624
   26680:	e3400002 	movt	r0, #2
   26684:	e1a01003 	mov	r1, r3
   26688:	ebffbc75 	bl	15864 <__cyg_profile_func_exit>
   2668c:	e1a03004 	mov	r3, r4
}
   26690:	e1a00003 	mov	r0, r3
   26694:	e24bd00c 	sub	sp, fp, #12
   26698:	e8bd8830 	pop	{r4, r5, fp, pc}

0002669c <uspi_le2be16>:

u16 uspi_le2be16 (u16 usValue)
{
   2669c:	e92d4830 	push	{r4, r5, fp, lr}
   266a0:	e28db00c 	add	fp, sp, #12
   266a4:	e24dd008 	sub	sp, sp, #8
   266a8:	e1a0500e 	mov	r5, lr
   266ac:	e1a03000 	mov	r3, r0
   266b0:	e14b30be 	strh	r3, [fp, #-14]
   266b4:	e1a03005 	mov	r3, r5
   266b8:	e306069c 	movw	r0, #26268	; 0x669c
   266bc:	e3400002 	movt	r0, #2
   266c0:	e1a01003 	mov	r1, r3
   266c4:	ebffbc14 	bl	1571c <__cyg_profile_func_enter>
	return    ((usValue & 0x00FF) << 8)
   266c8:	e15b30be 	ldrh	r3, [fp, #-14]
   266cc:	e1a03403 	lsl	r3, r3, #8
   266d0:	e6ff2073 	uxth	r2, r3
		| ((usValue & 0xFF00) >> 8);
   266d4:	e15b30be 	ldrh	r3, [fp, #-14]
   266d8:	e1a03423 	lsr	r3, r3, #8
   266dc:	e6ff3073 	uxth	r3, r3
	return nResult;
}

u16 uspi_le2be16 (u16 usValue)
{
	return    ((usValue & 0x00FF) << 8)
   266e0:	e6ff3073 	uxth	r3, r3
   266e4:	e1823003 	orr	r3, r2, r3
   266e8:	e6ff3073 	uxth	r3, r3
   266ec:	e6ff4073 	uxth	r4, r3
   266f0:	e1a03005 	mov	r3, r5
   266f4:	e306069c 	movw	r0, #26268	; 0x669c
   266f8:	e3400002 	movt	r0, #2
   266fc:	e1a01003 	mov	r1, r3
   26700:	ebffbc57 	bl	15864 <__cyg_profile_func_exit>
   26704:	e1a03004 	mov	r3, r4
		| ((usValue & 0xFF00) >> 8);
}
   26708:	e1a00003 	mov	r0, r3
   2670c:	e24bd00c 	sub	sp, fp, #12
   26710:	e8bd8830 	pop	{r4, r5, fp, pc}

00026714 <uspi_le2be32>:

u32 uspi_le2be32 (u32 ulValue)
{
   26714:	e92d4830 	push	{r4, r5, fp, lr}
   26718:	e28db00c 	add	fp, sp, #12
   2671c:	e24dd008 	sub	sp, sp, #8
   26720:	e1a0500e 	mov	r5, lr
   26724:	e50b0010 	str	r0, [fp, #-16]
   26728:	e1a03005 	mov	r3, r5
   2672c:	e3060714 	movw	r0, #26388	; 0x6714
   26730:	e3400002 	movt	r0, #2
   26734:	e1a01003 	mov	r1, r3
   26738:	ebffbbf7 	bl	1571c <__cyg_profile_func_enter>
	return    ((ulValue & 0x000000FF) << 24)
   2673c:	e51b3010 	ldr	r3, [fp, #-16]
   26740:	e1a02c03 	lsl	r2, r3, #24
		| ((ulValue & 0x0000FF00) << 8)
   26744:	e51b3010 	ldr	r3, [fp, #-16]
   26748:	e2033cff 	and	r3, r3, #65280	; 0xff00
   2674c:	e1a03403 	lsl	r3, r3, #8
   26750:	e1822003 	orr	r2, r2, r3
		| ((ulValue & 0x00FF0000) >> 8)
   26754:	e51b3010 	ldr	r3, [fp, #-16]
   26758:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
   2675c:	e1a03423 	lsr	r3, r3, #8
   26760:	e1822003 	orr	r2, r2, r3
		| ((ulValue & 0xFF000000) >> 24);
   26764:	e51b3010 	ldr	r3, [fp, #-16]
   26768:	e1a03c23 	lsr	r3, r3, #24
		| ((usValue & 0xFF00) >> 8);
}

u32 uspi_le2be32 (u32 ulValue)
{
	return    ((ulValue & 0x000000FF) << 24)
   2676c:	e1824003 	orr	r4, r2, r3
   26770:	e1a03005 	mov	r3, r5
   26774:	e3060714 	movw	r0, #26388	; 0x6714
   26778:	e3400002 	movt	r0, #2
   2677c:	e1a01003 	mov	r1, r3
   26780:	ebffbc37 	bl	15864 <__cyg_profile_func_exit>
   26784:	e1a03004 	mov	r3, r4
		| ((ulValue & 0x0000FF00) << 8)
		| ((ulValue & 0x00FF0000) >> 8)
		| ((ulValue & 0xFF000000) >> 24);
}
   26788:	e1a00003 	mov	r0, r3
   2678c:	e24bd00c 	sub	sp, fp, #12
   26790:	e8bd8830 	pop	{r4, r5, fp, pc}

00026794 <USBBulkOnlyMassStorageDevice>:
					 void *pCmdBlk, unsigned nCmdBlkLen,
					 void *pBuffer, unsigned nBufLen, boolean bIn);
int USBBulkOnlyMassStorageDeviceReset (TUSBBulkOnlyMassStorageDevice *pThis);

void USBBulkOnlyMassStorageDevice (TUSBBulkOnlyMassStorageDevice *pThis, TUSBDevice *pDevice)
{
   26794:	e92d4810 	push	{r4, fp, lr}
   26798:	e28db008 	add	fp, sp, #8
   2679c:	e24dd00c 	sub	sp, sp, #12
   267a0:	e1a0400e 	mov	r4, lr
   267a4:	e50b0010 	str	r0, [fp, #-16]
   267a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   267ac:	e1a03004 	mov	r3, r4
   267b0:	e3060794 	movw	r0, #26516	; 0x6794
   267b4:	e3400002 	movt	r0, #2
   267b8:	e1a01003 	mov	r1, r3
   267bc:	ebffbbd6 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   267c0:	e51b3010 	ldr	r3, [fp, #-16]
   267c4:	e3530000 	cmp	r3, #0
   267c8:	1a000005 	bne	267e4 <USBBulkOnlyMassStorageDevice+0x50>
   267cc:	e30f0b10 	movw	r0, #64272	; 0xfb10
   267d0:	e3400002 	movt	r0, #2
   267d4:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   267d8:	e3401002 	movt	r1, #2
   267dc:	e3a020c8 	mov	r2, #200	; 0xc8
   267e0:	ebffc072 	bl	169b0 <uspi_assertion_failed>

	USBDeviceCopy (&pThis->m_USBDevice, pDevice);
   267e4:	e51b3010 	ldr	r3, [fp, #-16]
   267e8:	e1a00003 	mov	r0, r3
   267ec:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   267f0:	ebffe16e 	bl	1edb0 <USBDeviceCopy>
	pThis->m_USBDevice.Configure = USBBulkOnlyMassStorageDeviceConfigure;
   267f4:	e51b2010 	ldr	r2, [fp, #-16]
   267f8:	e306394c 	movw	r3, #26956	; 0x694c
   267fc:	e3403002 	movt	r3, #2
   26800:	e5823000 	str	r3, [r2]

	pThis->m_pEndpointIn = 0;
   26804:	e51b3010 	ldr	r3, [fp, #-16]
   26808:	e3a02000 	mov	r2, #0
   2680c:	e5832038 	str	r2, [r3, #56]	; 0x38
	pThis->m_pEndpointOut = 0;
   26810:	e51b3010 	ldr	r3, [fp, #-16]
   26814:	e3a02000 	mov	r2, #0
   26818:	e583203c 	str	r2, [r3, #60]	; 0x3c
	pThis->m_nCWBTag = 0;
   2681c:	e51b3010 	ldr	r3, [fp, #-16]
   26820:	e3a02000 	mov	r2, #0
   26824:	e5832040 	str	r2, [r3, #64]	; 0x40
	pThis->m_nBlockCount = 0;
   26828:	e51b3010 	ldr	r3, [fp, #-16]
   2682c:	e3a02000 	mov	r2, #0
   26830:	e5832044 	str	r2, [r3, #68]	; 0x44
	pThis->m_ullOffset = 0;
   26834:	e51b1010 	ldr	r1, [fp, #-16]
   26838:	e3a02000 	mov	r2, #0
   2683c:	e3a03000 	mov	r3, #0
   26840:	e1c124f8 	strd	r2, [r1, #72]	; 0x48
   26844:	e1a03004 	mov	r3, r4
   26848:	e3060794 	movw	r0, #26516	; 0x6794
   2684c:	e3400002 	movt	r0, #2
   26850:	e1a01003 	mov	r1, r3
   26854:	ebffbc02 	bl	15864 <__cyg_profile_func_exit>
}
   26858:	e24bd008 	sub	sp, fp, #8
   2685c:	e8bd8810 	pop	{r4, fp, pc}

00026860 <_USBBulkOnlyMassStorageDevice>:

void _USBBulkOnlyMassStorageDevice (TUSBBulkOnlyMassStorageDevice *pThis)
{
   26860:	e92d4810 	push	{r4, fp, lr}
   26864:	e28db008 	add	fp, sp, #8
   26868:	e24dd00c 	sub	sp, sp, #12
   2686c:	e1a0400e 	mov	r4, lr
   26870:	e50b0010 	str	r0, [fp, #-16]
   26874:	e1a03004 	mov	r3, r4
   26878:	e3060860 	movw	r0, #26720	; 0x6860
   2687c:	e3400002 	movt	r0, #2
   26880:	e1a01003 	mov	r1, r3
   26884:	ebffbba4 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   26888:	e51b3010 	ldr	r3, [fp, #-16]
   2688c:	e3530000 	cmp	r3, #0
   26890:	1a000005 	bne	268ac <_USBBulkOnlyMassStorageDevice+0x4c>
   26894:	e30f0b10 	movw	r0, #64272	; 0xfb10
   26898:	e3400002 	movt	r0, #2
   2689c:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   268a0:	e3401002 	movt	r1, #2
   268a4:	e3a020d6 	mov	r2, #214	; 0xd6
   268a8:	ebffc040 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pEndpointOut != 0)
   268ac:	e51b3010 	ldr	r3, [fp, #-16]
   268b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   268b4:	e3530000 	cmp	r3, #0
   268b8:	0a00000a 	beq	268e8 <_USBBulkOnlyMassStorageDevice+0x88>
	{
		_USBEndpoint (pThis->m_pEndpointOut);
   268bc:	e51b3010 	ldr	r3, [fp, #-16]
   268c0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   268c4:	e1a00003 	mov	r0, r3
   268c8:	ebffe911 	bl	20d14 <_USBEndpoint>
		free (pThis->m_pEndpointOut);
   268cc:	e51b3010 	ldr	r3, [fp, #-16]
   268d0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   268d4:	e1a00003 	mov	r0, r3
   268d8:	ebffc074 	bl	16ab0 <free>
		pThis->m_pEndpointOut =  0;
   268dc:	e51b3010 	ldr	r3, [fp, #-16]
   268e0:	e3a02000 	mov	r2, #0
   268e4:	e583203c 	str	r2, [r3, #60]	; 0x3c
	}
	
	if (pThis->m_pEndpointIn != 0)
   268e8:	e51b3010 	ldr	r3, [fp, #-16]
   268ec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   268f0:	e3530000 	cmp	r3, #0
   268f4:	0a00000a 	beq	26924 <_USBBulkOnlyMassStorageDevice+0xc4>
	{
		_USBEndpoint (pThis->m_pEndpointIn);
   268f8:	e51b3010 	ldr	r3, [fp, #-16]
   268fc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   26900:	e1a00003 	mov	r0, r3
   26904:	ebffe902 	bl	20d14 <_USBEndpoint>
		free (pThis->m_pEndpointIn);
   26908:	e51b3010 	ldr	r3, [fp, #-16]
   2690c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   26910:	e1a00003 	mov	r0, r3
   26914:	ebffc065 	bl	16ab0 <free>
		pThis->m_pEndpointIn =  0;
   26918:	e51b3010 	ldr	r3, [fp, #-16]
   2691c:	e3a02000 	mov	r2, #0
   26920:	e5832038 	str	r2, [r3, #56]	; 0x38
	}
	
	_USBDevice (&pThis->m_USBDevice);
   26924:	e51b3010 	ldr	r3, [fp, #-16]
   26928:	e1a00003 	mov	r0, r3
   2692c:	ebffe1ef 	bl	1f0f0 <_USBDevice>
   26930:	e1a03004 	mov	r3, r4
   26934:	e3060860 	movw	r0, #26720	; 0x6860
   26938:	e3400002 	movt	r0, #2
   2693c:	e1a01003 	mov	r1, r3
   26940:	ebffbbc7 	bl	15864 <__cyg_profile_func_exit>
}
   26944:	e24bd008 	sub	sp, fp, #8
   26948:	e8bd8810 	pop	{r4, fp, pc}

0002694c <USBBulkOnlyMassStorageDeviceConfigure>:

boolean USBBulkOnlyMassStorageDeviceConfigure (TUSBDevice *pUSBDevice)
{
   2694c:	e92d4830 	push	{r4, r5, fp, lr}
   26950:	e28db00c 	add	fp, sp, #12
   26954:	e24dd098 	sub	sp, sp, #152	; 0x98
   26958:	e1a0500e 	mov	r5, lr
   2695c:	e50b0098 	str	r0, [fp, #-152]	; 0xffffff68
   26960:	e1a03005 	mov	r3, r5
   26964:	e306094c 	movw	r0, #26956	; 0x694c
   26968:	e3400002 	movt	r0, #2
   2696c:	e1a01003 	mov	r1, r3
   26970:	ebffbb69 	bl	1571c <__cyg_profile_func_enter>
	TUSBBulkOnlyMassStorageDevice *pThis = (TUSBBulkOnlyMassStorageDevice *) pUSBDevice;
   26974:	e51b3098 	ldr	r3, [fp, #-152]	; 0xffffff68
   26978:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	assert (pThis != 0);
   2697c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26980:	e3530000 	cmp	r3, #0
   26984:	1a000005 	bne	269a0 <USBBulkOnlyMassStorageDeviceConfigure+0x54>
   26988:	e30f0b10 	movw	r0, #64272	; 0xfb10
   2698c:	e3400002 	movt	r0, #2
   26990:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   26994:	e3401002 	movt	r1, #2
   26998:	e3a020ec 	mov	r2, #236	; 0xec
   2699c:	ebffc003 	bl	169b0 <uspi_assertion_failed>

	TUSBConfigurationDescriptor *pConfDesc =
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
   269a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
boolean USBBulkOnlyMassStorageDeviceConfigure (TUSBDevice *pUSBDevice)
{
	TUSBBulkOnlyMassStorageDevice *pThis = (TUSBBulkOnlyMassStorageDevice *) pUSBDevice;
	assert (pThis != 0);

	TUSBConfigurationDescriptor *pConfDesc =
   269a4:	e1a00003 	mov	r0, r3
   269a8:	e3a01002 	mov	r1, #2
   269ac:	ebffe60c 	bl	201e4 <USBDeviceGetDescriptor>
   269b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
	if (   pConfDesc == 0
   269b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   269b8:	e3530000 	cmp	r3, #0
   269bc:	0a000003 	beq	269d0 <USBBulkOnlyMassStorageDeviceConfigure+0x84>
	    || pConfDesc->bNumInterfaces <  1)
   269c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   269c4:	e5d33004 	ldrb	r3, [r3, #4]
   269c8:	e3530000 	cmp	r3, #0
   269cc:	1a000006 	bne	269ec <USBBulkOnlyMassStorageDeviceConfigure+0xa0>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUmsd);
   269d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   269d4:	e1a00003 	mov	r0, r3
   269d8:	e30f1b08 	movw	r1, #64264	; 0xfb08
   269dc:	e3401002 	movt	r1, #2
   269e0:	ebffe62e 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   269e4:	e3a04000 	mov	r4, #0
   269e8:	ea00019b 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
	}

	TUSBInterfaceDescriptor *pInterfaceDesc =
		(TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE);
   269ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUmsd);

		return FALSE;
	}

	TUSBInterfaceDescriptor *pInterfaceDesc =
   269f0:	e1a00003 	mov	r0, r3
   269f4:	e3a01004 	mov	r1, #4
   269f8:	ebffe5f9 	bl	201e4 <USBDeviceGetDescriptor>
   269fc:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
		(TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE);
	if (   pInterfaceDesc == 0
   26a00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a04:	e3530000 	cmp	r3, #0
   26a08:	0a000017 	beq	26a6c <USBBulkOnlyMassStorageDeviceConfigure+0x120>
	    || pInterfaceDesc->bInterfaceNumber		!= 0x00
   26a0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a10:	e5d33002 	ldrb	r3, [r3, #2]
   26a14:	e3530000 	cmp	r3, #0
   26a18:	1a000013 	bne	26a6c <USBBulkOnlyMassStorageDeviceConfigure+0x120>
	    || pInterfaceDesc->bAlternateSetting	!= 0x00
   26a1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a20:	e5d33003 	ldrb	r3, [r3, #3]
   26a24:	e3530000 	cmp	r3, #0
   26a28:	1a00000f 	bne	26a6c <USBBulkOnlyMassStorageDeviceConfigure+0x120>
	    || pInterfaceDesc->bNumEndpoints		<  2
   26a2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a30:	e5d33004 	ldrb	r3, [r3, #4]
   26a34:	e3530001 	cmp	r3, #1
   26a38:	9a00000b 	bls	26a6c <USBBulkOnlyMassStorageDeviceConfigure+0x120>
	    || pInterfaceDesc->bInterfaceClass		!= 0x08		// Mass Storage Class
   26a3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a40:	e5d33005 	ldrb	r3, [r3, #5]
   26a44:	e3530008 	cmp	r3, #8
   26a48:	1a000007 	bne	26a6c <USBBulkOnlyMassStorageDeviceConfigure+0x120>
	    || pInterfaceDesc->bInterfaceSubClass	!= 0x06		// SCSI Transparent Command Set
   26a4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a50:	e5d33006 	ldrb	r3, [r3, #6]
   26a54:	e3530006 	cmp	r3, #6
   26a58:	1a000003 	bne	26a6c <USBBulkOnlyMassStorageDeviceConfigure+0x120>
	    || pInterfaceDesc->bInterfaceProtocol	!= 0x50)	// Bulk-Only Transport
   26a5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a60:	e5d33007 	ldrb	r3, [r3, #7]
   26a64:	e3530050 	cmp	r3, #80	; 0x50
   26a68:	0a000006 	beq	26a88 <USBBulkOnlyMassStorageDeviceConfigure+0x13c>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUmsd);
   26a6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26a70:	e1a00003 	mov	r0, r3
   26a74:	e30f1b08 	movw	r1, #64264	; 0xfb08
   26a78:	e3401002 	movt	r1, #2
   26a7c:	ebffe607 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   26a80:	e3a04000 	mov	r4, #0
   26a84:	ea000174 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
	}

	const TUSBEndpointDescriptor *pEndpointDesc;
	while ((pEndpointDesc = (TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT)) != 0)
   26a88:	ea00004f 	b	26bcc <USBBulkOnlyMassStorageDeviceConfigure+0x280>
	{
		if ((pEndpointDesc->bmAttributes & 0x3F) == 0x02)		// Bulk
   26a8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26a90:	e5d33003 	ldrb	r3, [r3, #3]
   26a94:	e203303f 	and	r3, r3, #63	; 0x3f
   26a98:	e3530002 	cmp	r3, #2
   26a9c:	1a00004a 	bne	26bcc <USBBulkOnlyMassStorageDeviceConfigure+0x280>
		{
			if ((pEndpointDesc->bEndpointAddress & 0x80) == 0x80)	// Input
   26aa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26aa4:	e5d33002 	ldrb	r3, [r3, #2]
   26aa8:	e6ef3073 	uxtb	r3, r3
   26aac:	e6af3073 	sxtb	r3, r3
   26ab0:	e3530000 	cmp	r3, #0
   26ab4:	aa000022 	bge	26b44 <USBBulkOnlyMassStorageDeviceConfigure+0x1f8>
			{
				if (pThis->m_pEndpointIn != 0)
   26ab8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26abc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   26ac0:	e3530000 	cmp	r3, #0
   26ac4:	0a000006 	beq	26ae4 <USBBulkOnlyMassStorageDeviceConfigure+0x198>
				{
					USBDeviceConfigurationError (&pThis->m_USBDevice, FromUmsd);
   26ac8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26acc:	e1a00003 	mov	r0, r3
   26ad0:	e30f1b08 	movw	r1, #64264	; 0xfb08
   26ad4:	e3401002 	movt	r1, #2
   26ad8:	ebffe5f0 	bl	202a0 <USBDeviceConfigurationError>

					return FALSE;
   26adc:	e3a04000 	mov	r4, #0
   26ae0:	ea00015d 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
				}

				pThis->m_pEndpointIn = (TUSBEndpoint *) malloc (sizeof (TUSBEndpoint));
   26ae4:	e3a00018 	mov	r0, #24
   26ae8:	ebffbfda 	bl	16a58 <malloc>
   26aec:	e1a03000 	mov	r3, r0
   26af0:	e1a02003 	mov	r2, r3
   26af4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26af8:	e5832038 	str	r2, [r3, #56]	; 0x38
				assert (pThis->m_pEndpointIn != 0);
   26afc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26b00:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   26b04:	e3530000 	cmp	r3, #0
   26b08:	1a000005 	bne	26b24 <USBBulkOnlyMassStorageDeviceConfigure+0x1d8>
   26b0c:	e30f0b80 	movw	r0, #64384	; 0xfb80
   26b10:	e3400002 	movt	r0, #2
   26b14:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   26b18:	e3401002 	movt	r1, #2
   26b1c:	e3002116 	movw	r2, #278	; 0x116
   26b20:	ebffbfa2 	bl	169b0 <uspi_assertion_failed>
				USBEndpoint2 (pThis->m_pEndpointIn, &pThis->m_USBDevice, pEndpointDesc);
   26b24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26b28:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   26b2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26b30:	e1a00002 	mov	r0, r2
   26b34:	e1a01003 	mov	r1, r3
   26b38:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   26b3c:	ebffe781 	bl	20948 <USBEndpoint2>
   26b40:	ea000021 	b	26bcc <USBBulkOnlyMassStorageDeviceConfigure+0x280>
			}
			else							// Output
			{
				if (pThis->m_pEndpointOut != 0)
   26b44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26b48:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   26b4c:	e3530000 	cmp	r3, #0
   26b50:	0a000006 	beq	26b70 <USBBulkOnlyMassStorageDeviceConfigure+0x224>
				{
					USBDeviceConfigurationError (&pThis->m_USBDevice, FromUmsd);
   26b54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26b58:	e1a00003 	mov	r0, r3
   26b5c:	e30f1b08 	movw	r1, #64264	; 0xfb08
   26b60:	e3401002 	movt	r1, #2
   26b64:	ebffe5cd 	bl	202a0 <USBDeviceConfigurationError>

					return FALSE;
   26b68:	e3a04000 	mov	r4, #0
   26b6c:	ea00013a 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
				}

				pThis->m_pEndpointOut = (TUSBEndpoint *) malloc (sizeof (TUSBEndpoint));
   26b70:	e3a00018 	mov	r0, #24
   26b74:	ebffbfb7 	bl	16a58 <malloc>
   26b78:	e1a03000 	mov	r3, r0
   26b7c:	e1a02003 	mov	r2, r3
   26b80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26b84:	e583203c 	str	r2, [r3, #60]	; 0x3c
				assert (pThis->m_pEndpointOut != 0);
   26b88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26b8c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   26b90:	e3530000 	cmp	r3, #0
   26b94:	1a000005 	bne	26bb0 <USBBulkOnlyMassStorageDeviceConfigure+0x264>
   26b98:	e30f0b9c 	movw	r0, #64412	; 0xfb9c
   26b9c:	e3400002 	movt	r0, #2
   26ba0:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   26ba4:	e3401002 	movt	r1, #2
   26ba8:	e3002123 	movw	r2, #291	; 0x123
   26bac:	ebffbf7f 	bl	169b0 <uspi_assertion_failed>
				USBEndpoint2 (pThis->m_pEndpointOut, &pThis->m_USBDevice, pEndpointDesc);
   26bb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26bb4:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   26bb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26bbc:	e1a00002 	mov	r0, r2
   26bc0:	e1a01003 	mov	r1, r3
   26bc4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   26bc8:	ebffe75e 	bl	20948 <USBEndpoint2>

		return FALSE;
	}

	const TUSBEndpointDescriptor *pEndpointDesc;
	while ((pEndpointDesc = (TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT)) != 0)
   26bcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26bd0:	e1a00003 	mov	r0, r3
   26bd4:	e3a01005 	mov	r1, #5
   26bd8:	ebffe581 	bl	201e4 <USBDeviceGetDescriptor>
   26bdc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   26be0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26be4:	e3530000 	cmp	r3, #0
   26be8:	1affffa7 	bne	26a8c <USBBulkOnlyMassStorageDeviceConfigure+0x140>
				USBEndpoint2 (pThis->m_pEndpointOut, &pThis->m_USBDevice, pEndpointDesc);
			}
		}
	}

	if (   pThis->m_pEndpointIn  == 0
   26bec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26bf0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   26bf4:	e3530000 	cmp	r3, #0
   26bf8:	0a000003 	beq	26c0c <USBBulkOnlyMassStorageDeviceConfigure+0x2c0>
	    || pThis->m_pEndpointOut == 0)
   26bfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26c00:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   26c04:	e3530000 	cmp	r3, #0
   26c08:	1a000006 	bne	26c28 <USBBulkOnlyMassStorageDeviceConfigure+0x2dc>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUmsd);
   26c0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26c10:	e1a00003 	mov	r0, r3
   26c14:	e30f1b08 	movw	r1, #64264	; 0xfb08
   26c18:	e3401002 	movt	r1, #2
   26c1c:	ebffe59f 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   26c20:	e3a04000 	mov	r4, #0
   26c24:	ea00010c 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
	}

	if (!USBDeviceConfigure (&pThis->m_USBDevice))
   26c28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26c2c:	e1a00003 	mov	r0, r3
   26c30:	ebffe35d 	bl	1f9ac <USBDeviceConfigure>
   26c34:	e1a03000 	mov	r3, r0
   26c38:	e3530000 	cmp	r3, #0
   26c3c:	1a000007 	bne	26c60 <USBBulkOnlyMassStorageDeviceConfigure+0x314>
	{
		LogWrite (FromUmsd, LOG_ERROR, "Cannot set configuration");
   26c40:	e30f0b08 	movw	r0, #64264	; 0xfb08
   26c44:	e3400002 	movt	r0, #2
   26c48:	e3a01001 	mov	r1, #1
   26c4c:	e30f2bb8 	movw	r2, #64440	; 0xfbb8
   26c50:	e3402002 	movt	r2, #2
   26c54:	ebffbf3d 	bl	16950 <LogWrite>

		return FALSE;
   26c58:	e3a04000 	mov	r4, #0
   26c5c:	ea0000fe 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
	}

	TSCSIInquiry SCSIInquiry;
	SCSIInquiry.OperationCode	  = SCSI_OP_INQUIRY;
   26c60:	e3a03012 	mov	r3, #18
   26c64:	e54b302c 	strb	r3, [fp, #-44]	; 0xffffffd4
	SCSIInquiry.LogicalUnitNumberEVPD = 0;
   26c68:	e3a03000 	mov	r3, #0
   26c6c:	e54b302b 	strb	r3, [fp, #-43]	; 0xffffffd5
	SCSIInquiry.PageCode		  = 0;
   26c70:	e3a03000 	mov	r3, #0
   26c74:	e54b302a 	strb	r3, [fp, #-42]	; 0xffffffd6
	SCSIInquiry.Reserved		  = 0;
   26c78:	e3a03000 	mov	r3, #0
   26c7c:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
	SCSIInquiry.AllocationLength	  = sizeof (TSCSIInquiryResponse);
   26c80:	e3a03024 	mov	r3, #36	; 0x24
   26c84:	e54b3028 	strb	r3, [fp, #-40]	; 0xffffffd8
	SCSIInquiry.Control		  = SCSI_CONTROL;
   26c88:	e3a03000 	mov	r3, #0
   26c8c:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9

	TSCSIInquiryResponse SCSIInquiryResponse;
	if (USBBulkOnlyMassStorageDeviceCommand (pThis, &SCSIInquiry, sizeof SCSIInquiry,
   26c90:	e24b202c 	sub	r2, fp, #44	; 0x2c
   26c94:	e24bc050 	sub	ip, fp, #80	; 0x50
   26c98:	e3a03024 	mov	r3, #36	; 0x24
   26c9c:	e58d3000 	str	r3, [sp]
   26ca0:	e3a03001 	mov	r3, #1
   26ca4:	e58d3004 	str	r3, [sp, #4]
   26ca8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   26cac:	e1a01002 	mov	r1, r2
   26cb0:	e3a02006 	mov	r2, #6
   26cb4:	e1a0300c 	mov	r3, ip
   26cb8:	eb000289 	bl	276e4 <USBBulkOnlyMassStorageDeviceCommand>
   26cbc:	e1a03000 	mov	r3, r0
   26cc0:	e3530024 	cmp	r3, #36	; 0x24
   26cc4:	0a000007 	beq	26ce8 <USBBulkOnlyMassStorageDeviceConfigure+0x39c>
						 &SCSIInquiryResponse, sizeof SCSIInquiryResponse,
						 TRUE) != (int) sizeof SCSIInquiryResponse)
	{
		LogWrite (FromUmsd, LOG_ERROR, "Device does not respond");
   26cc8:	e30f0b08 	movw	r0, #64264	; 0xfb08
   26ccc:	e3400002 	movt	r0, #2
   26cd0:	e3a01001 	mov	r1, #1
   26cd4:	e30f2bd4 	movw	r2, #64468	; 0xfbd4
   26cd8:	e3402002 	movt	r2, #2
   26cdc:	ebffbf1b 	bl	16950 <LogWrite>

		return FALSE;
   26ce0:	e3a04000 	mov	r4, #0
   26ce4:	ea0000dc 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
	}

	if (SCSIInquiryResponse.PeripheralDeviceType != SCSI_PDT_DIRECT_ACCESS_BLOCK)
   26ce8:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
   26cec:	e203301f 	and	r3, r3, #31
   26cf0:	e6ef3073 	uxtb	r3, r3
   26cf4:	e3530000 	cmp	r3, #0
   26cf8:	0a00000a 	beq	26d28 <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
	{
		LogWrite (FromUmsd, LOG_ERROR, "Unsupported device type: 0x%02X", (unsigned) SCSIInquiryResponse.PeripheralDeviceType);
   26cfc:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
   26d00:	e7e43053 	ubfx	r3, r3, #0, #5
   26d04:	e6ef3073 	uxtb	r3, r3
   26d08:	e30f0b08 	movw	r0, #64264	; 0xfb08
   26d0c:	e3400002 	movt	r0, #2
   26d10:	e3a01001 	mov	r1, #1
   26d14:	e30f2bec 	movw	r2, #64492	; 0xfbec
   26d18:	e3402002 	movt	r2, #2
   26d1c:	ebffbf0b 	bl	16950 <LogWrite>
		
		return FALSE;
   26d20:	e3a04000 	mov	r4, #0
   26d24:	ea0000cc 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
	}

	unsigned nTries = 100;
   26d28:	e3a03064 	mov	r3, #100	; 0x64
   26d2c:	e50b3010 	str	r3, [fp, #-16]
	while (--nTries)
   26d30:	ea00003e 	b	26e30 <USBBulkOnlyMassStorageDeviceConfigure+0x4e4>
	{
		TSCSITestUnitReady SCSITestUnitReady;
		SCSITestUnitReady.OperationCode = SCSI_OP_TEST_UNIT_READY;
   26d34:	e3a03000 	mov	r3, #0
   26d38:	e54b3078 	strb	r3, [fp, #-120]	; 0xffffff88
		SCSITestUnitReady.Reserved	= 0;
   26d3c:	e3a03000 	mov	r3, #0
   26d40:	e54b3077 	strb	r3, [fp, #-119]	; 0xffffff89
   26d44:	e3a03000 	mov	r3, #0
   26d48:	e54b3076 	strb	r3, [fp, #-118]	; 0xffffff8a
   26d4c:	e3a03000 	mov	r3, #0
   26d50:	e54b3075 	strb	r3, [fp, #-117]	; 0xffffff8b
   26d54:	e3a03000 	mov	r3, #0
   26d58:	e54b3074 	strb	r3, [fp, #-116]	; 0xffffff8c
		SCSITestUnitReady.Control	= SCSI_CONTROL;
   26d5c:	e3a03000 	mov	r3, #0
   26d60:	e54b3073 	strb	r3, [fp, #-115]	; 0xffffff8d

		if (USBBulkOnlyMassStorageDeviceCommand (pThis, &SCSITestUnitReady,
   26d64:	e24b2078 	sub	r2, fp, #120	; 0x78
   26d68:	e3a03000 	mov	r3, #0
   26d6c:	e58d3000 	str	r3, [sp]
   26d70:	e3a03000 	mov	r3, #0
   26d74:	e58d3004 	str	r3, [sp, #4]
   26d78:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   26d7c:	e1a01002 	mov	r1, r2
   26d80:	e3a02006 	mov	r2, #6
   26d84:	e3a03000 	mov	r3, #0
   26d88:	eb000255 	bl	276e4 <USBBulkOnlyMassStorageDeviceCommand>
   26d8c:	e1a03000 	mov	r3, r0
   26d90:	e3530000 	cmp	r3, #0
   26d94:	aa00002b 	bge	26e48 <USBBulkOnlyMassStorageDeviceConfigure+0x4fc>
		{
			break;
		}

		TSCSIRequestSense SCSIRequestSense;
		SCSIRequestSense.OperationCode	  = SCSI_REQUEST_SENSE;
   26d98:	e3a03003 	mov	r3, #3
   26d9c:	e54b3080 	strb	r3, [fp, #-128]	; 0xffffff80
		SCSIRequestSense.DescriptorFormat = 0;
   26da0:	e55b307f 	ldrb	r3, [fp, #-127]	; 0xffffff81
   26da4:	e7c0301f 	bfc	r3, #0, #1
   26da8:	e54b307f 	strb	r3, [fp, #-127]	; 0xffffff81
		SCSIRequestSense.Reserved1	  = 0;
   26dac:	e55b307f 	ldrb	r3, [fp, #-127]	; 0xffffff81
   26db0:	e7c7309f 	bfc	r3, #1, #7
   26db4:	e54b307f 	strb	r3, [fp, #-127]	; 0xffffff81
		SCSIRequestSense.Reserved2	  = 0;
   26db8:	e3a03000 	mov	r3, #0
   26dbc:	e14b37be 	strh	r3, [fp, #-126]	; 0xffffff82
		SCSIRequestSense.AllocationLength = sizeof (TSCSIRequestSenseResponse7x);
   26dc0:	e3a03012 	mov	r3, #18
   26dc4:	e54b307c 	strb	r3, [fp, #-124]	; 0xffffff84
		SCSIRequestSense.Control	  = SCSI_CONTROL;
   26dc8:	e3a03000 	mov	r3, #0
   26dcc:	e54b307b 	strb	r3, [fp, #-123]	; 0xffffff85

		TSCSIRequestSenseResponse7x SCSIRequestSenseResponse7x;
		if (USBBulkOnlyMassStorageDeviceCommand (pThis, &SCSIRequestSense, sizeof SCSIRequestSense,
   26dd0:	e24b2080 	sub	r2, fp, #128	; 0x80
   26dd4:	e24bc094 	sub	ip, fp, #148	; 0x94
   26dd8:	e3a03012 	mov	r3, #18
   26ddc:	e58d3000 	str	r3, [sp]
   26de0:	e3a03001 	mov	r3, #1
   26de4:	e58d3004 	str	r3, [sp, #4]
   26de8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   26dec:	e1a01002 	mov	r1, r2
   26df0:	e3a02006 	mov	r2, #6
   26df4:	e1a0300c 	mov	r3, ip
   26df8:	eb000239 	bl	276e4 <USBBulkOnlyMassStorageDeviceCommand>
   26dfc:	e1a03000 	mov	r3, r0
   26e00:	e3530000 	cmp	r3, #0
   26e04:	aa000007 	bge	26e28 <USBBulkOnlyMassStorageDeviceConfigure+0x4dc>
							 &SCSIRequestSenseResponse7x, sizeof SCSIRequestSenseResponse7x,
							 TRUE) < 0)
		{
			LogWrite (FromUmsd, LOG_ERROR, "Request sense failed");
   26e08:	e30f0b08 	movw	r0, #64264	; 0xfb08
   26e0c:	e3400002 	movt	r0, #2
   26e10:	e3a01001 	mov	r1, #1
   26e14:	e30f2c0c 	movw	r2, #64524	; 0xfc0c
   26e18:	e3402002 	movt	r2, #2
   26e1c:	ebffbecb 	bl	16950 <LogWrite>

			return FALSE;
   26e20:	e3a04000 	mov	r4, #0
   26e24:	ea00008c 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
		}

		MsDelay (100);
   26e28:	e3a00064 	mov	r0, #100	; 0x64
   26e2c:	ebffbdd3 	bl	16580 <MsDelay>
		
		return FALSE;
	}

	unsigned nTries = 100;
	while (--nTries)
   26e30:	e51b3010 	ldr	r3, [fp, #-16]
   26e34:	e2433001 	sub	r3, r3, #1
   26e38:	e50b3010 	str	r3, [fp, #-16]
   26e3c:	e51b3010 	ldr	r3, [fp, #-16]
   26e40:	e3530000 	cmp	r3, #0
   26e44:	1affffba 	bne	26d34 <USBBulkOnlyMassStorageDeviceConfigure+0x3e8>
		}

		MsDelay (100);
	}

	if (nTries == 0)
   26e48:	e51b3010 	ldr	r3, [fp, #-16]
   26e4c:	e3530000 	cmp	r3, #0
   26e50:	1a000007 	bne	26e74 <USBBulkOnlyMassStorageDeviceConfigure+0x528>
	{
		LogWrite (FromUmsd, LOG_ERROR, "Unit is not ready");
   26e54:	e30f0b08 	movw	r0, #64264	; 0xfb08
   26e58:	e3400002 	movt	r0, #2
   26e5c:	e3a01001 	mov	r1, #1
   26e60:	e30f2c24 	movw	r2, #64548	; 0xfc24
   26e64:	e3402002 	movt	r2, #2
   26e68:	ebffbeb8 	bl	16950 <LogWrite>

		return FALSE;
   26e6c:	e3a04000 	mov	r4, #0
   26e70:	ea000079 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
	}

	TSCSIReadCapacity10 SCSIReadCapacity;
	SCSIReadCapacity.OperationCode		= SCSI_OP_READ_CAPACITY10;
   26e74:	e3a03025 	mov	r3, #37	; 0x25
   26e78:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
	SCSIReadCapacity.Obsolete		= 0;
   26e7c:	e55b305b 	ldrb	r3, [fp, #-91]	; 0xffffffa5
   26e80:	e7c0301f 	bfc	r3, #0, #1
   26e84:	e54b305b 	strb	r3, [fp, #-91]	; 0xffffffa5
	SCSIReadCapacity.Reserved1		= 0;
   26e88:	e55b305b 	ldrb	r3, [fp, #-91]	; 0xffffffa5
   26e8c:	e7c7309f 	bfc	r3, #1, #7
   26e90:	e54b305b 	strb	r3, [fp, #-91]	; 0xffffffa5
	SCSIReadCapacity.LogicalBlockAddress	= 0;
   26e94:	e3a03000 	mov	r3, #0
   26e98:	e14b35ba 	strh	r3, [fp, #-90]	; 0xffffffa6
   26e9c:	e3a03000 	mov	r3, #0
   26ea0:	e14b35b8 	strh	r3, [fp, #-88]	; 0xffffffa8
	SCSIReadCapacity.Reserved2		= 0;
   26ea4:	e3a03000 	mov	r3, #0
   26ea8:	e14b35b6 	strh	r3, [fp, #-86]	; 0xffffffaa
	SCSIReadCapacity.PartialMediumIndicator	= 0;
   26eac:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
   26eb0:	e7c0301f 	bfc	r3, #0, #1
   26eb4:	e54b3054 	strb	r3, [fp, #-84]	; 0xffffffac
	SCSIReadCapacity.Reserved3		= 0;
   26eb8:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
   26ebc:	e7c7309f 	bfc	r3, #1, #7
   26ec0:	e54b3054 	strb	r3, [fp, #-84]	; 0xffffffac
	SCSIReadCapacity.Control		= SCSI_CONTROL;
   26ec4:	e3a03000 	mov	r3, #0
   26ec8:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad

	TSCSIReadCapacityResponse SCSIReadCapacityResponse;
	if (USBBulkOnlyMassStorageDeviceCommand (pThis, &SCSIReadCapacity, sizeof SCSIReadCapacity,
   26ecc:	e24b205c 	sub	r2, fp, #92	; 0x5c
   26ed0:	e24bc064 	sub	ip, fp, #100	; 0x64
   26ed4:	e3a03008 	mov	r3, #8
   26ed8:	e58d3000 	str	r3, [sp]
   26edc:	e3a03001 	mov	r3, #1
   26ee0:	e58d3004 	str	r3, [sp, #4]
   26ee4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   26ee8:	e1a01002 	mov	r1, r2
   26eec:	e3a0200a 	mov	r2, #10
   26ef0:	e1a0300c 	mov	r3, ip
   26ef4:	eb0001fa 	bl	276e4 <USBBulkOnlyMassStorageDeviceCommand>
   26ef8:	e1a03000 	mov	r3, r0
   26efc:	e3530008 	cmp	r3, #8
   26f00:	0a000007 	beq	26f24 <USBBulkOnlyMassStorageDeviceConfigure+0x5d8>
						 &SCSIReadCapacityResponse, sizeof SCSIReadCapacityResponse,
						 TRUE) != (int) sizeof SCSIReadCapacityResponse)
	{
		LogWrite (FromUmsd, LOG_ERROR, "Read capacity failed");
   26f04:	e30f0b08 	movw	r0, #64264	; 0xfb08
   26f08:	e3400002 	movt	r0, #2
   26f0c:	e3a01001 	mov	r1, #1
   26f10:	e30f2c38 	movw	r2, #64568	; 0xfc38
   26f14:	e3402002 	movt	r2, #2
   26f18:	ebffbe8c 	bl	16950 <LogWrite>

		return FALSE;
   26f1c:	e3a04000 	mov	r4, #0
   26f20:	ea00004d 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
	}

	unsigned nBlockSize = uspi_le2be32 (SCSIReadCapacityResponse.BlockLengthInBytes);
   26f24:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
   26f28:	e1a00003 	mov	r0, r3
   26f2c:	ebfffdf8 	bl	26714 <uspi_le2be32>
   26f30:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
	if (nBlockSize != UMSD_BLOCK_SIZE)
   26f34:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   26f38:	e3530c02 	cmp	r3, #512	; 0x200
   26f3c:	0a000008 	beq	26f64 <USBBulkOnlyMassStorageDeviceConfigure+0x618>
	{
		LogWrite (FromUmsd, LOG_ERROR, "Unsupported block size: %u", nBlockSize);
   26f40:	e30f0b08 	movw	r0, #64264	; 0xfb08
   26f44:	e3400002 	movt	r0, #2
   26f48:	e3a01001 	mov	r1, #1
   26f4c:	e30f2c50 	movw	r2, #64592	; 0xfc50
   26f50:	e3402002 	movt	r2, #2
   26f54:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   26f58:	ebffbe7c 	bl	16950 <LogWrite>

		return FALSE;
   26f5c:	e3a04000 	mov	r4, #0
   26f60:	ea00003d 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
	}

	pThis->m_nBlockCount = uspi_le2be32 (SCSIReadCapacityResponse.ReturnedLogicalBlockAddress);
   26f64:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   26f68:	e1a00003 	mov	r0, r3
   26f6c:	ebfffde8 	bl	26714 <uspi_le2be32>
   26f70:	e1a02000 	mov	r2, r0
   26f74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26f78:	e5832044 	str	r2, [r3, #68]	; 0x44
	if (pThis->m_nBlockCount == (u32) -1)
   26f7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26f80:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   26f84:	e3730001 	cmn	r3, #1
   26f88:	1a000007 	bne	26fac <USBBulkOnlyMassStorageDeviceConfigure+0x660>
	{
		LogWrite (FromUmsd, LOG_ERROR, "Unsupported disk size > 2TB");
   26f8c:	e30f0b08 	movw	r0, #64264	; 0xfb08
   26f90:	e3400002 	movt	r0, #2
   26f94:	e3a01001 	mov	r1, #1
   26f98:	e30f2c6c 	movw	r2, #64620	; 0xfc6c
   26f9c:	e3402002 	movt	r2, #2
   26fa0:	ebffbe6a 	bl	16950 <LogWrite>

		return FALSE;
   26fa4:	e3a04000 	mov	r4, #0
   26fa8:	ea00002b 	b	2705c <USBBulkOnlyMassStorageDeviceConfigure+0x710>
	}

	pThis->m_nBlockCount++;
   26fac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26fb0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   26fb4:	e2832001 	add	r2, r3, #1
   26fb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26fbc:	e5832044 	str	r2, [r3, #68]	; 0x44

	LogWrite (FromUmsd, LOG_DEBUG, "Capacity is %u MByte", pThis->m_nBlockCount / (0x100000 / UMSD_BLOCK_SIZE));
   26fc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26fc4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   26fc8:	e1a035a3 	lsr	r3, r3, #11
   26fcc:	e30f0b08 	movw	r0, #64264	; 0xfb08
   26fd0:	e3400002 	movt	r0, #2
   26fd4:	e3a01004 	mov	r1, #4
   26fd8:	e30f2c88 	movw	r2, #64648	; 0xfc88
   26fdc:	e3402002 	movt	r2, #2
   26fe0:	ebffbe5a 	bl	16950 <LogWrite>

	TString DeviceName;
	String (&DeviceName);
   26fe4:	e24b3070 	sub	r3, fp, #112	; 0x70
   26fe8:	e1a00003 	mov	r0, r3
   26fec:	ebfff775 	bl	24dc8 <String>
	StringFormat (&DeviceName, "umsd%u", s_nDeviceNumber++);
   26ff0:	e3003b80 	movw	r3, #2944	; 0xb80
   26ff4:	e3403003 	movt	r3, #3
   26ff8:	e5932000 	ldr	r2, [r3]
   26ffc:	e2821001 	add	r1, r2, #1
   27000:	e3003b80 	movw	r3, #2944	; 0xb80
   27004:	e3403003 	movt	r3, #3
   27008:	e5831000 	str	r1, [r3]
   2700c:	e24b3070 	sub	r3, fp, #112	; 0x70
   27010:	e1a00003 	mov	r0, r3
   27014:	e30f1ca0 	movw	r1, #64672	; 0xfca0
   27018:	e3401002 	movt	r1, #2
   2701c:	ebfff90d 	bl	25458 <StringFormat>
	DeviceNameServiceAddDevice (DeviceNameServiceGet (), StringGet (&DeviceName), pThis, TRUE);
   27020:	ebfff145 	bl	2353c <DeviceNameServiceGet>
   27024:	e1a04000 	mov	r4, r0
   27028:	e24b3070 	sub	r3, fp, #112	; 0x70
   2702c:	e1a00003 	mov	r0, r3
   27030:	ebfff7d7 	bl	24f94 <StringGet>
   27034:	e1a03000 	mov	r3, r0
   27038:	e1a00004 	mov	r0, r4
   2703c:	e1a01003 	mov	r1, r3
   27040:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   27044:	e3a03001 	mov	r3, #1
   27048:	ebfff083 	bl	2325c <DeviceNameServiceAddDevice>

	_String (&DeviceName);
   2704c:	e24b3070 	sub	r3, fp, #112	; 0x70
   27050:	e1a00003 	mov	r0, r3
   27054:	ebfff7a9 	bl	24f00 <_String>
	
	return TRUE;
   27058:	e3a04001 	mov	r4, #1
   2705c:	e1a03005 	mov	r3, r5
   27060:	e306094c 	movw	r0, #26956	; 0x694c
   27064:	e3400002 	movt	r0, #2
   27068:	e1a01003 	mov	r1, r3
   2706c:	ebffb9fc 	bl	15864 <__cyg_profile_func_exit>
   27070:	e1a03004 	mov	r3, r4
}
   27074:	e1a00003 	mov	r0, r3
   27078:	e24bd00c 	sub	sp, fp, #12
   2707c:	e8bd8830 	pop	{r4, r5, fp, pc}

00027080 <USBBulkOnlyMassStorageDeviceRead>:

int USBBulkOnlyMassStorageDeviceRead (TUSBBulkOnlyMassStorageDevice *pThis, void *pBuffer, unsigned nCount)
{
   27080:	e92d4830 	push	{r4, r5, fp, lr}
   27084:	e28db00c 	add	fp, sp, #12
   27088:	e24dd020 	sub	sp, sp, #32
   2708c:	e1a0500e 	mov	r5, lr
   27090:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   27094:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   27098:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   2709c:	e1a03005 	mov	r3, r5
   270a0:	e3070080 	movw	r0, #28800	; 0x7080
   270a4:	e3400002 	movt	r0, #2
   270a8:	e1a01003 	mov	r1, r3
   270ac:	ebffb99a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   270b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   270b4:	e3530000 	cmp	r3, #0
   270b8:	1a000005 	bne	270d4 <USBBulkOnlyMassStorageDeviceRead+0x54>
   270bc:	e30f0b10 	movw	r0, #64272	; 0xfb10
   270c0:	e3400002 	movt	r0, #2
   270c4:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   270c8:	e3401002 	movt	r1, #2
   270cc:	e30021af 	movw	r2, #431	; 0x1af
   270d0:	ebffbe36 	bl	169b0 <uspi_assertion_failed>

	unsigned nTries = 4;
   270d4:	e3a03004 	mov	r3, #4
   270d8:	e50b3010 	str	r3, [fp, #-16]

	int nResult;

	do
	{
		nResult = USBBulkOnlyMassStorageDeviceTryRead (pThis, pBuffer, nCount);
   270dc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   270e0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   270e4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   270e8:	eb00009e 	bl	27368 <USBBulkOnlyMassStorageDeviceTryRead>
   270ec:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

		if (nResult != (int) nCount)
   270f0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   270f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   270f8:	e1520003 	cmp	r2, r3
   270fc:	0a000007 	beq	27120 <USBBulkOnlyMassStorageDeviceRead+0xa0>
		{
			int nStatus = USBBulkOnlyMassStorageDeviceReset (pThis);
   27100:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   27104:	eb00025b 	bl	27a78 <USBBulkOnlyMassStorageDeviceReset>
   27108:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
			if (nStatus != 0)
   2710c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27110:	e3530000 	cmp	r3, #0
   27114:	0a000001 	beq	27120 <USBBulkOnlyMassStorageDeviceRead+0xa0>
			{
				return nStatus;
   27118:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   2711c:	ea00000a 	b	2714c <USBBulkOnlyMassStorageDeviceRead+0xcc>
			}
		}
	}
	while (   nResult != (int) nCount
   27120:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
	       && --nTries > 0);
   27124:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27128:	e1520003 	cmp	r2, r3
   2712c:	0a000005 	beq	27148 <USBBulkOnlyMassStorageDeviceRead+0xc8>
   27130:	e51b3010 	ldr	r3, [fp, #-16]
   27134:	e2433001 	sub	r3, r3, #1
   27138:	e50b3010 	str	r3, [fp, #-16]
   2713c:	e51b3010 	ldr	r3, [fp, #-16]
   27140:	e3530000 	cmp	r3, #0
   27144:	1affffe4 	bne	270dc <USBBulkOnlyMassStorageDeviceRead+0x5c>

	return nResult;
   27148:	e51b4014 	ldr	r4, [fp, #-20]	; 0xffffffec
   2714c:	e1a03005 	mov	r3, r5
   27150:	e3070080 	movw	r0, #28800	; 0x7080
   27154:	e3400002 	movt	r0, #2
   27158:	e1a01003 	mov	r1, r3
   2715c:	ebffb9c0 	bl	15864 <__cyg_profile_func_exit>
   27160:	e1a03004 	mov	r3, r4
}
   27164:	e1a00003 	mov	r0, r3
   27168:	e24bd00c 	sub	sp, fp, #12
   2716c:	e8bd8830 	pop	{r4, r5, fp, pc}

00027170 <USBBulkOnlyMassStorageDeviceWrite>:

int USBBulkOnlyMassStorageDeviceWrite (TUSBBulkOnlyMassStorageDevice *pThis, const void *pBuffer, unsigned nCount)
{
   27170:	e92d4830 	push	{r4, r5, fp, lr}
   27174:	e28db00c 	add	fp, sp, #12
   27178:	e24dd020 	sub	sp, sp, #32
   2717c:	e1a0500e 	mov	r5, lr
   27180:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   27184:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   27188:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   2718c:	e1a03005 	mov	r3, r5
   27190:	e3070170 	movw	r0, #29040	; 0x7170
   27194:	e3400002 	movt	r0, #2
   27198:	e1a01003 	mov	r1, r3
   2719c:	ebffb95e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   271a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   271a4:	e3530000 	cmp	r3, #0
   271a8:	1a000005 	bne	271c4 <USBBulkOnlyMassStorageDeviceWrite+0x54>
   271ac:	e30f0b10 	movw	r0, #64272	; 0xfb10
   271b0:	e3400002 	movt	r0, #2
   271b4:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   271b8:	e3401002 	movt	r1, #2
   271bc:	e30021ca 	movw	r2, #458	; 0x1ca
   271c0:	ebffbdfa 	bl	169b0 <uspi_assertion_failed>

	unsigned nTries = 4;
   271c4:	e3a03004 	mov	r3, #4
   271c8:	e50b3010 	str	r3, [fp, #-16]

	int nResult;

	do
	{
		nResult = USBBulkOnlyMassStorageDeviceTryWrite (pThis, pBuffer, nCount);
   271cc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   271d0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   271d4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   271d8:	eb0000d2 	bl	27528 <USBBulkOnlyMassStorageDeviceTryWrite>
   271dc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

		if (nResult != (int) nCount)
   271e0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   271e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   271e8:	e1520003 	cmp	r2, r3
   271ec:	0a000007 	beq	27210 <USBBulkOnlyMassStorageDeviceWrite+0xa0>
		{
			int nStatus = USBBulkOnlyMassStorageDeviceReset (pThis);
   271f0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   271f4:	eb00021f 	bl	27a78 <USBBulkOnlyMassStorageDeviceReset>
   271f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
			if (nStatus != 0)
   271fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27200:	e3530000 	cmp	r3, #0
   27204:	0a000001 	beq	27210 <USBBulkOnlyMassStorageDeviceWrite+0xa0>
			{
				return nStatus;
   27208:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   2720c:	ea00000a 	b	2723c <USBBulkOnlyMassStorageDeviceWrite+0xcc>
			}
		}
	}
	while (   nResult != (int) nCount
   27210:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
	       && --nTries > 0);
   27214:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27218:	e1520003 	cmp	r2, r3
   2721c:	0a000005 	beq	27238 <USBBulkOnlyMassStorageDeviceWrite+0xc8>
   27220:	e51b3010 	ldr	r3, [fp, #-16]
   27224:	e2433001 	sub	r3, r3, #1
   27228:	e50b3010 	str	r3, [fp, #-16]
   2722c:	e51b3010 	ldr	r3, [fp, #-16]
   27230:	e3530000 	cmp	r3, #0
   27234:	1affffe4 	bne	271cc <USBBulkOnlyMassStorageDeviceWrite+0x5c>

	return nResult;
   27238:	e51b4014 	ldr	r4, [fp, #-20]	; 0xffffffec
   2723c:	e1a03005 	mov	r3, r5
   27240:	e3070170 	movw	r0, #29040	; 0x7170
   27244:	e3400002 	movt	r0, #2
   27248:	e1a01003 	mov	r1, r3
   2724c:	ebffb984 	bl	15864 <__cyg_profile_func_exit>
   27250:	e1a03004 	mov	r3, r4
}
   27254:	e1a00003 	mov	r0, r3
   27258:	e24bd00c 	sub	sp, fp, #12
   2725c:	e8bd8830 	pop	{r4, r5, fp, pc}

00027260 <USBBulkOnlyMassStorageDeviceSeek>:

unsigned long long USBBulkOnlyMassStorageDeviceSeek (TUSBBulkOnlyMassStorageDevice *pThis, unsigned long long ullOffset)
{
   27260:	e92d4870 	push	{r4, r5, r6, fp, lr}
   27264:	e28db010 	add	fp, sp, #16
   27268:	e24dd014 	sub	sp, sp, #20
   2726c:	e1a0600e 	mov	r6, lr
   27270:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   27274:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
   27278:	e1a03006 	mov	r3, r6
   2727c:	e3070260 	movw	r0, #29280	; 0x7260
   27280:	e3400002 	movt	r0, #2
   27284:	e1a01003 	mov	r1, r3
   27288:	ebffb923 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2728c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27290:	e3530000 	cmp	r3, #0
   27294:	1a000005 	bne	272b0 <USBBulkOnlyMassStorageDeviceSeek+0x50>
   27298:	e30f0b10 	movw	r0, #64272	; 0xfb10
   2729c:	e3400002 	movt	r0, #2
   272a0:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   272a4:	e3401002 	movt	r1, #2
   272a8:	e30021e5 	movw	r2, #485	; 0x1e5
   272ac:	ebffbdbf 	bl	169b0 <uspi_assertion_failed>

	pThis->m_ullOffset = ullOffset;
   272b0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   272b4:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
   272b8:	e1c124f8 	strd	r2, [r1, #72]	; 0x48

	return pThis->m_ullOffset;
   272bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   272c0:	e1c344d8 	ldrd	r4, [r3, #72]	; 0x48
   272c4:	e1a03006 	mov	r3, r6
   272c8:	e3070260 	movw	r0, #29280	; 0x7260
   272cc:	e3400002 	movt	r0, #2
   272d0:	e1a01003 	mov	r1, r3
   272d4:	ebffb962 	bl	15864 <__cyg_profile_func_exit>
   272d8:	e1a02004 	mov	r2, r4
   272dc:	e1a03005 	mov	r3, r5
}
   272e0:	e1a00002 	mov	r0, r2
   272e4:	e1a01003 	mov	r1, r3
   272e8:	e24bd010 	sub	sp, fp, #16
   272ec:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

000272f0 <USBBulkOnlyMassStorageDeviceGetCapacity>:

unsigned USBBulkOnlyMassStorageDeviceGetCapacity (TUSBBulkOnlyMassStorageDevice *pThis)
{
   272f0:	e92d4830 	push	{r4, r5, fp, lr}
   272f4:	e28db00c 	add	fp, sp, #12
   272f8:	e24dd008 	sub	sp, sp, #8
   272fc:	e1a0500e 	mov	r5, lr
   27300:	e50b0010 	str	r0, [fp, #-16]
   27304:	e1a03005 	mov	r3, r5
   27308:	e30702f0 	movw	r0, #29424	; 0x72f0
   2730c:	e3400002 	movt	r0, #2
   27310:	e1a01003 	mov	r1, r3
   27314:	ebffb900 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   27318:	e51b3010 	ldr	r3, [fp, #-16]
   2731c:	e3530000 	cmp	r3, #0
   27320:	1a000005 	bne	2733c <USBBulkOnlyMassStorageDeviceGetCapacity+0x4c>
   27324:	e30f0b10 	movw	r0, #64272	; 0xfb10
   27328:	e3400002 	movt	r0, #2
   2732c:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   27330:	e3401002 	movt	r1, #2
   27334:	e30021ee 	movw	r2, #494	; 0x1ee
   27338:	ebffbd9c 	bl	169b0 <uspi_assertion_failed>

	return pThis->m_nBlockCount;
   2733c:	e51b3010 	ldr	r3, [fp, #-16]
   27340:	e5934044 	ldr	r4, [r3, #68]	; 0x44
   27344:	e1a03005 	mov	r3, r5
   27348:	e30702f0 	movw	r0, #29424	; 0x72f0
   2734c:	e3400002 	movt	r0, #2
   27350:	e1a01003 	mov	r1, r3
   27354:	ebffb942 	bl	15864 <__cyg_profile_func_exit>
   27358:	e1a03004 	mov	r3, r4
}
   2735c:	e1a00003 	mov	r0, r3
   27360:	e24bd00c 	sub	sp, fp, #12
   27364:	e8bd8830 	pop	{r4, r5, fp, pc}

00027368 <USBBulkOnlyMassStorageDeviceTryRead>:

int USBBulkOnlyMassStorageDeviceTryRead (TUSBBulkOnlyMassStorageDevice *pThis, void *pBuffer, unsigned nCount)
{
   27368:	e92d4870 	push	{r4, r5, r6, fp, lr}
   2736c:	e28db010 	add	fp, sp, #16
   27370:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   27374:	e1a0600e 	mov	r6, lr
   27378:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   2737c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   27380:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   27384:	e1a03006 	mov	r3, r6
   27388:	e3070368 	movw	r0, #29544	; 0x7368
   2738c:	e3400002 	movt	r0, #2
   27390:	e1a01003 	mov	r1, r3
   27394:	ebffb8e0 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   27398:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2739c:	e3530000 	cmp	r3, #0
   273a0:	1a000005 	bne	273bc <USBBulkOnlyMassStorageDeviceTryRead+0x54>
   273a4:	e30f0b10 	movw	r0, #64272	; 0xfb10
   273a8:	e3400002 	movt	r0, #2
   273ac:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   273b0:	e3401002 	movt	r1, #2
   273b4:	e30021f5 	movw	r2, #501	; 0x1f5
   273b8:	ebffbd7c 	bl	169b0 <uspi_assertion_failed>

	assert (pBuffer != 0);
   273bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   273c0:	e3530000 	cmp	r3, #0
   273c4:	1a000005 	bne	273e0 <USBBulkOnlyMassStorageDeviceTryRead+0x78>
   273c8:	e30f0ca8 	movw	r0, #64680	; 0xfca8
   273cc:	e3400002 	movt	r0, #2
   273d0:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   273d4:	e3401002 	movt	r1, #2
   273d8:	e30021f7 	movw	r2, #503	; 0x1f7
   273dc:	ebffbd73 	bl	169b0 <uspi_assertion_failed>

	if (   (pThis->m_ullOffset & UMSD_BLOCK_MASK) != 0
   273e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   273e4:	e1c324d8 	ldrd	r2, [r3, #72]	; 0x48
   273e8:	e30001ff 	movw	r0, #511	; 0x1ff
   273ec:	e3a01000 	mov	r1, #0
   273f0:	e0022000 	and	r2, r2, r0
   273f4:	e0033001 	and	r3, r3, r1
   273f8:	e1923003 	orrs	r3, r2, r3
   273fc:	1a000006 	bne	2741c <USBBulkOnlyMassStorageDeviceTryRead+0xb4>
	    || pThis->m_ullOffset > UMSD_MAX_OFFSET)
   27400:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   27404:	e1c324d8 	ldrd	r2, [r3, #72]	; 0x48
   27408:	e3e00000 	mvn	r0, #0
   2740c:	e30011ff 	movw	r1, #511	; 0x1ff
   27410:	e1530001 	cmp	r3, r1
   27414:	01520000 	cmpeq	r2, r0
   27418:	9a000001 	bls	27424 <USBBulkOnlyMassStorageDeviceTryRead+0xbc>
	{
		return -1;
   2741c:	e3e04000 	mvn	r4, #0
   27420:	ea000037 	b	27504 <USBBulkOnlyMassStorageDeviceTryRead+0x19c>
	}
	unsigned nBlockAddress = (unsigned) (pThis->m_ullOffset >> UMSD_BLOCK_SHIFT);
   27424:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   27428:	e1c324d8 	ldrd	r2, [r3, #72]	; 0x48
   2742c:	e1a044a2 	lsr	r4, r2, #9
   27430:	e1844b83 	orr	r4, r4, r3, lsl #23
   27434:	e1a054a3 	lsr	r5, r3, #9
   27438:	e1a03004 	mov	r3, r4
   2743c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	if ((nCount & UMSD_BLOCK_MASK) != 0)
   27440:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27444:	e7e83053 	ubfx	r3, r3, #0, #9
   27448:	e3530000 	cmp	r3, #0
   2744c:	0a000001 	beq	27458 <USBBulkOnlyMassStorageDeviceTryRead+0xf0>
	{
		return -1;
   27450:	e3e04000 	mvn	r4, #0
   27454:	ea00002a 	b	27504 <USBBulkOnlyMassStorageDeviceTryRead+0x19c>
	}
	unsigned short usTransferLength = (unsigned short) (nCount >> UMSD_BLOCK_SHIFT);
   27458:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2745c:	e1a034a3 	lsr	r3, r3, #9
   27460:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6

	//LogWrite (FromUmsd, LOG_DEBUG, "TryRead %u/0x%X/%u", nBlockAddress, (unsigned) pBuffer, (unsigned) usTransferLength);

	TSCSIRead10 SCSIRead;
	SCSIRead.OperationCode		= SCSI_OP_READ;
   27464:	e3a03028 	mov	r3, #40	; 0x28
   27468:	e54b3024 	strb	r3, [fp, #-36]	; 0xffffffdc
	SCSIRead.Reserved1		= 0;
   2746c:	e3a03000 	mov	r3, #0
   27470:	e54b3023 	strb	r3, [fp, #-35]	; 0xffffffdd
	SCSIRead.LogicalBlockAddress	= uspi_le2be32 (nBlockAddress);
   27474:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   27478:	ebfffca5 	bl	26714 <uspi_le2be32>
   2747c:	e1a03000 	mov	r3, r0
   27480:	e50b3022 	str	r3, [fp, #-34]	; 0xffffffde
	SCSIRead.Reserved2		= 0;
   27484:	e3a03000 	mov	r3, #0
   27488:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
	SCSIRead.TransferLength		= uspi_le2be16 (usTransferLength);
   2748c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   27490:	e1a00003 	mov	r0, r3
   27494:	ebfffc80 	bl	2669c <uspi_le2be16>
   27498:	e1a03000 	mov	r3, r0
   2749c:	e14b31bd 	strh	r3, [fp, #-29]	; 0xffffffe3
	SCSIRead.Control		= SCSI_CONTROL;
   274a0:	e3a03000 	mov	r3, #0
   274a4:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5

	if (USBBulkOnlyMassStorageDeviceCommand (pThis, &SCSIRead, sizeof SCSIRead,
   274a8:	e24b2024 	sub	r2, fp, #36	; 0x24
   274ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   274b0:	e58d3000 	str	r3, [sp]
   274b4:	e3a03001 	mov	r3, #1
   274b8:	e58d3004 	str	r3, [sp, #4]
   274bc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   274c0:	e1a01002 	mov	r1, r2
   274c4:	e3a0200a 	mov	r2, #10
   274c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   274cc:	eb000084 	bl	276e4 <USBBulkOnlyMassStorageDeviceCommand>
   274d0:	e1a02000 	mov	r2, r0
						 pBuffer, nCount,
						 TRUE) != (int) nCount)
   274d4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
	SCSIRead.LogicalBlockAddress	= uspi_le2be32 (nBlockAddress);
	SCSIRead.Reserved2		= 0;
	SCSIRead.TransferLength		= uspi_le2be16 (usTransferLength);
	SCSIRead.Control		= SCSI_CONTROL;

	if (USBBulkOnlyMassStorageDeviceCommand (pThis, &SCSIRead, sizeof SCSIRead,
   274d8:	e1520003 	cmp	r2, r3
   274dc:	0a000007 	beq	27500 <USBBulkOnlyMassStorageDeviceTryRead+0x198>
						 pBuffer, nCount,
						 TRUE) != (int) nCount)
	{
		LogWrite (FromUmsd, LOG_ERROR, "TryRead failed");
   274e0:	e30f0b08 	movw	r0, #64264	; 0xfb08
   274e4:	e3400002 	movt	r0, #2
   274e8:	e3a01001 	mov	r1, #1
   274ec:	e30f2cb8 	movw	r2, #64696	; 0xfcb8
   274f0:	e3402002 	movt	r2, #2
   274f4:	ebffbd15 	bl	16950 <LogWrite>

		return -1;
   274f8:	e3e04000 	mvn	r4, #0
   274fc:	ea000000 	b	27504 <USBBulkOnlyMassStorageDeviceTryRead+0x19c>
	}

	return nCount;
   27500:	e51b4030 	ldr	r4, [fp, #-48]	; 0xffffffd0
   27504:	e1a03006 	mov	r3, r6
   27508:	e3070368 	movw	r0, #29544	; 0x7368
   2750c:	e3400002 	movt	r0, #2
   27510:	e1a01003 	mov	r1, r3
   27514:	ebffb8d2 	bl	15864 <__cyg_profile_func_exit>
   27518:	e1a03004 	mov	r3, r4
}
   2751c:	e1a00003 	mov	r0, r3
   27520:	e24bd010 	sub	sp, fp, #16
   27524:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

00027528 <USBBulkOnlyMassStorageDeviceTryWrite>:

int USBBulkOnlyMassStorageDeviceTryWrite (TUSBBulkOnlyMassStorageDevice *pThis, const void *pBuffer, unsigned nCount)
{
   27528:	e92d4870 	push	{r4, r5, r6, fp, lr}
   2752c:	e28db010 	add	fp, sp, #16
   27530:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   27534:	e1a0600e 	mov	r6, lr
   27538:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   2753c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   27540:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   27544:	e1a03006 	mov	r3, r6
   27548:	e3070528 	movw	r0, #29992	; 0x7528
   2754c:	e3400002 	movt	r0, #2
   27550:	e1a01003 	mov	r1, r3
   27554:	ebffb870 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   27558:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2755c:	e3530000 	cmp	r3, #0
   27560:	1a000005 	bne	2757c <USBBulkOnlyMassStorageDeviceTryWrite+0x54>
   27564:	e30f0b10 	movw	r0, #64272	; 0xfb10
   27568:	e3400002 	movt	r0, #2
   2756c:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   27570:	e3401002 	movt	r1, #2
   27574:	e300221e 	movw	r2, #542	; 0x21e
   27578:	ebffbd0c 	bl	169b0 <uspi_assertion_failed>

	assert (pBuffer != 0);
   2757c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   27580:	e3530000 	cmp	r3, #0
   27584:	1a000005 	bne	275a0 <USBBulkOnlyMassStorageDeviceTryWrite+0x78>
   27588:	e30f0ca8 	movw	r0, #64680	; 0xfca8
   2758c:	e3400002 	movt	r0, #2
   27590:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   27594:	e3401002 	movt	r1, #2
   27598:	e3a02e22 	mov	r2, #544	; 0x220
   2759c:	ebffbd03 	bl	169b0 <uspi_assertion_failed>

	if (   (pThis->m_ullOffset & UMSD_BLOCK_MASK) != 0
   275a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   275a4:	e1c324d8 	ldrd	r2, [r3, #72]	; 0x48
   275a8:	e30001ff 	movw	r0, #511	; 0x1ff
   275ac:	e3a01000 	mov	r1, #0
   275b0:	e0022000 	and	r2, r2, r0
   275b4:	e0033001 	and	r3, r3, r1
   275b8:	e1923003 	orrs	r3, r2, r3
   275bc:	1a000006 	bne	275dc <USBBulkOnlyMassStorageDeviceTryWrite+0xb4>
	    || pThis->m_ullOffset > UMSD_MAX_OFFSET)
   275c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   275c4:	e1c324d8 	ldrd	r2, [r3, #72]	; 0x48
   275c8:	e3e00000 	mvn	r0, #0
   275cc:	e30011ff 	movw	r1, #511	; 0x1ff
   275d0:	e1530001 	cmp	r3, r1
   275d4:	01520000 	cmpeq	r2, r0
   275d8:	9a000001 	bls	275e4 <USBBulkOnlyMassStorageDeviceTryWrite+0xbc>
	{
		return -1;
   275dc:	e3e04000 	mvn	r4, #0
   275e0:	ea000036 	b	276c0 <USBBulkOnlyMassStorageDeviceTryWrite+0x198>
	}
	unsigned nBlockAddress = (unsigned) (pThis->m_ullOffset >> UMSD_BLOCK_SHIFT);
   275e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   275e8:	e1c324d8 	ldrd	r2, [r3, #72]	; 0x48
   275ec:	e1a044a2 	lsr	r4, r2, #9
   275f0:	e1844b83 	orr	r4, r4, r3, lsl #23
   275f4:	e1a054a3 	lsr	r5, r3, #9
   275f8:	e1a03004 	mov	r3, r4
   275fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	if ((nCount & UMSD_BLOCK_MASK) != 0)
   27600:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27604:	e7e83053 	ubfx	r3, r3, #0, #9
   27608:	e3530000 	cmp	r3, #0
   2760c:	0a000001 	beq	27618 <USBBulkOnlyMassStorageDeviceTryWrite+0xf0>
	{
		return -1;
   27610:	e3e04000 	mvn	r4, #0
   27614:	ea000029 	b	276c0 <USBBulkOnlyMassStorageDeviceTryWrite+0x198>
	}
	unsigned short usTransferLength = (unsigned short) (nCount >> UMSD_BLOCK_SHIFT);
   27618:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2761c:	e1a034a3 	lsr	r3, r3, #9
   27620:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6

	//LogWrite (FromUmsd, LOG_DEBUG, "TryWrite %u/0x%X/%u", nBlockAddress, (unsigned) pBuffer, (unsigned) usTransferLength);

	TSCSIWrite10 SCSIWrite;
	SCSIWrite.OperationCode		= SCSI_OP_WRITE;
   27624:	e3a0302a 	mov	r3, #42	; 0x2a
   27628:	e54b3024 	strb	r3, [fp, #-36]	; 0xffffffdc
	SCSIWrite.Flags			= SCSI_WRITE_FUA;
   2762c:	e3a03008 	mov	r3, #8
   27630:	e54b3023 	strb	r3, [fp, #-35]	; 0xffffffdd
	SCSIWrite.LogicalBlockAddress	= uspi_le2be32 (nBlockAddress);
   27634:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   27638:	ebfffc35 	bl	26714 <uspi_le2be32>
   2763c:	e1a03000 	mov	r3, r0
   27640:	e50b3022 	str	r3, [fp, #-34]	; 0xffffffde
	SCSIWrite.Reserved		= 0;
   27644:	e3a03000 	mov	r3, #0
   27648:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
	SCSIWrite.TransferLength	= uspi_le2be16 (usTransferLength);
   2764c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   27650:	e1a00003 	mov	r0, r3
   27654:	ebfffc10 	bl	2669c <uspi_le2be16>
   27658:	e1a03000 	mov	r3, r0
   2765c:	e14b31bd 	strh	r3, [fp, #-29]	; 0xffffffe3
	SCSIWrite.Control		= SCSI_CONTROL;
   27660:	e3a03000 	mov	r3, #0
   27664:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5

	if (USBBulkOnlyMassStorageDeviceCommand (pThis, &SCSIWrite, sizeof SCSIWrite,
   27668:	e24b2024 	sub	r2, fp, #36	; 0x24
   2766c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27670:	e58d3000 	str	r3, [sp]
   27674:	e3a03000 	mov	r3, #0
   27678:	e58d3004 	str	r3, [sp, #4]
   2767c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   27680:	e1a01002 	mov	r1, r2
   27684:	e3a0200a 	mov	r2, #10
   27688:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2768c:	eb000014 	bl	276e4 <USBBulkOnlyMassStorageDeviceCommand>
   27690:	e1a03000 	mov	r3, r0
   27694:	e3530000 	cmp	r3, #0
   27698:	aa000007 	bge	276bc <USBBulkOnlyMassStorageDeviceTryWrite+0x194>
						 (void *) pBuffer, nCount,
						 FALSE) < 0)
	{
		LogWrite (FromUmsd, LOG_ERROR, "TryWrite failed");
   2769c:	e30f0b08 	movw	r0, #64264	; 0xfb08
   276a0:	e3400002 	movt	r0, #2
   276a4:	e3a01001 	mov	r1, #1
   276a8:	e30f2cc8 	movw	r2, #64712	; 0xfcc8
   276ac:	e3402002 	movt	r2, #2
   276b0:	ebffbca6 	bl	16950 <LogWrite>

		return -1;
   276b4:	e3e04000 	mvn	r4, #0
   276b8:	ea000000 	b	276c0 <USBBulkOnlyMassStorageDeviceTryWrite+0x198>
	}

	return nCount;
   276bc:	e51b4030 	ldr	r4, [fp, #-48]	; 0xffffffd0
   276c0:	e1a03006 	mov	r3, r6
   276c4:	e3070528 	movw	r0, #29992	; 0x7528
   276c8:	e3400002 	movt	r0, #2
   276cc:	e1a01003 	mov	r1, r3
   276d0:	ebffb863 	bl	15864 <__cyg_profile_func_exit>
   276d4:	e1a03004 	mov	r3, r4
}
   276d8:	e1a00003 	mov	r0, r3
   276dc:	e24bd010 	sub	sp, fp, #16
   276e0:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

000276e4 <USBBulkOnlyMassStorageDeviceCommand>:

int USBBulkOnlyMassStorageDeviceCommand (TUSBBulkOnlyMassStorageDevice *pThis,
					 void *pCmdBlk, unsigned nCmdBlkLen,
					 void *pBuffer, unsigned nBufLen, boolean bIn)
{
   276e4:	e92d4830 	push	{r4, r5, fp, lr}
   276e8:	e28db00c 	add	fp, sp, #12
   276ec:	e24dd048 	sub	sp, sp, #72	; 0x48
   276f0:	e1a0500e 	mov	r5, lr
   276f4:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   276f8:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
   276fc:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
   27700:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
   27704:	e1a03005 	mov	r3, r5
   27708:	e30706e4 	movw	r0, #30436	; 0x76e4
   2770c:	e3400002 	movt	r0, #2
   27710:	e1a01003 	mov	r1, r3
   27714:	ebffb800 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   27718:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2771c:	e3530000 	cmp	r3, #0
   27720:	1a000005 	bne	2773c <USBBulkOnlyMassStorageDeviceCommand+0x58>
   27724:	e30f0b10 	movw	r0, #64272	; 0xfb10
   27728:	e3400002 	movt	r0, #2
   2772c:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   27730:	e3401002 	movt	r1, #2
   27734:	e3002249 	movw	r2, #585	; 0x249
   27738:	ebffbc9c 	bl	169b0 <uspi_assertion_failed>

	assert (pCmdBlk != 0);
   2773c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   27740:	e3530000 	cmp	r3, #0
   27744:	1a000005 	bne	27760 <USBBulkOnlyMassStorageDeviceCommand+0x7c>
   27748:	e30f0cd8 	movw	r0, #64728	; 0xfcd8
   2774c:	e3400002 	movt	r0, #2
   27750:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   27754:	e3401002 	movt	r1, #2
   27758:	e300224b 	movw	r2, #587	; 0x24b
   2775c:	ebffbc93 	bl	169b0 <uspi_assertion_failed>
	assert (6 <= nCmdBlkLen && nCmdBlkLen <= 16);
   27760:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27764:	e3530005 	cmp	r3, #5
   27768:	9a000002 	bls	27778 <USBBulkOnlyMassStorageDeviceCommand+0x94>
   2776c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27770:	e3530010 	cmp	r3, #16
   27774:	9a000005 	bls	27790 <USBBulkOnlyMassStorageDeviceCommand+0xac>
   27778:	e30f0ce8 	movw	r0, #64744	; 0xfce8
   2777c:	e3400002 	movt	r0, #2
   27780:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   27784:	e3401002 	movt	r1, #2
   27788:	e3a02f93 	mov	r2, #588	; 0x24c
   2778c:	ebffbc87 	bl	169b0 <uspi_assertion_failed>
	assert (nBufLen == 0 || pBuffer != 0);
   27790:	e59b3004 	ldr	r3, [fp, #4]
   27794:	e3530000 	cmp	r3, #0
   27798:	0a000008 	beq	277c0 <USBBulkOnlyMassStorageDeviceCommand+0xdc>
   2779c:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
   277a0:	e3530000 	cmp	r3, #0
   277a4:	1a000005 	bne	277c0 <USBBulkOnlyMassStorageDeviceCommand+0xdc>
   277a8:	e30f0d0c 	movw	r0, #64780	; 0xfd0c
   277ac:	e3400002 	movt	r0, #2
   277b0:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   277b4:	e3401002 	movt	r1, #2
   277b8:	e300224d 	movw	r2, #589	; 0x24d
   277bc:	ebffbc7b 	bl	169b0 <uspi_assertion_failed>

	TCBW CBW;
	memset (&CBW, 0, sizeof CBW);
   277c0:	e24b3034 	sub	r3, fp, #52	; 0x34
   277c4:	e1a00003 	mov	r0, r3
   277c8:	e3a01000 	mov	r1, #0
   277cc:	e3a0201f 	mov	r2, #31
   277d0:	ebfffa1d 	bl	2604c <uspi_memset>

	CBW.dCWBSignature	   = CBWSIGNATURE;
   277d4:	e3053355 	movw	r3, #21333	; 0x5355
   277d8:	e3443342 	movt	r3, #17218	; 0x4342
   277dc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
	CBW.dCWBTag		   = ++pThis->m_nCWBTag;
   277e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   277e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   277e8:	e2832001 	add	r2, r3, #1
   277ec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   277f0:	e5832040 	str	r2, [r3, #64]	; 0x40
   277f4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   277f8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   277fc:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	CBW.dCBWDataTransferLength = nBufLen;
   27800:	e59b3004 	ldr	r3, [fp, #4]
   27804:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
	CBW.bmCBWFlags		   = bIn ? CBWFLAGS_DATA_IN : 0;
   27808:	e59b3008 	ldr	r3, [fp, #8]
   2780c:	e3530000 	cmp	r3, #0
   27810:	0a000001 	beq	2781c <USBBulkOnlyMassStorageDeviceCommand+0x138>
   27814:	e3a03080 	mov	r3, #128	; 0x80
   27818:	ea000000 	b	27820 <USBBulkOnlyMassStorageDeviceCommand+0x13c>
   2781c:	e3a03000 	mov	r3, #0
   27820:	e54b3028 	strb	r3, [fp, #-40]	; 0xffffffd8
	CBW.bCBWLUN		   = CBWLUN;
   27824:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
   27828:	e7c3301f 	bfc	r3, #0, #4
   2782c:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
	CBW.bCBWCBLength	   = (u8) nCmdBlkLen;
   27830:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27834:	e6ef3073 	uxtb	r3, r3
   27838:	e203301f 	and	r3, r3, #31
   2783c:	e6ef2073 	uxtb	r2, r3
   27840:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
   27844:	e7c43012 	bfi	r3, r2, #0, #5
   27848:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda

	memcpy (CBW.CBWCB, pCmdBlk, nCmdBlkLen);
   2784c:	e24b3034 	sub	r3, fp, #52	; 0x34
   27850:	e283300f 	add	r3, r3, #15
   27854:	e1a00003 	mov	r0, r3
   27858:	e51b104c 	ldr	r1, [fp, #-76]	; 0xffffffb4
   2785c:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
   27860:	ebfffa1d 	bl	260dc <uspi_memcpy>

	TUSBHostController *pHost = USBDeviceGetHost (&pThis->m_USBDevice);
   27864:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27868:	e1a00003 	mov	r0, r3
   2786c:	ebffe1e4 	bl	20004 <USBDeviceGetHost>
   27870:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	assert (pHost != 0);
   27874:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27878:	e3530000 	cmp	r3, #0
   2787c:	1a000005 	bne	27898 <USBBulkOnlyMassStorageDeviceCommand+0x1b4>
   27880:	e30f0d2c 	movw	r0, #64812	; 0xfd2c
   27884:	e3400002 	movt	r0, #2
   27888:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   2788c:	e3401002 	movt	r1, #2
   27890:	e3a02f97 	mov	r2, #604	; 0x25c
   27894:	ebffbc45 	bl	169b0 <uspi_assertion_failed>
	
	if (DWHCIDeviceTransfer (pHost, pThis->m_pEndpointOut, &CBW, sizeof CBW) < 0)
   27898:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2789c:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   278a0:	e24b3034 	sub	r3, fp, #52	; 0x34
   278a4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   278a8:	e1a01002 	mov	r1, r2
   278ac:	e1a02003 	mov	r2, r3
   278b0:	e3a0301f 	mov	r3, #31
   278b4:	ebffc506 	bl	18cd4 <DWHCIDeviceTransfer>
   278b8:	e1a03000 	mov	r3, r0
   278bc:	e3530000 	cmp	r3, #0
   278c0:	aa000007 	bge	278e4 <USBBulkOnlyMassStorageDeviceCommand+0x200>
	{
		LogWrite (FromUmsd, LOG_ERROR, "CBW transfer failed");
   278c4:	e30f0b08 	movw	r0, #64264	; 0xfb08
   278c8:	e3400002 	movt	r0, #2
   278cc:	e3a01001 	mov	r1, #1
   278d0:	e30f2d38 	movw	r2, #64824	; 0xfd38
   278d4:	e3402002 	movt	r2, #2
   278d8:	ebffbc1c 	bl	16950 <LogWrite>

		return -1;
   278dc:	e3e04000 	mvn	r4, #0
   278e0:	ea00005b 	b	27a54 <USBBulkOnlyMassStorageDeviceCommand+0x370>
	}

	int nResult = 0;
   278e4:	e3a03000 	mov	r3, #0
   278e8:	e50b3010 	str	r3, [fp, #-16]
	
	if (nBufLen > 0)
   278ec:	e59b3004 	ldr	r3, [fp, #4]
   278f0:	e3530000 	cmp	r3, #0
   278f4:	0a000018 	beq	2795c <USBBulkOnlyMassStorageDeviceCommand+0x278>
	{
		nResult = DWHCIDeviceTransfer (pHost, bIn ? pThis->m_pEndpointIn : pThis->m_pEndpointOut, pBuffer, nBufLen);
   278f8:	e59b3008 	ldr	r3, [fp, #8]
   278fc:	e3530000 	cmp	r3, #0
   27900:	0a000002 	beq	27910 <USBBulkOnlyMassStorageDeviceCommand+0x22c>
   27904:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27908:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2790c:	ea000001 	b	27918 <USBBulkOnlyMassStorageDeviceCommand+0x234>
   27910:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27914:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   27918:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2791c:	e1a01003 	mov	r1, r3
   27920:	e51b2054 	ldr	r2, [fp, #-84]	; 0xffffffac
   27924:	e59b3004 	ldr	r3, [fp, #4]
   27928:	ebffc4e9 	bl	18cd4 <DWHCIDeviceTransfer>
   2792c:	e50b0010 	str	r0, [fp, #-16]
		if (nResult < 0)
   27930:	e51b3010 	ldr	r3, [fp, #-16]
   27934:	e3530000 	cmp	r3, #0
   27938:	aa000007 	bge	2795c <USBBulkOnlyMassStorageDeviceCommand+0x278>
		{
			LogWrite (FromUmsd, LOG_ERROR, "Data transfer failed");
   2793c:	e30f0b08 	movw	r0, #64264	; 0xfb08
   27940:	e3400002 	movt	r0, #2
   27944:	e3a01001 	mov	r1, #1
   27948:	e30f2d4c 	movw	r2, #64844	; 0xfd4c
   2794c:	e3402002 	movt	r2, #2
   27950:	ebffbbfe 	bl	16950 <LogWrite>

			return -1;
   27954:	e3e04000 	mvn	r4, #0
   27958:	ea00003d 	b	27a54 <USBBulkOnlyMassStorageDeviceCommand+0x370>
		}
	}

	TCSW CSW;

	if (DWHCIDeviceTransfer (pHost, pThis->m_pEndpointIn, &CSW, sizeof CSW) != (int) sizeof CSW)
   2795c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27960:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   27964:	e24b3044 	sub	r3, fp, #68	; 0x44
   27968:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2796c:	e1a01002 	mov	r1, r2
   27970:	e1a02003 	mov	r2, r3
   27974:	e3a0300d 	mov	r3, #13
   27978:	ebffc4d5 	bl	18cd4 <DWHCIDeviceTransfer>
   2797c:	e1a03000 	mov	r3, r0
   27980:	e353000d 	cmp	r3, #13
   27984:	0a000007 	beq	279a8 <USBBulkOnlyMassStorageDeviceCommand+0x2c4>
	{
		LogWrite (FromUmsd, LOG_ERROR, "CSW transfer failed");
   27988:	e30f0b08 	movw	r0, #64264	; 0xfb08
   2798c:	e3400002 	movt	r0, #2
   27990:	e3a01001 	mov	r1, #1
   27994:	e30f2d64 	movw	r2, #64868	; 0xfd64
   27998:	e3402002 	movt	r2, #2
   2799c:	ebffbbeb 	bl	16950 <LogWrite>

		return -1;
   279a0:	e3e04000 	mvn	r4, #0
   279a4:	ea00002a 	b	27a54 <USBBulkOnlyMassStorageDeviceCommand+0x370>
	}

	if (CSW.dCSWSignature != CSWSIGNATURE)
   279a8:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
   279ac:	e3053355 	movw	r3, #21333	; 0x5355
   279b0:	e3453342 	movt	r3, #21314	; 0x5342
   279b4:	e1520003 	cmp	r2, r3
   279b8:	0a000007 	beq	279dc <USBBulkOnlyMassStorageDeviceCommand+0x2f8>
	{
		LogWrite (FromUmsd, LOG_ERROR, "CSW signature is wrong");
   279bc:	e30f0b08 	movw	r0, #64264	; 0xfb08
   279c0:	e3400002 	movt	r0, #2
   279c4:	e3a01001 	mov	r1, #1
   279c8:	e30f2d78 	movw	r2, #64888	; 0xfd78
   279cc:	e3402002 	movt	r2, #2
   279d0:	ebffbbde 	bl	16950 <LogWrite>

		return -1;
   279d4:	e3e04000 	mvn	r4, #0
   279d8:	ea00001d 	b	27a54 <USBBulkOnlyMassStorageDeviceCommand+0x370>
	}

	if (CSW.dCSWTag != pThis->m_nCWBTag)
   279dc:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
   279e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   279e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   279e8:	e1520003 	cmp	r2, r3
   279ec:	0a000007 	beq	27a10 <USBBulkOnlyMassStorageDeviceCommand+0x32c>
	{
		LogWrite (FromUmsd, LOG_ERROR, "CSW tag is wrong");
   279f0:	e30f0b08 	movw	r0, #64264	; 0xfb08
   279f4:	e3400002 	movt	r0, #2
   279f8:	e3a01001 	mov	r1, #1
   279fc:	e30f2d90 	movw	r2, #64912	; 0xfd90
   27a00:	e3402002 	movt	r2, #2
   27a04:	ebffbbd1 	bl	16950 <LogWrite>

		return -1;
   27a08:	e3e04000 	mvn	r4, #0
   27a0c:	ea000010 	b	27a54 <USBBulkOnlyMassStorageDeviceCommand+0x370>
	}

	if (CSW.bCSWStatus != CSWSTATUS_PASSED)
   27a10:	e55b3038 	ldrb	r3, [fp, #-56]	; 0xffffffc8
   27a14:	e3530000 	cmp	r3, #0
   27a18:	0a000001 	beq	27a24 <USBBulkOnlyMassStorageDeviceCommand+0x340>
	{
		return -1;
   27a1c:	e3e04000 	mvn	r4, #0
   27a20:	ea00000b 	b	27a54 <USBBulkOnlyMassStorageDeviceCommand+0x370>
	}

	if (CSW.dCSWDataResidue != 0)
   27a24:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   27a28:	e3530000 	cmp	r3, #0
   27a2c:	0a000007 	beq	27a50 <USBBulkOnlyMassStorageDeviceCommand+0x36c>
	{
		LogWrite (FromUmsd, LOG_ERROR, "Data residue is not 0");
   27a30:	e30f0b08 	movw	r0, #64264	; 0xfb08
   27a34:	e3400002 	movt	r0, #2
   27a38:	e3a01001 	mov	r1, #1
   27a3c:	e30f2da4 	movw	r2, #64932	; 0xfda4
   27a40:	e3402002 	movt	r2, #2
   27a44:	ebffbbc1 	bl	16950 <LogWrite>

		return -1;
   27a48:	e3e04000 	mvn	r4, #0
   27a4c:	ea000000 	b	27a54 <USBBulkOnlyMassStorageDeviceCommand+0x370>
	}

	return nResult;
   27a50:	e51b4010 	ldr	r4, [fp, #-16]
   27a54:	e1a03005 	mov	r3, r5
   27a58:	e30706e4 	movw	r0, #30436	; 0x76e4
   27a5c:	e3400002 	movt	r0, #2
   27a60:	e1a01003 	mov	r1, r3
   27a64:	ebffb77e 	bl	15864 <__cyg_profile_func_exit>
   27a68:	e1a03004 	mov	r3, r4
}
   27a6c:	e1a00003 	mov	r0, r3
   27a70:	e24bd00c 	sub	sp, fp, #12
   27a74:	e8bd8830 	pop	{r4, r5, fp, pc}

00027a78 <USBBulkOnlyMassStorageDeviceReset>:

int USBBulkOnlyMassStorageDeviceReset (TUSBBulkOnlyMassStorageDevice *pThis)
{
   27a78:	e92d4830 	push	{r4, r5, fp, lr}
   27a7c:	e28db00c 	add	fp, sp, #12
   27a80:	e24dd020 	sub	sp, sp, #32
   27a84:	e1a0500e 	mov	r5, lr
   27a88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   27a8c:	e1a03005 	mov	r3, r5
   27a90:	e3070a78 	movw	r0, #31352	; 0x7a78
   27a94:	e3400002 	movt	r0, #2
   27a98:	e1a01003 	mov	r1, r3
   27a9c:	ebffb71e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   27aa0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27aa4:	e3530000 	cmp	r3, #0
   27aa8:	1a000005 	bne	27ac4 <USBBulkOnlyMassStorageDeviceReset+0x4c>
   27aac:	e30f0b10 	movw	r0, #64272	; 0xfb10
   27ab0:	e3400002 	movt	r0, #2
   27ab4:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   27ab8:	e3401002 	movt	r1, #2
   27abc:	e300229a 	movw	r2, #666	; 0x29a
   27ac0:	ebffbbba 	bl	169b0 <uspi_assertion_failed>

	TUSBHostController *pHost = USBDeviceGetHost (&pThis->m_USBDevice);
   27ac4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27ac8:	e1a00003 	mov	r0, r3
   27acc:	ebffe14c 	bl	20004 <USBDeviceGetHost>
   27ad0:	e50b0010 	str	r0, [fp, #-16]
	assert (pHost != 0);
   27ad4:	e51b3010 	ldr	r3, [fp, #-16]
   27ad8:	e3530000 	cmp	r3, #0
   27adc:	1a000005 	bne	27af8 <USBBulkOnlyMassStorageDeviceReset+0x80>
   27ae0:	e30f0d2c 	movw	r0, #64812	; 0xfd2c
   27ae4:	e3400002 	movt	r0, #2
   27ae8:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
   27aec:	e3401002 	movt	r1, #2
   27af0:	e300229d 	movw	r2, #669	; 0x29d
   27af4:	ebffbbad 	bl	169b0 <uspi_assertion_failed>
	
	if (DWHCIDeviceControlMessage (pHost, USBDeviceGetEndpoint0 (&pThis->m_USBDevice), 0x21, 0xFF, 0, 0x00, 0, 0) < 0)
   27af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27afc:	e1a00003 	mov	r0, r3
   27b00:	ebffe117 	bl	1ff64 <USBDeviceGetEndpoint0>
   27b04:	e1a02000 	mov	r2, r0
   27b08:	e3a03000 	mov	r3, #0
   27b0c:	e58d3000 	str	r3, [sp]
   27b10:	e3a03000 	mov	r3, #0
   27b14:	e58d3004 	str	r3, [sp, #4]
   27b18:	e3a03000 	mov	r3, #0
   27b1c:	e58d3008 	str	r3, [sp, #8]
   27b20:	e3a03000 	mov	r3, #0
   27b24:	e58d300c 	str	r3, [sp, #12]
   27b28:	e51b0010 	ldr	r0, [fp, #-16]
   27b2c:	e1a01002 	mov	r1, r2
   27b30:	e3a02021 	mov	r2, #33	; 0x21
   27b34:	e3a030ff 	mov	r3, #255	; 0xff
   27b38:	ebffc409 	bl	18b64 <DWHCIDeviceControlMessage>
   27b3c:	e1a03000 	mov	r3, r0
   27b40:	e3530000 	cmp	r3, #0
   27b44:	aa000007 	bge	27b68 <USBBulkOnlyMassStorageDeviceReset+0xf0>
	{
		LogWrite (FromUmsd, LOG_DEBUG, "Cannot reset device");
   27b48:	e30f0b08 	movw	r0, #64264	; 0xfb08
   27b4c:	e3400002 	movt	r0, #2
   27b50:	e3a01004 	mov	r1, #4
   27b54:	e30f2dbc 	movw	r2, #64956	; 0xfdbc
   27b58:	e3402002 	movt	r2, #2
   27b5c:	ebffbb7b 	bl	16950 <LogWrite>

		return -1;
   27b60:	e3e04000 	mvn	r4, #0
   27b64:	ea000040 	b	27c6c <USBBulkOnlyMassStorageDeviceReset+0x1f4>
	}

	if (DWHCIDeviceControlMessage (pHost, USBDeviceGetEndpoint0 (&pThis->m_USBDevice), 0x02, 1, 0, 1, 0, 0) < 0)
   27b68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27b6c:	e1a00003 	mov	r0, r3
   27b70:	ebffe0fb 	bl	1ff64 <USBDeviceGetEndpoint0>
   27b74:	e1a02000 	mov	r2, r0
   27b78:	e3a03000 	mov	r3, #0
   27b7c:	e58d3000 	str	r3, [sp]
   27b80:	e3a03001 	mov	r3, #1
   27b84:	e58d3004 	str	r3, [sp, #4]
   27b88:	e3a03000 	mov	r3, #0
   27b8c:	e58d3008 	str	r3, [sp, #8]
   27b90:	e3a03000 	mov	r3, #0
   27b94:	e58d300c 	str	r3, [sp, #12]
   27b98:	e51b0010 	ldr	r0, [fp, #-16]
   27b9c:	e1a01002 	mov	r1, r2
   27ba0:	e3a02002 	mov	r2, #2
   27ba4:	e3a03001 	mov	r3, #1
   27ba8:	ebffc3ed 	bl	18b64 <DWHCIDeviceControlMessage>
   27bac:	e1a03000 	mov	r3, r0
   27bb0:	e3530000 	cmp	r3, #0
   27bb4:	aa000007 	bge	27bd8 <USBBulkOnlyMassStorageDeviceReset+0x160>
	{
		LogWrite (FromUmsd, LOG_DEBUG, "Cannot clear halt on endpoint 1");
   27bb8:	e30f0b08 	movw	r0, #64264	; 0xfb08
   27bbc:	e3400002 	movt	r0, #2
   27bc0:	e3a01004 	mov	r1, #4
   27bc4:	e30f2dd0 	movw	r2, #64976	; 0xfdd0
   27bc8:	e3402002 	movt	r2, #2
   27bcc:	ebffbb5f 	bl	16950 <LogWrite>

		return -1;
   27bd0:	e3e04000 	mvn	r4, #0
   27bd4:	ea000024 	b	27c6c <USBBulkOnlyMassStorageDeviceReset+0x1f4>
	}

	if (DWHCIDeviceControlMessage (pHost, USBDeviceGetEndpoint0 (&pThis->m_USBDevice), 0x02, 1, 0, 2, 0, 0) < 0)
   27bd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27bdc:	e1a00003 	mov	r0, r3
   27be0:	ebffe0df 	bl	1ff64 <USBDeviceGetEndpoint0>
   27be4:	e1a02000 	mov	r2, r0
   27be8:	e3a03000 	mov	r3, #0
   27bec:	e58d3000 	str	r3, [sp]
   27bf0:	e3a03002 	mov	r3, #2
   27bf4:	e58d3004 	str	r3, [sp, #4]
   27bf8:	e3a03000 	mov	r3, #0
   27bfc:	e58d3008 	str	r3, [sp, #8]
   27c00:	e3a03000 	mov	r3, #0
   27c04:	e58d300c 	str	r3, [sp, #12]
   27c08:	e51b0010 	ldr	r0, [fp, #-16]
   27c0c:	e1a01002 	mov	r1, r2
   27c10:	e3a02002 	mov	r2, #2
   27c14:	e3a03001 	mov	r3, #1
   27c18:	ebffc3d1 	bl	18b64 <DWHCIDeviceControlMessage>
   27c1c:	e1a03000 	mov	r3, r0
   27c20:	e3530000 	cmp	r3, #0
   27c24:	aa000007 	bge	27c48 <USBBulkOnlyMassStorageDeviceReset+0x1d0>
	{
		LogWrite (FromUmsd, LOG_DEBUG, "Cannot clear halt on endpoint 2");
   27c28:	e30f0b08 	movw	r0, #64264	; 0xfb08
   27c2c:	e3400002 	movt	r0, #2
   27c30:	e3a01004 	mov	r1, #4
   27c34:	e30f2df0 	movw	r2, #65008	; 0xfdf0
   27c38:	e3402002 	movt	r2, #2
   27c3c:	ebffbb43 	bl	16950 <LogWrite>

		return -1;
   27c40:	e3e04000 	mvn	r4, #0
   27c44:	ea000008 	b	27c6c <USBBulkOnlyMassStorageDeviceReset+0x1f4>
	}

	USBEndpointResetPID (pThis->m_pEndpointIn);
   27c48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27c4c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   27c50:	e1a00003 	mov	r0, r3
   27c54:	ebffe5c3 	bl	21368 <USBEndpointResetPID>
	USBEndpointResetPID (pThis->m_pEndpointOut);
   27c58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27c5c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   27c60:	e1a00003 	mov	r0, r3
   27c64:	ebffe5bf 	bl	21368 <USBEndpointResetPID>

	return 0;
   27c68:	e3a04000 	mov	r4, #0
   27c6c:	e1a03005 	mov	r3, r5
   27c70:	e3070a78 	movw	r0, #31352	; 0x7a78
   27c74:	e3400002 	movt	r0, #2
   27c78:	e1a01003 	mov	r1, r3
   27c7c:	ebffb6f8 	bl	15864 <__cyg_profile_func_exit>
   27c80:	e1a03004 	mov	r3, r4
}
   27c84:	e1a00003 	mov	r0, r3
   27c88:	e24bd00c 	sub	sp, fp, #12
   27c8c:	e8bd8830 	pop	{r4, r5, fp, pc}

00027c90 <DWHCIFrameSchedulerNonPeriodic>:
	StateUnknown
}
TFrameSchedulerState;

void DWHCIFrameSchedulerNonPeriodic (TDWHCIFrameSchedulerNonPeriodic *pThis)
{
   27c90:	e92d4810 	push	{r4, fp, lr}
   27c94:	e28db008 	add	fp, sp, #8
   27c98:	e24dd014 	sub	sp, sp, #20
   27c9c:	e1a0400e 	mov	r4, lr
   27ca0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   27ca4:	e1a03004 	mov	r3, r4
   27ca8:	e3070c90 	movw	r0, #31888	; 0x7c90
   27cac:	e3400002 	movt	r0, #2
   27cb0:	e1a01003 	mov	r1, r3
   27cb4:	ebffb698 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   27cb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27cbc:	e3530000 	cmp	r3, #0
   27cc0:	1a000005 	bne	27cdc <DWHCIFrameSchedulerNonPeriodic+0x4c>
   27cc4:	e30f0e10 	movw	r0, #65040	; 0xfe10
   27cc8:	e3400002 	movt	r0, #2
   27ccc:	e30f1e1c 	movw	r1, #65052	; 0xfe1c
   27cd0:	e3401002 	movt	r1, #2
   27cd4:	e3a02029 	mov	r2, #41	; 0x29
   27cd8:	ebffbb34 	bl	169b0 <uspi_assertion_failed>

	TDWHCIFrameScheduler *pBase = (TDWHCIFrameScheduler *) pThis;
   27cdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27ce0:	e50b3010 	str	r3, [fp, #-16]

	pBase->_DWHCIFrameScheduler = _DWHCIFrameSchedulerNonPeriodic;
   27ce4:	e51b2010 	ldr	r2, [fp, #-16]
   27ce8:	e3073d6c 	movw	r3, #32108	; 0x7d6c
   27cec:	e3403002 	movt	r3, #2
   27cf0:	e5823000 	str	r3, [r2]
	pBase->StartSplit = DWHCIFrameSchedulerNonPeriodicStartSplit;
   27cf4:	e51b2010 	ldr	r2, [fp, #-16]
   27cf8:	e3073de8 	movw	r3, #32232	; 0x7de8
   27cfc:	e3403002 	movt	r3, #2
   27d00:	e5823004 	str	r3, [r2, #4]
	pBase->CompleteSplit = DWHCIFrameSchedulerNonPeriodicCompleteSplit;
   27d04:	e51b2010 	ldr	r2, [fp, #-16]
   27d08:	e3073e64 	movw	r3, #32356	; 0x7e64
   27d0c:	e3403002 	movt	r3, #2
   27d10:	e5823008 	str	r3, [r2, #8]
	pBase->TransactionComplete = DWHCIFrameSchedulerNonPeriodicTransactionComplete;
   27d14:	e51b2010 	ldr	r2, [fp, #-16]
   27d18:	e3073f6c 	movw	r3, #32620	; 0x7f6c
   27d1c:	e3403002 	movt	r3, #2
   27d20:	e582300c 	str	r3, [r2, #12]
	pBase->WaitForFrame = DWHCIFrameSchedulerNonPeriodicWaitForFrame;
   27d24:	e51b2010 	ldr	r2, [fp, #-16]
   27d28:	e3083150 	movw	r3, #33104	; 0x8150
   27d2c:	e3403002 	movt	r3, #2
   27d30:	e5823010 	str	r3, [r2, #16]
	pBase->IsOddFrame = DWHCIFrameSchedulerNonPeriodicIsOddFrame;
   27d34:	e51b2010 	ldr	r2, [fp, #-16]
   27d38:	e3083194 	movw	r3, #33172	; 0x8194
   27d3c:	e3403002 	movt	r3, #2
   27d40:	e5823014 	str	r3, [r2, #20]

	pThis->m_nState = StateUnknown;
   27d44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27d48:	e3a02006 	mov	r2, #6
   27d4c:	e5832018 	str	r2, [r3, #24]
   27d50:	e1a03004 	mov	r3, r4
   27d54:	e3070c90 	movw	r0, #31888	; 0x7c90
   27d58:	e3400002 	movt	r0, #2
   27d5c:	e1a01003 	mov	r1, r3
   27d60:	ebffb6bf 	bl	15864 <__cyg_profile_func_exit>
}
   27d64:	e24bd008 	sub	sp, fp, #8
   27d68:	e8bd8810 	pop	{r4, fp, pc}

00027d6c <_DWHCIFrameSchedulerNonPeriodic>:

void _DWHCIFrameSchedulerNonPeriodic (TDWHCIFrameScheduler *pBase)
{
   27d6c:	e92d4810 	push	{r4, fp, lr}
   27d70:	e28db008 	add	fp, sp, #8
   27d74:	e24dd014 	sub	sp, sp, #20
   27d78:	e1a0400e 	mov	r4, lr
   27d7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   27d80:	e1a03004 	mov	r3, r4
   27d84:	e3070d6c 	movw	r0, #32108	; 0x7d6c
   27d88:	e3400002 	movt	r0, #2
   27d8c:	e1a01003 	mov	r1, r3
   27d90:	ebffb661 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerNonPeriodic *pThis = (TDWHCIFrameSchedulerNonPeriodic *) pBase;
   27d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27d98:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   27d9c:	e51b3010 	ldr	r3, [fp, #-16]
   27da0:	e3530000 	cmp	r3, #0
   27da4:	1a000005 	bne	27dc0 <_DWHCIFrameSchedulerNonPeriodic+0x54>
   27da8:	e30f0e10 	movw	r0, #65040	; 0xfe10
   27dac:	e3400002 	movt	r0, #2
   27db0:	e30f1e1c 	movw	r1, #65052	; 0xfe1c
   27db4:	e3401002 	movt	r1, #2
   27db8:	e3a0203a 	mov	r2, #58	; 0x3a
   27dbc:	ebffbafb 	bl	169b0 <uspi_assertion_failed>

	pThis->m_nState = StateUnknown;
   27dc0:	e51b3010 	ldr	r3, [fp, #-16]
   27dc4:	e3a02006 	mov	r2, #6
   27dc8:	e5832018 	str	r2, [r3, #24]
   27dcc:	e1a03004 	mov	r3, r4
   27dd0:	e3070d6c 	movw	r0, #32108	; 0x7d6c
   27dd4:	e3400002 	movt	r0, #2
   27dd8:	e1a01003 	mov	r1, r3
   27ddc:	ebffb6a0 	bl	15864 <__cyg_profile_func_exit>
}
   27de0:	e24bd008 	sub	sp, fp, #8
   27de4:	e8bd8810 	pop	{r4, fp, pc}

00027de8 <DWHCIFrameSchedulerNonPeriodicStartSplit>:

void DWHCIFrameSchedulerNonPeriodicStartSplit (TDWHCIFrameScheduler *pBase)
{
   27de8:	e92d4810 	push	{r4, fp, lr}
   27dec:	e28db008 	add	fp, sp, #8
   27df0:	e24dd014 	sub	sp, sp, #20
   27df4:	e1a0400e 	mov	r4, lr
   27df8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   27dfc:	e1a03004 	mov	r3, r4
   27e00:	e3070de8 	movw	r0, #32232	; 0x7de8
   27e04:	e3400002 	movt	r0, #2
   27e08:	e1a01003 	mov	r1, r3
   27e0c:	ebffb642 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerNonPeriodic *pThis = (TDWHCIFrameSchedulerNonPeriodic *) pBase;
   27e10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27e14:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   27e18:	e51b3010 	ldr	r3, [fp, #-16]
   27e1c:	e3530000 	cmp	r3, #0
   27e20:	1a000005 	bne	27e3c <DWHCIFrameSchedulerNonPeriodicStartSplit+0x54>
   27e24:	e30f0e10 	movw	r0, #65040	; 0xfe10
   27e28:	e3400002 	movt	r0, #2
   27e2c:	e30f1e1c 	movw	r1, #65052	; 0xfe1c
   27e30:	e3401002 	movt	r1, #2
   27e34:	e3a02042 	mov	r2, #66	; 0x42
   27e38:	ebffbadc 	bl	169b0 <uspi_assertion_failed>

	pThis->m_nState = StateStartSplit;
   27e3c:	e51b3010 	ldr	r3, [fp, #-16]
   27e40:	e3a02000 	mov	r2, #0
   27e44:	e5832018 	str	r2, [r3, #24]
   27e48:	e1a03004 	mov	r3, r4
   27e4c:	e3070de8 	movw	r0, #32232	; 0x7de8
   27e50:	e3400002 	movt	r0, #2
   27e54:	e1a01003 	mov	r1, r3
   27e58:	ebffb681 	bl	15864 <__cyg_profile_func_exit>
}
   27e5c:	e24bd008 	sub	sp, fp, #8
   27e60:	e8bd8810 	pop	{r4, fp, pc}

00027e64 <DWHCIFrameSchedulerNonPeriodicCompleteSplit>:

boolean DWHCIFrameSchedulerNonPeriodicCompleteSplit (TDWHCIFrameScheduler *pBase)
{
   27e64:	e92d4830 	push	{r4, r5, fp, lr}
   27e68:	e28db00c 	add	fp, sp, #12
   27e6c:	e24dd010 	sub	sp, sp, #16
   27e70:	e1a0500e 	mov	r5, lr
   27e74:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   27e78:	e1a03005 	mov	r3, r5
   27e7c:	e3070e64 	movw	r0, #32356	; 0x7e64
   27e80:	e3400002 	movt	r0, #2
   27e84:	e1a01003 	mov	r1, r3
   27e88:	ebffb623 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerNonPeriodic *pThis = (TDWHCIFrameSchedulerNonPeriodic *) pBase;
   27e8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27e90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	assert (pThis != 0);
   27e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27e98:	e3530000 	cmp	r3, #0
   27e9c:	1a000005 	bne	27eb8 <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0x54>
   27ea0:	e30f0e10 	movw	r0, #65040	; 0xfe10
   27ea4:	e3400002 	movt	r0, #2
   27ea8:	e30f1e1c 	movw	r1, #65052	; 0xfe1c
   27eac:	e3401002 	movt	r1, #2
   27eb0:	e3a0204a 	mov	r2, #74	; 0x4a
   27eb4:	ebffbabd 	bl	169b0 <uspi_assertion_failed>

	boolean bResult = FALSE;
   27eb8:	e3a03000 	mov	r3, #0
   27ebc:	e50b3010 	str	r3, [fp, #-16]

	switch (pThis->m_nState)
   27ec0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27ec4:	e5933018 	ldr	r3, [r3, #24]
   27ec8:	e2433001 	sub	r3, r3, #1
   27ecc:	e3530004 	cmp	r3, #4
   27ed0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   27ed4:	ea000012 	b	27f24 <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0xc0>
   27ed8:	00027eec 	andeq	r7, r2, ip, ror #29
   27edc:	00027f10 	andeq	r7, r2, r0, lsl pc
   27ee0:	00027f10 	andeq	r7, r2, r0, lsl pc
   27ee4:	00027f40 	andeq	r7, r2, r0, asr #30
   27ee8:	00027f40 	andeq	r7, r2, r0, asr #30
	{
	case StateStartSplitComplete:
		pThis->m_nState = StateCompleteSplit;
   27eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27ef0:	e3a02002 	mov	r2, #2
   27ef4:	e5832018 	str	r2, [r3, #24]
		pThis->m_nTries = 3;
   27ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27efc:	e3a02003 	mov	r2, #3
   27f00:	e583201c 	str	r2, [r3, #28]
		bResult = TRUE;
   27f04:	e3a03001 	mov	r3, #1
   27f08:	e50b3010 	str	r3, [fp, #-16]
		break;
   27f0c:	ea00000c 	b	27f44 <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0xe0>

	case StateCompleteSplit:
	case StateCompleteRetry:
		usDelay (5 * uFRAME);
   27f10:	e3000271 	movw	r0, #625	; 0x271
   27f14:	ebffb9ae 	bl	165d4 <usDelay>
		bResult = TRUE;
   27f18:	e3a03001 	mov	r3, #1
   27f1c:	e50b3010 	str	r3, [fp, #-16]
		break;
   27f20:	ea000007 	b	27f44 <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0xe0>
	case StateCompleteSplitComplete:
	case StateCompleteSplitFailed:
		break;

	default:
		assert (0);
   27f24:	e30f0e84 	movw	r0, #65156	; 0xfe84
   27f28:	e3400002 	movt	r0, #2
   27f2c:	e30f1e1c 	movw	r1, #65052	; 0xfe1c
   27f30:	e3401002 	movt	r1, #2
   27f34:	e3a02061 	mov	r2, #97	; 0x61
   27f38:	ebffba9c 	bl	169b0 <uspi_assertion_failed>
		break;
   27f3c:	ea000000 	b	27f44 <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0xe0>
		bResult = TRUE;
		break;

	case StateCompleteSplitComplete:
	case StateCompleteSplitFailed:
		break;
   27f40:	e1a00000 	nop			; (mov r0, r0)
	default:
		assert (0);
		break;
	}

	return bResult;
   27f44:	e51b4010 	ldr	r4, [fp, #-16]
   27f48:	e1a03005 	mov	r3, r5
   27f4c:	e3070e64 	movw	r0, #32356	; 0x7e64
   27f50:	e3400002 	movt	r0, #2
   27f54:	e1a01003 	mov	r1, r3
   27f58:	ebffb641 	bl	15864 <__cyg_profile_func_exit>
   27f5c:	e1a03004 	mov	r3, r4
}
   27f60:	e1a00003 	mov	r0, r3
   27f64:	e24bd00c 	sub	sp, fp, #12
   27f68:	e8bd8830 	pop	{r4, r5, fp, pc}

00027f6c <DWHCIFrameSchedulerNonPeriodicTransactionComplete>:

void DWHCIFrameSchedulerNonPeriodicTransactionComplete (TDWHCIFrameScheduler *pBase, u32 nStatus)
{
   27f6c:	e92d4810 	push	{r4, fp, lr}
   27f70:	e28db008 	add	fp, sp, #8
   27f74:	e24dd014 	sub	sp, sp, #20
   27f78:	e1a0400e 	mov	r4, lr
   27f7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   27f80:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   27f84:	e1a03004 	mov	r3, r4
   27f88:	e3070f6c 	movw	r0, #32620	; 0x7f6c
   27f8c:	e3400002 	movt	r0, #2
   27f90:	e1a01003 	mov	r1, r3
   27f94:	ebffb5e0 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerNonPeriodic *pThis = (TDWHCIFrameSchedulerNonPeriodic *) pBase;
   27f98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27f9c:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   27fa0:	e51b3010 	ldr	r3, [fp, #-16]
   27fa4:	e3530000 	cmp	r3, #0
   27fa8:	1a000005 	bne	27fc4 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x58>
   27fac:	e30f0e10 	movw	r0, #65040	; 0xfe10
   27fb0:	e3400002 	movt	r0, #2
   27fb4:	e30f1e1c 	movw	r1, #65052	; 0xfe1c
   27fb8:	e3401002 	movt	r1, #2
   27fbc:	e3a0206b 	mov	r2, #107	; 0x6b
   27fc0:	ebffba7a 	bl	169b0 <uspi_assertion_failed>

	switch (pThis->m_nState)
   27fc4:	e51b3010 	ldr	r3, [fp, #-16]
   27fc8:	e5933018 	ldr	r3, [r3, #24]
   27fcc:	e3530000 	cmp	r3, #0
   27fd0:	0a000003 	beq	27fe4 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x78>
   27fd4:	e2433002 	sub	r3, r3, #2
   27fd8:	e3530001 	cmp	r3, #1
   27fdc:	8a00004d 	bhi	28118 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x1ac>
   27fe0:	ea00000d 	b	2801c <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0xb0>
	{
	case StateStartSplit:
		assert (nStatus & DWHCI_HOST_CHAN_INT_ACK);
   27fe4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27fe8:	e2033020 	and	r3, r3, #32
   27fec:	e3530000 	cmp	r3, #0
   27ff0:	1a000005 	bne	2800c <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0xa0>
   27ff4:	e30f0e88 	movw	r0, #65160	; 0xfe88
   27ff8:	e3400002 	movt	r0, #2
   27ffc:	e30f1e1c 	movw	r1, #65052	; 0xfe1c
   28000:	e3401002 	movt	r1, #2
   28004:	e3a02070 	mov	r2, #112	; 0x70
   28008:	ebffba68 	bl	169b0 <uspi_assertion_failed>
		pThis->m_nState = StateStartSplitComplete;
   2800c:	e51b3010 	ldr	r3, [fp, #-16]
   28010:	e3a02001 	mov	r2, #1
   28014:	e5832018 	str	r2, [r3, #24]
		break;
   28018:	ea000045 	b	28134 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x1c8>

	case StateCompleteSplit:
	case StateCompleteRetry:
		if (nStatus & DWHCI_HOST_CHAN_INT_XFER_COMPLETE)
   2801c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28020:	e2033001 	and	r3, r3, #1
   28024:	e3530000 	cmp	r3, #0
   28028:	0a000003 	beq	2803c <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0xd0>
		{
			pThis->m_nState = StateCompleteSplitComplete;
   2802c:	e51b3010 	ldr	r3, [fp, #-16]
   28030:	e3a02004 	mov	r2, #4
   28034:	e5832018 	str	r2, [r3, #24]
   28038:	ea000035 	b	28114 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x1a8>
		}
		else if (nStatus & (DWHCI_HOST_CHAN_INT_NYET | DWHCI_HOST_CHAN_INT_ACK))
   2803c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28040:	e2033060 	and	r3, r3, #96	; 0x60
   28044:	e3530000 	cmp	r3, #0
   28048:	0a00000e 	beq	28088 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x11c>
		{
			if (pThis->m_nTries-- == 0)
   2804c:	e51b3010 	ldr	r3, [fp, #-16]
   28050:	e593301c 	ldr	r3, [r3, #28]
   28054:	e2431001 	sub	r1, r3, #1
   28058:	e51b2010 	ldr	r2, [fp, #-16]
   2805c:	e582101c 	str	r1, [r2, #28]
   28060:	e3530000 	cmp	r3, #0
   28064:	1a000003 	bne	28078 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x10c>
			{
				pThis->m_nState = StateCompleteSplitFailed;
   28068:	e51b3010 	ldr	r3, [fp, #-16]
   2806c:	e3a02005 	mov	r2, #5
   28070:	e5832018 	str	r2, [r3, #24]
   28074:	ea000026 	b	28114 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x1a8>
			}
			else
			{
				pThis->m_nState = StateCompleteRetry;
   28078:	e51b3010 	ldr	r3, [fp, #-16]
   2807c:	e3a02003 	mov	r2, #3
   28080:	e5832018 	str	r2, [r3, #24]
		else
		{
			LogWrite ("dwsched", LOG_ERROR, "Invalid status 0x%X", nStatus);
			assert (0);
		}
		break;
   28084:	ea00002a 	b	28134 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x1c8>
			else
			{
				pThis->m_nState = StateCompleteRetry;
			}
		}
		else if (nStatus & DWHCI_HOST_CHAN_INT_NAK)
   28088:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2808c:	e2033010 	and	r3, r3, #16
   28090:	e3530000 	cmp	r3, #0
   28094:	0a000010 	beq	280dc <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x170>
		{
			if (pThis->m_nTries-- == 0)
   28098:	e51b3010 	ldr	r3, [fp, #-16]
   2809c:	e593301c 	ldr	r3, [r3, #28]
   280a0:	e2431001 	sub	r1, r3, #1
   280a4:	e51b2010 	ldr	r2, [fp, #-16]
   280a8:	e582101c 	str	r1, [r2, #28]
   280ac:	e3530000 	cmp	r3, #0
   280b0:	1a000005 	bne	280cc <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x160>
			{
				usDelay (5 * uFRAME);
   280b4:	e3000271 	movw	r0, #625	; 0x271
   280b8:	ebffb945 	bl	165d4 <usDelay>
				pThis->m_nState = StateCompleteSplitFailed;
   280bc:	e51b3010 	ldr	r3, [fp, #-16]
   280c0:	e3a02005 	mov	r2, #5
   280c4:	e5832018 	str	r2, [r3, #24]
   280c8:	ea000011 	b	28114 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x1a8>
			}
			else
			{
				pThis->m_nState = StateCompleteRetry;
   280cc:	e51b3010 	ldr	r3, [fp, #-16]
   280d0:	e3a02003 	mov	r2, #3
   280d4:	e5832018 	str	r2, [r3, #24]
		else
		{
			LogWrite ("dwsched", LOG_ERROR, "Invalid status 0x%X", nStatus);
			assert (0);
		}
		break;
   280d8:	ea000015 	b	28134 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x1c8>
				pThis->m_nState = StateCompleteRetry;
			}
		}
		else
		{
			LogWrite ("dwsched", LOG_ERROR, "Invalid status 0x%X", nStatus);
   280dc:	e30f0eac 	movw	r0, #65196	; 0xfeac
   280e0:	e3400002 	movt	r0, #2
   280e4:	e3a01001 	mov	r1, #1
   280e8:	e30f2eb4 	movw	r2, #65204	; 0xfeb4
   280ec:	e3402002 	movt	r2, #2
   280f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   280f4:	ebffba15 	bl	16950 <LogWrite>
			assert (0);
   280f8:	e30f0e84 	movw	r0, #65156	; 0xfe84
   280fc:	e3400002 	movt	r0, #2
   28100:	e30f1e1c 	movw	r1, #65052	; 0xfe1c
   28104:	e3401002 	movt	r1, #2
   28108:	e3a02094 	mov	r2, #148	; 0x94
   2810c:	ebffba27 	bl	169b0 <uspi_assertion_failed>
		}
		break;
   28110:	ea000007 	b	28134 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x1c8>
   28114:	ea000006 	b	28134 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x1c8>
		
	default:
		assert (0);
   28118:	e30f0e84 	movw	r0, #65156	; 0xfe84
   2811c:	e3400002 	movt	r0, #2
   28120:	e30f1e1c 	movw	r1, #65052	; 0xfe1c
   28124:	e3401002 	movt	r1, #2
   28128:	e3a02099 	mov	r2, #153	; 0x99
   2812c:	ebffba1f 	bl	169b0 <uspi_assertion_failed>
		break;
   28130:	e1a00000 	nop			; (mov r0, r0)
   28134:	e1a03004 	mov	r3, r4
   28138:	e3070f6c 	movw	r0, #32620	; 0x7f6c
   2813c:	e3400002 	movt	r0, #2
   28140:	e1a01003 	mov	r1, r3
   28144:	ebffb5c6 	bl	15864 <__cyg_profile_func_exit>
	}
}
   28148:	e24bd008 	sub	sp, fp, #8
   2814c:	e8bd8810 	pop	{r4, fp, pc}

00028150 <DWHCIFrameSchedulerNonPeriodicWaitForFrame>:

void DWHCIFrameSchedulerNonPeriodicWaitForFrame (TDWHCIFrameScheduler *pBase)
{
   28150:	e92d4810 	push	{r4, fp, lr}
   28154:	e28db008 	add	fp, sp, #8
   28158:	e24dd00c 	sub	sp, sp, #12
   2815c:	e1a0400e 	mov	r4, lr
   28160:	e50b0010 	str	r0, [fp, #-16]
   28164:	e1a03004 	mov	r3, r4
   28168:	e3080150 	movw	r0, #33104	; 0x8150
   2816c:	e3400002 	movt	r0, #2
   28170:	e1a01003 	mov	r1, r3
   28174:	ebffb568 	bl	1571c <__cyg_profile_func_enter>
   28178:	e1a03004 	mov	r3, r4
   2817c:	e3080150 	movw	r0, #33104	; 0x8150
   28180:	e3400002 	movt	r0, #2
   28184:	e1a01003 	mov	r1, r3
   28188:	ebffb5b5 	bl	15864 <__cyg_profile_func_exit>
}
   2818c:	e24bd008 	sub	sp, fp, #8
   28190:	e8bd8810 	pop	{r4, fp, pc}

00028194 <DWHCIFrameSchedulerNonPeriodicIsOddFrame>:

boolean DWHCIFrameSchedulerNonPeriodicIsOddFrame (TDWHCIFrameScheduler *pBase)
{
   28194:	e92d4830 	push	{r4, r5, fp, lr}
   28198:	e28db00c 	add	fp, sp, #12
   2819c:	e24dd008 	sub	sp, sp, #8
   281a0:	e1a0500e 	mov	r5, lr
   281a4:	e50b0010 	str	r0, [fp, #-16]
   281a8:	e1a03005 	mov	r3, r5
   281ac:	e3080194 	movw	r0, #33172	; 0x8194
   281b0:	e3400002 	movt	r0, #2
   281b4:	e1a01003 	mov	r1, r3
   281b8:	ebffb557 	bl	1571c <__cyg_profile_func_enter>
	return FALSE;
   281bc:	e3a04000 	mov	r4, #0
   281c0:	e1a03005 	mov	r3, r5
   281c4:	e3080194 	movw	r0, #33172	; 0x8194
   281c8:	e3400002 	movt	r0, #2
   281cc:	e1a01003 	mov	r1, r3
   281d0:	ebffb5a3 	bl	15864 <__cyg_profile_func_exit>
   281d4:	e1a03004 	mov	r3, r4
}
   281d8:	e1a00003 	mov	r0, r3
   281dc:	e24bd00c 	sub	sp, fp, #12
   281e0:	e8bd8830 	pop	{r4, r5, fp, pc}

000281e4 <DWHCIFrameSchedulerPeriodic>:
	StateUnknown
}
TFrameSchedulerState;

void DWHCIFrameSchedulerPeriodic (TDWHCIFrameSchedulerPeriodic *pThis)
{
   281e4:	e92d4810 	push	{r4, fp, lr}
   281e8:	e28db008 	add	fp, sp, #8
   281ec:	e24dd014 	sub	sp, sp, #20
   281f0:	e1a0400e 	mov	r4, lr
   281f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   281f8:	e1a03004 	mov	r3, r4
   281fc:	e30801e4 	movw	r0, #33252	; 0x81e4
   28200:	e3400002 	movt	r0, #2
   28204:	e1a01003 	mov	r1, r3
   28208:	ebffb543 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2820c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28210:	e3530000 	cmp	r3, #0
   28214:	1a000005 	bne	28230 <DWHCIFrameSchedulerPeriodic+0x4c>
   28218:	e30f0ec8 	movw	r0, #65224	; 0xfec8
   2821c:	e3400002 	movt	r0, #2
   28220:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   28224:	e3401002 	movt	r1, #2
   28228:	e3a0202c 	mov	r2, #44	; 0x2c
   2822c:	ebffb9df 	bl	169b0 <uspi_assertion_failed>

	TDWHCIFrameScheduler *pBase = (TDWHCIFrameScheduler *) pThis;
   28230:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28234:	e50b3010 	str	r3, [fp, #-16]

	pBase->_DWHCIFrameScheduler = _DWHCIFrameSchedulerPeriodic;
   28238:	e51b2010 	ldr	r2, [fp, #-16]
   2823c:	e30832cc 	movw	r3, #33484	; 0x82cc
   28240:	e3403002 	movt	r3, #2
   28244:	e5823000 	str	r3, [r2]
	pBase->StartSplit = DWHCIFrameSchedulerPeriodicStartSplit;
   28248:	e51b2010 	ldr	r2, [fp, #-16]
   2824c:	e3083348 	movw	r3, #33608	; 0x8348
   28250:	e3403002 	movt	r3, #2
   28254:	e5823004 	str	r3, [r2, #4]
	pBase->CompleteSplit = DWHCIFrameSchedulerPeriodicCompleteSplit;
   28258:	e51b2010 	ldr	r2, [fp, #-16]
   2825c:	e30833d0 	movw	r3, #33744	; 0x83d0
   28260:	e3403002 	movt	r3, #2
   28264:	e5823008 	str	r3, [r2, #8]
	pBase->TransactionComplete = DWHCIFrameSchedulerPeriodicTransactionComplete;
   28268:	e51b2010 	ldr	r2, [fp, #-16]
   2826c:	e3083518 	movw	r3, #34072	; 0x8518
   28270:	e3403002 	movt	r3, #2
   28274:	e582300c 	str	r3, [r2, #12]
	pBase->WaitForFrame = DWHCIFrameSchedulerPeriodicWaitForFrame;
   28278:	e51b2010 	ldr	r2, [fp, #-16]
   2827c:	e30836d8 	movw	r3, #34520	; 0x86d8
   28280:	e3403002 	movt	r3, #2
   28284:	e5823010 	str	r3, [r2, #16]
	pBase->IsOddFrame = DWHCIFrameSchedulerPeriodicIsOddFrame;
   28288:	e51b2010 	ldr	r2, [fp, #-16]
   2828c:	e30837e4 	movw	r3, #34788	; 0x87e4
   28290:	e3403002 	movt	r3, #2
   28294:	e5823014 	str	r3, [r2, #20]

	pThis->m_nState = StateUnknown;
   28298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2829c:	e3a02006 	mov	r2, #6
   282a0:	e5832018 	str	r2, [r3, #24]
	pThis->m_nNextFrame = FRAME_UNSET;
   282a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   282a8:	e3a02008 	mov	r2, #8
   282ac:	e5832020 	str	r2, [r3, #32]
   282b0:	e1a03004 	mov	r3, r4
   282b4:	e30801e4 	movw	r0, #33252	; 0x81e4
   282b8:	e3400002 	movt	r0, #2
   282bc:	e1a01003 	mov	r1, r3
   282c0:	ebffb567 	bl	15864 <__cyg_profile_func_exit>
}
   282c4:	e24bd008 	sub	sp, fp, #8
   282c8:	e8bd8810 	pop	{r4, fp, pc}

000282cc <_DWHCIFrameSchedulerPeriodic>:

void _DWHCIFrameSchedulerPeriodic (TDWHCIFrameScheduler *pBase)
{
   282cc:	e92d4810 	push	{r4, fp, lr}
   282d0:	e28db008 	add	fp, sp, #8
   282d4:	e24dd014 	sub	sp, sp, #20
   282d8:	e1a0400e 	mov	r4, lr
   282dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   282e0:	e1a03004 	mov	r3, r4
   282e4:	e30802cc 	movw	r0, #33484	; 0x82cc
   282e8:	e3400002 	movt	r0, #2
   282ec:	e1a01003 	mov	r1, r3
   282f0:	ebffb509 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerPeriodic *pThis = (TDWHCIFrameSchedulerPeriodic *) pBase;
   282f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   282f8:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   282fc:	e51b3010 	ldr	r3, [fp, #-16]
   28300:	e3530000 	cmp	r3, #0
   28304:	1a000005 	bne	28320 <_DWHCIFrameSchedulerPeriodic+0x54>
   28308:	e30f0ec8 	movw	r0, #65224	; 0xfec8
   2830c:	e3400002 	movt	r0, #2
   28310:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   28314:	e3401002 	movt	r1, #2
   28318:	e3a0203e 	mov	r2, #62	; 0x3e
   2831c:	ebffb9a3 	bl	169b0 <uspi_assertion_failed>

	pThis->m_nState = StateUnknown;
   28320:	e51b3010 	ldr	r3, [fp, #-16]
   28324:	e3a02006 	mov	r2, #6
   28328:	e5832018 	str	r2, [r3, #24]
   2832c:	e1a03004 	mov	r3, r4
   28330:	e30802cc 	movw	r0, #33484	; 0x82cc
   28334:	e3400002 	movt	r0, #2
   28338:	e1a01003 	mov	r1, r3
   2833c:	ebffb548 	bl	15864 <__cyg_profile_func_exit>
}
   28340:	e24bd008 	sub	sp, fp, #8
   28344:	e8bd8810 	pop	{r4, fp, pc}

00028348 <DWHCIFrameSchedulerPeriodicStartSplit>:

void DWHCIFrameSchedulerPeriodicStartSplit (TDWHCIFrameScheduler *pBase)
{
   28348:	e92d4810 	push	{r4, fp, lr}
   2834c:	e28db008 	add	fp, sp, #8
   28350:	e24dd014 	sub	sp, sp, #20
   28354:	e1a0400e 	mov	r4, lr
   28358:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2835c:	e1a03004 	mov	r3, r4
   28360:	e3080348 	movw	r0, #33608	; 0x8348
   28364:	e3400002 	movt	r0, #2
   28368:	e1a01003 	mov	r1, r3
   2836c:	ebffb4ea 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerPeriodic *pThis = (TDWHCIFrameSchedulerPeriodic *) pBase;
   28370:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28374:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   28378:	e51b3010 	ldr	r3, [fp, #-16]
   2837c:	e3530000 	cmp	r3, #0
   28380:	1a000005 	bne	2839c <DWHCIFrameSchedulerPeriodicStartSplit+0x54>
   28384:	e30f0ec8 	movw	r0, #65224	; 0xfec8
   28388:	e3400002 	movt	r0, #2
   2838c:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   28390:	e3401002 	movt	r1, #2
   28394:	e3a02046 	mov	r2, #70	; 0x46
   28398:	ebffb984 	bl	169b0 <uspi_assertion_failed>

	pThis->m_nState = StateStartSplit;
   2839c:	e51b3010 	ldr	r3, [fp, #-16]
   283a0:	e3a02000 	mov	r2, #0
   283a4:	e5832018 	str	r2, [r3, #24]
	pThis->m_nNextFrame = FRAME_UNSET;
   283a8:	e51b3010 	ldr	r3, [fp, #-16]
   283ac:	e3a02008 	mov	r2, #8
   283b0:	e5832020 	str	r2, [r3, #32]
   283b4:	e1a03004 	mov	r3, r4
   283b8:	e3080348 	movw	r0, #33608	; 0x8348
   283bc:	e3400002 	movt	r0, #2
   283c0:	e1a01003 	mov	r1, r3
   283c4:	ebffb526 	bl	15864 <__cyg_profile_func_exit>
}
   283c8:	e24bd008 	sub	sp, fp, #8
   283cc:	e8bd8810 	pop	{r4, fp, pc}

000283d0 <DWHCIFrameSchedulerPeriodicCompleteSplit>:

boolean DWHCIFrameSchedulerPeriodicCompleteSplit (TDWHCIFrameScheduler *pBase)
{
   283d0:	e92d4830 	push	{r4, r5, fp, lr}
   283d4:	e28db00c 	add	fp, sp, #12
   283d8:	e24dd010 	sub	sp, sp, #16
   283dc:	e1a0500e 	mov	r5, lr
   283e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   283e4:	e1a03005 	mov	r3, r5
   283e8:	e30803d0 	movw	r0, #33744	; 0x83d0
   283ec:	e3400002 	movt	r0, #2
   283f0:	e1a01003 	mov	r1, r3
   283f4:	ebffb4c8 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerPeriodic *pThis = (TDWHCIFrameSchedulerPeriodic *) pBase;
   283f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   283fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	assert (pThis != 0);
   28400:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28404:	e3530000 	cmp	r3, #0
   28408:	1a000005 	bne	28424 <DWHCIFrameSchedulerPeriodicCompleteSplit+0x54>
   2840c:	e30f0ec8 	movw	r0, #65224	; 0xfec8
   28410:	e3400002 	movt	r0, #2
   28414:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   28418:	e3401002 	movt	r1, #2
   2841c:	e3a0204f 	mov	r2, #79	; 0x4f
   28420:	ebffb962 	bl	169b0 <uspi_assertion_failed>

	boolean bResult = FALSE;
   28424:	e3a03000 	mov	r3, #0
   28428:	e50b3010 	str	r3, [fp, #-16]

	switch (pThis->m_nState)
   2842c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28430:	e5933018 	ldr	r3, [r3, #24]
   28434:	e2433001 	sub	r3, r3, #1
   28438:	e3530004 	cmp	r3, #4
   2843c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   28440:	ea000022 	b	284d0 <DWHCIFrameSchedulerPeriodicCompleteSplit+0x100>
   28444:	00028458 	andeq	r8, r2, r8, asr r4
   28448:	000284d0 	ldrdeq	r8, [r2], -r0
   2844c:	000284ac 	andeq	r8, r2, ip, lsr #9
   28450:	000284ec 	andeq	r8, r2, ip, ror #9
   28454:	000284ec 	andeq	r8, r2, ip, ror #9
	{
	case StateStartSplitComplete:
		pThis->m_nState = StateCompleteSplit;
   28458:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2845c:	e3a02002 	mov	r2, #2
   28460:	e5832018 	str	r2, [r3, #24]
		pThis->m_nTries = pThis->m_nNextFrame != 5 ? 3 : 2;
   28464:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28468:	e5933020 	ldr	r3, [r3, #32]
   2846c:	e3530005 	cmp	r3, #5
   28470:	0a000001 	beq	2847c <DWHCIFrameSchedulerPeriodicCompleteSplit+0xac>
   28474:	e3a02003 	mov	r2, #3
   28478:	ea000000 	b	28480 <DWHCIFrameSchedulerPeriodicCompleteSplit+0xb0>
   2847c:	e3a02002 	mov	r2, #2
   28480:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28484:	e583201c 	str	r2, [r3, #28]
		pThis->m_nNextFrame = (pThis->m_nNextFrame  + 2) & 7;
   28488:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2848c:	e5933020 	ldr	r3, [r3, #32]
   28490:	e2833002 	add	r3, r3, #2
   28494:	e2032007 	and	r2, r3, #7
   28498:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2849c:	e5832020 	str	r2, [r3, #32]
		bResult = TRUE;
   284a0:	e3a03001 	mov	r3, #1
   284a4:	e50b3010 	str	r3, [fp, #-16]
		break;
   284a8:	ea000010 	b	284f0 <DWHCIFrameSchedulerPeriodicCompleteSplit+0x120>

	case StateCompleteRetry:
		bResult = TRUE;
   284ac:	e3a03001 	mov	r3, #1
   284b0:	e50b3010 	str	r3, [fp, #-16]
		pThis->m_nNextFrame = (pThis->m_nNextFrame + 1) & 7;
   284b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   284b8:	e5933020 	ldr	r3, [r3, #32]
   284bc:	e2833001 	add	r3, r3, #1
   284c0:	e2032007 	and	r2, r3, #7
   284c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   284c8:	e5832020 	str	r2, [r3, #32]
		break;
   284cc:	ea000007 	b	284f0 <DWHCIFrameSchedulerPeriodicCompleteSplit+0x120>
	case StateCompleteSplitComplete:
	case StateCompleteSplitFailed:
		break;
		
	default:
		assert (0);
   284d0:	e30f0f3c 	movw	r0, #65340	; 0xff3c
   284d4:	e3400002 	movt	r0, #2
   284d8:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   284dc:	e3401002 	movt	r1, #2
   284e0:	e3a02066 	mov	r2, #102	; 0x66
   284e4:	ebffb931 	bl	169b0 <uspi_assertion_failed>
		break;
   284e8:	ea000000 	b	284f0 <DWHCIFrameSchedulerPeriodicCompleteSplit+0x120>
		pThis->m_nNextFrame = (pThis->m_nNextFrame + 1) & 7;
		break;

	case StateCompleteSplitComplete:
	case StateCompleteSplitFailed:
		break;
   284ec:	e1a00000 	nop			; (mov r0, r0)
	default:
		assert (0);
		break;
	}
	
	return bResult;
   284f0:	e51b4010 	ldr	r4, [fp, #-16]
   284f4:	e1a03005 	mov	r3, r5
   284f8:	e30803d0 	movw	r0, #33744	; 0x83d0
   284fc:	e3400002 	movt	r0, #2
   28500:	e1a01003 	mov	r1, r3
   28504:	ebffb4d6 	bl	15864 <__cyg_profile_func_exit>
   28508:	e1a03004 	mov	r3, r4
}
   2850c:	e1a00003 	mov	r0, r3
   28510:	e24bd00c 	sub	sp, fp, #12
   28514:	e8bd8830 	pop	{r4, r5, fp, pc}

00028518 <DWHCIFrameSchedulerPeriodicTransactionComplete>:

void DWHCIFrameSchedulerPeriodicTransactionComplete (TDWHCIFrameScheduler *pBase, u32 nStatus)
{
   28518:	e92d4810 	push	{r4, fp, lr}
   2851c:	e28db008 	add	fp, sp, #8
   28520:	e24dd014 	sub	sp, sp, #20
   28524:	e1a0400e 	mov	r4, lr
   28528:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2852c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   28530:	e1a03004 	mov	r3, r4
   28534:	e3080518 	movw	r0, #34072	; 0x8518
   28538:	e3400002 	movt	r0, #2
   2853c:	e1a01003 	mov	r1, r3
   28540:	ebffb475 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerPeriodic *pThis = (TDWHCIFrameSchedulerPeriodic *) pBase;
   28544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28548:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   2854c:	e51b3010 	ldr	r3, [fp, #-16]
   28550:	e3530000 	cmp	r3, #0
   28554:	1a000005 	bne	28570 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x58>
   28558:	e30f0ec8 	movw	r0, #65224	; 0xfec8
   2855c:	e3400002 	movt	r0, #2
   28560:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   28564:	e3401002 	movt	r1, #2
   28568:	e3a02070 	mov	r2, #112	; 0x70
   2856c:	ebffb90f 	bl	169b0 <uspi_assertion_failed>

	switch (pThis->m_nState)
   28570:	e51b3010 	ldr	r3, [fp, #-16]
   28574:	e5933018 	ldr	r3, [r3, #24]
   28578:	e3530000 	cmp	r3, #0
   2857c:	0a000003 	beq	28590 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x78>
   28580:	e2433002 	sub	r3, r3, #2
   28584:	e3530001 	cmp	r3, #1
   28588:	8a000044 	bhi	286a0 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x188>
   2858c:	ea00000d 	b	285c8 <DWHCIFrameSchedulerPeriodicTransactionComplete+0xb0>
	{
	case StateStartSplit:
		assert (nStatus & DWHCI_HOST_CHAN_INT_ACK);
   28590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28594:	e2033020 	and	r3, r3, #32
   28598:	e3530000 	cmp	r3, #0
   2859c:	1a000005 	bne	285b8 <DWHCIFrameSchedulerPeriodicTransactionComplete+0xa0>
   285a0:	e30f0f40 	movw	r0, #65344	; 0xff40
   285a4:	e3400002 	movt	r0, #2
   285a8:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   285ac:	e3401002 	movt	r1, #2
   285b0:	e3a02075 	mov	r2, #117	; 0x75
   285b4:	ebffb8fd 	bl	169b0 <uspi_assertion_failed>
		pThis->m_nState = StateStartSplitComplete;
   285b8:	e51b3010 	ldr	r3, [fp, #-16]
   285bc:	e3a02001 	mov	r2, #1
   285c0:	e5832018 	str	r2, [r3, #24]
		break;
   285c4:	ea00003c 	b	286bc <DWHCIFrameSchedulerPeriodicTransactionComplete+0x1a4>

	case StateCompleteSplit:
	case StateCompleteRetry:
		if (nStatus & DWHCI_HOST_CHAN_INT_XFER_COMPLETE)
   285c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   285cc:	e2033001 	and	r3, r3, #1
   285d0:	e3530000 	cmp	r3, #0
   285d4:	0a000003 	beq	285e8 <DWHCIFrameSchedulerPeriodicTransactionComplete+0xd0>
		{
			pThis->m_nState = StateCompleteSplitComplete;
   285d8:	e51b3010 	ldr	r3, [fp, #-16]
   285dc:	e3a02004 	mov	r2, #4
   285e0:	e5832018 	str	r2, [r3, #24]
   285e4:	ea00002c 	b	2869c <DWHCIFrameSchedulerPeriodicTransactionComplete+0x184>
		}
		else if (nStatus & (DWHCI_HOST_CHAN_INT_NYET | DWHCI_HOST_CHAN_INT_ACK))
   285e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   285ec:	e2033060 	and	r3, r3, #96	; 0x60
   285f0:	e3530000 	cmp	r3, #0
   285f4:	0a000010 	beq	2863c <DWHCIFrameSchedulerPeriodicTransactionComplete+0x124>
		{
			if (pThis->m_nTries-- == 0)
   285f8:	e51b3010 	ldr	r3, [fp, #-16]
   285fc:	e593301c 	ldr	r3, [r3, #28]
   28600:	e2431001 	sub	r1, r3, #1
   28604:	e51b2010 	ldr	r2, [fp, #-16]
   28608:	e582101c 	str	r1, [r2, #28]
   2860c:	e3530000 	cmp	r3, #0
   28610:	1a000005 	bne	2862c <DWHCIFrameSchedulerPeriodicTransactionComplete+0x114>
			{
				pThis->m_nState = StateCompleteSplitFailed;
   28614:	e51b3010 	ldr	r3, [fp, #-16]
   28618:	e3a02005 	mov	r2, #5
   2861c:	e5832018 	str	r2, [r3, #24]

				usDelay (8 * uFRAME);
   28620:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   28624:	ebffb7ea 	bl	165d4 <usDelay>
   28628:	ea00001b 	b	2869c <DWHCIFrameSchedulerPeriodicTransactionComplete+0x184>
			}
			else
			{
				pThis->m_nState = StateCompleteRetry;
   2862c:	e51b3010 	ldr	r3, [fp, #-16]
   28630:	e3a02003 	mov	r2, #3
   28634:	e5832018 	str	r2, [r3, #24]
		else
		{
			LogWrite ("dwsched", LOG_ERROR, "Invalid status 0x%X", nStatus);
			assert (0);
		}
		break;
   28638:	ea00001f 	b	286bc <DWHCIFrameSchedulerPeriodicTransactionComplete+0x1a4>
			else
			{
				pThis->m_nState = StateCompleteRetry;
			}
		}
		else if (nStatus & DWHCI_HOST_CHAN_INT_NAK)
   2863c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28640:	e2033010 	and	r3, r3, #16
   28644:	e3530000 	cmp	r3, #0
   28648:	0a000005 	beq	28664 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x14c>
		{
			usDelay (5 * uFRAME);
   2864c:	e3000271 	movw	r0, #625	; 0x271
   28650:	ebffb7df 	bl	165d4 <usDelay>
			pThis->m_nState = StateCompleteSplitFailed;
   28654:	e51b3010 	ldr	r3, [fp, #-16]
   28658:	e3a02005 	mov	r2, #5
   2865c:	e5832018 	str	r2, [r3, #24]
   28660:	ea00000d 	b	2869c <DWHCIFrameSchedulerPeriodicTransactionComplete+0x184>
		}
		else
		{
			LogWrite ("dwsched", LOG_ERROR, "Invalid status 0x%X", nStatus);
   28664:	e30f0f64 	movw	r0, #65380	; 0xff64
   28668:	e3400002 	movt	r0, #2
   2866c:	e3a01001 	mov	r1, #1
   28670:	e30f2f6c 	movw	r2, #65388	; 0xff6c
   28674:	e3402002 	movt	r2, #2
   28678:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2867c:	ebffb8b3 	bl	16950 <LogWrite>
			assert (0);
   28680:	e30f0f3c 	movw	r0, #65340	; 0xff3c
   28684:	e3400002 	movt	r0, #2
   28688:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   2868c:	e3401002 	movt	r1, #2
   28690:	e3a02094 	mov	r2, #148	; 0x94
   28694:	ebffb8c5 	bl	169b0 <uspi_assertion_failed>
		}
		break;
   28698:	ea000007 	b	286bc <DWHCIFrameSchedulerPeriodicTransactionComplete+0x1a4>
   2869c:	ea000006 	b	286bc <DWHCIFrameSchedulerPeriodicTransactionComplete+0x1a4>
		
	default:
		assert (0);
   286a0:	e30f0f3c 	movw	r0, #65340	; 0xff3c
   286a4:	e3400002 	movt	r0, #2
   286a8:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   286ac:	e3401002 	movt	r1, #2
   286b0:	e3a02099 	mov	r2, #153	; 0x99
   286b4:	ebffb8bd 	bl	169b0 <uspi_assertion_failed>
		break;
   286b8:	e1a00000 	nop			; (mov r0, r0)
   286bc:	e1a03004 	mov	r3, r4
   286c0:	e3080518 	movw	r0, #34072	; 0x8518
   286c4:	e3400002 	movt	r0, #2
   286c8:	e1a01003 	mov	r1, r3
   286cc:	ebffb464 	bl	15864 <__cyg_profile_func_exit>
	}
}
   286d0:	e24bd008 	sub	sp, fp, #8
   286d4:	e8bd8810 	pop	{r4, fp, pc}

000286d8 <DWHCIFrameSchedulerPeriodicWaitForFrame>:

void DWHCIFrameSchedulerPeriodicWaitForFrame (TDWHCIFrameScheduler *pBase)
{
   286d8:	e92d4810 	push	{r4, fp, lr}
   286dc:	e28db008 	add	fp, sp, #8
   286e0:	e24dd01c 	sub	sp, sp, #28
   286e4:	e1a0400e 	mov	r4, lr
   286e8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   286ec:	e1a03004 	mov	r3, r4
   286f0:	e30806d8 	movw	r0, #34520	; 0x86d8
   286f4:	e3400002 	movt	r0, #2
   286f8:	e1a01003 	mov	r1, r3
   286fc:	ebffb406 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerPeriodic *pThis = (TDWHCIFrameSchedulerPeriodic *) pBase;
   28700:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28704:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   28708:	e51b3010 	ldr	r3, [fp, #-16]
   2870c:	e3530000 	cmp	r3, #0
   28710:	1a000005 	bne	2872c <DWHCIFrameSchedulerPeriodicWaitForFrame+0x54>
   28714:	e30f0ec8 	movw	r0, #65224	; 0xfec8
   28718:	e3400002 	movt	r0, #2
   2871c:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   28720:	e3401002 	movt	r1, #2
   28724:	e3a020a1 	mov	r2, #161	; 0xa1
   28728:	ebffb8a0 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister FrameNumber;
	DWHCIRegister (&FrameNumber, DWHCI_HOST_FRM_NUM);
   2872c:	e24b301c 	sub	r3, fp, #28
   28730:	e1a00003 	mov	r0, r3
   28734:	e3001408 	movw	r1, #1032	; 0x408
   28738:	e3431f98 	movt	r1, #16280	; 0x3f98
   2873c:	ebffce55 	bl	1c098 <DWHCIRegister>

	if (pThis->m_nNextFrame == FRAME_UNSET)
   28740:	e51b3010 	ldr	r3, [fp, #-16]
   28744:	e5933020 	ldr	r3, [r3, #32]
   28748:	e3530008 	cmp	r3, #8
   2874c:	1a000010 	bne	28794 <DWHCIFrameSchedulerPeriodicWaitForFrame+0xbc>
	{
		pThis->m_nNextFrame = (DWHCI_HOST_FRM_NUM_NUMBER (DWHCIRegisterRead (&FrameNumber)) + 1) & 7;
   28750:	e24b301c 	sub	r3, fp, #28
   28754:	e1a00003 	mov	r0, r3
   28758:	ebffceb1 	bl	1c224 <DWHCIRegisterRead>
   2875c:	e1a03000 	mov	r3, r0
   28760:	e2833001 	add	r3, r3, #1
   28764:	e2032007 	and	r2, r3, #7
   28768:	e51b3010 	ldr	r3, [fp, #-16]
   2876c:	e5832020 	str	r2, [r3, #32]
		if (pThis->m_nNextFrame == 6)
   28770:	e51b3010 	ldr	r3, [fp, #-16]
   28774:	e5933020 	ldr	r3, [r3, #32]
   28778:	e3530006 	cmp	r3, #6
   2877c:	1a000004 	bne	28794 <DWHCIFrameSchedulerPeriodicWaitForFrame+0xbc>
		{
			pThis->m_nNextFrame++;
   28780:	e51b3010 	ldr	r3, [fp, #-16]
   28784:	e5933020 	ldr	r3, [r3, #32]
   28788:	e2832001 	add	r2, r3, #1
   2878c:	e51b3010 	ldr	r3, [fp, #-16]
   28790:	e5832020 	str	r2, [r3, #32]
		}
	}

	while ((DWHCI_HOST_FRM_NUM_NUMBER (DWHCIRegisterRead (&FrameNumber)) & 7) != pThis->m_nNextFrame)
   28794:	e1a00000 	nop			; (mov r0, r0)
   28798:	e24b301c 	sub	r3, fp, #28
   2879c:	e1a00003 	mov	r0, r3
   287a0:	ebffce9f 	bl	1c224 <DWHCIRegisterRead>
   287a4:	e1a03000 	mov	r3, r0
   287a8:	e2032007 	and	r2, r3, #7
   287ac:	e51b3010 	ldr	r3, [fp, #-16]
   287b0:	e5933020 	ldr	r3, [r3, #32]
   287b4:	e1520003 	cmp	r2, r3
   287b8:	1afffff6 	bne	28798 <DWHCIFrameSchedulerPeriodicWaitForFrame+0xc0>
	{
		// do nothing
	}

	_DWHCIRegister (&FrameNumber);
   287bc:	e24b301c 	sub	r3, fp, #28
   287c0:	e1a00003 	mov	r0, r3
   287c4:	ebffce79 	bl	1c1b0 <_DWHCIRegister>
   287c8:	e1a03004 	mov	r3, r4
   287cc:	e30806d8 	movw	r0, #34520	; 0x86d8
   287d0:	e3400002 	movt	r0, #2
   287d4:	e1a01003 	mov	r1, r3
   287d8:	ebffb421 	bl	15864 <__cyg_profile_func_exit>
}
   287dc:	e24bd008 	sub	sp, fp, #8
   287e0:	e8bd8810 	pop	{r4, fp, pc}

000287e4 <DWHCIFrameSchedulerPeriodicIsOddFrame>:

boolean DWHCIFrameSchedulerPeriodicIsOddFrame (TDWHCIFrameScheduler *pBase)
{
   287e4:	e92d4830 	push	{r4, r5, fp, lr}
   287e8:	e28db00c 	add	fp, sp, #12
   287ec:	e24dd010 	sub	sp, sp, #16
   287f0:	e1a0400e 	mov	r4, lr
   287f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   287f8:	e1a03004 	mov	r3, r4
   287fc:	e30807e4 	movw	r0, #34788	; 0x87e4
   28800:	e3400002 	movt	r0, #2
   28804:	e1a01003 	mov	r1, r3
   28808:	ebffb3c3 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerPeriodic *pThis = (TDWHCIFrameSchedulerPeriodic *) pBase;
   2880c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28810:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   28814:	e51b3010 	ldr	r3, [fp, #-16]
   28818:	e3530000 	cmp	r3, #0
   2881c:	1a000005 	bne	28838 <DWHCIFrameSchedulerPeriodicIsOddFrame+0x54>
   28820:	e30f0ec8 	movw	r0, #65224	; 0xfec8
   28824:	e3400002 	movt	r0, #2
   28828:	e30f1ed4 	movw	r1, #65236	; 0xfed4
   2882c:	e3401002 	movt	r1, #2
   28830:	e3a020ba 	mov	r2, #186	; 0xba
   28834:	ebffb85d 	bl	169b0 <uspi_assertion_failed>

	return pThis->m_nNextFrame & 1 ? TRUE : FALSE;
   28838:	e51b3010 	ldr	r3, [fp, #-16]
   2883c:	e5933020 	ldr	r3, [r3, #32]
   28840:	e2033001 	and	r3, r3, #1
   28844:	e3530000 	cmp	r3, #0
   28848:	13a03001 	movne	r3, #1
   2884c:	03a03000 	moveq	r3, #0
   28850:	e6ef3073 	uxtb	r3, r3
   28854:	e1a05003 	mov	r5, r3
   28858:	e1a03004 	mov	r3, r4
   2885c:	e30807e4 	movw	r0, #34788	; 0x87e4
   28860:	e3400002 	movt	r0, #2
   28864:	e1a01003 	mov	r1, r3
   28868:	ebffb3fd 	bl	15864 <__cyg_profile_func_exit>
   2886c:	e1a03005 	mov	r3, r5
}
   28870:	e1a00003 	mov	r0, r3
   28874:	e24bd00c 	sub	sp, fp, #12
   28878:	e8bd8830 	pop	{r4, r5, fp, pc}

0002887c <KeyMap>:
	{KeyNone}		// ...
#endif
};

void KeyMap (TKeyMap *pThis)
{
   2887c:	e92d4810 	push	{r4, fp, lr}
   28880:	e28db008 	add	fp, sp, #8
   28884:	e24dd00c 	sub	sp, sp, #12
   28888:	e1a0400e 	mov	r4, lr
   2888c:	e50b0010 	str	r0, [fp, #-16]
   28890:	e1a03004 	mov	r3, r4
   28894:	e308087c 	movw	r0, #34940	; 0x887c
   28898:	e3400002 	movt	r0, #2
   2889c:	e1a01003 	mov	r1, r3
   288a0:	ebffb39d 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   288a4:	e51b3010 	ldr	r3, [fp, #-16]
   288a8:	e3530000 	cmp	r3, #0
   288ac:	1a000005 	bne	288c8 <KeyMap+0x4c>
   288b0:	e30001e0 	movw	r0, #480	; 0x1e0
   288b4:	e3400003 	movt	r0, #3
   288b8:	e30011ec 	movw	r1, #492	; 0x1ec
   288bc:	e3401003 	movt	r1, #3
   288c0:	e3a02062 	mov	r2, #98	; 0x62
   288c4:	ebffb839 	bl	169b0 <uspi_assertion_failed>

	pThis->m_bCapsLock = FALSE;
   288c8:	e51b3010 	ldr	r3, [fp, #-16]
   288cc:	e3a02000 	mov	r2, #0
   288d0:	e5832180 	str	r2, [r3, #384]	; 0x180
	pThis->m_bNumLock = TRUE;
   288d4:	e51b3010 	ldr	r3, [fp, #-16]
   288d8:	e3a02001 	mov	r2, #1
   288dc:	e5832184 	str	r2, [r3, #388]	; 0x184
	pThis->m_bScrollLock = FALSE;
   288e0:	e51b3010 	ldr	r3, [fp, #-16]
   288e4:	e3a02000 	mov	r2, #0
   288e8:	e5832188 	str	r2, [r3, #392]	; 0x188

	assert (sizeof pThis->m_KeyMap == sizeof s_DefaultMap);
	memcpy (pThis->m_KeyMap, s_DefaultMap, sizeof pThis->m_KeyMap);
   288ec:	e51b3010 	ldr	r3, [fp, #-16]
   288f0:	e1a00003 	mov	r0, r3
   288f4:	e3001060 	movw	r1, #96	; 0x60
   288f8:	e3401003 	movt	r1, #3
   288fc:	e3a02d06 	mov	r2, #384	; 0x180
   28900:	ebfff5f5 	bl	260dc <uspi_memcpy>
   28904:	e1a03004 	mov	r3, r4
   28908:	e308087c 	movw	r0, #34940	; 0x887c
   2890c:	e3400002 	movt	r0, #2
   28910:	e1a01003 	mov	r1, r3
   28914:	ebffb3d2 	bl	15864 <__cyg_profile_func_exit>
}
   28918:	e24bd008 	sub	sp, fp, #8
   2891c:	e8bd8810 	pop	{r4, fp, pc}

00028920 <_KeyMap>:

void _KeyMap (TKeyMap *pThis)
{
   28920:	e92d4810 	push	{r4, fp, lr}
   28924:	e28db008 	add	fp, sp, #8
   28928:	e24dd00c 	sub	sp, sp, #12
   2892c:	e1a0400e 	mov	r4, lr
   28930:	e50b0010 	str	r0, [fp, #-16]
   28934:	e1a03004 	mov	r3, r4
   28938:	e3080920 	movw	r0, #35104	; 0x8920
   2893c:	e3400002 	movt	r0, #2
   28940:	e1a01003 	mov	r1, r3
   28944:	ebffb374 	bl	1571c <__cyg_profile_func_enter>
   28948:	e1a03004 	mov	r3, r4
   2894c:	e3080920 	movw	r0, #35104	; 0x8920
   28950:	e3400002 	movt	r0, #2
   28954:	e1a01003 	mov	r1, r3
   28958:	ebffb3c1 	bl	15864 <__cyg_profile_func_exit>
}
   2895c:	e24bd008 	sub	sp, fp, #8
   28960:	e8bd8810 	pop	{r4, fp, pc}

00028964 <KeyMapClearTable>:

boolean KeyMapClearTable (TKeyMap *pThis, u8 nTable)
{
   28964:	e92d4830 	push	{r4, r5, fp, lr}
   28968:	e28db00c 	add	fp, sp, #12
   2896c:	e24dd010 	sub	sp, sp, #16
   28970:	e1a0500e 	mov	r5, lr
   28974:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   28978:	e1a03001 	mov	r3, r1
   2897c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   28980:	e1a03005 	mov	r3, r5
   28984:	e3080964 	movw	r0, #35172	; 0x8964
   28988:	e3400002 	movt	r0, #2
   2898c:	e1a01003 	mov	r1, r3
   28990:	ebffb361 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   28994:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28998:	e3530000 	cmp	r3, #0
   2899c:	1a000005 	bne	289b8 <KeyMapClearTable+0x54>
   289a0:	e30001e0 	movw	r0, #480	; 0x1e0
   289a4:	e3400003 	movt	r0, #3
   289a8:	e30011ec 	movw	r1, #492	; 0x1ec
   289ac:	e3401003 	movt	r1, #3
   289b0:	e3a02072 	mov	r2, #114	; 0x72
   289b4:	ebffb7fd 	bl	169b0 <uspi_assertion_failed>

	if (nTable > K_ALTTAB)
   289b8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   289bc:	e3530002 	cmp	r3, #2
   289c0:	9a000001 	bls	289cc <KeyMapClearTable+0x68>
	{
		return FALSE;
   289c4:	e3a04000 	mov	r4, #0
   289c8:	ea000012 	b	28a18 <KeyMapClearTable+0xb4>
	}

	for (unsigned nPhyCode = 0; nPhyCode <= PHY_MAX_CODE; nPhyCode++)
   289cc:	e3a03000 	mov	r3, #0
   289d0:	e50b3010 	str	r3, [fp, #-16]
   289d4:	ea00000b 	b	28a08 <KeyMapClearTable+0xa4>
	{
		pThis->m_KeyMap[nPhyCode][nTable] = KeyNone;
   289d8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   289dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   289e0:	e51b1010 	ldr	r1, [fp, #-16]
   289e4:	e3a00003 	mov	r0, #3
   289e8:	e0010190 	mul	r1, r0, r1
   289ec:	e0813003 	add	r3, r1, r3
   289f0:	e0823003 	add	r3, r2, r3
   289f4:	e3a02000 	mov	r2, #0
   289f8:	e5c32000 	strb	r2, [r3]
	if (nTable > K_ALTTAB)
	{
		return FALSE;
	}

	for (unsigned nPhyCode = 0; nPhyCode <= PHY_MAX_CODE; nPhyCode++)
   289fc:	e51b3010 	ldr	r3, [fp, #-16]
   28a00:	e2833001 	add	r3, r3, #1
   28a04:	e50b3010 	str	r3, [fp, #-16]
   28a08:	e51b3010 	ldr	r3, [fp, #-16]
   28a0c:	e353007f 	cmp	r3, #127	; 0x7f
   28a10:	9afffff0 	bls	289d8 <KeyMapClearTable+0x74>
	{
		pThis->m_KeyMap[nPhyCode][nTable] = KeyNone;
	}

	return TRUE;
   28a14:	e3a04001 	mov	r4, #1
   28a18:	e1a03005 	mov	r3, r5
   28a1c:	e3080964 	movw	r0, #35172	; 0x8964
   28a20:	e3400002 	movt	r0, #2
   28a24:	e1a01003 	mov	r1, r3
   28a28:	ebffb38d 	bl	15864 <__cyg_profile_func_exit>
   28a2c:	e1a03004 	mov	r3, r4
}
   28a30:	e1a00003 	mov	r0, r3
   28a34:	e24bd00c 	sub	sp, fp, #12
   28a38:	e8bd8830 	pop	{r4, r5, fp, pc}

00028a3c <KeyMapSetEntry>:

boolean KeyMapSetEntry (TKeyMap *pThis, u8 nTable, u8 nPhyCode, u8 nValue)
{
   28a3c:	e92d4830 	push	{r4, r5, fp, lr}
   28a40:	e28db00c 	add	fp, sp, #12
   28a44:	e24dd008 	sub	sp, sp, #8
   28a48:	e1a0500e 	mov	r5, lr
   28a4c:	e50b0010 	str	r0, [fp, #-16]
   28a50:	e1a00001 	mov	r0, r1
   28a54:	e1a01002 	mov	r1, r2
   28a58:	e1a02003 	mov	r2, r3
   28a5c:	e1a03000 	mov	r3, r0
   28a60:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   28a64:	e1a03001 	mov	r3, r1
   28a68:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
   28a6c:	e1a03002 	mov	r3, r2
   28a70:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
   28a74:	e1a03005 	mov	r3, r5
   28a78:	e3080a3c 	movw	r0, #35388	; 0x8a3c
   28a7c:	e3400002 	movt	r0, #2
   28a80:	e1a01003 	mov	r1, r3
   28a84:	ebffb324 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   28a88:	e51b3010 	ldr	r3, [fp, #-16]
   28a8c:	e3530000 	cmp	r3, #0
   28a90:	1a000005 	bne	28aac <KeyMapSetEntry+0x70>
   28a94:	e30001e0 	movw	r0, #480	; 0x1e0
   28a98:	e3400003 	movt	r0, #3
   28a9c:	e30011ec 	movw	r1, #492	; 0x1ec
   28aa0:	e3401003 	movt	r1, #3
   28aa4:	e3a02083 	mov	r2, #131	; 0x83
   28aa8:	ebffb7c0 	bl	169b0 <uspi_assertion_failed>

	if (   nTable   > K_ALTTAB
   28aac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   28ab0:	e3530002 	cmp	r3, #2
   28ab4:	8a000009 	bhi	28ae0 <KeyMapSetEntry+0xa4>
	    || nPhyCode == 0
   28ab8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   28abc:	e3530000 	cmp	r3, #0
   28ac0:	0a000006 	beq	28ae0 <KeyMapSetEntry+0xa4>
	    || nPhyCode > PHY_MAX_CODE
   28ac4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   28ac8:	e6af3073 	sxtb	r3, r3
   28acc:	e3530000 	cmp	r3, #0
   28ad0:	ba000002 	blt	28ae0 <KeyMapSetEntry+0xa4>
	    || nValue   >= KeyMaxCode)
   28ad4:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
   28ad8:	e35300b2 	cmp	r3, #178	; 0xb2
   28adc:	9a000001 	bls	28ae8 <KeyMapSetEntry+0xac>
	{
		return FALSE;
   28ae0:	e3a04000 	mov	r4, #0
   28ae4:	ea000009 	b	28b10 <KeyMapSetEntry+0xd4>
	}

	pThis->m_KeyMap[nPhyCode][nTable] = nValue;
   28ae8:	e55b1012 	ldrb	r1, [fp, #-18]	; 0xffffffee
   28aec:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   28af0:	e51b2010 	ldr	r2, [fp, #-16]
   28af4:	e3a00003 	mov	r0, #3
   28af8:	e0010190 	mul	r1, r0, r1
   28afc:	e0813003 	add	r3, r1, r3
   28b00:	e0823003 	add	r3, r2, r3
   28b04:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
   28b08:	e5c32000 	strb	r2, [r3]

	return TRUE;
   28b0c:	e3a04001 	mov	r4, #1
   28b10:	e1a03005 	mov	r3, r5
   28b14:	e3080a3c 	movw	r0, #35388	; 0x8a3c
   28b18:	e3400002 	movt	r0, #2
   28b1c:	e1a01003 	mov	r1, r3
   28b20:	ebffb34f 	bl	15864 <__cyg_profile_func_exit>
   28b24:	e1a03004 	mov	r3, r4
}
   28b28:	e1a00003 	mov	r0, r3
   28b2c:	e24bd00c 	sub	sp, fp, #12
   28b30:	e8bd8830 	pop	{r4, r5, fp, pc}

00028b34 <KeyMapTranslate>:

u8 KeyMapTranslate (TKeyMap *pThis, u8 nPhyCode, u8 nModifiers)
{
   28b34:	e92d4830 	push	{r4, r5, fp, lr}
   28b38:	e28db00c 	add	fp, sp, #12
   28b3c:	e24dd010 	sub	sp, sp, #16
   28b40:	e1a0500e 	mov	r5, lr
   28b44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   28b48:	e1a03001 	mov	r3, r1
   28b4c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   28b50:	e1a03002 	mov	r3, r2
   28b54:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
   28b58:	e1a03005 	mov	r3, r5
   28b5c:	e3080b34 	movw	r0, #35636	; 0x8b34
   28b60:	e3400002 	movt	r0, #2
   28b64:	e1a01003 	mov	r1, r3
   28b68:	ebffb2eb 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   28b6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28b70:	e3530000 	cmp	r3, #0
   28b74:	1a000005 	bne	28b90 <KeyMapTranslate+0x5c>
   28b78:	e30001e0 	movw	r0, #480	; 0x1e0
   28b7c:	e3400003 	movt	r0, #3
   28b80:	e30011ec 	movw	r1, #492	; 0x1ec
   28b84:	e3401003 	movt	r1, #3
   28b88:	e3a02094 	mov	r2, #148	; 0x94
   28b8c:	ebffb787 	bl	169b0 <uspi_assertion_failed>

	if (   nPhyCode == 0
   28b90:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28b94:	e3530000 	cmp	r3, #0
   28b98:	0a000003 	beq	28bac <KeyMapTranslate+0x78>
	    || nPhyCode > PHY_MAX_CODE)
   28b9c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28ba0:	e6af3073 	sxtb	r3, r3
   28ba4:	e3530000 	cmp	r3, #0
   28ba8:	aa000001 	bge	28bb4 <KeyMapTranslate+0x80>
	{
		return KeyNone;
   28bac:	e3a04000 	mov	r4, #0
   28bb0:	ea000076 	b	28d90 <KeyMapTranslate+0x25c>
	}

	u8 nLogCodeNorm = pThis->m_KeyMap[nPhyCode][K_NORMTAB];
   28bb4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28bb8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28bbc:	e3a01003 	mov	r1, #3
   28bc0:	e0030391 	mul	r3, r1, r3
   28bc4:	e0823003 	add	r3, r2, r3
   28bc8:	e5d33000 	ldrb	r3, [r3]
   28bcc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	if (   nLogCodeNorm == KeyDelete
   28bd0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   28bd4:	e3530088 	cmp	r3, #136	; 0x88
   28bd8:	1a000009 	bne	28c04 <KeyMapTranslate+0xd0>
	    && (nModifiers & (LCTRL | RCTRL))
   28bdc:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   28be0:	e2033011 	and	r3, r3, #17
   28be4:	e3530000 	cmp	r3, #0
   28be8:	0a000005 	beq	28c04 <KeyMapTranslate+0xd0>
	    && (nModifiers & ALT))
   28bec:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   28bf0:	e2033004 	and	r3, r3, #4
   28bf4:	e3530000 	cmp	r3, #0
   28bf8:	0a000001 	beq	28c04 <KeyMapTranslate+0xd0>
	{
		return ActionShutdown; 
   28bfc:	e3a040c2 	mov	r4, #194	; 0xc2
   28c00:	ea000062 	b	28d90 <KeyMapTranslate+0x25c>
	}

	if (   (KeyF1 <= nLogCodeNorm && nLogCodeNorm <= KeyF12)
   28c04:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   28c08:	e353008e 	cmp	r3, #142	; 0x8e
   28c0c:	9a00000a 	bls	28c3c <KeyMapTranslate+0x108>
   28c10:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   28c14:	e353009a 	cmp	r3, #154	; 0x9a
   28c18:	8a000007 	bhi	28c3c <KeyMapTranslate+0x108>
	    && (nModifiers & ALT))
   28c1c:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   28c20:	e2033004 	and	r3, r3, #4
   28c24:	e3530000 	cmp	r3, #0
   28c28:	0a000003 	beq	28c3c <KeyMapTranslate+0x108>
	{
		return ActionSelectConsole1 + (nLogCodeNorm - KeyF1);
   28c2c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   28c30:	e2833027 	add	r3, r3, #39	; 0x27
   28c34:	e6ef4073 	uxtb	r4, r3
   28c38:	ea000054 	b	28d90 <KeyMapTranslate+0x25c>
	}

	if (nModifiers & (ALT | LWIN | RWIN))
   28c3c:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   28c40:	e203308c 	and	r3, r3, #140	; 0x8c
   28c44:	e3530000 	cmp	r3, #0
   28c48:	0a000001 	beq	28c54 <KeyMapTranslate+0x120>
	{
		return KeyNone;
   28c4c:	e3a04000 	mov	r4, #0
   28c50:	ea00004e 	b	28d90 <KeyMapTranslate+0x25c>
	}
	
	unsigned nTable = K_NORMTAB;
   28c54:	e3a03000 	mov	r3, #0
   28c58:	e50b3010 	str	r3, [fp, #-16]

	// TODO: hard-wired to keypad
	if (KEYPAD_FIRST <= nPhyCode && nPhyCode <= KEYPAD_LAST)
   28c5c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28c60:	e3530052 	cmp	r3, #82	; 0x52
   28c64:	9a00000a 	bls	28c94 <KeyMapTranslate+0x160>
   28c68:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28c6c:	e3530063 	cmp	r3, #99	; 0x63
   28c70:	8a000007 	bhi	28c94 <KeyMapTranslate+0x160>
	{
		if (pThis->m_bNumLock)
   28c74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28c78:	e5933184 	ldr	r3, [r3, #388]	; 0x184
   28c7c:	e3530000 	cmp	r3, #0
   28c80:	0a000002 	beq	28c90 <KeyMapTranslate+0x15c>
		{
			nTable = K_SHIFTTAB;
   28c84:	e3a03001 	mov	r3, #1
   28c88:	e50b3010 	str	r3, [fp, #-16]
	unsigned nTable = K_NORMTAB;

	// TODO: hard-wired to keypad
	if (KEYPAD_FIRST <= nPhyCode && nPhyCode <= KEYPAD_LAST)
	{
		if (pThis->m_bNumLock)
   28c8c:	ea00000d 	b	28cc8 <KeyMapTranslate+0x194>
   28c90:	ea00000c 	b	28cc8 <KeyMapTranslate+0x194>
		{
			nTable = K_SHIFTTAB;
		}
	}
	else if (nModifiers & ALTGR)
   28c94:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   28c98:	e2033040 	and	r3, r3, #64	; 0x40
   28c9c:	e3530000 	cmp	r3, #0
   28ca0:	0a000002 	beq	28cb0 <KeyMapTranslate+0x17c>
	{
		nTable = K_ALTTAB;
   28ca4:	e3a03002 	mov	r3, #2
   28ca8:	e50b3010 	str	r3, [fp, #-16]
   28cac:	ea000005 	b	28cc8 <KeyMapTranslate+0x194>
	}
	else if (nModifiers & (LSHIFT | RSHIFT))
   28cb0:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   28cb4:	e2033022 	and	r3, r3, #34	; 0x22
   28cb8:	e3530000 	cmp	r3, #0
   28cbc:	0a000001 	beq	28cc8 <KeyMapTranslate+0x194>
	{
		nTable = K_SHIFTTAB;
   28cc0:	e3a03001 	mov	r3, #1
   28cc4:	e50b3010 	str	r3, [fp, #-16]
	}

	u8 nLogCode = pThis->m_KeyMap[nPhyCode][nTable];
   28cc8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28ccc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28cd0:	e3a01003 	mov	r1, #3
   28cd4:	e0010391 	mul	r1, r1, r3
   28cd8:	e51b3010 	ldr	r3, [fp, #-16]
   28cdc:	e0813003 	add	r3, r1, r3
   28ce0:	e0823003 	add	r3, r2, r3
   28ce4:	e5d33000 	ldrb	r3, [r3]
   28ce8:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

	switch (nLogCode)
   28cec:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   28cf0:	e353009e 	cmp	r3, #158	; 0x9e
   28cf4:	0a000019 	beq	28d60 <KeyMapTranslate+0x22c>
   28cf8:	e35300a0 	cmp	r3, #160	; 0xa0
   28cfc:	0a00000c 	beq	28d34 <KeyMapTranslate+0x200>
   28d00:	e353009c 	cmp	r3, #156	; 0x9c
   28d04:	1a000020 	bne	28d8c <KeyMapTranslate+0x258>
	{
	case KeyCapsLock:
		pThis->m_bCapsLock = !pThis->m_bCapsLock;
   28d08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28d0c:	e5933180 	ldr	r3, [r3, #384]	; 0x180
   28d10:	e3530000 	cmp	r3, #0
   28d14:	03a03001 	moveq	r3, #1
   28d18:	13a03000 	movne	r3, #0
   28d1c:	e6ef3073 	uxtb	r3, r3
   28d20:	e1a02003 	mov	r2, r3
   28d24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28d28:	e5832180 	str	r2, [r3, #384]	; 0x180
		return ActionSwitchCapsLock;
   28d2c:	e3a040b3 	mov	r4, #179	; 0xb3
   28d30:	ea000016 	b	28d90 <KeyMapTranslate+0x25c>
	
	case KeyNumLock:
		pThis->m_bNumLock = !pThis->m_bNumLock;
   28d34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28d38:	e5933184 	ldr	r3, [r3, #388]	; 0x184
   28d3c:	e3530000 	cmp	r3, #0
   28d40:	03a03001 	moveq	r3, #1
   28d44:	13a03000 	movne	r3, #0
   28d48:	e6ef3073 	uxtb	r3, r3
   28d4c:	e1a02003 	mov	r2, r3
   28d50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28d54:	e5832184 	str	r2, [r3, #388]	; 0x184
		return ActionSwitchNumLock;
   28d58:	e3a040b4 	mov	r4, #180	; 0xb4
   28d5c:	ea00000b 	b	28d90 <KeyMapTranslate+0x25c>

	case KeyScrollLock:
		pThis->m_bScrollLock = !pThis->m_bScrollLock;
   28d60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28d64:	e5933188 	ldr	r3, [r3, #392]	; 0x188
   28d68:	e3530000 	cmp	r3, #0
   28d6c:	03a03001 	moveq	r3, #1
   28d70:	13a03000 	movne	r3, #0
   28d74:	e6ef3073 	uxtb	r3, r3
   28d78:	e1a02003 	mov	r2, r3
   28d7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28d80:	e5832188 	str	r2, [r3, #392]	; 0x188
		return ActionSwitchScrollLock;
   28d84:	e3a040b5 	mov	r4, #181	; 0xb5
   28d88:	ea000000 	b	28d90 <KeyMapTranslate+0x25c>
	}

	return nLogCode;
   28d8c:	e55b4012 	ldrb	r4, [fp, #-18]	; 0xffffffee
   28d90:	e1a03005 	mov	r3, r5
   28d94:	e3080b34 	movw	r0, #35636	; 0x8b34
   28d98:	e3400002 	movt	r0, #2
   28d9c:	e1a01003 	mov	r1, r3
   28da0:	ebffb2af 	bl	15864 <__cyg_profile_func_exit>
   28da4:	e1a03004 	mov	r3, r4
}
   28da8:	e1a00003 	mov	r0, r3
   28dac:	e24bd00c 	sub	sp, fp, #12
   28db0:	e8bd8830 	pop	{r4, r5, fp, pc}

00028db4 <KeyMapGetString>:

const char *KeyMapGetString (TKeyMap *pThis, u8 nKeyCode, u8 nModifiers, char Buffer[2])
{
   28db4:	e92d4830 	push	{r4, r5, fp, lr}
   28db8:	e28db00c 	add	fp, sp, #12
   28dbc:	e24dd018 	sub	sp, sp, #24
   28dc0:	e1a0500e 	mov	r5, lr
   28dc4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   28dc8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   28dcc:	e1a03001 	mov	r3, r1
   28dd0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   28dd4:	e1a03002 	mov	r3, r2
   28dd8:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
   28ddc:	e1a03005 	mov	r3, r5
   28de0:	e3080db4 	movw	r0, #36276	; 0x8db4
   28de4:	e3400002 	movt	r0, #2
   28de8:	e1a01003 	mov	r1, r3
   28dec:	ebffb24a 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   28df0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28df4:	e3530000 	cmp	r3, #0
   28df8:	1a000005 	bne	28e14 <KeyMapGetString+0x60>
   28dfc:	e30001e0 	movw	r0, #480	; 0x1e0
   28e00:	e3400003 	movt	r0, #3
   28e04:	e30011ec 	movw	r1, #492	; 0x1ec
   28e08:	e3401003 	movt	r1, #3
   28e0c:	e3a020d9 	mov	r2, #217	; 0xd9
   28e10:	ebffb6e6 	bl	169b0 <uspi_assertion_failed>

	if (   nKeyCode <= ' '
   28e14:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28e18:	e3530020 	cmp	r3, #32
   28e1c:	9a000002 	bls	28e2c <KeyMapGetString+0x78>
	    || nKeyCode >= KeyMaxCode)
   28e20:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28e24:	e35300b2 	cmp	r3, #178	; 0xb2
   28e28:	9a000001 	bls	28e34 <KeyMapGetString+0x80>
	{
		return 0;
   28e2c:	e3a04000 	mov	r4, #0
   28e30:	ea00004b 	b	28f64 <KeyMapGetString+0x1b0>
	}

	if (KeySpace <= nKeyCode && nKeyCode < KeyMaxCode)
   28e34:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28e38:	e6af3073 	sxtb	r3, r3
   28e3c:	e3530000 	cmp	r3, #0
   28e40:	aa000008 	bge	28e68 <KeyMapGetString+0xb4>
   28e44:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28e48:	e35300b2 	cmp	r3, #178	; 0xb2
   28e4c:	8a000005 	bhi	28e68 <KeyMapGetString+0xb4>
	{
		return s_KeyStrings[nKeyCode-KeySpace];
   28e50:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28e54:	e2432080 	sub	r2, r3, #128	; 0x80
   28e58:	e3003b84 	movw	r3, #2948	; 0xb84
   28e5c:	e3403003 	movt	r3, #3
   28e60:	e7934102 	ldr	r4, [r3, r2, lsl #2]
   28e64:	ea00003e 	b	28f64 <KeyMapGetString+0x1b0>
	}

	char chChar = (char) nKeyCode;
   28e68:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   28e6c:	e54b300d 	strb	r3, [fp, #-13]
		
	if (nModifiers & (LCTRL | RCTRL))
   28e70:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   28e74:	e2033011 	and	r3, r3, #17
   28e78:	e3530000 	cmp	r3, #0
   28e7c:	0a000017 	beq	28ee0 <KeyMapGetString+0x12c>
	{
		chChar -= 'a';
   28e80:	e55b300d 	ldrb	r3, [fp, #-13]
   28e84:	e2433061 	sub	r3, r3, #97	; 0x61
   28e88:	e6ef3073 	uxtb	r3, r3
   28e8c:	e54b300d 	strb	r3, [fp, #-13]
		if ('\0' <= chChar && chChar <= 'z'-'a')
   28e90:	e15b30dd 	ldrsb	r3, [fp, #-13]
   28e94:	e3530000 	cmp	r3, #0
   28e98:	ba00000e 	blt	28ed8 <KeyMapGetString+0x124>
   28e9c:	e15b30dd 	ldrsb	r3, [fp, #-13]
   28ea0:	e3530019 	cmp	r3, #25
   28ea4:	ca00000b 	bgt	28ed8 <KeyMapGetString+0x124>
		{
			Buffer[0] = chChar + 1;
   28ea8:	e55b300d 	ldrb	r3, [fp, #-13]
   28eac:	e2833001 	add	r3, r3, #1
   28eb0:	e6ef3073 	uxtb	r3, r3
   28eb4:	e6ef2073 	uxtb	r2, r3
   28eb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28ebc:	e5c32000 	strb	r2, [r3]
			Buffer[1] = '\0';
   28ec0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28ec4:	e2833001 	add	r3, r3, #1
   28ec8:	e3a02000 	mov	r2, #0
   28ecc:	e5c32000 	strb	r2, [r3]

			return Buffer;
   28ed0:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
   28ed4:	ea000022 	b	28f64 <KeyMapGetString+0x1b0>
		}
		
		return 0;
   28ed8:	e3a04000 	mov	r4, #0
   28edc:	ea000020 	b	28f64 <KeyMapGetString+0x1b0>
	}

	if (pThis->m_bCapsLock)
   28ee0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28ee4:	e5933180 	ldr	r3, [r3, #384]	; 0x180
   28ee8:	e3530000 	cmp	r3, #0
   28eec:	0a000014 	beq	28f44 <KeyMapGetString+0x190>
	{
		if ('A' <= chChar && chChar <= 'Z')
   28ef0:	e15b30dd 	ldrsb	r3, [fp, #-13]
   28ef4:	e3530040 	cmp	r3, #64	; 0x40
   28ef8:	da000007 	ble	28f1c <KeyMapGetString+0x168>
   28efc:	e15b30dd 	ldrsb	r3, [fp, #-13]
   28f00:	e353005a 	cmp	r3, #90	; 0x5a
   28f04:	ca000004 	bgt	28f1c <KeyMapGetString+0x168>
		{
			chChar += 'a'-'A';
   28f08:	e55b300d 	ldrb	r3, [fp, #-13]
   28f0c:	e2833020 	add	r3, r3, #32
   28f10:	e6ef3073 	uxtb	r3, r3
   28f14:	e54b300d 	strb	r3, [fp, #-13]
   28f18:	ea000009 	b	28f44 <KeyMapGetString+0x190>
		}
		else if ('a' <= chChar && chChar <= 'z')
   28f1c:	e15b30dd 	ldrsb	r3, [fp, #-13]
   28f20:	e3530060 	cmp	r3, #96	; 0x60
   28f24:	da000006 	ble	28f44 <KeyMapGetString+0x190>
   28f28:	e15b30dd 	ldrsb	r3, [fp, #-13]
   28f2c:	e353007a 	cmp	r3, #122	; 0x7a
   28f30:	ca000003 	bgt	28f44 <KeyMapGetString+0x190>
		{
			chChar -= 'a'-'A';
   28f34:	e55b300d 	ldrb	r3, [fp, #-13]
   28f38:	e2433020 	sub	r3, r3, #32
   28f3c:	e6ef3073 	uxtb	r3, r3
   28f40:	e54b300d 	strb	r3, [fp, #-13]
		}
	}

	Buffer[0] = chChar;
   28f44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28f48:	e55b200d 	ldrb	r2, [fp, #-13]
   28f4c:	e5c32000 	strb	r2, [r3]
	Buffer[1] = '\0';
   28f50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28f54:	e2833001 	add	r3, r3, #1
   28f58:	e3a02000 	mov	r2, #0
   28f5c:	e5c32000 	strb	r2, [r3]

	return Buffer;
   28f60:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
   28f64:	e1a03005 	mov	r3, r5
   28f68:	e3080db4 	movw	r0, #36276	; 0x8db4
   28f6c:	e3400002 	movt	r0, #2
   28f70:	e1a01003 	mov	r1, r3
   28f74:	ebffb23a 	bl	15864 <__cyg_profile_func_exit>
   28f78:	e1a03004 	mov	r3, r4
}
   28f7c:	e1a00003 	mov	r0, r3
   28f80:	e24bd00c 	sub	sp, fp, #12
   28f84:	e8bd8830 	pop	{r4, r5, fp, pc}

00028f88 <KeyMapGetLEDStatus>:

u8 KeyMapGetLEDStatus (TKeyMap *pThis)
{
   28f88:	e92d4830 	push	{r4, r5, fp, lr}
   28f8c:	e28db00c 	add	fp, sp, #12
   28f90:	e24dd010 	sub	sp, sp, #16
   28f94:	e1a0500e 	mov	r5, lr
   28f98:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   28f9c:	e1a03005 	mov	r3, r5
   28fa0:	e3080f88 	movw	r0, #36744	; 0x8f88
   28fa4:	e3400002 	movt	r0, #2
   28fa8:	e1a01003 	mov	r1, r3
   28fac:	ebffb1da 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   28fb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28fb4:	e3530000 	cmp	r3, #0
   28fb8:	1a000005 	bne	28fd4 <KeyMapGetLEDStatus+0x4c>
   28fbc:	e30001e0 	movw	r0, #480	; 0x1e0
   28fc0:	e3400003 	movt	r0, #3
   28fc4:	e30011ec 	movw	r1, #492	; 0x1ec
   28fc8:	e3401003 	movt	r1, #3
   28fcc:	e300210a 	movw	r2, #266	; 0x10a
   28fd0:	ebffb676 	bl	169b0 <uspi_assertion_failed>

	u8 nResult = 0;
   28fd4:	e3a03000 	mov	r3, #0
   28fd8:	e54b300d 	strb	r3, [fp, #-13]

	if (pThis->m_bCapsLock)
   28fdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28fe0:	e5933180 	ldr	r3, [r3, #384]	; 0x180
   28fe4:	e3530000 	cmp	r3, #0
   28fe8:	0a000002 	beq	28ff8 <KeyMapGetLEDStatus+0x70>
	{
		nResult |= LED_CAPS_LOCK;
   28fec:	e55b300d 	ldrb	r3, [fp, #-13]
   28ff0:	e3833002 	orr	r3, r3, #2
   28ff4:	e54b300d 	strb	r3, [fp, #-13]
	}

	if (pThis->m_bNumLock)
   28ff8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28ffc:	e5933184 	ldr	r3, [r3, #388]	; 0x184
   29000:	e3530000 	cmp	r3, #0
   29004:	0a000002 	beq	29014 <KeyMapGetLEDStatus+0x8c>
	{
		nResult |= LED_NUM_LOCK;
   29008:	e55b300d 	ldrb	r3, [fp, #-13]
   2900c:	e3833001 	orr	r3, r3, #1
   29010:	e54b300d 	strb	r3, [fp, #-13]
	}

	if (pThis->m_bScrollLock)
   29014:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29018:	e5933188 	ldr	r3, [r3, #392]	; 0x188
   2901c:	e3530000 	cmp	r3, #0
   29020:	0a000002 	beq	29030 <KeyMapGetLEDStatus+0xa8>
	{
		nResult |= LED_SCROLL_LOCK;
   29024:	e55b300d 	ldrb	r3, [fp, #-13]
   29028:	e3833004 	orr	r3, r3, #4
   2902c:	e54b300d 	strb	r3, [fp, #-13]
	}

	return nResult;
   29030:	e55b400d 	ldrb	r4, [fp, #-13]
   29034:	e1a03005 	mov	r3, r5
   29038:	e3080f88 	movw	r0, #36744	; 0x8f88
   2903c:	e3400002 	movt	r0, #2
   29040:	e1a01003 	mov	r1, r3
   29044:	ebffb206 	bl	15864 <__cyg_profile_func_exit>
   29048:	e1a03004 	mov	r3, r4
}
   2904c:	e1a00003 	mov	r0, r3
   29050:	e24bd00c 	sub	sp, fp, #12
   29054:	e8bd8830 	pop	{r4, r5, fp, pc}

00029058 <USBKeyboardDevice>:
#ifdef REPEAT_ENABLE
static void USBKeyboardDeviceTimerHandler (unsigned hTimer, void *pParam, void *pContext);
#endif

void USBKeyboardDevice (TUSBKeyboardDevice *pThis, TUSBDevice *pDevice)
{
   29058:	e92d4810 	push	{r4, fp, lr}
   2905c:	e28db008 	add	fp, sp, #8
   29060:	e24dd00c 	sub	sp, sp, #12
   29064:	e1a0400e 	mov	r4, lr
   29068:	e50b0010 	str	r0, [fp, #-16]
   2906c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   29070:	e1a03004 	mov	r3, r4
   29074:	e3090058 	movw	r0, #36952	; 0x9058
   29078:	e3400002 	movt	r0, #2
   2907c:	e1a01003 	mov	r1, r3
   29080:	ebffb1a5 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   29084:	e51b3010 	ldr	r3, [fp, #-16]
   29088:	e3530000 	cmp	r3, #0
   2908c:	1a000005 	bne	290a8 <USBKeyboardDevice+0x50>
   29090:	e3000250 	movw	r0, #592	; 0x250
   29094:	e3400003 	movt	r0, #3
   29098:	e300125c 	movw	r1, #604	; 0x25c
   2909c:	e3401003 	movt	r1, #3
   290a0:	e3a02031 	mov	r2, #49	; 0x31
   290a4:	ebffb641 	bl	169b0 <uspi_assertion_failed>

	USBDeviceCopy (&pThis->m_USBDevice, pDevice);
   290a8:	e51b3010 	ldr	r3, [fp, #-16]
   290ac:	e1a00003 	mov	r0, r3
   290b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   290b4:	ebffd73d 	bl	1edb0 <USBDeviceCopy>
	pThis->m_USBDevice.Configure = USBKeyboardDeviceConfigure;
   290b8:	e51b2010 	ldr	r2, [fp, #-16]
   290bc:	e309328c 	movw	r3, #37516	; 0x928c
   290c0:	e3403002 	movt	r3, #2
   290c4:	e5823000 	str	r3, [r2]

	pThis->m_pReportEndpoint = 0;
   290c8:	e51b3010 	ldr	r3, [fp, #-16]
   290cc:	e3a02000 	mov	r2, #0
   290d0:	e583203c 	str	r2, [r3, #60]	; 0x3c
	pThis->m_pKeyPressedHandler = 0;
   290d4:	e51b3010 	ldr	r3, [fp, #-16]
   290d8:	e3a02000 	mov	r2, #0
   290dc:	e5832040 	str	r2, [r3, #64]	; 0x40
	pThis->m_pSelectConsoleHandler = 0;
   290e0:	e51b3010 	ldr	r3, [fp, #-16]
   290e4:	e3a02000 	mov	r2, #0
   290e8:	e5832044 	str	r2, [r3, #68]	; 0x44
	pThis->m_pShutdownHandler = 0;
   290ec:	e51b3010 	ldr	r3, [fp, #-16]
   290f0:	e3a02000 	mov	r2, #0
   290f4:	e5832048 	str	r2, [r3, #72]	; 0x48
	pThis->m_pKeyStatusHandlerRaw = 0;
   290f8:	e51b3010 	ldr	r3, [fp, #-16]
   290fc:	e3a02000 	mov	r2, #0
   29100:	e583204c 	str	r2, [r3, #76]	; 0x4c
	pThis->m_pURB = 0;
   29104:	e51b3010 	ldr	r3, [fp, #-16]
   29108:	e3a02000 	mov	r2, #0
   2910c:	e5832050 	str	r2, [r3, #80]	; 0x50
	pThis->m_pReportBuffer = 0;
   29110:	e51b3010 	ldr	r3, [fp, #-16]
   29114:	e3a02000 	mov	r2, #0
   29118:	e5832054 	str	r2, [r3, #84]	; 0x54
	pThis->m_ucLastPhyCode = 0;
   2911c:	e51b3010 	ldr	r3, [fp, #-16]
   29120:	e3a02000 	mov	r2, #0
   29124:	e5c32058 	strb	r2, [r3, #88]	; 0x58
	pThis->m_hTimer = 0;
   29128:	e51b3010 	ldr	r3, [fp, #-16]
   2912c:	e3a02000 	mov	r2, #0
   29130:	e583205c 	str	r2, [r3, #92]	; 0x5c

	KeyMap (&pThis->m_KeyMap);
   29134:	e51b3010 	ldr	r3, [fp, #-16]
   29138:	e2833060 	add	r3, r3, #96	; 0x60
   2913c:	e1a00003 	mov	r0, r3
   29140:	ebfffdcd 	bl	2887c <KeyMap>

	pThis->m_pReportBuffer = malloc (BOOT_REPORT_SIZE);
   29144:	e3a00008 	mov	r0, #8
   29148:	ebffb642 	bl	16a58 <malloc>
   2914c:	e1a03000 	mov	r3, r0
   29150:	e1a02003 	mov	r2, r3
   29154:	e51b3010 	ldr	r3, [fp, #-16]
   29158:	e5832054 	str	r2, [r3, #84]	; 0x54
	assert (pThis->m_pReportBuffer != 0);
   2915c:	e51b3010 	ldr	r3, [fp, #-16]
   29160:	e5933054 	ldr	r3, [r3, #84]	; 0x54
   29164:	e3530000 	cmp	r3, #0
   29168:	1a000005 	bne	29184 <USBKeyboardDevice+0x12c>
   2916c:	e30002bc 	movw	r0, #700	; 0x2bc
   29170:	e3400003 	movt	r0, #3
   29174:	e300125c 	movw	r1, #604	; 0x25c
   29178:	e3401003 	movt	r1, #3
   2917c:	e3a02043 	mov	r2, #67	; 0x43
   29180:	ebffb60a 	bl	169b0 <uspi_assertion_failed>
   29184:	e1a03004 	mov	r3, r4
   29188:	e3090058 	movw	r0, #36952	; 0x9058
   2918c:	e3400002 	movt	r0, #2
   29190:	e1a01003 	mov	r1, r3
   29194:	ebffb1b2 	bl	15864 <__cyg_profile_func_exit>
}
   29198:	e24bd008 	sub	sp, fp, #8
   2919c:	e8bd8810 	pop	{r4, fp, pc}

000291a0 <_CUSBKeyboardDevice>:

void _CUSBKeyboardDevice (TUSBKeyboardDevice *pThis)
{
   291a0:	e92d4810 	push	{r4, fp, lr}
   291a4:	e28db008 	add	fp, sp, #8
   291a8:	e24dd00c 	sub	sp, sp, #12
   291ac:	e1a0400e 	mov	r4, lr
   291b0:	e50b0010 	str	r0, [fp, #-16]
   291b4:	e1a03004 	mov	r3, r4
   291b8:	e30901a0 	movw	r0, #37280	; 0x91a0
   291bc:	e3400002 	movt	r0, #2
   291c0:	e1a01003 	mov	r1, r3
   291c4:	ebffb154 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   291c8:	e51b3010 	ldr	r3, [fp, #-16]
   291cc:	e3530000 	cmp	r3, #0
   291d0:	1a000005 	bne	291ec <_CUSBKeyboardDevice+0x4c>
   291d4:	e3000250 	movw	r0, #592	; 0x250
   291d8:	e3400003 	movt	r0, #3
   291dc:	e300125c 	movw	r1, #604	; 0x25c
   291e0:	e3401003 	movt	r1, #3
   291e4:	e3a02048 	mov	r2, #72	; 0x48
   291e8:	ebffb5f0 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pReportBuffer != 0)
   291ec:	e51b3010 	ldr	r3, [fp, #-16]
   291f0:	e5933054 	ldr	r3, [r3, #84]	; 0x54
   291f4:	e3530000 	cmp	r3, #0
   291f8:	0a000006 	beq	29218 <_CUSBKeyboardDevice+0x78>
	{
		free (pThis->m_pReportBuffer);
   291fc:	e51b3010 	ldr	r3, [fp, #-16]
   29200:	e5933054 	ldr	r3, [r3, #84]	; 0x54
   29204:	e1a00003 	mov	r0, r3
   29208:	ebffb628 	bl	16ab0 <free>
		pThis->m_pReportBuffer = 0;
   2920c:	e51b3010 	ldr	r3, [fp, #-16]
   29210:	e3a02000 	mov	r2, #0
   29214:	e5832054 	str	r2, [r3, #84]	; 0x54
	}

	if (pThis->m_pReportEndpoint != 0)
   29218:	e51b3010 	ldr	r3, [fp, #-16]
   2921c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   29220:	e3530000 	cmp	r3, #0
   29224:	0a00000a 	beq	29254 <_CUSBKeyboardDevice+0xb4>
	{
		_USBEndpoint (pThis->m_pReportEndpoint);
   29228:	e51b3010 	ldr	r3, [fp, #-16]
   2922c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   29230:	e1a00003 	mov	r0, r3
   29234:	ebffdeb6 	bl	20d14 <_USBEndpoint>
		free (pThis->m_pReportEndpoint);
   29238:	e51b3010 	ldr	r3, [fp, #-16]
   2923c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   29240:	e1a00003 	mov	r0, r3
   29244:	ebffb619 	bl	16ab0 <free>
		pThis->m_pReportEndpoint = 0;
   29248:	e51b3010 	ldr	r3, [fp, #-16]
   2924c:	e3a02000 	mov	r2, #0
   29250:	e583203c 	str	r2, [r3, #60]	; 0x3c
	}

	_KeyMap (&pThis->m_KeyMap);
   29254:	e51b3010 	ldr	r3, [fp, #-16]
   29258:	e2833060 	add	r3, r3, #96	; 0x60
   2925c:	e1a00003 	mov	r0, r3
   29260:	ebfffdae 	bl	28920 <_KeyMap>
	_USBDevice (&pThis->m_USBDevice);
   29264:	e51b3010 	ldr	r3, [fp, #-16]
   29268:	e1a00003 	mov	r0, r3
   2926c:	ebffd79f 	bl	1f0f0 <_USBDevice>
   29270:	e1a03004 	mov	r3, r4
   29274:	e30901a0 	movw	r0, #37280	; 0x91a0
   29278:	e3400002 	movt	r0, #2
   2927c:	e1a01003 	mov	r1, r3
   29280:	ebffb177 	bl	15864 <__cyg_profile_func_exit>
}
   29284:	e24bd008 	sub	sp, fp, #8
   29288:	e8bd8810 	pop	{r4, fp, pc}

0002928c <USBKeyboardDeviceConfigure>:

boolean USBKeyboardDeviceConfigure (TUSBDevice *pUSBDevice)
{
   2928c:	e92d4830 	push	{r4, r5, fp, lr}
   29290:	e28db00c 	add	fp, sp, #12
   29294:	e24dd038 	sub	sp, sp, #56	; 0x38
   29298:	e1a0500e 	mov	r5, lr
   2929c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   292a0:	e1a03005 	mov	r3, r5
   292a4:	e309028c 	movw	r0, #37516	; 0x928c
   292a8:	e3400002 	movt	r0, #2
   292ac:	e1a01003 	mov	r1, r3
   292b0:	ebffb119 	bl	1571c <__cyg_profile_func_enter>
	TUSBKeyboardDevice *pThis = (TUSBKeyboardDevice *) pUSBDevice;
   292b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   292b8:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   292bc:	e51b3010 	ldr	r3, [fp, #-16]
   292c0:	e3530000 	cmp	r3, #0
   292c4:	1a000005 	bne	292e0 <USBKeyboardDeviceConfigure+0x54>
   292c8:	e3000250 	movw	r0, #592	; 0x250
   292cc:	e3400003 	movt	r0, #3
   292d0:	e300125c 	movw	r1, #604	; 0x25c
   292d4:	e3401003 	movt	r1, #3
   292d8:	e3a0205e 	mov	r2, #94	; 0x5e
   292dc:	ebffb5b3 	bl	169b0 <uspi_assertion_failed>

	TUSBConfigurationDescriptor *pConfDesc =
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
   292e0:	e51b3010 	ldr	r3, [fp, #-16]
boolean USBKeyboardDeviceConfigure (TUSBDevice *pUSBDevice)
{
	TUSBKeyboardDevice *pThis = (TUSBKeyboardDevice *) pUSBDevice;
	assert (pThis != 0);

	TUSBConfigurationDescriptor *pConfDesc =
   292e4:	e1a00003 	mov	r0, r3
   292e8:	e3a01002 	mov	r1, #2
   292ec:	ebffdbbc 	bl	201e4 <USBDeviceGetDescriptor>
   292f0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
	if (   pConfDesc == 0
   292f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   292f8:	e3530000 	cmp	r3, #0
   292fc:	0a000003 	beq	29310 <USBKeyboardDeviceConfigure+0x84>
	    || pConfDesc->bNumInterfaces <  1)
   29300:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29304:	e5d33004 	ldrb	r3, [r3, #4]
   29308:	e3530000 	cmp	r3, #0
   2930c:	1a000006 	bne	2932c <USBKeyboardDeviceConfigure+0xa0>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBKbd);
   29310:	e51b3010 	ldr	r3, [fp, #-16]
   29314:	e1a00003 	mov	r0, r3
   29318:	e3001248 	movw	r1, #584	; 0x248
   2931c:	e3401003 	movt	r1, #3
   29320:	ebffdbde 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   29324:	e3a04000 	mov	r4, #0
   29328:	ea0000d8 	b	29690 <USBKeyboardDeviceConfigure+0x404>
	}

	TUSBInterfaceDescriptor *pInterfaceDesc;
	while ((pInterfaceDesc = (TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE)) != 0)
   2932c:	ea00004e 	b	2946c <USBKeyboardDeviceConfigure+0x1e0>
	{
		if (   pInterfaceDesc->bNumEndpoints	  <  1
   29330:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29334:	e5d33004 	ldrb	r3, [r3, #4]
   29338:	e3530000 	cmp	r3, #0
   2933c:	0a00000b 	beq	29370 <USBKeyboardDeviceConfigure+0xe4>
		    || pInterfaceDesc->bInterfaceClass	  != 0x03	// HID Class
   29340:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29344:	e5d33005 	ldrb	r3, [r3, #5]
   29348:	e3530003 	cmp	r3, #3
   2934c:	1a000007 	bne	29370 <USBKeyboardDeviceConfigure+0xe4>
		    || pInterfaceDesc->bInterfaceSubClass != 0x01	// Boot Interface Subclass
   29350:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29354:	e5d33006 	ldrb	r3, [r3, #6]
   29358:	e3530001 	cmp	r3, #1
   2935c:	1a000003 	bne	29370 <USBKeyboardDeviceConfigure+0xe4>
		    || pInterfaceDesc->bInterfaceProtocol != 0x01)	// Keyboard
   29360:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29364:	e5d33007 	ldrb	r3, [r3, #7]
   29368:	e3530001 	cmp	r3, #1
   2936c:	0a000000 	beq	29374 <USBKeyboardDeviceConfigure+0xe8>
		{
			continue;
   29370:	ea00003d 	b	2946c <USBKeyboardDeviceConfigure+0x1e0>
		}

		pThis->m_ucInterfaceNumber  = pInterfaceDesc->bInterfaceNumber;
   29374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29378:	e5d32002 	ldrb	r2, [r3, #2]
   2937c:	e51b3010 	ldr	r3, [fp, #-16]
   29380:	e5c32038 	strb	r2, [r3, #56]	; 0x38
		pThis->m_ucAlternateSetting = pInterfaceDesc->bAlternateSetting;
   29384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29388:	e5d32003 	ldrb	r2, [r3, #3]
   2938c:	e51b3010 	ldr	r3, [fp, #-16]
   29390:	e5c32039 	strb	r2, [r3, #57]	; 0x39

		TUSBEndpointDescriptor *pEndpointDesc =
			(TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT);
   29394:	e51b3010 	ldr	r3, [fp, #-16]
		}

		pThis->m_ucInterfaceNumber  = pInterfaceDesc->bInterfaceNumber;
		pThis->m_ucAlternateSetting = pInterfaceDesc->bAlternateSetting;

		TUSBEndpointDescriptor *pEndpointDesc =
   29398:	e1a00003 	mov	r0, r3
   2939c:	e3a01005 	mov	r1, #5
   293a0:	ebffdb8f 	bl	201e4 <USBDeviceGetDescriptor>
   293a4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
			(TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT);
		if (   pEndpointDesc == 0
   293a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   293ac:	e3530000 	cmp	r3, #0
   293b0:	0a00000a 	beq	293e0 <USBKeyboardDeviceConfigure+0x154>
		    || (pEndpointDesc->bEndpointAddress & 0x80) != 0x80		// Input EP
   293b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   293b8:	e5d33002 	ldrb	r3, [r3, #2]
   293bc:	e6ef3073 	uxtb	r3, r3
   293c0:	e6af3073 	sxtb	r3, r3
   293c4:	e3530000 	cmp	r3, #0
   293c8:	aa000004 	bge	293e0 <USBKeyboardDeviceConfigure+0x154>
		    || (pEndpointDesc->bmAttributes     & 0x3F)	!= 0x03)	// Interrupt EP
   293cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   293d0:	e5d33003 	ldrb	r3, [r3, #3]
   293d4:	e203303f 	and	r3, r3, #63	; 0x3f
   293d8:	e3530003 	cmp	r3, #3
   293dc:	0a000000 	beq	293e4 <USBKeyboardDeviceConfigure+0x158>
		{
			continue;
   293e0:	ea000021 	b	2946c <USBKeyboardDeviceConfigure+0x1e0>
		}

		assert (pThis->m_pReportEndpoint == 0);
   293e4:	e51b3010 	ldr	r3, [fp, #-16]
   293e8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   293ec:	e3530000 	cmp	r3, #0
   293f0:	0a000005 	beq	2940c <USBKeyboardDeviceConfigure+0x180>
   293f4:	e30002d8 	movw	r0, #728	; 0x2d8
   293f8:	e3400003 	movt	r0, #3
   293fc:	e300125c 	movw	r1, #604	; 0x25c
   29400:	e3401003 	movt	r1, #3
   29404:	e3a02081 	mov	r2, #129	; 0x81
   29408:	ebffb568 	bl	169b0 <uspi_assertion_failed>
		pThis->m_pReportEndpoint = malloc (sizeof (TUSBEndpoint));
   2940c:	e3a00018 	mov	r0, #24
   29410:	ebffb590 	bl	16a58 <malloc>
   29414:	e1a03000 	mov	r3, r0
   29418:	e1a02003 	mov	r2, r3
   2941c:	e51b3010 	ldr	r3, [fp, #-16]
   29420:	e583203c 	str	r2, [r3, #60]	; 0x3c
		assert (pThis->m_pReportEndpoint != 0);
   29424:	e51b3010 	ldr	r3, [fp, #-16]
   29428:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2942c:	e3530000 	cmp	r3, #0
   29430:	1a000005 	bne	2944c <USBKeyboardDeviceConfigure+0x1c0>
   29434:	e30002f8 	movw	r0, #760	; 0x2f8
   29438:	e3400003 	movt	r0, #3
   2943c:	e300125c 	movw	r1, #604	; 0x25c
   29440:	e3401003 	movt	r1, #3
   29444:	e3a02083 	mov	r2, #131	; 0x83
   29448:	ebffb558 	bl	169b0 <uspi_assertion_failed>
		USBEndpoint2 (pThis->m_pReportEndpoint, &pThis->m_USBDevice, pEndpointDesc);
   2944c:	e51b3010 	ldr	r3, [fp, #-16]
   29450:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   29454:	e51b3010 	ldr	r3, [fp, #-16]
   29458:	e1a00002 	mov	r0, r2
   2945c:	e1a01003 	mov	r1, r3
   29460:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   29464:	ebffdd37 	bl	20948 <USBEndpoint2>

		break;
   29468:	ea000007 	b	2948c <USBKeyboardDeviceConfigure+0x200>

		return FALSE;
	}

	TUSBInterfaceDescriptor *pInterfaceDesc;
	while ((pInterfaceDesc = (TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE)) != 0)
   2946c:	e51b3010 	ldr	r3, [fp, #-16]
   29470:	e1a00003 	mov	r0, r3
   29474:	e3a01004 	mov	r1, #4
   29478:	ebffdb59 	bl	201e4 <USBDeviceGetDescriptor>
   2947c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   29480:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29484:	e3530000 	cmp	r3, #0
   29488:	1affffa8 	bne	29330 <USBKeyboardDeviceConfigure+0xa4>
		USBEndpoint2 (pThis->m_pReportEndpoint, &pThis->m_USBDevice, pEndpointDesc);

		break;
	}

	if (pThis->m_pReportEndpoint == 0)
   2948c:	e51b3010 	ldr	r3, [fp, #-16]
   29490:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   29494:	e3530000 	cmp	r3, #0
   29498:	1a000006 	bne	294b8 <USBKeyboardDeviceConfigure+0x22c>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBKbd);
   2949c:	e51b3010 	ldr	r3, [fp, #-16]
   294a0:	e1a00003 	mov	r0, r3
   294a4:	e3001248 	movw	r1, #584	; 0x248
   294a8:	e3401003 	movt	r1, #3
   294ac:	ebffdb7b 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   294b0:	e3a04000 	mov	r4, #0
   294b4:	ea000075 	b	29690 <USBKeyboardDeviceConfigure+0x404>
	}
	
	if (!USBDeviceConfigure (&pThis->m_USBDevice))
   294b8:	e51b3010 	ldr	r3, [fp, #-16]
   294bc:	e1a00003 	mov	r0, r3
   294c0:	ebffd939 	bl	1f9ac <USBDeviceConfigure>
   294c4:	e1a03000 	mov	r3, r0
   294c8:	e3530000 	cmp	r3, #0
   294cc:	1a000007 	bne	294f0 <USBKeyboardDeviceConfigure+0x264>
	{
		LogWrite (FromUSBKbd, LOG_ERROR, "Cannot set configuration");
   294d0:	e3000248 	movw	r0, #584	; 0x248
   294d4:	e3400003 	movt	r0, #3
   294d8:	e3a01001 	mov	r1, #1
   294dc:	e3002318 	movw	r2, #792	; 0x318
   294e0:	e3402003 	movt	r2, #3
   294e4:	ebffb519 	bl	16950 <LogWrite>

		return FALSE;
   294e8:	e3a04000 	mov	r4, #0
   294ec:	ea000067 	b	29690 <USBKeyboardDeviceConfigure+0x404>
	}

	if (pThis->m_ucAlternateSetting != 0)
   294f0:	e51b3010 	ldr	r3, [fp, #-16]
   294f4:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
   294f8:	e3530000 	cmp	r3, #0
   294fc:	0a000022 	beq	2958c <USBKeyboardDeviceConfigure+0x300>
	{
		if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   29500:	e51b3010 	ldr	r3, [fp, #-16]
   29504:	e1a00003 	mov	r0, r3
   29508:	ebffdabd 	bl	20004 <USBDeviceGetHost>
   2950c:	e1a04000 	mov	r4, r0
					USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   29510:	e51b3010 	ldr	r3, [fp, #-16]
   29514:	e1a00003 	mov	r0, r3
   29518:	ebffda91 	bl	1ff64 <USBDeviceGetEndpoint0>
   2951c:	e1a01000 	mov	r1, r0
					REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
					pThis->m_ucAlternateSetting,
   29520:	e51b3010 	ldr	r3, [fp, #-16]
   29524:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
		return FALSE;
	}

	if (pThis->m_ucAlternateSetting != 0)
	{
		if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   29528:	e6ff2073 	uxth	r2, r3
					USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
					REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
					pThis->m_ucAlternateSetting,
					pThis->m_ucInterfaceNumber, 0, 0) < 0)
   2952c:	e51b3010 	ldr	r3, [fp, #-16]
   29530:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
		return FALSE;
	}

	if (pThis->m_ucAlternateSetting != 0)
	{
		if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   29534:	e6ff3073 	uxth	r3, r3
   29538:	e58d2000 	str	r2, [sp]
   2953c:	e58d3004 	str	r3, [sp, #4]
   29540:	e3a03000 	mov	r3, #0
   29544:	e58d3008 	str	r3, [sp, #8]
   29548:	e3a03000 	mov	r3, #0
   2954c:	e58d300c 	str	r3, [sp, #12]
   29550:	e1a00004 	mov	r0, r4
   29554:	e3a02001 	mov	r2, #1
   29558:	e3a0300b 	mov	r3, #11
   2955c:	ebffbd80 	bl	18b64 <DWHCIDeviceControlMessage>
   29560:	e1a03000 	mov	r3, r0
   29564:	e3530000 	cmp	r3, #0
   29568:	aa000007 	bge	2958c <USBKeyboardDeviceConfigure+0x300>
					USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
					REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
					pThis->m_ucAlternateSetting,
					pThis->m_ucInterfaceNumber, 0, 0) < 0)
		{
			LogWrite (FromUSBKbd, LOG_ERROR, "Cannot set interface");
   2956c:	e3000248 	movw	r0, #584	; 0x248
   29570:	e3400003 	movt	r0, #3
   29574:	e3a01001 	mov	r1, #1
   29578:	e3002334 	movw	r2, #820	; 0x334
   2957c:	e3402003 	movt	r2, #3
   29580:	ebffb4f2 	bl	16950 <LogWrite>

			return FALSE;
   29584:	e3a04000 	mov	r4, #0
   29588:	ea000040 	b	29690 <USBKeyboardDeviceConfigure+0x404>
		}
	}

	if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2958c:	e51b3010 	ldr	r3, [fp, #-16]
   29590:	e1a00003 	mov	r0, r3
   29594:	ebffda9a 	bl	20004 <USBDeviceGetHost>
   29598:	e1a04000 	mov	r4, r0
				       USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   2959c:	e51b3010 	ldr	r3, [fp, #-16]
   295a0:	e1a00003 	mov	r0, r3
   295a4:	ebffda6e 	bl	1ff64 <USBDeviceGetEndpoint0>
   295a8:	e1a01000 	mov	r1, r0
				       REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_INTERFACE,
				       SET_PROTOCOL, BOOT_PROTOCOL,
				       pThis->m_ucInterfaceNumber, 0, 0) < 0)
   295ac:	e51b3010 	ldr	r3, [fp, #-16]
   295b0:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38

			return FALSE;
		}
	}

	if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   295b4:	e6ff3073 	uxth	r3, r3
   295b8:	e3a02000 	mov	r2, #0
   295bc:	e58d2000 	str	r2, [sp]
   295c0:	e58d3004 	str	r3, [sp, #4]
   295c4:	e3a03000 	mov	r3, #0
   295c8:	e58d3008 	str	r3, [sp, #8]
   295cc:	e3a03000 	mov	r3, #0
   295d0:	e58d300c 	str	r3, [sp, #12]
   295d4:	e1a00004 	mov	r0, r4
   295d8:	e3a02021 	mov	r2, #33	; 0x21
   295dc:	e3a0300b 	mov	r3, #11
   295e0:	ebffbd5f 	bl	18b64 <DWHCIDeviceControlMessage>
   295e4:	e1a03000 	mov	r3, r0
   295e8:	e3530000 	cmp	r3, #0
   295ec:	aa000007 	bge	29610 <USBKeyboardDeviceConfigure+0x384>
				       USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
				       REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_INTERFACE,
				       SET_PROTOCOL, BOOT_PROTOCOL,
				       pThis->m_ucInterfaceNumber, 0, 0) < 0)
	{
		LogWrite (FromUSBKbd, LOG_ERROR, "Cannot set boot protocol");
   295f0:	e3000248 	movw	r0, #584	; 0x248
   295f4:	e3400003 	movt	r0, #3
   295f8:	e3a01001 	mov	r1, #1
   295fc:	e300234c 	movw	r2, #844	; 0x34c
   29600:	e3402003 	movt	r2, #3
   29604:	ebffb4d1 	bl	16950 <LogWrite>

		return FALSE;
   29608:	e3a04000 	mov	r4, #0
   2960c:	ea00001f 	b	29690 <USBKeyboardDeviceConfigure+0x404>
	}

	TString DeviceName;
	String (&DeviceName);
   29610:	e24b3028 	sub	r3, fp, #40	; 0x28
   29614:	e1a00003 	mov	r0, r3
   29618:	ebffedea 	bl	24dc8 <String>
	StringFormat (&DeviceName, "ukbd%u", s_nDeviceNumber++);
   2961c:	e3003c50 	movw	r3, #3152	; 0xc50
   29620:	e3403003 	movt	r3, #3
   29624:	e5932000 	ldr	r2, [r3]
   29628:	e2821001 	add	r1, r2, #1
   2962c:	e3003c50 	movw	r3, #3152	; 0xc50
   29630:	e3403003 	movt	r3, #3
   29634:	e5831000 	str	r1, [r3]
   29638:	e24b3028 	sub	r3, fp, #40	; 0x28
   2963c:	e1a00003 	mov	r0, r3
   29640:	e3001368 	movw	r1, #872	; 0x368
   29644:	e3401003 	movt	r1, #3
   29648:	ebffef82 	bl	25458 <StringFormat>
	DeviceNameServiceAddDevice (DeviceNameServiceGet (), StringGet (&DeviceName), pThis, FALSE);
   2964c:	ebffe7ba 	bl	2353c <DeviceNameServiceGet>
   29650:	e1a04000 	mov	r4, r0
   29654:	e24b3028 	sub	r3, fp, #40	; 0x28
   29658:	e1a00003 	mov	r0, r3
   2965c:	ebffee4c 	bl	24f94 <StringGet>
   29660:	e1a03000 	mov	r3, r0
   29664:	e1a00004 	mov	r0, r4
   29668:	e1a01003 	mov	r1, r3
   2966c:	e51b2010 	ldr	r2, [fp, #-16]
   29670:	e3a03000 	mov	r3, #0
   29674:	ebffe6f8 	bl	2325c <DeviceNameServiceAddDevice>

	_String (&DeviceName);
   29678:	e24b3028 	sub	r3, fp, #40	; 0x28
   2967c:	e1a00003 	mov	r0, r3
   29680:	ebffee1e 	bl	24f00 <_String>

	return USBKeyboardDeviceStartRequest (pThis);
   29684:	e51b0010 	ldr	r0, [fp, #-16]
   29688:	eb000118 	bl	29af0 <USBKeyboardDeviceStartRequest>
   2968c:	e1a04000 	mov	r4, r0
   29690:	e1a03005 	mov	r3, r5
   29694:	e309028c 	movw	r0, #37516	; 0x928c
   29698:	e3400002 	movt	r0, #2
   2969c:	e1a01003 	mov	r1, r3
   296a0:	ebffb06f 	bl	15864 <__cyg_profile_func_exit>
   296a4:	e1a03004 	mov	r3, r4
}
   296a8:	e1a00003 	mov	r0, r3
   296ac:	e24bd00c 	sub	sp, fp, #12
   296b0:	e8bd8830 	pop	{r4, r5, fp, pc}

000296b4 <USBKeyboardDeviceRegisterKeyPressedHandler>:

void USBKeyboardDeviceRegisterKeyPressedHandler (TUSBKeyboardDevice *pThis, TKeyPressedHandler *pKeyPressedHandler)
{
   296b4:	e92d4810 	push	{r4, fp, lr}
   296b8:	e28db008 	add	fp, sp, #8
   296bc:	e24dd00c 	sub	sp, sp, #12
   296c0:	e1a0400e 	mov	r4, lr
   296c4:	e50b0010 	str	r0, [fp, #-16]
   296c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   296cc:	e1a03004 	mov	r3, r4
   296d0:	e30906b4 	movw	r0, #38580	; 0x96b4
   296d4:	e3400002 	movt	r0, #2
   296d8:	e1a01003 	mov	r1, r3
   296dc:	ebffb00e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   296e0:	e51b3010 	ldr	r3, [fp, #-16]
   296e4:	e3530000 	cmp	r3, #0
   296e8:	1a000005 	bne	29704 <USBKeyboardDeviceRegisterKeyPressedHandler+0x50>
   296ec:	e3000250 	movw	r0, #592	; 0x250
   296f0:	e3400003 	movt	r0, #3
   296f4:	e300125c 	movw	r1, #604	; 0x25c
   296f8:	e3401003 	movt	r1, #3
   296fc:	e3a020bc 	mov	r2, #188	; 0xbc
   29700:	ebffb4aa 	bl	169b0 <uspi_assertion_failed>
	assert (pKeyPressedHandler != 0);
   29704:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29708:	e3530000 	cmp	r3, #0
   2970c:	1a000005 	bne	29728 <USBKeyboardDeviceRegisterKeyPressedHandler+0x74>
   29710:	e3000370 	movw	r0, #880	; 0x370
   29714:	e3400003 	movt	r0, #3
   29718:	e300125c 	movw	r1, #604	; 0x25c
   2971c:	e3401003 	movt	r1, #3
   29720:	e3a020bd 	mov	r2, #189	; 0xbd
   29724:	ebffb4a1 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pKeyPressedHandler = pKeyPressedHandler;
   29728:	e51b3010 	ldr	r3, [fp, #-16]
   2972c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   29730:	e5832040 	str	r2, [r3, #64]	; 0x40
   29734:	e1a03004 	mov	r3, r4
   29738:	e30906b4 	movw	r0, #38580	; 0x96b4
   2973c:	e3400002 	movt	r0, #2
   29740:	e1a01003 	mov	r1, r3
   29744:	ebffb046 	bl	15864 <__cyg_profile_func_exit>
}
   29748:	e24bd008 	sub	sp, fp, #8
   2974c:	e8bd8810 	pop	{r4, fp, pc}

00029750 <USBKeyboardDeviceRegisterSelectConsoleHandler>:

void USBKeyboardDeviceRegisterSelectConsoleHandler (TUSBKeyboardDevice *pThis, TSelectConsoleHandler *pSelectConsoleHandler)
{
   29750:	e92d4810 	push	{r4, fp, lr}
   29754:	e28db008 	add	fp, sp, #8
   29758:	e24dd00c 	sub	sp, sp, #12
   2975c:	e1a0400e 	mov	r4, lr
   29760:	e50b0010 	str	r0, [fp, #-16]
   29764:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   29768:	e1a03004 	mov	r3, r4
   2976c:	e3090750 	movw	r0, #38736	; 0x9750
   29770:	e3400002 	movt	r0, #2
   29774:	e1a01003 	mov	r1, r3
   29778:	ebffafe7 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2977c:	e51b3010 	ldr	r3, [fp, #-16]
   29780:	e3530000 	cmp	r3, #0
   29784:	1a000005 	bne	297a0 <USBKeyboardDeviceRegisterSelectConsoleHandler+0x50>
   29788:	e3000250 	movw	r0, #592	; 0x250
   2978c:	e3400003 	movt	r0, #3
   29790:	e300125c 	movw	r1, #604	; 0x25c
   29794:	e3401003 	movt	r1, #3
   29798:	e3a020c3 	mov	r2, #195	; 0xc3
   2979c:	ebffb483 	bl	169b0 <uspi_assertion_failed>
	assert (pSelectConsoleHandler != 0);
   297a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   297a4:	e3530000 	cmp	r3, #0
   297a8:	1a000005 	bne	297c4 <USBKeyboardDeviceRegisterSelectConsoleHandler+0x74>
   297ac:	e3000388 	movw	r0, #904	; 0x388
   297b0:	e3400003 	movt	r0, #3
   297b4:	e300125c 	movw	r1, #604	; 0x25c
   297b8:	e3401003 	movt	r1, #3
   297bc:	e3a020c4 	mov	r2, #196	; 0xc4
   297c0:	ebffb47a 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pSelectConsoleHandler = pSelectConsoleHandler;
   297c4:	e51b3010 	ldr	r3, [fp, #-16]
   297c8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   297cc:	e5832044 	str	r2, [r3, #68]	; 0x44
   297d0:	e1a03004 	mov	r3, r4
   297d4:	e3090750 	movw	r0, #38736	; 0x9750
   297d8:	e3400002 	movt	r0, #2
   297dc:	e1a01003 	mov	r1, r3
   297e0:	ebffb01f 	bl	15864 <__cyg_profile_func_exit>
}
   297e4:	e24bd008 	sub	sp, fp, #8
   297e8:	e8bd8810 	pop	{r4, fp, pc}

000297ec <USBKeyboardDeviceRegisterShutdownHandler>:

void USBKeyboardDeviceRegisterShutdownHandler (TUSBKeyboardDevice *pThis, TShutdownHandler *pShutdownHandler)
{
   297ec:	e92d4810 	push	{r4, fp, lr}
   297f0:	e28db008 	add	fp, sp, #8
   297f4:	e24dd00c 	sub	sp, sp, #12
   297f8:	e1a0400e 	mov	r4, lr
   297fc:	e50b0010 	str	r0, [fp, #-16]
   29800:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   29804:	e1a03004 	mov	r3, r4
   29808:	e30907ec 	movw	r0, #38892	; 0x97ec
   2980c:	e3400002 	movt	r0, #2
   29810:	e1a01003 	mov	r1, r3
   29814:	ebffafc0 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   29818:	e51b3010 	ldr	r3, [fp, #-16]
   2981c:	e3530000 	cmp	r3, #0
   29820:	1a000005 	bne	2983c <USBKeyboardDeviceRegisterShutdownHandler+0x50>
   29824:	e3000250 	movw	r0, #592	; 0x250
   29828:	e3400003 	movt	r0, #3
   2982c:	e300125c 	movw	r1, #604	; 0x25c
   29830:	e3401003 	movt	r1, #3
   29834:	e3a020ca 	mov	r2, #202	; 0xca
   29838:	ebffb45c 	bl	169b0 <uspi_assertion_failed>
	assert (pShutdownHandler != 0);
   2983c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29840:	e3530000 	cmp	r3, #0
   29844:	1a000005 	bne	29860 <USBKeyboardDeviceRegisterShutdownHandler+0x74>
   29848:	e30003a4 	movw	r0, #932	; 0x3a4
   2984c:	e3400003 	movt	r0, #3
   29850:	e300125c 	movw	r1, #604	; 0x25c
   29854:	e3401003 	movt	r1, #3
   29858:	e3a020cb 	mov	r2, #203	; 0xcb
   2985c:	ebffb453 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pShutdownHandler = pShutdownHandler;
   29860:	e51b3010 	ldr	r3, [fp, #-16]
   29864:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   29868:	e5832048 	str	r2, [r3, #72]	; 0x48
   2986c:	e1a03004 	mov	r3, r4
   29870:	e30907ec 	movw	r0, #38892	; 0x97ec
   29874:	e3400002 	movt	r0, #2
   29878:	e1a01003 	mov	r1, r3
   2987c:	ebffaff8 	bl	15864 <__cyg_profile_func_exit>
}
   29880:	e24bd008 	sub	sp, fp, #8
   29884:	e8bd8810 	pop	{r4, fp, pc}

00029888 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw>:

void USBKeyboardDeviceRegisterKeyStatusHandlerRaw (TUSBKeyboardDevice *pThis, TKeyStatusHandlerRaw *pKeyStatusHandlerRaw)
{
   29888:	e92d4810 	push	{r4, fp, lr}
   2988c:	e28db008 	add	fp, sp, #8
   29890:	e24dd00c 	sub	sp, sp, #12
   29894:	e1a0400e 	mov	r4, lr
   29898:	e50b0010 	str	r0, [fp, #-16]
   2989c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   298a0:	e1a03004 	mov	r3, r4
   298a4:	e3090888 	movw	r0, #39048	; 0x9888
   298a8:	e3400002 	movt	r0, #2
   298ac:	e1a01003 	mov	r1, r3
   298b0:	ebffaf99 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   298b4:	e51b3010 	ldr	r3, [fp, #-16]
   298b8:	e3530000 	cmp	r3, #0
   298bc:	1a000005 	bne	298d8 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw+0x50>
   298c0:	e3000250 	movw	r0, #592	; 0x250
   298c4:	e3400003 	movt	r0, #3
   298c8:	e300125c 	movw	r1, #604	; 0x25c
   298cc:	e3401003 	movt	r1, #3
   298d0:	e3a020d1 	mov	r2, #209	; 0xd1
   298d4:	ebffb435 	bl	169b0 <uspi_assertion_failed>
	assert (pKeyStatusHandlerRaw != 0);
   298d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   298dc:	e3530000 	cmp	r3, #0
   298e0:	1a000005 	bne	298fc <USBKeyboardDeviceRegisterKeyStatusHandlerRaw+0x74>
   298e4:	e30003bc 	movw	r0, #956	; 0x3bc
   298e8:	e3400003 	movt	r0, #3
   298ec:	e300125c 	movw	r1, #604	; 0x25c
   298f0:	e3401003 	movt	r1, #3
   298f4:	e3a020d2 	mov	r2, #210	; 0xd2
   298f8:	ebffb42c 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pKeyStatusHandlerRaw = pKeyStatusHandlerRaw;
   298fc:	e51b3010 	ldr	r3, [fp, #-16]
   29900:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   29904:	e583204c 	str	r2, [r3, #76]	; 0x4c
   29908:	e1a03004 	mov	r3, r4
   2990c:	e3090888 	movw	r0, #39048	; 0x9888
   29910:	e3400002 	movt	r0, #2
   29914:	e1a01003 	mov	r1, r3
   29918:	ebffafd1 	bl	15864 <__cyg_profile_func_exit>
}
   2991c:	e24bd008 	sub	sp, fp, #8
   29920:	e8bd8810 	pop	{r4, fp, pc}

00029924 <USBKeyboardDeviceGenerateKeyEvent>:

void USBKeyboardDeviceGenerateKeyEvent (TUSBKeyboardDevice *pThis, u8 ucPhyCode)
{
   29924:	e92d4810 	push	{r4, fp, lr}
   29928:	e28db008 	add	fp, sp, #8
   2992c:	e24dd01c 	sub	sp, sp, #28
   29930:	e1a0400e 	mov	r4, lr
   29934:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   29938:	e1a03001 	mov	r3, r1
   2993c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
   29940:	e1a03004 	mov	r3, r4
   29944:	e3090924 	movw	r0, #39204	; 0x9924
   29948:	e3400002 	movt	r0, #2
   2994c:	e1a01003 	mov	r1, r3
   29950:	ebffaf71 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   29954:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29958:	e3530000 	cmp	r3, #0
   2995c:	1a000005 	bne	29978 <USBKeyboardDeviceGenerateKeyEvent+0x54>
   29960:	e3000250 	movw	r0, #592	; 0x250
   29964:	e3400003 	movt	r0, #3
   29968:	e300125c 	movw	r1, #604	; 0x25c
   2996c:	e3401003 	movt	r1, #3
   29970:	e3a020d8 	mov	r2, #216	; 0xd8
   29974:	ebffb40d 	bl	169b0 <uspi_assertion_failed>

	const char *pKeyString;
	char Buffer[2];

	u8 ucModifiers = USBKeyboardDeviceGetModifiers (pThis);
   29978:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   2997c:	eb00013d 	bl	29e78 <USBKeyboardDeviceGetModifiers>
   29980:	e1a03000 	mov	r3, r0
   29984:	e54b300d 	strb	r3, [fp, #-13]
	u8 ucLogCode = KeyMapTranslate (&pThis->m_KeyMap, ucPhyCode, ucModifiers);
   29988:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2998c:	e2831060 	add	r1, r3, #96	; 0x60
   29990:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
   29994:	e55b300d 	ldrb	r3, [fp, #-13]
   29998:	e1a00001 	mov	r0, r1
   2999c:	e1a01002 	mov	r1, r2
   299a0:	e1a02003 	mov	r2, r3
   299a4:	ebfffc62 	bl	28b34 <KeyMapTranslate>
   299a8:	e1a03000 	mov	r3, r0
   299ac:	e54b300e 	strb	r3, [fp, #-14]

	switch (ucLogCode)
   299b0:	e55b300e 	ldrb	r3, [fp, #-14]
   299b4:	e24330b3 	sub	r3, r3, #179	; 0xb3
   299b8:	e353000f 	cmp	r3, #15
   299bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   299c0:	ea00002e 	b	29a80 <USBKeyboardDeviceGenerateKeyEvent+0x15c>
   299c4:	00029ad0 	ldrdeq	r9, [r2], -r0
   299c8:	00029ad0 	ldrdeq	r9, [r2], -r0
   299cc:	00029ad0 	ldrdeq	r9, [r2], -r0
   299d0:	00029a04 	andeq	r9, r2, r4, lsl #20
   299d4:	00029a04 	andeq	r9, r2, r4, lsl #20
   299d8:	00029a04 	andeq	r9, r2, r4, lsl #20
   299dc:	00029a04 	andeq	r9, r2, r4, lsl #20
   299e0:	00029a04 	andeq	r9, r2, r4, lsl #20
   299e4:	00029a04 	andeq	r9, r2, r4, lsl #20
   299e8:	00029a04 	andeq	r9, r2, r4, lsl #20
   299ec:	00029a04 	andeq	r9, r2, r4, lsl #20
   299f0:	00029a04 	andeq	r9, r2, r4, lsl #20
   299f4:	00029a04 	andeq	r9, r2, r4, lsl #20
   299f8:	00029a04 	andeq	r9, r2, r4, lsl #20
   299fc:	00029a04 	andeq	r9, r2, r4, lsl #20
   29a00:	00029a5c 	andeq	r9, r2, ip, asr sl
	case ActionSelectConsole8:
	case ActionSelectConsole9:
	case ActionSelectConsole10:
	case ActionSelectConsole11:
	case ActionSelectConsole12:
		if (pThis->m_pSelectConsoleHandler != 0)
   29a04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29a08:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   29a0c:	e3530000 	cmp	r3, #0
   29a10:	0a000010 	beq	29a58 <USBKeyboardDeviceGenerateKeyEvent+0x134>
		{
			unsigned nConsole = ucLogCode - ActionSelectConsole1;
   29a14:	e55b300e 	ldrb	r3, [fp, #-14]
   29a18:	e24330b6 	sub	r3, r3, #182	; 0xb6
   29a1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			assert (nConsole < 12);
   29a20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29a24:	e353000b 	cmp	r3, #11
   29a28:	9a000005 	bls	29a44 <USBKeyboardDeviceGenerateKeyEvent+0x120>
   29a2c:	e30003d8 	movw	r0, #984	; 0x3d8
   29a30:	e3400003 	movt	r0, #3
   29a34:	e300125c 	movw	r1, #604	; 0x25c
   29a38:	e3401003 	movt	r1, #3
   29a3c:	e3a020f6 	mov	r2, #246	; 0xf6
   29a40:	ebffb3da 	bl	169b0 <uspi_assertion_failed>

			(*pThis->m_pSelectConsoleHandler) (nConsole);
   29a44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29a48:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   29a4c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   29a50:	e12fff33 	blx	r3
		}
		break;
   29a54:	ea00001e 	b	29ad4 <USBKeyboardDeviceGenerateKeyEvent+0x1b0>
   29a58:	ea00001d 	b	29ad4 <USBKeyboardDeviceGenerateKeyEvent+0x1b0>

	case ActionShutdown:
		if (pThis->m_pShutdownHandler != 0)
   29a5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29a60:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   29a64:	e3530000 	cmp	r3, #0
   29a68:	0a000003 	beq	29a7c <USBKeyboardDeviceGenerateKeyEvent+0x158>
		{
			(*pThis->m_pShutdownHandler) ();
   29a6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29a70:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   29a74:	e12fff33 	blx	r3
		}
		break;
   29a78:	ea000015 	b	29ad4 <USBKeyboardDeviceGenerateKeyEvent+0x1b0>
   29a7c:	ea000014 	b	29ad4 <USBKeyboardDeviceGenerateKeyEvent+0x1b0>

	default:
		pKeyString = KeyMapGetString (&pThis->m_KeyMap, ucLogCode, ucModifiers, Buffer);
   29a80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29a84:	e2830060 	add	r0, r3, #96	; 0x60
   29a88:	e55b100e 	ldrb	r1, [fp, #-14]
   29a8c:	e55b200d 	ldrb	r2, [fp, #-13]
   29a90:	e24b301c 	sub	r3, fp, #28
   29a94:	ebfffcc6 	bl	28db4 <KeyMapGetString>
   29a98:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
		if (pKeyString != 0)
   29a9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29aa0:	e3530000 	cmp	r3, #0
   29aa4:	0a000008 	beq	29acc <USBKeyboardDeviceGenerateKeyEvent+0x1a8>
		{
			if (pThis->m_pKeyPressedHandler != 0)
   29aa8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29aac:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   29ab0:	e3530000 	cmp	r3, #0
   29ab4:	0a000004 	beq	29acc <USBKeyboardDeviceGenerateKeyEvent+0x1a8>
			{
				(*pThis->m_pKeyPressedHandler) (pKeyString);
   29ab8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29abc:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   29ac0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   29ac4:	e12fff33 	blx	r3
			}
		}
		break;
   29ac8:	ea000001 	b	29ad4 <USBKeyboardDeviceGenerateKeyEvent+0x1b0>
   29acc:	ea000000 	b	29ad4 <USBKeyboardDeviceGenerateKeyEvent+0x1b0>
	switch (ucLogCode)
	{
	case ActionSwitchCapsLock:
	case ActionSwitchNumLock:
	case ActionSwitchScrollLock:
		break;
   29ad0:	e1a00000 	nop			; (mov r0, r0)
   29ad4:	e1a03004 	mov	r3, r4
   29ad8:	e3090924 	movw	r0, #39204	; 0x9924
   29adc:	e3400002 	movt	r0, #2
   29ae0:	e1a01003 	mov	r1, r3
   29ae4:	ebffaf5e 	bl	15864 <__cyg_profile_func_exit>
				(*pThis->m_pKeyPressedHandler) (pKeyString);
			}
		}
		break;
	}
}
   29ae8:	e24bd008 	sub	sp, fp, #8
   29aec:	e8bd8810 	pop	{r4, fp, pc}

00029af0 <USBKeyboardDeviceStartRequest>:

boolean USBKeyboardDeviceStartRequest (TUSBKeyboardDevice *pThis)
{
   29af0:	e92d4830 	push	{r4, r5, fp, lr}
   29af4:	e28db00c 	add	fp, sp, #12
   29af8:	e24dd010 	sub	sp, sp, #16
   29afc:	e1a0400e 	mov	r4, lr
   29b00:	e50b0010 	str	r0, [fp, #-16]
   29b04:	e1a03004 	mov	r3, r4
   29b08:	e3090af0 	movw	r0, #39664	; 0x9af0
   29b0c:	e3400002 	movt	r0, #2
   29b10:	e1a01003 	mov	r1, r3
   29b14:	ebffaf00 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   29b18:	e51b3010 	ldr	r3, [fp, #-16]
   29b1c:	e3530000 	cmp	r3, #0
   29b20:	1a000005 	bne	29b3c <USBKeyboardDeviceStartRequest+0x4c>
   29b24:	e3000250 	movw	r0, #592	; 0x250
   29b28:	e3400003 	movt	r0, #3
   29b2c:	e300125c 	movw	r1, #604	; 0x25c
   29b30:	e3401003 	movt	r1, #3
   29b34:	e3002112 	movw	r2, #274	; 0x112
   29b38:	ebffb39c 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pReportEndpoint != 0);
   29b3c:	e51b3010 	ldr	r3, [fp, #-16]
   29b40:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   29b44:	e3530000 	cmp	r3, #0
   29b48:	1a000005 	bne	29b64 <USBKeyboardDeviceStartRequest+0x74>
   29b4c:	e30002f8 	movw	r0, #760	; 0x2f8
   29b50:	e3400003 	movt	r0, #3
   29b54:	e300125c 	movw	r1, #604	; 0x25c
   29b58:	e3401003 	movt	r1, #3
   29b5c:	e3a02f45 	mov	r2, #276	; 0x114
   29b60:	ebffb392 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pReportBuffer != 0);
   29b64:	e51b3010 	ldr	r3, [fp, #-16]
   29b68:	e5933054 	ldr	r3, [r3, #84]	; 0x54
   29b6c:	e3530000 	cmp	r3, #0
   29b70:	1a000005 	bne	29b8c <USBKeyboardDeviceStartRequest+0x9c>
   29b74:	e30002bc 	movw	r0, #700	; 0x2bc
   29b78:	e3400003 	movt	r0, #3
   29b7c:	e300125c 	movw	r1, #604	; 0x25c
   29b80:	e3401003 	movt	r1, #3
   29b84:	e3002115 	movw	r2, #277	; 0x115
   29b88:	ebffb388 	bl	169b0 <uspi_assertion_failed>
	
	assert (pThis->m_pURB == 0);
   29b8c:	e51b3010 	ldr	r3, [fp, #-16]
   29b90:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   29b94:	e3530000 	cmp	r3, #0
   29b98:	0a000005 	beq	29bb4 <USBKeyboardDeviceStartRequest+0xc4>
   29b9c:	e30003e8 	movw	r0, #1000	; 0x3e8
   29ba0:	e3400003 	movt	r0, #3
   29ba4:	e300125c 	movw	r1, #604	; 0x25c
   29ba8:	e3401003 	movt	r1, #3
   29bac:	e3002117 	movw	r2, #279	; 0x117
   29bb0:	ebffb37e 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pURB = malloc (sizeof (TUSBRequest));
   29bb4:	e3a00024 	mov	r0, #36	; 0x24
   29bb8:	ebffb3a6 	bl	16a58 <malloc>
   29bbc:	e1a03000 	mov	r3, r0
   29bc0:	e1a02003 	mov	r2, r3
   29bc4:	e51b3010 	ldr	r3, [fp, #-16]
   29bc8:	e5832050 	str	r2, [r3, #80]	; 0x50
	assert (pThis->m_pURB != 0);
   29bcc:	e51b3010 	ldr	r3, [fp, #-16]
   29bd0:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   29bd4:	e3530000 	cmp	r3, #0
   29bd8:	1a000005 	bne	29bf4 <USBKeyboardDeviceStartRequest+0x104>
   29bdc:	e30003fc 	movw	r0, #1020	; 0x3fc
   29be0:	e3400003 	movt	r0, #3
   29be4:	e300125c 	movw	r1, #604	; 0x25c
   29be8:	e3401003 	movt	r1, #3
   29bec:	e3002119 	movw	r2, #281	; 0x119
   29bf0:	ebffb36e 	bl	169b0 <uspi_assertion_failed>
	USBRequest (pThis->m_pURB, pThis->m_pReportEndpoint, pThis->m_pReportBuffer, BOOT_REPORT_SIZE, 0);
   29bf4:	e51b3010 	ldr	r3, [fp, #-16]
   29bf8:	e5930050 	ldr	r0, [r3, #80]	; 0x50
   29bfc:	e51b3010 	ldr	r3, [fp, #-16]
   29c00:	e593103c 	ldr	r1, [r3, #60]	; 0x3c
   29c04:	e51b3010 	ldr	r3, [fp, #-16]
   29c08:	e5932054 	ldr	r2, [r3, #84]	; 0x54
   29c0c:	e3a03000 	mov	r3, #0
   29c10:	e58d3000 	str	r3, [sp]
   29c14:	e3a03008 	mov	r3, #8
   29c18:	ebffddf9 	bl	21404 <USBRequest>
	USBRequestSetCompletionRoutine (pThis->m_pURB, USBKeyboardDeviceCompletionRoutine, 0, pThis);
   29c1c:	e51b3010 	ldr	r3, [fp, #-16]
   29c20:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   29c24:	e1a00003 	mov	r0, r3
   29c28:	e3091c88 	movw	r1, #40072	; 0x9c88
   29c2c:	e3401002 	movt	r1, #2
   29c30:	e3a02000 	mov	r2, #0
   29c34:	e51b3010 	ldr	r3, [fp, #-16]
   29c38:	ebffdf90 	bl	21a80 <USBRequestSetCompletionRoutine>
	
	return DWHCIDeviceSubmitAsyncRequest (USBDeviceGetHost (&pThis->m_USBDevice), pThis->m_pURB);
   29c3c:	e51b3010 	ldr	r3, [fp, #-16]
   29c40:	e1a00003 	mov	r0, r3
   29c44:	ebffd8ee 	bl	20004 <USBDeviceGetHost>
   29c48:	e1a02000 	mov	r2, r0
   29c4c:	e51b3010 	ldr	r3, [fp, #-16]
   29c50:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   29c54:	e1a00002 	mov	r0, r2
   29c58:	e1a01003 	mov	r1, r3
   29c5c:	ebffbd23 	bl	190f0 <DWHCIDeviceSubmitAsyncRequest>
   29c60:	e1a05000 	mov	r5, r0
   29c64:	e1a03004 	mov	r3, r4
   29c68:	e3090af0 	movw	r0, #39664	; 0x9af0
   29c6c:	e3400002 	movt	r0, #2
   29c70:	e1a01003 	mov	r1, r3
   29c74:	ebffaefa 	bl	15864 <__cyg_profile_func_exit>
   29c78:	e1a03005 	mov	r3, r5
}
   29c7c:	e1a00003 	mov	r0, r3
   29c80:	e24bd00c 	sub	sp, fp, #12
   29c84:	e8bd8830 	pop	{r4, r5, fp, pc}

00029c88 <USBKeyboardDeviceCompletionRoutine>:

void USBKeyboardDeviceCompletionRoutine (TUSBRequest *pURB, void *pParam, void *pContext)
{
   29c88:	e92d4830 	push	{r4, r5, fp, lr}
   29c8c:	e28db00c 	add	fp, sp, #12
   29c90:	e24dd018 	sub	sp, sp, #24
   29c94:	e1a0500e 	mov	r5, lr
   29c98:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   29c9c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   29ca0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   29ca4:	e1a03005 	mov	r3, r5
   29ca8:	e3090c88 	movw	r0, #40072	; 0x9c88
   29cac:	e3400002 	movt	r0, #2
   29cb0:	e1a01003 	mov	r1, r3
   29cb4:	ebffae98 	bl	1571c <__cyg_profile_func_enter>
	TUSBKeyboardDevice *pThis = (TUSBKeyboardDevice *) pContext;
   29cb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29cbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	assert (pThis != 0);
   29cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29cc4:	e3530000 	cmp	r3, #0
   29cc8:	1a000005 	bne	29ce4 <USBKeyboardDeviceCompletionRoutine+0x5c>
   29ccc:	e3000250 	movw	r0, #592	; 0x250
   29cd0:	e3400003 	movt	r0, #3
   29cd4:	e300125c 	movw	r1, #604	; 0x25c
   29cd8:	e3401003 	movt	r1, #3
   29cdc:	e3002123 	movw	r2, #291	; 0x123
   29ce0:	ebffb332 	bl	169b0 <uspi_assertion_failed>
	
	assert (pURB != 0);
   29ce4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29ce8:	e3530000 	cmp	r3, #0
   29cec:	1a000005 	bne	29d08 <USBKeyboardDeviceCompletionRoutine+0x80>
   29cf0:	e3000410 	movw	r0, #1040	; 0x410
   29cf4:	e3400003 	movt	r0, #3
   29cf8:	e300125c 	movw	r1, #604	; 0x25c
   29cfc:	e3401003 	movt	r1, #3
   29d00:	e3002125 	movw	r2, #293	; 0x125
   29d04:	ebffb329 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pURB == pURB);
   29d08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29d0c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
   29d10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29d14:	e1520003 	cmp	r2, r3
   29d18:	0a000005 	beq	29d34 <USBKeyboardDeviceCompletionRoutine+0xac>
   29d1c:	e300041c 	movw	r0, #1052	; 0x41c
   29d20:	e3400003 	movt	r0, #3
   29d24:	e300125c 	movw	r1, #604	; 0x25c
   29d28:	e3401003 	movt	r1, #3
   29d2c:	e3002126 	movw	r2, #294	; 0x126
   29d30:	ebffb31e 	bl	169b0 <uspi_assertion_failed>

	if (   USBRequestGetStatus (pURB) != 0
   29d34:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   29d38:	ebffde8b 	bl	2176c <USBRequestGetStatus>
   29d3c:	e1a03000 	mov	r3, r0
   29d40:	e3530000 	cmp	r3, #0
   29d44:	0a000037 	beq	29e28 <USBKeyboardDeviceCompletionRoutine+0x1a0>
	    && USBRequestGetResultLength (pURB) == BOOT_REPORT_SIZE)
   29d48:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   29d4c:	ebffdea4 	bl	217e4 <USBRequestGetResultLength>
   29d50:	e1a03000 	mov	r3, r0
   29d54:	e3530008 	cmp	r3, #8
   29d58:	1a000032 	bne	29e28 <USBKeyboardDeviceCompletionRoutine+0x1a0>
	{
		if (pThis->m_pKeyStatusHandlerRaw != 0)
   29d5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29d60:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   29d64:	e3530000 	cmp	r3, #0
   29d68:	0a00000c 	beq	29da0 <USBKeyboardDeviceCompletionRoutine+0x118>
		{
			(*pThis->m_pKeyStatusHandlerRaw) (USBKeyboardDeviceGetModifiers (pThis), pThis->m_pReportBuffer+2);
   29d6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29d70:	e593404c 	ldr	r4, [r3, #76]	; 0x4c
   29d74:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   29d78:	eb00003e 	bl	29e78 <USBKeyboardDeviceGetModifiers>
   29d7c:	e1a03000 	mov	r3, r0
   29d80:	e1a02003 	mov	r2, r3
   29d84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29d88:	e5933054 	ldr	r3, [r3, #84]	; 0x54
   29d8c:	e2833002 	add	r3, r3, #2
   29d90:	e1a00002 	mov	r0, r2
   29d94:	e1a01003 	mov	r1, r3
   29d98:	e12fff34 	blx	r4
   29d9c:	ea000021 	b	29e28 <USBKeyboardDeviceCompletionRoutine+0x1a0>
		}
		else
		{
			u8 ucPhyCode = USBKeyboardDeviceGetKeyCode (pThis);
   29da0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   29da4:	eb000052 	bl	29ef4 <USBKeyboardDeviceGetKeyCode>
   29da8:	e1a03000 	mov	r3, r0
   29dac:	e54b300d 	strb	r3, [fp, #-13]

			if (ucPhyCode == pThis->m_ucLastPhyCode)
   29db0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29db4:	e5d33058 	ldrb	r3, [r3, #88]	; 0x58
   29db8:	e55b200d 	ldrb	r2, [fp, #-13]
   29dbc:	e1520003 	cmp	r2, r3
   29dc0:	1a000002 	bne	29dd0 <USBKeyboardDeviceCompletionRoutine+0x148>
			{
				ucPhyCode = 0;
   29dc4:	e3a03000 	mov	r3, #0
   29dc8:	e54b300d 	strb	r3, [fp, #-13]
   29dcc:	ea000002 	b	29ddc <USBKeyboardDeviceCompletionRoutine+0x154>
			}
			else
			{
				pThis->m_ucLastPhyCode = ucPhyCode;
   29dd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29dd4:	e55b200d 	ldrb	r2, [fp, #-13]
   29dd8:	e5c32058 	strb	r2, [r3, #88]	; 0x58
			}
			
			if (ucPhyCode != 0)
   29ddc:	e55b300d 	ldrb	r3, [fp, #-13]
   29de0:	e3530000 	cmp	r3, #0
   29de4:	0a000004 	beq	29dfc <USBKeyboardDeviceCompletionRoutine+0x174>
			{
				USBKeyboardDeviceGenerateKeyEvent (pThis, ucPhyCode);
   29de8:	e55b300d 	ldrb	r3, [fp, #-13]
   29dec:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   29df0:	e1a01003 	mov	r1, r3
   29df4:	ebfffeca 	bl	29924 <USBKeyboardDeviceGenerateKeyEvent>
   29df8:	ea00000a 	b	29e28 <USBKeyboardDeviceCompletionRoutine+0x1a0>

				pThis->m_hTimer = StartKernelTimer (REPEAT_DELAY, USBKeyboardDeviceTimerHandler, 0, pThis);
				assert (pThis->m_hTimer != 0);
#endif
			}
			else if (pThis->m_hTimer != 0)
   29dfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29e00:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
   29e04:	e3530000 	cmp	r3, #0
   29e08:	0a000006 	beq	29e28 <USBKeyboardDeviceCompletionRoutine+0x1a0>
			{
				CancelKernelTimer (pThis->m_hTimer);
   29e0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29e10:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
   29e14:	e1a00003 	mov	r0, r3
   29e18:	ebffb21d 	bl	16694 <CancelKernelTimer>
				pThis->m_hTimer = 0;
   29e1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29e20:	e3a02000 	mov	r2, #0
   29e24:	e583205c 	str	r2, [r3, #92]	; 0x5c
			}
		}
	}

	_USBRequest (pThis->m_pURB);
   29e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29e2c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   29e30:	e1a00003 	mov	r0, r3
   29e34:	ebffddc2 	bl	21544 <_USBRequest>
	free (pThis->m_pURB);
   29e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29e3c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   29e40:	e1a00003 	mov	r0, r3
   29e44:	ebffb319 	bl	16ab0 <free>
	pThis->m_pURB = 0;
   29e48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29e4c:	e3a02000 	mov	r2, #0
   29e50:	e5832050 	str	r2, [r3, #80]	; 0x50
	
	USBKeyboardDeviceStartRequest (pThis);
   29e54:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   29e58:	ebffff24 	bl	29af0 <USBKeyboardDeviceStartRequest>
   29e5c:	e1a03005 	mov	r3, r5
   29e60:	e3090c88 	movw	r0, #40072	; 0x9c88
   29e64:	e3400002 	movt	r0, #2
   29e68:	e1a01003 	mov	r1, r3
   29e6c:	ebffae7c 	bl	15864 <__cyg_profile_func_exit>
}
   29e70:	e24bd00c 	sub	sp, fp, #12
   29e74:	e8bd8830 	pop	{r4, r5, fp, pc}

00029e78 <USBKeyboardDeviceGetModifiers>:

u8 USBKeyboardDeviceGetModifiers (TUSBKeyboardDevice *pThis)
{
   29e78:	e92d4830 	push	{r4, r5, fp, lr}
   29e7c:	e28db00c 	add	fp, sp, #12
   29e80:	e24dd008 	sub	sp, sp, #8
   29e84:	e1a0500e 	mov	r5, lr
   29e88:	e50b0010 	str	r0, [fp, #-16]
   29e8c:	e1a03005 	mov	r3, r5
   29e90:	e3090e78 	movw	r0, #40568	; 0x9e78
   29e94:	e3400002 	movt	r0, #2
   29e98:	e1a01003 	mov	r1, r3
   29e9c:	ebffae1e 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   29ea0:	e51b3010 	ldr	r3, [fp, #-16]
   29ea4:	e3530000 	cmp	r3, #0
   29ea8:	1a000005 	bne	29ec4 <USBKeyboardDeviceGetModifiers+0x4c>
   29eac:	e3000250 	movw	r0, #592	; 0x250
   29eb0:	e3400003 	movt	r0, #3
   29eb4:	e300125c 	movw	r1, #604	; 0x25c
   29eb8:	e3401003 	movt	r1, #3
   29ebc:	e300215a 	movw	r2, #346	; 0x15a
   29ec0:	ebffb2ba 	bl	169b0 <uspi_assertion_failed>
	return pThis->m_pReportBuffer[0];
   29ec4:	e51b3010 	ldr	r3, [fp, #-16]
   29ec8:	e5933054 	ldr	r3, [r3, #84]	; 0x54
   29ecc:	e5d34000 	ldrb	r4, [r3]
   29ed0:	e1a03005 	mov	r3, r5
   29ed4:	e3090e78 	movw	r0, #40568	; 0x9e78
   29ed8:	e3400002 	movt	r0, #2
   29edc:	e1a01003 	mov	r1, r3
   29ee0:	ebffae5f 	bl	15864 <__cyg_profile_func_exit>
   29ee4:	e1a03004 	mov	r3, r4
}
   29ee8:	e1a00003 	mov	r0, r3
   29eec:	e24bd00c 	sub	sp, fp, #12
   29ef0:	e8bd8830 	pop	{r4, r5, fp, pc}

00029ef4 <USBKeyboardDeviceGetKeyCode>:

u8 USBKeyboardDeviceGetKeyCode (TUSBKeyboardDevice *pThis)
{
   29ef4:	e92d4830 	push	{r4, r5, fp, lr}
   29ef8:	e28db00c 	add	fp, sp, #12
   29efc:	e24dd010 	sub	sp, sp, #16
   29f00:	e1a0500e 	mov	r5, lr
   29f04:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   29f08:	e1a03005 	mov	r3, r5
   29f0c:	e3090ef4 	movw	r0, #40692	; 0x9ef4
   29f10:	e3400002 	movt	r0, #2
   29f14:	e1a01003 	mov	r1, r3
   29f18:	ebffadff 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   29f1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29f20:	e3530000 	cmp	r3, #0
   29f24:	1a000005 	bne	29f40 <USBKeyboardDeviceGetKeyCode+0x4c>
   29f28:	e3000250 	movw	r0, #592	; 0x250
   29f2c:	e3400003 	movt	r0, #3
   29f30:	e300125c 	movw	r1, #604	; 0x25c
   29f34:	e3401003 	movt	r1, #3
   29f38:	e3a02e16 	mov	r2, #352	; 0x160
   29f3c:	ebffb29b 	bl	169b0 <uspi_assertion_failed>

	for (unsigned i = 7; i >= 2; i--)
   29f40:	e3a03007 	mov	r3, #7
   29f44:	e50b3010 	str	r3, [fp, #-16]
   29f48:	ea00000d 	b	29f84 <USBKeyboardDeviceGetKeyCode+0x90>
	{
		u8 ucKeyCode = pThis->m_pReportBuffer[i];
   29f4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29f50:	e5932054 	ldr	r2, [r3, #84]	; 0x54
   29f54:	e51b3010 	ldr	r3, [fp, #-16]
   29f58:	e0823003 	add	r3, r2, r3
   29f5c:	e5d33000 	ldrb	r3, [r3]
   29f60:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		if (ucKeyCode != 0)
   29f64:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   29f68:	e3530000 	cmp	r3, #0
   29f6c:	0a000001 	beq	29f78 <USBKeyboardDeviceGetKeyCode+0x84>
		{
			return ucKeyCode;
   29f70:	e55b4011 	ldrb	r4, [fp, #-17]	; 0xffffffef
   29f74:	ea000006 	b	29f94 <USBKeyboardDeviceGetKeyCode+0xa0>

u8 USBKeyboardDeviceGetKeyCode (TUSBKeyboardDevice *pThis)
{
	assert (pThis != 0);

	for (unsigned i = 7; i >= 2; i--)
   29f78:	e51b3010 	ldr	r3, [fp, #-16]
   29f7c:	e2433001 	sub	r3, r3, #1
   29f80:	e50b3010 	str	r3, [fp, #-16]
   29f84:	e51b3010 	ldr	r3, [fp, #-16]
   29f88:	e3530001 	cmp	r3, #1
   29f8c:	8affffee 	bhi	29f4c <USBKeyboardDeviceGetKeyCode+0x58>
		{
			return ucKeyCode;
		}
	}
	
	return 0;
   29f90:	e3a04000 	mov	r4, #0
   29f94:	e1a03005 	mov	r3, r5
   29f98:	e3090ef4 	movw	r0, #40692	; 0x9ef4
   29f9c:	e3400002 	movt	r0, #2
   29fa0:	e1a01003 	mov	r1, r3
   29fa4:	ebffae2e 	bl	15864 <__cyg_profile_func_exit>
   29fa8:	e1a03004 	mov	r3, r4
}
   29fac:	e1a00003 	mov	r0, r3
   29fb0:	e24bd00c 	sub	sp, fp, #12
   29fb4:	e8bd8830 	pop	{r4, r5, fp, pc}

00029fb8 <DWHCIRootPort>:
#include <uspios.h>

static const char FromDWHCIRoot[] = "dwroot";

void DWHCIRootPort (TDWHCIRootPort *pThis, struct TDWHCIDevice *pHost)
{
   29fb8:	e92d4810 	push	{r4, fp, lr}
   29fbc:	e28db008 	add	fp, sp, #8
   29fc0:	e24dd00c 	sub	sp, sp, #12
   29fc4:	e1a0400e 	mov	r4, lr
   29fc8:	e50b0010 	str	r0, [fp, #-16]
   29fcc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   29fd0:	e1a03004 	mov	r3, r4
   29fd4:	e3090fb8 	movw	r0, #40888	; 0x9fb8
   29fd8:	e3400002 	movt	r0, #2
   29fdc:	e1a01003 	mov	r1, r3
   29fe0:	ebffadcd 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   29fe4:	e51b3010 	ldr	r3, [fp, #-16]
   29fe8:	e3530000 	cmp	r3, #0
   29fec:	1a000005 	bne	2a008 <DWHCIRootPort+0x50>
   29ff0:	e300043c 	movw	r0, #1084	; 0x43c
   29ff4:	e3400003 	movt	r0, #3
   29ff8:	e3001448 	movw	r1, #1096	; 0x448
   29ffc:	e3401003 	movt	r1, #3
   2a000:	e3a0201f 	mov	r2, #31
   2a004:	ebffb269 	bl	169b0 <uspi_assertion_failed>

	pThis->m_pHost = pHost;
   2a008:	e51b3010 	ldr	r3, [fp, #-16]
   2a00c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2a010:	e5832000 	str	r2, [r3]
	pThis->m_pDevice = 0;
   2a014:	e51b3010 	ldr	r3, [fp, #-16]
   2a018:	e3a02000 	mov	r2, #0
   2a01c:	e5832004 	str	r2, [r3, #4]

	assert (pThis->m_pHost != 0);
   2a020:	e51b3010 	ldr	r3, [fp, #-16]
   2a024:	e5933000 	ldr	r3, [r3]
   2a028:	e3530000 	cmp	r3, #0
   2a02c:	1a000005 	bne	2a048 <DWHCIRootPort+0x90>
   2a030:	e30004ac 	movw	r0, #1196	; 0x4ac
   2a034:	e3400003 	movt	r0, #3
   2a038:	e3001448 	movw	r1, #1096	; 0x448
   2a03c:	e3401003 	movt	r1, #3
   2a040:	e3a02024 	mov	r2, #36	; 0x24
   2a044:	ebffb259 	bl	169b0 <uspi_assertion_failed>
   2a048:	e1a03004 	mov	r3, r4
   2a04c:	e3090fb8 	movw	r0, #40888	; 0x9fb8
   2a050:	e3400002 	movt	r0, #2
   2a054:	e1a01003 	mov	r1, r3
   2a058:	ebffae01 	bl	15864 <__cyg_profile_func_exit>
}
   2a05c:	e24bd008 	sub	sp, fp, #8
   2a060:	e8bd8810 	pop	{r4, fp, pc}

0002a064 <_DWHCIRootPort>:

void _DWHCIRootPort (TDWHCIRootPort *pThis)
{
   2a064:	e92d4810 	push	{r4, fp, lr}
   2a068:	e28db008 	add	fp, sp, #8
   2a06c:	e24dd00c 	sub	sp, sp, #12
   2a070:	e1a0400e 	mov	r4, lr
   2a074:	e50b0010 	str	r0, [fp, #-16]
   2a078:	e1a03004 	mov	r3, r4
   2a07c:	e30a0064 	movw	r0, #41060	; 0xa064
   2a080:	e3400002 	movt	r0, #2
   2a084:	e1a01003 	mov	r1, r3
   2a088:	ebffada3 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2a08c:	e51b3010 	ldr	r3, [fp, #-16]
   2a090:	e3530000 	cmp	r3, #0
   2a094:	1a000005 	bne	2a0b0 <_DWHCIRootPort+0x4c>
   2a098:	e300043c 	movw	r0, #1084	; 0x43c
   2a09c:	e3400003 	movt	r0, #3
   2a0a0:	e3001448 	movw	r1, #1096	; 0x448
   2a0a4:	e3401003 	movt	r1, #3
   2a0a8:	e3a02029 	mov	r2, #41	; 0x29
   2a0ac:	ebffb23f 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pDevice != 0)
   2a0b0:	e51b3010 	ldr	r3, [fp, #-16]
   2a0b4:	e5933004 	ldr	r3, [r3, #4]
   2a0b8:	e3530000 	cmp	r3, #0
   2a0bc:	0a00000a 	beq	2a0ec <_DWHCIRootPort+0x88>
	{
		_USBDevice (pThis->m_pDevice);
   2a0c0:	e51b3010 	ldr	r3, [fp, #-16]
   2a0c4:	e5933004 	ldr	r3, [r3, #4]
   2a0c8:	e1a00003 	mov	r0, r3
   2a0cc:	ebffd407 	bl	1f0f0 <_USBDevice>
		free (pThis->m_pDevice);
   2a0d0:	e51b3010 	ldr	r3, [fp, #-16]
   2a0d4:	e5933004 	ldr	r3, [r3, #4]
   2a0d8:	e1a00003 	mov	r0, r3
   2a0dc:	ebffb273 	bl	16ab0 <free>
		pThis->m_pDevice = 0;
   2a0e0:	e51b3010 	ldr	r3, [fp, #-16]
   2a0e4:	e3a02000 	mov	r2, #0
   2a0e8:	e5832004 	str	r2, [r3, #4]
	}

	pThis->m_pHost = 0;
   2a0ec:	e51b3010 	ldr	r3, [fp, #-16]
   2a0f0:	e3a02000 	mov	r2, #0
   2a0f4:	e5832000 	str	r2, [r3]
   2a0f8:	e1a03004 	mov	r3, r4
   2a0fc:	e30a0064 	movw	r0, #41060	; 0xa064
   2a100:	e3400002 	movt	r0, #2
   2a104:	e1a01003 	mov	r1, r3
   2a108:	ebffadd5 	bl	15864 <__cyg_profile_func_exit>
}
   2a10c:	e24bd008 	sub	sp, fp, #8
   2a110:	e8bd8810 	pop	{r4, fp, pc}

0002a114 <DWHCIRootPortInitialize>:

boolean DWHCIRootPortInitialize (TDWHCIRootPort *pThis)
{
   2a114:	e92d4830 	push	{r4, r5, fp, lr}
   2a118:	e28db00c 	add	fp, sp, #12
   2a11c:	e24dd020 	sub	sp, sp, #32
   2a120:	e1a0500e 	mov	r5, lr
   2a124:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   2a128:	e1a03005 	mov	r3, r5
   2a12c:	e30a0114 	movw	r0, #41236	; 0xa114
   2a130:	e3400002 	movt	r0, #2
   2a134:	e1a01003 	mov	r1, r3
   2a138:	ebffad77 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2a13c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a140:	e3530000 	cmp	r3, #0
   2a144:	1a000005 	bne	2a160 <DWHCIRootPortInitialize+0x4c>
   2a148:	e300043c 	movw	r0, #1084	; 0x43c
   2a14c:	e3400003 	movt	r0, #3
   2a150:	e3001448 	movw	r1, #1096	; 0x448
   2a154:	e3401003 	movt	r1, #3
   2a158:	e3a02037 	mov	r2, #55	; 0x37
   2a15c:	ebffb213 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pHost != 0);
   2a160:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a164:	e5933000 	ldr	r3, [r3]
   2a168:	e3530000 	cmp	r3, #0
   2a16c:	1a000005 	bne	2a188 <DWHCIRootPortInitialize+0x74>
   2a170:	e30004ac 	movw	r0, #1196	; 0x4ac
   2a174:	e3400003 	movt	r0, #3
   2a178:	e3001448 	movw	r1, #1096	; 0x448
   2a17c:	e3401003 	movt	r1, #3
   2a180:	e3a02039 	mov	r2, #57	; 0x39
   2a184:	ebffb209 	bl	169b0 <uspi_assertion_failed>
	TUSBSpeed Speed = DWHCIDeviceGetPortSpeed (pThis->m_pHost);
   2a188:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a18c:	e5933000 	ldr	r3, [r3]
   2a190:	e1a00003 	mov	r0, r3
   2a194:	ebffc643 	bl	1baa8 <DWHCIDeviceGetPortSpeed>
   2a198:	e1a03000 	mov	r3, r0
   2a19c:	e54b300d 	strb	r3, [fp, #-13]
	if (Speed == USBSpeedUnknown)
   2a1a0:	e55b300d 	ldrb	r3, [fp, #-13]
   2a1a4:	e3530003 	cmp	r3, #3
   2a1a8:	1a000007 	bne	2a1cc <DWHCIRootPortInitialize+0xb8>
	{
		LogWrite (FromDWHCIRoot, LOG_ERROR, "Cannot detect port speed");
   2a1ac:	e3000434 	movw	r0, #1076	; 0x434
   2a1b0:	e3400003 	movt	r0, #3
   2a1b4:	e3a01001 	mov	r1, #1
   2a1b8:	e30024c0 	movw	r2, #1216	; 0x4c0
   2a1bc:	e3402003 	movt	r2, #3
   2a1c0:	ebffb1e2 	bl	16950 <LogWrite>

		return FALSE;
   2a1c4:	e3a04000 	mov	r4, #0
   2a1c8:	ea0000ba 	b	2a4b8 <DWHCIRootPortInitialize+0x3a4>
	}
	
	// first create default device
	assert (pThis->m_pDevice == 0);
   2a1cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a1d0:	e5933004 	ldr	r3, [r3, #4]
   2a1d4:	e3530000 	cmp	r3, #0
   2a1d8:	0a000005 	beq	2a1f4 <DWHCIRootPortInitialize+0xe0>
   2a1dc:	e30004dc 	movw	r0, #1244	; 0x4dc
   2a1e0:	e3400003 	movt	r0, #3
   2a1e4:	e3001448 	movw	r1, #1096	; 0x448
   2a1e8:	e3401003 	movt	r1, #3
   2a1ec:	e3a02043 	mov	r2, #67	; 0x43
   2a1f0:	ebffb1ee 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pDevice = (TUSBDevice *) malloc (sizeof (TUSBDevice));
   2a1f4:	e3a00038 	mov	r0, #56	; 0x38
   2a1f8:	ebffb216 	bl	16a58 <malloc>
   2a1fc:	e1a03000 	mov	r3, r0
   2a200:	e1a02003 	mov	r2, r3
   2a204:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a208:	e5832004 	str	r2, [r3, #4]
	assert (pThis->m_pDevice != 0);
   2a20c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a210:	e5933004 	ldr	r3, [r3, #4]
   2a214:	e3530000 	cmp	r3, #0
   2a218:	1a000005 	bne	2a234 <DWHCIRootPortInitialize+0x120>
   2a21c:	e30004f4 	movw	r0, #1268	; 0x4f4
   2a220:	e3400003 	movt	r0, #3
   2a224:	e3001448 	movw	r1, #1096	; 0x448
   2a228:	e3401003 	movt	r1, #3
   2a22c:	e3a02045 	mov	r2, #69	; 0x45
   2a230:	ebffb1de 	bl	169b0 <uspi_assertion_failed>
	USBDevice (pThis->m_pDevice, pThis->m_pHost, Speed, 0, 1);
   2a234:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a238:	e5930004 	ldr	r0, [r3, #4]
   2a23c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a240:	e5931000 	ldr	r1, [r3]
   2a244:	e55b200d 	ldrb	r2, [fp, #-13]
   2a248:	e3a03001 	mov	r3, #1
   2a24c:	e58d3000 	str	r3, [sp]
   2a250:	e3a03000 	mov	r3, #0
   2a254:	ebffd259 	bl	1ebc0 <USBDevice>

	if (!USBDeviceInitialize (pThis->m_pDevice))
   2a258:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a25c:	e5933004 	ldr	r3, [r3, #4]
   2a260:	e1a00003 	mov	r0, r3
   2a264:	ebffd3fd 	bl	1f260 <USBDeviceInitialize>
   2a268:	e1a03000 	mov	r3, r0
   2a26c:	e3530000 	cmp	r3, #0
   2a270:	1a00000c 	bne	2a2a8 <DWHCIRootPortInitialize+0x194>
	{
		_USBDevice (pThis->m_pDevice);
   2a274:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a278:	e5933004 	ldr	r3, [r3, #4]
   2a27c:	e1a00003 	mov	r0, r3
   2a280:	ebffd39a 	bl	1f0f0 <_USBDevice>
		free (pThis->m_pDevice);
   2a284:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a288:	e5933004 	ldr	r3, [r3, #4]
   2a28c:	e1a00003 	mov	r0, r3
   2a290:	ebffb206 	bl	16ab0 <free>
		pThis->m_pDevice = 0;
   2a294:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a298:	e3a02000 	mov	r2, #0
   2a29c:	e5832004 	str	r2, [r3, #4]

		return FALSE;
   2a2a0:	e3a04000 	mov	r4, #0
   2a2a4:	ea000083 	b	2a4b8 <DWHCIRootPortInitialize+0x3a4>
	}

	TString *pNames = USBStandardHubGetDeviceNames (pThis->m_pDevice);
   2a2a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a2ac:	e5933004 	ldr	r3, [r3, #4]
   2a2b0:	e1a00003 	mov	r0, r3
   2a2b4:	ebffe30f 	bl	22ef8 <USBStandardHubGetDeviceNames>
   2a2b8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	assert (pNames != 0);
   2a2bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a2c0:	e3530000 	cmp	r3, #0
   2a2c4:	1a000005 	bne	2a2e0 <DWHCIRootPortInitialize+0x1cc>
   2a2c8:	e300050c 	movw	r0, #1292	; 0x50c
   2a2cc:	e3400003 	movt	r0, #3
   2a2d0:	e3001448 	movw	r1, #1096	; 0x448
   2a2d4:	e3401003 	movt	r1, #3
   2a2d8:	e3a02052 	mov	r2, #82	; 0x52
   2a2dc:	ebffb1b3 	bl	169b0 <uspi_assertion_failed>

	LogWrite (FromDWHCIRoot, LOG_NOTICE, "Device %s found", StringGet (pNames));
   2a2e0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2a2e4:	ebffeb2a 	bl	24f94 <StringGet>
   2a2e8:	e1a03000 	mov	r3, r0
   2a2ec:	e3000434 	movw	r0, #1076	; 0x434
   2a2f0:	e3400003 	movt	r0, #3
   2a2f4:	e3a01003 	mov	r1, #3
   2a2f8:	e3002518 	movw	r2, #1304	; 0x518
   2a2fc:	e3402003 	movt	r2, #3
   2a300:	ebffb192 	bl	16950 <LogWrite>

	_String (pNames);
   2a304:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2a308:	ebffeafc 	bl	24f00 <_String>
	free (pNames);
   2a30c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2a310:	ebffb1e6 	bl	16ab0 <free>

	// now create specific device from default device
	TUSBDevice *pChild = USBDeviceFactoryGetDevice (pThis->m_pDevice);
   2a314:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a318:	e5933004 	ldr	r3, [r3, #4]
   2a31c:	e1a00003 	mov	r0, r3
   2a320:	ebffd831 	bl	203ec <USBDeviceFactoryGetDevice>
   2a324:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	if (pChild != 0)
   2a328:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a32c:	e3530000 	cmp	r3, #0
   2a330:	0a000035 	beq	2a40c <DWHCIRootPortInitialize+0x2f8>
	{
		_USBDevice (pThis->m_pDevice);		// delete default device
   2a334:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a338:	e5933004 	ldr	r3, [r3, #4]
   2a33c:	e1a00003 	mov	r0, r3
   2a340:	ebffd36a 	bl	1f0f0 <_USBDevice>
		free (pThis->m_pDevice);
   2a344:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a348:	e5933004 	ldr	r3, [r3, #4]
   2a34c:	e1a00003 	mov	r0, r3
   2a350:	ebffb1d6 	bl	16ab0 <free>
		pThis->m_pDevice = pChild;		// assign specific device
   2a354:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a358:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2a35c:	e5832004 	str	r2, [r3, #4]

		if (!(*pThis->m_pDevice->Configure) (pThis->m_pDevice))
   2a360:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a364:	e5933004 	ldr	r3, [r3, #4]
   2a368:	e5933000 	ldr	r3, [r3]
   2a36c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2a370:	e5922004 	ldr	r2, [r2, #4]
   2a374:	e1a00002 	mov	r0, r2
   2a378:	e12fff33 	blx	r3
   2a37c:	e1a03000 	mov	r3, r0
   2a380:	e3530000 	cmp	r3, #0
   2a384:	1a000012 	bne	2a3d4 <DWHCIRootPortInitialize+0x2c0>
		{
			LogWrite (FromDWHCIRoot, LOG_ERROR, "Cannot configure device");
   2a388:	e3000434 	movw	r0, #1076	; 0x434
   2a38c:	e3400003 	movt	r0, #3
   2a390:	e3a01001 	mov	r1, #1
   2a394:	e3002528 	movw	r2, #1320	; 0x528
   2a398:	e3402003 	movt	r2, #3
   2a39c:	ebffb16b 	bl	16950 <LogWrite>

			_USBDevice (pThis->m_pDevice);
   2a3a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a3a4:	e5933004 	ldr	r3, [r3, #4]
   2a3a8:	e1a00003 	mov	r0, r3
   2a3ac:	ebffd34f 	bl	1f0f0 <_USBDevice>
			free (pThis->m_pDevice);
   2a3b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a3b4:	e5933004 	ldr	r3, [r3, #4]
   2a3b8:	e1a00003 	mov	r0, r3
   2a3bc:	ebffb1bb 	bl	16ab0 <free>
			pThis->m_pDevice = 0;
   2a3c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a3c4:	e3a02000 	mov	r2, #0
   2a3c8:	e5832004 	str	r2, [r3, #4]

			return FALSE;
   2a3cc:	e3a04000 	mov	r4, #0
   2a3d0:	ea000038 	b	2a4b8 <DWHCIRootPortInitialize+0x3a4>
		}
		
		LogWrite (FromDWHCIRoot, LOG_DEBUG, "Device configured");
   2a3d4:	e3000434 	movw	r0, #1076	; 0x434
   2a3d8:	e3400003 	movt	r0, #3
   2a3dc:	e3a01004 	mov	r1, #4
   2a3e0:	e3002540 	movw	r2, #1344	; 0x540
   2a3e4:	e3402003 	movt	r2, #3
   2a3e8:	ebffb158 	bl	16950 <LogWrite>

		return FALSE;
	}

	// check for over-current
	if (DWHCIDeviceOvercurrentDetected (pThis->m_pHost))
   2a3ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a3f0:	e5933000 	ldr	r3, [r3]
   2a3f4:	e1a00003 	mov	r0, r3
   2a3f8:	ebffc5e7 	bl	1bb9c <DWHCIDeviceOvercurrentDetected>
   2a3fc:	e1a03000 	mov	r3, r0
   2a400:	e3530000 	cmp	r3, #0
   2a404:	0a00002a 	beq	2a4b4 <DWHCIRootPortInitialize+0x3a0>
   2a408:	ea000012 	b	2a458 <DWHCIRootPortInitialize+0x344>
		
		LogWrite (FromDWHCIRoot, LOG_DEBUG, "Device configured");
	}
	else
	{
		LogWrite (FromDWHCIRoot, LOG_NOTICE, "Device is not supported");
   2a40c:	e3000434 	movw	r0, #1076	; 0x434
   2a410:	e3400003 	movt	r0, #3
   2a414:	e3a01003 	mov	r1, #3
   2a418:	e3002554 	movw	r2, #1364	; 0x554
   2a41c:	e3402003 	movt	r2, #3
   2a420:	ebffb14a 	bl	16950 <LogWrite>
		
		_USBDevice (pThis->m_pDevice);
   2a424:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a428:	e5933004 	ldr	r3, [r3, #4]
   2a42c:	e1a00003 	mov	r0, r3
   2a430:	ebffd32e 	bl	1f0f0 <_USBDevice>
		free (pThis->m_pDevice);
   2a434:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a438:	e5933004 	ldr	r3, [r3, #4]
   2a43c:	e1a00003 	mov	r0, r3
   2a440:	ebffb19a 	bl	16ab0 <free>
		pThis->m_pDevice = 0;
   2a444:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a448:	e3a02000 	mov	r2, #0
   2a44c:	e5832004 	str	r2, [r3, #4]

		return FALSE;
   2a450:	e3a04000 	mov	r4, #0
   2a454:	ea000017 	b	2a4b8 <DWHCIRootPortInitialize+0x3a4>
	}

	// check for over-current
	if (DWHCIDeviceOvercurrentDetected (pThis->m_pHost))
	{
		LogWrite (FromDWHCIRoot, LOG_ERROR, "Over-current condition");
   2a458:	e3000434 	movw	r0, #1076	; 0x434
   2a45c:	e3400003 	movt	r0, #3
   2a460:	e3a01001 	mov	r1, #1
   2a464:	e300256c 	movw	r2, #1388	; 0x56c
   2a468:	e3402003 	movt	r2, #3
   2a46c:	ebffb137 	bl	16950 <LogWrite>

		DWHCIDeviceDisableRootPort (pThis->m_pHost);
   2a470:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a474:	e5933000 	ldr	r3, [r3]
   2a478:	e1a00003 	mov	r0, r3
   2a47c:	ebffc5f7 	bl	1bc60 <DWHCIDeviceDisableRootPort>

		_USBDevice (pThis->m_pDevice);
   2a480:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a484:	e5933004 	ldr	r3, [r3, #4]
   2a488:	e1a00003 	mov	r0, r3
   2a48c:	ebffd317 	bl	1f0f0 <_USBDevice>
		free (pThis->m_pDevice);
   2a490:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a494:	e5933004 	ldr	r3, [r3, #4]
   2a498:	e1a00003 	mov	r0, r3
   2a49c:	ebffb183 	bl	16ab0 <free>
		pThis->m_pDevice = 0;
   2a4a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a4a4:	e3a02000 	mov	r2, #0
   2a4a8:	e5832004 	str	r2, [r3, #4]

		return FALSE;
   2a4ac:	e3a04000 	mov	r4, #0
   2a4b0:	ea000000 	b	2a4b8 <DWHCIRootPortInitialize+0x3a4>
	}

	return TRUE;
   2a4b4:	e3a04001 	mov	r4, #1
   2a4b8:	e1a03005 	mov	r3, r5
   2a4bc:	e30a0114 	movw	r0, #41236	; 0xa114
   2a4c0:	e3400002 	movt	r0, #2
   2a4c4:	e1a01003 	mov	r1, r3
   2a4c8:	ebfface5 	bl	15864 <__cyg_profile_func_exit>
   2a4cc:	e1a03004 	mov	r3, r4
}
   2a4d0:	e1a00003 	mov	r0, r3
   2a4d4:	e24bd00c 	sub	sp, fp, #12
   2a4d8:	e8bd8830 	pop	{r4, r5, fp, pc}

0002a4dc <USBMouseDevice>:

static boolean USBMouseDeviceStartRequest (TUSBMouseDevice *pThis);
static void USBMouseDeviceCompletionRoutine (TUSBRequest *pURB, void *pParam, void *pContext);

void USBMouseDevice (TUSBMouseDevice *pThis, TUSBDevice *pDevice)
{
   2a4dc:	e92d4810 	push	{r4, fp, lr}
   2a4e0:	e28db008 	add	fp, sp, #8
   2a4e4:	e24dd00c 	sub	sp, sp, #12
   2a4e8:	e1a0400e 	mov	r4, lr
   2a4ec:	e50b0010 	str	r0, [fp, #-16]
   2a4f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2a4f4:	e1a03004 	mov	r3, r4
   2a4f8:	e30a04dc 	movw	r0, #42204	; 0xa4dc
   2a4fc:	e3400002 	movt	r0, #2
   2a500:	e1a01003 	mov	r1, r3
   2a504:	ebffac84 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2a508:	e51b3010 	ldr	r3, [fp, #-16]
   2a50c:	e3530000 	cmp	r3, #0
   2a510:	1a000005 	bne	2a52c <USBMouseDevice+0x50>
   2a514:	e300058c 	movw	r0, #1420	; 0x58c
   2a518:	e3400003 	movt	r0, #3
   2a51c:	e3001598 	movw	r1, #1432	; 0x598
   2a520:	e3401003 	movt	r1, #3
   2a524:	e3a02025 	mov	r2, #37	; 0x25
   2a528:	ebffb120 	bl	169b0 <uspi_assertion_failed>

	USBDeviceCopy (&pThis->m_USBDevice, pDevice);
   2a52c:	e51b3010 	ldr	r3, [fp, #-16]
   2a530:	e1a00003 	mov	r0, r3
   2a534:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   2a538:	ebffd21c 	bl	1edb0 <USBDeviceCopy>
	pThis->m_USBDevice.Configure = USBMouseDeviceConfigure;
   2a53c:	e51b2010 	ldr	r2, [fp, #-16]
   2a540:	e30a36b4 	movw	r3, #42676	; 0xa6b4
   2a544:	e3403002 	movt	r3, #2
   2a548:	e5823000 	str	r3, [r2]

	pThis->m_pReportEndpoint = 0;
   2a54c:	e51b3010 	ldr	r3, [fp, #-16]
   2a550:	e3a02000 	mov	r2, #0
   2a554:	e583203c 	str	r2, [r3, #60]	; 0x3c
	pThis->m_pStatusHandler = 0;
   2a558:	e51b3010 	ldr	r3, [fp, #-16]
   2a55c:	e3a02000 	mov	r2, #0
   2a560:	e5832040 	str	r2, [r3, #64]	; 0x40
	pThis->m_pURB = 0;
   2a564:	e51b3010 	ldr	r3, [fp, #-16]
   2a568:	e3a02000 	mov	r2, #0
   2a56c:	e5832044 	str	r2, [r3, #68]	; 0x44
	pThis->m_pReportBuffer = 0;
   2a570:	e51b3010 	ldr	r3, [fp, #-16]
   2a574:	e3a02000 	mov	r2, #0
   2a578:	e5832048 	str	r2, [r3, #72]	; 0x48

	pThis->m_pReportBuffer = malloc (MOUSE_BOOT_REPORT_SIZE);
   2a57c:	e3a00003 	mov	r0, #3
   2a580:	ebffb134 	bl	16a58 <malloc>
   2a584:	e1a03000 	mov	r3, r0
   2a588:	e1a02003 	mov	r2, r3
   2a58c:	e51b3010 	ldr	r3, [fp, #-16]
   2a590:	e5832048 	str	r2, [r3, #72]	; 0x48
	assert (pThis->m_pReportBuffer != 0);
   2a594:	e51b3010 	ldr	r3, [fp, #-16]
   2a598:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   2a59c:	e3530000 	cmp	r3, #0
   2a5a0:	1a000005 	bne	2a5bc <USBMouseDevice+0xe0>
   2a5a4:	e30005f4 	movw	r0, #1524	; 0x5f4
   2a5a8:	e3400003 	movt	r0, #3
   2a5ac:	e3001598 	movw	r1, #1432	; 0x598
   2a5b0:	e3401003 	movt	r1, #3
   2a5b4:	e3a02030 	mov	r2, #48	; 0x30
   2a5b8:	ebffb0fc 	bl	169b0 <uspi_assertion_failed>
   2a5bc:	e1a03004 	mov	r3, r4
   2a5c0:	e30a04dc 	movw	r0, #42204	; 0xa4dc
   2a5c4:	e3400002 	movt	r0, #2
   2a5c8:	e1a01003 	mov	r1, r3
   2a5cc:	ebffaca4 	bl	15864 <__cyg_profile_func_exit>
}
   2a5d0:	e24bd008 	sub	sp, fp, #8
   2a5d4:	e8bd8810 	pop	{r4, fp, pc}

0002a5d8 <_CUSBMouseDevice>:

void _CUSBMouseDevice (TUSBMouseDevice *pThis)
{
   2a5d8:	e92d4810 	push	{r4, fp, lr}
   2a5dc:	e28db008 	add	fp, sp, #8
   2a5e0:	e24dd00c 	sub	sp, sp, #12
   2a5e4:	e1a0400e 	mov	r4, lr
   2a5e8:	e50b0010 	str	r0, [fp, #-16]
   2a5ec:	e1a03004 	mov	r3, r4
   2a5f0:	e30a05d8 	movw	r0, #42456	; 0xa5d8
   2a5f4:	e3400002 	movt	r0, #2
   2a5f8:	e1a01003 	mov	r1, r3
   2a5fc:	ebffac46 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2a600:	e51b3010 	ldr	r3, [fp, #-16]
   2a604:	e3530000 	cmp	r3, #0
   2a608:	1a000005 	bne	2a624 <_CUSBMouseDevice+0x4c>
   2a60c:	e300058c 	movw	r0, #1420	; 0x58c
   2a610:	e3400003 	movt	r0, #3
   2a614:	e3001598 	movw	r1, #1432	; 0x598
   2a618:	e3401003 	movt	r1, #3
   2a61c:	e3a02035 	mov	r2, #53	; 0x35
   2a620:	ebffb0e2 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pReportBuffer != 0)
   2a624:	e51b3010 	ldr	r3, [fp, #-16]
   2a628:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   2a62c:	e3530000 	cmp	r3, #0
   2a630:	0a000006 	beq	2a650 <_CUSBMouseDevice+0x78>
	{
		free (pThis->m_pReportBuffer);
   2a634:	e51b3010 	ldr	r3, [fp, #-16]
   2a638:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   2a63c:	e1a00003 	mov	r0, r3
   2a640:	ebffb11a 	bl	16ab0 <free>
		pThis->m_pReportBuffer = 0;
   2a644:	e51b3010 	ldr	r3, [fp, #-16]
   2a648:	e3a02000 	mov	r2, #0
   2a64c:	e5832048 	str	r2, [r3, #72]	; 0x48
	}

	if (pThis->m_pReportEndpoint != 0)
   2a650:	e51b3010 	ldr	r3, [fp, #-16]
   2a654:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2a658:	e3530000 	cmp	r3, #0
   2a65c:	0a00000a 	beq	2a68c <_CUSBMouseDevice+0xb4>
	{
		_USBEndpoint (pThis->m_pReportEndpoint);
   2a660:	e51b3010 	ldr	r3, [fp, #-16]
   2a664:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2a668:	e1a00003 	mov	r0, r3
   2a66c:	ebffd9a8 	bl	20d14 <_USBEndpoint>
		free (pThis->m_pReportEndpoint);
   2a670:	e51b3010 	ldr	r3, [fp, #-16]
   2a674:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2a678:	e1a00003 	mov	r0, r3
   2a67c:	ebffb10b 	bl	16ab0 <free>
		pThis->m_pReportEndpoint = 0;
   2a680:	e51b3010 	ldr	r3, [fp, #-16]
   2a684:	e3a02000 	mov	r2, #0
   2a688:	e583203c 	str	r2, [r3, #60]	; 0x3c
	}

	_USBDevice (&pThis->m_USBDevice);
   2a68c:	e51b3010 	ldr	r3, [fp, #-16]
   2a690:	e1a00003 	mov	r0, r3
   2a694:	ebffd295 	bl	1f0f0 <_USBDevice>
   2a698:	e1a03004 	mov	r3, r4
   2a69c:	e30a05d8 	movw	r0, #42456	; 0xa5d8
   2a6a0:	e3400002 	movt	r0, #2
   2a6a4:	e1a01003 	mov	r1, r3
   2a6a8:	ebffac6d 	bl	15864 <__cyg_profile_func_exit>
}
   2a6ac:	e24bd008 	sub	sp, fp, #8
   2a6b0:	e8bd8810 	pop	{r4, fp, pc}

0002a6b4 <USBMouseDeviceConfigure>:

boolean USBMouseDeviceConfigure (TUSBDevice *pUSBDevice)
{
   2a6b4:	e92d4830 	push	{r4, r5, fp, lr}
   2a6b8:	e28db00c 	add	fp, sp, #12
   2a6bc:	e24dd038 	sub	sp, sp, #56	; 0x38
   2a6c0:	e1a0500e 	mov	r5, lr
   2a6c4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   2a6c8:	e1a03005 	mov	r3, r5
   2a6cc:	e30a06b4 	movw	r0, #42676	; 0xa6b4
   2a6d0:	e3400002 	movt	r0, #2
   2a6d4:	e1a01003 	mov	r1, r3
   2a6d8:	ebffac0f 	bl	1571c <__cyg_profile_func_enter>
	TUSBMouseDevice *pThis = (TUSBMouseDevice *) pUSBDevice;
   2a6dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a6e0:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   2a6e4:	e51b3010 	ldr	r3, [fp, #-16]
   2a6e8:	e3530000 	cmp	r3, #0
   2a6ec:	1a000005 	bne	2a708 <USBMouseDeviceConfigure+0x54>
   2a6f0:	e300058c 	movw	r0, #1420	; 0x58c
   2a6f4:	e3400003 	movt	r0, #3
   2a6f8:	e3001598 	movw	r1, #1432	; 0x598
   2a6fc:	e3401003 	movt	r1, #3
   2a700:	e3a0204a 	mov	r2, #74	; 0x4a
   2a704:	ebffb0a9 	bl	169b0 <uspi_assertion_failed>

	TUSBConfigurationDescriptor *pConfDesc =
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
   2a708:	e51b3010 	ldr	r3, [fp, #-16]
boolean USBMouseDeviceConfigure (TUSBDevice *pUSBDevice)
{
	TUSBMouseDevice *pThis = (TUSBMouseDevice *) pUSBDevice;
	assert (pThis != 0);

	TUSBConfigurationDescriptor *pConfDesc =
   2a70c:	e1a00003 	mov	r0, r3
   2a710:	e3a01002 	mov	r1, #2
   2a714:	ebffd6b2 	bl	201e4 <USBDeviceGetDescriptor>
   2a718:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
	if (   pConfDesc == 0
   2a71c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a720:	e3530000 	cmp	r3, #0
   2a724:	0a000003 	beq	2a738 <USBMouseDeviceConfigure+0x84>
	    || pConfDesc->bNumInterfaces <  1)
   2a728:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a72c:	e5d33004 	ldrb	r3, [r3, #4]
   2a730:	e3530000 	cmp	r3, #0
   2a734:	1a000006 	bne	2a754 <USBMouseDeviceConfigure+0xa0>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBKbd);
   2a738:	e51b3010 	ldr	r3, [fp, #-16]
   2a73c:	e1a00003 	mov	r0, r3
   2a740:	e3001584 	movw	r1, #1412	; 0x584
   2a744:	e3401003 	movt	r1, #3
   2a748:	ebffd6d4 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   2a74c:	e3a04000 	mov	r4, #0
   2a750:	ea0000d8 	b	2aab8 <USBMouseDeviceConfigure+0x404>
	}

	TUSBInterfaceDescriptor *pInterfaceDesc;
	while ((pInterfaceDesc = (TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE)) != 0)
   2a754:	ea00004e 	b	2a894 <USBMouseDeviceConfigure+0x1e0>
	{
		if (   pInterfaceDesc->bNumEndpoints	  <  1
   2a758:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a75c:	e5d33004 	ldrb	r3, [r3, #4]
   2a760:	e3530000 	cmp	r3, #0
   2a764:	0a00000b 	beq	2a798 <USBMouseDeviceConfigure+0xe4>
		    || pInterfaceDesc->bInterfaceClass	  != 0x03	// HID Class
   2a768:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a76c:	e5d33005 	ldrb	r3, [r3, #5]
   2a770:	e3530003 	cmp	r3, #3
   2a774:	1a000007 	bne	2a798 <USBMouseDeviceConfigure+0xe4>
		    || pInterfaceDesc->bInterfaceSubClass != 0x01	// Boot Interface Subclass
   2a778:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a77c:	e5d33006 	ldrb	r3, [r3, #6]
   2a780:	e3530001 	cmp	r3, #1
   2a784:	1a000003 	bne	2a798 <USBMouseDeviceConfigure+0xe4>
		    || pInterfaceDesc->bInterfaceProtocol != 0x02)	// Mouse
   2a788:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a78c:	e5d33007 	ldrb	r3, [r3, #7]
   2a790:	e3530002 	cmp	r3, #2
   2a794:	0a000000 	beq	2a79c <USBMouseDeviceConfigure+0xe8>
		{
			continue;
   2a798:	ea00003d 	b	2a894 <USBMouseDeviceConfigure+0x1e0>
		}

		pThis->m_ucInterfaceNumber  = pInterfaceDesc->bInterfaceNumber;
   2a79c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a7a0:	e5d32002 	ldrb	r2, [r3, #2]
   2a7a4:	e51b3010 	ldr	r3, [fp, #-16]
   2a7a8:	e5c32038 	strb	r2, [r3, #56]	; 0x38
		pThis->m_ucAlternateSetting = pInterfaceDesc->bAlternateSetting;
   2a7ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a7b0:	e5d32003 	ldrb	r2, [r3, #3]
   2a7b4:	e51b3010 	ldr	r3, [fp, #-16]
   2a7b8:	e5c32039 	strb	r2, [r3, #57]	; 0x39

		TUSBEndpointDescriptor *pEndpointDesc =
			(TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT);
   2a7bc:	e51b3010 	ldr	r3, [fp, #-16]
		}

		pThis->m_ucInterfaceNumber  = pInterfaceDesc->bInterfaceNumber;
		pThis->m_ucAlternateSetting = pInterfaceDesc->bAlternateSetting;

		TUSBEndpointDescriptor *pEndpointDesc =
   2a7c0:	e1a00003 	mov	r0, r3
   2a7c4:	e3a01005 	mov	r1, #5
   2a7c8:	ebffd685 	bl	201e4 <USBDeviceGetDescriptor>
   2a7cc:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
			(TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT);
		if (   pEndpointDesc == 0
   2a7d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a7d4:	e3530000 	cmp	r3, #0
   2a7d8:	0a00000a 	beq	2a808 <USBMouseDeviceConfigure+0x154>
		    || (pEndpointDesc->bEndpointAddress & 0x80) != 0x80		// Input EP
   2a7dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a7e0:	e5d33002 	ldrb	r3, [r3, #2]
   2a7e4:	e6ef3073 	uxtb	r3, r3
   2a7e8:	e6af3073 	sxtb	r3, r3
   2a7ec:	e3530000 	cmp	r3, #0
   2a7f0:	aa000004 	bge	2a808 <USBMouseDeviceConfigure+0x154>
		    || (pEndpointDesc->bmAttributes     & 0x3F)	!= 0x03)	// Interrupt EP
   2a7f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a7f8:	e5d33003 	ldrb	r3, [r3, #3]
   2a7fc:	e203303f 	and	r3, r3, #63	; 0x3f
   2a800:	e3530003 	cmp	r3, #3
   2a804:	0a000000 	beq	2a80c <USBMouseDeviceConfigure+0x158>
		{
			continue;
   2a808:	ea000021 	b	2a894 <USBMouseDeviceConfigure+0x1e0>
		}

		assert (pThis->m_pReportEndpoint == 0);
   2a80c:	e51b3010 	ldr	r3, [fp, #-16]
   2a810:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2a814:	e3530000 	cmp	r3, #0
   2a818:	0a000005 	beq	2a834 <USBMouseDeviceConfigure+0x180>
   2a81c:	e3000610 	movw	r0, #1552	; 0x610
   2a820:	e3400003 	movt	r0, #3
   2a824:	e3001598 	movw	r1, #1432	; 0x598
   2a828:	e3401003 	movt	r1, #3
   2a82c:	e3a0206d 	mov	r2, #109	; 0x6d
   2a830:	ebffb05e 	bl	169b0 <uspi_assertion_failed>
		pThis->m_pReportEndpoint = malloc (sizeof (TUSBEndpoint));
   2a834:	e3a00018 	mov	r0, #24
   2a838:	ebffb086 	bl	16a58 <malloc>
   2a83c:	e1a03000 	mov	r3, r0
   2a840:	e1a02003 	mov	r2, r3
   2a844:	e51b3010 	ldr	r3, [fp, #-16]
   2a848:	e583203c 	str	r2, [r3, #60]	; 0x3c
		assert (pThis->m_pReportEndpoint != 0);
   2a84c:	e51b3010 	ldr	r3, [fp, #-16]
   2a850:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2a854:	e3530000 	cmp	r3, #0
   2a858:	1a000005 	bne	2a874 <USBMouseDeviceConfigure+0x1c0>
   2a85c:	e3000630 	movw	r0, #1584	; 0x630
   2a860:	e3400003 	movt	r0, #3
   2a864:	e3001598 	movw	r1, #1432	; 0x598
   2a868:	e3401003 	movt	r1, #3
   2a86c:	e3a0206f 	mov	r2, #111	; 0x6f
   2a870:	ebffb04e 	bl	169b0 <uspi_assertion_failed>
		USBEndpoint2 (pThis->m_pReportEndpoint, &pThis->m_USBDevice, pEndpointDesc);
   2a874:	e51b3010 	ldr	r3, [fp, #-16]
   2a878:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   2a87c:	e51b3010 	ldr	r3, [fp, #-16]
   2a880:	e1a00002 	mov	r0, r2
   2a884:	e1a01003 	mov	r1, r3
   2a888:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2a88c:	ebffd82d 	bl	20948 <USBEndpoint2>

		break;
   2a890:	ea000007 	b	2a8b4 <USBMouseDeviceConfigure+0x200>

		return FALSE;
	}

	TUSBInterfaceDescriptor *pInterfaceDesc;
	while ((pInterfaceDesc = (TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE)) != 0)
   2a894:	e51b3010 	ldr	r3, [fp, #-16]
   2a898:	e1a00003 	mov	r0, r3
   2a89c:	e3a01004 	mov	r1, #4
   2a8a0:	ebffd64f 	bl	201e4 <USBDeviceGetDescriptor>
   2a8a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2a8a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a8ac:	e3530000 	cmp	r3, #0
   2a8b0:	1affffa8 	bne	2a758 <USBMouseDeviceConfigure+0xa4>
		USBEndpoint2 (pThis->m_pReportEndpoint, &pThis->m_USBDevice, pEndpointDesc);

		break;
	}

	if (pThis->m_pReportEndpoint == 0)
   2a8b4:	e51b3010 	ldr	r3, [fp, #-16]
   2a8b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2a8bc:	e3530000 	cmp	r3, #0
   2a8c0:	1a000006 	bne	2a8e0 <USBMouseDeviceConfigure+0x22c>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBKbd);
   2a8c4:	e51b3010 	ldr	r3, [fp, #-16]
   2a8c8:	e1a00003 	mov	r0, r3
   2a8cc:	e3001584 	movw	r1, #1412	; 0x584
   2a8d0:	e3401003 	movt	r1, #3
   2a8d4:	ebffd671 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   2a8d8:	e3a04000 	mov	r4, #0
   2a8dc:	ea000075 	b	2aab8 <USBMouseDeviceConfigure+0x404>
	}
	
	if (!USBDeviceConfigure (&pThis->m_USBDevice))
   2a8e0:	e51b3010 	ldr	r3, [fp, #-16]
   2a8e4:	e1a00003 	mov	r0, r3
   2a8e8:	ebffd42f 	bl	1f9ac <USBDeviceConfigure>
   2a8ec:	e1a03000 	mov	r3, r0
   2a8f0:	e3530000 	cmp	r3, #0
   2a8f4:	1a000007 	bne	2a918 <USBMouseDeviceConfigure+0x264>
	{
		LogWrite (FromUSBKbd, LOG_ERROR, "Cannot set configuration");
   2a8f8:	e3000584 	movw	r0, #1412	; 0x584
   2a8fc:	e3400003 	movt	r0, #3
   2a900:	e3a01001 	mov	r1, #1
   2a904:	e3002650 	movw	r2, #1616	; 0x650
   2a908:	e3402003 	movt	r2, #3
   2a90c:	ebffb00f 	bl	16950 <LogWrite>

		return FALSE;
   2a910:	e3a04000 	mov	r4, #0
   2a914:	ea000067 	b	2aab8 <USBMouseDeviceConfigure+0x404>
	}

	if (pThis->m_ucAlternateSetting != 0)
   2a918:	e51b3010 	ldr	r3, [fp, #-16]
   2a91c:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
   2a920:	e3530000 	cmp	r3, #0
   2a924:	0a000022 	beq	2a9b4 <USBMouseDeviceConfigure+0x300>
	{
		if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2a928:	e51b3010 	ldr	r3, [fp, #-16]
   2a92c:	e1a00003 	mov	r0, r3
   2a930:	ebffd5b3 	bl	20004 <USBDeviceGetHost>
   2a934:	e1a04000 	mov	r4, r0
					USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   2a938:	e51b3010 	ldr	r3, [fp, #-16]
   2a93c:	e1a00003 	mov	r0, r3
   2a940:	ebffd587 	bl	1ff64 <USBDeviceGetEndpoint0>
   2a944:	e1a01000 	mov	r1, r0
					REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
					pThis->m_ucAlternateSetting,
   2a948:	e51b3010 	ldr	r3, [fp, #-16]
   2a94c:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
		return FALSE;
	}

	if (pThis->m_ucAlternateSetting != 0)
	{
		if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2a950:	e6ff2073 	uxth	r2, r3
					USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
					REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
					pThis->m_ucAlternateSetting,
					pThis->m_ucInterfaceNumber, 0, 0) < 0)
   2a954:	e51b3010 	ldr	r3, [fp, #-16]
   2a958:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
		return FALSE;
	}

	if (pThis->m_ucAlternateSetting != 0)
	{
		if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2a95c:	e6ff3073 	uxth	r3, r3
   2a960:	e58d2000 	str	r2, [sp]
   2a964:	e58d3004 	str	r3, [sp, #4]
   2a968:	e3a03000 	mov	r3, #0
   2a96c:	e58d3008 	str	r3, [sp, #8]
   2a970:	e3a03000 	mov	r3, #0
   2a974:	e58d300c 	str	r3, [sp, #12]
   2a978:	e1a00004 	mov	r0, r4
   2a97c:	e3a02001 	mov	r2, #1
   2a980:	e3a0300b 	mov	r3, #11
   2a984:	ebffb876 	bl	18b64 <DWHCIDeviceControlMessage>
   2a988:	e1a03000 	mov	r3, r0
   2a98c:	e3530000 	cmp	r3, #0
   2a990:	aa000007 	bge	2a9b4 <USBMouseDeviceConfigure+0x300>
					USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
					REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
					pThis->m_ucAlternateSetting,
					pThis->m_ucInterfaceNumber, 0, 0) < 0)
		{
			LogWrite (FromUSBKbd, LOG_ERROR, "Cannot set interface");
   2a994:	e3000584 	movw	r0, #1412	; 0x584
   2a998:	e3400003 	movt	r0, #3
   2a99c:	e3a01001 	mov	r1, #1
   2a9a0:	e300266c 	movw	r2, #1644	; 0x66c
   2a9a4:	e3402003 	movt	r2, #3
   2a9a8:	ebffafe8 	bl	16950 <LogWrite>

			return FALSE;
   2a9ac:	e3a04000 	mov	r4, #0
   2a9b0:	ea000040 	b	2aab8 <USBMouseDeviceConfigure+0x404>
		}
	}

	if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2a9b4:	e51b3010 	ldr	r3, [fp, #-16]
   2a9b8:	e1a00003 	mov	r0, r3
   2a9bc:	ebffd590 	bl	20004 <USBDeviceGetHost>
   2a9c0:	e1a04000 	mov	r4, r0
				       USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   2a9c4:	e51b3010 	ldr	r3, [fp, #-16]
   2a9c8:	e1a00003 	mov	r0, r3
   2a9cc:	ebffd564 	bl	1ff64 <USBDeviceGetEndpoint0>
   2a9d0:	e1a01000 	mov	r1, r0
				       REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_INTERFACE,
				       SET_PROTOCOL, BOOT_PROTOCOL,
				       pThis->m_ucInterfaceNumber, 0, 0) < 0)
   2a9d4:	e51b3010 	ldr	r3, [fp, #-16]
   2a9d8:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38

			return FALSE;
		}
	}

	if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2a9dc:	e6ff3073 	uxth	r3, r3
   2a9e0:	e3a02000 	mov	r2, #0
   2a9e4:	e58d2000 	str	r2, [sp]
   2a9e8:	e58d3004 	str	r3, [sp, #4]
   2a9ec:	e3a03000 	mov	r3, #0
   2a9f0:	e58d3008 	str	r3, [sp, #8]
   2a9f4:	e3a03000 	mov	r3, #0
   2a9f8:	e58d300c 	str	r3, [sp, #12]
   2a9fc:	e1a00004 	mov	r0, r4
   2aa00:	e3a02021 	mov	r2, #33	; 0x21
   2aa04:	e3a0300b 	mov	r3, #11
   2aa08:	ebffb855 	bl	18b64 <DWHCIDeviceControlMessage>
   2aa0c:	e1a03000 	mov	r3, r0
   2aa10:	e3530000 	cmp	r3, #0
   2aa14:	aa000007 	bge	2aa38 <USBMouseDeviceConfigure+0x384>
				       USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
				       REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_INTERFACE,
				       SET_PROTOCOL, BOOT_PROTOCOL,
				       pThis->m_ucInterfaceNumber, 0, 0) < 0)
	{
		LogWrite (FromUSBKbd, LOG_ERROR, "Cannot set boot protocol");
   2aa18:	e3000584 	movw	r0, #1412	; 0x584
   2aa1c:	e3400003 	movt	r0, #3
   2aa20:	e3a01001 	mov	r1, #1
   2aa24:	e3002684 	movw	r2, #1668	; 0x684
   2aa28:	e3402003 	movt	r2, #3
   2aa2c:	ebffafc7 	bl	16950 <LogWrite>

		return FALSE;
   2aa30:	e3a04000 	mov	r4, #0
   2aa34:	ea00001f 	b	2aab8 <USBMouseDeviceConfigure+0x404>
	}

	TString DeviceName;
	String (&DeviceName);
   2aa38:	e24b3028 	sub	r3, fp, #40	; 0x28
   2aa3c:	e1a00003 	mov	r0, r3
   2aa40:	ebffe8e0 	bl	24dc8 <String>
	StringFormat (&DeviceName, "umouse%u", s_nDeviceNumber++);
   2aa44:	e3003c54 	movw	r3, #3156	; 0xc54
   2aa48:	e3403003 	movt	r3, #3
   2aa4c:	e5932000 	ldr	r2, [r3]
   2aa50:	e2821001 	add	r1, r2, #1
   2aa54:	e3003c54 	movw	r3, #3156	; 0xc54
   2aa58:	e3403003 	movt	r3, #3
   2aa5c:	e5831000 	str	r1, [r3]
   2aa60:	e24b3028 	sub	r3, fp, #40	; 0x28
   2aa64:	e1a00003 	mov	r0, r3
   2aa68:	e30016a0 	movw	r1, #1696	; 0x6a0
   2aa6c:	e3401003 	movt	r1, #3
   2aa70:	ebffea78 	bl	25458 <StringFormat>
	DeviceNameServiceAddDevice (DeviceNameServiceGet (), StringGet (&DeviceName), pThis, FALSE);
   2aa74:	ebffe2b0 	bl	2353c <DeviceNameServiceGet>
   2aa78:	e1a04000 	mov	r4, r0
   2aa7c:	e24b3028 	sub	r3, fp, #40	; 0x28
   2aa80:	e1a00003 	mov	r0, r3
   2aa84:	ebffe942 	bl	24f94 <StringGet>
   2aa88:	e1a03000 	mov	r3, r0
   2aa8c:	e1a00004 	mov	r0, r4
   2aa90:	e1a01003 	mov	r1, r3
   2aa94:	e51b2010 	ldr	r2, [fp, #-16]
   2aa98:	e3a03000 	mov	r3, #0
   2aa9c:	ebffe1ee 	bl	2325c <DeviceNameServiceAddDevice>

	_String (&DeviceName);
   2aaa0:	e24b3028 	sub	r3, fp, #40	; 0x28
   2aaa4:	e1a00003 	mov	r0, r3
   2aaa8:	ebffe914 	bl	24f00 <_String>

	return USBMouseDeviceStartRequest (pThis);
   2aaac:	e51b0010 	ldr	r0, [fp, #-16]
   2aab0:	eb000030 	bl	2ab78 <USBMouseDeviceStartRequest>
   2aab4:	e1a04000 	mov	r4, r0
   2aab8:	e1a03005 	mov	r3, r5
   2aabc:	e30a06b4 	movw	r0, #42676	; 0xa6b4
   2aac0:	e3400002 	movt	r0, #2
   2aac4:	e1a01003 	mov	r1, r3
   2aac8:	ebffab65 	bl	15864 <__cyg_profile_func_exit>
   2aacc:	e1a03004 	mov	r3, r4
}
   2aad0:	e1a00003 	mov	r0, r3
   2aad4:	e24bd00c 	sub	sp, fp, #12
   2aad8:	e8bd8830 	pop	{r4, r5, fp, pc}

0002aadc <USBMouseDeviceRegisterStatusHandler>:

void USBMouseDeviceRegisterStatusHandler (TUSBMouseDevice *pThis, TMouseStatusHandler *pStatusHandler)
{
   2aadc:	e92d4810 	push	{r4, fp, lr}
   2aae0:	e28db008 	add	fp, sp, #8
   2aae4:	e24dd00c 	sub	sp, sp, #12
   2aae8:	e1a0400e 	mov	r4, lr
   2aaec:	e50b0010 	str	r0, [fp, #-16]
   2aaf0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2aaf4:	e1a03004 	mov	r3, r4
   2aaf8:	e30a0adc 	movw	r0, #43740	; 0xaadc
   2aafc:	e3400002 	movt	r0, #2
   2ab00:	e1a01003 	mov	r1, r3
   2ab04:	ebffab04 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2ab08:	e51b3010 	ldr	r3, [fp, #-16]
   2ab0c:	e3530000 	cmp	r3, #0
   2ab10:	1a000005 	bne	2ab2c <USBMouseDeviceRegisterStatusHandler+0x50>
   2ab14:	e300058c 	movw	r0, #1420	; 0x58c
   2ab18:	e3400003 	movt	r0, #3
   2ab1c:	e3001598 	movw	r1, #1432	; 0x598
   2ab20:	e3401003 	movt	r1, #3
   2ab24:	e3a020a8 	mov	r2, #168	; 0xa8
   2ab28:	ebffafa0 	bl	169b0 <uspi_assertion_failed>
	assert (pStatusHandler != 0);
   2ab2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2ab30:	e3530000 	cmp	r3, #0
   2ab34:	1a000005 	bne	2ab50 <USBMouseDeviceRegisterStatusHandler+0x74>
   2ab38:	e30006ac 	movw	r0, #1708	; 0x6ac
   2ab3c:	e3400003 	movt	r0, #3
   2ab40:	e3001598 	movw	r1, #1432	; 0x598
   2ab44:	e3401003 	movt	r1, #3
   2ab48:	e3a020a9 	mov	r2, #169	; 0xa9
   2ab4c:	ebffaf97 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pStatusHandler = pStatusHandler;
   2ab50:	e51b3010 	ldr	r3, [fp, #-16]
   2ab54:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2ab58:	e5832040 	str	r2, [r3, #64]	; 0x40
   2ab5c:	e1a03004 	mov	r3, r4
   2ab60:	e30a0adc 	movw	r0, #43740	; 0xaadc
   2ab64:	e3400002 	movt	r0, #2
   2ab68:	e1a01003 	mov	r1, r3
   2ab6c:	ebffab3c 	bl	15864 <__cyg_profile_func_exit>
}
   2ab70:	e24bd008 	sub	sp, fp, #8
   2ab74:	e8bd8810 	pop	{r4, fp, pc}

0002ab78 <USBMouseDeviceStartRequest>:

boolean USBMouseDeviceStartRequest (TUSBMouseDevice *pThis)
{
   2ab78:	e92d4830 	push	{r4, r5, fp, lr}
   2ab7c:	e28db00c 	add	fp, sp, #12
   2ab80:	e24dd010 	sub	sp, sp, #16
   2ab84:	e1a0400e 	mov	r4, lr
   2ab88:	e50b0010 	str	r0, [fp, #-16]
   2ab8c:	e1a03004 	mov	r3, r4
   2ab90:	e30a0b78 	movw	r0, #43896	; 0xab78
   2ab94:	e3400002 	movt	r0, #2
   2ab98:	e1a01003 	mov	r1, r3
   2ab9c:	ebffaade 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2aba0:	e51b3010 	ldr	r3, [fp, #-16]
   2aba4:	e3530000 	cmp	r3, #0
   2aba8:	1a000005 	bne	2abc4 <USBMouseDeviceStartRequest+0x4c>
   2abac:	e300058c 	movw	r0, #1420	; 0x58c
   2abb0:	e3400003 	movt	r0, #3
   2abb4:	e3001598 	movw	r1, #1432	; 0x598
   2abb8:	e3401003 	movt	r1, #3
   2abbc:	e3a020af 	mov	r2, #175	; 0xaf
   2abc0:	ebffaf7a 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pReportEndpoint != 0);
   2abc4:	e51b3010 	ldr	r3, [fp, #-16]
   2abc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2abcc:	e3530000 	cmp	r3, #0
   2abd0:	1a000005 	bne	2abec <USBMouseDeviceStartRequest+0x74>
   2abd4:	e3000630 	movw	r0, #1584	; 0x630
   2abd8:	e3400003 	movt	r0, #3
   2abdc:	e3001598 	movw	r1, #1432	; 0x598
   2abe0:	e3401003 	movt	r1, #3
   2abe4:	e3a020b1 	mov	r2, #177	; 0xb1
   2abe8:	ebffaf70 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pReportBuffer != 0);
   2abec:	e51b3010 	ldr	r3, [fp, #-16]
   2abf0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   2abf4:	e3530000 	cmp	r3, #0
   2abf8:	1a000005 	bne	2ac14 <USBMouseDeviceStartRequest+0x9c>
   2abfc:	e30005f4 	movw	r0, #1524	; 0x5f4
   2ac00:	e3400003 	movt	r0, #3
   2ac04:	e3001598 	movw	r1, #1432	; 0x598
   2ac08:	e3401003 	movt	r1, #3
   2ac0c:	e3a020b2 	mov	r2, #178	; 0xb2
   2ac10:	ebffaf66 	bl	169b0 <uspi_assertion_failed>
	
	assert (pThis->m_pURB == 0);
   2ac14:	e51b3010 	ldr	r3, [fp, #-16]
   2ac18:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2ac1c:	e3530000 	cmp	r3, #0
   2ac20:	0a000005 	beq	2ac3c <USBMouseDeviceStartRequest+0xc4>
   2ac24:	e30006c0 	movw	r0, #1728	; 0x6c0
   2ac28:	e3400003 	movt	r0, #3
   2ac2c:	e3001598 	movw	r1, #1432	; 0x598
   2ac30:	e3401003 	movt	r1, #3
   2ac34:	e3a020b4 	mov	r2, #180	; 0xb4
   2ac38:	ebffaf5c 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pURB = malloc (sizeof (TUSBRequest));
   2ac3c:	e3a00024 	mov	r0, #36	; 0x24
   2ac40:	ebffaf84 	bl	16a58 <malloc>
   2ac44:	e1a03000 	mov	r3, r0
   2ac48:	e1a02003 	mov	r2, r3
   2ac4c:	e51b3010 	ldr	r3, [fp, #-16]
   2ac50:	e5832044 	str	r2, [r3, #68]	; 0x44
	assert (pThis->m_pURB != 0);
   2ac54:	e51b3010 	ldr	r3, [fp, #-16]
   2ac58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2ac5c:	e3530000 	cmp	r3, #0
   2ac60:	1a000005 	bne	2ac7c <USBMouseDeviceStartRequest+0x104>
   2ac64:	e30006d4 	movw	r0, #1748	; 0x6d4
   2ac68:	e3400003 	movt	r0, #3
   2ac6c:	e3001598 	movw	r1, #1432	; 0x598
   2ac70:	e3401003 	movt	r1, #3
   2ac74:	e3a020b6 	mov	r2, #182	; 0xb6
   2ac78:	ebffaf4c 	bl	169b0 <uspi_assertion_failed>
	USBRequest (pThis->m_pURB, pThis->m_pReportEndpoint, pThis->m_pReportBuffer, MOUSE_BOOT_REPORT_SIZE, 0);
   2ac7c:	e51b3010 	ldr	r3, [fp, #-16]
   2ac80:	e5930044 	ldr	r0, [r3, #68]	; 0x44
   2ac84:	e51b3010 	ldr	r3, [fp, #-16]
   2ac88:	e593103c 	ldr	r1, [r3, #60]	; 0x3c
   2ac8c:	e51b3010 	ldr	r3, [fp, #-16]
   2ac90:	e5932048 	ldr	r2, [r3, #72]	; 0x48
   2ac94:	e3a03000 	mov	r3, #0
   2ac98:	e58d3000 	str	r3, [sp]
   2ac9c:	e3a03003 	mov	r3, #3
   2aca0:	ebffd9d7 	bl	21404 <USBRequest>
	USBRequestSetCompletionRoutine (pThis->m_pURB, USBMouseDeviceCompletionRoutine, 0, pThis);
   2aca4:	e51b3010 	ldr	r3, [fp, #-16]
   2aca8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2acac:	e1a00003 	mov	r0, r3
   2acb0:	e30a1d10 	movw	r1, #44304	; 0xad10
   2acb4:	e3401002 	movt	r1, #2
   2acb8:	e3a02000 	mov	r2, #0
   2acbc:	e51b3010 	ldr	r3, [fp, #-16]
   2acc0:	ebffdb6e 	bl	21a80 <USBRequestSetCompletionRoutine>
	
	return DWHCIDeviceSubmitAsyncRequest (USBDeviceGetHost (&pThis->m_USBDevice), pThis->m_pURB);
   2acc4:	e51b3010 	ldr	r3, [fp, #-16]
   2acc8:	e1a00003 	mov	r0, r3
   2accc:	ebffd4cc 	bl	20004 <USBDeviceGetHost>
   2acd0:	e1a02000 	mov	r2, r0
   2acd4:	e51b3010 	ldr	r3, [fp, #-16]
   2acd8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2acdc:	e1a00002 	mov	r0, r2
   2ace0:	e1a01003 	mov	r1, r3
   2ace4:	ebffb901 	bl	190f0 <DWHCIDeviceSubmitAsyncRequest>
   2ace8:	e1a05000 	mov	r5, r0
   2acec:	e1a03004 	mov	r3, r4
   2acf0:	e30a0b78 	movw	r0, #43896	; 0xab78
   2acf4:	e3400002 	movt	r0, #2
   2acf8:	e1a01003 	mov	r1, r3
   2acfc:	ebffaad8 	bl	15864 <__cyg_profile_func_exit>
   2ad00:	e1a03005 	mov	r3, r5
}
   2ad04:	e1a00003 	mov	r0, r3
   2ad08:	e24bd00c 	sub	sp, fp, #12
   2ad0c:	e8bd8830 	pop	{r4, r5, fp, pc}

0002ad10 <USBMouseDeviceCompletionRoutine>:

void USBMouseDeviceCompletionRoutine (TUSBRequest *pURB, void *pParam, void *pContext)
{
   2ad10:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
   2ad14:	e28db014 	add	fp, sp, #20
   2ad18:	e24dd018 	sub	sp, sp, #24
   2ad1c:	e1a0500e 	mov	r5, lr
   2ad20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   2ad24:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   2ad28:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   2ad2c:	e1a03005 	mov	r3, r5
   2ad30:	e30a0d10 	movw	r0, #44304	; 0xad10
   2ad34:	e3400002 	movt	r0, #2
   2ad38:	e1a01003 	mov	r1, r3
   2ad3c:	ebffaa76 	bl	1571c <__cyg_profile_func_enter>
	TUSBMouseDevice *pThis = (TUSBMouseDevice *) pContext;
   2ad40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2ad44:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	assert (pThis != 0);
   2ad48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ad4c:	e3530000 	cmp	r3, #0
   2ad50:	1a000005 	bne	2ad6c <USBMouseDeviceCompletionRoutine+0x5c>
   2ad54:	e300058c 	movw	r0, #1420	; 0x58c
   2ad58:	e3400003 	movt	r0, #3
   2ad5c:	e3001598 	movw	r1, #1432	; 0x598
   2ad60:	e3401003 	movt	r1, #3
   2ad64:	e3a020c0 	mov	r2, #192	; 0xc0
   2ad68:	ebffaf10 	bl	169b0 <uspi_assertion_failed>
	
	assert (pURB != 0);
   2ad6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ad70:	e3530000 	cmp	r3, #0
   2ad74:	1a000005 	bne	2ad90 <USBMouseDeviceCompletionRoutine+0x80>
   2ad78:	e30006e8 	movw	r0, #1768	; 0x6e8
   2ad7c:	e3400003 	movt	r0, #3
   2ad80:	e3001598 	movw	r1, #1432	; 0x598
   2ad84:	e3401003 	movt	r1, #3
   2ad88:	e3a020c2 	mov	r2, #194	; 0xc2
   2ad8c:	ebffaf07 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pURB == pURB);
   2ad90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ad94:	e5932044 	ldr	r2, [r3, #68]	; 0x44
   2ad98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ad9c:	e1520003 	cmp	r2, r3
   2ada0:	0a000005 	beq	2adbc <USBMouseDeviceCompletionRoutine+0xac>
   2ada4:	e30006f4 	movw	r0, #1780	; 0x6f4
   2ada8:	e3400003 	movt	r0, #3
   2adac:	e3001598 	movw	r1, #1432	; 0x598
   2adb0:	e3401003 	movt	r1, #3
   2adb4:	e3a020c3 	mov	r2, #195	; 0xc3
   2adb8:	ebffaefc 	bl	169b0 <uspi_assertion_failed>

	if (   USBRequestGetStatus (pURB) != 0
   2adbc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   2adc0:	ebffda69 	bl	2176c <USBRequestGetStatus>
   2adc4:	e1a03000 	mov	r3, r0
   2adc8:	e3530000 	cmp	r3, #0
   2adcc:	0a00002e 	beq	2ae8c <USBMouseDeviceCompletionRoutine+0x17c>
	    && USBRequestGetResultLength (pURB) == MOUSE_BOOT_REPORT_SIZE
   2add0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   2add4:	ebffda82 	bl	217e4 <USBRequestGetResultLength>
   2add8:	e1a03000 	mov	r3, r0
   2addc:	e3530003 	cmp	r3, #3
   2ade0:	1a000029 	bne	2ae8c <USBMouseDeviceCompletionRoutine+0x17c>
	    && pThis->m_pStatusHandler != 0)
   2ade4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ade8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2adec:	e3530000 	cmp	r3, #0
   2adf0:	0a000025 	beq	2ae8c <USBMouseDeviceCompletionRoutine+0x17c>
	{
		assert (pThis->m_pReportBuffer != 0);
   2adf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2adf8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   2adfc:	e3530000 	cmp	r3, #0
   2ae00:	1a000005 	bne	2ae1c <USBMouseDeviceCompletionRoutine+0x10c>
   2ae04:	e30005f4 	movw	r0, #1524	; 0x5f4
   2ae08:	e3400003 	movt	r0, #3
   2ae0c:	e3001598 	movw	r1, #1432	; 0x598
   2ae10:	e3401003 	movt	r1, #3
   2ae14:	e3a020c9 	mov	r2, #201	; 0xc9
   2ae18:	ebffaee4 	bl	169b0 <uspi_assertion_failed>
		(*pThis->m_pStatusHandler) (pThis->m_pReportBuffer[0],
   2ae1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ae20:	e5934040 	ldr	r4, [r3, #64]	; 0x40
   2ae24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ae28:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   2ae2c:	e5d33000 	ldrb	r3, [r3]
   2ae30:	e1a07003 	mov	r7, r3
					    uspi_char2int ((char) pThis->m_pReportBuffer[1]),
   2ae34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ae38:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   2ae3c:	e2833001 	add	r3, r3, #1
   2ae40:	e5d33000 	ldrb	r3, [r3]
	if (   USBRequestGetStatus (pURB) != 0
	    && USBRequestGetResultLength (pURB) == MOUSE_BOOT_REPORT_SIZE
	    && pThis->m_pStatusHandler != 0)
	{
		assert (pThis->m_pReportBuffer != 0);
		(*pThis->m_pStatusHandler) (pThis->m_pReportBuffer[0],
   2ae44:	e6ef3073 	uxtb	r3, r3
   2ae48:	e6af3073 	sxtb	r3, r3
   2ae4c:	e1a00003 	mov	r0, r3
   2ae50:	ebffedf3 	bl	26624 <uspi_char2int>
   2ae54:	e1a06000 	mov	r6, r0
					    uspi_char2int ((char) pThis->m_pReportBuffer[1]),
					    uspi_char2int ((char) pThis->m_pReportBuffer[2]));
   2ae58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ae5c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   2ae60:	e2833002 	add	r3, r3, #2
   2ae64:	e5d33000 	ldrb	r3, [r3]
	if (   USBRequestGetStatus (pURB) != 0
	    && USBRequestGetResultLength (pURB) == MOUSE_BOOT_REPORT_SIZE
	    && pThis->m_pStatusHandler != 0)
	{
		assert (pThis->m_pReportBuffer != 0);
		(*pThis->m_pStatusHandler) (pThis->m_pReportBuffer[0],
   2ae68:	e6ef3073 	uxtb	r3, r3
   2ae6c:	e6af3073 	sxtb	r3, r3
   2ae70:	e1a00003 	mov	r0, r3
   2ae74:	ebffedea 	bl	26624 <uspi_char2int>
   2ae78:	e1a03000 	mov	r3, r0
   2ae7c:	e1a00007 	mov	r0, r7
   2ae80:	e1a01006 	mov	r1, r6
   2ae84:	e1a02003 	mov	r2, r3
   2ae88:	e12fff34 	blx	r4
					    uspi_char2int ((char) pThis->m_pReportBuffer[1]),
					    uspi_char2int ((char) pThis->m_pReportBuffer[2]));
	}

	_USBRequest (pThis->m_pURB);
   2ae8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ae90:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2ae94:	e1a00003 	mov	r0, r3
   2ae98:	ebffd9a9 	bl	21544 <_USBRequest>
	free (pThis->m_pURB);
   2ae9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2aea0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2aea4:	e1a00003 	mov	r0, r3
   2aea8:	ebffaf00 	bl	16ab0 <free>
	pThis->m_pURB = 0;
   2aeac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2aeb0:	e3a02000 	mov	r2, #0
   2aeb4:	e5832044 	str	r2, [r3, #68]	; 0x44
	
	USBMouseDeviceStartRequest (pThis);
   2aeb8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2aebc:	ebffff2d 	bl	2ab78 <USBMouseDeviceStartRequest>
   2aec0:	e1a03005 	mov	r3, r5
   2aec4:	e30a0d10 	movw	r0, #44304	; 0xad10
   2aec8:	e3400002 	movt	r0, #2
   2aecc:	e1a01003 	mov	r1, r3
   2aed0:	ebffaa63 	bl	15864 <__cyg_profile_func_exit>
}
   2aed4:	e24bd014 	sub	sp, fp, #20
   2aed8:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}

0002aedc <DWHCIFrameSchedulerNoSplit>:
#include <uspi/assert.h>

#define FRAME_UNSET	(DWHCI_MAX_FRAME_NUMBER+1)

void DWHCIFrameSchedulerNoSplit (TDWHCIFrameSchedulerNoSplit *pThis, boolean bIsPeriodic)
{
   2aedc:	e92d4810 	push	{r4, fp, lr}
   2aee0:	e28db008 	add	fp, sp, #8
   2aee4:	e24dd014 	sub	sp, sp, #20
   2aee8:	e1a0400e 	mov	r4, lr
   2aeec:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2aef0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2aef4:	e1a03004 	mov	r3, r4
   2aef8:	e30a0edc 	movw	r0, #44764	; 0xaedc
   2aefc:	e3400002 	movt	r0, #2
   2af00:	e1a01003 	mov	r1, r3
   2af04:	ebffaa04 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2af08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2af0c:	e3530000 	cmp	r3, #0
   2af10:	1a000005 	bne	2af2c <DWHCIFrameSchedulerNoSplit+0x50>
   2af14:	e300070c 	movw	r0, #1804	; 0x70c
   2af18:	e3400003 	movt	r0, #3
   2af1c:	e3001718 	movw	r1, #1816	; 0x718
   2af20:	e3401003 	movt	r1, #3
   2af24:	e3a0201c 	mov	r2, #28
   2af28:	ebffaea0 	bl	169b0 <uspi_assertion_failed>

	TDWHCIFrameScheduler *pBase = (TDWHCIFrameScheduler *) pThis;
   2af2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2af30:	e50b3010 	str	r3, [fp, #-16]

	pBase->_DWHCIFrameScheduler = _DWHCIFrameSchedulerNoSplit;
   2af34:	e51b2010 	ldr	r2, [fp, #-16]
   2af38:	e30a3fc8 	movw	r3, #45000	; 0xafc8
   2af3c:	e3403002 	movt	r3, #2
   2af40:	e5823000 	str	r3, [r2]
	pBase->StartSplit = DWHCIFrameSchedulerNoSplitStartSplit;
   2af44:	e51b2010 	ldr	r2, [fp, #-16]
   2af48:	e30b300c 	movw	r3, #45068	; 0xb00c
   2af4c:	e3403002 	movt	r3, #2
   2af50:	e5823004 	str	r3, [r2, #4]
	pBase->CompleteSplit = DWHCIFrameSchedulerNoSplitCompleteSplit;
   2af54:	e51b2010 	ldr	r2, [fp, #-16]
   2af58:	e30b3068 	movw	r3, #45160	; 0xb068
   2af5c:	e3403002 	movt	r3, #2
   2af60:	e5823008 	str	r3, [r2, #8]
	pBase->TransactionComplete = DWHCIFrameSchedulerNoSplitTransactionComplete;
   2af64:	e51b2010 	ldr	r2, [fp, #-16]
   2af68:	e30b30d0 	movw	r3, #45264	; 0xb0d0
   2af6c:	e3403002 	movt	r3, #2
   2af70:	e582300c 	str	r3, [r2, #12]
	pBase->WaitForFrame = DWHCIFrameSchedulerNoSplitWaitForFrame;
   2af74:	e51b2010 	ldr	r2, [fp, #-16]
   2af78:	e30b3130 	movw	r3, #45360	; 0xb130
   2af7c:	e3403002 	movt	r3, #2
   2af80:	e5823010 	str	r3, [r2, #16]
	pBase->IsOddFrame = DWHCIFrameSchedulerNoSplitIsOddFrame;
   2af84:	e51b2010 	ldr	r2, [fp, #-16]
   2af88:	e30b3218 	movw	r3, #45592	; 0xb218
   2af8c:	e3403002 	movt	r3, #2
   2af90:	e5823014 	str	r3, [r2, #20]

	pThis->m_bIsPeriodic = bIsPeriodic;
   2af94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2af98:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2af9c:	e5832018 	str	r2, [r3, #24]
	pThis->m_nNextFrame = FRAME_UNSET;
   2afa0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2afa4:	e3a02901 	mov	r2, #16384	; 0x4000
   2afa8:	e583201c 	str	r2, [r3, #28]
   2afac:	e1a03004 	mov	r3, r4
   2afb0:	e30a0edc 	movw	r0, #44764	; 0xaedc
   2afb4:	e3400002 	movt	r0, #2
   2afb8:	e1a01003 	mov	r1, r3
   2afbc:	ebffaa28 	bl	15864 <__cyg_profile_func_exit>

}
   2afc0:	e24bd008 	sub	sp, fp, #8
   2afc4:	e8bd8810 	pop	{r4, fp, pc}

0002afc8 <_DWHCIFrameSchedulerNoSplit>:

void _DWHCIFrameSchedulerNoSplit (TDWHCIFrameScheduler *pBase)
{
   2afc8:	e92d4810 	push	{r4, fp, lr}
   2afcc:	e28db008 	add	fp, sp, #8
   2afd0:	e24dd00c 	sub	sp, sp, #12
   2afd4:	e1a0400e 	mov	r4, lr
   2afd8:	e50b0010 	str	r0, [fp, #-16]
   2afdc:	e1a03004 	mov	r3, r4
   2afe0:	e30a0fc8 	movw	r0, #45000	; 0xafc8
   2afe4:	e3400002 	movt	r0, #2
   2afe8:	e1a01003 	mov	r1, r3
   2afec:	ebffa9ca 	bl	1571c <__cyg_profile_func_enter>
   2aff0:	e1a03004 	mov	r3, r4
   2aff4:	e30a0fc8 	movw	r0, #45000	; 0xafc8
   2aff8:	e3400002 	movt	r0, #2
   2affc:	e1a01003 	mov	r1, r3
   2b000:	ebffaa17 	bl	15864 <__cyg_profile_func_exit>
}
   2b004:	e24bd008 	sub	sp, fp, #8
   2b008:	e8bd8810 	pop	{r4, fp, pc}

0002b00c <DWHCIFrameSchedulerNoSplitStartSplit>:

void DWHCIFrameSchedulerNoSplitStartSplit (TDWHCIFrameScheduler *pBase)
{
   2b00c:	e92d4810 	push	{r4, fp, lr}
   2b010:	e28db008 	add	fp, sp, #8
   2b014:	e24dd00c 	sub	sp, sp, #12
   2b018:	e1a0400e 	mov	r4, lr
   2b01c:	e50b0010 	str	r0, [fp, #-16]
   2b020:	e1a03004 	mov	r3, r4
   2b024:	e30b000c 	movw	r0, #45068	; 0xb00c
   2b028:	e3400002 	movt	r0, #2
   2b02c:	e1a01003 	mov	r1, r3
   2b030:	ebffa9b9 	bl	1571c <__cyg_profile_func_enter>
	assert (0);
   2b034:	e3000784 	movw	r0, #1924	; 0x784
   2b038:	e3400003 	movt	r0, #3
   2b03c:	e3001718 	movw	r1, #1816	; 0x718
   2b040:	e3401003 	movt	r1, #3
   2b044:	e3a02032 	mov	r2, #50	; 0x32
   2b048:	ebffae58 	bl	169b0 <uspi_assertion_failed>
   2b04c:	e1a03004 	mov	r3, r4
   2b050:	e30b000c 	movw	r0, #45068	; 0xb00c
   2b054:	e3400002 	movt	r0, #2
   2b058:	e1a01003 	mov	r1, r3
   2b05c:	ebffaa00 	bl	15864 <__cyg_profile_func_exit>
}
   2b060:	e24bd008 	sub	sp, fp, #8
   2b064:	e8bd8810 	pop	{r4, fp, pc}

0002b068 <DWHCIFrameSchedulerNoSplitCompleteSplit>:

boolean DWHCIFrameSchedulerNoSplitCompleteSplit (TDWHCIFrameScheduler *pBase)
{
   2b068:	e92d4830 	push	{r4, r5, fp, lr}
   2b06c:	e28db00c 	add	fp, sp, #12
   2b070:	e24dd008 	sub	sp, sp, #8
   2b074:	e1a0500e 	mov	r5, lr
   2b078:	e50b0010 	str	r0, [fp, #-16]
   2b07c:	e1a03005 	mov	r3, r5
   2b080:	e30b0068 	movw	r0, #45160	; 0xb068
   2b084:	e3400002 	movt	r0, #2
   2b088:	e1a01003 	mov	r1, r3
   2b08c:	ebffa9a2 	bl	1571c <__cyg_profile_func_enter>
	assert (0);
   2b090:	e3000784 	movw	r0, #1924	; 0x784
   2b094:	e3400003 	movt	r0, #3
   2b098:	e3001718 	movw	r1, #1816	; 0x718
   2b09c:	e3401003 	movt	r1, #3
   2b0a0:	e3a02037 	mov	r2, #55	; 0x37
   2b0a4:	ebffae41 	bl	169b0 <uspi_assertion_failed>
	return FALSE;
   2b0a8:	e3a04000 	mov	r4, #0
   2b0ac:	e1a03005 	mov	r3, r5
   2b0b0:	e30b0068 	movw	r0, #45160	; 0xb068
   2b0b4:	e3400002 	movt	r0, #2
   2b0b8:	e1a01003 	mov	r1, r3
   2b0bc:	ebffa9e8 	bl	15864 <__cyg_profile_func_exit>
   2b0c0:	e1a03004 	mov	r3, r4
}
   2b0c4:	e1a00003 	mov	r0, r3
   2b0c8:	e24bd00c 	sub	sp, fp, #12
   2b0cc:	e8bd8830 	pop	{r4, r5, fp, pc}

0002b0d0 <DWHCIFrameSchedulerNoSplitTransactionComplete>:

void DWHCIFrameSchedulerNoSplitTransactionComplete (TDWHCIFrameScheduler *pBase, u32 nStatus)
{
   2b0d0:	e92d4810 	push	{r4, fp, lr}
   2b0d4:	e28db008 	add	fp, sp, #8
   2b0d8:	e24dd00c 	sub	sp, sp, #12
   2b0dc:	e1a0400e 	mov	r4, lr
   2b0e0:	e50b0010 	str	r0, [fp, #-16]
   2b0e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2b0e8:	e1a03004 	mov	r3, r4
   2b0ec:	e30b00d0 	movw	r0, #45264	; 0xb0d0
   2b0f0:	e3400002 	movt	r0, #2
   2b0f4:	e1a01003 	mov	r1, r3
   2b0f8:	ebffa987 	bl	1571c <__cyg_profile_func_enter>
	assert (0);
   2b0fc:	e3000784 	movw	r0, #1924	; 0x784
   2b100:	e3400003 	movt	r0, #3
   2b104:	e3001718 	movw	r1, #1816	; 0x718
   2b108:	e3401003 	movt	r1, #3
   2b10c:	e3a0203d 	mov	r2, #61	; 0x3d
   2b110:	ebffae26 	bl	169b0 <uspi_assertion_failed>
   2b114:	e1a03004 	mov	r3, r4
   2b118:	e30b00d0 	movw	r0, #45264	; 0xb0d0
   2b11c:	e3400002 	movt	r0, #2
   2b120:	e1a01003 	mov	r1, r3
   2b124:	ebffa9ce 	bl	15864 <__cyg_profile_func_exit>
}
   2b128:	e24bd008 	sub	sp, fp, #8
   2b12c:	e8bd8810 	pop	{r4, fp, pc}

0002b130 <DWHCIFrameSchedulerNoSplitWaitForFrame>:

void DWHCIFrameSchedulerNoSplitWaitForFrame (TDWHCIFrameScheduler *pBase)
{
   2b130:	e92d4810 	push	{r4, fp, lr}
   2b134:	e28db008 	add	fp, sp, #8
   2b138:	e24dd01c 	sub	sp, sp, #28
   2b13c:	e1a0400e 	mov	r4, lr
   2b140:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   2b144:	e1a03004 	mov	r3, r4
   2b148:	e30b0130 	movw	r0, #45360	; 0xb130
   2b14c:	e3400002 	movt	r0, #2
   2b150:	e1a01003 	mov	r1, r3
   2b154:	ebffa970 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerNoSplit *pThis = (TDWHCIFrameSchedulerNoSplit *) pBase;
   2b158:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b15c:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   2b160:	e51b3010 	ldr	r3, [fp, #-16]
   2b164:	e3530000 	cmp	r3, #0
   2b168:	1a000005 	bne	2b184 <DWHCIFrameSchedulerNoSplitWaitForFrame+0x54>
   2b16c:	e300070c 	movw	r0, #1804	; 0x70c
   2b170:	e3400003 	movt	r0, #3
   2b174:	e3001718 	movw	r1, #1816	; 0x718
   2b178:	e3401003 	movt	r1, #3
   2b17c:	e3a02043 	mov	r2, #67	; 0x43
   2b180:	ebffae0a 	bl	169b0 <uspi_assertion_failed>

	TDWHCIRegister FrameNumber;
	DWHCIRegister (&FrameNumber, DWHCI_HOST_FRM_NUM);
   2b184:	e24b301c 	sub	r3, fp, #28
   2b188:	e1a00003 	mov	r0, r3
   2b18c:	e3001408 	movw	r1, #1032	; 0x408
   2b190:	e3431f98 	movt	r1, #16280	; 0x3f98
   2b194:	ebffc3bf 	bl	1c098 <DWHCIRegister>

	pThis->m_nNextFrame = (DWHCI_HOST_FRM_NUM_NUMBER (DWHCIRegisterRead (&FrameNumber))+1) & DWHCI_MAX_FRAME_NUMBER;
   2b198:	e24b301c 	sub	r3, fp, #28
   2b19c:	e1a00003 	mov	r0, r3
   2b1a0:	ebffc41f 	bl	1c224 <DWHCIRegisterRead>
   2b1a4:	e1a03000 	mov	r3, r0
   2b1a8:	e2833001 	add	r3, r3, #1
   2b1ac:	e7ed2053 	ubfx	r2, r3, #0, #14
   2b1b0:	e51b3010 	ldr	r3, [fp, #-16]
   2b1b4:	e583201c 	str	r2, [r3, #28]

	if (!pThis->m_bIsPeriodic)
   2b1b8:	e51b3010 	ldr	r3, [fp, #-16]
   2b1bc:	e5933018 	ldr	r3, [r3, #24]
   2b1c0:	e3530000 	cmp	r3, #0
   2b1c4:	1a000009 	bne	2b1f0 <DWHCIFrameSchedulerNoSplitWaitForFrame+0xc0>
	{
		while ((DWHCI_HOST_FRM_NUM_NUMBER (DWHCIRegisterRead (&FrameNumber)) & DWHCI_MAX_FRAME_NUMBER) != pThis->m_nNextFrame)
   2b1c8:	e1a00000 	nop			; (mov r0, r0)
   2b1cc:	e24b301c 	sub	r3, fp, #28
   2b1d0:	e1a00003 	mov	r0, r3
   2b1d4:	ebffc412 	bl	1c224 <DWHCIRegisterRead>
   2b1d8:	e1a03000 	mov	r3, r0
   2b1dc:	e7ed2053 	ubfx	r2, r3, #0, #14
   2b1e0:	e51b3010 	ldr	r3, [fp, #-16]
   2b1e4:	e593301c 	ldr	r3, [r3, #28]
   2b1e8:	e1520003 	cmp	r2, r3
   2b1ec:	1afffff6 	bne	2b1cc <DWHCIFrameSchedulerNoSplitWaitForFrame+0x9c>
		{
			// do nothing
		}
	}

	_DWHCIRegister (&FrameNumber);
   2b1f0:	e24b301c 	sub	r3, fp, #28
   2b1f4:	e1a00003 	mov	r0, r3
   2b1f8:	ebffc3ec 	bl	1c1b0 <_DWHCIRegister>
   2b1fc:	e1a03004 	mov	r3, r4
   2b200:	e30b0130 	movw	r0, #45360	; 0xb130
   2b204:	e3400002 	movt	r0, #2
   2b208:	e1a01003 	mov	r1, r3
   2b20c:	ebffa994 	bl	15864 <__cyg_profile_func_exit>
}
   2b210:	e24bd008 	sub	sp, fp, #8
   2b214:	e8bd8810 	pop	{r4, fp, pc}

0002b218 <DWHCIFrameSchedulerNoSplitIsOddFrame>:

boolean DWHCIFrameSchedulerNoSplitIsOddFrame (TDWHCIFrameScheduler *pBase)
{
   2b218:	e92d4830 	push	{r4, r5, fp, lr}
   2b21c:	e28db00c 	add	fp, sp, #12
   2b220:	e24dd010 	sub	sp, sp, #16
   2b224:	e1a0400e 	mov	r4, lr
   2b228:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2b22c:	e1a03004 	mov	r3, r4
   2b230:	e30b0218 	movw	r0, #45592	; 0xb218
   2b234:	e3400002 	movt	r0, #2
   2b238:	e1a01003 	mov	r1, r3
   2b23c:	ebffa936 	bl	1571c <__cyg_profile_func_enter>
	TDWHCIFrameSchedulerNoSplit *pThis = (TDWHCIFrameSchedulerNoSplit *) pBase;
   2b240:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b244:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   2b248:	e51b3010 	ldr	r3, [fp, #-16]
   2b24c:	e3530000 	cmp	r3, #0
   2b250:	1a000005 	bne	2b26c <DWHCIFrameSchedulerNoSplitIsOddFrame+0x54>
   2b254:	e300070c 	movw	r0, #1804	; 0x70c
   2b258:	e3400003 	movt	r0, #3
   2b25c:	e3001718 	movw	r1, #1816	; 0x718
   2b260:	e3401003 	movt	r1, #3
   2b264:	e3a02058 	mov	r2, #88	; 0x58
   2b268:	ebffadd0 	bl	169b0 <uspi_assertion_failed>

	return pThis->m_nNextFrame & 1 ? TRUE : FALSE;
   2b26c:	e51b3010 	ldr	r3, [fp, #-16]
   2b270:	e593301c 	ldr	r3, [r3, #28]
   2b274:	e2033001 	and	r3, r3, #1
   2b278:	e3530000 	cmp	r3, #0
   2b27c:	13a03001 	movne	r3, #1
   2b280:	03a03000 	moveq	r3, #0
   2b284:	e6ef3073 	uxtb	r3, r3
   2b288:	e1a05003 	mov	r5, r3
   2b28c:	e1a03004 	mov	r3, r4
   2b290:	e30b0218 	movw	r0, #45592	; 0xb218
   2b294:	e3400002 	movt	r0, #2
   2b298:	e1a01003 	mov	r1, r3
   2b29c:	ebffa970 	bl	15864 <__cyg_profile_func_exit>
   2b2a0:	e1a03005 	mov	r3, r5
}
   2b2a4:	e1a00003 	mov	r0, r3
   2b2a8:	e24bd00c 	sub	sp, fp, #12
   2b2ac:	e8bd8830 	pop	{r4, r5, fp, pc}

0002b2b0 <USBGamePadDevice>:
static boolean USBGamePadDeviceStartRequest (TUSBGamePadDevice *pThis);
static void USBGamePadDeviceCompletionRoutine (TUSBRequest *pURB, void *pParam, void *pContext);
static void USBGamePadDevicePS3Configure (TUSBGamePadDevice *pThis);

void USBGamePadDevice (TUSBGamePadDevice *pThis, TUSBDevice *pDevice)
{
   2b2b0:	e92d4810 	push	{r4, fp, lr}
   2b2b4:	e28db008 	add	fp, sp, #8
   2b2b8:	e24dd014 	sub	sp, sp, #20
   2b2bc:	e1a0400e 	mov	r4, lr
   2b2c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2b2c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2b2c8:	e1a03004 	mov	r3, r4
   2b2cc:	e30b02b0 	movw	r0, #45744	; 0xb2b0
   2b2d0:	e3400002 	movt	r0, #2
   2b2d4:	e1a01003 	mov	r1, r3
   2b2d8:	ebffa90f 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2b2dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b2e0:	e3530000 	cmp	r3, #0
   2b2e4:	1a000005 	bne	2b300 <USBGamePadDevice+0x50>
   2b2e8:	e3000790 	movw	r0, #1936	; 0x790
   2b2ec:	e3400003 	movt	r0, #3
   2b2f0:	e300179c 	movw	r1, #1948	; 0x79c
   2b2f4:	e3401003 	movt	r1, #3
   2b2f8:	e3a02056 	mov	r2, #86	; 0x56
   2b2fc:	ebffadab 	bl	169b0 <uspi_assertion_failed>

	USBDeviceCopy (&pThis->m_USBDevice, pDevice);
   2b300:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b304:	e1a00003 	mov	r0, r3
   2b308:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2b30c:	ebffcea7 	bl	1edb0 <USBDeviceCopy>
	pThis->m_USBDevice.Configure = USBGamePadDeviceConfigure;
   2b310:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2b314:	e30b3ff4 	movw	r3, #49140	; 0xbff4
   2b318:	e3403002 	movt	r3, #2
   2b31c:	e5823000 	str	r3, [r2]

	pThis->m_pEndpointIn = 0;
   2b320:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b324:	e3a02000 	mov	r2, #0
   2b328:	e5832040 	str	r2, [r3, #64]	; 0x40
    pThis->m_pEndpointOut = 0;
   2b32c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b330:	e3a02000 	mov	r2, #0
   2b334:	e5832044 	str	r2, [r3, #68]	; 0x44
    pThis->m_pStatusHandler = 0;
   2b338:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b33c:	e3a02000 	mov	r2, #0
   2b340:	e58320b8 	str	r2, [r3, #184]	; 0xb8
	pThis->m_pURB = 0;
   2b344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b348:	e3a02000 	mov	r2, #0
   2b34c:	e58320c4 	str	r2, [r3, #196]	; 0xc4
	pThis->m_pHIDReportDescriptor = 0;
   2b350:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b354:	e3a02000 	mov	r2, #0
   2b358:	e58320c0 	str	r2, [r3, #192]	; 0xc0
	pThis->m_usReportDescriptorLength = 0;
   2b35c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b360:	e3a02000 	mov	r2, #0
   2b364:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    pThis->m_nReportSize = 0;
   2b368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b36c:	e3a02000 	mov	r2, #0
   2b370:	e1c32cbc 	strh	r2, [r3, #204]	; 0xcc

    pThis->m_State.naxes = 0;
   2b374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b378:	e3a02000 	mov	r2, #0
   2b37c:	e5832048 	str	r2, [r3, #72]	; 0x48
    for (int i = 0; i < MAX_AXIS; i++) {
   2b380:	e3a03000 	mov	r3, #0
   2b384:	e50b3010 	str	r3, [fp, #-16]
   2b388:	ea00001a 	b	2b3f8 <USBGamePadDevice+0x148>
        pThis->m_State.axes[i].value = 0;
   2b38c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2b390:	e51b3010 	ldr	r3, [fp, #-16]
   2b394:	e3a0100c 	mov	r1, #12
   2b398:	e0030391 	mul	r3, r1, r3
   2b39c:	e0823003 	add	r3, r2, r3
   2b3a0:	e2833048 	add	r3, r3, #72	; 0x48
   2b3a4:	e3a02000 	mov	r2, #0
   2b3a8:	e5832004 	str	r2, [r3, #4]
        pThis->m_State.axes[i].minimum = 0;
   2b3ac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2b3b0:	e51b3010 	ldr	r3, [fp, #-16]
   2b3b4:	e3a0100c 	mov	r1, #12
   2b3b8:	e0030391 	mul	r3, r1, r3
   2b3bc:	e0823003 	add	r3, r2, r3
   2b3c0:	e2833048 	add	r3, r3, #72	; 0x48
   2b3c4:	e3a02000 	mov	r2, #0
   2b3c8:	e5832008 	str	r2, [r3, #8]
        pThis->m_State.axes[i].maximum = 0;
   2b3cc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2b3d0:	e51b3010 	ldr	r3, [fp, #-16]
   2b3d4:	e3a0100c 	mov	r1, #12
   2b3d8:	e0030391 	mul	r3, r1, r3
   2b3dc:	e0823003 	add	r3, r2, r3
   2b3e0:	e2833050 	add	r3, r3, #80	; 0x50
   2b3e4:	e3a02000 	mov	r2, #0
   2b3e8:	e5832004 	str	r2, [r3, #4]
	pThis->m_pHIDReportDescriptor = 0;
	pThis->m_usReportDescriptorLength = 0;
    pThis->m_nReportSize = 0;

    pThis->m_State.naxes = 0;
    for (int i = 0; i < MAX_AXIS; i++) {
   2b3ec:	e51b3010 	ldr	r3, [fp, #-16]
   2b3f0:	e2833001 	add	r3, r3, #1
   2b3f4:	e50b3010 	str	r3, [fp, #-16]
   2b3f8:	e51b3010 	ldr	r3, [fp, #-16]
   2b3fc:	e3530005 	cmp	r3, #5
   2b400:	daffffe1 	ble	2b38c <USBGamePadDevice+0xdc>
        pThis->m_State.axes[i].value = 0;
        pThis->m_State.axes[i].minimum = 0;
        pThis->m_State.axes[i].maximum = 0;
    }

    pThis->m_State.nhats = 0;
   2b404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b408:	e3a02000 	mov	r2, #0
   2b40c:	e5832094 	str	r2, [r3, #148]	; 0x94
    for (int i = 0; i < MAX_HATS; i++)
   2b410:	e3a03000 	mov	r3, #0
   2b414:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2b418:	ea000007 	b	2b43c <USBGamePadDevice+0x18c>
        pThis->m_State.hats[i] = 0;
   2b41c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b420:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2b424:	e2822026 	add	r2, r2, #38	; 0x26
   2b428:	e3a01000 	mov	r1, #0
   2b42c:	e7831102 	str	r1, [r3, r2, lsl #2]
        pThis->m_State.axes[i].minimum = 0;
        pThis->m_State.axes[i].maximum = 0;
    }

    pThis->m_State.nhats = 0;
    for (int i = 0; i < MAX_HATS; i++)
   2b430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b434:	e2833001 	add	r3, r3, #1
   2b438:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2b43c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b440:	e3530005 	cmp	r3, #5
   2b444:	dafffff4 	ble	2b41c <USBGamePadDevice+0x16c>
        pThis->m_State.hats[i] = 0;

    pThis->m_State.nbuttons = 0;
   2b448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b44c:	e3a02000 	mov	r2, #0
   2b450:	e58320b0 	str	r2, [r3, #176]	; 0xb0
    pThis->m_State.buttons = 0;
   2b454:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b458:	e3a02000 	mov	r2, #0
   2b45c:	e58320b4 	str	r2, [r3, #180]	; 0xb4

	pThis->m_pReportBuffer = malloc (64);
   2b460:	e3a00040 	mov	r0, #64	; 0x40
   2b464:	ebffad7b 	bl	16a58 <malloc>
   2b468:	e1a03000 	mov	r3, r0
   2b46c:	e1a02003 	mov	r2, r3
   2b470:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b474:	e58320c8 	str	r2, [r3, #200]	; 0xc8
	assert (pThis->m_pReportBuffer != 0);
   2b478:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b47c:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
   2b480:	e3530000 	cmp	r3, #0
   2b484:	1a000005 	bne	2b4a0 <USBGamePadDevice+0x1f0>
   2b488:	e30007fc 	movw	r0, #2044	; 0x7fc
   2b48c:	e3400003 	movt	r0, #3
   2b490:	e300179c 	movw	r1, #1948	; 0x79c
   2b494:	e3401003 	movt	r1, #3
   2b498:	e3a02072 	mov	r2, #114	; 0x72
   2b49c:	ebffad43 	bl	169b0 <uspi_assertion_failed>
   2b4a0:	e1a03004 	mov	r3, r4
   2b4a4:	e30b02b0 	movw	r0, #45744	; 0xb2b0
   2b4a8:	e3400002 	movt	r0, #2
   2b4ac:	e1a01003 	mov	r1, r3
   2b4b0:	ebffa8eb 	bl	15864 <__cyg_profile_func_exit>
}
   2b4b4:	e24bd008 	sub	sp, fp, #8
   2b4b8:	e8bd8810 	pop	{r4, fp, pc}

0002b4bc <_CUSBGamePadDevice>:

void _CUSBGamePadDevice (TUSBGamePadDevice *pThis)
{
   2b4bc:	e92d4810 	push	{r4, fp, lr}
   2b4c0:	e28db008 	add	fp, sp, #8
   2b4c4:	e24dd00c 	sub	sp, sp, #12
   2b4c8:	e1a0400e 	mov	r4, lr
   2b4cc:	e50b0010 	str	r0, [fp, #-16]
   2b4d0:	e1a03004 	mov	r3, r4
   2b4d4:	e30b04bc 	movw	r0, #46268	; 0xb4bc
   2b4d8:	e3400002 	movt	r0, #2
   2b4dc:	e1a01003 	mov	r1, r3
   2b4e0:	ebffa88d 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2b4e4:	e51b3010 	ldr	r3, [fp, #-16]
   2b4e8:	e3530000 	cmp	r3, #0
   2b4ec:	1a000005 	bne	2b508 <_CUSBGamePadDevice+0x4c>
   2b4f0:	e3000790 	movw	r0, #1936	; 0x790
   2b4f4:	e3400003 	movt	r0, #3
   2b4f8:	e300179c 	movw	r1, #1948	; 0x79c
   2b4fc:	e3401003 	movt	r1, #3
   2b500:	e3a02077 	mov	r2, #119	; 0x77
   2b504:	ebffad29 	bl	169b0 <uspi_assertion_failed>

    if (pThis->m_pHIDReportDescriptor != 0)
   2b508:	e51b3010 	ldr	r3, [fp, #-16]
   2b50c:	e59330c0 	ldr	r3, [r3, #192]	; 0xc0
   2b510:	e3530000 	cmp	r3, #0
   2b514:	0a000006 	beq	2b534 <_CUSBGamePadDevice+0x78>
    {
        free (pThis->m_pHIDReportDescriptor);
   2b518:	e51b3010 	ldr	r3, [fp, #-16]
   2b51c:	e59330c0 	ldr	r3, [r3, #192]	; 0xc0
   2b520:	e1a00003 	mov	r0, r3
   2b524:	ebffad61 	bl	16ab0 <free>
        pThis->m_pHIDReportDescriptor = 0;
   2b528:	e51b3010 	ldr	r3, [fp, #-16]
   2b52c:	e3a02000 	mov	r2, #0
   2b530:	e58320c0 	str	r2, [r3, #192]	; 0xc0
    }

	if (pThis->m_pReportBuffer != 0)
   2b534:	e51b3010 	ldr	r3, [fp, #-16]
   2b538:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
   2b53c:	e3530000 	cmp	r3, #0
   2b540:	0a000006 	beq	2b560 <_CUSBGamePadDevice+0xa4>
	{
		free (pThis->m_pReportBuffer);
   2b544:	e51b3010 	ldr	r3, [fp, #-16]
   2b548:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
   2b54c:	e1a00003 	mov	r0, r3
   2b550:	ebffad56 	bl	16ab0 <free>
		pThis->m_pReportBuffer = 0;
   2b554:	e51b3010 	ldr	r3, [fp, #-16]
   2b558:	e3a02000 	mov	r2, #0
   2b55c:	e58320c8 	str	r2, [r3, #200]	; 0xc8
	}

	if (pThis->m_pEndpointIn != 0)
   2b560:	e51b3010 	ldr	r3, [fp, #-16]
   2b564:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2b568:	e3530000 	cmp	r3, #0
   2b56c:	0a00000a 	beq	2b59c <_CUSBGamePadDevice+0xe0>
	{
		_USBEndpoint (pThis->m_pEndpointIn);
   2b570:	e51b3010 	ldr	r3, [fp, #-16]
   2b574:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2b578:	e1a00003 	mov	r0, r3
   2b57c:	ebffd5e4 	bl	20d14 <_USBEndpoint>
		free (pThis->m_pEndpointIn);
   2b580:	e51b3010 	ldr	r3, [fp, #-16]
   2b584:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2b588:	e1a00003 	mov	r0, r3
   2b58c:	ebffad47 	bl	16ab0 <free>
		pThis->m_pEndpointIn = 0;
   2b590:	e51b3010 	ldr	r3, [fp, #-16]
   2b594:	e3a02000 	mov	r2, #0
   2b598:	e5832040 	str	r2, [r3, #64]	; 0x40
	}

    if (pThis->m_pEndpointOut != 0)
   2b59c:	e51b3010 	ldr	r3, [fp, #-16]
   2b5a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2b5a4:	e3530000 	cmp	r3, #0
   2b5a8:	0a00000a 	beq	2b5d8 <_CUSBGamePadDevice+0x11c>
    {
        _USBEndpoint (pThis->m_pEndpointOut);
   2b5ac:	e51b3010 	ldr	r3, [fp, #-16]
   2b5b0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2b5b4:	e1a00003 	mov	r0, r3
   2b5b8:	ebffd5d5 	bl	20d14 <_USBEndpoint>
        free (pThis->m_pEndpointOut);
   2b5bc:	e51b3010 	ldr	r3, [fp, #-16]
   2b5c0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2b5c4:	e1a00003 	mov	r0, r3
   2b5c8:	ebffad38 	bl	16ab0 <free>
        pThis->m_pEndpointOut = 0;
   2b5cc:	e51b3010 	ldr	r3, [fp, #-16]
   2b5d0:	e3a02000 	mov	r2, #0
   2b5d4:	e5832044 	str	r2, [r3, #68]	; 0x44
    }

	_USBDevice (&pThis->m_USBDevice);
   2b5d8:	e51b3010 	ldr	r3, [fp, #-16]
   2b5dc:	e1a00003 	mov	r0, r3
   2b5e0:	ebffcec2 	bl	1f0f0 <_USBDevice>
   2b5e4:	e1a03004 	mov	r3, r4
   2b5e8:	e30b04bc 	movw	r0, #46268	; 0xb4bc
   2b5ec:	e3400002 	movt	r0, #2
   2b5f0:	e1a01003 	mov	r1, r3
   2b5f4:	ebffa89a 	bl	15864 <__cyg_profile_func_exit>
}
   2b5f8:	e24bd008 	sub	sp, fp, #8
   2b5fc:	e8bd8810 	pop	{r4, fp, pc}

0002b600 <BitGetUnsigned>:

static u32 BitGetUnsigned(void *buffer, u32 offset, u32 length)
{
   2b600:	e92d4830 	push	{r4, r5, fp, lr}
   2b604:	e28db00c 	add	fp, sp, #12
   2b608:	e24dd028 	sub	sp, sp, #40	; 0x28
   2b60c:	e1a0500e 	mov	r5, lr
   2b610:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   2b614:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   2b618:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   2b61c:	e1a03005 	mov	r3, r5
   2b620:	e30b0600 	movw	r0, #46592	; 0xb600
   2b624:	e3400002 	movt	r0, #2
   2b628:	e1a01003 	mov	r1, r3
   2b62c:	ebffa83a 	bl	1571c <__cyg_profile_func_enter>
    u8* bitBuffer;
    u8 mask;
    u32 result;

    bitBuffer = buffer;
   2b630:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2b634:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    result = 0;
   2b638:	e3a03000 	mov	r3, #0
   2b63c:	e50b3010 	str	r3, [fp, #-16]
    for (u32 i = offset / 8, j = 0; i < (offset + length + 7) / 8; i++) {
   2b640:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2b644:	e1a031a3 	lsr	r3, r3, #3
   2b648:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2b64c:	e3a03000 	mov	r3, #0
   2b650:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2b654:	ea000078 	b	2b83c <BitGetUnsigned+0x23c>
        if (offset / 8 == (offset + length - 1) / 8) {
   2b658:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2b65c:	e1a021a3 	lsr	r2, r3, #3
   2b660:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
   2b664:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2b668:	e0813003 	add	r3, r1, r3
   2b66c:	e2433001 	sub	r3, r3, #1
   2b670:	e1a031a3 	lsr	r3, r3, #3
   2b674:	e1520003 	cmp	r2, r3
   2b678:	1a00001b 	bne	2b6ec <BitGetUnsigned+0xec>
            mask = (1 << ((offset % 8) + length)) - (1 << (offset % 8));
   2b67c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2b680:	e2032007 	and	r2, r3, #7
   2b684:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2b688:	e0823003 	add	r3, r2, r3
   2b68c:	e1a02003 	mov	r2, r3
   2b690:	e3a03001 	mov	r3, #1
   2b694:	e1a03213 	lsl	r3, r3, r2
   2b698:	e6ef2073 	uxtb	r2, r3
   2b69c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2b6a0:	e2033007 	and	r3, r3, #7
   2b6a4:	e3a01001 	mov	r1, #1
   2b6a8:	e1a03311 	lsl	r3, r1, r3
   2b6ac:	e6ef3073 	uxtb	r3, r3
   2b6b0:	e0633002 	rsb	r3, r3, r2
   2b6b4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
            result = (bitBuffer[i] & mask) >> (offset % 8);
   2b6b8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2b6bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b6c0:	e0823003 	add	r3, r2, r3
   2b6c4:	e5d32000 	ldrb	r2, [r3]
   2b6c8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   2b6cc:	e0033002 	and	r3, r3, r2
   2b6d0:	e6ef3073 	uxtb	r3, r3
   2b6d4:	e1a02003 	mov	r2, r3
   2b6d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2b6dc:	e2033007 	and	r3, r3, #7
   2b6e0:	e1a03352 	asr	r3, r2, r3
   2b6e4:	e50b3010 	str	r3, [fp, #-16]
   2b6e8:	ea000050 	b	2b830 <BitGetUnsigned+0x230>
        } else if (i == offset / 8) {
   2b6ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2b6f0:	e1a021a3 	lsr	r2, r3, #3
   2b6f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b6f8:	e1520003 	cmp	r2, r3
   2b6fc:	1a00001d 	bne	2b778 <BitGetUnsigned+0x178>
            mask = 0x100 - (1 << (offset % 8));
   2b700:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2b704:	e2033007 	and	r3, r3, #7
   2b708:	e3a02001 	mov	r2, #1
   2b70c:	e1a03312 	lsl	r3, r2, r3
   2b710:	e6ef3073 	uxtb	r3, r3
   2b714:	e2633000 	rsb	r3, r3, #0
   2b718:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
            j += 8 - (offset % 8);
   2b71c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2b720:	e2033007 	and	r3, r3, #7
   2b724:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2b728:	e0633002 	rsb	r3, r3, r2
   2b72c:	e2833008 	add	r3, r3, #8
   2b730:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            result = ((bitBuffer[i] & mask) >> (offset % 8)) << (length - j);
   2b734:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2b738:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b73c:	e0823003 	add	r3, r2, r3
   2b740:	e5d32000 	ldrb	r2, [r3]
   2b744:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   2b748:	e0033002 	and	r3, r3, r2
   2b74c:	e6ef3073 	uxtb	r3, r3
   2b750:	e1a02003 	mov	r2, r3
   2b754:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2b758:	e2033007 	and	r3, r3, #7
   2b75c:	e1a03352 	asr	r3, r2, r3
   2b760:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   2b764:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2b768:	e0622001 	rsb	r2, r2, r1
   2b76c:	e1a03213 	lsl	r3, r3, r2
   2b770:	e50b3010 	str	r3, [fp, #-16]
   2b774:	ea00002d 	b	2b830 <BitGetUnsigned+0x230>
        } else if (i == (offset + length - 1) / 8) {
   2b778:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   2b77c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2b780:	e0823003 	add	r3, r2, r3
   2b784:	e2433001 	sub	r3, r3, #1
   2b788:	e1a021a3 	lsr	r2, r3, #3
   2b78c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b790:	e1520003 	cmp	r2, r3
   2b794:	1a000015 	bne	2b7f0 <BitGetUnsigned+0x1f0>
            mask = (1 << ((offset % 8) + length)) - 1;
   2b798:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2b79c:	e2032007 	and	r2, r3, #7
   2b7a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2b7a4:	e0823003 	add	r3, r2, r3
   2b7a8:	e1a02003 	mov	r2, r3
   2b7ac:	e3a03001 	mov	r3, #1
   2b7b0:	e1a03213 	lsl	r3, r3, r2
   2b7b4:	e6ef3073 	uxtb	r3, r3
   2b7b8:	e2433001 	sub	r3, r3, #1
   2b7bc:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
            result |= bitBuffer[i] & mask;
   2b7c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2b7c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b7c8:	e0823003 	add	r3, r2, r3
   2b7cc:	e5d32000 	ldrb	r2, [r3]
   2b7d0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   2b7d4:	e0033002 	and	r3, r3, r2
   2b7d8:	e6ef3073 	uxtb	r3, r3
   2b7dc:	e1a02003 	mov	r2, r3
   2b7e0:	e51b3010 	ldr	r3, [fp, #-16]
   2b7e4:	e1833002 	orr	r3, r3, r2
   2b7e8:	e50b3010 	str	r3, [fp, #-16]
   2b7ec:	ea00000f 	b	2b830 <BitGetUnsigned+0x230>
        } else {
            j += 8;
   2b7f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b7f4:	e2833008 	add	r3, r3, #8
   2b7f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            result |= bitBuffer[i] << (length - j);
   2b7fc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2b800:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b804:	e0823003 	add	r3, r2, r3
   2b808:	e5d33000 	ldrb	r3, [r3]
   2b80c:	e1a01003 	mov	r1, r3
   2b810:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   2b814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b818:	e0633002 	rsb	r3, r3, r2
   2b81c:	e1a03311 	lsl	r3, r1, r3
   2b820:	e1a02003 	mov	r2, r3
   2b824:	e51b3010 	ldr	r3, [fp, #-16]
   2b828:	e1833002 	orr	r3, r3, r2
   2b82c:	e50b3010 	str	r3, [fp, #-16]
    u8 mask;
    u32 result;

    bitBuffer = buffer;
    result = 0;
    for (u32 i = offset / 8, j = 0; i < (offset + length + 7) / 8; i++) {
   2b830:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b834:	e2833001 	add	r3, r3, #1
   2b838:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2b83c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   2b840:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2b844:	e0823003 	add	r3, r2, r3
   2b848:	e2833007 	add	r3, r3, #7
   2b84c:	e1a021a3 	lsr	r2, r3, #3
   2b850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b854:	e1520003 	cmp	r2, r3
   2b858:	8affff7e 	bhi	2b658 <BitGetUnsigned+0x58>
            j += 8;
            result |= bitBuffer[i] << (length - j);
        }
    }

    return result;
   2b85c:	e51b4010 	ldr	r4, [fp, #-16]
   2b860:	e1a03005 	mov	r3, r5
   2b864:	e30b0600 	movw	r0, #46592	; 0xb600
   2b868:	e3400002 	movt	r0, #2
   2b86c:	e1a01003 	mov	r1, r3
   2b870:	ebffa7fb 	bl	15864 <__cyg_profile_func_exit>
   2b874:	e1a03004 	mov	r3, r4
}
   2b878:	e1a00003 	mov	r0, r3
   2b87c:	e24bd00c 	sub	sp, fp, #12
   2b880:	e8bd8830 	pop	{r4, r5, fp, pc}

0002b884 <BitGetSigned>:

static s32 BitGetSigned(void* buffer, u32 offset, u32 length) {
   2b884:	e92d4830 	push	{r4, r5, fp, lr}
   2b888:	e28db00c 	add	fp, sp, #12
   2b88c:	e24dd018 	sub	sp, sp, #24
   2b890:	e1a0500e 	mov	r5, lr
   2b894:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2b898:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2b89c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   2b8a0:	e1a03005 	mov	r3, r5
   2b8a4:	e30b0884 	movw	r0, #47236	; 0xb884
   2b8a8:	e3400002 	movt	r0, #2
   2b8ac:	e1a01003 	mov	r1, r3
   2b8b0:	ebffa799 	bl	1571c <__cyg_profile_func_enter>
    u32 result = BitGetUnsigned(buffer, offset, length);
   2b8b4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2b8b8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2b8bc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2b8c0:	ebffff4e 	bl	2b600 <BitGetUnsigned>
   2b8c4:	e50b0010 	str	r0, [fp, #-16]

    if (result & (1 << (length - 1)))
   2b8c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b8cc:	e2433001 	sub	r3, r3, #1
   2b8d0:	e1a02003 	mov	r2, r3
   2b8d4:	e3a03001 	mov	r3, #1
   2b8d8:	e1a03213 	lsl	r3, r3, r2
   2b8dc:	e1a02003 	mov	r2, r3
   2b8e0:	e51b3010 	ldr	r3, [fp, #-16]
   2b8e4:	e0033002 	and	r3, r3, r2
   2b8e8:	e3530000 	cmp	r3, #0
   2b8ec:	0a000007 	beq	2b910 <BitGetSigned+0x8c>
        result |= 0xffffffff - ((1 << length) - 1);
   2b8f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b8f4:	e3a02001 	mov	r2, #1
   2b8f8:	e1a03312 	lsl	r3, r2, r3
   2b8fc:	e2633000 	rsb	r3, r3, #0
   2b900:	e1a02003 	mov	r2, r3
   2b904:	e51b3010 	ldr	r3, [fp, #-16]
   2b908:	e1833002 	orr	r3, r3, r2
   2b90c:	e50b3010 	str	r3, [fp, #-16]

    return result;
   2b910:	e51b4010 	ldr	r4, [fp, #-16]
   2b914:	e1a03005 	mov	r3, r5
   2b918:	e30b0884 	movw	r0, #47236	; 0xb884
   2b91c:	e3400002 	movt	r0, #2
   2b920:	e1a01003 	mov	r1, r3
   2b924:	ebffa7ce 	bl	15864 <__cyg_profile_func_exit>
   2b928:	e1a03004 	mov	r3, r4
}
   2b92c:	e1a00003 	mov	r0, r3
   2b930:	e24bd00c 	sub	sp, fp, #12
   2b934:	e8bd8830 	pop	{r4, r5, fp, pc}

0002b938 <USBGamePadDeviceDecodeReport>:
};

#define UNDEFINED   -123456789

static void USBGamePadDeviceDecodeReport(TUSBGamePadDevice *pThis)
{
   2b938:	e92d4830 	push	{r4, r5, fp, lr}
   2b93c:	e28db00c 	add	fp, sp, #12
   2b940:	e24dd060 	sub	sp, sp, #96	; 0x60
   2b944:	e1a0500e 	mov	r5, lr
   2b948:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98
   2b94c:	e1a03005 	mov	r3, r5
   2b950:	e30b0938 	movw	r0, #47416	; 0xb938
   2b954:	e3400002 	movt	r0, #2
   2b958:	e1a01003 	mov	r1, r3
   2b95c:	ebffa76e 	bl	1571c <__cyg_profile_func_enter>
    s32 item, arg;
    u32 offset = 0, size = 0, count = 0;
   2b960:	e3a03000 	mov	r3, #0
   2b964:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2b968:	e3a03000 	mov	r3, #0
   2b96c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2b970:	e3a03000 	mov	r3, #0
   2b974:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    s32 lmax = UNDEFINED, lmin = UNDEFINED, pmin = UNDEFINED, pmax = UNDEFINED;
   2b978:	e30332eb 	movw	r3, #13035	; 0x32eb
   2b97c:	e34f38a4 	movt	r3, #63652	; 0xf8a4
   2b980:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   2b984:	e30332eb 	movw	r3, #13035	; 0x32eb
   2b988:	e34f38a4 	movt	r3, #63652	; 0xf8a4
   2b98c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   2b990:	e30332eb 	movw	r3, #13035	; 0x32eb
   2b994:	e34f38a4 	movt	r3, #63652	; 0xf8a4
   2b998:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   2b99c:	e30332eb 	movw	r3, #13035	; 0x32eb
   2b9a0:	e34f38a4 	movt	r3, #63652	; 0xf8a4
   2b9a4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    s32 naxes = 0, nhats = 0;
   2b9a8:	e3a03000 	mov	r3, #0
   2b9ac:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   2b9b0:	e3a03000 	mov	r3, #0
   2b9b4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    u32 id = 0, state = None;
   2b9b8:	e3a03000 	mov	r3, #0
   2b9bc:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
   2b9c0:	e3a03000 	mov	r3, #0
   2b9c4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    u8 *pReportBuffer = pThis->m_pReportBuffer;
   2b9c8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2b9cc:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
   2b9d0:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
    s8 *pHIDReportDescriptor = (s8 *)pThis->m_pHIDReportDescriptor;
   2b9d4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2b9d8:	e59330c0 	ldr	r3, [r3, #192]	; 0xc0
   2b9dc:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0
    u16 wReportDescriptorLength = pThis->m_usReportDescriptorLength;
   2b9e0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2b9e4:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
   2b9e8:	e14b34b2 	strh	r3, [fp, #-66]	; 0xffffffbe
    USPiGamePadState *pState = &pThis->m_State;
   2b9ec:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2b9f0:	e2833048 	add	r3, r3, #72	; 0x48
   2b9f4:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac

    while (wReportDescriptorLength > 0) {
   2b9f8:	ea000165 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
        item = *pHIDReportDescriptor++;
   2b9fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2ba00:	e2832001 	add	r2, r3, #1
   2ba04:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   2ba08:	e5d33000 	ldrb	r3, [r3]
   2ba0c:	e6af3073 	sxtb	r3, r3
   2ba10:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
        wReportDescriptorLength--;
   2ba14:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
   2ba18:	e2433001 	sub	r3, r3, #1
   2ba1c:	e14b34b2 	strh	r3, [fp, #-66]	; 0xffffffbe

        switch(item & 0x03) {
   2ba20:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2ba24:	e2033003 	and	r3, r3, #3
   2ba28:	e3530001 	cmp	r3, #1
   2ba2c:	0a000006 	beq	2ba4c <USBGamePadDeviceDecodeReport+0x114>
   2ba30:	e3530002 	cmp	r3, #2
   2ba34:	0a00000e 	beq	2ba74 <USBGamePadDeviceDecodeReport+0x13c>
   2ba38:	e3530000 	cmp	r3, #0
   2ba3c:	1a000020 	bne	2bac4 <USBGamePadDeviceDecodeReport+0x18c>
            case 0:
                arg = 0;
   2ba40:	e3a03000 	mov	r3, #0
   2ba44:	e50b3010 	str	r3, [fp, #-16]
                break;
   2ba48:	ea000042 	b	2bb58 <USBGamePadDeviceDecodeReport+0x220>
            case 1:
                arg = *pHIDReportDescriptor++;
   2ba4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2ba50:	e2832001 	add	r2, r3, #1
   2ba54:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   2ba58:	e5d33000 	ldrb	r3, [r3]
   2ba5c:	e6af3073 	sxtb	r3, r3
   2ba60:	e50b3010 	str	r3, [fp, #-16]
                wReportDescriptorLength--;
   2ba64:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
   2ba68:	e2433001 	sub	r3, r3, #1
   2ba6c:	e14b34b2 	strh	r3, [fp, #-66]	; 0xffffffbe
                break;
   2ba70:	ea000038 	b	2bb58 <USBGamePadDeviceDecodeReport+0x220>
            case 2:
                arg = *pHIDReportDescriptor++ & 0xFF;
   2ba74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2ba78:	e2832001 	add	r2, r3, #1
   2ba7c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   2ba80:	e5d33000 	ldrb	r3, [r3]
   2ba84:	e6af3073 	sxtb	r3, r3
   2ba88:	e6ef3073 	uxtb	r3, r3
   2ba8c:	e50b3010 	str	r3, [fp, #-16]
                arg = arg | (*pHIDReportDescriptor++ << 8);
   2ba90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2ba94:	e2832001 	add	r2, r3, #1
   2ba98:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   2ba9c:	e5d33000 	ldrb	r3, [r3]
   2baa0:	e6af3073 	sxtb	r3, r3
   2baa4:	e1a03403 	lsl	r3, r3, #8
   2baa8:	e51b2010 	ldr	r2, [fp, #-16]
   2baac:	e1823003 	orr	r3, r2, r3
   2bab0:	e50b3010 	str	r3, [fp, #-16]
                wReportDescriptorLength -= 2;
   2bab4:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
   2bab8:	e2433002 	sub	r3, r3, #2
   2babc:	e14b34b2 	strh	r3, [fp, #-66]	; 0xffffffbe
                break;
   2bac0:	ea000024 	b	2bb58 <USBGamePadDeviceDecodeReport+0x220>
            default:
                arg = *pHIDReportDescriptor++;
   2bac4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2bac8:	e2832001 	add	r2, r3, #1
   2bacc:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   2bad0:	e5d33000 	ldrb	r3, [r3]
   2bad4:	e6af3073 	sxtb	r3, r3
   2bad8:	e50b3010 	str	r3, [fp, #-16]
                arg = arg | (*pHIDReportDescriptor++ << 8);
   2badc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2bae0:	e2832001 	add	r2, r3, #1
   2bae4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   2bae8:	e5d33000 	ldrb	r3, [r3]
   2baec:	e6af3073 	sxtb	r3, r3
   2baf0:	e1a03403 	lsl	r3, r3, #8
   2baf4:	e51b2010 	ldr	r2, [fp, #-16]
   2baf8:	e1823003 	orr	r3, r2, r3
   2bafc:	e50b3010 	str	r3, [fp, #-16]
                arg = arg | (*pHIDReportDescriptor++ << 16);
   2bb00:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2bb04:	e2832001 	add	r2, r3, #1
   2bb08:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   2bb0c:	e5d33000 	ldrb	r3, [r3]
   2bb10:	e6af3073 	sxtb	r3, r3
   2bb14:	e1a03803 	lsl	r3, r3, #16
   2bb18:	e51b2010 	ldr	r2, [fp, #-16]
   2bb1c:	e1823003 	orr	r3, r2, r3
   2bb20:	e50b3010 	str	r3, [fp, #-16]
                arg = arg | (*pHIDReportDescriptor++ << 24);
   2bb24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2bb28:	e2832001 	add	r2, r3, #1
   2bb2c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   2bb30:	e5d33000 	ldrb	r3, [r3]
   2bb34:	e6af3073 	sxtb	r3, r3
   2bb38:	e1a03c03 	lsl	r3, r3, #24
   2bb3c:	e51b2010 	ldr	r2, [fp, #-16]
   2bb40:	e1823003 	orr	r3, r2, r3
   2bb44:	e50b3010 	str	r3, [fp, #-16]
                wReportDescriptorLength -= 4;
   2bb48:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
   2bb4c:	e2433004 	sub	r3, r3, #4
   2bb50:	e14b34b2 	strh	r3, [fp, #-66]	; 0xffffffbe
                break;
   2bb54:	e1a00000 	nop			; (mov r0, r0)
        }

        if ((item & 0xFC) == HID_REPORT_ID) {
   2bb58:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2bb5c:	e20330fc 	and	r3, r3, #252	; 0xfc
   2bb60:	e3530084 	cmp	r3, #132	; 0x84
   2bb64:	1a000015 	bne	2bbc0 <USBGamePadDeviceDecodeReport+0x288>
            if (id != 0)
   2bb68:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2bb6c:	e3530000 	cmp	r3, #0
   2bb70:	0a000000 	beq	2bb78 <USBGamePadDeviceDecodeReport+0x240>
                break;
   2bb74:	ea000109 	b	2bfa0 <USBGamePadDeviceDecodeReport+0x668>
            id = BitGetUnsigned(pReportBuffer, 0, 8);
   2bb78:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2bb7c:	e3a01000 	mov	r1, #0
   2bb80:	e3a02008 	mov	r2, #8
   2bb84:	ebfffe9d 	bl	2b600 <BitGetUnsigned>
   2bb88:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
            if (id != 0 && id != arg)
   2bb8c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2bb90:	e3530000 	cmp	r3, #0
   2bb94:	0a000005 	beq	2bbb0 <USBGamePadDeviceDecodeReport+0x278>
   2bb98:	e51b2010 	ldr	r2, [fp, #-16]
   2bb9c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2bba0:	e1520003 	cmp	r2, r3
   2bba4:	0a000001 	beq	2bbb0 <USBGamePadDeviceDecodeReport+0x278>
   2bba8:	e3a04000 	mov	r4, #0
                return;
   2bbac:	ea000108 	b	2bfd4 <USBGamePadDeviceDecodeReport+0x69c>
            id = arg;
   2bbb0:	e51b3010 	ldr	r3, [fp, #-16]
   2bbb4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
            offset = 8;
   2bbb8:	e3a03008 	mov	r3, #8
   2bbbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }

        switch(item & 0xFC) {
   2bbc0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2bbc4:	e20330fc 	and	r3, r3, #252	; 0xfc
   2bbc8:	e3530034 	cmp	r3, #52	; 0x34
   2bbcc:	0a000047 	beq	2bcf0 <USBGamePadDeviceDecodeReport+0x3b8>
   2bbd0:	e3530034 	cmp	r3, #52	; 0x34
   2bbd4:	ca00000b 	bgt	2bc08 <USBGamePadDeviceDecodeReport+0x2d0>
   2bbd8:	e3530008 	cmp	r3, #8
   2bbdc:	0a000022 	beq	2bc6c <USBGamePadDeviceDecodeReport+0x334>
   2bbe0:	e3530008 	cmp	r3, #8
   2bbe4:	ca000002 	bgt	2bbf4 <USBGamePadDeviceDecodeReport+0x2bc>
   2bbe8:	e3530004 	cmp	r3, #4
   2bbec:	0a000013 	beq	2bc40 <USBGamePadDeviceDecodeReport+0x308>
   2bbf0:	ea0000e7 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
   2bbf4:	e3530014 	cmp	r3, #20
   2bbf8:	0a000039 	beq	2bce4 <USBGamePadDeviceDecodeReport+0x3ac>
   2bbfc:	e3530024 	cmp	r3, #36	; 0x24
   2bc00:	0a00003d 	beq	2bcfc <USBGamePadDeviceDecodeReport+0x3c4>
   2bc04:	ea0000e2 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
   2bc08:	e3530080 	cmp	r3, #128	; 0x80
   2bc0c:	0a000046 	beq	2bd2c <USBGamePadDeviceDecodeReport+0x3f4>
   2bc10:	e3530080 	cmp	r3, #128	; 0x80
   2bc14:	ca000004 	bgt	2bc2c <USBGamePadDeviceDecodeReport+0x2f4>
   2bc18:	e3530044 	cmp	r3, #68	; 0x44
   2bc1c:	0a000039 	beq	2bd08 <USBGamePadDeviceDecodeReport+0x3d0>
   2bc20:	e3530074 	cmp	r3, #116	; 0x74
   2bc24:	0a00003a 	beq	2bd14 <USBGamePadDeviceDecodeReport+0x3dc>
   2bc28:	ea0000d9 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
   2bc2c:	e3530090 	cmp	r3, #144	; 0x90
   2bc30:	0a0000d6 	beq	2bf90 <USBGamePadDeviceDecodeReport+0x658>
   2bc34:	e3530094 	cmp	r3, #148	; 0x94
   2bc38:	0a000038 	beq	2bd20 <USBGamePadDeviceDecodeReport+0x3e8>
   2bc3c:	ea0000d4 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
            case HID_USAGE_PAGE:
                switch(arg) {
   2bc40:	e51b3010 	ldr	r3, [fp, #-16]
   2bc44:	e3530009 	cmp	r3, #9
   2bc48:	1a000006 	bne	2bc68 <USBGamePadDeviceDecodeReport+0x330>
                    case HID_USAGE_PAGE_BUTTONS:
                        if (state == GamePad)
   2bc4c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   2bc50:	e3530001 	cmp	r3, #1
   2bc54:	1a000002 	bne	2bc64 <USBGamePadDeviceDecodeReport+0x32c>
                            state = GamePadButton;
   2bc58:	e3a03002 	mov	r3, #2
   2bc5c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                        break;
   2bc60:	eaffffff 	b	2bc64 <USBGamePadDeviceDecodeReport+0x32c>
   2bc64:	e1a00000 	nop			; (mov r0, r0)
                }
                break;
   2bc68:	ea0000c9 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
            case HID_USAGE:
                switch(arg) {
   2bc6c:	e51b3010 	ldr	r3, [fp, #-16]
   2bc70:	e3530036 	cmp	r3, #54	; 0x36
   2bc74:	ca000005 	bgt	2bc90 <USBGamePadDeviceDecodeReport+0x358>
   2bc78:	e3530030 	cmp	r3, #48	; 0x30
   2bc7c:	aa000009 	bge	2bca8 <USBGamePadDeviceDecodeReport+0x370>
   2bc80:	e2433004 	sub	r3, r3, #4
   2bc84:	e3530001 	cmp	r3, #1
   2bc88:	8a0000c1 	bhi	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
   2bc8c:	ea000002 	b	2bc9c <USBGamePadDeviceDecodeReport+0x364>
   2bc90:	e3530039 	cmp	r3, #57	; 0x39
   2bc94:	0a00000a 	beq	2bcc4 <USBGamePadDeviceDecodeReport+0x38c>
   2bc98:	ea000010 	b	2bce0 <USBGamePadDeviceDecodeReport+0x3a8>
                    case HID_USAGE_JOYSTICK:
                    case HID_USAGE_GAMEPAD:
                        state = GamePad;
   2bc9c:	e3a03001 	mov	r3, #1
   2bca0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                        break;
   2bca4:	ea00000d 	b	2bce0 <USBGamePadDeviceDecodeReport+0x3a8>
                    case HID_USAGE_Z:
                    case HID_USAGE_RX:
                    case HID_USAGE_RY:
                    case HID_USAGE_RZ:
                    case HID_USAGE_SLIDER:
                        if (state == GamePad)
   2bca8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   2bcac:	e3530001 	cmp	r3, #1
   2bcb0:	1a000002 	bne	2bcc0 <USBGamePadDeviceDecodeReport+0x388>
                            state = GamePadAxis;
   2bcb4:	e3a03003 	mov	r3, #3
   2bcb8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                        break;
   2bcbc:	ea000007 	b	2bce0 <USBGamePadDeviceDecodeReport+0x3a8>
   2bcc0:	ea000006 	b	2bce0 <USBGamePadDeviceDecodeReport+0x3a8>
                    case HID_USAGE_HATSWITCH:
                        if (state == GamePad)
   2bcc4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   2bcc8:	e3530001 	cmp	r3, #1
   2bccc:	1a000002 	bne	2bcdc <USBGamePadDeviceDecodeReport+0x3a4>
                            state = GamePadHat;
   2bcd0:	e3a03004 	mov	r3, #4
   2bcd4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                        break;
   2bcd8:	eaffffff 	b	2bcdc <USBGamePadDeviceDecodeReport+0x3a4>
   2bcdc:	e1a00000 	nop			; (mov r0, r0)
                }
                break;
   2bce0:	ea0000ab 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
            case HID_LOGICAL_MIN:
                lmin = arg;
   2bce4:	e51b3010 	ldr	r3, [fp, #-16]
   2bce8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                break;
   2bcec:	ea0000a8 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
            case HID_PHYSICAL_MIN:
                pmin = arg;
   2bcf0:	e51b3010 	ldr	r3, [fp, #-16]
   2bcf4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                break;
   2bcf8:	ea0000a5 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
            case HID_LOGICAL_MAX:
                lmax = arg;
   2bcfc:	e51b3010 	ldr	r3, [fp, #-16]
   2bd00:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                break;
   2bd04:	ea0000a2 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
            case HID_PHYSICAL_MAX:
                pmax = arg;
   2bd08:	e51b3010 	ldr	r3, [fp, #-16]
   2bd0c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                break;
   2bd10:	ea00009f 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
            case HID_REPORT_SIZE: // REPORT_SIZE
                size = arg;
   2bd14:	e51b3010 	ldr	r3, [fp, #-16]
   2bd18:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                break;
   2bd1c:	ea00009c 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
            case HID_REPORT_COUNT: // REPORT_COUNT
                count = arg;
   2bd20:	e51b3010 	ldr	r3, [fp, #-16]
   2bd24:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                break;
   2bd28:	ea000099 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
            case HID_INPUT:
                if ((arg & 0x03) == 0x02) {  // INPUT(Data,Var)
   2bd2c:	e51b3010 	ldr	r3, [fp, #-16]
   2bd30:	e2033003 	and	r3, r3, #3
   2bd34:	e3530002 	cmp	r3, #2
   2bd38:	1a00008d 	bne	2bf74 <USBGamePadDeviceDecodeReport+0x63c>
                    if (state == GamePadAxis) {
   2bd3c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   2bd40:	e3530003 	cmp	r3, #3
   2bd44:	1a000053 	bne	2be98 <USBGamePadDeviceDecodeReport+0x560>
                        for (int i = 0; i < count && i < MAX_AXIS; i++) {
   2bd48:	e3a03000 	mov	r3, #0
   2bd4c:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
   2bd50:	ea000046 	b	2be70 <USBGamePadDeviceDecodeReport+0x538>
                            pState->axes[naxes].minimum = lmin != UNDEFINED ? lmin : pmin;
   2bd54:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   2bd58:	e30332eb 	movw	r3, #13035	; 0x32eb
   2bd5c:	e34f38a4 	movt	r3, #63652	; 0xf8a4
   2bd60:	e1520003 	cmp	r2, r3
   2bd64:	0a000001 	beq	2bd70 <USBGamePadDeviceDecodeReport+0x438>
   2bd68:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2bd6c:	ea000000 	b	2bd74 <USBGamePadDeviceDecodeReport+0x43c>
   2bd70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2bd74:	e51b1054 	ldr	r1, [fp, #-84]	; 0xffffffac
   2bd78:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   2bd7c:	e3a0000c 	mov	r0, #12
   2bd80:	e0020290 	mul	r2, r0, r2
   2bd84:	e0812002 	add	r2, r1, r2
   2bd88:	e5823008 	str	r3, [r2, #8]
                            pState->axes[naxes].maximum = lmax != UNDEFINED ? lmax : pmax;
   2bd8c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2bd90:	e30332eb 	movw	r3, #13035	; 0x32eb
   2bd94:	e34f38a4 	movt	r3, #63652	; 0xf8a4
   2bd98:	e1520003 	cmp	r2, r3
   2bd9c:	0a000001 	beq	2bda8 <USBGamePadDeviceDecodeReport+0x470>
   2bda0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2bda4:	ea000000 	b	2bdac <USBGamePadDeviceDecodeReport+0x474>
   2bda8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2bdac:	e51b1054 	ldr	r1, [fp, #-84]	; 0xffffffac
   2bdb0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   2bdb4:	e3a0000c 	mov	r0, #12
   2bdb8:	e0020290 	mul	r2, r0, r2
   2bdbc:	e0812002 	add	r2, r1, r2
   2bdc0:	e2822008 	add	r2, r2, #8
   2bdc4:	e5823004 	str	r3, [r2, #4]

                            int value = (pState->axes[naxes].minimum < 0) ?
   2bdc8:	e51b2054 	ldr	r2, [fp, #-84]	; 0xffffffac
   2bdcc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2bdd0:	e3a0100c 	mov	r1, #12
   2bdd4:	e0030391 	mul	r3, r1, r3
   2bdd8:	e0823003 	add	r3, r2, r3
   2bddc:	e5933008 	ldr	r3, [r3, #8]
   2bde0:	e3530000 	cmp	r3, #0
   2bde4:	aa00000a 	bge	2be14 <USBGamePadDeviceDecodeReport+0x4dc>
                                    BitGetSigned(pReportBuffer, offset + i * size, size) :
   2bde8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2bdec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2bdf0:	e0020392 	mul	r2, r2, r3
   2bdf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2bdf8:	e0823003 	add	r3, r2, r3
                    if (state == GamePadAxis) {
                        for (int i = 0; i < count && i < MAX_AXIS; i++) {
                            pState->axes[naxes].minimum = lmin != UNDEFINED ? lmin : pmin;
                            pState->axes[naxes].maximum = lmax != UNDEFINED ? lmax : pmax;

                            int value = (pState->axes[naxes].minimum < 0) ?
   2bdfc:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2be00:	e1a01003 	mov	r1, r3
   2be04:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2be08:	ebfffe9d 	bl	2b884 <BitGetSigned>
   2be0c:	e1a03000 	mov	r3, r0
   2be10:	ea000009 	b	2be3c <USBGamePadDeviceDecodeReport+0x504>
                                    BitGetSigned(pReportBuffer, offset + i * size, size) :
                                    BitGetUnsigned(pReportBuffer, offset + i * size, size);
   2be14:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2be18:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2be1c:	e0020392 	mul	r2, r2, r3
   2be20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2be24:	e0823003 	add	r3, r2, r3
   2be28:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2be2c:	e1a01003 	mov	r1, r3
   2be30:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2be34:	ebfffdf1 	bl	2b600 <BitGetUnsigned>
   2be38:	e1a03000 	mov	r3, r0
                    if (state == GamePadAxis) {
                        for (int i = 0; i < count && i < MAX_AXIS; i++) {
                            pState->axes[naxes].minimum = lmin != UNDEFINED ? lmin : pmin;
                            pState->axes[naxes].maximum = lmax != UNDEFINED ? lmax : pmax;

                            int value = (pState->axes[naxes].minimum < 0) ?
   2be3c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
                                    BitGetSigned(pReportBuffer, offset + i * size, size) :
                                    BitGetUnsigned(pReportBuffer, offset + i * size, size);

                            pState->axes[naxes++].value = value;
   2be40:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2be44:	e2832001 	add	r2, r3, #1
   2be48:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   2be4c:	e51b2054 	ldr	r2, [fp, #-84]	; 0xffffffac
   2be50:	e3a0100c 	mov	r1, #12
   2be54:	e0030391 	mul	r3, r1, r3
   2be58:	e0823003 	add	r3, r2, r3
   2be5c:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
   2be60:	e5832004 	str	r2, [r3, #4]
                count = arg;
                break;
            case HID_INPUT:
                if ((arg & 0x03) == 0x02) {  // INPUT(Data,Var)
                    if (state == GamePadAxis) {
                        for (int i = 0; i < count && i < MAX_AXIS; i++) {
   2be64:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2be68:	e2833001 	add	r3, r3, #1
   2be6c:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
   2be70:	e51b2048 	ldr	r2, [fp, #-72]	; 0xffffffb8
   2be74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2be78:	e1520003 	cmp	r2, r3
   2be7c:	2a000002 	bcs	2be8c <USBGamePadDeviceDecodeReport+0x554>
   2be80:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2be84:	e3530005 	cmp	r3, #5
   2be88:	daffffb1 	ble	2bd54 <USBGamePadDeviceDecodeReport+0x41c>
                                    BitGetUnsigned(pReportBuffer, offset + i * size, size);

                            pState->axes[naxes++].value = value;
                        }

                        state = GamePad;
   2be8c:	e3a03001 	mov	r3, #1
   2be90:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
   2be94:	ea000036 	b	2bf74 <USBGamePadDeviceDecodeReport+0x63c>
                    }
                    else if (state == GamePadHat) {
   2be98:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   2be9c:	e3530004 	cmp	r3, #4
   2bea0:	1a000021 	bne	2bf2c <USBGamePadDeviceDecodeReport+0x5f4>
                        for (int i = 0; i < count && i < MAX_HATS; i++) {
   2bea4:	e3a03000 	mov	r3, #0
   2bea8:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
   2beac:	ea000014 	b	2bf04 <USBGamePadDeviceDecodeReport+0x5cc>
                            int value = BitGetUnsigned(pReportBuffer, offset + i * size, size);
   2beb0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2beb4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2beb8:	e0020392 	mul	r2, r2, r3
   2bebc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2bec0:	e0823003 	add	r3, r2, r3
   2bec4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2bec8:	e1a01003 	mov	r1, r3
   2becc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2bed0:	ebfffdca 	bl	2b600 <BitGetUnsigned>
   2bed4:	e1a03000 	mov	r3, r0
   2bed8:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
                            pState->hats[nhats++] = value;
   2bedc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2bee0:	e2832001 	add	r2, r3, #1
   2bee4:	e50b2034 	str	r2, [fp, #-52]	; 0xffffffcc
   2bee8:	e51b2054 	ldr	r2, [fp, #-84]	; 0xffffffac
   2beec:	e2833014 	add	r3, r3, #20
   2bef0:	e51b1060 	ldr	r1, [fp, #-96]	; 0xffffffa0
   2bef4:	e7821103 	str	r1, [r2, r3, lsl #2]
                        }

                        state = GamePad;
                    }
                    else if (state == GamePadHat) {
                        for (int i = 0; i < count && i < MAX_HATS; i++) {
   2bef8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2befc:	e2833001 	add	r3, r3, #1
   2bf00:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
   2bf04:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
   2bf08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2bf0c:	e1520003 	cmp	r2, r3
   2bf10:	2a000002 	bcs	2bf20 <USBGamePadDeviceDecodeReport+0x5e8>
   2bf14:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2bf18:	e3530005 	cmp	r3, #5
   2bf1c:	daffffe3 	ble	2beb0 <USBGamePadDeviceDecodeReport+0x578>
                            int value = BitGetUnsigned(pReportBuffer, offset + i * size, size);
                            pState->hats[nhats++] = value;
                        }
                        state = GamePad;
   2bf20:	e3a03001 	mov	r3, #1
   2bf24:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
   2bf28:	ea000011 	b	2bf74 <USBGamePadDeviceDecodeReport+0x63c>
                    }
                    else if (state == GamePadButton) {
   2bf2c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   2bf30:	e3530002 	cmp	r3, #2
   2bf34:	1a00000e 	bne	2bf74 <USBGamePadDeviceDecodeReport+0x63c>
                        pState->nbuttons = count;
   2bf38:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2bf3c:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
   2bf40:	e5832068 	str	r2, [r3, #104]	; 0x68
                        pState->buttons = BitGetUnsigned(pReportBuffer, offset, size * count);
   2bf44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bf48:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2bf4c:	e0030392 	mul	r3, r2, r3
   2bf50:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2bf54:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   2bf58:	e1a02003 	mov	r2, r3
   2bf5c:	ebfffda7 	bl	2b600 <BitGetUnsigned>
   2bf60:	e1a02000 	mov	r2, r0
   2bf64:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
   2bf68:	e583206c 	str	r2, [r3, #108]	; 0x6c
                        state = GamePad;
   2bf6c:	e3a03001 	mov	r3, #1
   2bf70:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                    }
                }
                offset += count * size;
   2bf74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2bf78:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2bf7c:	e0030392 	mul	r3, r2, r3
   2bf80:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2bf84:	e0823003 	add	r3, r2, r3
   2bf88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                break;
   2bf8c:	ea000000 	b	2bf94 <USBGamePadDeviceDecodeReport+0x65c>
            case HID_OUTPUT:
                break;
   2bf90:	e1a00000 	nop			; (mov r0, r0)
    u8 *pReportBuffer = pThis->m_pReportBuffer;
    s8 *pHIDReportDescriptor = (s8 *)pThis->m_pHIDReportDescriptor;
    u16 wReportDescriptorLength = pThis->m_usReportDescriptorLength;
    USPiGamePadState *pState = &pThis->m_State;

    while (wReportDescriptorLength > 0) {
   2bf94:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
   2bf98:	e3530000 	cmp	r3, #0
   2bf9c:	1afffe96 	bne	2b9fc <USBGamePadDeviceDecodeReport+0xc4>
            case HID_OUTPUT:
                break;
        }
    }

    pState->naxes = naxes;
   2bfa0:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
   2bfa4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   2bfa8:	e5832000 	str	r2, [r3]
    pState->nhats = nhats;
   2bfac:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
   2bfb0:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   2bfb4:	e583204c 	str	r2, [r3, #76]	; 0x4c

    pThis->m_nReportSize = (offset + 7) / 8;
   2bfb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2bfbc:	e2833007 	add	r3, r3, #7
   2bfc0:	e1a031a3 	lsr	r3, r3, #3
   2bfc4:	e6ff2073 	uxth	r2, r3
   2bfc8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2bfcc:	e1c32cbc 	strh	r2, [r3, #204]	; 0xcc
   2bfd0:	e3a04001 	mov	r4, #1
   2bfd4:	e1a03005 	mov	r3, r5
   2bfd8:	e30b0938 	movw	r0, #47416	; 0xb938
   2bfdc:	e3400002 	movt	r0, #2
   2bfe0:	e1a01003 	mov	r1, r3
   2bfe4:	ebffa61e 	bl	15864 <__cyg_profile_func_exit>
   2bfe8:	e3540001 	cmp	r4, #1
}
   2bfec:	e24bd00c 	sub	sp, fp, #12
   2bff0:	e8bd8830 	pop	{r4, r5, fp, pc}

0002bff4 <USBGamePadDeviceConfigure>:

boolean USBGamePadDeviceConfigure (TUSBDevice *pUSBDevice)
{
   2bff4:	e92d4830 	push	{r4, r5, fp, lr}
   2bff8:	e28db00c 	add	fp, sp, #12
   2bffc:	e24dd038 	sub	sp, sp, #56	; 0x38
   2c000:	e1a0500e 	mov	r5, lr
   2c004:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   2c008:	e1a03005 	mov	r3, r5
   2c00c:	e30b0ff4 	movw	r0, #49140	; 0xbff4
   2c010:	e3400002 	movt	r0, #2
   2c014:	e1a01003 	mov	r1, r3
   2c018:	ebffa5bf 	bl	1571c <__cyg_profile_func_enter>
	TUSBGamePadDevice *pThis = (TUSBGamePadDevice *) pUSBDevice;
   2c01c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2c020:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   2c024:	e51b3010 	ldr	r3, [fp, #-16]
   2c028:	e3530000 	cmp	r3, #0
   2c02c:	1a000005 	bne	2c048 <USBGamePadDeviceConfigure+0x54>
   2c030:	e3000790 	movw	r0, #1936	; 0x790
   2c034:	e3400003 	movt	r0, #3
   2c038:	e300179c 	movw	r1, #1948	; 0x79c
   2c03c:	e3401003 	movt	r1, #3
   2c040:	e3a02f55 	mov	r2, #340	; 0x154
   2c044:	ebffaa59 	bl	169b0 <uspi_assertion_failed>

	TUSBConfigurationDescriptor *pConfDesc =
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
   2c048:	e51b3010 	ldr	r3, [fp, #-16]
boolean USBGamePadDeviceConfigure (TUSBDevice *pUSBDevice)
{
	TUSBGamePadDevice *pThis = (TUSBGamePadDevice *) pUSBDevice;
	assert (pThis != 0);

	TUSBConfigurationDescriptor *pConfDesc =
   2c04c:	e1a00003 	mov	r0, r3
   2c050:	e3a01002 	mov	r1, #2
   2c054:	ebffd062 	bl	201e4 <USBDeviceGetDescriptor>
   2c058:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
		(TUSBConfigurationDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_CONFIGURATION);
	if (   pConfDesc == 0
   2c05c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2c060:	e3530000 	cmp	r3, #0
   2c064:	0a000003 	beq	2c078 <USBGamePadDeviceConfigure+0x84>
	    || pConfDesc->bNumInterfaces <  1)
   2c068:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2c06c:	e5d33004 	ldrb	r3, [r3, #4]
   2c070:	e3530000 	cmp	r3, #0
   2c074:	1a000006 	bne	2c094 <USBGamePadDeviceConfigure+0xa0>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBPad);
   2c078:	e51b3010 	ldr	r3, [fp, #-16]
   2c07c:	e1a00003 	mov	r0, r3
   2c080:	e3001788 	movw	r1, #1928	; 0x788
   2c084:	e3401003 	movt	r1, #3
   2c088:	ebffd084 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   2c08c:	e3a04000 	mov	r4, #0
   2c090:	ea00014a 	b	2c5c0 <USBGamePadDeviceConfigure+0x5cc>
	}

    TUSBInterfaceDescriptor *pInterfaceDesc =
        (TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE);
   2c094:	e51b3010 	ldr	r3, [fp, #-16]
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBPad);

		return FALSE;
	}

    TUSBInterfaceDescriptor *pInterfaceDesc =
   2c098:	e1a00003 	mov	r0, r3
   2c09c:	e3a01004 	mov	r1, #4
   2c0a0:	ebffd04f 	bl	201e4 <USBDeviceGetDescriptor>
   2c0a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        (TUSBInterfaceDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_INTERFACE);
    if (   pInterfaceDesc == 0
   2c0a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c0ac:	e3530000 	cmp	r3, #0
   2c0b0:	0a00000f 	beq	2c0f4 <USBGamePadDeviceConfigure+0x100>
        || pInterfaceDesc->bNumEndpoints      <  1
   2c0b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c0b8:	e5d33004 	ldrb	r3, [r3, #4]
   2c0bc:	e3530000 	cmp	r3, #0
   2c0c0:	0a00000b 	beq	2c0f4 <USBGamePadDeviceConfigure+0x100>
        || pInterfaceDesc->bInterfaceClass    != 0x03   // HID Class
   2c0c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c0c8:	e5d33005 	ldrb	r3, [r3, #5]
   2c0cc:	e3530003 	cmp	r3, #3
   2c0d0:	1a000007 	bne	2c0f4 <USBGamePadDeviceConfigure+0x100>
        || pInterfaceDesc->bInterfaceSubClass != 0x00   // Boot Interface Subclass
   2c0d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c0d8:	e5d33006 	ldrb	r3, [r3, #6]
   2c0dc:	e3530000 	cmp	r3, #0
   2c0e0:	1a000003 	bne	2c0f4 <USBGamePadDeviceConfigure+0x100>
        || pInterfaceDesc->bInterfaceProtocol != 0x00)  // GamePad
   2c0e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c0e8:	e5d33007 	ldrb	r3, [r3, #7]
   2c0ec:	e3530000 	cmp	r3, #0
   2c0f0:	0a000006 	beq	2c110 <USBGamePadDeviceConfigure+0x11c>
    {
        USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBPad);
   2c0f4:	e51b3010 	ldr	r3, [fp, #-16]
   2c0f8:	e1a00003 	mov	r0, r3
   2c0fc:	e3001788 	movw	r1, #1928	; 0x788
   2c100:	e3401003 	movt	r1, #3
   2c104:	ebffd065 	bl	202a0 <USBDeviceConfigurationError>

        return FALSE;
   2c108:	e3a04000 	mov	r4, #0
   2c10c:	ea00012b 	b	2c5c0 <USBGamePadDeviceConfigure+0x5cc>
    }

    pThis->m_ucInterfaceNumber  = pInterfaceDesc->bInterfaceNumber;
   2c110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c114:	e5d32002 	ldrb	r2, [r3, #2]
   2c118:	e51b3010 	ldr	r3, [fp, #-16]
   2c11c:	e5c3203c 	strb	r2, [r3, #60]	; 0x3c
    pThis->m_ucAlternateSetting = pInterfaceDesc->bAlternateSetting;
   2c120:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c124:	e5d32003 	ldrb	r2, [r3, #3]
   2c128:	e51b3010 	ldr	r3, [fp, #-16]
   2c12c:	e5c3203d 	strb	r2, [r3, #61]	; 0x3d

    TUSBHIDDescriptor *pHIDDesc = (TUSBHIDDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_HID);
   2c130:	e51b3010 	ldr	r3, [fp, #-16]
   2c134:	e1a00003 	mov	r0, r3
   2c138:	e3a01021 	mov	r1, #33	; 0x21
   2c13c:	ebffd028 	bl	201e4 <USBDeviceGetDescriptor>
   2c140:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
    if (   pHIDDesc == 0
   2c144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c148:	e3530000 	cmp	r3, #0
   2c14c:	0a000004 	beq	2c164 <USBGamePadDeviceConfigure+0x170>
        || pHIDDesc->wReportDescriptorLength == 0)
   2c150:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c154:	e1d330b7 	ldrh	r3, [r3, #7]
   2c158:	e6ff3073 	uxth	r3, r3
   2c15c:	e3530000 	cmp	r3, #0
   2c160:	1a000006 	bne	2c180 <USBGamePadDeviceConfigure+0x18c>
    {
        USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBPad);
   2c164:	e51b3010 	ldr	r3, [fp, #-16]
   2c168:	e1a00003 	mov	r0, r3
   2c16c:	e3001788 	movw	r1, #1928	; 0x788
   2c170:	e3401003 	movt	r1, #3
   2c174:	ebffd049 	bl	202a0 <USBDeviceConfigurationError>

        return FALSE;
   2c178:	e3a04000 	mov	r4, #0
   2c17c:	ea00010f 	b	2c5c0 <USBGamePadDeviceConfigure+0x5cc>
    }

    const TUSBEndpointDescriptor *pEndpointDesc;
    while ((pEndpointDesc = (TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT)) != 0)
   2c180:	ea00004f 	b	2c2c4 <USBGamePadDeviceConfigure+0x2d0>
    {
        if ((pEndpointDesc->bmAttributes & 0x3F) == 0x03)       // Interrupt
   2c184:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c188:	e5d33003 	ldrb	r3, [r3, #3]
   2c18c:	e203303f 	and	r3, r3, #63	; 0x3f
   2c190:	e3530003 	cmp	r3, #3
   2c194:	1a00004a 	bne	2c2c4 <USBGamePadDeviceConfigure+0x2d0>
        {
            if ((pEndpointDesc->bEndpointAddress & 0x80) == 0x80)   // Input
   2c198:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c19c:	e5d33002 	ldrb	r3, [r3, #2]
   2c1a0:	e6ef3073 	uxtb	r3, r3
   2c1a4:	e6af3073 	sxtb	r3, r3
   2c1a8:	e3530000 	cmp	r3, #0
   2c1ac:	aa000022 	bge	2c23c <USBGamePadDeviceConfigure+0x248>
            {
                if (pThis->m_pEndpointIn != 0)
   2c1b0:	e51b3010 	ldr	r3, [fp, #-16]
   2c1b4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2c1b8:	e3530000 	cmp	r3, #0
   2c1bc:	0a000006 	beq	2c1dc <USBGamePadDeviceConfigure+0x1e8>
                {
                    USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBPad);
   2c1c0:	e51b3010 	ldr	r3, [fp, #-16]
   2c1c4:	e1a00003 	mov	r0, r3
   2c1c8:	e3001788 	movw	r1, #1928	; 0x788
   2c1cc:	e3401003 	movt	r1, #3
   2c1d0:	ebffd032 	bl	202a0 <USBDeviceConfigurationError>

                    return FALSE;
   2c1d4:	e3a04000 	mov	r4, #0
   2c1d8:	ea0000f8 	b	2c5c0 <USBGamePadDeviceConfigure+0x5cc>
                }

                pThis->m_pEndpointIn = (TUSBEndpoint *) malloc (sizeof (TUSBEndpoint));
   2c1dc:	e3a00018 	mov	r0, #24
   2c1e0:	ebffaa1c 	bl	16a58 <malloc>
   2c1e4:	e1a03000 	mov	r3, r0
   2c1e8:	e1a02003 	mov	r2, r3
   2c1ec:	e51b3010 	ldr	r3, [fp, #-16]
   2c1f0:	e5832040 	str	r2, [r3, #64]	; 0x40
                assert (pThis->m_pEndpointIn != 0);
   2c1f4:	e51b3010 	ldr	r3, [fp, #-16]
   2c1f8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2c1fc:	e3530000 	cmp	r3, #0
   2c200:	1a000005 	bne	2c21c <USBGamePadDeviceConfigure+0x228>
   2c204:	e3000818 	movw	r0, #2072	; 0x818
   2c208:	e3400003 	movt	r0, #3
   2c20c:	e300179c 	movw	r1, #1948	; 0x79c
   2c210:	e3401003 	movt	r1, #3
   2c214:	e3a02f62 	mov	r2, #392	; 0x188
   2c218:	ebffa9e4 	bl	169b0 <uspi_assertion_failed>
                USBEndpoint2 (pThis->m_pEndpointIn, &pThis->m_USBDevice, pEndpointDesc);
   2c21c:	e51b3010 	ldr	r3, [fp, #-16]
   2c220:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   2c224:	e51b3010 	ldr	r3, [fp, #-16]
   2c228:	e1a00002 	mov	r0, r2
   2c22c:	e1a01003 	mov	r1, r3
   2c230:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2c234:	ebffd1c3 	bl	20948 <USBEndpoint2>
   2c238:	ea000021 	b	2c2c4 <USBGamePadDeviceConfigure+0x2d0>
            }
            else                            // Output
            {
                if (pThis->m_pEndpointOut != 0)
   2c23c:	e51b3010 	ldr	r3, [fp, #-16]
   2c240:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2c244:	e3530000 	cmp	r3, #0
   2c248:	0a000006 	beq	2c268 <USBGamePadDeviceConfigure+0x274>
                {
                    USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBPad);
   2c24c:	e51b3010 	ldr	r3, [fp, #-16]
   2c250:	e1a00003 	mov	r0, r3
   2c254:	e3001788 	movw	r1, #1928	; 0x788
   2c258:	e3401003 	movt	r1, #3
   2c25c:	ebffd00f 	bl	202a0 <USBDeviceConfigurationError>

                    return FALSE;
   2c260:	e3a04000 	mov	r4, #0
   2c264:	ea0000d5 	b	2c5c0 <USBGamePadDeviceConfigure+0x5cc>
                }

                pThis->m_pEndpointOut = (TUSBEndpoint *) malloc (sizeof (TUSBEndpoint));
   2c268:	e3a00018 	mov	r0, #24
   2c26c:	ebffa9f9 	bl	16a58 <malloc>
   2c270:	e1a03000 	mov	r3, r0
   2c274:	e1a02003 	mov	r2, r3
   2c278:	e51b3010 	ldr	r3, [fp, #-16]
   2c27c:	e5832044 	str	r2, [r3, #68]	; 0x44
                assert (pThis->m_pEndpointOut != 0);
   2c280:	e51b3010 	ldr	r3, [fp, #-16]
   2c284:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2c288:	e3530000 	cmp	r3, #0
   2c28c:	1a000005 	bne	2c2a8 <USBGamePadDeviceConfigure+0x2b4>
   2c290:	e3000834 	movw	r0, #2100	; 0x834
   2c294:	e3400003 	movt	r0, #3
   2c298:	e300179c 	movw	r1, #1948	; 0x79c
   2c29c:	e3401003 	movt	r1, #3
   2c2a0:	e3002195 	movw	r2, #405	; 0x195
   2c2a4:	ebffa9c1 	bl	169b0 <uspi_assertion_failed>
                USBEndpoint2 (pThis->m_pEndpointOut, &pThis->m_USBDevice, pEndpointDesc);
   2c2a8:	e51b3010 	ldr	r3, [fp, #-16]
   2c2ac:	e5932044 	ldr	r2, [r3, #68]	; 0x44
   2c2b0:	e51b3010 	ldr	r3, [fp, #-16]
   2c2b4:	e1a00002 	mov	r0, r2
   2c2b8:	e1a01003 	mov	r1, r3
   2c2bc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2c2c0:	ebffd1a0 	bl	20948 <USBEndpoint2>

        return FALSE;
    }

    const TUSBEndpointDescriptor *pEndpointDesc;
    while ((pEndpointDesc = (TUSBEndpointDescriptor *) USBDeviceGetDescriptor (&pThis->m_USBDevice, DESCRIPTOR_ENDPOINT)) != 0)
   2c2c4:	e51b3010 	ldr	r3, [fp, #-16]
   2c2c8:	e1a00003 	mov	r0, r3
   2c2cc:	e3a01005 	mov	r1, #5
   2c2d0:	ebffcfc3 	bl	201e4 <USBDeviceGetDescriptor>
   2c2d4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   2c2d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c2dc:	e3530000 	cmp	r3, #0
   2c2e0:	1affffa7 	bne	2c184 <USBGamePadDeviceConfigure+0x190>
                USBEndpoint2 (pThis->m_pEndpointOut, &pThis->m_USBDevice, pEndpointDesc);
            }
        }
    }

	if (pThis->m_pEndpointIn == 0)
   2c2e4:	e51b3010 	ldr	r3, [fp, #-16]
   2c2e8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2c2ec:	e3530000 	cmp	r3, #0
   2c2f0:	1a000006 	bne	2c310 <USBGamePadDeviceConfigure+0x31c>
	{
		USBDeviceConfigurationError (&pThis->m_USBDevice, FromUSBPad);
   2c2f4:	e51b3010 	ldr	r3, [fp, #-16]
   2c2f8:	e1a00003 	mov	r0, r3
   2c2fc:	e3001788 	movw	r1, #1928	; 0x788
   2c300:	e3401003 	movt	r1, #3
   2c304:	ebffcfe5 	bl	202a0 <USBDeviceConfigurationError>

		return FALSE;
   2c308:	e3a04000 	mov	r4, #0
   2c30c:	ea0000ab 	b	2c5c0 <USBGamePadDeviceConfigure+0x5cc>
	}

    pThis->m_usReportDescriptorLength = pHIDDesc->wReportDescriptorLength;
   2c310:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c314:	e1d330b7 	ldrh	r3, [r3, #7]
   2c318:	e6ff2073 	uxth	r2, r3
   2c31c:	e51b3010 	ldr	r3, [fp, #-16]
   2c320:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    pThis->m_pHIDReportDescriptor = (unsigned char *) malloc(pHIDDesc->wReportDescriptorLength);
   2c324:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c328:	e1d330b7 	ldrh	r3, [r3, #7]
   2c32c:	e6ff3073 	uxth	r3, r3
   2c330:	e1a00003 	mov	r0, r3
   2c334:	ebffa9c7 	bl	16a58 <malloc>
   2c338:	e1a03000 	mov	r3, r0
   2c33c:	e1a02003 	mov	r2, r3
   2c340:	e51b3010 	ldr	r3, [fp, #-16]
   2c344:	e58320c0 	str	r2, [r3, #192]	; 0xc0
    assert (pThis->m_pHIDReportDescriptor != 0);
   2c348:	e51b3010 	ldr	r3, [fp, #-16]
   2c34c:	e59330c0 	ldr	r3, [r3, #192]	; 0xc0
   2c350:	e3530000 	cmp	r3, #0
   2c354:	1a000005 	bne	2c370 <USBGamePadDeviceConfigure+0x37c>
   2c358:	e3000850 	movw	r0, #2128	; 0x850
   2c35c:	e3400003 	movt	r0, #3
   2c360:	e300179c 	movw	r1, #1948	; 0x79c
   2c364:	e3401003 	movt	r1, #3
   2c368:	e3a02f69 	mov	r2, #420	; 0x1a4
   2c36c:	ebffa98f 	bl	169b0 <uspi_assertion_failed>

    if (DWHCIDeviceGetDescriptor (USBDeviceGetHost (&pThis->m_USBDevice),
   2c370:	e51b3010 	ldr	r3, [fp, #-16]
   2c374:	e1a00003 	mov	r0, r3
   2c378:	ebffcf21 	bl	20004 <USBDeviceGetHost>
   2c37c:	e1a04000 	mov	r4, r0
                    USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   2c380:	e51b3010 	ldr	r3, [fp, #-16]
   2c384:	e1a00003 	mov	r0, r3
   2c388:	ebffcef5 	bl	1ff64 <USBDeviceGetEndpoint0>
   2c38c:	e1a01000 	mov	r1, r0

    pThis->m_usReportDescriptorLength = pHIDDesc->wReportDescriptorLength;
    pThis->m_pHIDReportDescriptor = (unsigned char *) malloc(pHIDDesc->wReportDescriptorLength);
    assert (pThis->m_pHIDReportDescriptor != 0);

    if (DWHCIDeviceGetDescriptor (USBDeviceGetHost (&pThis->m_USBDevice),
   2c390:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c394:	e5d3c006 	ldrb	ip, [r3, #6]
                    USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
                    pHIDDesc->bReportDescriptorType, DESCRIPTOR_INDEX_DEFAULT,
                    pThis->m_pHIDReportDescriptor, pHIDDesc->wReportDescriptorLength, REQUEST_IN)
   2c398:	e51b3010 	ldr	r3, [fp, #-16]
   2c39c:	e59330c0 	ldr	r3, [r3, #192]	; 0xc0
   2c3a0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2c3a4:	e1d220b7 	ldrh	r2, [r2, #7]
   2c3a8:	e6ff2072 	uxth	r2, r2

    pThis->m_usReportDescriptorLength = pHIDDesc->wReportDescriptorLength;
    pThis->m_pHIDReportDescriptor = (unsigned char *) malloc(pHIDDesc->wReportDescriptorLength);
    assert (pThis->m_pHIDReportDescriptor != 0);

    if (DWHCIDeviceGetDescriptor (USBDeviceGetHost (&pThis->m_USBDevice),
   2c3ac:	e58d3000 	str	r3, [sp]
   2c3b0:	e58d2004 	str	r2, [sp, #4]
   2c3b4:	e3a03080 	mov	r3, #128	; 0x80
   2c3b8:	e58d3008 	str	r3, [sp, #8]
   2c3bc:	e1a00004 	mov	r0, r4
   2c3c0:	e1a0200c 	mov	r2, ip
   2c3c4:	e3a03000 	mov	r3, #0
   2c3c8:	ebffb141 	bl	188d4 <DWHCIDeviceGetDescriptor>
   2c3cc:	e1a02000 	mov	r2, r0
                    USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
                    pHIDDesc->bReportDescriptorType, DESCRIPTOR_INDEX_DEFAULT,
                    pThis->m_pHIDReportDescriptor, pHIDDesc->wReportDescriptorLength, REQUEST_IN)
        != pHIDDesc->wReportDescriptorLength)
   2c3d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c3d4:	e1d330b7 	ldrh	r3, [r3, #7]
   2c3d8:	e6ff3073 	uxth	r3, r3

    pThis->m_usReportDescriptorLength = pHIDDesc->wReportDescriptorLength;
    pThis->m_pHIDReportDescriptor = (unsigned char *) malloc(pHIDDesc->wReportDescriptorLength);
    assert (pThis->m_pHIDReportDescriptor != 0);

    if (DWHCIDeviceGetDescriptor (USBDeviceGetHost (&pThis->m_USBDevice),
   2c3dc:	e1520003 	cmp	r2, r3
   2c3e0:	0a000007 	beq	2c404 <USBGamePadDeviceConfigure+0x410>
                    USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
                    pHIDDesc->bReportDescriptorType, DESCRIPTOR_INDEX_DEFAULT,
                    pThis->m_pHIDReportDescriptor, pHIDDesc->wReportDescriptorLength, REQUEST_IN)
        != pHIDDesc->wReportDescriptorLength)
    {
        LogWrite (FromUSBPad, LOG_ERROR, "Cannot get HID report descriptor");
   2c3e4:	e3000788 	movw	r0, #1928	; 0x788
   2c3e8:	e3400003 	movt	r0, #3
   2c3ec:	e3a01001 	mov	r1, #1
   2c3f0:	e3002874 	movw	r2, #2164	; 0x874
   2c3f4:	e3402003 	movt	r2, #3
   2c3f8:	ebffa954 	bl	16950 <LogWrite>

        return FALSE;
   2c3fc:	e3a04000 	mov	r4, #0
   2c400:	ea00006e 	b	2c5c0 <USBGamePadDeviceConfigure+0x5cc>
    }
    //DebugHexdump (pThis->m_pHIDReportDescriptor, pHIDDesc->wReportDescriptorLength, "hid");

    pThis->m_pReportBuffer[0] = 0;
   2c404:	e51b3010 	ldr	r3, [fp, #-16]
   2c408:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
   2c40c:	e3a02000 	mov	r2, #0
   2c410:	e5c32000 	strb	r2, [r3]
    USBGamePadDeviceDecodeReport (pThis);
   2c414:	e51b0010 	ldr	r0, [fp, #-16]
   2c418:	ebfffd46 	bl	2b938 <USBGamePadDeviceDecodeReport>

    if (!USBDeviceConfigure (&pThis->m_USBDevice))
   2c41c:	e51b3010 	ldr	r3, [fp, #-16]
   2c420:	e1a00003 	mov	r0, r3
   2c424:	ebffcd60 	bl	1f9ac <USBDeviceConfigure>
   2c428:	e1a03000 	mov	r3, r0
   2c42c:	e3530000 	cmp	r3, #0
   2c430:	1a000007 	bne	2c454 <USBGamePadDeviceConfigure+0x460>
    {
        LogWrite (FromUSBPad, LOG_ERROR, "Cannot set configuration");
   2c434:	e3000788 	movw	r0, #1928	; 0x788
   2c438:	e3400003 	movt	r0, #3
   2c43c:	e3a01001 	mov	r1, #1
   2c440:	e3002898 	movw	r2, #2200	; 0x898
   2c444:	e3402003 	movt	r2, #3
   2c448:	ebffa940 	bl	16950 <LogWrite>

        return FALSE;
   2c44c:	e3a04000 	mov	r4, #0
   2c450:	ea00005a 	b	2c5c0 <USBGamePadDeviceConfigure+0x5cc>
    }

    if (pThis->m_ucAlternateSetting != 0)
   2c454:	e51b3010 	ldr	r3, [fp, #-16]
   2c458:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
   2c45c:	e3530000 	cmp	r3, #0
   2c460:	0a000022 	beq	2c4f0 <USBGamePadDeviceConfigure+0x4fc>
    {
        if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2c464:	e51b3010 	ldr	r3, [fp, #-16]
   2c468:	e1a00003 	mov	r0, r3
   2c46c:	ebffcee4 	bl	20004 <USBDeviceGetHost>
   2c470:	e1a04000 	mov	r4, r0
                        USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   2c474:	e51b3010 	ldr	r3, [fp, #-16]
   2c478:	e1a00003 	mov	r0, r3
   2c47c:	ebffceb8 	bl	1ff64 <USBDeviceGetEndpoint0>
   2c480:	e1a01000 	mov	r1, r0
                        REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
                        pThis->m_ucAlternateSetting,
   2c484:	e51b3010 	ldr	r3, [fp, #-16]
   2c488:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
        return FALSE;
    }

    if (pThis->m_ucAlternateSetting != 0)
    {
        if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2c48c:	e6ff2073 	uxth	r2, r3
                        USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
                        REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
                        pThis->m_ucAlternateSetting,
                        pThis->m_ucInterfaceNumber, 0, 0) < 0)
   2c490:	e51b3010 	ldr	r3, [fp, #-16]
   2c494:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
        return FALSE;
    }

    if (pThis->m_ucAlternateSetting != 0)
    {
        if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2c498:	e6ff3073 	uxth	r3, r3
   2c49c:	e58d2000 	str	r2, [sp]
   2c4a0:	e58d3004 	str	r3, [sp, #4]
   2c4a4:	e3a03000 	mov	r3, #0
   2c4a8:	e58d3008 	str	r3, [sp, #8]
   2c4ac:	e3a03000 	mov	r3, #0
   2c4b0:	e58d300c 	str	r3, [sp, #12]
   2c4b4:	e1a00004 	mov	r0, r4
   2c4b8:	e3a02001 	mov	r2, #1
   2c4bc:	e3a0300b 	mov	r3, #11
   2c4c0:	ebffb1a7 	bl	18b64 <DWHCIDeviceControlMessage>
   2c4c4:	e1a03000 	mov	r3, r0
   2c4c8:	e3530000 	cmp	r3, #0
   2c4cc:	aa000007 	bge	2c4f0 <USBGamePadDeviceConfigure+0x4fc>
                        USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
                        REQUEST_OUT | REQUEST_TO_INTERFACE, SET_INTERFACE,
                        pThis->m_ucAlternateSetting,
                        pThis->m_ucInterfaceNumber, 0, 0) < 0)
        {
            LogWrite (FromUSBPad, LOG_ERROR, "Cannot set interface");
   2c4d0:	e3000788 	movw	r0, #1928	; 0x788
   2c4d4:	e3400003 	movt	r0, #3
   2c4d8:	e3a01001 	mov	r1, #1
   2c4dc:	e30028b4 	movw	r2, #2228	; 0x8b4
   2c4e0:	e3402003 	movt	r2, #3
   2c4e4:	ebffa919 	bl	16950 <LogWrite>

            return FALSE;
   2c4e8:	e3a04000 	mov	r4, #0
   2c4ec:	ea000033 	b	2c5c0 <USBGamePadDeviceConfigure+0x5cc>
        }
    }

    pThis->m_nDeviceIndex = s_nDeviceNumber++;
   2c4f0:	e3003c58 	movw	r3, #3160	; 0xc58
   2c4f4:	e3403003 	movt	r3, #3
   2c4f8:	e5932000 	ldr	r2, [r3]
   2c4fc:	e2821001 	add	r1, r2, #1
   2c500:	e3003c58 	movw	r3, #3160	; 0xc58
   2c504:	e3403003 	movt	r3, #3
   2c508:	e5831000 	str	r1, [r3]
   2c50c:	e51b3010 	ldr	r3, [fp, #-16]
   2c510:	e5832038 	str	r2, [r3, #56]	; 0x38

    if (   pUSBDevice->m_pDeviceDesc->idVendor == 0x054c
   2c514:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2c518:	e5933014 	ldr	r3, [r3, #20]
   2c51c:	e1d330b8 	ldrh	r3, [r3, #8]
   2c520:	e6ff3073 	uxth	r3, r3
   2c524:	e300254c 	movw	r2, #1356	; 0x54c
   2c528:	e1530002 	cmp	r3, r2
   2c52c:	1a000007 	bne	2c550 <USBGamePadDeviceConfigure+0x55c>
        && pUSBDevice->m_pDeviceDesc->idProduct == 0x0268)
   2c530:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2c534:	e5933014 	ldr	r3, [r3, #20]
   2c538:	e1d330ba 	ldrh	r3, [r3, #10]
   2c53c:	e6ff3073 	uxth	r3, r3
   2c540:	e3530f9a 	cmp	r3, #616	; 0x268
   2c544:	1a000001 	bne	2c550 <USBGamePadDeviceConfigure+0x55c>
    {
        USBGamePadDevicePS3Configure (pThis);
   2c548:	e51b0010 	ldr	r0, [fp, #-16]
   2c54c:	eb000140 	bl	2ca54 <USBGamePadDevicePS3Configure>
    }

	TString DeviceName;
	String (&DeviceName);
   2c550:	e24b302c 	sub	r3, fp, #44	; 0x2c
   2c554:	e1a00003 	mov	r0, r3
   2c558:	ebffe21a 	bl	24dc8 <String>
	StringFormat (&DeviceName, "upad%u", pThis->m_nDeviceIndex);
   2c55c:	e51b3010 	ldr	r3, [fp, #-16]
   2c560:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2c564:	e24b202c 	sub	r2, fp, #44	; 0x2c
   2c568:	e1a00002 	mov	r0, r2
   2c56c:	e30018cc 	movw	r1, #2252	; 0x8cc
   2c570:	e3401003 	movt	r1, #3
   2c574:	e1a02003 	mov	r2, r3
   2c578:	ebffe3b6 	bl	25458 <StringFormat>
	DeviceNameServiceAddDevice (DeviceNameServiceGet (), StringGet (&DeviceName), pThis, FALSE);
   2c57c:	ebffdbee 	bl	2353c <DeviceNameServiceGet>
   2c580:	e1a04000 	mov	r4, r0
   2c584:	e24b302c 	sub	r3, fp, #44	; 0x2c
   2c588:	e1a00003 	mov	r0, r3
   2c58c:	ebffe280 	bl	24f94 <StringGet>
   2c590:	e1a03000 	mov	r3, r0
   2c594:	e1a00004 	mov	r0, r4
   2c598:	e1a01003 	mov	r1, r3
   2c59c:	e51b2010 	ldr	r2, [fp, #-16]
   2c5a0:	e3a03000 	mov	r3, #0
   2c5a4:	ebffdb2c 	bl	2325c <DeviceNameServiceAddDevice>

	_String (&DeviceName);
   2c5a8:	e24b302c 	sub	r3, fp, #44	; 0x2c
   2c5ac:	e1a00003 	mov	r0, r3
   2c5b0:	ebffe252 	bl	24f00 <_String>

	return USBGamePadDeviceStartRequest (pThis);
   2c5b4:	e51b0010 	ldr	r0, [fp, #-16]
   2c5b8:	eb000030 	bl	2c680 <USBGamePadDeviceStartRequest>
   2c5bc:	e1a04000 	mov	r4, r0
   2c5c0:	e1a03005 	mov	r3, r5
   2c5c4:	e30b0ff4 	movw	r0, #49140	; 0xbff4
   2c5c8:	e3400002 	movt	r0, #2
   2c5cc:	e1a01003 	mov	r1, r3
   2c5d0:	ebffa4a3 	bl	15864 <__cyg_profile_func_exit>
   2c5d4:	e1a03004 	mov	r3, r4
}
   2c5d8:	e1a00003 	mov	r0, r3
   2c5dc:	e24bd00c 	sub	sp, fp, #12
   2c5e0:	e8bd8830 	pop	{r4, r5, fp, pc}

0002c5e4 <USBGamePadDeviceRegisterStatusHandler>:

void USBGamePadDeviceRegisterStatusHandler (TUSBGamePadDevice *pThis, TGamePadStatusHandler *pStatusHandler)
{
   2c5e4:	e92d4810 	push	{r4, fp, lr}
   2c5e8:	e28db008 	add	fp, sp, #8
   2c5ec:	e24dd00c 	sub	sp, sp, #12
   2c5f0:	e1a0400e 	mov	r4, lr
   2c5f4:	e50b0010 	str	r0, [fp, #-16]
   2c5f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2c5fc:	e1a03004 	mov	r3, r4
   2c600:	e30c05e4 	movw	r0, #50660	; 0xc5e4
   2c604:	e3400002 	movt	r0, #2
   2c608:	e1a01003 	mov	r1, r3
   2c60c:	ebffa442 	bl	1571c <__cyg_profile_func_enter>
    assert (pThis != 0);
   2c610:	e51b3010 	ldr	r3, [fp, #-16]
   2c614:	e3530000 	cmp	r3, #0
   2c618:	1a000005 	bne	2c634 <USBGamePadDeviceRegisterStatusHandler+0x50>
   2c61c:	e3000790 	movw	r0, #1936	; 0x790
   2c620:	e3400003 	movt	r0, #3
   2c624:	e300179c 	movw	r1, #1948	; 0x79c
   2c628:	e3401003 	movt	r1, #3
   2c62c:	e30021de 	movw	r2, #478	; 0x1de
   2c630:	ebffa8de 	bl	169b0 <uspi_assertion_failed>
    assert (pStatusHandler != 0);
   2c634:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2c638:	e3530000 	cmp	r3, #0
   2c63c:	1a000005 	bne	2c658 <USBGamePadDeviceRegisterStatusHandler+0x74>
   2c640:	e30008d4 	movw	r0, #2260	; 0x8d4
   2c644:	e3400003 	movt	r0, #3
   2c648:	e300179c 	movw	r1, #1948	; 0x79c
   2c64c:	e3401003 	movt	r1, #3
   2c650:	e30021df 	movw	r2, #479	; 0x1df
   2c654:	ebffa8d5 	bl	169b0 <uspi_assertion_failed>
    pThis->m_pStatusHandler = pStatusHandler;
   2c658:	e51b3010 	ldr	r3, [fp, #-16]
   2c65c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2c660:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   2c664:	e1a03004 	mov	r3, r4
   2c668:	e30c05e4 	movw	r0, #50660	; 0xc5e4
   2c66c:	e3400002 	movt	r0, #2
   2c670:	e1a01003 	mov	r1, r3
   2c674:	ebffa47a 	bl	15864 <__cyg_profile_func_exit>
}
   2c678:	e24bd008 	sub	sp, fp, #8
   2c67c:	e8bd8810 	pop	{r4, fp, pc}

0002c680 <USBGamePadDeviceStartRequest>:

boolean USBGamePadDeviceStartRequest (TUSBGamePadDevice *pThis)
{
   2c680:	e92d4830 	push	{r4, r5, fp, lr}
   2c684:	e28db00c 	add	fp, sp, #12
   2c688:	e24dd010 	sub	sp, sp, #16
   2c68c:	e1a0400e 	mov	r4, lr
   2c690:	e50b0010 	str	r0, [fp, #-16]
   2c694:	e1a03004 	mov	r3, r4
   2c698:	e30c0680 	movw	r0, #50816	; 0xc680
   2c69c:	e3400002 	movt	r0, #2
   2c6a0:	e1a01003 	mov	r1, r3
   2c6a4:	ebffa41c 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2c6a8:	e51b3010 	ldr	r3, [fp, #-16]
   2c6ac:	e3530000 	cmp	r3, #0
   2c6b0:	1a000005 	bne	2c6cc <USBGamePadDeviceStartRequest+0x4c>
   2c6b4:	e3000790 	movw	r0, #1936	; 0x790
   2c6b8:	e3400003 	movt	r0, #3
   2c6bc:	e300179c 	movw	r1, #1948	; 0x79c
   2c6c0:	e3401003 	movt	r1, #3
   2c6c4:	e30021e5 	movw	r2, #485	; 0x1e5
   2c6c8:	ebffa8b8 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pEndpointIn != 0);
   2c6cc:	e51b3010 	ldr	r3, [fp, #-16]
   2c6d0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2c6d4:	e3530000 	cmp	r3, #0
   2c6d8:	1a000005 	bne	2c6f4 <USBGamePadDeviceStartRequest+0x74>
   2c6dc:	e3000818 	movw	r0, #2072	; 0x818
   2c6e0:	e3400003 	movt	r0, #3
   2c6e4:	e300179c 	movw	r1, #1948	; 0x79c
   2c6e8:	e3401003 	movt	r1, #3
   2c6ec:	e30021e7 	movw	r2, #487	; 0x1e7
   2c6f0:	ebffa8ae 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pReportBuffer != 0);
   2c6f4:	e51b3010 	ldr	r3, [fp, #-16]
   2c6f8:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
   2c6fc:	e3530000 	cmp	r3, #0
   2c700:	1a000005 	bne	2c71c <USBGamePadDeviceStartRequest+0x9c>
   2c704:	e30007fc 	movw	r0, #2044	; 0x7fc
   2c708:	e3400003 	movt	r0, #3
   2c70c:	e300179c 	movw	r1, #1948	; 0x79c
   2c710:	e3401003 	movt	r1, #3
   2c714:	e3a02f7a 	mov	r2, #488	; 0x1e8
   2c718:	ebffa8a4 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pURB == 0);
   2c71c:	e51b3010 	ldr	r3, [fp, #-16]
   2c720:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
   2c724:	e3530000 	cmp	r3, #0
   2c728:	0a000005 	beq	2c744 <USBGamePadDeviceStartRequest+0xc4>
   2c72c:	e30008e8 	movw	r0, #2280	; 0x8e8
   2c730:	e3400003 	movt	r0, #3
   2c734:	e300179c 	movw	r1, #1948	; 0x79c
   2c738:	e3401003 	movt	r1, #3
   2c73c:	e30021ea 	movw	r2, #490	; 0x1ea
   2c740:	ebffa89a 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pURB = malloc (sizeof (TUSBRequest));
   2c744:	e3a00024 	mov	r0, #36	; 0x24
   2c748:	ebffa8c2 	bl	16a58 <malloc>
   2c74c:	e1a03000 	mov	r3, r0
   2c750:	e1a02003 	mov	r2, r3
   2c754:	e51b3010 	ldr	r3, [fp, #-16]
   2c758:	e58320c4 	str	r2, [r3, #196]	; 0xc4
	assert (pThis->m_pURB != 0);
   2c75c:	e51b3010 	ldr	r3, [fp, #-16]
   2c760:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
   2c764:	e3530000 	cmp	r3, #0
   2c768:	1a000005 	bne	2c784 <USBGamePadDeviceStartRequest+0x104>
   2c76c:	e30008fc 	movw	r0, #2300	; 0x8fc
   2c770:	e3400003 	movt	r0, #3
   2c774:	e300179c 	movw	r1, #1948	; 0x79c
   2c778:	e3401003 	movt	r1, #3
   2c77c:	e3a02f7b 	mov	r2, #492	; 0x1ec
   2c780:	ebffa88a 	bl	169b0 <uspi_assertion_failed>
	USBRequest (pThis->m_pURB, pThis->m_pEndpointIn, pThis->m_pReportBuffer, pThis->m_nReportSize, 0);
   2c784:	e51b3010 	ldr	r3, [fp, #-16]
   2c788:	e59300c4 	ldr	r0, [r3, #196]	; 0xc4
   2c78c:	e51b3010 	ldr	r3, [fp, #-16]
   2c790:	e5931040 	ldr	r1, [r3, #64]	; 0x40
   2c794:	e51b3010 	ldr	r3, [fp, #-16]
   2c798:	e59320c8 	ldr	r2, [r3, #200]	; 0xc8
   2c79c:	e51b3010 	ldr	r3, [fp, #-16]
   2c7a0:	e1d33cbc 	ldrh	r3, [r3, #204]	; 0xcc
   2c7a4:	e1a0c003 	mov	ip, r3
   2c7a8:	e3a03000 	mov	r3, #0
   2c7ac:	e58d3000 	str	r3, [sp]
   2c7b0:	e1a0300c 	mov	r3, ip
   2c7b4:	ebffd312 	bl	21404 <USBRequest>
	USBRequestSetCompletionRoutine (pThis->m_pURB, USBGamePadDeviceCompletionRoutine, 0, pThis);
   2c7b8:	e51b3010 	ldr	r3, [fp, #-16]
   2c7bc:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
   2c7c0:	e1a00003 	mov	r0, r3
   2c7c4:	e30c1824 	movw	r1, #51236	; 0xc824
   2c7c8:	e3401002 	movt	r1, #2
   2c7cc:	e3a02000 	mov	r2, #0
   2c7d0:	e51b3010 	ldr	r3, [fp, #-16]
   2c7d4:	ebffd4a9 	bl	21a80 <USBRequestSetCompletionRoutine>

	return DWHCIDeviceSubmitAsyncRequest (USBDeviceGetHost (&pThis->m_USBDevice), pThis->m_pURB);
   2c7d8:	e51b3010 	ldr	r3, [fp, #-16]
   2c7dc:	e1a00003 	mov	r0, r3
   2c7e0:	ebffce07 	bl	20004 <USBDeviceGetHost>
   2c7e4:	e1a02000 	mov	r2, r0
   2c7e8:	e51b3010 	ldr	r3, [fp, #-16]
   2c7ec:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
   2c7f0:	e1a00002 	mov	r0, r2
   2c7f4:	e1a01003 	mov	r1, r3
   2c7f8:	ebffb23c 	bl	190f0 <DWHCIDeviceSubmitAsyncRequest>
   2c7fc:	e1a05000 	mov	r5, r0
   2c800:	e1a03004 	mov	r3, r4
   2c804:	e30c0680 	movw	r0, #50816	; 0xc680
   2c808:	e3400002 	movt	r0, #2
   2c80c:	e1a01003 	mov	r1, r3
   2c810:	ebffa413 	bl	15864 <__cyg_profile_func_exit>
   2c814:	e1a03005 	mov	r3, r5
}
   2c818:	e1a00003 	mov	r0, r3
   2c81c:	e24bd00c 	sub	sp, fp, #12
   2c820:	e8bd8830 	pop	{r4, r5, fp, pc}

0002c824 <USBGamePadDeviceCompletionRoutine>:

void USBGamePadDeviceCompletionRoutine (TUSBRequest *pURB, void *pParam, void *pContext)
{
   2c824:	e92d4810 	push	{r4, fp, lr}
   2c828:	e28db008 	add	fp, sp, #8
   2c82c:	e24dd01c 	sub	sp, sp, #28
   2c830:	e1a0400e 	mov	r4, lr
   2c834:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2c838:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2c83c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   2c840:	e1a03004 	mov	r3, r4
   2c844:	e30c0824 	movw	r0, #51236	; 0xc824
   2c848:	e3400002 	movt	r0, #2
   2c84c:	e1a01003 	mov	r1, r3
   2c850:	ebffa3b1 	bl	1571c <__cyg_profile_func_enter>
	TUSBGamePadDevice *pThis = (TUSBGamePadDevice *) pContext;
   2c854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c858:	e50b3010 	str	r3, [fp, #-16]
	assert (pThis != 0);
   2c85c:	e51b3010 	ldr	r3, [fp, #-16]
   2c860:	e3530000 	cmp	r3, #0
   2c864:	1a000005 	bne	2c880 <USBGamePadDeviceCompletionRoutine+0x5c>
   2c868:	e3000790 	movw	r0, #1936	; 0x790
   2c86c:	e3400003 	movt	r0, #3
   2c870:	e300179c 	movw	r1, #1948	; 0x79c
   2c874:	e3401003 	movt	r1, #3
   2c878:	e30021f6 	movw	r2, #502	; 0x1f6
   2c87c:	ebffa84b 	bl	169b0 <uspi_assertion_failed>

	assert (pURB != 0);
   2c880:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c884:	e3530000 	cmp	r3, #0
   2c888:	1a000005 	bne	2c8a4 <USBGamePadDeviceCompletionRoutine+0x80>
   2c88c:	e3000910 	movw	r0, #2320	; 0x910
   2c890:	e3400003 	movt	r0, #3
   2c894:	e300179c 	movw	r1, #1948	; 0x79c
   2c898:	e3401003 	movt	r1, #3
   2c89c:	e3a02f7e 	mov	r2, #504	; 0x1f8
   2c8a0:	ebffa842 	bl	169b0 <uspi_assertion_failed>
	assert (pThis->m_pURB == pURB);
   2c8a4:	e51b3010 	ldr	r3, [fp, #-16]
   2c8a8:	e59320c4 	ldr	r2, [r3, #196]	; 0xc4
   2c8ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c8b0:	e1520003 	cmp	r2, r3
   2c8b4:	0a000005 	beq	2c8d0 <USBGamePadDeviceCompletionRoutine+0xac>
   2c8b8:	e300091c 	movw	r0, #2332	; 0x91c
   2c8bc:	e3400003 	movt	r0, #3
   2c8c0:	e300179c 	movw	r1, #1948	; 0x79c
   2c8c4:	e3401003 	movt	r1, #3
   2c8c8:	e30021f9 	movw	r2, #505	; 0x1f9
   2c8cc:	ebffa837 	bl	169b0 <uspi_assertion_failed>

	if (   USBRequestGetStatus (pURB) != 0
   2c8d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2c8d4:	ebffd3a4 	bl	2176c <USBRequestGetStatus>
   2c8d8:	e1a03000 	mov	r3, r0
   2c8dc:	e3530000 	cmp	r3, #0
   2c8e0:	0a000018 	beq	2c948 <USBGamePadDeviceCompletionRoutine+0x124>
	    && USBRequestGetResultLength (pURB) > 0)
   2c8e4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2c8e8:	ebffd3bd 	bl	217e4 <USBRequestGetResultLength>
   2c8ec:	e1a03000 	mov	r3, r0
   2c8f0:	e3530000 	cmp	r3, #0
   2c8f4:	0a000013 	beq	2c948 <USBGamePadDeviceCompletionRoutine+0x124>
	{
        //DebugHexdump (pThis->m_pReportBuffer, 16, "report");
        if (pThis->m_pHIDReportDescriptor != 0 && pThis->m_pStatusHandler != 0)
   2c8f8:	e51b3010 	ldr	r3, [fp, #-16]
   2c8fc:	e59330c0 	ldr	r3, [r3, #192]	; 0xc0
   2c900:	e3530000 	cmp	r3, #0
   2c904:	0a00000f 	beq	2c948 <USBGamePadDeviceCompletionRoutine+0x124>
   2c908:	e51b3010 	ldr	r3, [fp, #-16]
   2c90c:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
   2c910:	e3530000 	cmp	r3, #0
   2c914:	0a00000b 	beq	2c948 <USBGamePadDeviceCompletionRoutine+0x124>
        {
            USBGamePadDeviceDecodeReport (pThis);
   2c918:	e51b0010 	ldr	r0, [fp, #-16]
   2c91c:	ebfffc05 	bl	2b938 <USBGamePadDeviceDecodeReport>
            (*pThis->m_pStatusHandler) (pThis->m_nDeviceIndex - 1, &pThis->m_State);
   2c920:	e51b3010 	ldr	r3, [fp, #-16]
   2c924:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
   2c928:	e51b2010 	ldr	r2, [fp, #-16]
   2c92c:	e5922038 	ldr	r2, [r2, #56]	; 0x38
   2c930:	e2421001 	sub	r1, r2, #1
   2c934:	e51b2010 	ldr	r2, [fp, #-16]
   2c938:	e2822048 	add	r2, r2, #72	; 0x48
   2c93c:	e1a00001 	mov	r0, r1
   2c940:	e1a01002 	mov	r1, r2
   2c944:	e12fff33 	blx	r3
        }
	}

	_USBRequest (pThis->m_pURB);
   2c948:	e51b3010 	ldr	r3, [fp, #-16]
   2c94c:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
   2c950:	e1a00003 	mov	r0, r3
   2c954:	ebffd2fa 	bl	21544 <_USBRequest>
	free (pThis->m_pURB);
   2c958:	e51b3010 	ldr	r3, [fp, #-16]
   2c95c:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
   2c960:	e1a00003 	mov	r0, r3
   2c964:	ebffa851 	bl	16ab0 <free>
	pThis->m_pURB = 0;
   2c968:	e51b3010 	ldr	r3, [fp, #-16]
   2c96c:	e3a02000 	mov	r2, #0
   2c970:	e58320c4 	str	r2, [r3, #196]	; 0xc4

	USBGamePadDeviceStartRequest (pThis);
   2c974:	e51b0010 	ldr	r0, [fp, #-16]
   2c978:	ebffff40 	bl	2c680 <USBGamePadDeviceStartRequest>
   2c97c:	e1a03004 	mov	r3, r4
   2c980:	e30c0824 	movw	r0, #51236	; 0xc824
   2c984:	e3400002 	movt	r0, #2
   2c988:	e1a01003 	mov	r1, r3
   2c98c:	ebffa3b4 	bl	15864 <__cyg_profile_func_exit>
}
   2c990:	e24bd008 	sub	sp, fp, #8
   2c994:	e8bd8810 	pop	{r4, fp, pc}

0002c998 <USBGamePadDeviceGetReport>:

void USBGamePadDeviceGetReport (TUSBGamePadDevice *pThis)
{
   2c998:	e92d4830 	push	{r4, r5, fp, lr}
   2c99c:	e28db00c 	add	fp, sp, #12
   2c9a0:	e24dd018 	sub	sp, sp, #24
   2c9a4:	e1a0400e 	mov	r4, lr
   2c9a8:	e50b0010 	str	r0, [fp, #-16]
   2c9ac:	e1a03004 	mov	r3, r4
   2c9b0:	e30c0998 	movw	r0, #51608	; 0xc998
   2c9b4:	e3400002 	movt	r0, #2
   2c9b8:	e1a01003 	mov	r1, r3
   2c9bc:	ebffa356 	bl	1571c <__cyg_profile_func_enter>
    if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2c9c0:	e51b3010 	ldr	r3, [fp, #-16]
   2c9c4:	e1a00003 	mov	r0, r3
   2c9c8:	ebffcd8d 	bl	20004 <USBDeviceGetHost>
   2c9cc:	e1a05000 	mov	r5, r0
                       USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   2c9d0:	e51b3010 	ldr	r3, [fp, #-16]
   2c9d4:	e1a00003 	mov	r0, r3
   2c9d8:	ebffcd61 	bl	1ff64 <USBDeviceGetEndpoint0>
   2c9dc:	e1a0c000 	mov	ip, r0
                       REQUEST_IN | REQUEST_CLASS | REQUEST_TO_INTERFACE,
                       GET_REPORT, (REPORT_TYPE_INPUT << 8) | 0x00,
                       pThis->m_ucInterfaceNumber,
   2c9e0:	e51b3010 	ldr	r3, [fp, #-16]
   2c9e4:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
	USBGamePadDeviceStartRequest (pThis);
}

void USBGamePadDeviceGetReport (TUSBGamePadDevice *pThis)
{
    if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2c9e8:	e6ff1073 	uxth	r1, r3
                       USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
                       REQUEST_IN | REQUEST_CLASS | REQUEST_TO_INTERFACE,
                       GET_REPORT, (REPORT_TYPE_INPUT << 8) | 0x00,
                       pThis->m_ucInterfaceNumber,
                       pThis->m_pReportBuffer, pThis->m_nReportSize) > 0)
   2c9ec:	e51b3010 	ldr	r3, [fp, #-16]
   2c9f0:	e59320c8 	ldr	r2, [r3, #200]	; 0xc8
	USBGamePadDeviceStartRequest (pThis);
}

void USBGamePadDeviceGetReport (TUSBGamePadDevice *pThis)
{
    if (DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2c9f4:	e51b3010 	ldr	r3, [fp, #-16]
   2c9f8:	e1d33cbc 	ldrh	r3, [r3, #204]	; 0xcc
   2c9fc:	e3a00c01 	mov	r0, #256	; 0x100
   2ca00:	e58d0000 	str	r0, [sp]
   2ca04:	e58d1004 	str	r1, [sp, #4]
   2ca08:	e58d2008 	str	r2, [sp, #8]
   2ca0c:	e58d300c 	str	r3, [sp, #12]
   2ca10:	e1a00005 	mov	r0, r5
   2ca14:	e1a0100c 	mov	r1, ip
   2ca18:	e3a020a1 	mov	r2, #161	; 0xa1
   2ca1c:	e3a03001 	mov	r3, #1
   2ca20:	ebffb04f 	bl	18b64 <DWHCIDeviceControlMessage>
   2ca24:	e1a03000 	mov	r3, r0
   2ca28:	e3530000 	cmp	r3, #0
   2ca2c:	da000001 	ble	2ca38 <USBGamePadDeviceGetReport+0xa0>
                       REQUEST_IN | REQUEST_CLASS | REQUEST_TO_INTERFACE,
                       GET_REPORT, (REPORT_TYPE_INPUT << 8) | 0x00,
                       pThis->m_ucInterfaceNumber,
                       pThis->m_pReportBuffer, pThis->m_nReportSize) > 0)
    {
        USBGamePadDeviceDecodeReport (pThis);
   2ca30:	e51b0010 	ldr	r0, [fp, #-16]
   2ca34:	ebfffbbf 	bl	2b938 <USBGamePadDeviceDecodeReport>
   2ca38:	e1a03004 	mov	r3, r4
   2ca3c:	e30c0998 	movw	r0, #51608	; 0xc998
   2ca40:	e3400002 	movt	r0, #2
   2ca44:	e1a01003 	mov	r1, r3
   2ca48:	ebffa385 	bl	15864 <__cyg_profile_func_exit>
    }
}
   2ca4c:	e24bd00c 	sub	sp, fp, #12
   2ca50:	e8bd8830 	pop	{r4, r5, fp, pc}

0002ca54 <USBGamePadDevicePS3Configure>:

void USBGamePadDevicePS3Configure (TUSBGamePadDevice *pThis)
{
   2ca54:	e92d4830 	push	{r4, r5, fp, lr}
   2ca58:	e28db00c 	add	fp, sp, #12
   2ca5c:	e24dd018 	sub	sp, sp, #24
   2ca60:	e1a0400e 	mov	r4, lr
   2ca64:	e50b0010 	str	r0, [fp, #-16]
   2ca68:	e1a03004 	mov	r3, r4
   2ca6c:	e30c0a54 	movw	r0, #51796	; 0xca54
   2ca70:	e3400002 	movt	r0, #2
   2ca74:	e1a01003 	mov	r1, r3
   2ca78:	ebffa327 	bl	1571c <__cyg_profile_func_enter>
        0x04, // LED3
        0x08, // LED4
    };

    /* Special PS3 Controller enable commands */
    pThis->m_pReportBuffer[0] = 0x42;
   2ca7c:	e51b3010 	ldr	r3, [fp, #-16]
   2ca80:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
   2ca84:	e3a02042 	mov	r2, #66	; 0x42
   2ca88:	e5c32000 	strb	r2, [r3]
    pThis->m_pReportBuffer[1] = 0x0c;
   2ca8c:	e51b3010 	ldr	r3, [fp, #-16]
   2ca90:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
   2ca94:	e2833001 	add	r3, r3, #1
   2ca98:	e3a0200c 	mov	r2, #12
   2ca9c:	e5c32000 	strb	r2, [r3]
    pThis->m_pReportBuffer[2] = 0x00;
   2caa0:	e51b3010 	ldr	r3, [fp, #-16]
   2caa4:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
   2caa8:	e2833002 	add	r3, r3, #2
   2caac:	e3a02000 	mov	r2, #0
   2cab0:	e5c32000 	strb	r2, [r3]
    pThis->m_pReportBuffer[3] = 0x00;
   2cab4:	e51b3010 	ldr	r3, [fp, #-16]
   2cab8:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
   2cabc:	e2833003 	add	r3, r3, #3
   2cac0:	e3a02000 	mov	r2, #0
   2cac4:	e5c32000 	strb	r2, [r3]
    DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2cac8:	e51b3010 	ldr	r3, [fp, #-16]
   2cacc:	e1a00003 	mov	r0, r3
   2cad0:	ebffcd4b 	bl	20004 <USBDeviceGetHost>
   2cad4:	e1a05000 	mov	r5, r0
                           USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   2cad8:	e51b3010 	ldr	r3, [fp, #-16]
   2cadc:	e1a00003 	mov	r0, r3
   2cae0:	ebffcd1f 	bl	1ff64 <USBDeviceGetEndpoint0>
   2cae4:	e1a0c000 	mov	ip, r0
                           REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_INTERFACE,
                           SET_REPORT, (REPORT_TYPE_FEATURE << 8) | 0xf4,
                           pThis->m_ucInterfaceNumber,
   2cae8:	e51b3010 	ldr	r3, [fp, #-16]
   2caec:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
    /* Special PS3 Controller enable commands */
    pThis->m_pReportBuffer[0] = 0x42;
    pThis->m_pReportBuffer[1] = 0x0c;
    pThis->m_pReportBuffer[2] = 0x00;
    pThis->m_pReportBuffer[3] = 0x00;
    DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2caf0:	e6ff2073 	uxth	r2, r3
                           USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
                           REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_INTERFACE,
                           SET_REPORT, (REPORT_TYPE_FEATURE << 8) | 0xf4,
                           pThis->m_ucInterfaceNumber,
                           pThis->m_pReportBuffer, 4);
   2caf4:	e51b3010 	ldr	r3, [fp, #-16]
   2caf8:	e59330c8 	ldr	r3, [r3, #200]	; 0xc8
    /* Special PS3 Controller enable commands */
    pThis->m_pReportBuffer[0] = 0x42;
    pThis->m_pReportBuffer[1] = 0x0c;
    pThis->m_pReportBuffer[2] = 0x00;
    pThis->m_pReportBuffer[3] = 0x00;
    DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2cafc:	e3a01ffd 	mov	r1, #1012	; 0x3f4
   2cb00:	e58d1000 	str	r1, [sp]
   2cb04:	e58d2004 	str	r2, [sp, #4]
   2cb08:	e58d3008 	str	r3, [sp, #8]
   2cb0c:	e3a03004 	mov	r3, #4
   2cb10:	e58d300c 	str	r3, [sp, #12]
   2cb14:	e1a00005 	mov	r0, r5
   2cb18:	e1a0100c 	mov	r1, ip
   2cb1c:	e3a02021 	mov	r2, #33	; 0x21
   2cb20:	e3a03009 	mov	r3, #9
   2cb24:	ebffb00e 	bl	18b64 <DWHCIDeviceControlMessage>
                           SET_REPORT, (REPORT_TYPE_FEATURE << 8) | 0xf4,
                           pThis->m_ucInterfaceNumber,
                           pThis->m_pReportBuffer, 4);

    /* Turn on LED */
    writeBuf[9] |= (u8)(leds[pThis->m_nDeviceIndex] << 1);
   2cb28:	e3003c5c 	movw	r3, #3164	; 0xc5c
   2cb2c:	e3403003 	movt	r3, #3
   2cb30:	e5d32009 	ldrb	r2, [r3, #9]
   2cb34:	e51b3010 	ldr	r3, [fp, #-16]
   2cb38:	e5931038 	ldr	r1, [r3, #56]	; 0x38
   2cb3c:	e3003c8c 	movw	r3, #3212	; 0xc8c
   2cb40:	e3403003 	movt	r3, #3
   2cb44:	e7d33001 	ldrb	r3, [r3, r1]
   2cb48:	e1a03083 	lsl	r3, r3, #1
   2cb4c:	e6ef3073 	uxtb	r3, r3
   2cb50:	e1823003 	orr	r3, r2, r3
   2cb54:	e6ef2073 	uxtb	r2, r3
   2cb58:	e3003c5c 	movw	r3, #3164	; 0xc5c
   2cb5c:	e3403003 	movt	r3, #3
   2cb60:	e5c32009 	strb	r2, [r3, #9]
    DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2cb64:	e51b3010 	ldr	r3, [fp, #-16]
   2cb68:	e1a00003 	mov	r0, r3
   2cb6c:	ebffcd24 	bl	20004 <USBDeviceGetHost>
   2cb70:	e1a05000 	mov	r5, r0
                           USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
   2cb74:	e51b3010 	ldr	r3, [fp, #-16]
   2cb78:	e1a00003 	mov	r0, r3
   2cb7c:	ebffccf8 	bl	1ff64 <USBDeviceGetEndpoint0>
   2cb80:	e1a01000 	mov	r1, r0
                           REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_INTERFACE,
                           SET_REPORT, (REPORT_TYPE_OUTPUT << 8) | 0x01,
                           pThis->m_ucInterfaceNumber,
   2cb84:	e51b3010 	ldr	r3, [fp, #-16]
   2cb88:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
                           pThis->m_ucInterfaceNumber,
                           pThis->m_pReportBuffer, 4);

    /* Turn on LED */
    writeBuf[9] |= (u8)(leds[pThis->m_nDeviceIndex] << 1);
    DWHCIDeviceControlMessage (USBDeviceGetHost (&pThis->m_USBDevice),
   2cb8c:	e6ff3073 	uxth	r3, r3
   2cb90:	e3002201 	movw	r2, #513	; 0x201
   2cb94:	e58d2000 	str	r2, [sp]
   2cb98:	e58d3004 	str	r3, [sp, #4]
   2cb9c:	e3003c5c 	movw	r3, #3164	; 0xc5c
   2cba0:	e3403003 	movt	r3, #3
   2cba4:	e58d3008 	str	r3, [sp, #8]
   2cba8:	e3a03030 	mov	r3, #48	; 0x30
   2cbac:	e58d300c 	str	r3, [sp, #12]
   2cbb0:	e1a00005 	mov	r0, r5
   2cbb4:	e3a02021 	mov	r2, #33	; 0x21
   2cbb8:	e3a03009 	mov	r3, #9
   2cbbc:	ebffafe8 	bl	18b64 <DWHCIDeviceControlMessage>
   2cbc0:	e1a03004 	mov	r3, r4
   2cbc4:	e30c0a54 	movw	r0, #51796	; 0xca54
   2cbc8:	e3400002 	movt	r0, #2
   2cbcc:	e1a01003 	mov	r1, r3
   2cbd0:	ebffa323 	bl	15864 <__cyg_profile_func_exit>
                           USBDeviceGetEndpoint0 (&pThis->m_USBDevice),
                           REQUEST_OUT | REQUEST_CLASS | REQUEST_TO_INTERFACE,
                           SET_REPORT, (REPORT_TYPE_OUTPUT << 8) | 0x01,
                           pThis->m_ucInterfaceNumber,
                           writeBuf, 48);
}
   2cbd4:	e24bd00c 	sub	sp, fp, #12
   2cbd8:	e8bd8830 	pop	{r4, r5, fp, pc}

0002cbdc <uspi_EnterCritical>:

static volatile unsigned s_nCriticalLevel = 0;
static volatile boolean s_bWereEnabled;

void uspi_EnterCritical (void)
{
   2cbdc:	e92d4810 	push	{r4, fp, lr}
   2cbe0:	e28db008 	add	fp, sp, #8
   2cbe4:	e24dd00c 	sub	sp, sp, #12
   2cbe8:	e1a0400e 	mov	r4, lr
   2cbec:	e1a03004 	mov	r3, r4
   2cbf0:	e30c0bdc 	movw	r0, #52188	; 0xcbdc
   2cbf4:	e3400002 	movt	r0, #2
   2cbf8:	e1a01003 	mov	r1, r3
   2cbfc:	ebffa2c6 	bl	1571c <__cyg_profile_func_enter>
	u32 nFlags;
	asm volatile ("mrs %0, cpsr" : "=r" (nFlags));
   2cc00:	e10f3000 	mrs	r3, CPSR
   2cc04:	e50b3010 	str	r3, [fp, #-16]

	DisableInterrupts ();
   2cc08:	f10c0080 	cpsid	i

	if (s_nCriticalLevel++ == 0)
   2cc0c:	e30b30d4 	movw	r3, #45268	; 0xb0d4
   2cc10:	e3403003 	movt	r3, #3
   2cc14:	e5932000 	ldr	r2, [r3]
   2cc18:	e2821001 	add	r1, r2, #1
   2cc1c:	e30b30d4 	movw	r3, #45268	; 0xb0d4
   2cc20:	e3403003 	movt	r3, #3
   2cc24:	e5831000 	str	r1, [r3]
   2cc28:	e3520000 	cmp	r2, #0
   2cc2c:	1a000009 	bne	2cc58 <uspi_EnterCritical+0x7c>
	{
		s_bWereEnabled = nFlags & 0x80 ? FALSE : TRUE;
   2cc30:	e51b3010 	ldr	r3, [fp, #-16]
   2cc34:	e2033080 	and	r3, r3, #128	; 0x80
   2cc38:	e3530000 	cmp	r3, #0
   2cc3c:	03a03001 	moveq	r3, #1
   2cc40:	13a03000 	movne	r3, #0
   2cc44:	e6ef3073 	uxtb	r3, r3
   2cc48:	e1a02003 	mov	r2, r3
   2cc4c:	e30b30d8 	movw	r3, #45272	; 0xb0d8
   2cc50:	e3403003 	movt	r3, #3
   2cc54:	e5832000 	str	r2, [r3]
	}

	DataMemBarrier ();
   2cc58:	f57ff05f 	dmb	sy
   2cc5c:	e1a03004 	mov	r3, r4
   2cc60:	e30c0bdc 	movw	r0, #52188	; 0xcbdc
   2cc64:	e3400002 	movt	r0, #2
   2cc68:	e1a01003 	mov	r1, r3
   2cc6c:	ebffa2fc 	bl	15864 <__cyg_profile_func_exit>
}
   2cc70:	e24bd008 	sub	sp, fp, #8
   2cc74:	e8bd8810 	pop	{r4, fp, pc}

0002cc78 <uspi_LeaveCritical>:

void uspi_LeaveCritical (void)
{
   2cc78:	e92d4818 	push	{r3, r4, fp, lr}
   2cc7c:	e28db00c 	add	fp, sp, #12
   2cc80:	e1a0400e 	mov	r4, lr
   2cc84:	e1a03004 	mov	r3, r4
   2cc88:	e30c0c78 	movw	r0, #52344	; 0xcc78
   2cc8c:	e3400002 	movt	r0, #2
   2cc90:	e1a01003 	mov	r1, r3
   2cc94:	ebffa2a0 	bl	1571c <__cyg_profile_func_enter>
	DataMemBarrier ();
   2cc98:	f57ff05f 	dmb	sy

	assert (s_nCriticalLevel > 0);
   2cc9c:	e30b30d4 	movw	r3, #45268	; 0xb0d4
   2cca0:	e3403003 	movt	r3, #3
   2cca4:	e5933000 	ldr	r3, [r3]
   2cca8:	e3530000 	cmp	r3, #0
   2ccac:	1a000005 	bne	2ccc8 <uspi_LeaveCritical+0x50>
   2ccb0:	e3000934 	movw	r0, #2356	; 0x934
   2ccb4:	e3400003 	movt	r0, #3
   2ccb8:	e300194c 	movw	r1, #2380	; 0x94c
   2ccbc:	e3401003 	movt	r1, #3
   2ccc0:	e3a02031 	mov	r2, #49	; 0x31
   2ccc4:	ebffa739 	bl	169b0 <uspi_assertion_failed>
	if (--s_nCriticalLevel == 0)
   2ccc8:	e30b30d4 	movw	r3, #45268	; 0xb0d4
   2cccc:	e3403003 	movt	r3, #3
   2ccd0:	e5933000 	ldr	r3, [r3]
   2ccd4:	e2432001 	sub	r2, r3, #1
   2ccd8:	e30b30d4 	movw	r3, #45268	; 0xb0d4
   2ccdc:	e3403003 	movt	r3, #3
   2cce0:	e5832000 	str	r2, [r3]
   2cce4:	e3520000 	cmp	r2, #0
   2cce8:	1a000005 	bne	2cd04 <uspi_LeaveCritical+0x8c>
	{
		if (s_bWereEnabled)
   2ccec:	e30b30d8 	movw	r3, #45272	; 0xb0d8
   2ccf0:	e3403003 	movt	r3, #3
   2ccf4:	e5933000 	ldr	r3, [r3]
   2ccf8:	e3530000 	cmp	r3, #0
   2ccfc:	0a000000 	beq	2cd04 <uspi_LeaveCritical+0x8c>
		{
			EnableInterrupts ();
   2cd00:	f1080080 	cpsie	i
   2cd04:	e1a03004 	mov	r3, r4
   2cd08:	e30c0c78 	movw	r0, #52344	; 0xcc78
   2cd0c:	e3400002 	movt	r0, #2
   2cd10:	e1a01003 	mov	r1, r3
   2cd14:	ebffa2d2 	bl	15864 <__cyg_profile_func_exit>
		}
	}
}
   2cd18:	e8bd8818 	pop	{r3, r4, fp, pc}

0002cd1c <uspi_CleanAndInvalidateDataCacheRange>:
#define L1_DATA_CACHE_LINE_LENGTH	64
#define L2_CACHE_LINE_LENGTH		64
#define DATA_CACHE_LINE_LENGTH_MIN	64		// min(L1_DATA_CACHE_LINE_LENGTH, L2_CACHE_LINE_LENGTH)

void uspi_CleanAndInvalidateDataCacheRange (u32 nAddress, u32 nLength)
{
   2cd1c:	e92d4070 	push	{r4, r5, r6, lr}
   2cd20:	e1a04000 	mov	r4, r0
   2cd24:	e30c0d1c 	movw	r0, #52508	; 0xcd1c
   2cd28:	e1a05001 	mov	r5, r1
   2cd2c:	e3400002 	movt	r0, #2
   2cd30:	e1a0100e 	mov	r1, lr
   2cd34:	e1a0600e 	mov	r6, lr
   2cd38:	ebffa277 	bl	1571c <__cyg_profile_func_enter>
	nLength += DATA_CACHE_LINE_LENGTH_MIN;

	while (1)
	{
		__asm volatile ("mcr p15, 0, %0, c7, c14,  1" : : "r" (nAddress) : "memory");	// DCCIMVAC
   2cd3c:	ee074f3e 	mcr	15, 0, r4, cr7, cr14, {1}
#define L2_CACHE_LINE_LENGTH		64
#define DATA_CACHE_LINE_LENGTH_MIN	64		// min(L1_DATA_CACHE_LINE_LENGTH, L2_CACHE_LINE_LENGTH)

void uspi_CleanAndInvalidateDataCacheRange (u32 nAddress, u32 nLength)
{
	nLength += DATA_CACHE_LINE_LENGTH_MIN;
   2cd40:	e2853040 	add	r3, r5, #64	; 0x40

	while (1)
	{
		__asm volatile ("mcr p15, 0, %0, c7, c14,  1" : : "r" (nAddress) : "memory");	// DCCIMVAC

		if (nLength < DATA_CACHE_LINE_LENGTH_MIN)
   2cd44:	e353003f 	cmp	r3, #63	; 0x3f
   2cd48:	83c5303f 	bichi	r3, r5, #63	; 0x3f
   2cd4c:	82840040 	addhi	r0, r4, #64	; 0x40
   2cd50:	80803003 	addhi	r3, r0, r3
   2cd54:	9a000003 	bls	2cd68 <uspi_CleanAndInvalidateDataCacheRange+0x4c>
{
	nLength += DATA_CACHE_LINE_LENGTH_MIN;

	while (1)
	{
		__asm volatile ("mcr p15, 0, %0, c7, c14,  1" : : "r" (nAddress) : "memory");	// DCCIMVAC
   2cd58:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}

		if (nLength < DATA_CACHE_LINE_LENGTH_MIN)
   2cd5c:	e1500003 	cmp	r0, r3
   2cd60:	e2800040 	add	r0, r0, #64	; 0x40
   2cd64:	1afffffb 	bne	2cd58 <uspi_CleanAndInvalidateDataCacheRange+0x3c>
   2cd68:	e30c0d1c 	movw	r0, #52508	; 0xcd1c
   2cd6c:	e1a01006 	mov	r1, r6
   2cd70:	e3400002 	movt	r0, #2
		}

		nAddress += DATA_CACHE_LINE_LENGTH_MIN;
		nLength  -= DATA_CACHE_LINE_LENGTH_MIN;
	}
}
   2cd74:	e8bd4070 	pop	{r4, r5, r6, lr}
   2cd78:	eaffa2b9 	b	15864 <__cyg_profile_func_exit>

0002cd7c <USBString>:
#define USBSTR_MIN_LENGTH	4

#define USBSTR_DEFAULT_LANGID	0x409

void USBString (TUSBString *pThis, struct TUSBDevice *pDevice)
{
   2cd7c:	e92d4810 	push	{r4, fp, lr}
   2cd80:	e28db008 	add	fp, sp, #8
   2cd84:	e24dd00c 	sub	sp, sp, #12
   2cd88:	e1a0400e 	mov	r4, lr
   2cd8c:	e50b0010 	str	r0, [fp, #-16]
   2cd90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2cd94:	e1a03004 	mov	r3, r4
   2cd98:	e30c0d7c 	movw	r0, #52604	; 0xcd7c
   2cd9c:	e3400002 	movt	r0, #2
   2cda0:	e1a01003 	mov	r1, r3
   2cda4:	ebffa25c 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2cda8:	e51b3010 	ldr	r3, [fp, #-16]
   2cdac:	e3530000 	cmp	r3, #0
   2cdb0:	1a000005 	bne	2cdcc <USBString+0x50>
   2cdb4:	e30009ac 	movw	r0, #2476	; 0x9ac
   2cdb8:	e3400003 	movt	r0, #3
   2cdbc:	e30019b8 	movw	r1, #2488	; 0x9b8
   2cdc0:	e3401003 	movt	r1, #3
   2cdc4:	e3a02021 	mov	r2, #33	; 0x21
   2cdc8:	ebffa6f8 	bl	169b0 <uspi_assertion_failed>

	pThis->m_pDevice = pDevice;
   2cdcc:	e51b3010 	ldr	r3, [fp, #-16]
   2cdd0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2cdd4:	e5832000 	str	r2, [r3]
	assert (pThis->m_pDevice != 0);
   2cdd8:	e51b3010 	ldr	r3, [fp, #-16]
   2cddc:	e5933000 	ldr	r3, [r3]
   2cde0:	e3530000 	cmp	r3, #0
   2cde4:	1a000005 	bne	2ce00 <USBString+0x84>
   2cde8:	e3000a18 	movw	r0, #2584	; 0xa18
   2cdec:	e3400003 	movt	r0, #3
   2cdf0:	e30019b8 	movw	r1, #2488	; 0x9b8
   2cdf4:	e3401003 	movt	r1, #3
   2cdf8:	e3a02024 	mov	r2, #36	; 0x24
   2cdfc:	ebffa6eb 	bl	169b0 <uspi_assertion_failed>

	pThis->m_pUSBString = 0;
   2ce00:	e51b3010 	ldr	r3, [fp, #-16]
   2ce04:	e3a02000 	mov	r2, #0
   2ce08:	e5832004 	str	r2, [r3, #4]

	pThis->m_pString = malloc (sizeof (TString));
   2ce0c:	e3a0000c 	mov	r0, #12
   2ce10:	ebffa710 	bl	16a58 <malloc>
   2ce14:	e1a03000 	mov	r3, r0
   2ce18:	e1a02003 	mov	r2, r3
   2ce1c:	e51b3010 	ldr	r3, [fp, #-16]
   2ce20:	e5832008 	str	r2, [r3, #8]
	assert (pThis->m_pString != 0);
   2ce24:	e51b3010 	ldr	r3, [fp, #-16]
   2ce28:	e5933008 	ldr	r3, [r3, #8]
   2ce2c:	e3530000 	cmp	r3, #0
   2ce30:	1a000005 	bne	2ce4c <USBString+0xd0>
   2ce34:	e3000a30 	movw	r0, #2608	; 0xa30
   2ce38:	e3400003 	movt	r0, #3
   2ce3c:	e30019b8 	movw	r1, #2488	; 0x9b8
   2ce40:	e3401003 	movt	r1, #3
   2ce44:	e3a02029 	mov	r2, #41	; 0x29
   2ce48:	ebffa6d8 	bl	169b0 <uspi_assertion_failed>
	String (pThis->m_pString);
   2ce4c:	e51b3010 	ldr	r3, [fp, #-16]
   2ce50:	e5933008 	ldr	r3, [r3, #8]
   2ce54:	e1a00003 	mov	r0, r3
   2ce58:	ebffdfda 	bl	24dc8 <String>
   2ce5c:	e1a03004 	mov	r3, r4
   2ce60:	e30c0d7c 	movw	r0, #52604	; 0xcd7c
   2ce64:	e3400002 	movt	r0, #2
   2ce68:	e1a01003 	mov	r1, r3
   2ce6c:	ebffa27c 	bl	15864 <__cyg_profile_func_exit>
}
   2ce70:	e24bd008 	sub	sp, fp, #8
   2ce74:	e8bd8810 	pop	{r4, fp, pc}

0002ce78 <USBStringCopy>:

void USBStringCopy (TUSBString *pThis, TUSBString *pParent)
{
   2ce78:	e92d4830 	push	{r4, r5, fp, lr}
   2ce7c:	e28db00c 	add	fp, sp, #12
   2ce80:	e24dd008 	sub	sp, sp, #8
   2ce84:	e1a0500e 	mov	r5, lr
   2ce88:	e50b0010 	str	r0, [fp, #-16]
   2ce8c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2ce90:	e1a03005 	mov	r3, r5
   2ce94:	e30c0e78 	movw	r0, #52856	; 0xce78
   2ce98:	e3400002 	movt	r0, #2
   2ce9c:	e1a01003 	mov	r1, r3
   2cea0:	ebffa21d 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2cea4:	e51b3010 	ldr	r3, [fp, #-16]
   2cea8:	e3530000 	cmp	r3, #0
   2ceac:	1a000005 	bne	2cec8 <USBStringCopy+0x50>
   2ceb0:	e30009ac 	movw	r0, #2476	; 0x9ac
   2ceb4:	e3400003 	movt	r0, #3
   2ceb8:	e30019b8 	movw	r1, #2488	; 0x9b8
   2cebc:	e3401003 	movt	r1, #3
   2cec0:	e3a0202f 	mov	r2, #47	; 0x2f
   2cec4:	ebffa6b9 	bl	169b0 <uspi_assertion_failed>
	assert (pParent != 0);
   2cec8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2cecc:	e3530000 	cmp	r3, #0
   2ced0:	1a000005 	bne	2ceec <USBStringCopy+0x74>
   2ced4:	e3000a48 	movw	r0, #2632	; 0xa48
   2ced8:	e3400003 	movt	r0, #3
   2cedc:	e30019b8 	movw	r1, #2488	; 0x9b8
   2cee0:	e3401003 	movt	r1, #3
   2cee4:	e3a02030 	mov	r2, #48	; 0x30
   2cee8:	ebffa6b0 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pDevice = pParent->m_pDevice;
   2ceec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2cef0:	e5932000 	ldr	r2, [r3]
   2cef4:	e51b3010 	ldr	r3, [fp, #-16]
   2cef8:	e5832000 	str	r2, [r3]

	pThis->m_pUSBString = 0;
   2cefc:	e51b3010 	ldr	r3, [fp, #-16]
   2cf00:	e3a02000 	mov	r2, #0
   2cf04:	e5832004 	str	r2, [r3, #4]
	if (pParent->m_pUSBString != 0)
   2cf08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2cf0c:	e5933004 	ldr	r3, [r3, #4]
   2cf10:	e3530000 	cmp	r3, #0
   2cf14:	0a00001d 	beq	2cf90 <USBStringCopy+0x118>
	{
		pThis->m_pUSBString = (TUSBStringDescriptor *) malloc (pParent->m_pUSBString->bLength);
   2cf18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2cf1c:	e5933004 	ldr	r3, [r3, #4]
   2cf20:	e5d33000 	ldrb	r3, [r3]
   2cf24:	e1a00003 	mov	r0, r3
   2cf28:	ebffa6ca 	bl	16a58 <malloc>
   2cf2c:	e1a03000 	mov	r3, r0
   2cf30:	e1a02003 	mov	r2, r3
   2cf34:	e51b3010 	ldr	r3, [fp, #-16]
   2cf38:	e5832004 	str	r2, [r3, #4]
		assert (pThis->m_pUSBString != 0);
   2cf3c:	e51b3010 	ldr	r3, [fp, #-16]
   2cf40:	e5933004 	ldr	r3, [r3, #4]
   2cf44:	e3530000 	cmp	r3, #0
   2cf48:	1a000005 	bne	2cf64 <USBStringCopy+0xec>
   2cf4c:	e3000a58 	movw	r0, #2648	; 0xa58
   2cf50:	e3400003 	movt	r0, #3
   2cf54:	e30019b8 	movw	r1, #2488	; 0x9b8
   2cf58:	e3401003 	movt	r1, #3
   2cf5c:	e3a02037 	mov	r2, #55	; 0x37
   2cf60:	ebffa692 	bl	169b0 <uspi_assertion_failed>
		memcpy (pThis->m_pUSBString, pParent->m_pUSBString, pParent->m_pUSBString->bLength);
   2cf64:	e51b3010 	ldr	r3, [fp, #-16]
   2cf68:	e5931004 	ldr	r1, [r3, #4]
   2cf6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2cf70:	e5932004 	ldr	r2, [r3, #4]
   2cf74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2cf78:	e5933004 	ldr	r3, [r3, #4]
   2cf7c:	e5d33000 	ldrb	r3, [r3]
   2cf80:	e1a00001 	mov	r0, r1
   2cf84:	e1a01002 	mov	r1, r2
   2cf88:	e1a02003 	mov	r2, r3
   2cf8c:	ebffe452 	bl	260dc <uspi_memcpy>
	}

	assert (pParent->m_pString != 0);
   2cf90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2cf94:	e5933008 	ldr	r3, [r3, #8]
   2cf98:	e3530000 	cmp	r3, #0
   2cf9c:	1a000005 	bne	2cfb8 <USBStringCopy+0x140>
   2cfa0:	e3000a74 	movw	r0, #2676	; 0xa74
   2cfa4:	e3400003 	movt	r0, #3
   2cfa8:	e30019b8 	movw	r1, #2488	; 0x9b8
   2cfac:	e3401003 	movt	r1, #3
   2cfb0:	e3a0203b 	mov	r2, #59	; 0x3b
   2cfb4:	ebffa67d 	bl	169b0 <uspi_assertion_failed>
	pThis->m_pString = (TString *) malloc (sizeof (TString));
   2cfb8:	e3a0000c 	mov	r0, #12
   2cfbc:	ebffa6a5 	bl	16a58 <malloc>
   2cfc0:	e1a03000 	mov	r3, r0
   2cfc4:	e1a02003 	mov	r2, r3
   2cfc8:	e51b3010 	ldr	r3, [fp, #-16]
   2cfcc:	e5832008 	str	r2, [r3, #8]
	assert (pThis->m_pString != 0);
   2cfd0:	e51b3010 	ldr	r3, [fp, #-16]
   2cfd4:	e5933008 	ldr	r3, [r3, #8]
   2cfd8:	e3530000 	cmp	r3, #0
   2cfdc:	1a000005 	bne	2cff8 <USBStringCopy+0x180>
   2cfe0:	e3000a30 	movw	r0, #2608	; 0xa30
   2cfe4:	e3400003 	movt	r0, #3
   2cfe8:	e30019b8 	movw	r1, #2488	; 0x9b8
   2cfec:	e3401003 	movt	r1, #3
   2cff0:	e3a0203d 	mov	r2, #61	; 0x3d
   2cff4:	ebffa66d 	bl	169b0 <uspi_assertion_failed>
	String2 (pThis->m_pString, StringGet (pParent->m_pString));
   2cff8:	e51b3010 	ldr	r3, [fp, #-16]
   2cffc:	e5934008 	ldr	r4, [r3, #8]
   2d000:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2d004:	e5933008 	ldr	r3, [r3, #8]
   2d008:	e1a00003 	mov	r0, r3
   2d00c:	ebffdfe0 	bl	24f94 <StringGet>
   2d010:	e1a03000 	mov	r3, r0
   2d014:	e1a00004 	mov	r0, r4
   2d018:	e1a01003 	mov	r1, r3
   2d01c:	ebffdf89 	bl	24e48 <String2>
   2d020:	e1a03005 	mov	r3, r5
   2d024:	e30c0e78 	movw	r0, #52856	; 0xce78
   2d028:	e3400002 	movt	r0, #2
   2d02c:	e1a01003 	mov	r1, r3
   2d030:	ebffa20b 	bl	15864 <__cyg_profile_func_exit>
}
   2d034:	e24bd00c 	sub	sp, fp, #12
   2d038:	e8bd8830 	pop	{r4, r5, fp, pc}

0002d03c <_USBString>:

void _USBString (TUSBString *pThis)
{
   2d03c:	e92d4810 	push	{r4, fp, lr}
   2d040:	e28db008 	add	fp, sp, #8
   2d044:	e24dd00c 	sub	sp, sp, #12
   2d048:	e1a0400e 	mov	r4, lr
   2d04c:	e50b0010 	str	r0, [fp, #-16]
   2d050:	e1a03004 	mov	r3, r4
   2d054:	e30d003c 	movw	r0, #53308	; 0xd03c
   2d058:	e3400002 	movt	r0, #2
   2d05c:	e1a01003 	mov	r1, r3
   2d060:	ebffa1ad 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2d064:	e51b3010 	ldr	r3, [fp, #-16]
   2d068:	e3530000 	cmp	r3, #0
   2d06c:	1a000005 	bne	2d088 <_USBString+0x4c>
   2d070:	e30009ac 	movw	r0, #2476	; 0x9ac
   2d074:	e3400003 	movt	r0, #3
   2d078:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d07c:	e3401003 	movt	r1, #3
   2d080:	e3a02043 	mov	r2, #67	; 0x43
   2d084:	ebffa649 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pString != 0);
   2d088:	e51b3010 	ldr	r3, [fp, #-16]
   2d08c:	e5933008 	ldr	r3, [r3, #8]
   2d090:	e3530000 	cmp	r3, #0
   2d094:	1a000005 	bne	2d0b0 <_USBString+0x74>
   2d098:	e3000a30 	movw	r0, #2608	; 0xa30
   2d09c:	e3400003 	movt	r0, #3
   2d0a0:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d0a4:	e3401003 	movt	r1, #3
   2d0a8:	e3a02045 	mov	r2, #69	; 0x45
   2d0ac:	ebffa63f 	bl	169b0 <uspi_assertion_failed>
	_String (pThis->m_pString);
   2d0b0:	e51b3010 	ldr	r3, [fp, #-16]
   2d0b4:	e5933008 	ldr	r3, [r3, #8]
   2d0b8:	e1a00003 	mov	r0, r3
   2d0bc:	ebffdf8f 	bl	24f00 <_String>
	free (pThis->m_pString);
   2d0c0:	e51b3010 	ldr	r3, [fp, #-16]
   2d0c4:	e5933008 	ldr	r3, [r3, #8]
   2d0c8:	e1a00003 	mov	r0, r3
   2d0cc:	ebffa677 	bl	16ab0 <free>
	pThis->m_pString = 0;
   2d0d0:	e51b3010 	ldr	r3, [fp, #-16]
   2d0d4:	e3a02000 	mov	r2, #0
   2d0d8:	e5832008 	str	r2, [r3, #8]

	if (pThis->m_pUSBString != 0)
   2d0dc:	e51b3010 	ldr	r3, [fp, #-16]
   2d0e0:	e5933004 	ldr	r3, [r3, #4]
   2d0e4:	e3530000 	cmp	r3, #0
   2d0e8:	0a000006 	beq	2d108 <_USBString+0xcc>
	{
		free (pThis->m_pUSBString);
   2d0ec:	e51b3010 	ldr	r3, [fp, #-16]
   2d0f0:	e5933004 	ldr	r3, [r3, #4]
   2d0f4:	e1a00003 	mov	r0, r3
   2d0f8:	ebffa66c 	bl	16ab0 <free>
		pThis->m_pUSBString = 0;
   2d0fc:	e51b3010 	ldr	r3, [fp, #-16]
   2d100:	e3a02000 	mov	r2, #0
   2d104:	e5832004 	str	r2, [r3, #4]
	}

	pThis->m_pDevice = 0;
   2d108:	e51b3010 	ldr	r3, [fp, #-16]
   2d10c:	e3a02000 	mov	r2, #0
   2d110:	e5832000 	str	r2, [r3]
   2d114:	e1a03004 	mov	r3, r4
   2d118:	e30d003c 	movw	r0, #53308	; 0xd03c
   2d11c:	e3400002 	movt	r0, #2
   2d120:	e1a01003 	mov	r1, r3
   2d124:	ebffa1ce 	bl	15864 <__cyg_profile_func_exit>
}
   2d128:	e24bd008 	sub	sp, fp, #8
   2d12c:	e8bd8810 	pop	{r4, fp, pc}

0002d130 <USBStringGetFromDescriptor>:

boolean USBStringGetFromDescriptor (TUSBString *pThis, u8 ucID, u16 usLanguageID)
{
   2d130:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d134:	e28db020 	add	fp, sp, #32
   2d138:	e24dd034 	sub	sp, sp, #52	; 0x34
   2d13c:	e1a0800e 	mov	r8, lr
   2d140:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
   2d144:	e1a03002 	mov	r3, r2
   2d148:	e1a02001 	mov	r2, r1
   2d14c:	e54b2041 	strb	r2, [fp, #-65]	; 0xffffffbf
   2d150:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
   2d154:	e1a03008 	mov	r3, r8
   2d158:	e30d0130 	movw	r0, #53552	; 0xd130
   2d15c:	e3400002 	movt	r0, #2
   2d160:	e1a01003 	mov	r1, r3
   2d164:	ebffa16c 	bl	1571c <__cyg_profile_func_enter>
   2d168:	e1a0300d 	mov	r3, sp
   2d16c:	e1a09003 	mov	r9, r3
	assert (pThis != 0);
   2d170:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d174:	e3530000 	cmp	r3, #0
   2d178:	1a000005 	bne	2d194 <USBStringGetFromDescriptor+0x64>
   2d17c:	e30009ac 	movw	r0, #2476	; 0x9ac
   2d180:	e3400003 	movt	r0, #3
   2d184:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d188:	e3401003 	movt	r1, #3
   2d18c:	e3a02055 	mov	r2, #85	; 0x55
   2d190:	ebffa606 	bl	169b0 <uspi_assertion_failed>
	assert (ucID > 0);
   2d194:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
   2d198:	e3530000 	cmp	r3, #0
   2d19c:	1a000005 	bne	2d1b8 <USBStringGetFromDescriptor+0x88>
   2d1a0:	e3000a8c 	movw	r0, #2700	; 0xa8c
   2d1a4:	e3400003 	movt	r0, #3
   2d1a8:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d1ac:	e3401003 	movt	r1, #3
   2d1b0:	e3a02056 	mov	r2, #86	; 0x56
   2d1b4:	ebffa5fd 	bl	169b0 <uspi_assertion_failed>

	if (pThis->m_pUSBString != 0)
   2d1b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d1bc:	e5933004 	ldr	r3, [r3, #4]
   2d1c0:	e3530000 	cmp	r3, #0
   2d1c4:	0a000003 	beq	2d1d8 <USBStringGetFromDescriptor+0xa8>
	{
		free (pThis->m_pUSBString);
   2d1c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d1cc:	e5933004 	ldr	r3, [r3, #4]
   2d1d0:	e1a00003 	mov	r0, r3
   2d1d4:	ebffa635 	bl	16ab0 <free>
	}
	pThis->m_pUSBString = (TUSBStringDescriptor *) malloc (USBSTR_MIN_LENGTH);
   2d1d8:	e3a00004 	mov	r0, #4
   2d1dc:	ebffa61d 	bl	16a58 <malloc>
   2d1e0:	e1a03000 	mov	r3, r0
   2d1e4:	e1a02003 	mov	r2, r3
   2d1e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d1ec:	e5832004 	str	r2, [r3, #4]
	assert (pThis->m_pUSBString != 0);
   2d1f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d1f4:	e5933004 	ldr	r3, [r3, #4]
   2d1f8:	e3530000 	cmp	r3, #0
   2d1fc:	1a000005 	bne	2d218 <USBStringGetFromDescriptor+0xe8>
   2d200:	e3000a58 	movw	r0, #2648	; 0xa58
   2d204:	e3400003 	movt	r0, #3
   2d208:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d20c:	e3401003 	movt	r1, #3
   2d210:	e3a0205d 	mov	r2, #93	; 0x5d
   2d214:	ebffa5e5 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pDevice != 0);
   2d218:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d21c:	e5933000 	ldr	r3, [r3]
   2d220:	e3530000 	cmp	r3, #0
   2d224:	1a000005 	bne	2d240 <USBStringGetFromDescriptor+0x110>
   2d228:	e3000a18 	movw	r0, #2584	; 0xa18
   2d22c:	e3400003 	movt	r0, #3
   2d230:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d234:	e3401003 	movt	r1, #3
   2d238:	e3a0205f 	mov	r2, #95	; 0x5f
   2d23c:	ebffa5db 	bl	169b0 <uspi_assertion_failed>
	if (DWHCIDeviceControlMessage (USBDeviceGetHost (pThis->m_pDevice),
   2d240:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d244:	e5933000 	ldr	r3, [r3]
   2d248:	e1a00003 	mov	r0, r3
   2d24c:	ebffcb6c 	bl	20004 <USBDeviceGetHost>
   2d250:	e1a0a000 	mov	sl, r0
				       USBDeviceGetEndpoint0 (pThis->m_pDevice),
   2d254:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d258:	e5933000 	ldr	r3, [r3]
   2d25c:	e1a00003 	mov	r0, r3
   2d260:	ebffcb3f 	bl	1ff64 <USBDeviceGetEndpoint0>
   2d264:	e1a01000 	mov	r1, r0
	}
	pThis->m_pUSBString = (TUSBStringDescriptor *) malloc (USBSTR_MIN_LENGTH);
	assert (pThis->m_pUSBString != 0);

	assert (pThis->m_pDevice != 0);
	if (DWHCIDeviceControlMessage (USBDeviceGetHost (pThis->m_pDevice),
   2d268:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
   2d26c:	e6ff3073 	uxth	r3, r3
   2d270:	e3833c03 	orr	r3, r3, #768	; 0x300
   2d274:	e6ff2073 	uxth	r2, r3
				       USBDeviceGetEndpoint0 (pThis->m_pDevice),
				       REQUEST_IN, GET_DESCRIPTOR,
				       (DESCRIPTOR_STRING << 8) | ucID, usLanguageID,
				       pThis->m_pUSBString, USBSTR_MIN_LENGTH) < 0)
   2d278:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d27c:	e5933004 	ldr	r3, [r3, #4]
	}
	pThis->m_pUSBString = (TUSBStringDescriptor *) malloc (USBSTR_MIN_LENGTH);
	assert (pThis->m_pUSBString != 0);

	assert (pThis->m_pDevice != 0);
	if (DWHCIDeviceControlMessage (USBDeviceGetHost (pThis->m_pDevice),
   2d280:	e58d2000 	str	r2, [sp]
   2d284:	e15b24b4 	ldrh	r2, [fp, #-68]	; 0xffffffbc
   2d288:	e58d2004 	str	r2, [sp, #4]
   2d28c:	e58d3008 	str	r3, [sp, #8]
   2d290:	e3a03004 	mov	r3, #4
   2d294:	e58d300c 	str	r3, [sp, #12]
   2d298:	e1a0000a 	mov	r0, sl
   2d29c:	e3a02080 	mov	r2, #128	; 0x80
   2d2a0:	e3a03006 	mov	r3, #6
   2d2a4:	ebffae2e 	bl	18b64 <DWHCIDeviceControlMessage>
   2d2a8:	e1a03000 	mov	r3, r0
   2d2ac:	e3530000 	cmp	r3, #0
   2d2b0:	aa000001 	bge	2d2bc <USBStringGetFromDescriptor+0x18c>
				       USBDeviceGetEndpoint0 (pThis->m_pDevice),
				       REQUEST_IN, GET_DESCRIPTOR,
				       (DESCRIPTOR_STRING << 8) | ucID, usLanguageID,
				       pThis->m_pUSBString, USBSTR_MIN_LENGTH) < 0)
	{
		return FALSE;
   2d2b4:	e3a04000 	mov	r4, #0
   2d2b8:	ea0000ed 	b	2d674 <USBStringGetFromDescriptor+0x544>
	}

	u8 ucLength = pThis->m_pUSBString->bLength;
   2d2bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d2c0:	e5933004 	ldr	r3, [r3, #4]
   2d2c4:	e5d33000 	ldrb	r3, [r3]
   2d2c8:	e54b302b 	strb	r3, [fp, #-43]	; 0xffffffd5
	if (   ucLength < 2
   2d2cc:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
   2d2d0:	e3530001 	cmp	r3, #1
   2d2d4:	9a000008 	bls	2d2fc <USBStringGetFromDescriptor+0x1cc>
	    || (ucLength & 1) != 0
   2d2d8:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
   2d2dc:	e2033001 	and	r3, r3, #1
   2d2e0:	e3530000 	cmp	r3, #0
   2d2e4:	1a000004 	bne	2d2fc <USBStringGetFromDescriptor+0x1cc>
	    || pThis->m_pUSBString->bDescriptorType != DESCRIPTOR_STRING)
   2d2e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d2ec:	e5933004 	ldr	r3, [r3, #4]
   2d2f0:	e5d33001 	ldrb	r3, [r3, #1]
   2d2f4:	e3530003 	cmp	r3, #3
   2d2f8:	0a000001 	beq	2d304 <USBStringGetFromDescriptor+0x1d4>
	{
		return FALSE;
   2d2fc:	e3a04000 	mov	r4, #0
   2d300:	ea0000db 	b	2d674 <USBStringGetFromDescriptor+0x544>
	}

	if (ucLength > USBSTR_MIN_LENGTH)
   2d304:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
   2d308:	e3530004 	cmp	r3, #4
   2d30c:	9a000049 	bls	2d438 <USBStringGetFromDescriptor+0x308>
	{
		free (pThis->m_pUSBString);
   2d310:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d314:	e5933004 	ldr	r3, [r3, #4]
   2d318:	e1a00003 	mov	r0, r3
   2d31c:	ebffa5e3 	bl	16ab0 <free>
		pThis->m_pUSBString = (TUSBStringDescriptor *) malloc (ucLength);
   2d320:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
   2d324:	e1a00003 	mov	r0, r3
   2d328:	ebffa5ca 	bl	16a58 <malloc>
   2d32c:	e1a03000 	mov	r3, r0
   2d330:	e1a02003 	mov	r2, r3
   2d334:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d338:	e5832004 	str	r2, [r3, #4]
		assert (pThis->m_pUSBString != 0);
   2d33c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d340:	e5933004 	ldr	r3, [r3, #4]
   2d344:	e3530000 	cmp	r3, #0
   2d348:	1a000005 	bne	2d364 <USBStringGetFromDescriptor+0x234>
   2d34c:	e3000a58 	movw	r0, #2648	; 0xa58
   2d350:	e3400003 	movt	r0, #3
   2d354:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d358:	e3401003 	movt	r1, #3
   2d35c:	e3a02075 	mov	r2, #117	; 0x75
   2d360:	ebffa592 	bl	169b0 <uspi_assertion_failed>

		if (DWHCIDeviceControlMessage (USBDeviceGetHost (pThis->m_pDevice),
   2d364:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d368:	e5933000 	ldr	r3, [r3]
   2d36c:	e1a00003 	mov	r0, r3
   2d370:	ebffcb23 	bl	20004 <USBDeviceGetHost>
   2d374:	e1a0a000 	mov	sl, r0
					       USBDeviceGetEndpoint0 (pThis->m_pDevice),
   2d378:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d37c:	e5933000 	ldr	r3, [r3]
   2d380:	e1a00003 	mov	r0, r3
   2d384:	ebffcaf6 	bl	1ff64 <USBDeviceGetEndpoint0>
   2d388:	e1a0c000 	mov	ip, r0
	{
		free (pThis->m_pUSBString);
		pThis->m_pUSBString = (TUSBStringDescriptor *) malloc (ucLength);
		assert (pThis->m_pUSBString != 0);

		if (DWHCIDeviceControlMessage (USBDeviceGetHost (pThis->m_pDevice),
   2d38c:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
   2d390:	e6ff3073 	uxth	r3, r3
   2d394:	e3833c03 	orr	r3, r3, #768	; 0x300
   2d398:	e6ff1073 	uxth	r1, r3
					       USBDeviceGetEndpoint0 (pThis->m_pDevice),
					       REQUEST_IN, GET_DESCRIPTOR,
					       (DESCRIPTOR_STRING << 8) | ucID, usLanguageID,
					       pThis->m_pUSBString, ucLength) != (int) ucLength)
   2d39c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d3a0:	e5932004 	ldr	r2, [r3, #4]
	{
		free (pThis->m_pUSBString);
		pThis->m_pUSBString = (TUSBStringDescriptor *) malloc (ucLength);
		assert (pThis->m_pUSBString != 0);

		if (DWHCIDeviceControlMessage (USBDeviceGetHost (pThis->m_pDevice),
   2d3a4:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
   2d3a8:	e6ff3073 	uxth	r3, r3
   2d3ac:	e58d1000 	str	r1, [sp]
   2d3b0:	e15b14b4 	ldrh	r1, [fp, #-68]	; 0xffffffbc
   2d3b4:	e58d1004 	str	r1, [sp, #4]
   2d3b8:	e58d2008 	str	r2, [sp, #8]
   2d3bc:	e58d300c 	str	r3, [sp, #12]
   2d3c0:	e1a0000a 	mov	r0, sl
   2d3c4:	e1a0100c 	mov	r1, ip
   2d3c8:	e3a02080 	mov	r2, #128	; 0x80
   2d3cc:	e3a03006 	mov	r3, #6
   2d3d0:	ebffade3 	bl	18b64 <DWHCIDeviceControlMessage>
   2d3d4:	e1a02000 	mov	r2, r0
					       USBDeviceGetEndpoint0 (pThis->m_pDevice),
					       REQUEST_IN, GET_DESCRIPTOR,
					       (DESCRIPTOR_STRING << 8) | ucID, usLanguageID,
					       pThis->m_pUSBString, ucLength) != (int) ucLength)
   2d3d8:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
	{
		free (pThis->m_pUSBString);
		pThis->m_pUSBString = (TUSBStringDescriptor *) malloc (ucLength);
		assert (pThis->m_pUSBString != 0);

		if (DWHCIDeviceControlMessage (USBDeviceGetHost (pThis->m_pDevice),
   2d3dc:	e1520003 	cmp	r2, r3
   2d3e0:	0a000001 	beq	2d3ec <USBStringGetFromDescriptor+0x2bc>
					       USBDeviceGetEndpoint0 (pThis->m_pDevice),
					       REQUEST_IN, GET_DESCRIPTOR,
					       (DESCRIPTOR_STRING << 8) | ucID, usLanguageID,
					       pThis->m_pUSBString, ucLength) != (int) ucLength)
		{
			return FALSE;
   2d3e4:	e3a04000 	mov	r4, #0
   2d3e8:	ea0000a1 	b	2d674 <USBStringGetFromDescriptor+0x544>
		}

		if (   pThis->m_pUSBString->bLength != ucLength
   2d3ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d3f0:	e5933004 	ldr	r3, [r3, #4]
   2d3f4:	e5d33000 	ldrb	r3, [r3]
   2d3f8:	e55b202b 	ldrb	r2, [fp, #-43]	; 0xffffffd5
   2d3fc:	e1520003 	cmp	r2, r3
   2d400:	1a00000a 	bne	2d430 <USBStringGetFromDescriptor+0x300>
		    || (pThis->m_pUSBString->bLength & 1) != 0
   2d404:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d408:	e5933004 	ldr	r3, [r3, #4]
   2d40c:	e5d33000 	ldrb	r3, [r3]
   2d410:	e2033001 	and	r3, r3, #1
   2d414:	e3530000 	cmp	r3, #0
   2d418:	1a000004 	bne	2d430 <USBStringGetFromDescriptor+0x300>
		    || pThis->m_pUSBString->bDescriptorType != DESCRIPTOR_STRING)
   2d41c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d420:	e5933004 	ldr	r3, [r3, #4]
   2d424:	e5d33001 	ldrb	r3, [r3, #1]
   2d428:	e3530003 	cmp	r3, #3
   2d42c:	0a000001 	beq	2d438 <USBStringGetFromDescriptor+0x308>
		{
			return FALSE;
   2d430:	e3a04000 	mov	r4, #0
   2d434:	ea00008e 	b	2d674 <USBStringGetFromDescriptor+0x544>
		}
	}

	// convert to ASCII string
	assert (pThis->m_pUSBString->bLength >= 2);
   2d438:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d43c:	e5933004 	ldr	r3, [r3, #4]
   2d440:	e5d33000 	ldrb	r3, [r3]
   2d444:	e3530001 	cmp	r3, #1
   2d448:	8a000005 	bhi	2d464 <USBStringGetFromDescriptor+0x334>
   2d44c:	e3000a98 	movw	r0, #2712	; 0xa98
   2d450:	e3400003 	movt	r0, #3
   2d454:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d458:	e3401003 	movt	r1, #3
   2d45c:	e3a02089 	mov	r2, #137	; 0x89
   2d460:	ebffa552 	bl	169b0 <uspi_assertion_failed>
	assert ((pThis->m_pUSBString->bLength & 1) == 0);
   2d464:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d468:	e5933004 	ldr	r3, [r3, #4]
   2d46c:	e5d33000 	ldrb	r3, [r3]
   2d470:	e2033001 	and	r3, r3, #1
   2d474:	e3530000 	cmp	r3, #0
   2d478:	0a000005 	beq	2d494 <USBStringGetFromDescriptor+0x364>
   2d47c:	e3000abc 	movw	r0, #2748	; 0xabc
   2d480:	e3400003 	movt	r0, #3
   2d484:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d488:	e3401003 	movt	r1, #3
   2d48c:	e3a0208a 	mov	r2, #138	; 0x8a
   2d490:	ebffa546 	bl	169b0 <uspi_assertion_failed>
	size_t nLength = (pThis->m_pUSBString->bLength-2) / 2;
   2d494:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d498:	e5933004 	ldr	r3, [r3, #4]
   2d49c:	e5d33000 	ldrb	r3, [r3]
   2d4a0:	e2433002 	sub	r3, r3, #2
   2d4a4:	e1a02fa3 	lsr	r2, r3, #31
   2d4a8:	e0823003 	add	r3, r2, r3
   2d4ac:	e1a030c3 	asr	r3, r3, #1
   2d4b0:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

	assert (nLength <= (255-2) / 2);
   2d4b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2d4b8:	e353007e 	cmp	r3, #126	; 0x7e
   2d4bc:	9a000005 	bls	2d4d8 <USBStringGetFromDescriptor+0x3a8>
   2d4c0:	e3000ae4 	movw	r0, #2788	; 0xae4
   2d4c4:	e3400003 	movt	r0, #3
   2d4c8:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d4cc:	e3401003 	movt	r1, #3
   2d4d0:	e3a0208d 	mov	r2, #141	; 0x8d
   2d4d4:	ebffa535 	bl	169b0 <uspi_assertion_failed>
	char Buffer[nLength+1];
   2d4d8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2d4dc:	e2831001 	add	r1, r3, #1
   2d4e0:	e1a03001 	mov	r3, r1
   2d4e4:	e2433001 	sub	r3, r3, #1
   2d4e8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2d4ec:	e1a02001 	mov	r2, r1
   2d4f0:	e3a03000 	mov	r3, #0
   2d4f4:	e1a07183 	lsl	r7, r3, #3
   2d4f8:	e1877ea2 	orr	r7, r7, r2, lsr #29
   2d4fc:	e1a06182 	lsl	r6, r2, #3
   2d500:	e1a02001 	mov	r2, r1
   2d504:	e3a03000 	mov	r3, #0
   2d508:	e1a05183 	lsl	r5, r3, #3
   2d50c:	e1855ea2 	orr	r5, r5, r2, lsr #29
   2d510:	e1a04182 	lsl	r4, r2, #3
   2d514:	e2813007 	add	r3, r1, #7
   2d518:	e1a031a3 	lsr	r3, r3, #3
   2d51c:	e1a03183 	lsl	r3, r3, #3
   2d520:	e04dd003 	sub	sp, sp, r3
   2d524:	e28d3010 	add	r3, sp, #16
   2d528:	e2833000 	add	r3, r3, #0
   2d52c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
	
	for (unsigned i = 0; i < nLength; i++)
   2d530:	e3a03000 	mov	r3, #0
   2d534:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   2d538:	ea00001b 	b	2d5ac <USBStringGetFromDescriptor+0x47c>
	{
		u16 usChar = pThis->m_pUSBString->bString[i];
   2d53c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d540:	e5932004 	ldr	r2, [r3, #4]
   2d544:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2d548:	e1a03083 	lsl	r3, r3, #1
   2d54c:	e0823003 	add	r3, r2, r3
   2d550:	e5d32002 	ldrb	r2, [r3, #2]
   2d554:	e5d33003 	ldrb	r3, [r3, #3]
   2d558:	e1a03403 	lsl	r3, r3, #8
   2d55c:	e1833002 	orr	r3, r3, r2
   2d560:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
		if (   usChar < ' '
   2d564:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
   2d568:	e353001f 	cmp	r3, #31
   2d56c:	9a000002 	bls	2d57c <USBStringGetFromDescriptor+0x44c>
		    || usChar > '~')
   2d570:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
   2d574:	e353007e 	cmp	r3, #126	; 0x7e
   2d578:	9a000001 	bls	2d584 <USBStringGetFromDescriptor+0x454>
		{
			usChar = '_';
   2d57c:	e3a0305f 	mov	r3, #95	; 0x5f
   2d580:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
		}
		
		Buffer[i] = (char) usChar;
   2d584:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
   2d588:	e6ef1073 	uxtb	r1, r3
   2d58c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
   2d590:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2d594:	e0823003 	add	r3, r2, r3
   2d598:	e1a02001 	mov	r2, r1
   2d59c:	e5c32000 	strb	r2, [r3]
	size_t nLength = (pThis->m_pUSBString->bLength-2) / 2;

	assert (nLength <= (255-2) / 2);
	char Buffer[nLength+1];
	
	for (unsigned i = 0; i < nLength; i++)
   2d5a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2d5a4:	e2833001 	add	r3, r3, #1
   2d5a8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   2d5ac:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   2d5b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2d5b4:	e1520003 	cmp	r2, r3
   2d5b8:	3affffdf 	bcc	2d53c <USBStringGetFromDescriptor+0x40c>
			usChar = '_';
		}
		
		Buffer[i] = (char) usChar;
	}
	Buffer[nLength] = '\0';
   2d5bc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
   2d5c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2d5c4:	e0823003 	add	r3, r2, r3
   2d5c8:	e3a02000 	mov	r2, #0
   2d5cc:	e5c32000 	strb	r2, [r3]

	assert (pThis->m_pString != 0);
   2d5d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d5d4:	e5933008 	ldr	r3, [r3, #8]
   2d5d8:	e3530000 	cmp	r3, #0
   2d5dc:	1a000005 	bne	2d5f8 <USBStringGetFromDescriptor+0x4c8>
   2d5e0:	e3000a30 	movw	r0, #2608	; 0xa30
   2d5e4:	e3400003 	movt	r0, #3
   2d5e8:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d5ec:	e3401003 	movt	r1, #3
   2d5f0:	e3a0209d 	mov	r2, #157	; 0x9d
   2d5f4:	ebffa4ed 	bl	169b0 <uspi_assertion_failed>
	_String (pThis->m_pString);
   2d5f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d5fc:	e5933008 	ldr	r3, [r3, #8]
   2d600:	e1a00003 	mov	r0, r3
   2d604:	ebffde3d 	bl	24f00 <_String>
	free (pThis->m_pString);
   2d608:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d60c:	e5933008 	ldr	r3, [r3, #8]
   2d610:	e1a00003 	mov	r0, r3
   2d614:	ebffa525 	bl	16ab0 <free>

	pThis->m_pString = malloc (sizeof (TString));
   2d618:	e3a0000c 	mov	r0, #12
   2d61c:	ebffa50d 	bl	16a58 <malloc>
   2d620:	e1a03000 	mov	r3, r0
   2d624:	e1a02003 	mov	r2, r3
   2d628:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d62c:	e5832008 	str	r2, [r3, #8]
	assert (pThis->m_pString != 0);
   2d630:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d634:	e5933008 	ldr	r3, [r3, #8]
   2d638:	e3530000 	cmp	r3, #0
   2d63c:	1a000005 	bne	2d658 <USBStringGetFromDescriptor+0x528>
   2d640:	e3000a30 	movw	r0, #2608	; 0xa30
   2d644:	e3400003 	movt	r0, #3
   2d648:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d64c:	e3401003 	movt	r1, #3
   2d650:	e3a020a2 	mov	r2, #162	; 0xa2
   2d654:	ebffa4d5 	bl	169b0 <uspi_assertion_failed>
	String2 (pThis->m_pString, Buffer);
   2d658:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d65c:	e5932008 	ldr	r2, [r3, #8]
   2d660:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2d664:	e1a00002 	mov	r0, r2
   2d668:	e1a01003 	mov	r1, r3
   2d66c:	ebffddf5 	bl	24e48 <String2>

	return TRUE;
   2d670:	e3a04001 	mov	r4, #1
   2d674:	e1a0d009 	mov	sp, r9
   2d678:	e1a03008 	mov	r3, r8
   2d67c:	e30d0130 	movw	r0, #53552	; 0xd130
   2d680:	e3400002 	movt	r0, #2
   2d684:	e1a01003 	mov	r1, r3
   2d688:	ebffa075 	bl	15864 <__cyg_profile_func_exit>
   2d68c:	e1a03004 	mov	r3, r4
}
   2d690:	e1a00003 	mov	r0, r3
   2d694:	e24bd020 	sub	sp, fp, #32
   2d698:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d69c <USBStringGet>:

const char *USBStringGet (TUSBString *pThis)
{
   2d69c:	e92d4830 	push	{r4, r5, fp, lr}
   2d6a0:	e28db00c 	add	fp, sp, #12
   2d6a4:	e24dd008 	sub	sp, sp, #8
   2d6a8:	e1a0400e 	mov	r4, lr
   2d6ac:	e50b0010 	str	r0, [fp, #-16]
   2d6b0:	e1a03004 	mov	r3, r4
   2d6b4:	e30d069c 	movw	r0, #54940	; 0xd69c
   2d6b8:	e3400002 	movt	r0, #2
   2d6bc:	e1a01003 	mov	r1, r3
   2d6c0:	ebffa015 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2d6c4:	e51b3010 	ldr	r3, [fp, #-16]
   2d6c8:	e3530000 	cmp	r3, #0
   2d6cc:	1a000005 	bne	2d6e8 <USBStringGet+0x4c>
   2d6d0:	e30009ac 	movw	r0, #2476	; 0x9ac
   2d6d4:	e3400003 	movt	r0, #3
   2d6d8:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d6dc:	e3401003 	movt	r1, #3
   2d6e0:	e3a020aa 	mov	r2, #170	; 0xaa
   2d6e4:	ebffa4b1 	bl	169b0 <uspi_assertion_failed>
	return StringGet (pThis->m_pString);
   2d6e8:	e51b3010 	ldr	r3, [fp, #-16]
   2d6ec:	e5933008 	ldr	r3, [r3, #8]
   2d6f0:	e1a00003 	mov	r0, r3
   2d6f4:	ebffde26 	bl	24f94 <StringGet>
   2d6f8:	e1a05000 	mov	r5, r0
   2d6fc:	e1a03004 	mov	r3, r4
   2d700:	e30d069c 	movw	r0, #54940	; 0xd69c
   2d704:	e3400002 	movt	r0, #2
   2d708:	e1a01003 	mov	r1, r3
   2d70c:	ebffa054 	bl	15864 <__cyg_profile_func_exit>
   2d710:	e1a03005 	mov	r3, r5
}
   2d714:	e1a00003 	mov	r0, r3
   2d718:	e24bd00c 	sub	sp, fp, #12
   2d71c:	e8bd8830 	pop	{r4, r5, fp, pc}

0002d720 <USBStringGetLanguageID>:

u16 USBStringGetLanguageID (TUSBString *pThis)
{
   2d720:	e92d4830 	push	{r4, r5, fp, lr}
   2d724:	e28db00c 	add	fp, sp, #12
   2d728:	e24dd030 	sub	sp, sp, #48	; 0x30
   2d72c:	e1a0500e 	mov	r5, lr
   2d730:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   2d734:	e1a03005 	mov	r3, r5
   2d738:	e30d0720 	movw	r0, #55072	; 0xd720
   2d73c:	e3400002 	movt	r0, #2
   2d740:	e1a01003 	mov	r1, r3
   2d744:	ebff9ff4 	bl	1571c <__cyg_profile_func_enter>
	assert (pThis != 0);
   2d748:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2d74c:	e3530000 	cmp	r3, #0
   2d750:	1a000005 	bne	2d76c <USBStringGetLanguageID+0x4c>
   2d754:	e30009ac 	movw	r0, #2476	; 0x9ac
   2d758:	e3400003 	movt	r0, #3
   2d75c:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d760:	e3401003 	movt	r1, #3
   2d764:	e3a020b0 	mov	r2, #176	; 0xb0
   2d768:	ebffa490 	bl	169b0 <uspi_assertion_failed>

	TUSBStringDescriptor *pLanguageIDs = (TUSBStringDescriptor *) malloc (USBSTR_MIN_LENGTH);
   2d76c:	e3a00004 	mov	r0, #4
   2d770:	ebffa4b8 	bl	16a58 <malloc>
   2d774:	e1a03000 	mov	r3, r0
   2d778:	e50b3010 	str	r3, [fp, #-16]
	assert (pLanguageIDs != 0);
   2d77c:	e51b3010 	ldr	r3, [fp, #-16]
   2d780:	e3530000 	cmp	r3, #0
   2d784:	1a000005 	bne	2d7a0 <USBStringGetLanguageID+0x80>
   2d788:	e3000afc 	movw	r0, #2812	; 0xafc
   2d78c:	e3400003 	movt	r0, #3
   2d790:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d794:	e3401003 	movt	r1, #3
   2d798:	e3a020b3 	mov	r2, #179	; 0xb3
   2d79c:	ebffa483 	bl	169b0 <uspi_assertion_failed>

	assert (pThis->m_pDevice != 0);
   2d7a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2d7a4:	e5933000 	ldr	r3, [r3]
   2d7a8:	e3530000 	cmp	r3, #0
   2d7ac:	1a000005 	bne	2d7c8 <USBStringGetLanguageID+0xa8>
   2d7b0:	e3000a18 	movw	r0, #2584	; 0xa18
   2d7b4:	e3400003 	movt	r0, #3
   2d7b8:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d7bc:	e3401003 	movt	r1, #3
   2d7c0:	e3a020b5 	mov	r2, #181	; 0xb5
   2d7c4:	ebffa479 	bl	169b0 <uspi_assertion_failed>
	if (DWHCIDeviceGetDescriptor (USBDeviceGetHost (pThis->m_pDevice),
   2d7c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2d7cc:	e5933000 	ldr	r3, [r3]
   2d7d0:	e1a00003 	mov	r0, r3
   2d7d4:	ebffca0a 	bl	20004 <USBDeviceGetHost>
   2d7d8:	e1a04000 	mov	r4, r0
				      USBDeviceGetEndpoint0 (pThis->m_pDevice),
   2d7dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2d7e0:	e5933000 	ldr	r3, [r3]
   2d7e4:	e1a00003 	mov	r0, r3
   2d7e8:	ebffc9dd 	bl	1ff64 <USBDeviceGetEndpoint0>
   2d7ec:	e1a02000 	mov	r2, r0

	TUSBStringDescriptor *pLanguageIDs = (TUSBStringDescriptor *) malloc (USBSTR_MIN_LENGTH);
	assert (pLanguageIDs != 0);

	assert (pThis->m_pDevice != 0);
	if (DWHCIDeviceGetDescriptor (USBDeviceGetHost (pThis->m_pDevice),
   2d7f0:	e51b3010 	ldr	r3, [fp, #-16]
   2d7f4:	e58d3000 	str	r3, [sp]
   2d7f8:	e3a03004 	mov	r3, #4
   2d7fc:	e58d3004 	str	r3, [sp, #4]
   2d800:	e3a03080 	mov	r3, #128	; 0x80
   2d804:	e58d3008 	str	r3, [sp, #8]
   2d808:	e1a00004 	mov	r0, r4
   2d80c:	e1a01002 	mov	r1, r2
   2d810:	e3a02003 	mov	r2, #3
   2d814:	e3a03000 	mov	r3, #0
   2d818:	ebffac2d 	bl	188d4 <DWHCIDeviceGetDescriptor>
   2d81c:	e1a03000 	mov	r3, r0
   2d820:	e3530000 	cmp	r3, #0
   2d824:	aa000003 	bge	2d838 <USBStringGetLanguageID+0x118>
				      USBDeviceGetEndpoint0 (pThis->m_pDevice),
				      DESCRIPTOR_STRING, 0,
				      pLanguageIDs, USBSTR_MIN_LENGTH, REQUEST_IN) < 0)
	{
		free (pLanguageIDs);
   2d828:	e51b0010 	ldr	r0, [fp, #-16]
   2d82c:	ebffa49f 	bl	16ab0 <free>

		return USBSTR_DEFAULT_LANGID;
   2d830:	e3004409 	movw	r4, #1033	; 0x409
   2d834:	ea00008e 	b	2da74 <USBStringGetLanguageID+0x354>
	}

	u8 ucLength = pLanguageIDs->bLength;
   2d838:	e51b3010 	ldr	r3, [fp, #-16]
   2d83c:	e5d33000 	ldrb	r3, [r3]
   2d840:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	if (   ucLength < 4
   2d844:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   2d848:	e3530003 	cmp	r3, #3
   2d84c:	9a000007 	bls	2d870 <USBStringGetLanguageID+0x150>
	    || (ucLength & 1) != 0
   2d850:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   2d854:	e2033001 	and	r3, r3, #1
   2d858:	e3530000 	cmp	r3, #0
   2d85c:	1a000003 	bne	2d870 <USBStringGetLanguageID+0x150>
	    || pLanguageIDs->bDescriptorType != DESCRIPTOR_STRING)
   2d860:	e51b3010 	ldr	r3, [fp, #-16]
   2d864:	e5d33001 	ldrb	r3, [r3, #1]
   2d868:	e3530003 	cmp	r3, #3
   2d86c:	0a000003 	beq	2d880 <USBStringGetLanguageID+0x160>
	{
		free (pLanguageIDs);
   2d870:	e51b0010 	ldr	r0, [fp, #-16]
   2d874:	ebffa48d 	bl	16ab0 <free>

		return USBSTR_DEFAULT_LANGID;
   2d878:	e3004409 	movw	r4, #1033	; 0x409
   2d87c:	ea00007c 	b	2da74 <USBStringGetLanguageID+0x354>
	}

	if (ucLength > USBSTR_MIN_LENGTH)
   2d880:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   2d884:	e3530004 	cmp	r3, #4
   2d888:	9a00003d 	bls	2d984 <USBStringGetLanguageID+0x264>
	{
		free (pLanguageIDs);
   2d88c:	e51b0010 	ldr	r0, [fp, #-16]
   2d890:	ebffa486 	bl	16ab0 <free>
		pLanguageIDs = (TUSBStringDescriptor *) malloc (ucLength);
   2d894:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   2d898:	e1a00003 	mov	r0, r3
   2d89c:	ebffa46d 	bl	16a58 <malloc>
   2d8a0:	e1a03000 	mov	r3, r0
   2d8a4:	e50b3010 	str	r3, [fp, #-16]
		assert (pLanguageIDs != 0);
   2d8a8:	e51b3010 	ldr	r3, [fp, #-16]
   2d8ac:	e3530000 	cmp	r3, #0
   2d8b0:	1a000005 	bne	2d8cc <USBStringGetLanguageID+0x1ac>
   2d8b4:	e3000afc 	movw	r0, #2812	; 0xafc
   2d8b8:	e3400003 	movt	r0, #3
   2d8bc:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d8c0:	e3401003 	movt	r1, #3
   2d8c4:	e3a020ce 	mov	r2, #206	; 0xce
   2d8c8:	ebffa438 	bl	169b0 <uspi_assertion_failed>

		if (DWHCIDeviceGetDescriptor (USBDeviceGetHost (pThis->m_pDevice),
   2d8cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2d8d0:	e5933000 	ldr	r3, [r3]
   2d8d4:	e1a00003 	mov	r0, r3
   2d8d8:	ebffc9c9 	bl	20004 <USBDeviceGetHost>
   2d8dc:	e1a04000 	mov	r4, r0
					      USBDeviceGetEndpoint0 (pThis->m_pDevice),
   2d8e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2d8e4:	e5933000 	ldr	r3, [r3]
   2d8e8:	e1a00003 	mov	r0, r3
   2d8ec:	ebffc99c 	bl	1ff64 <USBDeviceGetEndpoint0>
   2d8f0:	e1a01000 	mov	r1, r0
	{
		free (pLanguageIDs);
		pLanguageIDs = (TUSBStringDescriptor *) malloc (ucLength);
		assert (pLanguageIDs != 0);

		if (DWHCIDeviceGetDescriptor (USBDeviceGetHost (pThis->m_pDevice),
   2d8f4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   2d8f8:	e51b2010 	ldr	r2, [fp, #-16]
   2d8fc:	e58d2000 	str	r2, [sp]
   2d900:	e58d3004 	str	r3, [sp, #4]
   2d904:	e3a03080 	mov	r3, #128	; 0x80
   2d908:	e58d3008 	str	r3, [sp, #8]
   2d90c:	e1a00004 	mov	r0, r4
   2d910:	e3a02003 	mov	r2, #3
   2d914:	e3a03000 	mov	r3, #0
   2d918:	ebffabed 	bl	188d4 <DWHCIDeviceGetDescriptor>
   2d91c:	e1a02000 	mov	r2, r0
					      USBDeviceGetEndpoint0 (pThis->m_pDevice),
					      DESCRIPTOR_STRING, 0,
					      pLanguageIDs, ucLength, REQUEST_IN) != (int) ucLength)
   2d920:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
	{
		free (pLanguageIDs);
		pLanguageIDs = (TUSBStringDescriptor *) malloc (ucLength);
		assert (pLanguageIDs != 0);

		if (DWHCIDeviceGetDescriptor (USBDeviceGetHost (pThis->m_pDevice),
   2d924:	e1520003 	cmp	r2, r3
   2d928:	0a000003 	beq	2d93c <USBStringGetLanguageID+0x21c>
					      USBDeviceGetEndpoint0 (pThis->m_pDevice),
					      DESCRIPTOR_STRING, 0,
					      pLanguageIDs, ucLength, REQUEST_IN) != (int) ucLength)
		{
			free (pLanguageIDs);
   2d92c:	e51b0010 	ldr	r0, [fp, #-16]
   2d930:	ebffa45e 	bl	16ab0 <free>

			return USBSTR_DEFAULT_LANGID;
   2d934:	e3004409 	movw	r4, #1033	; 0x409
   2d938:	ea00004d 	b	2da74 <USBStringGetLanguageID+0x354>
		}

		if (   pLanguageIDs->bLength != ucLength
   2d93c:	e51b3010 	ldr	r3, [fp, #-16]
   2d940:	e5d33000 	ldrb	r3, [r3]
   2d944:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
   2d948:	e1520003 	cmp	r2, r3
   2d94c:	1a000008 	bne	2d974 <USBStringGetLanguageID+0x254>
		    || (pLanguageIDs->bLength & 1) != 0
   2d950:	e51b3010 	ldr	r3, [fp, #-16]
   2d954:	e5d33000 	ldrb	r3, [r3]
   2d958:	e2033001 	and	r3, r3, #1
   2d95c:	e3530000 	cmp	r3, #0
   2d960:	1a000003 	bne	2d974 <USBStringGetLanguageID+0x254>
		    || pLanguageIDs->bDescriptorType != DESCRIPTOR_STRING)
   2d964:	e51b3010 	ldr	r3, [fp, #-16]
   2d968:	e5d33001 	ldrb	r3, [r3, #1]
   2d96c:	e3530003 	cmp	r3, #3
   2d970:	0a000003 	beq	2d984 <USBStringGetLanguageID+0x264>
		{
			free (pLanguageIDs);
   2d974:	e51b0010 	ldr	r0, [fp, #-16]
   2d978:	ebffa44c 	bl	16ab0 <free>

			return USBSTR_DEFAULT_LANGID;
   2d97c:	e3004409 	movw	r4, #1033	; 0x409
   2d980:	ea00003b 	b	2da74 <USBStringGetLanguageID+0x354>
		}
	}

	assert (pLanguageIDs->bLength >= 4);
   2d984:	e51b3010 	ldr	r3, [fp, #-16]
   2d988:	e5d33000 	ldrb	r3, [r3]
   2d98c:	e3530003 	cmp	r3, #3
   2d990:	8a000005 	bhi	2d9ac <USBStringGetLanguageID+0x28c>
   2d994:	e3000b10 	movw	r0, #2832	; 0xb10
   2d998:	e3400003 	movt	r0, #3
   2d99c:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d9a0:	e3401003 	movt	r1, #3
   2d9a4:	e3a020e4 	mov	r2, #228	; 0xe4
   2d9a8:	ebffa400 	bl	169b0 <uspi_assertion_failed>
	assert ((pLanguageIDs->bLength & 1) == 0);
   2d9ac:	e51b3010 	ldr	r3, [fp, #-16]
   2d9b0:	e5d33000 	ldrb	r3, [r3]
   2d9b4:	e2033001 	and	r3, r3, #1
   2d9b8:	e3530000 	cmp	r3, #0
   2d9bc:	0a000005 	beq	2d9d8 <USBStringGetLanguageID+0x2b8>
   2d9c0:	e3000b2c 	movw	r0, #2860	; 0xb2c
   2d9c4:	e3400003 	movt	r0, #3
   2d9c8:	e30019b8 	movw	r1, #2488	; 0x9b8
   2d9cc:	e3401003 	movt	r1, #3
   2d9d0:	e3a020e5 	mov	r2, #229	; 0xe5
   2d9d4:	ebffa3f5 	bl	169b0 <uspi_assertion_failed>
	size_t nLength = (pLanguageIDs->bLength-2) / 2;
   2d9d8:	e51b3010 	ldr	r3, [fp, #-16]
   2d9dc:	e5d33000 	ldrb	r3, [r3]
   2d9e0:	e2433002 	sub	r3, r3, #2
   2d9e4:	e1a02fa3 	lsr	r2, r3, #31
   2d9e8:	e0823003 	add	r3, r2, r3
   2d9ec:	e1a030c3 	asr	r3, r3, #1
   2d9f0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

	// search for default language ID
	for (unsigned i = 0; i < nLength; i++)
   2d9f4:	e3a03000 	mov	r3, #0
   2d9f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2d9fc:	ea00000f 	b	2da40 <USBStringGetLanguageID+0x320>
	{
		if (pLanguageIDs->bString[i] == USBSTR_DEFAULT_LANGID)
   2da00:	e51b2010 	ldr	r2, [fp, #-16]
   2da04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2da08:	e1a03083 	lsl	r3, r3, #1
   2da0c:	e0823003 	add	r3, r2, r3
   2da10:	e1d330b2 	ldrh	r3, [r3, #2]
   2da14:	e6ff3073 	uxth	r3, r3
   2da18:	e3002409 	movw	r2, #1033	; 0x409
   2da1c:	e1530002 	cmp	r3, r2
   2da20:	1a000003 	bne	2da34 <USBStringGetLanguageID+0x314>
		{
			free (pLanguageIDs);
   2da24:	e51b0010 	ldr	r0, [fp, #-16]
   2da28:	ebffa420 	bl	16ab0 <free>

			return USBSTR_DEFAULT_LANGID;
   2da2c:	e3004409 	movw	r4, #1033	; 0x409
   2da30:	ea00000f 	b	2da74 <USBStringGetLanguageID+0x354>
	assert (pLanguageIDs->bLength >= 4);
	assert ((pLanguageIDs->bLength & 1) == 0);
	size_t nLength = (pLanguageIDs->bLength-2) / 2;

	// search for default language ID
	for (unsigned i = 0; i < nLength; i++)
   2da34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2da38:	e2833001 	add	r3, r3, #1
   2da3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2da40:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2da44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2da48:	e1520003 	cmp	r2, r3
   2da4c:	3affffeb 	bcc	2da00 <USBStringGetLanguageID+0x2e0>
			return USBSTR_DEFAULT_LANGID;
		}
	}

	// default language ID not found, use first ID
	u16 usResult = pLanguageIDs->bString[0];
   2da50:	e51b3010 	ldr	r3, [fp, #-16]
   2da54:	e5d32002 	ldrb	r2, [r3, #2]
   2da58:	e5d33003 	ldrb	r3, [r3, #3]
   2da5c:	e1a03403 	lsl	r3, r3, #8
   2da60:	e1833002 	orr	r3, r3, r2
   2da64:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2

	free (pLanguageIDs);
   2da68:	e51b0010 	ldr	r0, [fp, #-16]
   2da6c:	ebffa40f 	bl	16ab0 <free>

	return usResult;
   2da70:	e15b41be 	ldrh	r4, [fp, #-30]	; 0xffffffe2
   2da74:	e1a03005 	mov	r3, r5
   2da78:	e30d0720 	movw	r0, #55072	; 0xd720
   2da7c:	e3400002 	movt	r0, #2
   2da80:	e1a01003 	mov	r1, r3
   2da84:	ebff9f76 	bl	15864 <__cyg_profile_func_exit>
   2da88:	e1a03004 	mov	r3, r4
}
   2da8c:	e1a00003 	mov	r0, r3
   2da90:	e24bd00c 	sub	sp, fp, #12
   2da94:	e8bd8830 	pop	{r4, r5, fp, pc}

0002da98 <__aeabi_uidiv>:
   2da98:	e2512001 	subs	r2, r1, #1
   2da9c:	012fff1e 	bxeq	lr
   2daa0:	3a000036 	bcc	2db80 <__aeabi_uidiv+0xe8>
   2daa4:	e1500001 	cmp	r0, r1
   2daa8:	9a000022 	bls	2db38 <__aeabi_uidiv+0xa0>
   2daac:	e1110002 	tst	r1, r2
   2dab0:	0a000023 	beq	2db44 <__aeabi_uidiv+0xac>
   2dab4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   2dab8:	01a01181 	lsleq	r1, r1, #3
   2dabc:	03a03008 	moveq	r3, #8
   2dac0:	13a03001 	movne	r3, #1
   2dac4:	e3510201 	cmp	r1, #268435456	; 0x10000000
   2dac8:	31510000 	cmpcc	r1, r0
   2dacc:	31a01201 	lslcc	r1, r1, #4
   2dad0:	31a03203 	lslcc	r3, r3, #4
   2dad4:	3afffffa 	bcc	2dac4 <__aeabi_uidiv+0x2c>
   2dad8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   2dadc:	31510000 	cmpcc	r1, r0
   2dae0:	31a01081 	lslcc	r1, r1, #1
   2dae4:	31a03083 	lslcc	r3, r3, #1
   2dae8:	3afffffa 	bcc	2dad8 <__aeabi_uidiv+0x40>
   2daec:	e3a02000 	mov	r2, #0
   2daf0:	e1500001 	cmp	r0, r1
   2daf4:	20400001 	subcs	r0, r0, r1
   2daf8:	21822003 	orrcs	r2, r2, r3
   2dafc:	e15000a1 	cmp	r0, r1, lsr #1
   2db00:	204000a1 	subcs	r0, r0, r1, lsr #1
   2db04:	218220a3 	orrcs	r2, r2, r3, lsr #1
   2db08:	e1500121 	cmp	r0, r1, lsr #2
   2db0c:	20400121 	subcs	r0, r0, r1, lsr #2
   2db10:	21822123 	orrcs	r2, r2, r3, lsr #2
   2db14:	e15001a1 	cmp	r0, r1, lsr #3
   2db18:	204001a1 	subcs	r0, r0, r1, lsr #3
   2db1c:	218221a3 	orrcs	r2, r2, r3, lsr #3
   2db20:	e3500000 	cmp	r0, #0
   2db24:	11b03223 	lsrsne	r3, r3, #4
   2db28:	11a01221 	lsrne	r1, r1, #4
   2db2c:	1affffef 	bne	2daf0 <__aeabi_uidiv+0x58>
   2db30:	e1a00002 	mov	r0, r2
   2db34:	e12fff1e 	bx	lr
   2db38:	03a00001 	moveq	r0, #1
   2db3c:	13a00000 	movne	r0, #0
   2db40:	e12fff1e 	bx	lr
   2db44:	e3510801 	cmp	r1, #65536	; 0x10000
   2db48:	21a01821 	lsrcs	r1, r1, #16
   2db4c:	23a02010 	movcs	r2, #16
   2db50:	33a02000 	movcc	r2, #0
   2db54:	e3510c01 	cmp	r1, #256	; 0x100
   2db58:	21a01421 	lsrcs	r1, r1, #8
   2db5c:	22822008 	addcs	r2, r2, #8
   2db60:	e3510010 	cmp	r1, #16
   2db64:	21a01221 	lsrcs	r1, r1, #4
   2db68:	22822004 	addcs	r2, r2, #4
   2db6c:	e3510004 	cmp	r1, #4
   2db70:	82822003 	addhi	r2, r2, #3
   2db74:	908220a1 	addls	r2, r2, r1, lsr #1
   2db78:	e1a00230 	lsr	r0, r0, r2
   2db7c:	e12fff1e 	bx	lr
   2db80:	e3500000 	cmp	r0, #0
   2db84:	13e00000 	mvnne	r0, #0
   2db88:	ea000007 	b	2dbac <__aeabi_idiv0>

0002db8c <__aeabi_uidivmod>:
   2db8c:	e3510000 	cmp	r1, #0
   2db90:	0afffffa 	beq	2db80 <__aeabi_uidiv+0xe8>
   2db94:	e92d4003 	push	{r0, r1, lr}
   2db98:	ebffffbe 	bl	2da98 <__aeabi_uidiv>
   2db9c:	e8bd4006 	pop	{r1, r2, lr}
   2dba0:	e0030092 	mul	r3, r2, r0
   2dba4:	e0411003 	sub	r1, r1, r3
   2dba8:	e12fff1e 	bx	lr

0002dbac <__aeabi_idiv0>:
   2dbac:	e12fff1e 	bx	lr

Disassembly of section .rodata:

0002dbb0 <pRegs>:
   2dbb0:	3f00b400 	svccc	0x0000b400

0002dbb4 <.LC0>:
   2dbb4:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
   2dbb8:	00000000 	andeq	r0, r0, r0

0002dbbc <pRegs>:
   2dbbc:	3f00b200 	svccc	0x0000b200

0002dbc0 <pRegs>:
   2dbc0:	3f200000 	svccc	0x00200000

0002dbc4 <heapSTRUCT_SIZE>:
   2dbc4:	00000010 	andeq	r0, r0, r0, lsl r0

0002dbc8 <xTotalHeapSize>:
   2dbc8:	0000a000 	andeq	sl, r0, r0

0002dbcc <.LC0>:
   2dbcc:	5f44454c 	svcpl	0x0044454c
   2dbd0:	00000030 	andeq	r0, r0, r0, lsr r0

0002dbd4 <.LC1>:
   2dbd4:	5f44454c 	svcpl	0x0044454c
   2dbd8:	00000031 	andeq	r0, r0, r1, lsr r0

0002dbdc <font>:
   2dbdc:	00000000 	andeq	r0, r0, r0
   2dbe0:	005c0000 	subseq	r0, ip, r0
   2dbe4:	00000000 	andeq	r0, r0, r0
   2dbe8:	00060006 	andeq	r0, r6, r6
   2dbec:	7c280000 	stcvc	0, cr0, [r8], #-0
   2dbf0:	00287c28 	eoreq	r7, r8, r8, lsr #24
   2dbf4:	54fe545c 	ldrbtpl	r5, [lr], #1116	; 0x45c
   2dbf8:	20440074 	subcs	r0, r4, r4, ror r0
   2dbfc:	00440810 	subeq	r0, r4, r0, lsl r8
   2dc00:	20545428 	subscs	r5, r4, r8, lsr #8
   2dc04:	00060050 	andeq	r0, r6, r0, asr r0
   2dc08:	00000000 	andeq	r0, r0, r0
   2dc0c:	00004438 	andeq	r4, r0, r8, lsr r4
   2dc10:	38440000 	stmdacc	r4, {}^	; <UNPREDICTABLE>
   2dc14:	00000000 	andeq	r0, r0, r0
   2dc18:	00020702 	andeq	r0, r2, r2, lsl #14
   2dc1c:	10100000 	andsne	r0, r0, r0
   2dc20:	0010107c 	andseq	r1, r0, ip, ror r0
   2dc24:	000000c0 	andeq	r0, r0, r0, asr #1
   2dc28:	10100000 	andsne	r0, r0, r0
   2dc2c:	00101010 	andseq	r1, r0, r0, lsl r0
   2dc30:	00000040 	andeq	r0, r0, r0, asr #32
   2dc34:	10600000 	rsbne	r0, r0, r0
   2dc38:	0000000c 	andeq	r0, r0, ip
   2dc3c:	4c54647c 	cfldrdmi	mvd6, [r4], {124}	; 0x7c
   2dc40:	7c48007c 	mcrrvc	0, 7, r0, r8, cr12
   2dc44:	00000040 	andeq	r0, r0, r0, asr #32
   2dc48:	54545464 	ldrbpl	r5, [r4], #-1124	; 0xfffffb9c
   2dc4c:	54440048 	strbpl	r0, [r4], #-72	; 0xffffffb8
   2dc50:	006c5454 	rsbeq	r5, ip, r4, asr r4
   2dc54:	2070203c 	rsbscs	r2, r0, ip, lsr r0
   2dc58:	545c0020 	ldrbpl	r0, [ip], #-32	; 0xffffffe0
   2dc5c:	00245454 	eoreq	r5, r4, r4, asr r4
   2dc60:	5454547c 	ldrbpl	r5, [r4], #-1148	; 0xfffffb84
   2dc64:	04040074 	streq	r0, [r4], #-116	; 0xffffff8c
   2dc68:	000c1464 	andeq	r1, ip, r4, ror #8
   2dc6c:	5454547c 	ldrbpl	r5, [r4], #-1148	; 0xfffffb84
   2dc70:	545c007c 	ldrbpl	r0, [ip], #-124	; 0xffffff84
   2dc74:	007c5454 	rsbseq	r5, ip, r4, asr r4
   2dc78:	00000044 	andeq	r0, r0, r4, asr #32
   2dc7c:	00c40000 	sbceq	r0, r4, r0
   2dc80:	00000000 	andeq	r0, r0, r0
   2dc84:	00442810 	subeq	r2, r4, r0, lsl r8
   2dc88:	28280000 	stmdacs	r8!, {}	; <UNPREDICTABLE>
   2dc8c:	00282828 	eoreq	r2, r8, r8, lsr #16
   2dc90:	00102844 	andseq	r2, r0, r4, asr #16
   2dc94:	04080000 	streq	r0, [r8], #-0
   2dc98:	00000854 	andeq	r0, r0, r4, asr r8
   2dc9c:	5454447c 	ldrbpl	r4, [r4], #-1148	; 0xfffffb84
   2dca0:	247c005c 	ldrbtcs	r0, [ip], #-92	; 0xffffffa4
   2dca4:	007c2424 	rsbseq	r2, ip, r4, lsr #8
   2dca8:	5454547c 	ldrbpl	r5, [r4], #-1148	; 0xfffffb84
   2dcac:	447c006c 	ldrbtmi	r0, [ip], #-108	; 0xffffff94
   2dcb0:	00444444 	subeq	r4, r4, r4, asr #8
   2dcb4:	4444447c 	strbmi	r4, [r4], #-1148	; 0xfffffb84
   2dcb8:	547c0038 	ldrbtpl	r0, [ip], #-56	; 0xffffffc8
   2dcbc:	00445454 	subeq	r5, r4, r4, asr r4
   2dcc0:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   2dcc4:	447c0004 	ldrbtmi	r0, [ip], #-4
   2dcc8:	00745444 	rsbseq	r5, r4, r4, asr #8
   2dccc:	1010107c 	andsne	r1, r0, ip, ror r0
   2dcd0:	4444007c 	strbmi	r0, [r4], #-124	; 0xffffff84
   2dcd4:	0044447c 	subeq	r4, r4, ip, ror r4
   2dcd8:	44404060 	strbmi	r4, [r0], #-96	; 0xffffffa0
   2dcdc:	107c007c 	rsbsne	r0, ip, ip, ror r0
   2dce0:	00442810 	subeq	r2, r4, r0, lsl r8
   2dce4:	4040407c 	submi	r4, r0, ip, ror r0
   2dce8:	087c0040 	ldmdaeq	ip!, {r6}^
   2dcec:	007c0810 	rsbseq	r0, ip, r0, lsl r8
   2dcf0:	2010087c 	andscs	r0, r0, ip, ror r8
   2dcf4:	4438007c 	ldrtmi	r0, [r8], #-124	; 0xffffff84
   2dcf8:	00384444 	eorseq	r4, r8, r4, asr #8
   2dcfc:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   2dd00:	243c0008 	ldrtcs	r0, [ip], #-8
   2dd04:	003c2464 	eorseq	r2, ip, r4, ror #8
   2dd08:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   2dd0c:	545c0068 	ldrbpl	r0, [ip], #-104	; 0xffffff98
   2dd10:	00745454 	rsbseq	r5, r4, r4, asr r4
   2dd14:	047c0404 	ldrbteq	r0, [ip], #-1028	; 0xfffffbfc
   2dd18:	407c0004 	rsbsmi	r0, ip, r4
   2dd1c:	007c4040 	rsbseq	r4, ip, r0, asr #32
   2dd20:	3040300c 	subcc	r3, r0, ip
   2dd24:	403c000c 	eorsmi	r0, ip, ip
   2dd28:	003c4030 	eorseq	r4, ip, r0, lsr r0
   2dd2c:	28102844 	ldmdacs	r0, {r2, r6, fp, sp}
   2dd30:	100c0044 	andne	r0, ip, r4, asr #32
   2dd34:	000c1060 	andeq	r1, ip, r0, rrx
   2dd38:	4c546444 	cfldrdmi	mvd6, [r4], {68}	; 0x44
   2dd3c:	447c0044 	ldrbtmi	r0, [ip], #-68	; 0xffffffbc
   2dd40:	00000000 	andeq	r0, r0, r0
   2dd44:	0060100c 	rsbeq	r1, r0, ip
   2dd48:	7c440000 	marvc	acc0, r0, r4
   2dd4c:	00000000 	andeq	r0, r0, r0
   2dd50:	01000100 	mrseq	r0, (UNDEF: 16)
   2dd54:	40400000 	submi	r0, r0, r0
   2dd58:	40404040 	submi	r4, r0, r0, asr #32
   2dd5c:	00000100 	andeq	r0, r0, r0, lsl #2
   2dd60:	247c0000 	ldrbtcs	r0, [ip], #-0
   2dd64:	007c2424 	rsbseq	r2, ip, r4, lsr #8
   2dd68:	5454547c 	ldrbpl	r5, [r4], #-1148	; 0xfffffb84
   2dd6c:	447c006c 	ldrbtmi	r0, [ip], #-108	; 0xffffff94
   2dd70:	00444444 	subeq	r4, r4, r4, asr #8
   2dd74:	4444447c 	strbmi	r4, [r4], #-1148	; 0xfffffb84
   2dd78:	547c0038 	ldrbtpl	r0, [ip], #-56	; 0xffffffc8
   2dd7c:	00445454 	subeq	r5, r4, r4, asr r4
   2dd80:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   2dd84:	447c0004 	ldrbtmi	r0, [ip], #-4
   2dd88:	00745444 	rsbseq	r5, r4, r4, asr #8
   2dd8c:	1010107c 	andsne	r1, r0, ip, ror r0
   2dd90:	4444007c 	strbmi	r0, [r4], #-124	; 0xffffff84
   2dd94:	0044447c 	subeq	r4, r4, ip, ror r4
   2dd98:	44404060 	strbmi	r4, [r0], #-96	; 0xffffffa0
   2dd9c:	107c007c 	rsbsne	r0, ip, ip, ror r0
   2dda0:	00442810 	subeq	r2, r4, r0, lsl r8
   2dda4:	4040407c 	submi	r4, r0, ip, ror r0
   2dda8:	087c0040 	ldmdaeq	ip!, {r6}^
   2ddac:	007c0810 	rsbseq	r0, ip, r0, lsl r8
   2ddb0:	2010087c 	andscs	r0, r0, ip, ror r8
   2ddb4:	4438007c 	ldrtmi	r0, [r8], #-124	; 0xffffff84
   2ddb8:	00384444 	eorseq	r4, r8, r4, asr #8
   2ddbc:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   2ddc0:	243c0008 	ldrtcs	r0, [ip], #-8
   2ddc4:	003c2464 	eorseq	r2, ip, r4, ror #8
   2ddc8:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   2ddcc:	545c0068 	ldrbpl	r0, [ip], #-104	; 0xffffff98
   2ddd0:	00745454 	rsbseq	r5, r4, r4, asr r4
   2ddd4:	047c0404 	ldrbteq	r0, [ip], #-1028	; 0xfffffbfc
   2ddd8:	407c0004 	rsbsmi	r0, ip, r4
   2dddc:	007c4040 	rsbseq	r4, ip, r0, asr #32
   2dde0:	3040300c 	subcc	r3, r0, ip
   2dde4:	403c000c 	eorsmi	r0, ip, ip
   2dde8:	003c4030 	eorseq	r4, ip, r0, lsr r0
   2ddec:	28102844 	ldmdacs	r0, {r2, r6, fp, sp}
   2ddf0:	100c0044 	andne	r0, ip, r4, asr #32
   2ddf4:	000c1060 	andeq	r1, ip, r0, rrx
   2ddf8:	4c546444 	cfldrdmi	mvd6, [r4], {68}	; 0x44
   2ddfc:	7c100044 	ldcvc	0, cr0, [r0], {68}	; 0x44
   2de00:	00000044 	andeq	r0, r0, r4, asr #32
   2de04:	0000006c 	andeq	r0, r0, ip, rrx
   2de08:	7c440000 	marvc	acc0, r0, r4
   2de0c:	00000010 	andeq	r0, r0, r0, lsl r0
   2de10:	01020102 	tsteq	r2, r2, lsl #2
	...

0002de1c <.LC0>:
   2de1c:	74726f46 	ldrbtvc	r6, [r2], #-3910	; 0xfffff0ba
   2de20:	77542d79 			; <UNDEFINED> instruction: 0x77542d79
   2de24:	0000006f 	andeq	r0, r0, pc, rrx

0002de28 <.LC0>:
   2de28:	6544736d 	strbvs	r7, [r4, #-877]	; 0xfffffc93
   2de2c:	0079616c 	rsbseq	r6, r9, ip, ror #2

0002de30 <.LC1>:
   2de30:	65447375 	strbvs	r7, [r4, #-885]	; 0xfffffc8b
   2de34:	0079616c 	rsbseq	r6, r9, ip, ror #2

0002de38 <.LC2>:
   2de38:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
   2de3c:	72654b74 	rsbvc	r4, r5, #116, 22	; 0x1d000
   2de40:	546c656e 	strbtpl	r6, [ip], #-1390	; 0xfffffa92
   2de44:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
   2de48:	00000000 	andeq	r0, r0, r0

0002de4c <.LC3>:
   2de4c:	636e6143 	cmnvs	lr, #-1073741808	; 0xc0000010
   2de50:	654b6c65 	strbvs	r6, [fp, #-3173]	; 0xfffff39b
   2de54:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
   2de58:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
   2de5c:	00000072 	andeq	r0, r0, r2, ror r0

0002de60 <.LC5>:
   2de60:	20646964 	rsbcs	r6, r4, r4, ror #18
   2de64:	77207469 	strvc	r7, [r0, -r9, ror #8]!
   2de68:	656b726f 	strbvs	r7, [fp, #-623]!	; 0xfffffd91
   2de6c:	00003f64 	andeq	r3, r0, r4, ror #30

0002de70 <.LC4>:
   2de70:	61616161 	cmnvs	r1, r1, ror #2
   2de74:	00006161 	andeq	r6, r0, r1, ror #2

0002de78 <.LC6>:
   2de78:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
   2de7c:	66207472 			; <UNDEFINED> instruction: 0x66207472
   2de80:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0xfffff69f
   2de84:	00000064 	andeq	r0, r0, r4, rrx

0002de88 <OwnIPAddress>:
   2de88:	fa00a8c0 	blx	58190 <mailbuffer+0x1d0a0>

0002de8c <FromSample>:
   2de8c:	706d6173 	rsbvc	r6, sp, r3, ror r1
   2de90:	0000656c 	andeq	r6, r0, ip, ror #10

0002de94 <.LC0>:
   2de94:	6e6e6143 	powvsem	f6, f6, f3
   2de98:	6920746f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
   2de9c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
   2dea0:	7a696c61 	bvc	1a8902c <mailbuffer+0x1a4df3c>
   2dea4:	53552065 	cmppl	r5, #101	; 0x65
   2dea8:	00006950 	andeq	r6, r0, r0, asr r9

0002deac <.LC1>:
   2deac:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
   2deb0:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
   2deb4:	76656420 	strbtvc	r6, [r5], -r0, lsr #8
   2deb8:	20656369 	rsbcs	r6, r5, r9, ror #6
   2debc:	20746f6e 	rsbscs	r6, r4, lr, ror #30
   2dec0:	6e756f66 	cdpvs	15, 7, cr6, cr5, cr6, {3}
   2dec4:	00000064 	andeq	r0, r0, r4, rrx

0002dec8 <.LC2>:
   2dec8:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
   2decc:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
   2ded0:	76696563 	strbtvc	r6, [r9], -r3, ror #10
   2ded4:	28206465 	stmdacs	r0!, {r0, r2, r5, r6, sl, sp, lr}
   2ded8:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
   2dedc:	25206874 	strcs	r6, [r0, #-2164]!	; 0xfffff78c
   2dee0:	00002975 	andeq	r2, r0, r5, ror r9

0002dee4 <.LC3>:
   2dee4:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
   2dee8:	52412064 	subpl	r2, r1, #100	; 0x64
   2deec:	65722050 	ldrbvs	r2, [r2, #-80]!	; 0xffffffb0
   2def0:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
   2def4:	72662074 	rsbvc	r2, r6, #116	; 0x74
   2def8:	25206d6f 	strcs	r6, [r0, #-3439]!	; 0xfffff291
   2defc:	75252e75 	strvc	r2, [r5, #-3701]!	; 0xfffff18b
   2df00:	2e75252e 	cdpcs	5, 7, cr2, cr5, cr14, {1}
   2df04:	72207525 	eorvc	r7, r0, #155189248	; 0x9400000
   2df08:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
   2df0c:	00646576 	rsbeq	r6, r4, r6, ror r5

0002df10 <.LC4>:
   2df10:	20505241 	subscs	r5, r0, r1, asr #4
   2df14:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
   2df18:	20747365 	rsbscs	r7, r4, r5, ror #6
   2df1c:	74207369 	strtvc	r7, [r0], #-873	; 0xfffffc97
   2df20:	7375206f 	cmnvc	r5, #111	; 0x6f
   2df24:	00000000 	andeq	r0, r0, r0

0002df28 <.LC5>:
   2df28:	69505355 	ldmdbvs	r0, {r0, r2, r4, r6, r8, r9, ip, lr}^
   2df2c:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
   2df30:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
   2df34:	61662065 	cmnvs	r6, r5, rrx
   2df38:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
   2df3c:	00000000 	andeq	r0, r0, r0

0002df40 <.LC6>:
   2df40:	20505241 	subscs	r5, r0, r1, asr #4
   2df44:	6c706572 	cfldr64vs	mvdx6, [r0], #-456	; 0xfffffe38
   2df48:	75732079 	ldrbvc	r2, [r3, #-121]!	; 0xffffff87
   2df4c:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
   2df50:	6c756673 	ldclvs	6, cr6, [r5], #-460	; 0xfffffe34
   2df54:	7320796c 	teqvc	r0, #108, 18	; 0x1b0000
   2df58:	00746e65 	rsbseq	r6, r4, r5, ror #28

0002df5c <FromUSPi>:
   2df5c:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
   2df60:	00000000 	andeq	r0, r0, r0

0002df64 <.LC0>:
   2df64:	4c705f73 	ldclmi	15, cr5, [r0], #-460	; 0xfffffe34
   2df68:	61726269 	cmnvs	r2, r9, ror #4
   2df6c:	3d207972 	stccc	9, cr7, [r0, #-456]!	; 0xfffffe38
   2df70:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002df74 <.LC1>:
   2df74:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2dec0 <.LC1+0x14>
   2df78:	6a6c2f65 	bvs	1b39d14 <mailbuffer+0x1afec24>
   2df7c:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2df80:	2f727566 	svccs	0x00727566
   2df84:	6b736544 	blvs	1d0749c <mailbuffer+0x1ccc3ac>
   2df88:	2f706f74 	svccs	0x00706f74
   2df8c:	2f697072 	svccs	0x00697072
   2df90:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2df94:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2df98:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2df9c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2dfa0:	534f5452 	movtpl	r5, #62546	; 0xf452
   2dfa4:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2dfa8:	2f726574 	svccs	0x00726574
   2dfac:	6f6d6544 	svcvs	0x006d6544
   2dfb0:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2dfb4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2dfb8:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2dfbc:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2dfc0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2dfc4:	7073752f 	rsbsvc	r7, r3, pc, lsr #10
   2dfc8:	62696c69 	rsbvs	r6, r9, #26880	; 0x6900
   2dfcc:	79726172 	ldmdbvc	r2!, {r1, r4, r5, r6, r8, sp, lr}^
   2dfd0:	0000632e 	andeq	r6, r0, lr, lsr #6

0002dfd4 <.LC2>:
   2dfd4:	4c705f73 	ldclmi	15, cr5, [r0], #-460	; 0xfffffe34
   2dfd8:	61726269 	cmnvs	r2, r9, ror #4
   2dfdc:	21207972 	teqcs	r0, r2, ror r9
   2dfe0:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002dfe4 <.LC3>:
   2dfe4:	6e6e6143 	powvsem	f6, f6, f3
   2dfe8:	6920746f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
   2dfec:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
   2dff0:	7a696c61 	bvc	1a8917c <mailbuffer+0x1a4e08c>
   2dff4:	53552065 	cmppl	r5, #101	; 0x65
   2dff8:	6f682042 	svcvs	0x00682042
   2dffc:	63207473 	teqvs	r0, #1929379840	; 0x73000000
   2e000:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
   2e004:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
   2e008:	6e692072 	mcrvs	0, 3, r2, cr9, cr2, {3}
   2e00c:	66726574 			; <UNDEFINED> instruction: 0x66726574
   2e010:	00656361 	rsbeq	r6, r5, r1, ror #6

0002e014 <.LC4>:
   2e014:	64626b75 	strbtvs	r6, [r2], #-2933	; 0xfffff48b
   2e018:	00000031 	andeq	r0, r0, r1, lsr r0

0002e01c <.LC5>:
   2e01c:	756f6d75 	strbvc	r6, [pc, #-3445]!	; 2d2af <USBStringGetFromDescriptor+0x17f>
   2e020:	00316573 	eorseq	r6, r1, r3, ror r5

0002e024 <.LC6>:
   2e024:	64736d75 	ldrbtvs	r6, [r3], #-3445	; 0xfffff28b
   2e028:	00007525 	andeq	r7, r0, r5, lsr #10

0002e02c <.LC7>:
   2e02c:	30687465 	rsbcc	r7, r8, r5, ror #8
   2e030:	00000000 	andeq	r0, r0, r0

0002e034 <.LC8>:
   2e034:	64617075 	strbtvs	r7, [r1], #-117	; 0xffffff8b
   2e038:	00007525 	andeq	r7, r0, r5, lsr #10

0002e03c <.LC9>:
   2e03c:	69505355 	ldmdbvs	r0, {r0, r2, r4, r6, r8, r9, ip, lr}^
   2e040:	62696c20 	rsbvs	r6, r9, #32, 24	; 0x2000
   2e044:	79726172 	ldmdbvc	r2!, {r1, r4, r5, r6, r8, sp, lr}^
   2e048:	63757320 	cmnvs	r5, #32, 6	; 0x80000000
   2e04c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
   2e050:	6c6c7566 	cfstr64vs	mvdx7, [ip], #-408	; 0xfffffe68
   2e054:	6e692079 	mcrvs	0, 3, r2, cr9, cr9, {3}
   2e058:	61697469 	cmnvs	r9, r9, ror #8
   2e05c:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
   2e060:	00000064 	andeq	r0, r0, r4, rrx

0002e064 <.LC10>:
   2e064:	4c705f73 	ldclmi	15, cr5, [r0], #-460	; 0xfffffe34
   2e068:	61726269 	cmnvs	r2, r9, ror #4
   2e06c:	3e2d7972 	mcrcc	9, 1, r7, cr13, cr2, {3}
   2e070:	424b5570 	submi	r5, fp, #112, 10	; 0x1c000000
   2e074:	21203144 	teqcs	r0, r4, asr #2
   2e078:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002e07c <.LC11>:
   2e07c:	4c705f73 	ldclmi	15, cr5, [r0], #-460	; 0xfffffe34
   2e080:	61726269 	cmnvs	r2, r9, ror #4
   2e084:	3e2d7972 	mcrcc	9, 1, r7, cr13, cr2, {3}
   2e088:	6f4d5570 	svcvs	0x004d5570
   2e08c:	31657375 	smccc	22325	; 0x5735
   2e090:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2e094:	00000030 	andeq	r0, r0, r0, lsr r0

0002e098 <.LC12>:
   2e098:	4c705f73 	ldclmi	15, cr5, [r0], #-460	; 0xfffffe34
   2e09c:	61726269 	cmnvs	r2, r9, ror #4
   2e0a0:	3e2d7972 	mcrcc	9, 1, r7, cr13, cr2, {3}
   2e0a4:	68744570 	ldmdavs	r4!, {r4, r5, r6, r8, sl, lr}^
   2e0a8:	3d212030 	stccc	0, cr2, [r1, #-192]!	; 0xffffff40
   2e0ac:	00003020 	andeq	r3, r0, r0, lsr #32

0002e0b0 <.LC13>:
   2e0b0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
   2e0b4:	21207265 	teqcs	r0, r5, ror #4
   2e0b8:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002e0bc <.LC14>:
   2e0bc:	73654470 	cmnvc	r5, #112, 8	; 0x70000000
   2e0c0:	3d212063 	stccc	0, cr2, [r1, #-396]!	; 0xfffffe74
   2e0c4:	00003020 	andeq	r3, r0, r0, lsr #32

0002e0c8 <.LC15>:
   2e0c8:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
   2e0cc:	3d21206f 	stccc	0, cr2, [r1, #-444]!	; 0xfffffe44
   2e0d0:	00003020 	andeq	r3, r0, r0, lsr #32

0002e0d4 <FromDWHCI>:
   2e0d4:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
   2e0d8:	00000069 	andeq	r0, r0, r9, rrx

0002e0dc <.LC0>:
   2e0dc:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e0e0:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2e0e4:	00003020 	andeq	r3, r0, r0, lsr #32

0002e0e8 <.LC1>:
   2e0e8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2e034 <.LC8>
   2e0ec:	6a6c2f65 	bvs	1b39e88 <mailbuffer+0x1afed98>
   2e0f0:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2e0f4:	2f727566 	svccs	0x00727566
   2e0f8:	6b736544 	blvs	1d07610 <mailbuffer+0x1ccc520>
   2e0fc:	2f706f74 	svccs	0x00706f74
   2e100:	2f697072 	svccs	0x00697072
   2e104:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2e108:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2e10c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2e110:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2e114:	534f5452 	movtpl	r5, #62546	; 0xf452
   2e118:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2e11c:	2f726574 	svccs	0x00726574
   2e120:	6f6d6544 	svcvs	0x006d6544
   2e124:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2e128:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2e12c:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2e130:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2e134:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2e138:	6877642f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, sl, sp, lr}^
   2e13c:	65646963 	strbvs	r6, [r4, #-2403]!	; 0xfffff69d
   2e140:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   2e144:	0000632e 	andeq	r6, r0, lr, lsr #6

0002e148 <.LC2>:
   2e148:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
   2e14c:	206e776f 	rsbcs	r7, lr, pc, ror #14
   2e150:	646e6576 	strbtvs	r6, [lr], #-1398	; 0xfffffa8a
   2e154:	3020726f 	eorcc	r7, r0, pc, ror #4
   2e158:	58302578 	ldmdapl	r0!, {r3, r4, r5, r6, r8, sl, sp}
   2e15c:	00000000 	andeq	r0, r0, r0

0002e160 <.LC3>:
   2e160:	6e6e6143 	powvsem	f6, f6, f3
   2e164:	7020746f 	eorvc	r7, r0, pc, ror #8
   2e168:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
   2e16c:	006e6f20 	rsbeq	r6, lr, r0, lsr #30

0002e170 <.LC4>:
   2e170:	6e6e6143 	powvsem	f6, f6, f3
   2e174:	6920746f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
   2e178:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
   2e17c:	7a696c61 	bvc	1a89308 <mailbuffer+0x1a4e218>
   2e180:	6f632065 	svcvs	0x00632065
   2e184:	00006572 	andeq	r6, r0, r2, ror r5

0002e188 <.LC5>:
   2e188:	6e6e6143 	powvsem	f6, f6, f3
   2e18c:	6920746f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
   2e190:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
   2e194:	7a696c61 	bvc	1a89320 <mailbuffer+0x1a4e230>
   2e198:	6f682065 	svcvs	0x00682065
   2e19c:	00007473 	andeq	r7, r0, r3, ror r4

0002e1a0 <.LC6>:
   2e1a0:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
   2e1a4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
   2e1a8:	6f632065 	svcvs	0x00632065
   2e1ac:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
   2e1b0:	20646574 	rsbcs	r6, r4, r4, ror r5
   2e1b4:	72206f74 	eorvc	r6, r0, #116, 30	; 0x1d0
   2e1b8:	20746f6f 	rsbscs	r6, r4, pc, ror #30
   2e1bc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
   2e1c0:	00000000 	andeq	r0, r0, r0

0002e1c4 <.LC7>:
   2e1c4:	6e6e6143 	powvsem	f6, f6, f3
   2e1c8:	6920746f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
   2e1cc:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
   2e1d0:	7a696c61 	bvc	1a8935c <mailbuffer+0x1a4e26c>
   2e1d4:	6f722065 	svcvs	0x00722065
   2e1d8:	7020746f 	eorvc	r7, r0, pc, ror #8
   2e1dc:	0074726f 	rsbseq	r7, r4, pc, ror #4

0002e1e0 <.LC8>:
   2e1e0:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
   2e1e4:	21207075 	teqcs	r0, r5, ror r0
   2e1e8:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002e1ec <.LC9>:
   2e1ec:	42525570 	subsmi	r5, r2, #112, 10	; 0x1c000000
   2e1f0:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2e1f4:	00000030 	andeq	r0, r0, r0, lsr r0

0002e1f8 <.LC10>:
   2e1f8:	52425355 	subpl	r5, r2, #1409286145	; 0x54000001
   2e1fc:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
   2e200:	65477473 	strbvs	r7, [r7, #-1139]	; 0xfffffb8d
   2e204:	66754274 			; <UNDEFINED> instruction: 0x66754274
   2e208:	206e654c 	rsbcs	r6, lr, ip, asr #10
   2e20c:	52557028 	subspl	r7, r5, #40	; 0x28
   2e210:	3e202942 	cdpcc	9, 2, cr2, cr0, cr2, {2}
   2e214:	00003020 	andeq	r3, r0, r0, lsr #32

0002e218 <.LC11>:
   2e218:	45425355 	strbmi	r5, [r2, #-853]	; 0xfffffcab
   2e21c:	6f70646e 	svcvs	0x0070646e
   2e220:	47746e69 	ldrbmi	r6, [r4, -r9, ror #28]!
   2e224:	79547465 	ldmdbvc	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
   2e228:	28206570 	stmdacs	r0!, {r4, r5, r6, r8, sl, sp, lr}
   2e22c:	52425355 	subpl	r5, r2, #1409286145	; 0x54000001
   2e230:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
   2e234:	65477473 	strbvs	r7, [r7, #-1139]	; 0xfffffb8d
   2e238:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
   2e23c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2e240:	70282074 	eorvc	r2, r8, r4, ror r0
   2e244:	29425255 	stmdbcs	r2, {r0, r2, r4, r6, r9, ip, lr}^
   2e248:	3d3d2029 	ldccc	0, cr2, [sp, #-164]!	; 0xffffff5c
   2e24c:	646e4520 	strbtvs	r4, [lr], #-1312	; 0xfffffae0
   2e250:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2e254:	70795474 	rsbsvc	r5, r9, r4, ror r4
   2e258:	6c754265 	lfmvs	f4, 2, [r5], #-404	; 0xfffffe6c
   2e25c:	7c7c206b 	ldclvc	0, cr2, [ip], #-428	; 0xfffffe54
   2e260:	42535520 	subsmi	r5, r3, #32, 10	; 0x8000000
   2e264:	70646e45 	rsbvc	r6, r4, r5, asr #28
   2e268:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
   2e26c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
   2e270:	20657079 	rsbcs	r7, r5, r9, ror r0
   2e274:	42535528 	subsmi	r5, r3, #40, 10	; 0xa000000
   2e278:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
   2e27c:	47747365 	ldrbmi	r7, [r4, -r5, ror #6]!
   2e280:	6e457465 	cdpvs	4, 4, cr7, cr5, cr5, {3}
   2e284:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2e288:	2820746e 	stmdacs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
   2e28c:	42525570 	subsmi	r5, r2, #112, 10	; 0x1c000000
   2e290:	3d202929 	stccc	9, cr2, [r0, #-164]!	; 0xffffff5c
   2e294:	6e45203d 	mcrvs	0, 2, r2, cr5, cr13, {1}
   2e298:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2e29c:	7954746e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   2e2a0:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
   2e2a4:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
   2e2a8:	00747075 	rsbseq	r7, r4, r5, ror r0

0002e2ac <.LC12>:
   2e2ac:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
   2e2b0:	61662074 	smcvs	25092	; 0x6204
   2e2b4:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
   2e2b8:	00000000 	andeq	r0, r0, r0

0002e2bc <.LC13>:
   2e2bc:	43485744 	movtmi	r5, #34628	; 0x8744
   2e2c0:	4f435f49 	svcmi	0x00435f49
   2e2c4:	485f4552 	ldmdami	pc, {r1, r4, r6, r8, sl, lr}^	; <UNPREDICTABLE>
   2e2c8:	46435f57 			; <UNDEFINED> instruction: 0x46435f57
   2e2cc:	415f3247 	cmpmi	pc, r7, asr #4
   2e2d0:	49484352 	stmdbmi	r8, {r1, r4, r6, r8, r9, lr}^
   2e2d4:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
   2e2d8:	20455255 	subcs	r5, r5, r5, asr r2
   2e2dc:	48574428 	ldmdami	r7, {r3, r5, sl, lr}^
   2e2e0:	65524943 	ldrbvs	r4, [r2, #-2371]	; 0xfffff6bd
   2e2e4:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
   2e2e8:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
   2e2ec:	26282074 			; <UNDEFINED> instruction: 0x26282074
   2e2f0:	6f435748 	svcvs	0x00435748
   2e2f4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
   2e2f8:	20292932 	eorcs	r2, r9, r2, lsr r9
   2e2fc:	32203d3d 	eorcc	r3, r0, #3904	; 0xf40
   2e300:	00000000 	andeq	r0, r0, r0

0002e304 <.LC14>:
   2e304:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e308:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e30c:	68436e5f 	stmdavs	r3, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
   2e310:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
   2e314:	3d20736c 	stccc	3, cr7, [r0, #-432]!	; 0xfffffe50
   2e318:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002e31c <.LC15>:
   2e31c:	3d3c2034 	ldccc	0, cr2, [ip, #-208]!	; 0xffffff30
   2e320:	68547020 	ldmdavs	r4, {r5, ip, sp, lr}^
   2e324:	3e2d7369 	cdpcc	3, 2, cr7, cr13, cr9, {3}
   2e328:	436e5f6d 	cmnmi	lr, #436	; 0x1b4
   2e32c:	6e6e6168 	powvsez	f6, f6, #0.0
   2e330:	20736c65 	rsbscs	r6, r3, r5, ror #24
   2e334:	70202626 	eorvc	r2, r0, r6, lsr #12
   2e338:	73696854 	cmnvc	r9, #84, 16	; 0x540000
   2e33c:	5f6d3e2d 	svcpl	0x006d3e2d
   2e340:	6168436e 	cmnvs	r8, lr, ror #6
   2e344:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
   2e348:	3d3c2073 	ldccc	0, cr2, [ip, #-460]!	; 0xfffffe34
   2e34c:	48574420 	ldmdami	r7, {r5, sl, lr}^
   2e350:	4d5f4943 	ldclmi	9, cr4, [pc, #-268]	; 2e24c <.LC11+0x34>
   2e354:	435f5841 	cmpmi	pc, #4259840	; 0x410000
   2e358:	4e4e4148 	dvfmiem	f4, f6, #0.0
   2e35c:	00534c45 	subseq	r4, r3, r5, asr #24

0002e360 <.LC16>:
   2e360:	68547021 	ldmdavs	r4, {r0, r5, ip, sp, lr}^
   2e364:	3e2d7369 	cdpcc	3, 2, cr7, cr13, cr9, {3}
   2e368:	57625f6d 	strbpl	r5, [r2, -sp, ror #30]!
   2e36c:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
   2e370:	0000676e 	andeq	r6, r0, lr, ror #14

0002e374 <.LC17>:
   2e374:	61745370 	cmnvs	r4, r0, ror r3
   2e378:	61446567 	cmpvs	r4, r7, ror #10
   2e37c:	21206174 	teqcs	r0, r4, ror r1
   2e380:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002e384 <.LC18>:
   2e384:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e388:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e38c:	7453705f 	ldrbvc	r7, [r3], #-95	; 0xffffffa1
   2e390:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
   2e394:	5b617461 	blpl	188b520 <mailbuffer+0x1850430>
   2e398:	6168436e 	cmnvs	r8, lr, ror #6
   2e39c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
   2e3a0:	3d3d205d 	ldccc	0, cr2, [sp, #-372]!	; 0xfffffe8c
   2e3a4:	00003020 	andeq	r3, r0, r0, lsr #32

0002e3a8 <.LC19>:
   2e3a8:	61724670 	cmnvs	r2, r0, ror r6
   2e3ac:	6353656d 	cmpvs	r3, #457179136	; 0x1b400000
   2e3b0:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
   2e3b4:	2072656c 	rsbscs	r6, r2, ip, ror #10
   2e3b8:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2e3bc:	00000000 	andeq	r0, r0, r0

0002e3c0 <.LC20>:
   2e3c0:	6168436e 	cmnvs	r8, lr, ror #6
   2e3c4:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
   2e3c8:	70203c20 	eorvc	r3, r0, r0, lsr #24
   2e3cc:	73696854 	cmnvc	r9, #84, 16	; 0x540000
   2e3d0:	5f6d3e2d 	svcpl	0x006d3e2d
   2e3d4:	6168436e 	cmnvs	r8, lr, ror #6
   2e3d8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
   2e3dc:	00000073 	andeq	r0, r0, r3, ror r0

0002e3e0 <.LC21>:
   2e3e0:	48574421 	ldmdami	r7, {r0, r5, sl, lr}^
   2e3e4:	72544943 	subsvc	r4, r4, #1097728	; 0x10c000
   2e3e8:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
   2e3ec:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
   2e3f0:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
   2e3f4:	49617461 	stmdbmi	r1!, {r0, r5, r6, sl, ip, sp, lr}^
   2e3f8:	72655073 	rsbvc	r5, r5, #115	; 0x73
   2e3fc:	69646f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
   2e400:	70282063 	eorvc	r2, r8, r3, rrx
   2e404:	67617453 			; <UNDEFINED> instruction: 0x67617453
   2e408:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
   2e40c:	7c202961 	stcvc	9, cr2, [r0], #-388	; 0xfffffe7c
   2e410:	5744207c 	smlsldxpl	r2, r4, ip, r0
   2e414:	5f494348 	svcpl	0x00494348
   2e418:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e41c:	4148435f 	cmpmi	r8, pc, asr r3
   2e420:	46585f4e 	ldrbmi	r5, [r8], -lr, asr #30
   2e424:	535f5245 	cmppl	pc, #1342177284	; 0x50000004
   2e428:	505f5a49 	subspl	r5, pc, r9, asr #20
   2e42c:	28204449 	stmdacs	r0!, {r0, r3, r6, sl, lr}
   2e430:	43485744 	movtmi	r5, #34628	; 0x8744
   2e434:	67655249 	strbvs	r5, [r5, -r9, asr #4]!
   2e438:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
   2e43c:	74654772 	strbtvc	r4, [r5], #-1906	; 0xfffff88e
   2e440:	54262820 	strtpl	r2, [r6], #-2080	; 0xfffff7e0
   2e444:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
   2e448:	53726566 	cmnpl	r2, #427819008	; 0x19800000
   2e44c:	29657a69 	stmdbcs	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
   2e450:	3d212029 	stccc	0, cr2, [r1, #-164]!	; 0xffffff5c
   2e454:	48574420 	ldmdami	r7, {r5, sl, lr}^
   2e458:	485f4943 	ldmdami	pc, {r0, r1, r6, r8, fp, lr}^	; <UNPREDICTABLE>
   2e45c:	5f54534f 	svcpl	0x0054534f
   2e460:	4e414843 	cdpmi	8, 4, cr4, cr1, cr3, {2}
   2e464:	4546585f 	strbmi	r5, [r6, #-2143]	; 0xfffff7a1
   2e468:	49535f52 	ldmdbmi	r3, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
   2e46c:	49505f5a 	ldmdbmi	r0, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
   2e470:	444d5f44 	strbmi	r5, [sp], #-3908	; 0xfffff0bc
   2e474:	00415441 	subeq	r5, r1, r1, asr #8

0002e478 <.LC22>:
   2e478:	00000030 	andeq	r0, r0, r0, lsr r0

0002e47c <.LC23>:
   2e47c:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
   2e480:	74636173 	strbtvc	r6, [r3], #-371	; 0xfffffe8d
   2e484:	206e6f69 	rsbcs	r6, lr, r9, ror #30
   2e488:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
   2e48c:	28206465 	stmdacs	r0!, {r0, r2, r5, r6, sl, sp, lr}
   2e490:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
   2e494:	30207375 	eorcc	r7, r0, r5, ror r3
   2e498:	29582578 	ldmdbcs	r8, {r3, r4, r5, r6, r8, sl, sp}^
   2e49c:	00000000 	andeq	r0, r0, r0

0002e4a0 <.LC24>:
   2e4a0:	43485744 	movtmi	r5, #34628	; 0x8744
   2e4a4:	61725449 	cmnvs	r2, r9, asr #8
   2e4a8:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
   2e4ac:	61745372 	cmnvs	r4, r2, ror r3
   2e4b0:	61446567 	cmpvs	r4, r7, ror #10
   2e4b4:	65476174 	strbvs	r6, [r7, #-372]	; 0xfffffe8c
   2e4b8:	61745374 	cmnvs	r4, r4, ror r3
   2e4bc:	28206574 	stmdacs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}
   2e4c0:	61745370 	cmnvs	r4, r0, ror r3
   2e4c4:	61446567 	cmpvs	r4, r7, ror #10
   2e4c8:	20296174 	eorcs	r6, r9, r4, ror r1
   2e4cc:	53203d3d 	teqpl	r0, #3904	; 0xf40
   2e4d0:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
   2e4d4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
   2e4d8:	72655065 	rsbvc	r5, r5, #101	; 0x65
   2e4dc:	69646f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
   2e4e0:	6c654463 	cfstrdvs	mvd4, [r5], #-396	; 0xfffffe74
   2e4e4:	00007961 	andeq	r7, r0, r1, ror #18

0002e4e8 <.LC25>:
   2e4e8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e4ec:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e4f0:	68436e5f 	stmdavs	r3, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
   2e4f4:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
   2e4f8:	6c6c416c 	stfvse	f4, [ip], #-432	; 0xfffffe50
   2e4fc:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
   2e500:	26206465 	strtcs	r6, [r0], -r5, ror #8
   2e504:	68436e20 	stmdavs	r3, {r5, r9, sl, fp, sp, lr}^
   2e508:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
   2e50c:	73614d6c 	cmnvc	r1, #108, 26	; 0x1b00
   2e510:	0000006b 	andeq	r0, r0, fp, rrx

0002e514 <.LC26>:
   2e514:	67655270 			; <UNDEFINED> instruction: 0x67655270
   2e518:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
   2e51c:	3d212072 	stccc	0, cr2, [r1, #-456]!	; 0xfffffe38
   2e520:	00003020 	andeq	r3, r0, r0, lsr #32

0002e524 <.LC27>:
   2e524:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
   2e528:	3d21206b 	stccc	0, cr2, [r1, #-428]!	; 0xfffffe54
   2e52c:	00003020 	andeq	r3, r0, r0, lsr #32

0002e530 <.LC28>:
   2e530:	54734d6e 	ldrbtpl	r4, [r3], #-3438	; 0xfffff292
   2e534:	6f656d69 	svcvs	0x00656d69
   2e538:	3e207475 	mcrcc	4, 1, r7, cr0, cr5, {3}
   2e53c:	00003020 	andeq	r3, r0, r0, lsr #32

0002e540 <.LC29>:
   2e540:	30257830 	eorcc	r7, r5, r0, lsr r8
   2e544:	25205838 	strcs	r5, [r0, #-2104]!	; 0xfffff7c8
   2e548:	00000073 	andeq	r0, r0, r3, ror r0

0002e54c <.LC30>:
   2e54c:	5f47544f 	svcpl	0x0047544f
   2e550:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
   2e554:	00000000 	andeq	r0, r0, r0

0002e558 <.LC31>:
   2e558:	5f424841 	svcpl	0x00424841
   2e55c:	00474643 	subeq	r4, r7, r3, asr #12

0002e560 <.LC32>:
   2e560:	5f425355 	svcpl	0x00425355
   2e564:	00474643 	subeq	r4, r7, r3, asr #12

0002e568 <.LC33>:
   2e568:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
   2e56c:	00000054 	andeq	r0, r0, r4, asr r0

0002e570 <.LC34>:
   2e570:	5f544e49 	svcpl	0x00544e49
   2e574:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
   2e578:	00000000 	andeq	r0, r0, r0

0002e57c <.LC35>:
   2e57c:	5f544e49 	svcpl	0x00544e49
   2e580:	4b53414d 	blmi	14feabc <mailbuffer+0x14c39cc>
   2e584:	00000000 	andeq	r0, r0, r0

0002e588 <.LC36>:
   2e588:	465f5852 			; <UNDEFINED> instruction: 0x465f5852
   2e58c:	5f4f4649 	svcpl	0x004f4649
   2e590:	005a4953 	subseq	r4, sl, r3, asr r9

0002e594 <.LC37>:
   2e594:	5245504e 	subpl	r5, r5, #78	; 0x4e
   2e598:	5f58545f 	svcpl	0x0058545f
   2e59c:	4f464946 	svcmi	0x00464946
   2e5a0:	5a49535f 	bpl	1283324 <mailbuffer+0x1248234>
   2e5a4:	00000000 	andeq	r0, r0, r0

0002e5a8 <.LC38>:
   2e5a8:	5245504e 	subpl	r5, r5, #78	; 0x4e
   2e5ac:	5f58545f 	svcpl	0x0058545f
   2e5b0:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
   2e5b4:	00000000 	andeq	r0, r0, r0

0002e5b8 <.LC39>:
   2e5b8:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e5bc:	5245505f 	subpl	r5, r5, #95	; 0x5f
   2e5c0:	5f58545f 	svcpl	0x0058545f
   2e5c4:	4f464946 	svcmi	0x00464946
   2e5c8:	5a49535f 	bpl	128334c <mailbuffer+0x124825c>
   2e5cc:	00000000 	andeq	r0, r0, r0

0002e5d0 <.LC40>:
   2e5d0:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e5d4:	4746435f 	smlsldmi	r4, r6, pc, r3	; <UNPREDICTABLE>
   2e5d8:	00000000 	andeq	r0, r0, r0

0002e5dc <.LC41>:
   2e5dc:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e5e0:	5245505f 	subpl	r5, r5, #95	; 0x5f
   2e5e4:	5f58545f 	svcpl	0x0058545f
   2e5e8:	4f464946 	svcmi	0x00464946
   2e5ec:	4154535f 	cmpmi	r4, pc, asr r3
   2e5f0:	00000054 	andeq	r0, r0, r4, asr r0

0002e5f4 <.LC42>:
   2e5f4:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e5f8:	4c4c415f 	stfmie	f4, [ip], {95}	; 0x5f
   2e5fc:	4e414843 	cdpmi	8, 4, cr4, cr1, cr3, {2}
   2e600:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
   2e604:	00000000 	andeq	r0, r0, r0

0002e608 <.LC43>:
   2e608:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e60c:	4c4c415f 	stfmie	f4, [ip], {95}	; 0x5f
   2e610:	4e414843 	cdpmi	8, 4, cr4, cr1, cr3, {2}
   2e614:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
   2e618:	53414d5f 	movtpl	r4, #7519	; 0x1d5f
   2e61c:	0000004b 	andeq	r0, r0, fp, asr #32

0002e620 <.LC44>:
   2e620:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e624:	524f505f 	subpl	r5, pc, #95	; 0x5f
   2e628:	00000054 	andeq	r0, r0, r4, asr r0

0002e62c <.LC45>:
   2e62c:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e630:	4148435f 	cmpmi	r8, pc, asr r3
   2e634:	48435f4e 	stmdami	r3, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
   2e638:	43415241 	movtmi	r5, #4673	; 0x1241
   2e63c:	28524554 	ldmdacs	r2, {r2, r4, r6, r8, sl, lr}^
   2e640:	0000296e 	andeq	r2, r0, lr, ror #18

0002e644 <.LC46>:
   2e644:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e648:	4148435f 	cmpmi	r8, pc, asr r3
   2e64c:	50535f4e 	subspl	r5, r3, lr, asr #30
   2e650:	5f54494c 	svcpl	0x0054494c
   2e654:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
   2e658:	00296e28 	eoreq	r6, r9, r8, lsr #28

0002e65c <.LC47>:
   2e65c:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e660:	4148435f 	cmpmi	r8, pc, asr r3
   2e664:	4e495f4e 	cdpmi	15, 4, cr5, cr9, cr14, {2}
   2e668:	296e2854 	stmdbcs	lr!, {r2, r4, r6, fp, sp}^
   2e66c:	00000000 	andeq	r0, r0, r0

0002e670 <.LC48>:
   2e670:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e674:	4148435f 	cmpmi	r8, pc, asr r3
   2e678:	4e495f4e 	cdpmi	15, 4, cr5, cr9, cr14, {2}
   2e67c:	414d5f54 	cmpmi	sp, r4, asr pc
   2e680:	6e284b53 	mcrvs	11, 1, r4, cr8, cr3, {2}
   2e684:	00000029 	andeq	r0, r0, r9, lsr #32

0002e688 <.LC49>:
   2e688:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e68c:	4148435f 	cmpmi	r8, pc, asr r3
   2e690:	46585f4e 	ldrbmi	r5, [r8], -lr, asr #30
   2e694:	535f5245 	cmppl	pc, #1342177284	; 0x50000004
   2e698:	6e285a49 	vnmulvs.f32	s10, s16, s18
   2e69c:	00000029 	andeq	r0, r0, r9, lsr #32

0002e6a0 <.LC50>:
   2e6a0:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2e6a4:	4148435f 	cmpmi	r8, pc, asr r3
   2e6a8:	4d445f4e 	stclmi	15, cr5, [r4, #-312]	; 0xfffffec8
   2e6ac:	44415f41 	strbmi	r5, [r1], #-3905	; 0xfffff0bf
   2e6b0:	6e285244 	cdpvs	2, 2, cr5, cr8, cr4, {2}
   2e6b4:	00000029 	andeq	r0, r0, r9, lsr #32

0002e6b8 <.LC0>:
   2e6b8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e6bc:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2e6c0:	00003020 	andeq	r3, r0, r0, lsr #32

0002e6c4 <.LC1>:
   2e6c4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2e610 <.LC43+0x8>
   2e6c8:	6a6c2f65 	bvs	1b3a464 <mailbuffer+0x1aff374>
   2e6cc:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2e6d0:	2f727566 	svccs	0x00727566
   2e6d4:	6b736544 	blvs	1d07bec <mailbuffer+0x1cccafc>
   2e6d8:	2f706f74 	svccs	0x00706f74
   2e6dc:	2f697072 	svccs	0x00697072
   2e6e0:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2e6e4:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2e6e8:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2e6ec:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2e6f0:	534f5452 	movtpl	r5, #62546	; 0xf452
   2e6f4:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2e6f8:	2f726574 	svccs	0x00726574
   2e6fc:	6f6d6544 	svcvs	0x006d6544
   2e700:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2e704:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2e708:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2e70c:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2e710:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2e714:	6877642f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, sl, sp, lr}^
   2e718:	65726963 	ldrbvs	r6, [r2, #-2403]!	; 0xfffff69d
   2e71c:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
   2e720:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
   2e724:	00000000 	andeq	r0, r0, r0

0002e728 <.LC2>:
   2e728:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e72c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e730:	6156625f 	cmpvs	r6, pc, asr r2
   2e734:	0064696c 	rsbeq	r6, r4, ip, ror #18

0002e738 <.LC3>:
   2e738:	7469426e 	strbtvc	r4, [r9], #-622	; 0xfffffd92
   2e73c:	73203c20 	teqvc	r0, #32, 24	; 0x2000
   2e740:	6f657a69 	svcvs	0x00657a69
   2e744:	54702066 	ldrbtpl	r2, [r0], #-102	; 0xffffff9a
   2e748:	2d736968 	ldclcs	9, cr6, [r3, #-416]!	; 0xfffffe60
   2e74c:	6e5f6d3e 	mrcvs	13, 2, r6, cr15, cr14, {1}
   2e750:	66667542 	strbtvs	r7, [r6], -r2, asr #10
   2e754:	2a207265 	bcs	84b0f0 <mailbuffer+0x810000>
   2e758:	00003820 	andeq	r3, r0, r0, lsr #16

0002e75c <.LC4>:
   2e75c:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
   2e760:	00000069 	andeq	r0, r0, r9, rrx

0002e764 <.LC5>:
   2e764:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
   2e768:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
   2e76c:	20746120 	rsbscs	r6, r4, r0, lsr #2
   2e770:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
   2e774:	20736920 	rsbscs	r6, r3, r0, lsr #18
   2e778:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
   2e77c:	00000000 	andeq	r0, r0, r0

0002e780 <.LC6>:
   2e780:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
   2e784:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
   2e788:	20746120 	rsbscs	r6, r4, r0, lsr #2
   2e78c:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
   2e790:	73617720 	cmnvc	r1, #32, 14	; 0x800000
   2e794:	746f6e20 	strbtvc	r6, [pc], #-3616	; 2e79c <.LC6+0x1c>
   2e798:	74657320 	strbtvc	r7, [r5], #-800	; 0xfffffce0
   2e79c:	00000000 	andeq	r0, r0, r0

0002e7a0 <.LC0>:
   2e7a0:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e7a4:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2e7a8:	00003020 	andeq	r3, r0, r0, lsr #32

0002e7ac <.LC1>:
   2e7ac:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2e6f8 <.LC1+0x34>
   2e7b0:	6a6c2f65 	bvs	1b3a54c <mailbuffer+0x1aff45c>
   2e7b4:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2e7b8:	2f727566 	svccs	0x00727566
   2e7bc:	6b736544 	blvs	1d07cd4 <mailbuffer+0x1cccbe4>
   2e7c0:	2f706f74 	svccs	0x00706f74
   2e7c4:	2f697072 	svccs	0x00697072
   2e7c8:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2e7cc:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2e7d0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2e7d4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2e7d8:	534f5452 	movtpl	r5, #62546	; 0xf452
   2e7dc:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2e7e0:	2f726574 	svccs	0x00726574
   2e7e4:	6f6d6544 	svcvs	0x006d6544
   2e7e8:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2e7ec:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2e7f0:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2e7f4:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2e7f8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2e7fc:	6877642f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, sl, sp, lr}^
   2e800:	66786963 	ldrbtvs	r6, [r8], -r3, ror #18
   2e804:	74737265 	ldrbtvc	r7, [r3], #-613	; 0xfffffd9b
   2e808:	64656761 	strbtvs	r6, [r5], #-1889	; 0xfffff89f
   2e80c:	2e617461 	cdpcs	4, 6, cr7, cr1, cr1, {3}
   2e810:	00000063 	andeq	r0, r0, r3, rrx

0002e814 <.LC2>:
   2e814:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e818:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e81c:	5255705f 	subspl	r7, r5, #95	; 0x5f
   2e820:	3d212042 	stccc	0, cr2, [r1, #-264]!	; 0xfffffef8
   2e824:	00003020 	andeq	r3, r0, r0, lsr #32

0002e828 <.LC3>:
   2e828:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e82c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e830:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2e834:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2e838:	2120746e 	teqcs	r0, lr, ror #8
   2e83c:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002e840 <.LC4>:
   2e840:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e844:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e848:	6544705f 	strbvs	r7, [r4, #-95]	; 0xffffffa1
   2e84c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   2e850:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2e854:	00000030 	andeq	r0, r0, r0, lsr r0

0002e858 <.LC5>:
   2e858:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e85c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e860:	6554705f 	ldrbvs	r7, [r4, #-95]	; 0xffffffa1
   2e864:	7542706d 	strbvc	r7, [r2, #-109]	; 0xffffff93
   2e868:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
   2e86c:	203d3d20 	eorscs	r3, sp, r0, lsr #26
   2e870:	00000030 	andeq	r0, r0, r0, lsr r0

0002e874 <.LC6>:
   2e874:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e878:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e87c:	6554705f 	ldrbvs	r7, [r4, #-95]	; 0xffffffa1
   2e880:	7542706d 	strbvc	r7, [r2, #-109]	; 0xffffff93
   2e884:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
   2e888:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2e88c:	00000030 	andeq	r0, r0, r0, lsr r0

0002e890 <.LC7>:
   2e890:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e894:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e898:	7542705f 	strbvc	r7, [r2, #-95]	; 0xffffffa1
   2e89c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
   2e8a0:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
   2e8a4:	20726574 	rsbscs	r6, r2, r4, ror r5
   2e8a8:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2e8ac:	00000000 	andeq	r0, r0, r0

0002e8b0 <.LC8>:
   2e8b0:	33752828 	cmncc	r5, #40, 16	; 0x280000
   2e8b4:	70202932 	eorvc	r2, r0, r2, lsr r9
   2e8b8:	73696854 	cmnvc	r9, #84, 16	; 0x540000
   2e8bc:	5f6d3e2d 	svcpl	0x006d3e2d
   2e8c0:	66754270 			; <UNDEFINED> instruction: 0x66754270
   2e8c4:	50726566 	rsbspl	r6, r2, r6, ror #10
   2e8c8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
   2e8cc:	26207265 	strtcs	r7, [r0], -r5, ror #4
   2e8d0:	20293320 	eorcs	r3, r9, r0, lsr #6
   2e8d4:	30203d3d 	eorcc	r3, r0, sp, lsr sp
   2e8d8:	00000000 	andeq	r0, r0, r0

0002e8dc <.LC9>:
   2e8dc:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e8e0:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e8e4:	7246705f 	subvc	r7, r6, #95	; 0x5f
   2e8e8:	53656d61 	cmnpl	r5, #6208	; 0x1840
   2e8ec:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
   2e8f0:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
   2e8f4:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2e8f8:	00000030 	andeq	r0, r0, r0, lsr r0

0002e8fc <.LC10>:
   2e8fc:	6361506e 	cmnvs	r1, #110	; 0x6e
   2e900:	7374656b 	cmnvc	r4, #448790528	; 0x1ac00000
   2e904:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
   2e908:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
   2e90c:	3c206465 	cfstrscc	mvf6, [r0], #-404	; 0xfffffe6c
   2e910:	5470203d 	ldrbtpl	r2, [r0], #-61	; 0xffffffc3
   2e914:	2d736968 	ldclcs	9, cr6, [r3, #-416]!	; 0xfffffe60
   2e918:	6e5f6d3e 	mrcvs	13, 2, r6, cr15, cr14, {1}
   2e91c:	6b636150 	blvs	1906e64 <mailbuffer+0x18cbd74>
   2e920:	00737465 	rsbseq	r7, r3, r5, ror #8

0002e924 <.LC11>:
   2e924:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e928:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e92c:	6f546e5f 	svcvs	0x00546e5f
   2e930:	426c6174 	rsbmi	r6, ip, #116, 2
   2e934:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
   2e938:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
   2e93c:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
   2e940:	3c206465 	cfstrscc	mvf6, [r0], #-404	; 0xfffffe6c
   2e944:	5470203d 	ldrbtpl	r2, [r0], #-61	; 0xffffffc3
   2e948:	2d736968 	ldclcs	9, cr6, [r3, #-416]!	; 0xfffffe60
   2e94c:	6e5f6d3e 	mrcvs	13, 2, r6, cr15, cr14, {1}
   2e950:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
   2e954:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
   2e958:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
   2e95c:	00000000 	andeq	r0, r0, r0

0002e960 <.LC12>:
   2e960:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e964:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e968:	7053625f 	subsvc	r6, r3, pc, asr r2
   2e96c:	5474696c 	ldrbtpl	r6, [r4], #-2412	; 0xfffff694
   2e970:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
   2e974:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
   2e978:	00006e6f 	andeq	r6, r0, pc, ror #28

0002e97c <.LC13>:
   2e97c:	00000030 	andeq	r0, r0, r0, lsr r0

0002e980 <.LC14>:
   2e980:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e984:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e988:	72546e5f 	subsvc	r6, r4, #1520	; 0x5f0
   2e98c:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
   2e990:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
   2e994:	3c20657a 	cfstr32cc	mvfx6, [r0], #-488	; 0xfffffe18
   2e998:	3831203d 	ldmdacc	r1!, {r0, r2, r3, r4, r5, sp}
   2e99c:	00000038 	andeq	r0, r0, r8, lsr r0

0002e9a0 <.LC15>:
   2e9a0:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e9a4:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2e9a8:	72546e5f 	subsvc	r6, r4, #1520	; 0x5f0
   2e9ac:	61736e61 	cmnvs	r3, r1, ror #28
   2e9b0:	6f697463 	svcvs	0x00697463
   2e9b4:	6174536e 	cmnvs	r4, lr, ror #6
   2e9b8:	20737574 	rsbscs	r7, r3, r4, ror r5
   2e9bc:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2e9c0:	00000000 	andeq	r0, r0, r0

0002e9c4 <.LC0>:
   2e9c4:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2e9c8:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2e9cc:	00003020 	andeq	r3, r0, r0, lsr #32

0002e9d0 <.LC1>:
   2e9d0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2e91c <.LC10+0x20>
   2e9d4:	6a6c2f65 	bvs	1b3a770 <mailbuffer+0x1aff680>
   2e9d8:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2e9dc:	2f727566 	svccs	0x00727566
   2e9e0:	6b736544 	blvs	1d07ef8 <mailbuffer+0x1ccce08>
   2e9e4:	2f706f74 	svccs	0x00706f74
   2e9e8:	2f697072 	svccs	0x00697072
   2e9ec:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2e9f0:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2e9f4:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2e9f8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2e9fc:	534f5452 	movtpl	r5, #62546	; 0xf452
   2ea00:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2ea04:	2f726574 	svccs	0x00726574
   2ea08:	6f6d6544 	svcvs	0x006d6544
   2ea0c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2ea10:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2ea14:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2ea18:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2ea1c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2ea20:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   2ea24:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
   2ea28:	61706769 	cmnvs	r0, r9, ror #14
   2ea2c:	72657372 	rsbvc	r7, r5, #-939524095	; 0xc8000001
   2ea30:	0000632e 	andeq	r6, r0, lr, lsr #6

0002ea34 <.LC2>:
   2ea34:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ea38:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2ea3c:	7542705f 	strbvc	r7, [r2, #-95]	; 0xffffffa1
   2ea40:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
   2ea44:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2ea48:	00000030 	andeq	r0, r0, r0, lsr r0

0002ea4c <.LC3>:
   2ea4c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ea50:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2ea54:	6156625f 	cmpvs	r6, pc, asr r2
   2ea58:	0064696c 	rsbeq	r6, r4, ip, ror #18

0002ea5c <.LC4>:
   2ea5c:	73654470 	cmnvc	r5, #112, 8	; 0x70000000
   2ea60:	646e4563 	strbtvs	r4, [lr], #-1379	; 0xfffffa9d
   2ea64:	203d3c20 	eorscs	r3, sp, r0, lsr #24
   2ea68:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ea6c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2ea70:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2ea74:	736f5064 	cmnvc	pc, #100	; 0x64
   2ea78:	6f697469 	svcvs	0x00697469
   2ea7c:	0000006e 	andeq	r0, r0, lr, rrx

0002ea80 <.LC5>:
   2ea80:	756f5370 	strbvc	r5, [pc, #-880]!	; 2e718 <.LC1+0x54>
   2ea84:	20656372 	rsbcs	r6, r5, r2, ror r3
   2ea88:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2ea8c:	00000000 	andeq	r0, r0, r0

0002ea90 <.LC6>:
   2ea90:	61766e49 	cmnvs	r6, r9, asr #28
   2ea94:	2064696c 	rsbcs	r6, r4, ip, ror #18
   2ea98:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
   2ea9c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
   2eaa0:	6f697461 	svcvs	0x00697461
   2eaa4:	6564206e 	strbvs	r2, [r4, #-110]!	; 0xffffff92
   2eaa8:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
   2eaac:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
   2eab0:	666f2820 	strbtvs	r2, [pc], -r0, lsr #16
   2eab4:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
   2eab8:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
   2eabc:	00002958 	andeq	r2, r0, r8, asr r9

0002eac0 <FromDevice>:
   2eac0:	64627375 	strbtvs	r7, [r2], #-885	; 0xfffffc8b
   2eac4:	00007665 	andeq	r7, r0, r5, ror #12

0002eac8 <.LC0>:
   2eac8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2eacc:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2ead0:	00003020 	andeq	r3, r0, r0, lsr #32

0002ead4 <.LC1>:
   2ead4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2ea20 <.LC1+0x50>
   2ead8:	6a6c2f65 	bvs	1b3a874 <mailbuffer+0x1aff784>
   2eadc:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2eae0:	2f727566 	svccs	0x00727566
   2eae4:	6b736544 	blvs	1d07ffc <mailbuffer+0x1cccf0c>
   2eae8:	2f706f74 	svccs	0x00706f74
   2eaec:	2f697072 	svccs	0x00697072
   2eaf0:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2eaf4:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2eaf8:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2eafc:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2eb00:	534f5452 	movtpl	r5, #62546	; 0xf452
   2eb04:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2eb08:	2f726574 	svccs	0x00726574
   2eb0c:	6f6d6544 	svcvs	0x006d6544
   2eb10:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2eb14:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2eb18:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2eb1c:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2eb20:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2eb24:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   2eb28:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
   2eb2c:	632e6563 	teqvs	lr, #415236096	; 0x18c00000
   2eb30:	00000000 	andeq	r0, r0, r0

0002eb34 <.LC2>:
   2eb34:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2eb38:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2eb3c:	6f48705f 	svcvs	0x0048705f
   2eb40:	21207473 	teqcs	r0, r3, ror r4
   2eb44:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002eb48 <.LC3>:
   2eb48:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2eb4c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2eb50:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2eb54:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2eb58:	2030746e 	eorscs	r7, r0, lr, ror #8
   2eb5c:	30203d3d 	eorcc	r3, r0, sp, lsr sp
   2eb60:	00000000 	andeq	r0, r0, r0

0002eb64 <.LC4>:
   2eb64:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2eb68:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2eb6c:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2eb70:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2eb74:	2030746e 	eorscs	r7, r0, lr, ror #8
   2eb78:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2eb7c:	00000000 	andeq	r0, r0, r0

0002eb80 <.LC5>:
   2eb80:	75486375 	strbvc	r6, [r8, #-885]	; 0xfffffc8b
   2eb84:	726f5062 	rsbvc	r5, pc, #98	; 0x62
   2eb88:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
   2eb8c:	20726562 	rsbscs	r6, r2, r2, ror #10
   2eb90:	31203d3e 	teqcc	r0, lr, lsr sp
   2eb94:	00000000 	andeq	r0, r0, r0

0002eb98 <.LC6>:
   2eb98:	76654470 			; <UNDEFINED> instruction: 0x76654470
   2eb9c:	20656369 	rsbcs	r6, r5, r9, ror #6
   2eba0:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2eba4:	00000000 	andeq	r0, r0, r0

0002eba8 <.LC7>:
   2eba8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ebac:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2ebb0:	6544705f 	strbvs	r7, [r4, #-95]	; 0xffffffa1
   2ebb4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   2ebb8:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
   2ebbc:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2ebc0:	00000030 	andeq	r0, r0, r0, lsr r0

0002ebc4 <.LC8>:
   2ebc4:	746f546e 	strbtvc	r5, [pc], #-1134	; 2ebcc <.LC8+0x8>
   2ebc8:	654c6c61 	strbvs	r6, [ip, #-3169]	; 0xfffff39f
   2ebcc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
   2ebd0:	203d3c20 	eorscs	r3, sp, r0, lsr #24
   2ebd4:	5f58414d 	svcpl	0x0058414d
   2ebd8:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
   2ebdc:	445f4749 	ldrbmi	r4, [pc], #-1865	; 2ebe4 <.LC8+0x20>
   2ebe0:	5f435345 	svcpl	0x00435345
   2ebe4:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
   2ebe8:	00000000 	andeq	r0, r0, r0

0002ebec <.LC9>:
   2ebec:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ebf0:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2ebf4:	6f43705f 	svcvs	0x0043705f
   2ebf8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
   2ebfc:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
   2ec00:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2ec04:	00000030 	andeq	r0, r0, r0, lsr r0

0002ec08 <.LC10>:
   2ec08:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ec0c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2ec10:	6f43705f 	svcvs	0x0043705f
   2ec14:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
   2ec18:	73726150 	cmnvc	r2, #80, 2
   2ec1c:	21207265 	teqcs	r0, r5, ror #4
   2ec20:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002ec24 <.LC11>:
   2ec24:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ec28:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2ec2c:	6544705f 	strbvs	r7, [r4, #-95]	; 0xffffffa1
   2ec30:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   2ec34:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
   2ec38:	203d3d20 	eorscs	r3, sp, r0, lsr #26
   2ec3c:	00000030 	andeq	r0, r0, r0, lsr r0

0002ec40 <.LC12>:
   2ec40:	6e6e6143 	powvsem	f6, f6, f3
   2ec44:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   2ec48:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
   2ec4c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
   2ec50:	65642065 	strbvs	r2, [r4, #-101]!	; 0xffffff9b
   2ec54:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
   2ec58:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
   2ec5c:	68732820 	ldmdavs	r3!, {r5, fp, sp}^
   2ec60:	2974726f 	ldmdbcs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
   2ec64:	00000000 	andeq	r0, r0, r0

0002ec68 <.LC13>:
   2ec68:	61766e49 	cmnvs	r6, r9, asr #28
   2ec6c:	2064696c 	rsbcs	r6, r4, ip, ror #18
   2ec70:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
   2ec74:	64206563 	strtvs	r6, [r0], #-1379	; 0xfffffa9d
   2ec78:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
   2ec7c:	6f747069 	svcvs	0x00747069
   2ec80:	00000072 	andeq	r0, r0, r2, ror r0

0002ec84 <.LC14>:
   2ec84:	6e6e6143 	powvsem	f6, f6, f3
   2ec88:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   2ec8c:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
   2ec90:	63697665 	cmnvs	r9, #105906176	; 0x6500000
   2ec94:	65642065 	strbvs	r2, [r4, #-101]!	; 0xffffff9b
   2ec98:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
   2ec9c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
   2eca0:	00000000 	andeq	r0, r0, r0

0002eca4 <.LC15>:
   2eca4:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
   2eca8:	796e616d 	stmdbvc	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}^
   2ecac:	76656420 	strbtvc	r6, [r5], -r0, lsr #8
   2ecb0:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
   2ecb4:	00000000 	andeq	r0, r0, r0

0002ecb8 <.LC16>:
   2ecb8:	6e6e6143 	powvsem	f6, f6, f3
   2ecbc:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   2ecc0:	61207465 	teqvs	r0, r5, ror #8
   2ecc4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
   2ecc8:	25207373 	strcs	r7, [r0, #-883]!	; 0xfffffc8d
   2eccc:	00000075 	andeq	r0, r0, r5, ror r0

0002ecd0 <.LC17>:
   2ecd0:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ecd4:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2ecd8:	6f43705f 	svcvs	0x0043705f
   2ecdc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
   2ece0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
   2ece4:	203d3d20 	eorscs	r3, sp, r0, lsr #26
   2ece8:	00000030 	andeq	r0, r0, r0, lsr r0

0002ecec <.LC18>:
   2ecec:	6e6e6143 	powvsem	f6, f6, f3
   2ecf0:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   2ecf4:	63207465 	teqvs	r0, #1694498816	; 0x65000000
   2ecf8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   2ecfc:	61727567 	cmnvs	r2, r7, ror #10
   2ed00:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   2ed04:	73656420 	cmnvc	r5, #32, 8	; 0x20000000
   2ed08:	70697263 	rsbvc	r7, r9, r3, ror #4
   2ed0c:	20726f74 	rsbscs	r6, r2, r4, ror pc
   2ed10:	6f687328 	svcvs	0x00687328
   2ed14:	00297472 	eoreq	r7, r9, r2, ror r4

0002ed18 <.LC19>:
   2ed18:	61766e49 	cmnvs	r6, r9, asr #28
   2ed1c:	2064696c 	rsbcs	r6, r4, ip, ror #18
   2ed20:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
   2ed24:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
   2ed28:	6f697461 	svcvs	0x00697461
   2ed2c:	6564206e 	strbvs	r2, [r4, #-110]!	; 0xffffff92
   2ed30:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
   2ed34:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
   2ed38:	00000000 	andeq	r0, r0, r0

0002ed3c <.LC20>:
   2ed3c:	6e6e6143 	powvsem	f6, f6, f3
   2ed40:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   2ed44:	63207465 	teqvs	r0, #1694498816	; 0x65000000
   2ed48:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   2ed4c:	61727567 	cmnvs	r2, r7, ror #10
   2ed50:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   2ed54:	73656420 	cmnvc	r5, #32, 8	; 0x20000000
   2ed58:	70697263 	rsbvc	r7, r9, r3, ror #4
   2ed5c:	00726f74 	rsbseq	r6, r2, r4, ror pc

0002ed60 <.LC21>:
   2ed60:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ed64:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2ed68:	6f43705f 	svcvs	0x0043705f
   2ed6c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
   2ed70:	73726150 	cmnvc	r2, #80, 2
   2ed74:	3d207265 	sfmcc	f7, 4, [r0, #-404]!	; 0xfffffe6c
   2ed78:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002ed7c <.LC22>:
   2ed7c:	6e6e6143 	powvsem	f6, f6, f3
   2ed80:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   2ed84:	63207465 	teqvs	r0, #1694498816	; 0x65000000
   2ed88:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   2ed8c:	61727567 	cmnvs	r2, r7, ror #10
   2ed90:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   2ed94:	75252820 	strvc	r2, [r5, #-2080]!	; 0xfffff7e0
   2ed98:	00000029 	andeq	r0, r0, r9, lsr #32

0002ed9c <.LC23>:
   2ed9c:	72745370 	rsbsvc	r5, r4, #112, 6	; 0xc0000001
   2eda0:	20676e69 	rsbcs	r6, r7, r9, ror #28
   2eda4:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2eda8:	00000000 	andeq	r0, r0, r0

0002edac <.LC24>:
   2edac:	256e6576 	strbcs	r6, [lr, #-1398]!	; 0xfffffa8a
   2edb0:	78252d78 	stmdavc	r5!, {r3, r4, r5, r6, r8, sl, fp, sp}
   2edb4:	00000000 	andeq	r0, r0, r0

0002edb8 <.LC25>:
   2edb8:	25766564 	ldrbcs	r6, [r6, #-1380]!	; 0xfffffa9c
   2edbc:	78252d78 	stmdavc	r5!, {r3, r4, r5, r6, r8, sl, fp, sp}
   2edc0:	0078252d 	rsbseq	r2, r8, sp, lsr #10

0002edc4 <.LC26>:
   2edc4:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
   2edc8:	20676966 	rsbcs	r6, r7, r6, ror #18
   2edcc:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2edd0:	00000000 	andeq	r0, r0, r0

0002edd4 <.LC27>:
   2edd4:	25746e69 	ldrbcs	r6, [r4, #-3689]!	; 0xfffff197
   2edd8:	78252d78 	stmdavc	r5!, {r3, r4, r5, r6, r8, sl, fp, sp}
   2eddc:	0078252d 	rsbseq	r2, r8, sp, lsr #10

0002ede0 <.LC28>:
   2ede0:	00000030 	andeq	r0, r0, r0, lsr r0

0002ede4 <.LC29>:
   2ede4:	6e6b6e75 	mcrvs	14, 3, r6, cr11, cr5, {3}
   2ede8:	006e776f 	rsbeq	r7, lr, pc, ror #14

0002edec <.LC30>:
   2edec:	64416375 	strbvs	r6, [r1], #-885	; 0xfffffc8b
   2edf0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
   2edf4:	3d3c2073 	ldccc	0, cr2, [ip, #-460]!	; 0xfffffe34
   2edf8:	42535520 	subsmi	r5, r3, #32, 10	; 0x8000000
   2edfc:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
   2ee00:	4444415f 	strbmi	r4, [r4], #-351	; 0xfffffea1
   2ee04:	53534552 	cmppl	r3, #343932928	; 0x14800000
   2ee08:	00000000 	andeq	r0, r0, r0

0002ee0c <.LC0>:
   2ee0c:	72615070 	rsbvc	r5, r1, #112	; 0x70
   2ee10:	20746e65 	rsbscs	r6, r4, r5, ror #28
   2ee14:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2ee18:	00000000 	andeq	r0, r0, r0

0002ee1c <.LC1>:
   2ee1c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2ed68 <.LC21+0x8>
   2ee20:	6a6c2f65 	bvs	1b3abbc <mailbuffer+0x1affacc>
   2ee24:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2ee28:	2f727566 	svccs	0x00727566
   2ee2c:	6b736544 	blvs	1d08344 <mailbuffer+0x1ccd254>
   2ee30:	2f706f74 	svccs	0x00706f74
   2ee34:	2f697072 	svccs	0x00697072
   2ee38:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2ee3c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2ee40:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2ee44:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2ee48:	534f5452 	movtpl	r5, #62546	; 0xf452
   2ee4c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2ee50:	2f726574 	svccs	0x00726574
   2ee54:	6f6d6544 	svcvs	0x006d6544
   2ee58:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2ee5c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2ee60:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2ee64:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2ee68:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2ee6c:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   2ee70:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
   2ee74:	61666563 	cmnvs	r6, r3, ror #10
   2ee78:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
   2ee7c:	00632e79 	rsbeq	r2, r3, r9, ror lr

0002ee80 <.LC2>:
   2ee80:	73655270 	cmnvc	r5, #112, 4
   2ee84:	20746c75 	rsbscs	r6, r4, r5, ror ip
   2ee88:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2ee8c:	00000000 	andeq	r0, r0, r0

0002ee90 <.LC3>:
   2ee90:	6d614e70 	stclvs	14, cr4, [r1, #-448]!	; 0xfffffe40
   2ee94:	3d212065 	stccc	0, cr2, [r1, #-404]!	; 0xfffffe6c
   2ee98:	00003020 	andeq	r3, r0, r0, lsr #32

0002ee9c <.LC4>:
   2ee9c:	39766564 	ldmdbcc	r6!, {r2, r5, r6, r8, sl, sp, lr}^
   2eea0:	322d302d 	eorcc	r3, sp, #45	; 0x2d
   2eea4:	00000000 	andeq	r0, r0, r0

0002eea8 <.LC5>:
   2eea8:	76654470 			; <UNDEFINED> instruction: 0x76654470
   2eeac:	20656369 	rsbcs	r6, r5, r9, ror #6
   2eeb0:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2eeb4:	00000000 	andeq	r0, r0, r0

0002eeb8 <.LC6>:
   2eeb8:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
   2eebc:	352d362d 	strcc	r3, [sp, #-1581]!	; 0xfffff9d3
   2eec0:	00000030 	andeq	r0, r0, r0, lsr r0

0002eec4 <.LC7>:
   2eec4:	33746e69 	cmncc	r4, #1680	; 0x690
   2eec8:	312d312d 	teqcc	sp, sp, lsr #2
   2eecc:	00000000 	andeq	r0, r0, r0

0002eed0 <.LC8>:
   2eed0:	33746e69 	cmncc	r4, #1680	; 0x690
   2eed4:	322d312d 	eorcc	r3, sp, #1073741835	; 0x4000000b
   2eed8:	00000000 	andeq	r0, r0, r0

0002eedc <.LC9>:
   2eedc:	346e6576 	strbtcc	r6, [lr], #-1398	; 0xfffffa8a
   2eee0:	652d3432 	strvs	r3, [sp, #-1074]!	; 0xfffffbce
   2eee4:	00303063 	eorseq	r3, r0, r3, rrx

0002eee8 <.LC10>:
   2eee8:	33746e69 	cmncc	r4, #1680	; 0x690
   2eeec:	302d302d 	eorcc	r3, sp, sp, lsr #32
   2eef0:	00000000 	andeq	r0, r0, r0

0002eef4 <.LC11>:
   2eef4:	64627375 	strbtvs	r7, [r2], #-885	; 0xfffffc8b
   2eef8:	00007665 	andeq	r7, r0, r5, ror #12

0002eefc <.LC12>:
   2eefc:	6e697355 	mcrvs	3, 3, r7, cr9, cr5, {2}
   2ef00:	65642067 	strbvs	r2, [r4, #-103]!	; 0xffffff99
   2ef04:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   2ef08:	00732520 	rsbseq	r2, r3, r0, lsr #10

0002ef0c <.LC0>:
   2ef0c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ef10:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2ef14:	00003020 	andeq	r3, r0, r0, lsr #32

0002ef18 <.LC1>:
   2ef18:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2ee64 <.LC1+0x48>
   2ef1c:	6a6c2f65 	bvs	1b3acb8 <mailbuffer+0x1affbc8>
   2ef20:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2ef24:	2f727566 	svccs	0x00727566
   2ef28:	6b736544 	blvs	1d08440 <mailbuffer+0x1ccd350>
   2ef2c:	2f706f74 	svccs	0x00706f74
   2ef30:	2f697072 	svccs	0x00697072
   2ef34:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2ef38:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2ef3c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2ef40:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2ef44:	534f5452 	movtpl	r5, #62546	; 0xf452
   2ef48:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2ef4c:	2f726574 	svccs	0x00726574
   2ef50:	6f6d6544 	svcvs	0x006d6544
   2ef54:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2ef58:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2ef5c:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2ef60:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2ef64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2ef68:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   2ef6c:	70646e65 	rsbvc	r6, r4, r5, ror #28
   2ef70:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
   2ef74:	0000632e 	andeq	r6, r0, lr, lsr #6

0002ef78 <.LC2>:
   2ef78:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2ef7c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2ef80:	6544705f 	strbvs	r7, [r4, #-95]	; 0xffffffa1
   2ef84:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   2ef88:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2ef8c:	00000030 	andeq	r0, r0, r0, lsr r0

0002ef90 <.LC3>:
   2ef90:	73654470 	cmnvc	r5, #112, 8	; 0x70000000
   2ef94:	3d212063 	stccc	0, cr2, [r1, #-396]!	; 0xfffffe74
   2ef98:	00003020 	andeq	r3, r0, r0, lsr #32

0002ef9c <.LC4>:
   2ef9c:	73654470 	cmnvc	r5, #112, 8	; 0x70000000
   2efa0:	623e2d63 	eorsvs	r2, lr, #6336	; 0x18c0
   2efa4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
   2efa8:	3d206874 	stccc	8, cr6, [r0, #-464]!	; 0xfffffe30
   2efac:	6973203d 	ldmdbvs	r3!, {r0, r2, r3, r4, r5, sp}^
   2efb0:	666f657a 			; <UNDEFINED> instruction: 0x666f657a
   2efb4:	44702a20 	ldrbtmi	r2, [r0], #-2592	; 0xfffff5e0
   2efb8:	00637365 	rsbeq	r7, r3, r5, ror #6

0002efbc <.LC5>:
   2efbc:	73654470 	cmnvc	r5, #112, 8	; 0x70000000
   2efc0:	623e2d63 	eorsvs	r2, lr, #6336	; 0x18c0
   2efc4:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
   2efc8:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
   2efcc:	7954726f 	ldmdbvc	r4, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
   2efd0:	3d206570 	cfstr32cc	mvfx6, [r0, #-448]!	; 0xfffffe40
   2efd4:	4544203d 	strbmi	r2, [r4, #-61]	; 0xffffffc3
   2efd8:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
   2efdc:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
   2efe0:	444e455f 	strbmi	r4, [lr], #-1375	; 0xfffffaa1
   2efe4:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
   2efe8:	00000054 	andeq	r0, r0, r4, asr r0

0002efec <.LC6>:
   2efec:	00000030 	andeq	r0, r0, r0, lsr r0

0002eff0 <.LC7>:
   2eff0:	646e4570 	strbtvs	r4, [lr], #-1392	; 0xfffffa90
   2eff4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2eff8:	3d212074 	stccc	0, cr2, [r1, #-464]!	; 0xfffffe30
   2effc:	00003020 	andeq	r3, r0, r0, lsr #32

0002f000 <.LC8>:
   2f000:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f004:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f008:	7079545f 	rsbsvc	r5, r9, pc, asr r4
   2f00c:	3d3d2065 	ldccc	0, cr2, [sp, #-404]!	; 0xfffffe6c
   2f010:	646e4520 	strbtvs	r4, [lr], #-1312	; 0xfffffae0
   2f014:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2f018:	70795474 	rsbsvc	r5, r9, r4, ror r4
   2f01c:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
   2f020:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
   2f024:	00007470 	andeq	r7, r0, r0, ror r4

0002f028 <.LC9>:
   2f028:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f02c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f030:	7079545f 	rsbsvc	r5, r9, pc, asr r4
   2f034:	3d3d2065 	ldccc	0, cr2, [sp, #-404]!	; 0xfffffe6c
   2f038:	646e4520 	strbtvs	r4, [lr], #-1312	; 0xfffffae0
   2f03c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2f040:	70795474 	rsbsvc	r5, r9, r4, ror r4
   2f044:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
   2f048:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 2ee80 <.LC2>
   2f04c:	00000000 	andeq	r0, r0, r0

0002f050 <.LC10>:
   2f050:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f054:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f058:	7079545f 	rsbsvc	r5, r9, pc, asr r4
   2f05c:	3d3d2065 	ldccc	0, cr2, [sp, #-404]!	; 0xfffffe6c
   2f060:	646e4520 	strbtvs	r4, [lr], #-1312	; 0xfffffae0
   2f064:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2f068:	70795474 	rsbsvc	r5, r9, r4, ror r4
   2f06c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
   2f070:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 2eea8 <.LC5>
   2f074:	207c7c20 	rsbscs	r7, ip, r0, lsr #24
   2f078:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f07c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f080:	7079545f 	rsbsvc	r5, r9, pc, asr r4
   2f084:	3d3d2065 	ldccc	0, cr2, [sp, #-404]!	; 0xfffffe6c
   2f088:	646e4520 	strbtvs	r4, [lr], #-1312	; 0xfffffae0
   2f08c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2f090:	70795474 	rsbsvc	r5, r9, r4, ror r4
   2f094:	6c754265 	lfmvs	f4, 2, [r5], #-404	; 0xfffffe6c
   2f098:	7c7c206b 	ldclvc	0, cr2, [ip], #-428	; 0xfffffe54
   2f09c:	68547020 	ldmdavs	r4, {r5, ip, sp, lr}^
   2f0a0:	3e2d7369 	cdpcc	3, 2, cr7, cr13, cr9, {3}
   2f0a4:	79545f6d 	ldmdbvc	r4, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
   2f0a8:	3d206570 	cfstr32cc	mvfx6, [r0, #-448]!	; 0xfffffe40
   2f0ac:	6e45203d 	mcrvs	0, 2, r2, cr5, cr13, {1}
   2f0b0:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2f0b4:	7954746e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   2f0b8:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
   2f0bc:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
   2f0c0:	00747075 	rsbseq	r7, r4, r5, ror r0

0002f0c4 <.LC11>:
   2f0c4:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f0c8:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f0cc:	7079545f 	rsbsvc	r5, r9, pc, asr r4
   2f0d0:	3d3d2065 	ldccc	0, cr2, [sp, #-404]!	; 0xfffffe6c
   2f0d4:	646e4520 	strbtvs	r4, [lr], #-1312	; 0xfffffae0
   2f0d8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2f0dc:	70795474 	rsbsvc	r5, r9, r4, ror r4
   2f0e0:	6c754265 	lfmvs	f4, 2, [r5], #-404	; 0xfffffe6c
   2f0e4:	0000006b 	andeq	r0, r0, fp, rrx

0002f0e8 <.LC0>:
   2f0e8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f0ec:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2f0f0:	00003020 	andeq	r3, r0, r0, lsr #32

0002f0f4 <.LC1>:
   2f0f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2f040 <.LC9+0x18>
   2f0f8:	6a6c2f65 	bvs	1b3ae94 <mailbuffer+0x1affda4>
   2f0fc:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2f100:	2f727566 	svccs	0x00727566
   2f104:	6b736544 	blvs	1d0861c <mailbuffer+0x1ccd52c>
   2f108:	2f706f74 	svccs	0x00706f74
   2f10c:	2f697072 	svccs	0x00697072
   2f110:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2f114:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2f118:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2f11c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2f120:	534f5452 	movtpl	r5, #62546	; 0xf452
   2f124:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2f128:	2f726574 	svccs	0x00726574
   2f12c:	6f6d6544 	svcvs	0x006d6544
   2f130:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2f134:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2f138:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2f13c:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2f140:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2f144:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   2f148:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
   2f14c:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
   2f150:	00000063 	andeq	r0, r0, r3, rrx

0002f154 <.LC2>:
   2f154:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f158:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f15c:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2f160:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2f164:	2120746e 	teqcs	r0, lr, ror #8
   2f168:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002f16c <.LC3>:
   2f16c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f170:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f174:	7542705f 	strbvc	r7, [r2, #-95]	; 0xffffffa1
   2f178:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
   2f17c:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2f180:	7c7c2030 	ldclvc	0, cr2, [ip], #-192	; 0xffffff40
   2f184:	68547020 	ldmdavs	r4, {r5, ip, sp, lr}^
   2f188:	3e2d7369 	cdpcc	3, 2, cr7, cr13, cr9, {3}
   2f18c:	426e5f6d 	rsbmi	r5, lr, #436	; 0x1b4
   2f190:	654c6675 	strbvs	r6, [ip, #-1653]	; 0xfffff98b
   2f194:	3d3d206e 	ldccc	0, cr2, [sp, #-440]!	; 0xfffffe48
   2f198:	00003020 	andeq	r3, r0, r0, lsr #32

0002f19c <.LC4>:
   2f19c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f1a0:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f1a4:	7453625f 	ldrbvc	r6, [r3], #-607	; 0xfffffda1
   2f1a8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
   2f1ac:	00000000 	andeq	r0, r0, r0

0002f1b0 <.LC5>:
   2f1b0:	45425355 	strbmi	r5, [r2, #-853]	; 0xfffffcab
   2f1b4:	6f70646e 	svcvs	0x0070646e
   2f1b8:	47746e69 	ldrbmi	r6, [r4, -r9, ror #28]!
   2f1bc:	79547465 	ldmdbvc	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
   2f1c0:	28206570 	stmdacs	r0!, {r4, r5, r6, r8, sl, sp, lr}
   2f1c4:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f1c8:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f1cc:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2f1d0:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2f1d4:	2029746e 	eorcs	r7, r9, lr, ror #8
   2f1d8:	45203d3d 	strmi	r3, [r0, #-3389]!	; 0xfffff2c3
   2f1dc:	6f70646e 	svcvs	0x0070646e
   2f1e0:	54746e69 	ldrbtpl	r6, [r4], #-3689	; 0xfffff197
   2f1e4:	43657079 	cmnmi	r5, #121	; 0x79
   2f1e8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
   2f1ec:	00006c6f 	andeq	r6, r0, pc, ror #24

0002f1f0 <.LC6>:
   2f1f0:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f1f4:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f1f8:	6553705f 	ldrbvs	r7, [r3, #-95]	; 0xffffffa1
   2f1fc:	44707574 	ldrbtmi	r7, [r0], #-1396	; 0xfffffa8c
   2f200:	20617461 	rsbcs	r7, r1, r1, ror #8
   2f204:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f208:	00000000 	andeq	r0, r0, r0

0002f20c <.LC7>:
   2f20c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f210:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f214:	6f43705f 	svcvs	0x0043705f
   2f218:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
   2f21c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   2f220:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
   2f224:	20656e69 	rsbcs	r6, r5, r9, ror #28
   2f228:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f22c:	00000000 	andeq	r0, r0, r0

0002f230 <FromHub>:
   2f230:	68627375 	stmdavs	r2!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
   2f234:	00006275 	andeq	r6, r0, r5, ror r2

0002f238 <.LC0>:
   2f238:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f23c:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2f240:	00003020 	andeq	r3, r0, r0, lsr #32

0002f244 <.LC1>:
   2f244:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2f190 <.LC3+0x24>
   2f248:	6a6c2f65 	bvs	1b3afe4 <mailbuffer+0x1affef4>
   2f24c:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2f250:	2f727566 	svccs	0x00727566
   2f254:	6b736544 	blvs	1d0876c <mailbuffer+0x1ccd67c>
   2f258:	2f706f74 	svccs	0x00706f74
   2f25c:	2f697072 	svccs	0x00697072
   2f260:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2f264:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2f268:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2f26c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2f270:	534f5452 	movtpl	r5, #62546	; 0xf452
   2f274:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2f278:	2f726574 	svccs	0x00726574
   2f27c:	6f6d6544 	svcvs	0x006d6544
   2f280:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2f284:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2f288:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2f28c:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2f290:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2f294:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   2f298:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
   2f29c:	64726164 	ldrbtvs	r6, [r2], #-356	; 0xfffffe9c
   2f2a0:	2e627568 	cdpcs	5, 6, cr7, cr2, cr8, {3}
   2f2a4:	00000063 	andeq	r0, r0, r3, rrx

0002f2a8 <.LC2>:
   2f2a8:	76654470 			; <UNDEFINED> instruction: 0x76654470
   2f2ac:	44656369 	strbtmi	r6, [r5], #-873	; 0xfffffc97
   2f2b0:	20637365 	rsbcs	r7, r3, r5, ror #6
   2f2b4:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f2b8:	00000000 	andeq	r0, r0, r0

0002f2bc <.LC3>:
   2f2bc:	75736e55 	ldrbvc	r6, [r3, #-3669]!	; 0xfffff1ab
   2f2c0:	726f7070 	rsbvc	r7, pc, #112	; 0x70
   2f2c4:	20646574 	rsbcs	r6, r4, r4, ror r5
   2f2c8:	20627568 	rsbcs	r7, r2, r8, ror #10
   2f2cc:	6f727028 	svcvs	0x00727028
   2f2d0:	25206f74 	strcs	r6, [r0, #-3956]!	; 0xfffff08c
   2f2d4:	00002975 	andeq	r2, r0, r5, ror r9

0002f2d8 <.LC4>:
   2f2d8:	6e6e6143 	powvsem	f6, f6, f3
   2f2dc:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   2f2e0:	63207465 	teqvs	r0, #1694498816	; 0x65000000
   2f2e4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   2f2e8:	61727567 	cmnvs	r2, r7, ror #10
   2f2ec:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   2f2f0:	00000000 	andeq	r0, r0, r0

0002f2f4 <.LC5>:
   2f2f4:	736f4870 	cmnvc	pc, #112, 16	; 0x700000
   2f2f8:	3d212074 	stccc	0, cr2, [r1, #-464]!	; 0xfffffe30
   2f2fc:	00003020 	andeq	r3, r0, r0, lsr #32

0002f300 <.LC6>:
   2f300:	6e6e6143 	powvsem	f6, f6, f3
   2f304:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   2f308:	69207465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
   2f30c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
   2f310:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
   2f314:	00000000 	andeq	r0, r0, r0

0002f318 <.LC7>:
   2f318:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f31c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f320:	7548705f 	strbvc	r7, [r8, #-95]	; 0xffffffa1
   2f324:	73654462 	cmnvc	r5, #1644167168	; 0x62000000
   2f328:	3d3d2063 	ldccc	0, cr2, [sp, #-396]!	; 0xfffffe74
   2f32c:	00003020 	andeq	r3, r0, r0, lsr #32

0002f330 <.LC8>:
   2f330:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f334:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f338:	7548705f 	strbvc	r7, [r8, #-95]	; 0xffffffa1
   2f33c:	73654462 	cmnvc	r5, #1644167168	; 0x62000000
   2f340:	3d212063 	stccc	0, cr2, [r1, #-396]!	; 0xfffffe74
   2f344:	00003020 	andeq	r3, r0, r0, lsr #32

0002f348 <.LC9>:
   2f348:	6e6e6143 	powvsem	f6, f6, f3
   2f34c:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   2f350:	68207465 	stmdavs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
   2f354:	64206275 	strtvs	r6, [r0], #-629	; 0xfffffd8b
   2f358:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
   2f35c:	6f747069 	svcvs	0x00747069
   2f360:	00000072 	andeq	r0, r0, r2, ror r0

0002f364 <.LC10>:
   2f364:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
   2f368:	796e616d 	stmdbvc	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}^
   2f36c:	726f7020 	rsbvc	r7, pc, #32
   2f370:	28207374 	stmdacs	r0!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
   2f374:	00297525 	eoreq	r7, r9, r5, lsr #10

0002f378 <.LC11>:
   2f378:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
   2f37c:	756e6520 	strbvc	r6, [lr, #-1312]!	; 0xfffffae0
   2f380:	6172656d 	cmnvs	r2, sp, ror #10
   2f384:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   2f388:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
   2f38c:	0064656c 	rsbeq	r6, r4, ip, ror #10

0002f390 <.LC12>:
   2f390:	646e4570 	strbtvs	r4, [lr], #-1392	; 0xfffffa90
   2f394:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2f398:	21203074 	teqcs	r0, r4, ror r0
   2f39c:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002f3a0 <.LC13>:
   2f3a0:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f3a4:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f3a8:	6f506e5f 	svcvs	0x00506e5f
   2f3ac:	20737472 	rsbscs	r7, r3, r2, ror r4
   2f3b0:	0030203e 	eorseq	r2, r0, lr, lsr r0

0002f3b4 <.LC14>:
   2f3b4:	6e6e6143 	powvsem	f6, f6, f3
   2f3b8:	7020746f 	eorvc	r7, r0, pc, ror #8
   2f3bc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
   2f3c0:	726f7020 	rsbvc	r7, pc, #32
   2f3c4:	75252074 	strvc	r2, [r5, #-116]!	; 0xffffff8c
   2f3c8:	00000000 	andeq	r0, r0, r0

0002f3cc <.LC15>:
   2f3cc:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f3d0:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f3d4:	7453705f 	ldrbvc	r7, [r3], #-95	; 0xffffffa1
   2f3d8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
   2f3dc:	6f506e5b 	svcvs	0x00506e5b
   2f3e0:	205d7472 	subscs	r7, sp, r2, ror r4
   2f3e4:	30203d3d 	eorcc	r3, r0, sp, lsr sp
   2f3e8:	00000000 	andeq	r0, r0, r0

0002f3ec <.LC16>:
   2f3ec:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f3f0:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f3f4:	7453705f 	ldrbvc	r7, [r3], #-95	; 0xffffffa1
   2f3f8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
   2f3fc:	6f506e5b 	svcvs	0x00506e5b
   2f400:	205d7472 	subscs	r7, sp, r2, ror r4
   2f404:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f408:	00000000 	andeq	r0, r0, r0

0002f40c <.LC17>:
   2f40c:	6e6e6143 	powvsem	f6, f6, f3
   2f410:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   2f414:	73207465 	teqvc	r0, #1694498816	; 0x65000000
   2f418:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
   2f41c:	666f2073 			; <UNDEFINED> instruction: 0x666f2073
   2f420:	726f7020 	rsbvc	r7, pc, #32
   2f424:	75252074 	strvc	r2, [r5, #-116]!	; 0xffffff8c
   2f428:	00000000 	andeq	r0, r0, r0

0002f42c <.LC18>:
   2f42c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f430:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f434:	7453705f 	ldrbvc	r7, [r3], #-95	; 0xffffffa1
   2f438:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
   2f43c:	6f506e5b 	svcvs	0x00506e5b
   2f440:	2d5d7472 	cfldrdcs	mvd7, [sp, #-456]	; 0xfffffe38
   2f444:	6f50773e 	svcvs	0x0050773e
   2f448:	74537472 	ldrbvc	r7, [r3], #-1138	; 0xfffffb8e
   2f44c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
   2f450:	50202620 	eorpl	r2, r0, r0, lsr #12
   2f454:	5f54524f 	svcpl	0x0054524f
   2f458:	45574f50 	ldrbmi	r4, [r7, #-3920]	; 0xfffff0b0
   2f45c:	4d5f5f52 	ldclmi	15, cr5, [pc, #-328]	; 2f31c <.LC7+0x4>
   2f460:	004b5341 	subeq	r5, fp, r1, asr #6

0002f464 <.LC19>:
   2f464:	6e6e6143 	powvsem	f6, f6, f3
   2f468:	7220746f 	eorvc	r7, r0, #1862270976	; 0x6f000000
   2f46c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
   2f470:	726f7020 	rsbvc	r7, pc, #32
   2f474:	75252074 	strvc	r2, [r5, #-116]!	; 0xffffff8c
   2f478:	00000000 	andeq	r0, r0, r0

0002f47c <.LC20>:
   2f47c:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
   2f480:	20752520 	rsbscs	r2, r5, r0, lsr #10
   2f484:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
   2f488:	6520746f 	strvs	r7, [r0, #-1135]!	; 0xfffffb91
   2f48c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
   2f490:	00006465 	andeq	r6, r0, r5, ror #8

0002f494 <.LC21>:
   2f494:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
   2f498:	7275632d 	rsbsvc	r6, r5, #-1275068416	; 0xb4000000
   2f49c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
   2f4a0:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
   2f4a4:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
   2f4a8:	6f206e6f 	svcvs	0x00206e6f
   2f4ac:	6f70206e 	svcvs	0x0070206e
   2f4b0:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
   2f4b4:	00000075 	andeq	r0, r0, r5, ror r0

0002f4b8 <.LC22>:
   2f4b8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f4bc:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f4c0:	6544705f 	strbvs	r7, [r4, #-95]	; 0xffffffa1
   2f4c4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   2f4c8:	6f506e5b 	svcvs	0x00506e5b
   2f4cc:	205d7472 	subscs	r7, sp, r2, ror r4
   2f4d0:	30203d3d 	eorcc	r3, r0, sp, lsr sp
   2f4d4:	00000000 	andeq	r0, r0, r0

0002f4d8 <.LC23>:
   2f4d8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f4dc:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f4e0:	6544705f 	strbvs	r7, [r4, #-95]	; 0xffffffa1
   2f4e4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   2f4e8:	6f506e5b 	svcvs	0x00506e5b
   2f4ec:	205d7472 	subscs	r7, sp, r2, ror r4
   2f4f0:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f4f4:	00000000 	andeq	r0, r0, r0

0002f4f8 <.LC24>:
   2f4f8:	6d614e70 	stclvs	14, cr4, [r1, #-448]!	; 0xfffffe40
   2f4fc:	21207365 	teqcs	r0, r5, ror #6
   2f500:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002f504 <.LC25>:
   2f504:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
   2f508:	3a752520 	bcc	1d78990 <mailbuffer+0x1d3d8a0>
   2f50c:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
   2f510:	20656369 	rsbcs	r6, r5, r9, ror #6
   2f514:	66207325 	strtvs	r7, [r0], -r5, lsr #6
   2f518:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
   2f51c:	00000000 	andeq	r0, r0, r0

0002f520 <.LC26>:
   2f520:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
   2f524:	3a752520 	bcc	1d789ac <mailbuffer+0x1d3d8bc>
   2f528:	6e614320 	cdpvs	3, 6, cr4, cr1, cr0, {1}
   2f52c:	20746f6e 	rsbscs	r6, r4, lr, ror #30
   2f530:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
   2f534:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
   2f538:	65642065 	strbvs	r2, [r4, #-101]!	; 0xffffff9b
   2f53c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   2f540:	00000000 	andeq	r0, r0, r0

0002f544 <.LC27>:
   2f544:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
   2f548:	3a752520 	bcc	1d789d0 <mailbuffer+0x1d3d8e0>
   2f54c:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
   2f550:	20656369 	rsbcs	r6, r5, r9, ror #6
   2f554:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
   2f558:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
   2f55c:	00006465 	andeq	r6, r0, r5, ror #8

0002f560 <.LC28>:
   2f560:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
   2f564:	3a752520 	bcc	1d789ec <mailbuffer+0x1d3d8fc>
   2f568:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
   2f56c:	20656369 	rsbcs	r6, r5, r9, ror #6
   2f570:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
   2f574:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   2f578:	6f707075 	svcvs	0x00707075
   2f57c:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
   2f580:	00000000 	andeq	r0, r0, r0

0002f584 <.LC29>:
   2f584:	62754870 	rsbsvs	r4, r5, #112, 16	; 0x700000
   2f588:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
   2f58c:	21207375 	teqcs	r0, r5, ror r3
   2f590:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002f594 <.LC30>:
   2f594:	6e6e6143 	powvsem	f6, f6, f3
   2f598:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   2f59c:	68207465 	stmdavs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
   2f5a0:	73206275 	teqvc	r0, #1342177287	; 0x50000007
   2f5a4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
   2f5a8:	00000073 	andeq	r0, r0, r3, ror r0

0002f5ac <.LC31>:
   2f5ac:	20627548 	rsbcs	r7, r2, r8, asr #10
   2f5b0:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
   2f5b4:	7275632d 	rsbsvc	r6, r5, #-1275068416	; 0xb4000000
   2f5b8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
   2f5bc:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
   2f5c0:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
   2f5c4:	00006e6f 	andeq	r6, r0, pc, ror #28

0002f5c8 <.LC32>:
   2f5c8:	76654470 			; <UNDEFINED> instruction: 0x76654470
   2f5cc:	20656369 	rsbcs	r6, r5, r9, ror #6
   2f5d0:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f5d4:	00000000 	andeq	r0, r0, r0

0002f5d8 <.LC33>:
   2f5d8:	73655270 	cmnvc	r5, #112, 4
   2f5dc:	20746c75 	rsbscs	r6, r4, r5, ror ip
   2f5e0:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f5e4:	00000000 	andeq	r0, r0, r0

0002f5e8 <.LC34>:
   2f5e8:	6d614e70 	stclvs	14, cr4, [r1, #-448]!	; 0xfffffe40
   2f5ec:	3d212065 	stccc	0, cr2, [r1, #-404]!	; 0xfffffe6c
   2f5f0:	00003020 	andeq	r3, r0, r0, lsr #32

0002f5f4 <.LC35>:
   2f5f4:	6e6b6e75 	mcrvs	14, 3, r6, cr11, cr5, {3}
   2f5f8:	006e776f 	rsbeq	r7, lr, pc, ror #14

0002f5fc <.LC36>:
   2f5fc:	0000202c 	andeq	r2, r0, ip, lsr #32

0002f600 <.LC0>:
   2f600:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f604:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2f608:	00003020 	andeq	r3, r0, r0, lsr #32

0002f60c <.LC1>:
   2f60c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2f558 <.LC27+0x14>
   2f610:	6a6c2f65 	bvs	1b3b3ac <mailbuffer+0x1b002bc>
   2f614:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2f618:	2f727566 	svccs	0x00727566
   2f61c:	6b736544 	blvs	1d08b34 <mailbuffer+0x1ccda44>
   2f620:	2f706f74 	svccs	0x00706f74
   2f624:	2f697072 	svccs	0x00697072
   2f628:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2f62c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2f630:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2f634:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2f638:	534f5452 	movtpl	r5, #62546	; 0xf452
   2f63c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2f640:	2f726574 	svccs	0x00726574
   2f644:	6f6d6544 	svcvs	0x006d6544
   2f648:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2f64c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2f650:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2f654:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2f658:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2f65c:	7665642f 	strbtvc	r6, [r5], -pc, lsr #8
   2f660:	6e656369 	cdpvs	3, 6, cr6, cr5, cr9, {3}
   2f664:	73656d61 	cmnvc	r5, #6208	; 0x1840
   2f668:	69767265 	ldmdbvs	r6!, {r0, r2, r5, r6, r9, ip, sp, lr}^
   2f66c:	632e6563 	teqvs	lr, #415236096	; 0x18c00000
   2f670:	00000000 	andeq	r0, r0, r0

0002f674 <.LC2>:
   2f674:	54705f73 	ldrbtpl	r5, [r0], #-3955	; 0xfffff08d
   2f678:	20736968 	rsbscs	r6, r3, r8, ror #18
   2f67c:	30203d3d 	eorcc	r3, r0, sp, lsr sp
   2f680:	00000000 	andeq	r0, r0, r0

0002f684 <.LC3>:
   2f684:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f688:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f68c:	694c705f 	stmdbvs	ip, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
   2f690:	3e2d7473 	mcrcc	4, 1, r7, cr13, cr3, {3}
   2f694:	6d614e70 	stclvs	14, cr4, [r1, #-448]!	; 0xfffffe40
   2f698:	3d212065 	stccc	0, cr2, [r1, #-404]!	; 0xfffffe6c
   2f69c:	00003020 	andeq	r3, r0, r0, lsr #32

0002f6a0 <.LC4>:
   2f6a0:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
   2f6a4:	3d21206f 	stccc	0, cr2, [r1, #-444]!	; 0xfffffe44
   2f6a8:	00003020 	andeq	r3, r0, r0, lsr #32

0002f6ac <.LC5>:
   2f6ac:	6d614e70 	stclvs	14, cr4, [r1, #-448]!	; 0xfffffe40
   2f6b0:	3d212065 	stccc	0, cr2, [r1, #-404]!	; 0xfffffe6c
   2f6b4:	00003020 	andeq	r3, r0, r0, lsr #32

0002f6b8 <.LC6>:
   2f6b8:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
   2f6bc:	703e2d6f 	eorsvc	r2, lr, pc, ror #26
   2f6c0:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
   2f6c4:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2f6c8:	00000030 	andeq	r0, r0, r0, lsr r0

0002f6cc <.LC7>:
   2f6cc:	76654470 			; <UNDEFINED> instruction: 0x76654470
   2f6d0:	20656369 	rsbcs	r6, r5, r9, ror #6
   2f6d4:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f6d8:	00000000 	andeq	r0, r0, r0

0002f6dc <.LC8>:
   2f6dc:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
   2f6e0:	703e2d6f 	eorsvc	r2, lr, pc, ror #26
   2f6e4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
   2f6e8:	21206563 	teqcs	r0, r3, ror #10
   2f6ec:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002f6f0 <.LC9>:
   2f6f0:	54705f73 	ldrbtpl	r5, [r0], #-3955	; 0xfffff08d
   2f6f4:	20736968 	rsbscs	r6, r3, r8, ror #18
   2f6f8:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f6fc:	00000000 	andeq	r0, r0, r0

0002f700 <.LC0>:
   2f700:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f704:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2f708:	00003020 	andeq	r3, r0, r0, lsr #32

0002f70c <.LC1>:
   2f70c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2f658 <.LC1+0x4c>
   2f710:	6a6c2f65 	bvs	1b3b4ac <mailbuffer+0x1b003bc>
   2f714:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2f718:	2f727566 	svccs	0x00727566
   2f71c:	6b736544 	blvs	1d08c34 <mailbuffer+0x1ccdb44>
   2f720:	2f706f74 	svccs	0x00706f74
   2f724:	2f697072 	svccs	0x00697072
   2f728:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2f72c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2f730:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2f734:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2f738:	534f5452 	movtpl	r5, #62546	; 0xf452
   2f73c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2f740:	2f726574 	svccs	0x00726574
   2f744:	6f6d6544 	svcvs	0x006d6544
   2f748:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2f74c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2f750:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2f754:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2f758:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2f75c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
   2f760:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
   2f764:	2e737365 	cdpcs	3, 7, cr7, cr3, cr5, {3}
   2f768:	00000063 	andeq	r0, r0, r3, rrx

0002f76c <.LC2>:
   2f76c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f770:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f774:	6156625f 	cmpvs	r6, pc, asr r2
   2f778:	0064696c 	rsbeq	r6, r4, ip, ror #18

0002f77c <.LC3>:
   2f77c:	64644170 	strbtvs	r4, [r4], #-368	; 0xfffffe90
   2f780:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
   2f784:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2f788:	00000030 	andeq	r0, r0, r0, lsr r0

0002f78c <.LC4>:
   2f78c:	66754270 			; <UNDEFINED> instruction: 0x66754270
   2f790:	20726566 	rsbscs	r6, r2, r6, ror #10
   2f794:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f798:	00000000 	andeq	r0, r0, r0

0002f79c <.LC5>:
   2f79c:	72745370 	rsbsvc	r5, r4, #112, 6	; 0xc0000001
   2f7a0:	20676e69 	rsbcs	r6, r7, r9, ror #28
   2f7a4:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f7a8:	00000000 	andeq	r0, r0, r0

0002f7ac <.LC6>:
   2f7ac:	58323025 	ldmdapl	r2!, {r0, r2, r5, ip, sp}
   2f7b0:	3230253a 	eorscc	r2, r0, #243269632	; 0xe800000
   2f7b4:	30253a58 	eorcc	r3, r5, r8, asr sl
   2f7b8:	253a5832 	ldrcs	r5, [sl, #-2098]!	; 0xfffff7ce
   2f7bc:	3a583230 	bcc	163c084 <mailbuffer+0x1600f94>
   2f7c0:	58323025 	ldmdapl	r2!, {r0, r2, r5, ip, sp}
   2f7c4:	3230253a 	eorscc	r2, r0, #243269632	; 0xe800000
   2f7c8:	00000058 	andeq	r0, r0, r8, asr r0

0002f7cc <FromSMSC951x>:
   2f7cc:	63736d73 	cmnvs	r3, #7360	; 0x1cc0
   2f7d0:	78313539 	ldmdavc	r1!, {r0, r3, r4, r5, r8, sl, ip, sp}
   2f7d4:	00000000 	andeq	r0, r0, r0

0002f7d8 <.LC0>:
   2f7d8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f7dc:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2f7e0:	00003020 	andeq	r3, r0, r0, lsr #32

0002f7e4 <.LC1>:
   2f7e4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2f730 <.LC1+0x24>
   2f7e8:	6a6c2f65 	bvs	1b3b584 <mailbuffer+0x1b00494>
   2f7ec:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2f7f0:	2f727566 	svccs	0x00727566
   2f7f4:	6b736544 	blvs	1d08d0c <mailbuffer+0x1ccdc1c>
   2f7f8:	2f706f74 	svccs	0x00706f74
   2f7fc:	2f697072 	svccs	0x00697072
   2f800:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2f804:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2f808:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2f80c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2f810:	534f5452 	movtpl	r5, #62546	; 0xf452
   2f814:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2f818:	2f726574 	svccs	0x00726574
   2f81c:	6f6d6544 	svcvs	0x006d6544
   2f820:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2f824:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2f828:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2f82c:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2f830:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2f834:	736d732f 	cmnvc	sp, #-1140850688	; 0xbc000000
   2f838:	31353963 	teqcc	r5, r3, ror #18
   2f83c:	00632e78 	rsbeq	r2, r3, r8, ror lr

0002f840 <.LC2>:
   2f840:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f844:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f848:	7854705f 	ldmdavc	r4, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
   2f84c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
   2f850:	21207265 	teqcs	r0, r5, ror #4
   2f854:	0030203d 	eorseq	r2, r0, sp, lsr r0

0002f858 <.LC3>:
   2f858:	6e6e6143 	powvsem	f6, f6, f3
   2f85c:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   2f860:	4d207465 	cfstrsmi	mvf7, [r0, #-404]!	; 0xfffffe6c
   2f864:	61204341 	teqvs	r0, r1, asr #6
   2f868:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
   2f86c:	00007373 	andeq	r7, r0, r3, ror r3

0002f870 <.LC4>:
   2f870:	2043414d 	subcs	r4, r3, sp, asr #2
   2f874:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
   2f878:	20737365 	rsbscs	r7, r3, r5, ror #6
   2f87c:	25207369 	strcs	r7, [r0, #-873]!	; 0xfffffc97
   2f880:	00000073 	andeq	r0, r0, r3, ror r0

0002f884 <.LC5>:
   2f884:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f888:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f88c:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2f890:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2f894:	7542746e 	strbvc	r7, [r2, #-1134]	; 0xfffffb92
   2f898:	6e496b6c 	vmlsvs.f64	d22, d9, d28
   2f89c:	00000000 	andeq	r0, r0, r0

0002f8a0 <.LC6>:
   2f8a0:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f8a4:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f8a8:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2f8ac:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2f8b0:	7542746e 	strbvc	r7, [r2, #-1134]	; 0xfffffb92
   2f8b4:	754f6b6c 	strbvc	r6, [pc, #-2924]	; 2ed50 <.LC20+0x14>
   2f8b8:	00000074 	andeq	r0, r0, r4, ror r0

0002f8bc <.LC7>:
   2f8bc:	6e6e6143 	powvsem	f6, f6, f3
   2f8c0:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   2f8c4:	63207465 	teqvs	r0, #1694498816	; 0x65000000
   2f8c8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   2f8cc:	61727567 	cmnvs	r2, r7, ror #10
   2f8d0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   2f8d4:	00000000 	andeq	r0, r0, r0

0002f8d8 <.LC8>:
   2f8d8:	6e6e6143 	powvsem	f6, f6, f3
   2f8dc:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   2f8e0:	4d207465 	cfstrsmi	mvf7, [r0, #-404]!	; 0xfffffe6c
   2f8e4:	61204341 	teqvs	r0, r1, asr #6
   2f8e8:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
   2f8ec:	00007373 	andeq	r7, r0, r3, ror r3

0002f8f0 <.LC9>:
   2f8f0:	6e6e6143 	powvsem	f6, f6, f3
   2f8f4:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   2f8f8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
   2f8fc:	76656420 	strbtvc	r6, [r5], -r0, lsr #8
   2f900:	00656369 	rsbeq	r6, r5, r9, ror #6

0002f904 <.LC10>:
   2f904:	25687465 	strbcs	r7, [r8, #-1125]!	; 0xfffffb9b
   2f908:	00000075 	andeq	r0, r0, r5, ror r0

0002f90c <.LC11>:
   2f90c:	66754270 			; <UNDEFINED> instruction: 0x66754270
   2f910:	20726566 	rsbscs	r6, r2, r6, ror #10
   2f914:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2f918:	00000000 	andeq	r0, r0, r0

0002f91c <.LC12>:
   2f91c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f920:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f924:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2f928:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2f92c:	7542746e 	strbvc	r7, [r2, #-1134]	; 0xfffffb92
   2f930:	754f6b6c 	strbvc	r6, [pc, #-2924]	; 2edcc <.LC26+0x8>
   2f934:	3d212074 	stccc	0, cr2, [r1, #-464]!	; 0xfffffe30
   2f938:	00003020 	andeq	r3, r0, r0, lsr #32

0002f93c <.LC13>:
   2f93c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2f940:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2f944:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2f948:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2f94c:	7542746e 	strbvc	r7, [r2, #-1134]	; 0xfffffb92
   2f950:	6e496b6c 	vmlsvs.f64	d22, d9, d28
   2f954:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2f958:	00000030 	andeq	r0, r0, r0, lsr r0

0002f95c <.LC14>:
   2f95c:	65205852 	strvs	r5, [r0, #-2130]!	; 0xfffff7ae
   2f960:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
   2f964:	74732820 	ldrbtvc	r2, [r3], #-2080	; 0xfffff7e0
   2f968:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
   2f96c:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
   2f970:	00002958 	andeq	r2, r0, r8, asr r9

0002f974 <.LC15>:
   2f974:	6172466e 	cmnvs	r2, lr, ror #12
   2f978:	654c656d 	strbvs	r6, [ip, #-1389]	; 0xfffffa93
   2f97c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
   2f980:	203d3d20 	eorscs	r3, sp, r0, lsr #26
   2f984:	7365526e 	cmnvc	r5, #-536870906	; 0xe0000006
   2f988:	4c746c75 	ldclmi	12, cr6, [r4], #-468	; 0xfffffe2c
   2f98c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
   2f990:	00342d68 	eorseq	r2, r4, r8, ror #26

0002f994 <.LC16>:
   2f994:	6172466e 	cmnvs	r2, lr, ror #12
   2f998:	654c656d 	strbvs	r6, [ip, #-1389]	; 0xfffffa93
   2f99c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
   2f9a0:	34203e20 	strtcc	r3, [r0], #-3616	; 0xfffff1e0
   2f9a4:	00000000 	andeq	r0, r0, r0

0002f9a8 <.LC17>:
   2f9a8:	73655270 	cmnvc	r5, #112, 4
   2f9ac:	4c746c75 	ldclmi	12, cr6, [r4], #-468	; 0xfffffe2c
   2f9b0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
   2f9b4:	3d212068 	stccc	0, cr2, [r1, #-416]!	; 0xfffffe60
   2f9b8:	00003020 	andeq	r3, r0, r0, lsr #32

0002f9bc <.LC18>:
   2f9bc:	6e6e6143 	powvsem	f6, f6, f3
   2f9c0:	7220746f 	eorvc	r7, r0, #1862270976	; 0x6f000000
   2f9c4:	20646165 	rsbcs	r6, r4, r5, ror #2
   2f9c8:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
   2f9cc:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
   2f9d0:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
   2f9d4:	00000058 	andeq	r0, r0, r8, asr r0

0002f9d8 <.LC19>:
   2f9d8:	58383025 	ldmdapl	r8!, {r0, r2, r5, ip, sp}
   2f9dc:	00732520 	rsbseq	r2, r3, r0, lsr #10

0002f9e0 <.LC20>:
   2f9e0:	525f4449 	subspl	r4, pc, #1224736768	; 0x49000000
   2f9e4:	00005645 	andeq	r5, r0, r5, asr #12

0002f9e8 <.LC21>:
   2f9e8:	5f544e49 	svcpl	0x00544e49
   2f9ec:	00535453 	subseq	r5, r3, r3, asr r4

0002f9f0 <.LC22>:
   2f9f0:	435f5852 	cmpmi	pc, #5373952	; 0x520000
   2f9f4:	00004746 	andeq	r4, r0, r6, asr #14

0002f9f8 <.LC23>:
   2f9f8:	435f5854 	cmpmi	pc, #84, 16	; 0x540000
   2f9fc:	00004746 	andeq	r4, r0, r6, asr #14

0002fa00 <.LC24>:
   2fa00:	435f5748 	cmpmi	pc, #72, 14	; 0x1200000
   2fa04:	00004746 	andeq	r4, r0, r6, asr #14

0002fa08 <.LC25>:
   2fa08:	465f5852 			; <UNDEFINED> instruction: 0x465f5852
   2fa0c:	5f4f4649 	svcpl	0x004f4649
   2fa10:	00464e49 	subeq	r4, r6, r9, asr #28

0002fa14 <.LC26>:
   2fa14:	435f4d50 	cmpmi	pc, #80, 26	; 0x1400
   2fa18:	004c5254 	subeq	r5, ip, r4, asr r2

0002fa1c <.LC27>:
   2fa1c:	5f44454c 	svcpl	0x0044454c
   2fa20:	4f495047 	svcmi	0x00495047
   2fa24:	4746435f 	smlsldmi	r4, r6, pc, r3	; <UNPREDICTABLE>
   2fa28:	00000000 	andeq	r0, r0, r0

0002fa2c <.LC28>:
   2fa2c:	4f495047 	svcmi	0x00495047
   2fa30:	4746435f 	smlsldmi	r4, r6, pc, r3	; <UNPREDICTABLE>
   2fa34:	00000000 	andeq	r0, r0, r0

0002fa38 <.LC29>:
   2fa38:	5f434641 	svcpl	0x00434641
   2fa3c:	00474643 	subeq	r4, r7, r3, asr #12

0002fa40 <.LC30>:
   2fa40:	53525542 	cmppl	r2, #276824064	; 0x10800000
   2fa44:	41435f54 	cmpmi	r3, r4, asr pc
   2fa48:	00000050 	andeq	r0, r0, r0, asr r0

0002fa4c <.LC31>:
   2fa4c:	5f544e49 	svcpl	0x00544e49
   2fa50:	435f5045 	cmpmi	pc, #69	; 0x45
   2fa54:	00004c54 	andeq	r4, r0, r4, asr ip

0002fa58 <.LC32>:
   2fa58:	4b4c5542 	blmi	1344f68 <mailbuffer+0x1309e78>
   2fa5c:	5f4e495f 	svcpl	0x004e495f
   2fa60:	00594c44 	subseq	r4, r9, r4, asr #24

0002fa64 <.LC33>:
   2fa64:	5f43414d 	svcpl	0x0043414d
   2fa68:	00005243 	andeq	r5, r0, r3, asr #4

0002fa6c <.LC34>:
   2fa6c:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
   2fa70:	00000048 	andeq	r0, r0, r8, asr #32

0002fa74 <.LC35>:
   2fa74:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
   2fa78:	0000004c 	andeq	r0, r0, ip, asr #32

0002fa7c <.LC36>:
   2fa7c:	48534148 	ldmdami	r3, {r3, r6, r8, lr}^
   2fa80:	00000048 	andeq	r0, r0, r8, asr #32

0002fa84 <.LC37>:
   2fa84:	48534148 	ldmdami	r3, {r3, r6, r8, lr}^
   2fa88:	0000004c 	andeq	r0, r0, ip, asr #32

0002fa8c <.LC38>:
   2fa8c:	574f4c46 	strbpl	r4, [pc, -r6, asr #24]
   2fa90:	00000000 	andeq	r0, r0, r0

0002fa94 <.LC39>:
   2fa94:	53435557 	movtpl	r5, #13655	; 0x3557
   2fa98:	00000052 	andeq	r0, r0, r2, asr r0

0002fa9c <.LC0>:
   2fa9c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2faa0:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2faa4:	00003020 	andeq	r3, r0, r0, lsr #32

0002faa8 <.LC1>:
   2faa8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2f9f4 <.LC22+0x4>
   2faac:	6a6c2f65 	bvs	1b3b848 <mailbuffer+0x1b00758>
   2fab0:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2fab4:	2f727566 	svccs	0x00727566
   2fab8:	6b736544 	blvs	1d08fd0 <mailbuffer+0x1ccdee0>
   2fabc:	2f706f74 	svccs	0x00706f74
   2fac0:	2f697072 	svccs	0x00697072
   2fac4:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2fac8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2facc:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2fad0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2fad4:	534f5452 	movtpl	r5, #62546	; 0xf452
   2fad8:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2fadc:	2f726574 	svccs	0x00726574
   2fae0:	6f6d6544 	svcvs	0x006d6544
   2fae4:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2fae8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2faec:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2faf0:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2faf4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2faf8:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
   2fafc:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
   2fb00:	00000063 	andeq	r0, r0, r3, rrx

0002fb04 <.LC2>:
   2fb04:	00000000 	andeq	r0, r0, r0

0002fb08 <FromUmsd>:
   2fb08:	64736d75 	ldrbtvs	r6, [r3], #-3445	; 0xfffff28b
   2fb0c:	00000000 	andeq	r0, r0, r0

0002fb10 <.LC0>:
   2fb10:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2fb14:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2fb18:	00003020 	andeq	r3, r0, r0, lsr #32

0002fb1c <.LC1>:
   2fb1c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2fa68 <.LC33+0x4>
   2fb20:	6a6c2f65 	bvs	1b3b8bc <mailbuffer+0x1b007cc>
   2fb24:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2fb28:	2f727566 	svccs	0x00727566
   2fb2c:	6b736544 	blvs	1d09044 <mailbuffer+0x1ccdf54>
   2fb30:	2f706f74 	svccs	0x00706f74
   2fb34:	2f697072 	svccs	0x00697072
   2fb38:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2fb3c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2fb40:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2fb44:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2fb48:	534f5452 	movtpl	r5, #62546	; 0xf452
   2fb4c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2fb50:	2f726574 	svccs	0x00726574
   2fb54:	6f6d6544 	svcvs	0x006d6544
   2fb58:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2fb5c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2fb60:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2fb64:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2fb68:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2fb6c:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   2fb70:	7373616d 	cmnvc	r3, #1073741851	; 0x4000001b
   2fb74:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
   2fb78:	632e6563 	teqvs	lr, #415236096	; 0x18c00000
   2fb7c:	00000000 	andeq	r0, r0, r0

0002fb80 <.LC2>:
   2fb80:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2fb84:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2fb88:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2fb8c:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2fb90:	6e49746e 	cdpvs	4, 4, cr7, cr9, cr14, {3}
   2fb94:	203d2120 	eorscs	r2, sp, r0, lsr #2
   2fb98:	00000030 	andeq	r0, r0, r0, lsr r0

0002fb9c <.LC3>:
   2fb9c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2fba0:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   2fba4:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   2fba8:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   2fbac:	754f746e 	strbvc	r7, [pc, #-1134]	; 2f746 <.LC1+0x3a>
   2fbb0:	3d212074 	stccc	0, cr2, [r1, #-464]!	; 0xfffffe30
   2fbb4:	00003020 	andeq	r3, r0, r0, lsr #32

0002fbb8 <.LC4>:
   2fbb8:	6e6e6143 	powvsem	f6, f6, f3
   2fbbc:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   2fbc0:	63207465 	teqvs	r0, #1694498816	; 0x65000000
   2fbc4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   2fbc8:	61727567 	cmnvs	r2, r7, ror #10
   2fbcc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   2fbd0:	00000000 	andeq	r0, r0, r0

0002fbd4 <.LC5>:
   2fbd4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
   2fbd8:	64206563 	strtvs	r6, [r0], #-1379	; 0xfffffa9d
   2fbdc:	2073656f 	rsbscs	r6, r3, pc, ror #10
   2fbe0:	20746f6e 	rsbscs	r6, r4, lr, ror #30
   2fbe4:	70736572 	rsbsvc	r6, r3, r2, ror r5
   2fbe8:	00646e6f 	rsbeq	r6, r4, pc, ror #28

0002fbec <.LC6>:
   2fbec:	75736e55 	ldrbvc	r6, [r3, #-3669]!	; 0xfffff1ab
   2fbf0:	726f7070 	rsbvc	r7, pc, #112	; 0x70
   2fbf4:	20646574 	rsbcs	r6, r4, r4, ror r5
   2fbf8:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
   2fbfc:	74206563 	strtvc	r6, [r0], #-1379	; 0xfffffa9d
   2fc00:	3a657079 	bcc	198bdec <mailbuffer+0x1950cfc>
   2fc04:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
   2fc08:	00583230 	subseq	r3, r8, r0, lsr r2

0002fc0c <.LC7>:
   2fc0c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
   2fc10:	20747365 	rsbscs	r7, r4, r5, ror #6
   2fc14:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
   2fc18:	61662065 	cmnvs	r6, r5, rrx
   2fc1c:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
   2fc20:	00000000 	andeq	r0, r0, r0

0002fc24 <.LC8>:
   2fc24:	74696e55 	strbtvc	r6, [r9], #-3669	; 0xfffff1ab
   2fc28:	20736920 	rsbscs	r6, r3, r0, lsr #18
   2fc2c:	20746f6e 	rsbscs	r6, r4, lr, ror #30
   2fc30:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
   2fc34:	00000079 	andeq	r0, r0, r9, ror r0

0002fc38 <.LC9>:
   2fc38:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
   2fc3c:	70616320 	rsbvc	r6, r1, r0, lsr #6
   2fc40:	74696361 	strbtvc	r6, [r9], #-865	; 0xfffffc9f
   2fc44:	61662079 	smcvs	25097	; 0x6209
   2fc48:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
   2fc4c:	00000000 	andeq	r0, r0, r0

0002fc50 <.LC10>:
   2fc50:	75736e55 	ldrbvc	r6, [r3, #-3669]!	; 0xfffff1ab
   2fc54:	726f7070 	rsbvc	r7, pc, #112	; 0x70
   2fc58:	20646574 	rsbcs	r6, r4, r4, ror r5
   2fc5c:	636f6c62 	cmnvs	pc, #25088	; 0x6200
   2fc60:	6973206b 	ldmdbvs	r3!, {r0, r1, r3, r5, r6, sp}^
   2fc64:	203a657a 	eorscs	r6, sl, sl, ror r5
   2fc68:	00007525 	andeq	r7, r0, r5, lsr #10

0002fc6c <.LC11>:
   2fc6c:	75736e55 	ldrbvc	r6, [r3, #-3669]!	; 0xfffff1ab
   2fc70:	726f7070 	rsbvc	r7, pc, #112	; 0x70
   2fc74:	20646574 	rsbcs	r6, r4, r4, ror r5
   2fc78:	6b736964 	blvs	1d0a210 <mailbuffer+0x1ccf120>
   2fc7c:	7a697320 	bvc	1a8c904 <mailbuffer+0x1a51814>
   2fc80:	203e2065 	eorscs	r2, lr, r5, rrx
   2fc84:	00425432 	subeq	r5, r2, r2, lsr r4

0002fc88 <.LC12>:
   2fc88:	61706143 	cmnvs	r0, r3, asr #2
   2fc8c:	79746963 	ldmdbvc	r4!, {r0, r1, r5, r6, r8, fp, sp, lr}^
   2fc90:	20736920 	rsbscs	r6, r3, r0, lsr #18
   2fc94:	4d207525 	cfstr32mi	mvfx7, [r0, #-148]!	; 0xffffff6c
   2fc98:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
   2fc9c:	00000000 	andeq	r0, r0, r0

0002fca0 <.LC13>:
   2fca0:	64736d75 	ldrbtvs	r6, [r3], #-3445	; 0xfffff28b
   2fca4:	00007525 	andeq	r7, r0, r5, lsr #10

0002fca8 <.LC14>:
   2fca8:	66754270 			; <UNDEFINED> instruction: 0x66754270
   2fcac:	20726566 	rsbscs	r6, r2, r6, ror #10
   2fcb0:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2fcb4:	00000000 	andeq	r0, r0, r0

0002fcb8 <.LC15>:
   2fcb8:	52797254 	rsbspl	r7, r9, #84, 4	; 0x40000005
   2fcbc:	20646165 	rsbcs	r6, r4, r5, ror #2
   2fcc0:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
   2fcc4:	00006465 	andeq	r6, r0, r5, ror #8

0002fcc8 <.LC16>:
   2fcc8:	57797254 			; <UNDEFINED> instruction: 0x57797254
   2fccc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
   2fcd0:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
   2fcd4:	0064656c 	rsbeq	r6, r4, ip, ror #10

0002fcd8 <.LC17>:
   2fcd8:	646d4370 	strbtvs	r4, [sp], #-880	; 0xfffffc90
   2fcdc:	206b6c42 	rsbcs	r6, fp, r2, asr #24
   2fce0:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2fce4:	00000000 	andeq	r0, r0, r0

0002fce8 <.LC18>:
   2fce8:	3d3c2036 	ldccc	0, cr2, [ip, #-216]!	; 0xffffff28
   2fcec:	6d436e20 	stclvs	14, cr6, [r3, #-128]	; 0xffffff80
   2fcf0:	6b6c4264 	blvs	1b40688 <mailbuffer+0x1b05598>
   2fcf4:	206e654c 	rsbcs	r6, lr, ip, asr #10
   2fcf8:	6e202626 	cfmadda32vs	mvax1, mvax2, mvfx0, mvfx6
   2fcfc:	42646d43 	rsbmi	r6, r4, #4288	; 0x10c0
   2fd00:	654c6b6c 	strbvs	r6, [ip, #-2924]	; 0xfffff494
   2fd04:	3d3c206e 	ldccc	0, cr2, [ip, #-440]!	; 0xfffffe48
   2fd08:	00363120 	eorseq	r3, r6, r0, lsr #2

0002fd0c <.LC19>:
   2fd0c:	6675426e 	ldrbtvs	r4, [r5], -lr, ror #4
   2fd10:	206e654c 	rsbcs	r6, lr, ip, asr #10
   2fd14:	30203d3d 	eorcc	r3, r0, sp, lsr sp
   2fd18:	207c7c20 	rsbscs	r7, ip, r0, lsr #24
   2fd1c:	66754270 			; <UNDEFINED> instruction: 0x66754270
   2fd20:	20726566 	rsbscs	r6, r2, r6, ror #10
   2fd24:	30203d21 	eorcc	r3, r0, r1, lsr #26
   2fd28:	00000000 	andeq	r0, r0, r0

0002fd2c <.LC20>:
   2fd2c:	736f4870 	cmnvc	pc, #112, 16	; 0x700000
   2fd30:	3d212074 	stccc	0, cr2, [r1, #-464]!	; 0xfffffe30
   2fd34:	00003020 	andeq	r3, r0, r0, lsr #32

0002fd38 <.LC21>:
   2fd38:	20574243 	subscs	r4, r7, r3, asr #4
   2fd3c:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
   2fd40:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
   2fd44:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
   2fd48:	0064656c 	rsbeq	r6, r4, ip, ror #10

0002fd4c <.LC22>:
   2fd4c:	61746144 	cmnvs	r4, r4, asr #2
   2fd50:	61727420 	cmnvs	r2, r0, lsr #8
   2fd54:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
   2fd58:	61662072 	smcvs	25090	; 0x6202
   2fd5c:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
   2fd60:	00000000 	andeq	r0, r0, r0

0002fd64 <.LC23>:
   2fd64:	20575343 	subscs	r5, r7, r3, asr #6
   2fd68:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
   2fd6c:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
   2fd70:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
   2fd74:	0064656c 	rsbeq	r6, r4, ip, ror #10

0002fd78 <.LC24>:
   2fd78:	20575343 	subscs	r5, r7, r3, asr #6
   2fd7c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
   2fd80:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
   2fd84:	73692065 	cmnvc	r9, #101	; 0x65
   2fd88:	6f727720 	svcvs	0x00727720
   2fd8c:	0000676e 	andeq	r6, r0, lr, ror #14

0002fd90 <.LC25>:
   2fd90:	20575343 	subscs	r5, r7, r3, asr #6
   2fd94:	20676174 	rsbcs	r6, r7, r4, ror r1
   2fd98:	77207369 	strvc	r7, [r0, -r9, ror #6]!
   2fd9c:	676e6f72 			; <UNDEFINED> instruction: 0x676e6f72
   2fda0:	00000000 	andeq	r0, r0, r0

0002fda4 <.LC26>:
   2fda4:	61746144 	cmnvs	r4, r4, asr #2
   2fda8:	73657220 	cmnvc	r5, #32, 4
   2fdac:	65756469 	ldrbvs	r6, [r5, #-1129]!	; 0xfffffb97
   2fdb0:	20736920 	rsbscs	r6, r3, r0, lsr #18
   2fdb4:	20746f6e 	rsbscs	r6, r4, lr, ror #30
   2fdb8:	00000030 	andeq	r0, r0, r0, lsr r0

0002fdbc <.LC27>:
   2fdbc:	6e6e6143 	powvsem	f6, f6, f3
   2fdc0:	7220746f 	eorvc	r7, r0, #1862270976	; 0x6f000000
   2fdc4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
   2fdc8:	76656420 	strbtvc	r6, [r5], -r0, lsr #8
   2fdcc:	00656369 	rsbeq	r6, r5, r9, ror #6

0002fdd0 <.LC28>:
   2fdd0:	6e6e6143 	powvsem	f6, f6, f3
   2fdd4:	6320746f 	teqvs	r0, #1862270976	; 0x6f000000
   2fdd8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
   2fddc:	6c616820 	stclvs	8, cr6, [r1], #-128	; 0xffffff80
   2fde0:	6e6f2074 	mcrvs	0, 3, r2, cr15, cr4, {3}
   2fde4:	646e6520 	strbtvs	r6, [lr], #-1312	; 0xfffffae0
   2fde8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2fdec:	00312074 	eorseq	r2, r1, r4, ror r0

0002fdf0 <.LC29>:
   2fdf0:	6e6e6143 	powvsem	f6, f6, f3
   2fdf4:	6320746f 	teqvs	r0, #1862270976	; 0x6f000000
   2fdf8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
   2fdfc:	6c616820 	stclvs	8, cr6, [r1], #-128	; 0xffffff80
   2fe00:	6e6f2074 	mcrvs	0, 3, r2, cr15, cr4, {3}
   2fe04:	646e6520 	strbtvs	r6, [lr], #-1312	; 0xfffffae0
   2fe08:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
   2fe0c:	00322074 	eorseq	r2, r2, r4, ror r0

0002fe10 <.LC0>:
   2fe10:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2fe14:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2fe18:	00003020 	andeq	r3, r0, r0, lsr #32

0002fe1c <.LC1>:
   2fe1c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2fd68 <.LC23+0x4>
   2fe20:	6a6c2f65 	bvs	1b3bbbc <mailbuffer+0x1b00acc>
   2fe24:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2fe28:	2f727566 	svccs	0x00727566
   2fe2c:	6b736544 	blvs	1d09344 <mailbuffer+0x1cce254>
   2fe30:	2f706f74 	svccs	0x00706f74
   2fe34:	2f697072 	svccs	0x00697072
   2fe38:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2fe3c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2fe40:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2fe44:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2fe48:	534f5452 	movtpl	r5, #62546	; 0xf452
   2fe4c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2fe50:	2f726574 	svccs	0x00726574
   2fe54:	6f6d6544 	svcvs	0x006d6544
   2fe58:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2fe5c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2fe60:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2fe64:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2fe68:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2fe6c:	6877642f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, sl, sp, lr}^
   2fe70:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
   2fe74:	73656d61 	cmnvc	r5, #6208	; 0x1840
   2fe78:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
   2fe7c:	7265706e 	rsbvc	r7, r5, #110	; 0x6e
   2fe80:	0000632e 	andeq	r6, r0, lr, lsr #6

0002fe84 <.LC2>:
   2fe84:	00000030 	andeq	r0, r0, r0, lsr r0

0002fe88 <.LC3>:
   2fe88:	6174536e 	cmnvs	r4, lr, ror #6
   2fe8c:	20737574 	rsbscs	r7, r3, r4, ror r5
   2fe90:	57442026 	strbpl	r2, [r4, -r6, lsr #32]
   2fe94:	5f494348 	svcpl	0x00494348
   2fe98:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2fe9c:	4148435f 	cmpmi	r8, pc, asr r3
   2fea0:	4e495f4e 	cdpmi	15, 4, cr5, cr9, cr14, {2}
   2fea4:	43415f54 	movtmi	r5, #8020	; 0x1f54
   2fea8:	0000004b 	andeq	r0, r0, fp, asr #32

0002feac <.LC4>:
   2feac:	63737764 	cmnvs	r3, #100, 14	; 0x1900000
   2feb0:	00646568 	rsbeq	r6, r4, r8, ror #10

0002feb4 <.LC5>:
   2feb4:	61766e49 	cmnvs	r6, r9, asr #28
   2feb8:	2064696c 	rsbcs	r6, r4, ip, ror #18
   2febc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
   2fec0:	30207375 	eorcc	r7, r0, r5, ror r3
   2fec4:	00582578 	subseq	r2, r8, r8, ror r5

0002fec8 <.LC0>:
   2fec8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   2fecc:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   2fed0:	00003020 	andeq	r3, r0, r0, lsr #32

0002fed4 <.LC1>:
   2fed4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2fe20 <.LC1+0x4>
   2fed8:	6a6c2f65 	bvs	1b3bc74 <mailbuffer+0x1b00b84>
   2fedc:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   2fee0:	2f727566 	svccs	0x00727566
   2fee4:	6b736544 	blvs	1d093fc <mailbuffer+0x1cce30c>
   2fee8:	2f706f74 	svccs	0x00706f74
   2feec:	2f697072 	svccs	0x00697072
   2fef0:	70736152 	rsbsvc	r6, r3, r2, asr r1
   2fef4:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   2fef8:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   2fefc:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   2ff00:	534f5452 	movtpl	r5, #62546	; 0xf452
   2ff04:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   2ff08:	2f726574 	svccs	0x00726574
   2ff0c:	6f6d6544 	svcvs	0x006d6544
   2ff10:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   2ff14:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   2ff18:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   2ff1c:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   2ff20:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   2ff24:	6877642f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, sl, sp, lr}^
   2ff28:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
   2ff2c:	73656d61 	cmnvc	r5, #6208	; 0x1840
   2ff30:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
   2ff34:	2e726570 	mrccs	5, 3, r6, cr2, cr0, {3}
   2ff38:	00000063 	andeq	r0, r0, r3, rrx

0002ff3c <.LC2>:
   2ff3c:	00000030 	andeq	r0, r0, r0, lsr r0

0002ff40 <.LC3>:
   2ff40:	6174536e 	cmnvs	r4, lr, ror #6
   2ff44:	20737574 	rsbscs	r7, r3, r4, ror r5
   2ff48:	57442026 	strbpl	r2, [r4, -r6, lsr #32]
   2ff4c:	5f494348 	svcpl	0x00494348
   2ff50:	54534f48 	ldrbpl	r4, [r3], #-3912	; 0xfffff0b8
   2ff54:	4148435f 	cmpmi	r8, pc, asr r3
   2ff58:	4e495f4e 	cdpmi	15, 4, cr5, cr9, cr14, {2}
   2ff5c:	43415f54 	movtmi	r5, #8020	; 0x1f54
   2ff60:	0000004b 	andeq	r0, r0, fp, asr #32

0002ff64 <.LC4>:
   2ff64:	63737764 	cmnvs	r3, #100, 14	; 0x1900000
   2ff68:	00646568 	rsbeq	r6, r4, r8, ror #10

0002ff6c <.LC5>:
   2ff6c:	61766e49 	cmnvs	r6, r9, asr #28
   2ff70:	2064696c 	rsbcs	r6, r4, ip, ror #18
   2ff74:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
   2ff78:	30207375 	eorcc	r7, r0, r5, ror r3
   2ff7c:	00582578 	subseq	r2, r8, r8, ror r5
   2ff80:	00000020 	andeq	r0, r0, r0, lsr #32
   2ff84:	0000001b 	andeq	r0, r0, fp, lsl r0
   2ff88:	0000007f 	andeq	r0, r0, pc, ror r0
   2ff8c:	00000009 	andeq	r0, r0, r9
   2ff90:	0000000a 	andeq	r0, r0, sl
   2ff94:	7e325b1b 	vmovvc.32	r5, d2[1]
   2ff98:	00000000 	andeq	r0, r0, r0
   2ff9c:	7e315b1b 	vmovvc.32	r5, d1[1]
   2ffa0:	00000000 	andeq	r0, r0, r0
   2ffa4:	7e355b1b 	vmovvc.32	r5, d5[1]
   2ffa8:	00000000 	andeq	r0, r0, r0
   2ffac:	7e335b1b 	vmovvc.32	r5, d3[1]
   2ffb0:	00000000 	andeq	r0, r0, r0
   2ffb4:	7e345b1b 	vmovvc.32	r5, d4[1]
   2ffb8:	00000000 	andeq	r0, r0, r0
   2ffbc:	7e365b1b 	vmovvc.32	r5, d6[1]
   2ffc0:	00000000 	andeq	r0, r0, r0
   2ffc4:	00415b1b 	subeq	r5, r1, fp, lsl fp
   2ffc8:	00425b1b 	subeq	r5, r2, fp, lsl fp
   2ffcc:	00445b1b 	subeq	r5, r4, fp, lsl fp
   2ffd0:	00435b1b 	subeq	r5, r3, fp, lsl fp
   2ffd4:	415b5b1b 	cmpmi	fp, fp, lsl fp
   2ffd8:	00000000 	andeq	r0, r0, r0
   2ffdc:	425b5b1b 	subsmi	r5, fp, #27648	; 0x6c00
   2ffe0:	00000000 	andeq	r0, r0, r0
   2ffe4:	435b5b1b 	cmpmi	fp, #27648	; 0x6c00
   2ffe8:	00000000 	andeq	r0, r0, r0
   2ffec:	445b5b1b 	ldrbmi	r5, [fp], #-2843	; 0xfffff4e5
   2fff0:	00000000 	andeq	r0, r0, r0
   2fff4:	455b5b1b 	ldrbmi	r5, [fp, #-2843]	; 0xfffff4e5
   2fff8:	00000000 	andeq	r0, r0, r0
   2fffc:	37315b1b 			; <UNDEFINED> instruction: 0x37315b1b
   30000:	0000007e 	andeq	r0, r0, lr, ror r0
   30004:	38315b1b 	ldmdacc	r1!, {r0, r1, r3, r4, r8, r9, fp, ip, lr}
   30008:	0000007e 	andeq	r0, r0, lr, ror r0
   3000c:	39315b1b 	ldmdbcc	r1!, {r0, r1, r3, r4, r8, r9, fp, ip, lr}
   30010:	0000007e 	andeq	r0, r0, lr, ror r0
   30014:	30325b1b 	eorscc	r5, r2, fp, lsl fp
   30018:	0000007e 	andeq	r0, r0, lr, ror r0
   3001c:	0000002f 	andeq	r0, r0, pc, lsr #32
   30020:	0000002a 	andeq	r0, r0, sl, lsr #32
   30024:	0000002d 	andeq	r0, r0, sp, lsr #32
   30028:	0000002b 	andeq	r0, r0, fp, lsr #32
   3002c:	00000031 	andeq	r0, r0, r1, lsr r0
   30030:	00000032 	andeq	r0, r0, r2, lsr r0
   30034:	00000033 	andeq	r0, r0, r3, lsr r0
   30038:	00000034 	andeq	r0, r0, r4, lsr r0
   3003c:	00000035 	andeq	r0, r0, r5, lsr r0
   30040:	00000036 	andeq	r0, r0, r6, lsr r0
   30044:	00000037 	andeq	r0, r0, r7, lsr r0
   30048:	00000038 	andeq	r0, r0, r8, lsr r0
   3004c:	00000039 	andeq	r0, r0, r9, lsr r0
   30050:	00000030 	andeq	r0, r0, r0, lsr r0
   30054:	00475b1b 	subeq	r5, r7, fp, lsl fp
   30058:	0000002c 	andeq	r0, r0, ip, lsr #32
   3005c:	0000002e 	andeq	r0, r0, lr, lsr #32

00030060 <s_DefaultMap>:
	...
   3006c:	62004161 	andvs	r4, r0, #1073741848	; 0x40000018
   30070:	43630042 	cmnmi	r3, #66	; 0x42
   30074:	00446400 	subeq	r6, r4, r0, lsl #8
   30078:	66004565 	strvs	r4, [r0], -r5, ror #10
   3007c:	47670046 	strbmi	r0, [r7, -r6, asr #32]!
   30080:	00486800 	subeq	r6, r8, r0, lsl #16
   30084:	6a004969 	bvs	42630 <mailbuffer+0x7540>
   30088:	4b6b004a 	blmi	1af01b8 <mailbuffer+0x1ab50c8>
   3008c:	004c6c00 	subeq	r6, ip, r0, lsl #24
   30090:	6e004d6d 	cdpvs	13, 0, cr4, cr0, cr13, {3}
   30094:	4f6f004e 	svcmi	0x006f004e
   30098:	00507000 	subseq	r7, r0, r0
   3009c:	72005171 	andvc	r5, r0, #1073741852	; 0x4000001c
   300a0:	53730052 	cmnpl	r3, #82	; 0x52
   300a4:	00547400 	subseq	r7, r4, r0, lsl #8
   300a8:	76005575 			; <UNDEFINED> instruction: 0x76005575
   300ac:	57770056 			; <UNDEFINED> instruction: 0x57770056
   300b0:	00587800 	subseq	r7, r8, r0, lsl #16
   300b4:	7a005979 	bvc	466a0 <mailbuffer+0xb5b0>
   300b8:	2131005a 	teqcs	r1, sl, asr r0
   300bc:	00223200 	eoreq	r3, r2, r0, lsl #4
   300c0:	34002333 	strcc	r2, [r0], #-819	; 0xfffffccd
   300c4:	25350024 	ldrcs	r0, [r5, #-36]!	; 0xffffffdc
   300c8:	005e3600 	subseq	r3, lr, r0, lsl #12
   300cc:	38002637 	stmdacc	r0, {r0, r1, r2, r4, r5, r9, sl, sp}
   300d0:	2839002a 	ldmdacs	r9!, {r1, r3, r5}
   300d4:	00293000 	eoreq	r3, r9, r0
   300d8:	81008484 	smlabbhi	r0, r4, r4, r8
   300dc:	82820081 	addhi	r0, r2, #129	; 0x81
   300e0:	00838300 	addeq	r8, r3, r0, lsl #6
   300e4:	2d008080 	stccs	0, cr8, [r0, #-512]	; 0xfffffe00
   300e8:	2b3d005f 	blcs	f7026c <mailbuffer+0xf3517c>
   300ec:	007b5b00 	rsbseq	r5, fp, r0, lsl #22
   300f0:	23007d5d 	movwcs	r7, #3421	; 0xd5d
   300f4:	7e23007e 	mcrvc	0, 1, r0, cr3, cr14, {3}
   300f8:	003a3b00 	eorseq	r3, sl, r0, lsl #22
   300fc:	60004027 	andvs	r4, r0, r7, lsr #32
   30100:	3c2c7c00 	stccc	12, cr7, [ip], #-0
   30104:	003e2e00 	eorseq	r2, lr, r0, lsl #28
   30108:	9c003f2f 	stcls	15, cr3, [r0], {47}	; 0x2f
   3010c:	008f009c 	umulleq	r0, pc, ip, r0	; <UNPREDICTABLE>
   30110:	00009000 	andeq	r9, r0, r0
   30114:	92000091 	andls	r0, r0, #145	; 0x91
   30118:	00930000 	addseq	r0, r3, r0
   3011c:	00009400 	andeq	r9, r0, r0, lsl #8
   30120:	96000095 			; <UNDEFINED> instruction: 0x96000095
   30124:	00970000 	addseq	r0, r7, r0
   30128:	00009800 	andeq	r9, r0, r0, lsl #16
   3012c:	9a000099 	bls	30398 <.LC10+0x10>
   30130:	009d0000 	addseq	r0, sp, r0
   30134:	00009e00 	andeq	r9, r0, r0, lsl #28
   30138:	8500009f 	strhi	r0, [r0, #-159]	; 0xffffff61
   3013c:	00860000 	addeq	r0, r6, r0
   30140:	00008700 	andeq	r8, r0, r0, lsl #14
   30144:	89000088 	stmdbhi	r0, {r3, r7}
   30148:	008a0000 	addeq	r0, sl, r0
   3014c:	00008e00 	andeq	r8, r0, r0, lsl #28
   30150:	8c00008d 	stchi	0, cr0, [r0], {141}	; 0x8d
   30154:	008b0000 	addeq	r0, fp, r0
   30158:	00a0a000 	adceq	sl, r0, r0
   3015c:	a200a1a1 	andge	sl, r0, #1073741864	; 0x40000028
   30160:	a3a300a2 			; <UNDEFINED> instruction: 0xa3a300a2
   30164:	00a4a400 	adceq	sl, r4, r0, lsl #8
   30168:	8900a5a5 	stmdbhi	r0, {r0, r2, r5, r7, r8, sl, sp, pc}
   3016c:	a78c00a6 	strge	r0, [ip, r6, lsr #1]
   30170:	00a88a00 	adceq	r8, r8, r0, lsl #20
   30174:	b000a98d 	andlt	sl, r0, sp, lsl #19
   30178:	ab8e00aa 	blge	fe3b0428 <_estack+0xf63a0428>
   3017c:	00ac8600 	adceq	r8, ip, r0, lsl #12
   30180:	8700ad8b 	strhi	sl, [r0, -fp, lsl #27]
   30184:	af8500ae 	svcge	0x008500ae
   30188:	00b28800 	adcseq	r8, r2, r0, lsl #16
   3018c:	9b007c5c 	blls	4f304 <mailbuffer+0x14214>
   30190:	0000009b 	muleq	r0, fp, r0
	...

000301e0 <.LC41>:
   301e0:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   301e4:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   301e8:	00003020 	andeq	r3, r0, r0, lsr #32

000301ec <.LC42>:
   301ec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 30138 <s_DefaultMap+0xd8>
   301f0:	6a6c2f65 	bvs	1b3bf8c <mailbuffer+0x1b00e9c>
   301f4:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   301f8:	2f727566 	svccs	0x00727566
   301fc:	6b736544 	blvs	1d09714 <mailbuffer+0x1cce624>
   30200:	2f706f74 	svccs	0x00706f74
   30204:	2f697072 	svccs	0x00697072
   30208:	70736152 	rsbsvc	r6, r3, r2, asr r1
   3020c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   30210:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   30214:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   30218:	534f5452 	movtpl	r5, #62546	; 0xf452
   3021c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   30220:	2f726574 	svccs	0x00726574
   30224:	6f6d6544 	svcvs	0x006d6544
   30228:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   3022c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   30230:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   30234:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   30238:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   3023c:	79656b2f 	stmdbvc	r5!, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}^
   30240:	2e70616d 	rpwcssz	f6, f0, #5.0
   30244:	00000063 	andeq	r0, r0, r3, rrx

00030248 <FromUSBKbd>:
   30248:	6b627375 	blvs	18cd024 <mailbuffer+0x1891f34>
   3024c:	00006462 	andeq	r6, r0, r2, ror #8

00030250 <.LC0>:
   30250:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30254:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   30258:	00003020 	andeq	r3, r0, r0, lsr #32

0003025c <.LC1>:
   3025c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 301a8 <s_DefaultMap+0x148>
   30260:	6a6c2f65 	bvs	1b3bffc <mailbuffer+0x1b00f0c>
   30264:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   30268:	2f727566 	svccs	0x00727566
   3026c:	6b736544 	blvs	1d09784 <mailbuffer+0x1cce694>
   30270:	2f706f74 	svccs	0x00706f74
   30274:	2f697072 	svccs	0x00697072
   30278:	70736152 	rsbsvc	r6, r3, r2, asr r1
   3027c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   30280:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   30284:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   30288:	534f5452 	movtpl	r5, #62546	; 0xf452
   3028c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   30290:	2f726574 	svccs	0x00726574
   30294:	6f6d6544 	svcvs	0x006d6544
   30298:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   3029c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   302a0:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   302a4:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   302a8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   302ac:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   302b0:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
   302b4:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
   302b8:	0000632e 	andeq	r6, r0, lr, lsr #6

000302bc <.LC2>:
   302bc:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   302c0:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   302c4:	6552705f 	ldrbvs	r7, [r2, #-95]	; 0xffffffa1
   302c8:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
   302cc:	66667542 	strbtvs	r7, [r6], -r2, asr #10
   302d0:	21207265 	teqcs	r0, r5, ror #4
   302d4:	0030203d 	eorseq	r2, r0, sp, lsr r0

000302d8 <.LC3>:
   302d8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   302dc:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   302e0:	6552705f 	ldrbvs	r7, [r2, #-95]	; 0xffffffa1
   302e4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
   302e8:	70646e45 	rsbvc	r6, r4, r5, asr #28
   302ec:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
   302f0:	203d3d20 	eorscs	r3, sp, r0, lsr #26
   302f4:	00000030 	andeq	r0, r0, r0, lsr r0

000302f8 <.LC4>:
   302f8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   302fc:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30300:	6552705f 	ldrbvs	r7, [r2, #-95]	; 0xffffffa1
   30304:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
   30308:	70646e45 	rsbvc	r6, r4, r5, asr #28
   3030c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
   30310:	203d2120 	eorscs	r2, sp, r0, lsr #2
   30314:	00000030 	andeq	r0, r0, r0, lsr r0

00030318 <.LC5>:
   30318:	6e6e6143 	powvsem	f6, f6, f3
   3031c:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   30320:	63207465 	teqvs	r0, #1694498816	; 0x65000000
   30324:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   30328:	61727567 	cmnvs	r2, r7, ror #10
   3032c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   30330:	00000000 	andeq	r0, r0, r0

00030334 <.LC6>:
   30334:	6e6e6143 	powvsem	f6, f6, f3
   30338:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   3033c:	69207465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
   30340:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
   30344:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
   30348:	00000000 	andeq	r0, r0, r0

0003034c <.LC7>:
   3034c:	6e6e6143 	powvsem	f6, f6, f3
   30350:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   30354:	62207465 	eorvs	r7, r0, #1694498816	; 0x65000000
   30358:	20746f6f 	rsbscs	r6, r4, pc, ror #30
   3035c:	746f7270 	strbtvc	r7, [pc], #-624	; 30364 <.LC7+0x18>
   30360:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 301ac <s_DefaultMap+0x14c>
   30364:	00000000 	andeq	r0, r0, r0

00030368 <.LC8>:
   30368:	64626b75 	strbtvs	r6, [r2], #-2933	; 0xfffff48b
   3036c:	00007525 	andeq	r7, r0, r5, lsr #10

00030370 <.LC9>:
   30370:	79654b70 	stmdbvc	r5!, {r4, r5, r6, r8, r9, fp, lr}^
   30374:	73657250 	cmnvc	r5, #80, 4
   30378:	48646573 	stmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
   3037c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
   30380:	21207265 	teqcs	r0, r5, ror #4
   30384:	0030203d 	eorseq	r2, r0, sp, lsr r0

00030388 <.LC10>:
   30388:	6c655370 	stclvs	3, cr5, [r5], #-448	; 0xfffffe40
   3038c:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
   30390:	6f736e6f 	svcvs	0x00736e6f
   30394:	6148656c 	cmpvs	r8, ip, ror #10
   30398:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
   3039c:	3d212072 	stccc	0, cr2, [r1, #-456]!	; 0xfffffe38
   303a0:	00003020 	andeq	r3, r0, r0, lsr #32

000303a4 <.LC11>:
   303a4:	75685370 	strbvc	r5, [r8, #-880]!	; 0xfffffc90
   303a8:	776f6474 			; <UNDEFINED> instruction: 0x776f6474
   303ac:	6e61486e 	cdpvs	8, 6, cr4, cr1, cr14, {3}
   303b0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
   303b4:	203d2120 	eorscs	r2, sp, r0, lsr #2
   303b8:	00000030 	andeq	r0, r0, r0, lsr r0

000303bc <.LC12>:
   303bc:	79654b70 	stmdbvc	r5!, {r4, r5, r6, r8, r9, fp, lr}^
   303c0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
   303c4:	61487375 	hvcvs	34613	; 0x8735
   303c8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
   303cc:	77615272 			; <UNDEFINED> instruction: 0x77615272
   303d0:	203d2120 	eorscs	r2, sp, r0, lsr #2
   303d4:	00000030 	andeq	r0, r0, r0, lsr r0

000303d8 <.LC13>:
   303d8:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
   303dc:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
   303e0:	31203c20 	teqcc	r0, r0, lsr #24
   303e4:	00000032 	andeq	r0, r0, r2, lsr r0

000303e8 <.LC14>:
   303e8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   303ec:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   303f0:	5255705f 	subspl	r7, r5, #95	; 0x5f
   303f4:	3d3d2042 	ldccc	0, cr2, [sp, #-264]!	; 0xfffffef8
   303f8:	00003020 	andeq	r3, r0, r0, lsr #32

000303fc <.LC15>:
   303fc:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30400:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30404:	5255705f 	subspl	r7, r5, #95	; 0x5f
   30408:	3d212042 	stccc	0, cr2, [r1, #-264]!	; 0xfffffef8
   3040c:	00003020 	andeq	r3, r0, r0, lsr #32

00030410 <.LC16>:
   30410:	42525570 	subsmi	r5, r2, #112, 10	; 0x1c000000
   30414:	203d2120 	eorscs	r2, sp, r0, lsr #2
   30418:	00000030 	andeq	r0, r0, r0, lsr r0

0003041c <.LC17>:
   3041c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30420:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30424:	5255705f 	subspl	r7, r5, #95	; 0x5f
   30428:	3d3d2042 	ldccc	0, cr2, [sp, #-264]!	; 0xfffffef8
   3042c:	52557020 	subspl	r7, r5, #32
   30430:	00000042 	andeq	r0, r0, r2, asr #32

00030434 <FromDWHCIRoot>:
   30434:	6f727764 	svcvs	0x00727764
   30438:	0000746f 	andeq	r7, r0, pc, ror #8

0003043c <.LC0>:
   3043c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30440:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   30444:	00003020 	andeq	r3, r0, r0, lsr #32

00030448 <.LC1>:
   30448:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 30394 <.LC10+0xc>
   3044c:	6a6c2f65 	bvs	1b3c1e8 <mailbuffer+0x1b010f8>
   30450:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   30454:	2f727566 	svccs	0x00727566
   30458:	6b736544 	blvs	1d09970 <mailbuffer+0x1cce880>
   3045c:	2f706f74 	svccs	0x00706f74
   30460:	2f697072 	svccs	0x00697072
   30464:	70736152 	rsbsvc	r6, r3, r2, asr r1
   30468:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   3046c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   30470:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   30474:	534f5452 	movtpl	r5, #62546	; 0xf452
   30478:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   3047c:	2f726574 	svccs	0x00726574
   30480:	6f6d6544 	svcvs	0x006d6544
   30484:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   30488:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   3048c:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   30490:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   30494:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   30498:	6877642f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, sl, sp, lr}^
   3049c:	6f726963 	svcvs	0x00726963
   304a0:	6f70746f 	svcvs	0x0070746f
   304a4:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
   304a8:	00000000 	andeq	r0, r0, r0

000304ac <.LC2>:
   304ac:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   304b0:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   304b4:	6f48705f 	svcvs	0x0048705f
   304b8:	21207473 	teqcs	r0, r3, ror r4
   304bc:	0030203d 	eorseq	r2, r0, sp, lsr r0

000304c0 <.LC3>:
   304c0:	6e6e6143 	powvsem	f6, f6, f3
   304c4:	6420746f 	strtvs	r7, [r0], #-1135	; 0xfffffb91
   304c8:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
   304cc:	6f702074 	svcvs	0x00702074
   304d0:	73207472 	teqvc	r0, #1912602624	; 0x72000000
   304d4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
   304d8:	00000000 	andeq	r0, r0, r0

000304dc <.LC4>:
   304dc:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   304e0:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   304e4:	6544705f 	strbvs	r7, [r4, #-95]	; 0xffffffa1
   304e8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   304ec:	203d3d20 	eorscs	r3, sp, r0, lsr #26
   304f0:	00000030 	andeq	r0, r0, r0, lsr r0

000304f4 <.LC5>:
   304f4:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   304f8:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   304fc:	6544705f 	strbvs	r7, [r4, #-95]	; 0xffffffa1
   30500:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   30504:	203d2120 	eorscs	r2, sp, r0, lsr #2
   30508:	00000030 	andeq	r0, r0, r0, lsr r0

0003050c <.LC6>:
   3050c:	6d614e70 	stclvs	14, cr4, [r1, #-448]!	; 0xfffffe40
   30510:	21207365 	teqcs	r0, r5, ror #6
   30514:	0030203d 	eorseq	r2, r0, sp, lsr r0

00030518 <.LC7>:
   30518:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
   3051c:	25206563 	strcs	r6, [r0, #-1379]!	; 0xfffffa9d
   30520:	6f662073 	svcvs	0x00662073
   30524:	00646e75 	rsbeq	r6, r4, r5, ror lr

00030528 <.LC8>:
   30528:	6e6e6143 	powvsem	f6, f6, f3
   3052c:	6320746f 	teqvs	r0, #1862270976	; 0x6f000000
   30530:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   30534:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
   30538:	76656420 	strbtvc	r6, [r5], -r0, lsr #8
   3053c:	00656369 	rsbeq	r6, r5, r9, ror #6

00030540 <.LC9>:
   30540:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
   30544:	63206563 	teqvs	r0, #415236096	; 0x18c00000
   30548:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   3054c:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
   30550:	00000064 	andeq	r0, r0, r4, rrx

00030554 <.LC10>:
   30554:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
   30558:	69206563 	stmdbvs	r0!, {r0, r1, r5, r6, r8, sl, sp, lr}
   3055c:	6f6e2073 	svcvs	0x006e2073
   30560:	75732074 	ldrbvc	r2, [r3, #-116]!	; 0xffffff8c
   30564:	726f7070 	rsbvc	r7, pc, #112	; 0x70
   30568:	00646574 	rsbeq	r6, r4, r4, ror r5

0003056c <.LC11>:
   3056c:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
   30570:	7275632d 	rsbsvc	r6, r5, #-1275068416	; 0xb4000000
   30574:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
   30578:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
   3057c:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
   30580:	00006e6f 	andeq	r6, r0, pc, ror #28

00030584 <FromUSBKbd>:
   30584:	756f6d75 	strbvc	r6, [pc, #-3445]!	; 2f817 <.LC1+0x33>
   30588:	00006573 	andeq	r6, r0, r3, ror r5

0003058c <.LC0>:
   3058c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30590:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   30594:	00003020 	andeq	r3, r0, r0, lsr #32

00030598 <.LC1>:
   30598:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 304e4 <.LC4+0x8>
   3059c:	6a6c2f65 	bvs	1b3c338 <mailbuffer+0x1b01248>
   305a0:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   305a4:	2f727566 	svccs	0x00727566
   305a8:	6b736544 	blvs	1d09ac0 <mailbuffer+0x1cce9d0>
   305ac:	2f706f74 	svccs	0x00706f74
   305b0:	2f697072 	svccs	0x00697072
   305b4:	70736152 	rsbsvc	r6, r3, r2, asr r1
   305b8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   305bc:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   305c0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   305c4:	534f5452 	movtpl	r5, #62546	; 0xf452
   305c8:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   305cc:	2f726574 	svccs	0x00726574
   305d0:	6f6d6544 	svcvs	0x006d6544
   305d4:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   305d8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   305dc:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   305e0:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   305e4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   305e8:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   305ec:	73756f6d 	cmnvc	r5, #436	; 0x1b4
   305f0:	00632e65 	rsbeq	r2, r3, r5, ror #28

000305f4 <.LC2>:
   305f4:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   305f8:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   305fc:	6552705f 	ldrbvs	r7, [r2, #-95]	; 0xffffffa1
   30600:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
   30604:	66667542 	strbtvs	r7, [r6], -r2, asr #10
   30608:	21207265 	teqcs	r0, r5, ror #4
   3060c:	0030203d 	eorseq	r2, r0, sp, lsr r0

00030610 <.LC3>:
   30610:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30614:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30618:	6552705f 	ldrbvs	r7, [r2, #-95]	; 0xffffffa1
   3061c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
   30620:	70646e45 	rsbvc	r6, r4, r5, asr #28
   30624:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
   30628:	203d3d20 	eorscs	r3, sp, r0, lsr #26
   3062c:	00000030 	andeq	r0, r0, r0, lsr r0

00030630 <.LC4>:
   30630:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30634:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30638:	6552705f 	ldrbvs	r7, [r2, #-95]	; 0xffffffa1
   3063c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
   30640:	70646e45 	rsbvc	r6, r4, r5, asr #28
   30644:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
   30648:	203d2120 	eorscs	r2, sp, r0, lsr #2
   3064c:	00000030 	andeq	r0, r0, r0, lsr r0

00030650 <.LC5>:
   30650:	6e6e6143 	powvsem	f6, f6, f3
   30654:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   30658:	63207465 	teqvs	r0, #1694498816	; 0x65000000
   3065c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   30660:	61727567 	cmnvs	r2, r7, ror #10
   30664:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   30668:	00000000 	andeq	r0, r0, r0

0003066c <.LC6>:
   3066c:	6e6e6143 	powvsem	f6, f6, f3
   30670:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   30674:	69207465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
   30678:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
   3067c:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
   30680:	00000000 	andeq	r0, r0, r0

00030684 <.LC7>:
   30684:	6e6e6143 	powvsem	f6, f6, f3
   30688:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   3068c:	62207465 	eorvs	r7, r0, #1694498816	; 0x65000000
   30690:	20746f6f 	rsbscs	r6, r4, pc, ror #30
   30694:	746f7270 	strbtvc	r7, [pc], #-624	; 3069c <.LC7+0x18>
   30698:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 304e4 <.LC4+0x8>
   3069c:	00000000 	andeq	r0, r0, r0

000306a0 <.LC8>:
   306a0:	756f6d75 	strbvc	r6, [pc, #-3445]!	; 2f933 <.LC12+0x17>
   306a4:	75256573 	strvc	r6, [r5, #-1395]!	; 0xfffffa8d
   306a8:	00000000 	andeq	r0, r0, r0

000306ac <.LC9>:
   306ac:	61745370 	cmnvs	r4, r0, ror r3
   306b0:	48737574 	ldmdami	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
   306b4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
   306b8:	21207265 	teqcs	r0, r5, ror #4
   306bc:	0030203d 	eorseq	r2, r0, sp, lsr r0

000306c0 <.LC10>:
   306c0:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   306c4:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   306c8:	5255705f 	subspl	r7, r5, #95	; 0x5f
   306cc:	3d3d2042 	ldccc	0, cr2, [sp, #-264]!	; 0xfffffef8
   306d0:	00003020 	andeq	r3, r0, r0, lsr #32

000306d4 <.LC11>:
   306d4:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   306d8:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   306dc:	5255705f 	subspl	r7, r5, #95	; 0x5f
   306e0:	3d212042 	stccc	0, cr2, [r1, #-264]!	; 0xfffffef8
   306e4:	00003020 	andeq	r3, r0, r0, lsr #32

000306e8 <.LC12>:
   306e8:	42525570 	subsmi	r5, r2, #112, 10	; 0x1c000000
   306ec:	203d2120 	eorscs	r2, sp, r0, lsr #2
   306f0:	00000030 	andeq	r0, r0, r0, lsr r0

000306f4 <.LC13>:
   306f4:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   306f8:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   306fc:	5255705f 	subspl	r7, r5, #95	; 0x5f
   30700:	3d3d2042 	ldccc	0, cr2, [sp, #-264]!	; 0xfffffef8
   30704:	52557020 	subspl	r7, r5, #32
   30708:	00000042 	andeq	r0, r0, r2, asr #32

0003070c <.LC0>:
   3070c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30710:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   30714:	00003020 	andeq	r3, r0, r0, lsr #32

00030718 <.LC1>:
   30718:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 30664 <.LC5+0x14>
   3071c:	6a6c2f65 	bvs	1b3c4b8 <mailbuffer+0x1b013c8>
   30720:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   30724:	2f727566 	svccs	0x00727566
   30728:	6b736544 	blvs	1d09c40 <mailbuffer+0x1cceb50>
   3072c:	2f706f74 	svccs	0x00706f74
   30730:	2f697072 	svccs	0x00697072
   30734:	70736152 	rsbsvc	r6, r3, r2, asr r1
   30738:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   3073c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   30740:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   30744:	534f5452 	movtpl	r5, #62546	; 0xf452
   30748:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   3074c:	2f726574 	svccs	0x00726574
   30750:	6f6d6544 	svcvs	0x006d6544
   30754:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   30758:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   3075c:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   30760:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   30764:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   30768:	6877642f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, sl, sp, lr}^
   3076c:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
   30770:	73656d61 	cmnvc	r5, #6208	; 0x1840
   30774:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
   30778:	6c70736e 	ldclvs	3, cr7, [r0], #-440	; 0xfffffe48
   3077c:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
   30780:	00000000 	andeq	r0, r0, r0

00030784 <.LC2>:
   30784:	00000030 	andeq	r0, r0, r0, lsr r0

00030788 <FromUSBPad>:
   30788:	70627375 	rsbvc	r7, r2, r5, ror r3
   3078c:	00006461 	andeq	r6, r0, r1, ror #8

00030790 <.LC0>:
   30790:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30794:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   30798:	00003020 	andeq	r3, r0, r0, lsr #32

0003079c <.LC1>:
   3079c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 306e8 <.LC12>
   307a0:	6a6c2f65 	bvs	1b3c53c <mailbuffer+0x1b0144c>
   307a4:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   307a8:	2f727566 	svccs	0x00727566
   307ac:	6b736544 	blvs	1d09cc4 <mailbuffer+0x1ccebd4>
   307b0:	2f706f74 	svccs	0x00706f74
   307b4:	2f697072 	svccs	0x00697072
   307b8:	70736152 	rsbsvc	r6, r3, r2, asr r1
   307bc:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   307c0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   307c4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   307c8:	534f5452 	movtpl	r5, #62546	; 0xf452
   307cc:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   307d0:	2f726574 	svccs	0x00726574
   307d4:	6f6d6544 	svcvs	0x006d6544
   307d8:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   307dc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   307e0:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   307e4:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   307e8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   307ec:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   307f0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
   307f4:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
   307f8:	00000063 	andeq	r0, r0, r3, rrx

000307fc <.LC2>:
   307fc:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30800:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30804:	6552705f 	ldrbvs	r7, [r2, #-95]	; 0xffffffa1
   30808:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
   3080c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
   30810:	21207265 	teqcs	r0, r5, ror #4
   30814:	0030203d 	eorseq	r2, r0, sp, lsr r0

00030818 <.LC3>:
   30818:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   3081c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30820:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   30824:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   30828:	6e49746e 	cdpvs	4, 4, cr7, cr9, cr14, {3}
   3082c:	203d2120 	eorscs	r2, sp, r0, lsr #2
   30830:	00000030 	andeq	r0, r0, r0, lsr r0

00030834 <.LC4>:
   30834:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30838:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   3083c:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
   30840:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
   30844:	754f746e 	strbvc	r7, [pc, #-1134]	; 303de <.LC13+0x6>
   30848:	3d212074 	stccc	0, cr2, [r1, #-464]!	; 0xfffffe30
   3084c:	00003020 	andeq	r3, r0, r0, lsr #32

00030850 <.LC5>:
   30850:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30854:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30858:	4948705f 	stmdbmi	r8, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
   3085c:	70655244 	rsbvc	r5, r5, r4, asr #4
   30860:	4474726f 	ldrbtmi	r7, [r4], #-623	; 0xfffffd91
   30864:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
   30868:	6f747069 	svcvs	0x00747069
   3086c:	3d212072 	stccc	0, cr2, [r1, #-456]!	; 0xfffffe38
   30870:	00003020 	andeq	r3, r0, r0, lsr #32

00030874 <.LC6>:
   30874:	6e6e6143 	powvsem	f6, f6, f3
   30878:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   3087c:	48207465 	stmdami	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
   30880:	72204449 	eorvc	r4, r0, #1224736768	; 0x49000000
   30884:	726f7065 	rsbvc	r7, pc, #101	; 0x65
   30888:	65642074 	strbvs	r2, [r4, #-116]!	; 0xffffff8c
   3088c:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
   30890:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
   30894:	00000000 	andeq	r0, r0, r0

00030898 <.LC7>:
   30898:	6e6e6143 	powvsem	f6, f6, f3
   3089c:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   308a0:	63207465 	teqvs	r0, #1694498816	; 0x65000000
   308a4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   308a8:	61727567 	cmnvs	r2, r7, ror #10
   308ac:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
   308b0:	00000000 	andeq	r0, r0, r0

000308b4 <.LC8>:
   308b4:	6e6e6143 	powvsem	f6, f6, f3
   308b8:	7320746f 	teqvc	r0, #1862270976	; 0x6f000000
   308bc:	69207465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
   308c0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
   308c4:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
   308c8:	00000000 	andeq	r0, r0, r0

000308cc <.LC9>:
   308cc:	64617075 	strbtvs	r7, [r1], #-117	; 0xffffff8b
   308d0:	00007525 	andeq	r7, r0, r5, lsr #10

000308d4 <.LC10>:
   308d4:	61745370 	cmnvs	r4, r0, ror r3
   308d8:	48737574 	ldmdami	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
   308dc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
   308e0:	21207265 	teqcs	r0, r5, ror #4
   308e4:	0030203d 	eorseq	r2, r0, sp, lsr r0

000308e8 <.LC11>:
   308e8:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   308ec:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   308f0:	5255705f 	subspl	r7, r5, #95	; 0x5f
   308f4:	3d3d2042 	ldccc	0, cr2, [sp, #-264]!	; 0xfffffef8
   308f8:	00003020 	andeq	r3, r0, r0, lsr #32

000308fc <.LC12>:
   308fc:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30900:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30904:	5255705f 	subspl	r7, r5, #95	; 0x5f
   30908:	3d212042 	stccc	0, cr2, [r1, #-264]!	; 0xfffffef8
   3090c:	00003020 	andeq	r3, r0, r0, lsr #32

00030910 <.LC13>:
   30910:	42525570 	subsmi	r5, r2, #112, 10	; 0x1c000000
   30914:	203d2120 	eorscs	r2, sp, r0, lsr #2
   30918:	00000030 	andeq	r0, r0, r0, lsr r0

0003091c <.LC14>:
   3091c:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30920:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30924:	5255705f 	subspl	r7, r5, #95	; 0x5f
   30928:	3d3d2042 	ldccc	0, cr2, [sp, #-264]!	; 0xfffffef8
   3092c:	52557020 	subspl	r7, r5, #32
   30930:	00000042 	andeq	r0, r0, r2, asr #32

00030934 <.LC0>:
   30934:	436e5f73 	cmnmi	lr, #460	; 0x1cc
   30938:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   3093c:	4c6c6163 	stfmie	f6, [ip], #-396	; 0xfffffe74
   30940:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
   30944:	30203e20 	eorcc	r3, r0, r0, lsr #28
   30948:	00000000 	andeq	r0, r0, r0

0003094c <.LC1>:
   3094c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 30898 <.LC7>
   30950:	6a6c2f65 	bvs	1b3c6ec <mailbuffer+0x1b015fc>
   30954:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   30958:	2f727566 	svccs	0x00727566
   3095c:	6b736544 	blvs	1d09e74 <mailbuffer+0x1cced84>
   30960:	2f706f74 	svccs	0x00706f74
   30964:	2f697072 	svccs	0x00697072
   30968:	70736152 	rsbsvc	r6, r3, r2, asr r1
   3096c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   30970:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   30974:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   30978:	534f5452 	movtpl	r5, #62546	; 0xf452
   3097c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   30980:	2f726574 	svccs	0x00726574
   30984:	6f6d6544 	svcvs	0x006d6544
   30988:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   3098c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   30990:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   30994:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   30998:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   3099c:	6e79732f 	cdpvs	3, 7, cr7, cr9, cr15, {1}
   309a0:	6f726863 	svcvs	0x00726863
   309a4:	657a696e 	ldrbvs	r6, [sl, #-2414]!	; 0xfffff692
   309a8:	0000632e 	andeq	r6, r0, lr, lsr #6

000309ac <.LC0>:
   309ac:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   309b0:	3d212073 	stccc	0, cr2, [r1, #-460]!	; 0xfffffe34
   309b4:	00003020 	andeq	r3, r0, r0, lsr #32

000309b8 <.LC1>:
   309b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 30904 <.LC12+0x8>
   309bc:	6a6c2f65 	bvs	1b3c758 <mailbuffer+0x1b01668>
   309c0:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
   309c4:	2f727566 	svccs	0x00727566
   309c8:	6b736544 	blvs	1d09ee0 <mailbuffer+0x1ccedf0>
   309cc:	2f706f74 	svccs	0x00706f74
   309d0:	2f697072 	svccs	0x00697072
   309d4:	70736152 	rsbsvc	r6, r3, r2, asr r1
   309d8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
   309dc:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
   309e0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
   309e4:	534f5452 	movtpl	r5, #62546	; 0xf452
   309e8:	73616d2d 	cmnvc	r1, #2880	; 0xb40
   309ec:	2f726574 	svccs	0x00726574
   309f0:	6f6d6544 	svcvs	0x006d6544
   309f4:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
   309f8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
   309fc:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
   30a00:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
   30a04:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
   30a08:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
   30a0c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
   30a10:	632e676e 	teqvs	lr, #28835840	; 0x1b80000
   30a14:	00000000 	andeq	r0, r0, r0

00030a18 <.LC2>:
   30a18:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30a1c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30a20:	6544705f 	strbvs	r7, [r4, #-95]	; 0xffffffa1
   30a24:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
   30a28:	203d2120 	eorscs	r2, sp, r0, lsr #2
   30a2c:	00000030 	andeq	r0, r0, r0, lsr r0

00030a30 <.LC3>:
   30a30:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30a34:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30a38:	7453705f 	ldrbvc	r7, [r3], #-95	; 0xffffffa1
   30a3c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
   30a40:	203d2120 	eorscs	r2, sp, r0, lsr #2
   30a44:	00000030 	andeq	r0, r0, r0, lsr r0

00030a48 <.LC4>:
   30a48:	72615070 	rsbvc	r5, r1, #112	; 0x70
   30a4c:	20746e65 	rsbscs	r6, r4, r5, ror #28
   30a50:	30203d21 	eorcc	r3, r0, r1, lsr #26
   30a54:	00000000 	andeq	r0, r0, r0

00030a58 <.LC5>:
   30a58:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30a5c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30a60:	5355705f 	cmppl	r5, #95	; 0x5f
   30a64:	72745342 	rsbsvc	r5, r4, #134217729	; 0x8000001
   30a68:	20676e69 	rsbcs	r6, r7, r9, ror #28
   30a6c:	30203d21 	eorcc	r3, r0, r1, lsr #26
   30a70:	00000000 	andeq	r0, r0, r0

00030a74 <.LC6>:
   30a74:	72615070 	rsbvc	r5, r1, #112	; 0x70
   30a78:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
   30a7c:	705f6d3e 	subsvc	r6, pc, lr, lsr sp	; <UNPREDICTABLE>
   30a80:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
   30a84:	2120676e 	teqcs	r0, lr, ror #14
   30a88:	0030203d 	eorseq	r2, r0, sp, lsr r0

00030a8c <.LC7>:
   30a8c:	44496375 	strbmi	r6, [r9], #-885	; 0xfffffc8b
   30a90:	30203e20 	eorcc	r3, r0, r0, lsr #28
   30a94:	00000000 	andeq	r0, r0, r0

00030a98 <.LC8>:
   30a98:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
   30a9c:	6d3e2d73 	ldcvs	13, cr2, [lr, #-460]!	; 0xfffffe34
   30aa0:	5355705f 	cmppl	r5, #95	; 0x5f
   30aa4:	72745342 	rsbsvc	r5, r4, #134217729	; 0x8000001
   30aa8:	2d676e69 	stclcs	14, cr6, [r7, #-420]!	; 0xfffffe5c
   30aac:	654c623e 	strbvs	r6, [ip, #-574]	; 0xfffffdc2
   30ab0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
   30ab4:	203d3e20 	eorscs	r3, sp, r0, lsr #28
   30ab8:	00000032 	andeq	r0, r0, r2, lsr r0

00030abc <.LC9>:
   30abc:	68547028 	ldmdavs	r4, {r3, r5, ip, sp, lr}^
   30ac0:	3e2d7369 	cdpcc	3, 2, cr7, cr13, cr9, {3}
   30ac4:	55705f6d 	ldrbpl	r5, [r0, #-3949]!	; 0xfffff093
   30ac8:	74534253 	ldrbvc	r4, [r3], #-595	; 0xfffffdad
   30acc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
   30ad0:	4c623e2d 	stclmi	14, cr3, [r2], #-180	; 0xffffff4c
   30ad4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
   30ad8:	20262068 	eorcs	r2, r6, r8, rrx
   30adc:	3d202931 	stccc	9, cr2, [r0, #-196]!	; 0xffffff3c
   30ae0:	0030203d 	eorseq	r2, r0, sp, lsr r0

00030ae4 <.LC10>:
   30ae4:	6e654c6e 	cdpvs	12, 6, cr4, cr5, cr14, {3}
   30ae8:	20687467 	rsbcs	r7, r8, r7, ror #8
   30aec:	28203d3c 	stmdacs	r0!, {r2, r3, r4, r5, r8, sl, fp, ip, sp}
   30af0:	2d353532 	cfldr32cs	mvfx3, [r5, #-200]!	; 0xffffff38
   30af4:	2f202932 	svccs	0x00202932
   30af8:	00003220 	andeq	r3, r0, r0, lsr #4

00030afc <.LC11>:
   30afc:	6e614c70 	mcrvs	12, 3, r4, cr1, cr0, {3}
   30b00:	67617567 	strbvs	r7, [r1, -r7, ror #10]!
   30b04:	73444965 	movtvc	r4, #18789	; 0x4965
   30b08:	203d2120 	eorscs	r2, sp, r0, lsr #2
   30b0c:	00000030 	andeq	r0, r0, r0, lsr r0

00030b10 <.LC12>:
   30b10:	6e614c70 	mcrvs	12, 3, r4, cr1, cr0, {3}
   30b14:	67617567 	strbvs	r7, [r1, -r7, ror #10]!
   30b18:	73444965 	movtvc	r4, #18789	; 0x4965
   30b1c:	4c623e2d 	stclmi	14, cr3, [r2], #-180	; 0xffffff4c
   30b20:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
   30b24:	3d3e2068 	ldccc	0, cr2, [lr, #-416]!	; 0xfffffe60
   30b28:	00003420 	andeq	r3, r0, r0, lsr #8

00030b2c <.LC13>:
   30b2c:	614c7028 	cmpvs	ip, r8, lsr #32
   30b30:	6175676e 	cmnvs	r5, lr, ror #14
   30b34:	44496567 	strbmi	r6, [r9], #-1383	; 0xfffffa99
   30b38:	623e2d73 	eorsvs	r2, lr, #7360	; 0x1cc0
   30b3c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
   30b40:	26206874 			; <UNDEFINED> instruction: 0x26206874
   30b44:	20293120 	eorcs	r3, r9, r0, lsr #2
   30b48:	30203d3d 	eorcc	r3, r0, sp, lsr sp
   30b4c:	00000000 	andeq	r0, r0, r0

Disassembly of section .data:

00030b50 <ulCriticalNesting>:
   30b50:	0000270f 	andeq	r2, r0, pc, lsl #14

00030b54 <xNextTaskUnblockTime>:
   30b54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

00030b58 <xFreeBytesRemaining>:
   30b58:	0000a000 	andeq	sl, r0, r0

00030b5c <hex>:
   30b5c:	33323130 	teqcc	r2, #48, 2
   30b60:	37363534 			; <UNDEFINED> instruction: 0x37363534
   30b64:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
   30b68:	46454443 	strbmi	r4, [r5], -r3, asr #8

00030b6c <messageh>:
   30b6c:	203a2372 	eorscs	r2, sl, r2, ror r3
   30b70:	3f3f7830 	svccc	0x003f7830
   30b74:	3f3f3f3f 	svccc	0x003f3f3f
   30b78:	00003f3f 	andeq	r3, r0, pc, lsr pc

00030b7c <s_ucNextAddress>:
   30b7c:	00000001 	andeq	r0, r0, r1

00030b80 <s_nDeviceNumber>:
   30b80:	00000001 	andeq	r0, r0, r1

00030b84 <s_KeyStrings>:
   30b84:	0002ff80 	andeq	pc, r2, r0, lsl #31
   30b88:	0002ff84 	andeq	pc, r2, r4, lsl #31
   30b8c:	0002ff88 	andeq	pc, r2, r8, lsl #31
   30b90:	0002ff8c 	andeq	pc, r2, ip, lsl #31
   30b94:	0002ff90 	muleq	r2, r0, pc	; <UNPREDICTABLE>
   30b98:	0002ff94 	muleq	r2, r4, pc	; <UNPREDICTABLE>
   30b9c:	0002ff9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
   30ba0:	0002ffa4 	andeq	pc, r2, r4, lsr #31
   30ba4:	0002ffac 	andeq	pc, r2, ip, lsr #31
   30ba8:	0002ffb4 			; <UNDEFINED> instruction: 0x0002ffb4
   30bac:	0002ffbc 			; <UNDEFINED> instruction: 0x0002ffbc
   30bb0:	0002ffc4 	andeq	pc, r2, r4, asr #31
   30bb4:	0002ffc8 	andeq	pc, r2, r8, asr #31
   30bb8:	0002ffcc 	andeq	pc, r2, ip, asr #31
   30bbc:	0002ffd0 	ldrdeq	pc, [r2], -r0
   30bc0:	0002ffd4 	ldrdeq	pc, [r2], -r4
   30bc4:	0002ffdc 	ldrdeq	pc, [r2], -ip
   30bc8:	0002ffe4 	andeq	pc, r2, r4, ror #31
   30bcc:	0002ffec 	andeq	pc, r2, ip, ror #31
   30bd0:	0002fff4 	strdeq	pc, [r2], -r4
   30bd4:	0002fffc 	strdeq	pc, [r2], -ip
   30bd8:	00030004 	andeq	r0, r3, r4
   30bdc:	0003000c 	andeq	r0, r3, ip
   30be0:	00030014 	andeq	r0, r3, r4, lsl r0
	...
   30c08:	0003001c 	andeq	r0, r3, ip, lsl r0
   30c0c:	00030020 	andeq	r0, r3, r0, lsr #32
   30c10:	00030024 	andeq	r0, r3, r4, lsr #32
   30c14:	00030028 	andeq	r0, r3, r8, lsr #32
   30c18:	0002ff90 	muleq	r2, r0, pc	; <UNPREDICTABLE>
   30c1c:	0003002c 	andeq	r0, r3, ip, lsr #32
   30c20:	00030030 	andeq	r0, r3, r0, lsr r0
   30c24:	00030034 	andeq	r0, r3, r4, lsr r0
   30c28:	00030038 	andeq	r0, r3, r8, lsr r0
   30c2c:	0003003c 	andeq	r0, r3, ip, lsr r0
   30c30:	00030040 	andeq	r0, r3, r0, asr #32
   30c34:	00030044 	andeq	r0, r3, r4, asr #32
   30c38:	00030048 	andeq	r0, r3, r8, asr #32
   30c3c:	0003004c 	andeq	r0, r3, ip, asr #32
   30c40:	00030050 	andeq	r0, r3, r0, asr r0
   30c44:	00030054 	andeq	r0, r3, r4, asr r0
   30c48:	00030058 	andeq	r0, r3, r8, asr r0
   30c4c:	0003005c 	andeq	r0, r3, ip, asr r0

00030c50 <s_nDeviceNumber>:
   30c50:	00000001 	andeq	r0, r0, r1

00030c54 <s_nDeviceNumber>:
   30c54:	00000001 	andeq	r0, r0, r1

00030c58 <s_nDeviceNumber>:
   30c58:	00000001 	andeq	r0, r0, r1

00030c5c <writeBuf.5008>:
	...
   30c64:	27ff0000 	ldrbcs	r0, [pc, r0]!
   30c68:	ff320010 			; <UNDEFINED> instruction: 0xff320010
   30c6c:	32001027 	andcc	r1, r0, #39	; 0x27
   30c70:	001027ff 			; <UNDEFINED> instruction: 0x001027ff
   30c74:	1027ff32 	eorne	pc, r7, r2, lsr pc	; <UNPREDICTABLE>
   30c78:	00003200 	andeq	r3, r0, r0, lsl #4
	...

00030c8c <leds.5009>:
   30c8c:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
   30c90:	00000008 	andeq	r0, r0, r8

Disassembly of section .bss:

00030ca0 <__bss_start>:
   30ca0:	00000000 	andeq	r0, r0, r0

00030ca4 <pxReadyCoRoutineLists>:
	...

00030ccc <xDelayedCoRoutineList1>:
	...

00030ce0 <xDelayedCoRoutineList2>:
	...

00030cf4 <pxDelayedCoRoutineList>:
   30cf4:	00000000 	andeq	r0, r0, r0

00030cf8 <pxOverflowDelayedCoRoutineList>:
   30cf8:	00000000 	andeq	r0, r0, r0

00030cfc <xPendingReadyCoRoutineList>:
	...

00030d10 <pxCurrentCoRoutine>:
   30d10:	00000000 	andeq	r0, r0, r0

00030d14 <uxTopCoRoutineReadyPriority>:
   30d14:	00000000 	andeq	r0, r0, r0

00030d18 <xCoRoutineTickCount>:
   30d18:	00000000 	andeq	r0, r0, r0

00030d1c <xLastTickCount>:
   30d1c:	00000000 	andeq	r0, r0, r0

00030d20 <xPassedTicks>:
   30d20:	00000000 	andeq	r0, r0, r0

00030d24 <pxCurrentTCB>:
   30d24:	00000000 	andeq	r0, r0, r0

00030d28 <pxReadyTasksLists>:
	...

00030d8c <xDelayedTaskList1>:
	...

00030da0 <xDelayedTaskList2>:
	...

00030db4 <pxDelayedTaskList>:
   30db4:	00000000 	andeq	r0, r0, r0

00030db8 <pxOverflowDelayedTaskList>:
   30db8:	00000000 	andeq	r0, r0, r0

00030dbc <xPendingReadyList>:
	...

00030dd0 <xTasksWaitingTermination>:
	...

00030de4 <uxTasksDeleted>:
   30de4:	00000000 	andeq	r0, r0, r0

00030de8 <xSuspendedTaskList>:
	...

00030dfc <uxCurrentNumberOfTasks>:
   30dfc:	00000000 	andeq	r0, r0, r0

00030e00 <xTickCount>:
   30e00:	00000000 	andeq	r0, r0, r0

00030e04 <uxTopUsedPriority>:
   30e04:	00000000 	andeq	r0, r0, r0

00030e08 <uxTopReadyPriority>:
   30e08:	00000000 	andeq	r0, r0, r0

00030e0c <xSchedulerRunning>:
   30e0c:	00000000 	andeq	r0, r0, r0

00030e10 <uxSchedulerSuspended>:
   30e10:	00000000 	andeq	r0, r0, r0

00030e14 <uxMissedTicks>:
   30e14:	00000000 	andeq	r0, r0, r0

00030e18 <xMissedYield>:
   30e18:	00000000 	andeq	r0, r0, r0

00030e1c <xNumOfOverflows>:
   30e1c:	00000000 	andeq	r0, r0, r0

00030e20 <uxTaskNumber>:
   30e20:	00000000 	andeq	r0, r0, r0

00030e24 <g_VectorTable>:
	...

00031068 <xHeap>:
	...

0003b068 <xStart>:
	...

0003b070 <pxEnd>:
   3b070:	00000000 	andeq	r0, r0, r0

0003b074 <allocated>:
   3b074:	00000000 	andeq	r0, r0, r0

0003b078 <depth>:
   3b078:	00000000 	andeq	r0, r0, r0

0003b07c <loaded>:
   3b07c:	00000000 	andeq	r0, r0, r0

0003b080 <position_x>:
   3b080:	00000000 	andeq	r0, r0, r0

0003b084 <position_y>:
   3b084:	00000000 	andeq	r0, r0, r0

0003b088 <regs>:
	...

0003b0c8 <s_pLibrary>:
   3b0c8:	00000000 	andeq	r0, r0, r0

0003b0cc <s_pThis>:
   3b0cc:	00000000 	andeq	r0, r0, r0

0003b0d0 <s_nDeviceNumber>:
   3b0d0:	00000000 	andeq	r0, r0, r0

0003b0d4 <s_nCriticalLevel>:
   3b0d4:	00000000 	andeq	r0, r0, r0

0003b0d8 <s_bWereEnabled>:
   3b0d8:	00000000 	andeq	r0, r0, r0

0003b0dc <__bss_end>:
   3b0dc:	00000000 	andeq	r0, r0, r0

0003b0e0 <SCREEN_WIDTH>:
   3b0e0:	00000000 	andeq	r0, r0, r0

0003b0e4 <i>:
   3b0e4:	00000000 	andeq	r0, r0, r0

0003b0e8 <SCREEN_HEIGHT>:
   3b0e8:	00000000 	andeq	r0, r0, r0

0003b0ec <framebuffer>:
   3b0ec:	00000000 	andeq	r0, r0, r0

0003b0f0 <mailbuffer>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000001f1 	strdeq	r0, [r0], -r1
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000019 	andeq	r0, r0, r9, lsl r0
      10:	00016301 	andeq	r6, r1, r1, lsl #6
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	00042000 	andeq	r2, r4, r0
      1c:	00000000 	andeq	r0, r0, r0
      20:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      24:	00746e69 	rsbseq	r6, r4, r9, ror #28
      28:	1d070403 	cfstrsne	mvf0, [r7, #-12]
      2c:	04000007 	streq	r0, [r0], #-7
      30:	00000145 	andeq	r0, r0, r5, asr #2
      34:	003a4702 	eorseq	r4, sl, r2, lsl #14
      38:	04050000 	streq	r0, [r5], #-0
      3c:	00000040 	andeq	r0, r0, r0, asr #32
      40:	00004b06 	andeq	r4, r0, r6, lsl #22
      44:	004b0700 	subeq	r0, fp, r0, lsl #14
      48:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      4c:	000c0404 	andeq	r0, ip, r4, lsl #8
      50:	1f030000 	svcne	0x00030000
      54:	00000058 	andeq	r0, r0, r8, asr r0
      58:	18070403 	stmdane	r7, {r0, r1, sl}
      5c:	03000007 	movweq	r0, #7
      60:	07980504 	ldreq	r0, [r8, r4, lsl #10]
      64:	01030000 	mrseq	r0, (UNDEF: 3)
      68:	00072c06 	andeq	r2, r7, r6, lsl #24
      6c:	07020300 	streq	r0, [r2, -r0, lsl #6]
      70:	00000132 	andeq	r0, r0, r2, lsr r1
      74:	00580405 	subseq	r0, r8, r5, lsl #8
      78:	04030000 	streq	r0, [r3], #-0
      7c:	0001d407 	andeq	sp, r1, r7, lsl #8
      80:	020e0900 	andeq	r0, lr, #0, 18
      84:	01240000 	teqeq	r4, r0
      88:	0000fa15 	andeq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
      8c:	4f4c0a00 	svcmi	0x004c0a00
      90:	16010044 	strne	r0, [r1], -r4, asr #32
      94:	00000058 	andeq	r0, r0, r8, asr r0
      98:	41560a00 	cmpmi	r6, r0, lsl #20
      9c:	1701004c 	strne	r0, [r1, -ip, asr #32]
      a0:	00000058 	andeq	r0, r0, r8, asr r0
      a4:	54430a04 	strbpl	r0, [r3], #-2564	; 0xfffff5fc
      a8:	1801004c 	stmdane	r1, {r2, r3, r6}
      ac:	00000058 	andeq	r0, r0, r8, asr r0
      b0:	4c430a08 	mcrrmi	10, 0, r0, r3, cr8
      b4:	19010049 	stmdbne	r1, {r0, r3, r6}
      b8:	00000058 	andeq	r0, r0, r8, asr r0
      bc:	49520a0c 	ldmdbmi	r2, {r2, r3, r9, fp}^
      c0:	1a010053 	bne	40214 <mailbuffer+0x5124>
      c4:	00000058 	andeq	r0, r0, r8, asr r0
      c8:	494d0a10 	stmdbmi	sp, {r4, r9, fp}^
      cc:	1b010053 	blne	40220 <mailbuffer+0x5130>
      d0:	00000058 	andeq	r0, r0, r8, asr r0
      d4:	4c520a14 	vmovmi	r0, r2, s8, s9
      d8:	1c010044 	stcne	0, cr0, [r1], {68}	; 0x44
      dc:	00000058 	andeq	r0, r0, r8, asr r0
      e0:	49440a18 	stmdbmi	r4, {r3, r4, r9, fp}^
      e4:	1d010056 	stcne	0, cr0, [r1, #-344]	; 0xfffffea8
      e8:	00000058 	andeq	r0, r0, r8, asr r0
      ec:	4e430a1c 	mcrmi	10, 2, r0, cr3, cr12, {0}
      f0:	1e010054 	mcrne	0, 0, r0, cr1, cr4, {2}
      f4:	00000058 	andeq	r0, r0, r8, asr r0
      f8:	0f040020 	svceq	0x00040020
      fc:	01000002 	tsteq	r0, r2
     100:	0000811f 	andeq	r8, r0, pc, lsl r1
     104:	02360b00 	eorseq	r0, r6, #0, 22
     108:	36010000 	strcc	r0, [r1], -r0
     10c:	00000074 	andeq	r0, r0, r4, ror r0
     110:	00010000 	andeq	r0, r1, r0
     114:	0000026c 	andeq	r0, r0, ip, ror #4
     118:	01579c01 	cmpeq	r7, r1, lsl #24
     11c:	010c0000 	mrseq	r0, (UNDEF: 12)
     120:	01000002 	tsteq	r0, r2
     124:	00007436 	andeq	r7, r0, r6, lsr r4
     128:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     12c:	0000050c 	andeq	r0, r0, ip, lsl #10
     130:	2f360100 	svccs	0x00360100
     134:	02000000 	andeq	r0, r0, #0
     138:	dd0c6091 	stcle	0, cr6, [ip, #-580]	; 0xfffffdbc
     13c:	01000001 	tsteq	r0, r1
     140:	00004b36 	andeq	r4, r0, r6, lsr fp
     144:	5c910200 	lfmpl	f0, 4, [r1], {0}
     148:	0001240d 	andeq	r2, r1, sp, lsl #8
     14c:	74380100 	ldrtvc	r0, [r8], #-256	; 0xffffff00
     150:	02000000 	andeq	r0, r0, #0
     154:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
     158:	00000222 	andeq	r0, r0, r2, lsr #4
     15c:	005f8101 	subseq	r8, pc, r1, lsl #2
     160:	026c0000 	rsbeq	r0, ip, #0
     164:	004c0001 	subeq	r0, ip, r1
     168:	9c010000 	stcls	0, cr0, [r1], {-0}
     16c:	0001510f 	andeq	r5, r1, pc, lsl #2
     170:	b88f0100 	stmlt	pc, {r8}	; <UNPREDICTABLE>
     174:	38000102 	stmdacc	r0, {r1, r8}
     178:	01000000 	mrseq	r0, (UNDEF: 0)
     17c:	01cb109c 			; <UNDEFINED> instruction: 0x01cb109c
     180:	9c010000 	stcls	0, cr0, [r1], {-0}
     184:	000102f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
     188:	00000060 	andeq	r0, r0, r0, rrx
     18c:	01af9c01 			; <UNDEFINED> instruction: 0x01af9c01
     190:	000c0000 	andeq	r0, ip, r0
     194:	01000000 	mrseq	r0, (UNDEF: 0)
     198:	0000219c 	muleq	r0, ip, r1
     19c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     1a0:	00011d0c 	andeq	r1, r1, ip, lsl #26
     1a4:	4b9c0100 	blmi	fe7005ac <_estack+0xf66f05ac>
     1a8:	02000000 	andeq	r0, r0, #0
     1ac:	11006891 			; <UNDEFINED> instruction: 0x11006891
     1b0:	000001ea 	andeq	r0, r0, sl, ror #3
     1b4:	0350aa01 	cmpeq	r0, #4096	; 0x1000
     1b8:	00d00001 	sbcseq	r0, r0, r1
     1bc:	9c010000 	stcls	0, cr0, [r1], {-0}
     1c0:	000001d3 	ldrdeq	r0, [r0], -r3
     1c4:	00024c0d 	andeq	r4, r2, sp, lsl #24
     1c8:	58ac0100 	stmiapl	ip!, {r8}
     1cc:	02000000 	andeq	r0, r0, #0
     1d0:	0d006c91 	stceq	12, cr6, [r0, #-580]	; 0xfffffdbc
     1d4:	000045f0 	strdeq	r4, [r0], -r0
     1d8:	01e42101 	mvneq	r2, r1, lsl #2
     1dc:	03050000 	movweq	r0, #20480	; 0x5000
     1e0:	0002dbb0 			; <UNDEFINED> instruction: 0x0002dbb0
     1e4:	0001e912 	andeq	lr, r1, r2, lsl r9
     1e8:	ef040500 	svc	0x00040500
     1ec:	13000001 	movwne	r0, #1
     1f0:	000000fa 	strdeq	r0, [r0], -sl
     1f4:	00018400 	andeq	r8, r1, r0, lsl #8
     1f8:	1f000400 	svcne	0x00000400
     1fc:	04000001 	streq	r0, [r0], #-1
     200:	00001901 	andeq	r1, r0, r1, lsl #18
     204:	025b0100 	subseq	r0, fp, #0, 2
     208:	04200000 	strteq	r0, [r0], #-0
     20c:	03200001 	teqeq	r0, #1
     210:	014f0000 	mrseq	r0, SPSR
     214:	04020000 	streq	r0, [r2], #-0
     218:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     21c:	07040300 	streq	r0, [r4, -r0, lsl #6]
     220:	0000071d 	andeq	r0, r0, sp, lsl r7
     224:	18070403 	stmdane	r7, {r0, r1, sl}
     228:	03000007 	movweq	r0, #7
     22c:	07980504 	ldreq	r0, [r8, r4, lsl #10]
     230:	17040000 	strne	r0, [r4, -r0]
     234:	01000003 	tsteq	r0, r3
     238:	01042033 	tsteq	r4, r3, lsr r0
     23c:	0000bc00 	andeq	fp, r0, r0, lsl #24
     240:	739c0100 	orrsvc	r0, ip, #0, 2
     244:	05000000 	streq	r0, [r0, #-0]
     248:	00010468 	andeq	r0, r1, r8, ror #8
     24c:	00000050 	andeq	r0, r0, r0, asr r0
     250:	00030a06 	andeq	r0, r3, r6, lsl #20
     254:	73460100 	movtvc	r0, #24832	; 0x6100
     258:	06000000 	streq	r0, [r0], -r0
     25c:	000002c6 	andeq	r0, r0, r6, asr #5
     260:	007f4601 	rsbseq	r4, pc, r1, lsl #12
     264:	00000000 	andeq	r0, r0, r0
     268:	00007807 	andeq	r7, r0, r7, lsl #16
     26c:	7e040800 	cdpvc	8, 0, cr0, cr4, cr0, {0}
     270:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     274:	00002f07 	andeq	r2, r0, r7, lsl #30
     278:	02e30a00 	rsceq	r0, r3, #0, 20
     27c:	5a010000 	bpl	40284 <mailbuffer+0x5194>
     280:	000104dc 	ldrdeq	r0, [r1], -ip
     284:	000000b8 	strheq	r0, [r0], -r8
     288:	00de9c01 	sbcseq	r9, lr, r1, lsl #24
     28c:	e00b0000 	and	r0, fp, r0
     290:	60000104 	andvs	r0, r0, r4, lsl #2
     294:	bd000000 	stclt	0, cr0, [r0, #-0]
     298:	06000000 	streq	r0, [r0], -r0
     29c:	0000030a 	andeq	r0, r0, sl, lsl #6
     2a0:	00736201 	rsbseq	r6, r3, r1, lsl #4
     2a4:	c6060000 	strgt	r0, [r6], -r0
     2a8:	01000002 	tsteq	r0, r2
     2ac:	00007f62 	andeq	r7, r0, r2, ror #30
     2b0:	44050000 	strmi	r0, [r5], #-0
     2b4:	50000105 	andpl	r0, r0, r5, lsl #2
     2b8:	06000000 	streq	r0, [r0], -r0
     2bc:	0000030a 	andeq	r0, r0, sl, lsl #6
     2c0:	00736801 	rsbseq	r6, r3, r1, lsl #16
     2c4:	c6060000 	strgt	r0, [r6], -r0
     2c8:	01000002 	tsteq	r0, r2
     2cc:	00007f68 	andeq	r7, r0, r8, ror #30
     2d0:	04000000 	streq	r0, [r0], #-0
     2d4:	00000340 	andeq	r0, r0, r0, asr #6
     2d8:	05947f01 	ldreq	r7, [r4, #3841]	; 0xf01
     2dc:	00b40001 	adcseq	r0, r4, r1
     2e0:	9c010000 	stcls	0, cr0, [r1], {-0}
     2e4:	00000138 	andeq	r0, r0, r8, lsr r1
     2e8:	0105940b 	tsteq	r5, fp, lsl #8
     2ec:	00006000 	andeq	r6, r0, r0
     2f0:	00011700 	andeq	r1, r1, r0, lsl #14
     2f4:	030a0600 	movweq	r0, #42496	; 0xa600
     2f8:	80010000 	andhi	r0, r1, r0
     2fc:	00000073 	andeq	r0, r0, r3, ror r0
     300:	0002c606 	andeq	ip, r2, r6, lsl #12
     304:	7f800100 	svcvc	0x00800100
     308:	00000000 	andeq	r0, r0, r0
     30c:	0105f805 	tsteq	r5, r5, lsl #16
     310:	00005000 	andeq	r5, r0, r0
     314:	030a0600 	movweq	r0, #42496	; 0xa600
     318:	82010000 	andhi	r0, r1, #0
     31c:	00000073 	andeq	r0, r0, r3, ror r0
     320:	0002c606 	andeq	ip, r2, r6, lsl #12
     324:	7f820100 	svcvc	0x00820100
     328:	00000000 	andeq	r0, r0, r0
     32c:	02f70c00 	rscseq	r0, r7, #0, 24
     330:	ac010000 	stcge	0, cr0, [r1], {-0}
     334:	00010648 	andeq	r0, r1, r8, asr #12
     338:	00000068 	andeq	r0, r0, r8, rrx
     33c:	2e0c9c01 	cdpcs	12, 0, cr9, cr12, cr1, {0}
     340:	01000003 	tsteq	r0, r3
     344:	0106b0bc 	strheq	fp, [r6, -ip]
     348:	00009000 	andeq	r9, r0, r0
     34c:	0d9c0100 	ldfeqs	f0, [ip]
     350:	000002c6 	andeq	r0, r0, r6, asr #5
     354:	007f2301 	rsbseq	r2, pc, r1, lsl #6
     358:	03050000 	movweq	r0, #20480	; 0x5000
     35c:	00030b50 	andeq	r0, r3, r0, asr fp
     360:	0002d80d 	andeq	sp, r2, sp, lsl #16
     364:	21310100 	teqcs	r1, r0, lsl #2
     368:	05000000 	streq	r0, [r0, #-0]
     36c:	030ca003 	movweq	sl, #49155	; 0xc003
     370:	030a0600 	movweq	r0, #42496	; 0xa600
     374:	82010000 	andhi	r0, r1, #0
     378:	00000073 	andeq	r0, r0, r3, ror r0
     37c:	00046600 	andeq	r6, r4, r0, lsl #12
     380:	de000400 	cfcpysle	mvf0, mvf0
     384:	04000001 	streq	r0, [r0], #-1
     388:	00001901 	andeq	r1, r0, r1, lsl #18
     38c:	03d10100 	bicseq	r0, r1, #0, 2
     390:	07480000 	strbeq	r0, [r8, -r0]
     394:	08e00001 	stmiaeq	r0!, {r0}^
     398:	02190000 	andseq	r0, r9, #0
     39c:	04020000 	streq	r0, [r2], #-0
     3a0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     3a4:	07040300 	streq	r0, [r4, -r0, lsl #6]
     3a8:	0000071d 	andeq	r0, r0, sp, lsl r7
     3ac:	0c050404 	cfstrseq	mvf0, [r5], {4}
     3b0:	03000000 	movweq	r0, #0
     3b4:	00003c1f 	andeq	r3, r0, pc, lsl ip
     3b8:	07040300 	streq	r0, [r4, -r0, lsl #6]
     3bc:	00000718 	andeq	r0, r0, r8, lsl r7
     3c0:	98050403 	stmdals	r5, {r0, r1, sl}
     3c4:	06000007 	streq	r0, [r0], -r7
     3c8:	00000447 	andeq	r0, r0, r7, asr #8
     3cc:	93690214 	cmnls	r9, #20, 4	; 0x40000001
     3d0:	07000000 	streq	r0, [r0, -r0]
     3d4:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
     3d8:	00316b02 	eorseq	r6, r1, r2, lsl #22
     3dc:	07000000 	streq	r0, [r0, -r0]
     3e0:	000005af 	andeq	r0, r0, pc, lsr #11
     3e4:	00936c02 	addseq	r6, r3, r2, lsl #24
     3e8:	07040000 	streq	r0, [r4, -r0]
     3ec:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     3f0:	00936d02 	addseq	r6, r3, r2, lsl #26
     3f4:	07080000 	streq	r0, [r8, -r0]
     3f8:	0000034e 	andeq	r0, r0, lr, asr #6
     3fc:	002f6e02 	eoreq	r6, pc, r2, lsl #28
     400:	070c0000 	streq	r0, [ip, -r0]
     404:	00000388 	andeq	r0, r0, r8, lsl #7
     408:	002f6f02 	eoreq	r6, pc, r2, lsl #30
     40c:	00100000 	andseq	r0, r0, r0
     410:	00990408 	addseq	r0, r9, r8, lsl #8
     414:	4a090000 	bmi	24041c <mailbuffer+0x20532c>
     418:	05000000 	streq	r0, [r0, #-0]
     41c:	000005e1 	andeq	r0, r0, r1, ror #11
     420:	004a7102 	subeq	r7, sl, r2, lsl #2
     424:	3f060000 	svccc	0x00060000
     428:	0c000006 	stceq	0, cr0, [r0], {6}
     42c:	00da7302 	sbcseq	r7, sl, r2, lsl #6
     430:	bd070000 	stclt	0, cr0, [r7, #-0]
     434:	02000003 	andeq	r0, r0, #3
     438:	00003175 	andeq	r3, r0, r5, ror r1
     43c:	af070000 	svcge	0x00070000
     440:	02000005 	andeq	r0, r0, #5
     444:	00009376 	andeq	r9, r0, r6, ror r3
     448:	b0070400 	andlt	r0, r7, r0, lsl #8
     44c:	02000004 	andeq	r0, r0, #4
     450:	00009377 	andeq	r9, r0, r7, ror r3
     454:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     458:	00000529 	andeq	r0, r0, r9, lsr #10
     45c:	00a97902 	adceq	r7, r9, r2, lsl #18
     460:	4f060000 	svcmi	0x00060000
     464:	14000006 	strne	r0, [r0], #-6
     468:	01167e02 	tsteq	r6, r2, lsl #28
     46c:	4f070000 	svcmi	0x00070000
     470:	02000005 	andeq	r0, r0, #5
     474:	00011680 	andeq	r1, r1, r0, lsl #13
     478:	b5070000 	strlt	r0, [r7, #-0]
     47c:	02000003 	andeq	r0, r0, #3
     480:	00011b81 	andeq	r1, r1, r1, lsl #23
     484:	c8070400 	stmdagt	r7, {sl}
     488:	02000003 	andeq	r0, r0, #3
     48c:	00012682 	andeq	r2, r1, r2, lsl #13
     490:	09000800 	stmdbeq	r0, {fp}
     494:	0000003c 	andeq	r0, r0, ip, lsr r0
     498:	01210408 	teqeq	r1, r8, lsl #8
     49c:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
     4a0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     4a4:	000000da 	ldrdeq	r0, [r0], -sl
     4a8:	0007c305 	andeq	ip, r7, r5, lsl #6
     4ac:	e5830200 	str	r0, [r3, #512]	; 0x200
     4b0:	03000000 	movweq	r0, #0
     4b4:	072c0601 	streq	r0, [ip, -r1, lsl #12]!
     4b8:	02030000 	andeq	r0, r3, #0
     4bc:	00013207 	andeq	r3, r1, r7, lsl #4
     4c0:	07040300 	streq	r0, [r4, -r0, lsl #6]
     4c4:	000001d4 	ldrdeq	r0, [r0], -r4
     4c8:	00058305 	andeq	r8, r5, r5, lsl #6
     4cc:	2f530400 	svccs	0x00530400
     4d0:	05000000 	streq	r0, [r0, #-0]
     4d4:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
     4d8:	01615604 	cmneq	r1, r4, lsl #12
     4dc:	04080000 	streq	r0, [r8], #-0
     4e0:	00000167 	andeq	r0, r0, r7, ror #2
     4e4:	0001770a 	andeq	r7, r1, sl, lsl #14
     4e8:	014b0b00 	cmpeq	fp, r0, lsl #22
     4ec:	3c0b0000 	stccc	0, cr0, [fp], {-0}
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	0004cb06 	andeq	ip, r4, r6, lsl #22
     4f8:	58043800 	stmdapl	r4, {fp, ip, sp}
     4fc:	000001cc 	andeq	r0, r0, ip, asr #3
     500:	00039407 	andeq	r9, r3, r7, lsl #8
     504:	565a0400 	ldrbpl	r0, [sl], -r0, lsl #8
     508:	00000001 	andeq	r0, r0, r1
     50c:	00067f07 	andeq	r7, r6, r7, lsl #30
     510:	9e5b0400 	cdpls	4, 5, cr0, cr11, cr0, {0}
     514:	04000000 	streq	r0, [r0], #-0
     518:	00069007 	andeq	r9, r6, r7
     51c:	9e5c0400 	cdpls	4, 5, cr0, cr12, cr0, {0}
     520:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     524:	00057807 	andeq	r7, r5, r7, lsl #16
     528:	3c5d0400 	cfldrdcc	mvd0, [sp], {-0}
     52c:	2c000000 	stccs	0, cr0, [r0], {-0}
     530:	00052107 	andeq	r2, r5, r7, lsl #2
     534:	3c5e0400 	cfldrdcc	mvd0, [lr], {-0}
     538:	30000000 	andcc	r0, r0, r0
     53c:	00060a07 	andeq	r0, r6, r7, lsl #20
     540:	3d5f0400 	cfldrdcc	mvd0, [pc, #-0]	; 548 <_start-0x7ab8>
     544:	34000001 	strcc	r0, [r0], #-1
     548:	04a80500 	strteq	r0, [r8], #1280	; 0x500
     54c:	60040000 	andvs	r0, r4, r0
     550:	00000177 	andeq	r0, r0, r7, ror r1
     554:	0005370c 	andeq	r3, r5, ip, lsl #14
     558:	438a0100 	orrmi	r0, sl, #0, 2
     55c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     560:	98000107 	stmdals	r0, {r0, r1, r2, r8}
     564:	01000001 	tsteq	r0, r1
     568:	0002379c 	muleq	r2, ip, r7
     56c:	04bb0d00 	ldrteq	r0, [fp], #3328	; 0xd00
     570:	8a010000 	bhi	40578 <mailbuffer+0x5488>
     574:	00000156 	andeq	r0, r0, r6, asr r1
     578:	0d649102 	stfeqp	f1, [r4, #-8]!
     57c:	00000578 	andeq	r0, r0, r8, ror r5
     580:	003c8a01 	eorseq	r8, ip, r1, lsl #20
     584:	91020000 	mrsls	r0, (UNDEF: 2)
     588:	05210d60 	streq	r0, [r1, #-3424]!	; 0xfffff2a0
     58c:	8a010000 	bhi	40594 <mailbuffer+0x54a4>
     590:	0000003c 	andeq	r0, r0, ip, lsr r0
     594:	0e5c9102 	logeqe	f1, f2
     598:	0000094c 	andeq	r0, r0, ip, asr #18
     59c:	00438c01 	subeq	r8, r3, r1, lsl #24
     5a0:	91020000 	mrsls	r0, (UNDEF: 2)
     5a4:	05fe0e6c 	ldrbeq	r0, [lr, #3692]!	; 0xe6c
     5a8:	8d010000 	stchi	0, cr0, [r1, #-0]
     5ac:	00000237 	andeq	r0, r0, r7, lsr r2
     5b0:	00689102 	rsbeq	r9, r8, r2, lsl #2
     5b4:	01cc0408 	biceq	r0, ip, r8, lsl #8
     5b8:	6d0f0000 	stcvs	0, cr0, [pc, #-0]	; 5c0 <_start-0x7a40>
     5bc:	01000003 	tsteq	r0, r3
     5c0:	0108e0c3 	smlabteq	r8, r3, r0, lr
     5c4:	00012000 	andeq	r2, r1, r0
     5c8:	7d9c0100 	ldfvcs	f0, [ip]
     5cc:	0d000002 	stceq	0, cr0, [r0, #-8]
     5d0:	00000671 	andeq	r0, r0, r1, ror r6
     5d4:	0031c301 	eorseq	ip, r1, r1, lsl #6
     5d8:	91020000 	mrsls	r0, (UNDEF: 2)
     5dc:	05b60d64 	ldreq	r0, [r6, #3428]!	; 0xd64
     5e0:	c3010000 	movwgt	r0, #4096	; 0x1000
     5e4:	0000027d 	andeq	r0, r0, sp, ror r2
     5e8:	0e609102 	lgneqs	f1, f2
     5ec:	000005d5 	ldrdeq	r0, [r0], -r5
     5f0:	0031c501 	eorseq	ip, r1, r1, lsl #10
     5f4:	91020000 	mrsls	r0, (UNDEF: 2)
     5f8:	0408006c 	streq	r0, [r8], #-108	; 0xffffff94
     5fc:	0000012b 	andeq	r0, r0, fp, lsr #2
     600:	00055f10 	andeq	r5, r5, r0, lsl pc
     604:	00e90100 	rsceq	r0, r9, r0, lsl #2
     608:	1400010a 	strne	r0, [r0], #-266	; 0xfffffef6
     60c:	01000001 	tsteq	r0, r1
     610:	0002b19c 	muleq	r2, ip, r1
     614:	0a281100 	beq	a04a1c <mailbuffer+0x9c992c>
     618:	00bc0001 	adcseq	r0, ip, r1
     61c:	560e0000 	strpl	r0, [lr], -r0
     620:	01000003 	tsteq	r0, r3
     624:	000237f0 	strdeq	r3, [r2], -r0
     628:	6c910200 	lfmvs	f0, 4, [r1], {0}
     62c:	9f120000 	svcls	0x00120000
     630:	01000006 	tsteq	r0, r6
     634:	0b140100 	bleq	500a3c <mailbuffer+0x4c594c>
     638:	02240001 	eoreq	r0, r4, #1
     63c:	9c010000 	stcls	0, cr0, [r1], {-0}
     640:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     644:	00054813 	andeq	r4, r5, r3, lsl r8
     648:	01020100 	mrseq	r0, (UNDEF: 18)
     64c:	00000237 	andeq	r0, r0, r7, lsr r2
     650:	11689102 	cmnne	r8, r2, lsl #2
     654:	00010bac 	andeq	r0, r1, ip, lsr #23
     658:	00000038 	andeq	r0, r0, r8, lsr r0
     65c:	00036613 	andeq	r6, r3, r3, lsl r6
     660:	010d0100 	mrseq	r0, (UNDEF: 29)
     664:	0000027d 	andeq	r0, r0, sp, ror r2
     668:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     66c:	05eb1400 	strbeq	r1, [fp, #1024]!	; 0x400
     670:	3a010000 	bcc	40678 <mailbuffer+0x5588>
     674:	010d3801 	tsteq	sp, r1, lsl #16
     678:	00016400 	andeq	r6, r1, r0, lsl #8
     67c:	209c0100 	addscs	r0, ip, r0, lsl #2
     680:	11000003 	tstne	r0, r3
     684:	00010dc8 	andeq	r0, r1, r8, asr #27
     688:	0000007c 	andeq	r0, r0, ip, ror r0
     68c:	00045213 	andeq	r5, r4, r3, lsl r2
     690:	014f0100 	mrseq	r0, (UNDEF: 95)
     694:	00000320 	andeq	r0, r0, r0, lsr #6
     698:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     69c:	027d1500 	rsbseq	r1, sp, #0, 10
     6a0:	55120000 	ldrpl	r0, [r2, #-0]
     6a4:	01000006 	tsteq	r0, r6
     6a8:	0e9c0158 	mrceq	1, 4, r0, cr12, cr8, {2}
     6ac:	00d00001 	sbcseq	r0, r0, r1
     6b0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6b4:	0000034b 	andeq	r0, r0, fp, asr #6
     6b8:	00057813 	andeq	r7, r5, r3, lsl r8
     6bc:	015a0100 	cmpeq	sl, r0, lsl #2
     6c0:	0000003c 	andeq	r0, r0, ip, lsr r0
     6c4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     6c8:	0004e416 	andeq	lr, r4, r6, lsl r4
     6cc:	016c0100 	cmneq	ip, r0, lsl #2
     6d0:	00000043 	andeq	r0, r0, r3, asr #32
     6d4:	00010f6c 	andeq	r0, r1, ip, ror #30
     6d8:	000000bc 	strheq	r0, [r0], -ip
     6dc:	03939c01 	orrseq	r9, r3, #256	; 0x100
     6e0:	b6170000 	ldrlt	r0, [r7], -r0
     6e4:	01000005 	tsteq	r0, r5
     6e8:	0393016c 	orrseq	r0, r3, #108, 2
     6ec:	91020000 	mrsls	r0, (UNDEF: 2)
     6f0:	03561364 	cmpeq	r6, #100, 6	; 0x90000001
     6f4:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     6f8:	00023701 	andeq	r3, r2, r1, lsl #14
     6fc:	68910200 	ldmvs	r1, {r9}
     700:	00094c13 	andeq	r4, r9, r3, lsl ip
     704:	016f0100 	cmneq	pc, r0, lsl #2
     708:	00000043 	andeq	r0, r0, r3, asr #32
     70c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     710:	03990408 	orrseq	r0, r9, #8, 8	; 0x8000000
     714:	2b150000 	blcs	54071c <mailbuffer+0x50562c>
     718:	18000001 	stmdane	r0, {r0}
     71c:	0000012b 	andeq	r0, r0, fp, lsr #2
     720:	000003ae 	andeq	r0, r0, lr, lsr #7
     724:	00014419 	andeq	r4, r1, r9, lsl r4
     728:	0e000100 	adfeqs	f0, f0, f0
     72c:	00000629 	andeq	r0, r0, r9, lsr #12
     730:	039e5101 	orrseq	r5, lr, #1073741824	; 0x40000000
     734:	03050000 	movweq	r0, #20480	; 0x5000
     738:	00030ca4 	andeq	r0, r3, r4, lsr #25
     73c:	00047a0e 	andeq	r7, r4, lr, lsl #20
     740:	2b520100 	blcs	1480b48 <mailbuffer+0x1445a58>
     744:	05000001 	streq	r0, [r0, #-1]
     748:	030ccc03 	movweq	ip, #52227	; 0xcc03
     74c:	04910e00 	ldreq	r0, [r1], #3584	; 0xe00
     750:	53010000 	movwpl	r0, #4096	; 0x1000
     754:	0000012b 	andeq	r0, r0, fp, lsr #2
     758:	0ce00305 	stcleq	3, cr0, [r0], #20
     75c:	120e0003 	andne	r0, lr, #3
     760:	01000006 	tsteq	r0, r6
     764:	00027d54 	andeq	r7, r2, r4, asr sp
     768:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
     76c:	0e00030c 	cdpeq	3, 0, cr0, cr0, cr12, {0}
     770:	00000502 	andeq	r0, r0, r2, lsl #10
     774:	027d5501 	rsbseq	r5, sp, #4194304	; 0x400000
     778:	03050000 	movweq	r0, #20480	; 0x5000
     77c:	00030cf8 	strdeq	r0, [r3], -r8
     780:	0005940e 	andeq	r9, r5, lr, lsl #8
     784:	2b560100 	blcs	1580b8c <mailbuffer+0x1545a9c>
     788:	05000001 	streq	r0, [r0, #-1]
     78c:	030cfc03 	movweq	pc, #52227	; 0xcc03	; <UNPREDICTABLE>
     790:	045e0e00 	ldrbeq	r0, [lr], #-3584	; 0xfffff200
     794:	5a010000 	bpl	4079c <mailbuffer+0x56ac>
     798:	0000003c 	andeq	r0, r0, ip, lsr r0
     79c:	0d140305 	ldceq	3, cr0, [r4, #-20]	; 0xffffffec
     7a0:	330e0003 	movwcc	r0, #57347	; 0xe003
     7a4:	01000004 	tsteq	r0, r4
     7a8:	0000315b 	andeq	r3, r0, fp, asr r1
     7ac:	18030500 	stmdane	r3, {r8, sl}
     7b0:	0e00030d 	cdpeq	3, 0, cr0, cr0, cr13, {0}
     7b4:	00000424 	andeq	r0, r0, r4, lsr #8
     7b8:	00315b01 	eorseq	r5, r1, r1, lsl #22
     7bc:	03050000 	movweq	r0, #20480	; 0x5000
     7c0:	00030d1c 	andeq	r0, r3, ip, lsl sp
     7c4:	0003a80e 	andeq	sl, r3, lr, lsl #16
     7c8:	315b0100 	cmpcc	fp, r0, lsl #2
     7cc:	05000000 	streq	r0, [r0, #-0]
     7d0:	030d2003 	movweq	r2, #53251	; 0xd003
     7d4:	05c21a00 	strbeq	r1, [r2, #2560]	; 0xa00
     7d8:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     7dc:	00000237 	andeq	r0, r0, r7, lsr r2
     7e0:	0d100305 	ldceq	3, cr0, [r0, #-20]	; 0xffffffec
     7e4:	7b000003 	blvc	7f8 <_start-0x7808>
     7e8:	04000002 	streq	r0, [r0], #-2
     7ec:	00036300 	andeq	r6, r3, r0, lsl #6
     7f0:	19010400 	stmdbne	r1, {sl}
     7f4:	01000000 	mrseq	r0, (UNDEF: 0)
     7f8:	000006c4 	andeq	r0, r0, r4, asr #13
     7fc:	00011028 	andeq	r1, r1, r8, lsr #32
     800:	00000350 	andeq	r0, r0, r0, asr r3
     804:	00000445 	andeq	r0, r0, r5, asr #8
     808:	1d070402 	cfstrsne	mvf0, [r7, #-8]
     80c:	03000007 	movweq	r0, #7
     810:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     814:	01020074 	tsteq	r2, r4, ror r0
     818:	00072c06 	andeq	r2, r7, r6, lsl #24
     81c:	08010200 	stmdaeq	r1, {r9}
     820:	0000072a 	andeq	r0, r0, sl, lsr #14
     824:	b8050202 	stmdalt	r5, {r1, r9}
     828:	02000007 	andeq	r0, r0, #7
     82c:	01320702 	teqeq	r2, r2, lsl #14
     830:	04020000 	streq	r0, [r2], #-0
     834:	00079805 	andeq	r9, r7, r5, lsl #16
     838:	07040200 	streq	r0, [r4, -r0, lsl #4]
     83c:	00000718 	andeq	r0, r0, r8, lsl r7
     840:	93050802 	movwls	r0, #22530	; 0x5802
     844:	02000007 	andeq	r0, r0, #7
     848:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
     84c:	04020000 	streq	r0, [r2], #-0
     850:	0001d407 	andeq	sp, r1, r7, lsl #8
     854:	02040400 	andeq	r0, r4, #0, 8
     858:	07330601 	ldreq	r0, [r3, -r1, lsl #12]!
     85c:	0c050000 	stceq	0, cr0, [r5], {-0}
     860:	03000000 	movweq	r0, #0
     864:	0000521f 	andeq	r5, r0, pc, lsl r2
     868:	04470600 	strbeq	r0, [r7], #-1536	; 0xfffffa00
     86c:	02140000 	andseq	r0, r4, #0
     870:	0000cb69 	andeq	ip, r0, r9, ror #22
     874:	03bd0700 			; <UNDEFINED> instruction: 0x03bd0700
     878:	6b020000 	blvs	80880 <mailbuffer+0x45790>
     87c:	00000077 	andeq	r0, r0, r7, ror r0
     880:	05af0700 	streq	r0, [pc, #1792]!	; f88 <_start-0x7078>
     884:	6c020000 	stcvs	0, cr0, [r2], {-0}
     888:	000000cb 	andeq	r0, r0, fp, asr #1
     88c:	04b00704 	ldrteq	r0, [r0], #1796	; 0x704
     890:	6d020000 	stcvs	0, cr0, [r2, #-0]
     894:	000000cb 	andeq	r0, r0, fp, asr #1
     898:	034e0708 	movteq	r0, #59144	; 0xe708
     89c:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
     8a0:	0000006e 	andeq	r0, r0, lr, rrx
     8a4:	0388070c 	orreq	r0, r8, #12, 14	; 0x300000
     8a8:	6f020000 	svcvs	0x00020000
     8ac:	0000006e 	andeq	r0, r0, lr, rrx
     8b0:	04080010 	streq	r0, [r8], #-16
     8b4:	000000d1 	ldrdeq	r0, [r0], -r1
     8b8:	00008209 	andeq	r8, r0, r9, lsl #4
     8bc:	05e10500 	strbeq	r0, [r1, #1280]!	; 0x500
     8c0:	71020000 	mrsvc	r0, (UNDEF: 2)
     8c4:	00000082 	andeq	r0, r0, r2, lsl #1
     8c8:	00063f06 	andeq	r3, r6, r6, lsl #30
     8cc:	73020c00 	movwvc	r0, #11264	; 0x2c00
     8d0:	00000112 	andeq	r0, r0, r2, lsl r1
     8d4:	0003bd07 	andeq	fp, r3, r7, lsl #26
     8d8:	77750200 	ldrbvc	r0, [r5, -r0, lsl #4]!
     8dc:	00000000 	andeq	r0, r0, r0
     8e0:	0005af07 	andeq	sl, r5, r7, lsl #30
     8e4:	cb760200 	blgt	1d810ec <mailbuffer+0x1d45ffc>
     8e8:	04000000 	streq	r0, [r0], #-0
     8ec:	0004b007 	andeq	fp, r4, r7
     8f0:	cb770200 	blgt	1dc10f8 <mailbuffer+0x1d86008>
     8f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8f8:	05290500 	streq	r0, [r9, #-1280]!	; 0xfffffb00
     8fc:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
     900:	000000e1 	andeq	r0, r0, r1, ror #1
     904:	00064f06 	andeq	r4, r6, r6, lsl #30
     908:	7e021400 	cfcpysvc	mvf1, mvf2
     90c:	0000014e 	andeq	r0, r0, lr, asr #2
     910:	00054f07 	andeq	r4, r5, r7, lsl #30
     914:	4e800200 	cdpmi	2, 8, cr0, cr0, cr0, {0}
     918:	00000001 	andeq	r0, r0, r1
     91c:	0003b507 	andeq	fp, r3, r7, lsl #10
     920:	53810200 	orrpl	r0, r1, #0, 4
     924:	04000001 	streq	r0, [r0], #-1
     928:	0003c807 	andeq	ip, r3, r7, lsl #16
     92c:	5e820200 	cdppl	2, 8, cr0, cr2, cr0, {0}
     930:	08000001 	stmdaeq	r0, {r0}
     934:	00520900 	subseq	r0, r2, r0, lsl #18
     938:	04080000 	streq	r0, [r8], #-0
     93c:	00000159 	andeq	r0, r0, r9, asr r1
     940:	0000d609 	andeq	sp, r0, r9, lsl #12
     944:	01120900 	tsteq	r2, r0, lsl #18
     948:	c3050000 	movwgt	r0, #20480	; 0x5000
     94c:	02000007 	andeq	r0, r0, #7
     950:	00011d83 	andeq	r1, r1, r3, lsl #27
     954:	076a0a00 	strbeq	r0, [sl, -r0, lsl #20]!
     958:	4c010000 	stcmi	0, cr0, [r1], {-0}
     95c:	00011028 	andeq	r1, r1, r8, lsr #32
     960:	0000008c 	andeq	r0, r0, ip, lsl #1
     964:	01929c01 	orrseq	r9, r2, r1, lsl #24
     968:	c20b0000 	andgt	r0, fp, #0
     96c:	01000007 	tsteq	r0, r7
     970:	0001924c 	andeq	r9, r1, ip, asr #4
     974:	6c910200 	lfmvs	f0, 4, [r1], {0}
     978:	63040800 	movwvs	r0, #18432	; 0x4800
     97c:	0a000001 	beq	988 <_start-0x7678>
     980:	00000747 	andeq	r0, r0, r7, asr #14
     984:	10b46001 	adcsne	r6, r4, r1
     988:	00500001 	subseq	r0, r0, r1
     98c:	9c010000 	stcls	0, cr0, [r1], {-0}
     990:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     994:	00078c0b 	andeq	r8, r7, fp, lsl #24
     998:	bc600100 	stflte	f0, [r0], #-0
     99c:	02000001 	andeq	r0, r0, #1
     9a0:	08006c91 	stmdaeq	r0, {r0, r4, r7, sl, fp, sp, lr}
     9a4:	0000d604 	andeq	sp, r0, r4, lsl #12
     9a8:	075b0a00 	ldrbeq	r0, [fp, -r0, lsl #20]
     9ac:	67010000 	strvs	r0, [r1, -r0]
     9b0:	00011104 	andeq	r1, r1, r4, lsl #2
     9b4:	000000bc 	strheq	r0, [r0], -ip
     9b8:	02029c01 	andeq	r9, r2, #256	; 0x100
     9bc:	c20b0000 	andgt	r0, fp, #0
     9c0:	01000007 	tsteq	r0, r7
     9c4:	00019267 	andeq	r9, r1, r7, ror #4
     9c8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     9cc:	0007c90b 	andeq	ip, r7, fp, lsl #18
     9d0:	bc670100 	stflte	f0, [r7], #-0
     9d4:	02000001 	andeq	r0, r0, #1
     9d8:	b50c6091 	strlt	r6, [ip, #-145]	; 0xffffff6f
     9dc:	01000003 	tsteq	r0, r3
     9e0:	00015369 	andeq	r5, r1, r9, ror #6
     9e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     9e8:	07d70a00 	ldrbeq	r0, [r7, r0, lsl #20]
     9ec:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
     9f0:	000111c0 	andeq	r1, r1, r0, asr #3
     9f4:	000000fc 	strdeq	r0, [r0], -ip
     9f8:	02509c01 	subseq	r9, r0, #256	; 0x100
     9fc:	c20b0000 	andgt	r0, fp, #0
     a00:	01000007 	tsteq	r0, r7
     a04:	0001927e 	andeq	r9, r1, lr, ror r2
     a08:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     a0c:	0007c90b 	andeq	ip, r7, fp, lsl #18
     a10:	bc7e0100 	ldflte	f0, [lr], #-0
     a14:	02000001 	andeq	r0, r0, #1
     a18:	ad0c6091 	stcge	0, cr6, [ip, #-580]	; 0xfffffdbc
     a1c:	01000007 	tsteq	r0, r7
     a20:	00015380 	andeq	r5, r1, r0, lsl #7
     a24:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a28:	00077a0c 	andeq	r7, r7, ip, lsl #20
     a2c:	77810100 	strvc	r0, [r1, r0, lsl #2]
     a30:	02000000 	andeq	r0, r0, #0
     a34:	0d006891 	stceq	8, cr6, [r0, #-580]	; 0xfffffdbc
     a38:	000007a1 	andeq	r0, r0, r1, lsr #15
     a3c:	12bcb701 	adcsne	fp, ip, #262144	; 0x40000
     a40:	00bc0001 	adcseq	r0, ip, r1
     a44:	9c010000 	stcls	0, cr0, [r1], {-0}
     a48:	0007380b 	andeq	r3, r7, fp, lsl #16
     a4c:	bcb70100 	ldflts	f0, [r7]
     a50:	02000001 	andeq	r0, r0, #1
     a54:	c20c6491 	andgt	r6, ip, #-1862270976	; 0x91000000
     a58:	01000007 	tsteq	r0, r7
     a5c:	000192b9 			; <UNDEFINED> instruction: 0x000192b9
     a60:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a64:	07180000 	ldreq	r0, [r8, -r0]
     a68:	00040000 	andeq	r0, r4, r0
     a6c:	0000041d 	andeq	r0, r0, sp, lsl r4
     a70:	00190104 	andseq	r0, r9, r4, lsl #2
     a74:	e5010000 	str	r0, [r1, #-0]
     a78:	78000009 	stmdavc	r0, {r0, r3}
     a7c:	a0000113 	andge	r0, r0, r3, lsl r1
     a80:	ce00000e 	cdpgt	0, 0, cr0, cr0, cr14, {0}
     a84:	02000005 	andeq	r0, r0, #5
     a88:	0000081f 	andeq	r0, r0, pc, lsl r8
     a8c:	002cd402 	eoreq	sp, ip, r2, lsl #8
     a90:	04030000 	streq	r0, [r3], #-0
     a94:	00071d07 	andeq	r1, r7, r7, lsl #26
     a98:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     a9c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     aa0:	2c060103 	stfcss	f0, [r6], {3}
     aa4:	03000007 	movweq	r0, #7
     aa8:	072a0801 	streq	r0, [sl, -r1, lsl #16]!
     aac:	02030000 	andeq	r0, r3, #0
     ab0:	0007b805 	andeq	fp, r7, r5, lsl #16
     ab4:	07020300 	streq	r0, [r2, -r0, lsl #6]
     ab8:	00000132 	andeq	r0, r0, r2, lsr r1
     abc:	98050403 	stmdals	r5, {r0, r1, sl}
     ac0:	03000007 	movweq	r0, #7
     ac4:	07180704 	ldreq	r0, [r8, -r4, lsl #14]
     ac8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     acc:	00079305 	andeq	r9, r7, r5, lsl #6
     ad0:	07080300 	streq	r0, [r8, -r0, lsl #6]
     ad4:	00000713 	andeq	r0, r0, r3, lsl r7
     ad8:	d4070403 	strle	r0, [r7], #-1027	; 0xfffffbfd
     adc:	05000001 	streq	r0, [r0, #-1]
     ae0:	06010304 	streq	r0, [r1], -r4, lsl #6
     ae4:	00000733 	andeq	r0, r0, r3, lsr r7
     ae8:	00880406 	addeq	r0, r8, r6, lsl #8
     aec:	02070000 	andeq	r0, r7, #0
     af0:	0000000c 	andeq	r0, r0, ip
     af4:	005d1f03 	subseq	r1, sp, r3, lsl #30
     af8:	47080000 	strmi	r0, [r8, -r0]
     afc:	14000004 	strne	r0, [r0], #-4
     b00:	00dd6904 	sbcseq	r6, sp, r4, lsl #18
     b04:	bd090000 	stclt	0, cr0, [r9, #-0]
     b08:	04000003 	streq	r0, [r0], #-3
     b0c:	0000896b 	andeq	r8, r0, fp, ror #18
     b10:	af090000 	svcge	0x00090000
     b14:	04000005 	streq	r0, [r0], #-5
     b18:	0000dd6c 	andeq	sp, r0, ip, ror #26
     b1c:	b0090400 	andlt	r0, r9, r0, lsl #8
     b20:	04000004 	streq	r0, [r0], #-4
     b24:	0000dd6d 	andeq	sp, r0, sp, ror #26
     b28:	4e090800 	cdpmi	8, 0, cr0, cr9, cr0, {0}
     b2c:	04000003 	streq	r0, [r0], #-3
     b30:	0000796e 	andeq	r7, r0, lr, ror #18
     b34:	88090c00 	stmdahi	r9, {sl, fp}
     b38:	04000003 	streq	r0, [r0], #-3
     b3c:	0000796f 	andeq	r7, r0, pc, ror #18
     b40:	06001000 	streq	r1, [r0], -r0
     b44:	0000e304 	andeq	lr, r0, r4, lsl #6
     b48:	00940a00 	addseq	r0, r4, r0, lsl #20
     b4c:	e1020000 	mrs	r0, (UNDEF: 2)
     b50:	04000005 	streq	r0, [r0], #-5
     b54:	00009471 	andeq	r9, r0, r1, ror r4
     b58:	063f0800 	ldrteq	r0, [pc], -r0, lsl #16
     b5c:	040c0000 	streq	r0, [ip], #-0
     b60:	00012473 	andeq	r2, r1, r3, ror r4
     b64:	03bd0900 			; <UNDEFINED> instruction: 0x03bd0900
     b68:	75040000 	strvc	r0, [r4, #-0]
     b6c:	00000089 	andeq	r0, r0, r9, lsl #1
     b70:	05af0900 	streq	r0, [pc, #2304]!	; 1478 <_start-0x6b88>
     b74:	76040000 	strvc	r0, [r4], -r0
     b78:	000000dd 	ldrdeq	r0, [r0], -sp
     b7c:	04b00904 	ldrteq	r0, [r0], #2308	; 0x904
     b80:	77040000 	strvc	r0, [r4, -r0]
     b84:	000000dd 	ldrdeq	r0, [r0], -sp
     b88:	29020008 	stmdbcs	r2, {r3}
     b8c:	04000005 	streq	r0, [r0], #-5
     b90:	0000f379 	andeq	pc, r0, r9, ror r3	; <UNPREDICTABLE>
     b94:	064f0800 	strbeq	r0, [pc], -r0, lsl #16
     b98:	04140000 	ldreq	r0, [r4], #-0
     b9c:	0001607e 	andeq	r6, r1, lr, ror r0
     ba0:	054f0900 	strbeq	r0, [pc, #-2304]	; 2a8 <_start-0x7d58>
     ba4:	80040000 	andhi	r0, r4, r0
     ba8:	00000160 	andeq	r0, r0, r0, ror #2
     bac:	03b50900 			; <UNDEFINED> instruction: 0x03b50900
     bb0:	81040000 	mrshi	r0, (UNDEF: 4)
     bb4:	00000165 	andeq	r0, r0, r5, ror #2
     bb8:	03c80904 	biceq	r0, r8, #4, 18	; 0x10000
     bbc:	82040000 	andhi	r0, r4, #0
     bc0:	00000170 	andeq	r0, r0, r0, ror r1
     bc4:	5d0a0008 	stcpl	0, cr0, [sl, #-32]	; 0xffffffe0
     bc8:	06000000 	streq	r0, [r0], -r0
     bcc:	00016b04 	andeq	r6, r1, r4, lsl #22
     bd0:	00e80a00 	rsceq	r0, r8, r0, lsl #20
     bd4:	240a0000 	strcs	r0, [sl], #-0
     bd8:	02000001 	andeq	r0, r0, #1
     bdc:	000007c3 	andeq	r0, r0, r3, asr #15
     be0:	012f8304 	teqeq	pc, r4, lsl #6
     be4:	9d080000 	stcls	0, cr0, [r8, #-0]
     be8:	08000008 	stmdaeq	r0, {r3}
     bec:	01a56805 			; <UNDEFINED> instruction: 0x01a56805
     bf0:	ec090000 	stc	0, cr0, [r9], {-0}
     bf4:	05000008 	streq	r0, [r0, #-8]
     bf8:	0000566a 	andeq	r5, r0, sl, ror #12
     bfc:	0f090000 	svceq	0x00090000
     c00:	05000009 	streq	r0, [r0, #-9]
     c04:	0000896b 	andeq	r8, r0, fp, ror #18
     c08:	02000400 	andeq	r0, r0, #0, 8
     c0c:	0000093e 	andeq	r0, r0, lr, lsr r9
     c10:	01806c05 	orreq	r6, r0, r5, lsl #24
     c14:	35080000 	strcc	r0, [r8, #-0]
     c18:	4c00000a 	stcmi	0, cr0, [r0], {10}
     c1c:	02417901 	subeq	r7, r1, #16384	; 0x4000
     c20:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
     c24:	01000009 	tsteq	r0, r9
     c28:	0002417b 	andeq	r4, r2, fp, ror r1
     c2c:	e5090000 	str	r0, [r9, #-0]
     c30:	0100000a 	tsteq	r0, sl
     c34:	0002417c 	andeq	r4, r2, ip, ror r1
     c38:	24090400 	strcs	r0, [r9], #-1024	; 0xfffffc00
     c3c:	0100000b 	tsteq	r0, fp
     c40:	0002417e 	andeq	r4, r2, lr, ror r1
     c44:	e1090800 	tst	r9, r0, lsl #16
     c48:	01000008 	tsteq	r0, r8
     c4c:	0002417f 	andeq	r4, r2, pc, ror r1
     c50:	f6090c00 			; <UNDEFINED> instruction: 0xf6090c00
     c54:	0100000a 	tsteq	r0, sl
     c58:	00017581 	andeq	r7, r1, r1, lsl #11
     c5c:	8d091000 	stchi	0, cr1, [r9, #-0]
     c60:	01000009 	tsteq	r0, r9
     c64:	00017582 	andeq	r7, r1, r2, lsl #11
     c68:	a0092400 	andge	r2, r9, r0, lsl #8
     c6c:	0100000a 	tsteq	r0, sl
     c70:	00016084 	andeq	r6, r1, r4, lsl #1
     c74:	76093800 	strvc	r3, [r9], -r0, lsl #16
     c78:	01000009 	tsteq	r0, r9
     c7c:	00005d85 	andeq	r5, r0, r5, lsl #27
     c80:	2e093c00 	cdpcs	12, 0, cr3, cr9, cr0, {0}
     c84:	0100000b 	tsteq	r0, fp
     c88:	00005d86 	andeq	r5, r0, r6, lsl #27
     c8c:	dd094000 	stcle	0, cr4, [r9, #-0]
     c90:	0100000a 	tsteq	r0, sl
     c94:	00024788 	andeq	r4, r2, r8, lsl #15
     c98:	5e094400 	cfcpyspl	mvf4, mvf9
     c9c:	0100000a 	tsteq	r0, sl
     ca0:	00024789 	andeq	r4, r2, r9, lsl #15
     ca4:	06004800 	streq	r4, [r0], -r0, lsl #16
     ca8:	00003a04 	andeq	r3, r0, r4, lsl #20
     cac:	00560a00 	subseq	r0, r6, r0, lsl #20
     cb0:	d0020000 	andle	r0, r2, r0
     cb4:	01000009 	tsteq	r0, r9
     cb8:	0001b090 	muleq	r1, r0, r0
     cbc:	09540200 	ldmdbeq	r4, {r9}^
     cc0:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
     cc4:	00000262 	andeq	r0, r0, r2, ror #4
     cc8:	024c0406 	subeq	r0, ip, #100663296	; 0x6000000
     ccc:	bb0b0000 	bllt	2c0cd4 <mailbuffer+0x285be4>
     cd0:	0100000a 	tsteq	r0, sl
     cd4:	00560117 	subseq	r0, r6, r7, lsl r1
     cd8:	13780000 	cmnne	r8, #0
     cdc:	01440001 	cmpeq	r4, r1
     ce0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ce4:	000002a1 	andeq	r0, r0, r1, lsr #5
     ce8:	000b1c0c 	andeq	r1, fp, ip, lsl #24
     cec:	01170100 	tsteq	r7, r0, lsl #2
     cf0:	00000257 	andeq	r0, r0, r7, asr r2
     cf4:	0c6c9102 	stfeqp	f1, [ip], #-8
     cf8:	00000880 	andeq	r0, r0, r0, lsl #17
     cfc:	56011701 	strpl	r1, [r1], -r1, lsl #14
     d00:	02000000 	andeq	r0, r0, #0
     d04:	0b006891 	bleq	1af50 <DWHCIDeviceChannelInterruptHandler+0x2dc>
     d08:	00000a66 	andeq	r0, r0, r6, ror #20
     d0c:	57014201 	strpl	r4, [r1, -r1, lsl #4]
     d10:	bc000002 	stclt	0, cr0, [r0], {2}
     d14:	f8000114 			; <UNDEFINED> instruction: 0xf8000114
     d18:	01000000 	mrseq	r0, (UNDEF: 0)
     d1c:	0003169c 	muleq	r3, ip, r6
     d20:	097f0c00 	ldmdbeq	pc!, {sl, fp}^	; <UNPREDICTABLE>
     d24:	42010000 	andmi	r0, r1, #0
     d28:	00005d01 	andeq	r5, r0, r1, lsl #26
     d2c:	5c910200 	lfmpl	f0, 4, [r1], {0}
     d30:	000b2e0c 	andeq	r2, fp, ip, lsl #28
     d34:	01420100 	mrseq	r0, (UNDEF: 82)
     d38:	0000005d 	andeq	r0, r0, sp, asr r0
     d3c:	0c589102 	ldfeqp	f1, [r8], {2}
     d40:	000007e3 	andeq	r0, r0, r3, ror #15
     d44:	41014201 	tstmi	r1, r1, lsl #4
     d48:	02000000 	andeq	r0, r0, #0
     d4c:	7f0d5791 	svcvc	0x000d5791
     d50:	01000008 	tsteq	r0, r8
     d54:	02620144 	rsbeq	r0, r2, #68, 2
     d58:	91020000 	mrsls	r0, (UNDEF: 2)
     d5c:	0b0a0d68 	bleq	284304 <mailbuffer+0x249214>
     d60:	45010000 	strmi	r0, [r1, #-0]
     d64:	00002101 	andeq	r2, r0, r1, lsl #2
     d68:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     d6c:	00094c0d 	andeq	r4, r9, sp, lsl #24
     d70:	01460100 	mrseq	r0, (UNDEF: 86)
     d74:	00000257 	andeq	r0, r0, r7, asr r2
     d78:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     d7c:	00092c0b 	andeq	r2, r9, fp, lsl #24
     d80:	02410100 	subeq	r0, r1, #0, 2
     d84:	00000056 	andeq	r0, r0, r6, asr r0
     d88:	000115b4 			; <UNDEFINED> instruction: 0x000115b4
     d8c:	000001dc 	ldrdeq	r0, [r0], -ip
     d90:	038b9c01 	orreq	r9, fp, #256	; 0x100
     d94:	1c0c0000 	stcne	0, cr0, [ip], {-0}
     d98:	0100000b 	tsteq	r0, fp
     d9c:	02570241 	subseq	r0, r7, #268435460	; 0x10000004
     da0:	91020000 	mrsls	r0, (UNDEF: 2)
     da4:	09c20c5c 	stmibeq	r2, {r2, r3, r4, r6, sl, fp}^
     da8:	41010000 	mrsmi	r0, (UNDEF: 1)
     dac:	00038b02 	andeq	r8, r3, r2, lsl #22
     db0:	58910200 	ldmpl	r1, {r9}
     db4:	0011290c 	andseq	r2, r1, ip, lsl #18
     db8:	02410100 	subeq	r0, r1, #0, 2
     dbc:	00000089 	andeq	r0, r0, r9, lsl #1
     dc0:	0c549102 	ldfeqp	f1, [r4], {2}
     dc4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
     dc8:	56024101 	strpl	r4, [r2], -r1, lsl #2
     dcc:	02000000 	andeq	r0, r0, #0
     dd0:	d70d5091 			; <UNDEFINED> instruction: 0xd70d5091
     dd4:	01000009 	tsteq	r0, r9
     dd8:	00560243 	subseq	r0, r6, r3, asr #4
     ddc:	91020000 	mrsls	r0, (UNDEF: 2)
     de0:	0bd60d6c 	bleq	ff584398 <_estack+0xf7574398>
     de4:	44010000 	strmi	r0, [r1], #-0
     de8:	0001a502 	andeq	sl, r1, r2, lsl #10
     dec:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     df0:	00820e00 	addeq	r0, r2, r0, lsl #28
     df4:	ef0b0000 	svc	0x000b0000
     df8:	01000007 	tsteq	r0, r7
     dfc:	00560386 	subseq	r0, r6, r6, lsl #7
     e00:	17900000 	ldrne	r0, [r0, r0]
     e04:	010c0001 	tsteq	ip, r1
     e08:	9c010000 	stcls	0, cr0, [r1], {-0}
     e0c:	00000405 	andeq	r0, r0, r5, lsl #8
     e10:	000b1c0c 	andeq	r1, fp, ip, lsl #24
     e14:	03860100 	orreq	r0, r6, #0, 2
     e18:	00000257 	andeq	r0, r0, r7, asr r2
     e1c:	0c649102 	stfeqp	f1, [r4], #-8
     e20:	000009c2 	andeq	r0, r0, r2, asr #19
     e24:	8b038601 	blhi	e2630 <mailbuffer+0xa7540>
     e28:	02000003 	andeq	r0, r0, #3
     e2c:	260c6091 			; <UNDEFINED> instruction: 0x260c6091
     e30:	01000008 	tsteq	r0, r8
     e34:	04050386 	streq	r0, [r5], #-902	; 0xfffffc7a
     e38:	91020000 	mrsls	r0, (UNDEF: 2)
     e3c:	08bc0c5c 	ldmeq	ip!, {r2, r3, r4, r6, sl, fp}
     e40:	86010000 	strhi	r0, [r1], -r0
     e44:	00005603 	andeq	r5, r0, r3, lsl #12
     e48:	58910200 	ldmpl	r1, {r9}
     e4c:	00094c0d 	andeq	r4, r9, sp, lsl #24
     e50:	03880100 	orreq	r0, r8, #0, 2
     e54:	00000056 	andeq	r0, r0, r6, asr r0
     e58:	0d6c9102 	stfeqp	f1, [ip, #-8]!
     e5c:	00000a7a 	andeq	r0, r0, sl, ror sl
     e60:	5d038901 	stcpl	9, cr8, [r3, #-4]
     e64:	02000000 	andeq	r0, r0, #0
     e68:	06006891 			; <UNDEFINED> instruction: 0x06006891
     e6c:	00005604 	andeq	r5, r0, r4, lsl #12
     e70:	08a70b00 	stmiaeq	r7!, {r8, r9, fp}
     e74:	c1010000 	mrsgt	r0, (UNDEF: 1)
     e78:	00005603 	andeq	r5, r0, r3, lsl #12
     e7c:	01189c00 	tsteq	r8, r0, lsl #24
     e80:	00023c00 	andeq	r3, r2, r0, lsl #24
     e84:	8f9c0100 	svchi	0x009c0100
     e88:	0c000004 	stceq	0, cr0, [r0], {4}
     e8c:	00000b1c 	andeq	r0, r0, ip, lsl fp
     e90:	5703c101 	strpl	ip, [r3, -r1, lsl #2]
     e94:	02000002 	andeq	r0, r0, #2
     e98:	b20c5c91 	andlt	r5, ip, #37120	; 0x9100
     e9c:	0100000a 	tsteq	r0, sl
     ea0:	048f03c1 	streq	r0, [pc], #961	; ea8 <_start-0x7158>
     ea4:	91020000 	mrsls	r0, (UNDEF: 2)
     ea8:	11290c58 	teqne	r9, r8, asr ip
     eac:	c1010000 	mrsgt	r0, (UNDEF: 1)
     eb0:	00008903 	andeq	r8, r0, r3, lsl #18
     eb4:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     eb8:	00091f0c 	andeq	r1, r9, ip, lsl #30
     ebc:	03c10100 	biceq	r0, r1, #0, 2
     ec0:	00000056 	andeq	r0, r0, r6, asr r0
     ec4:	0d509102 	ldfeqp	f1, [r0, #-8]
     ec8:	000009d7 	ldrdeq	r0, [r0], -r7
     ecc:	5603c301 	strpl	ip, [r3], -r1, lsl #6
     ed0:	02000000 	andeq	r0, r0, #0
     ed4:	d60d6c91 			; <UNDEFINED> instruction: 0xd60d6c91
     ed8:	0100000b 	tsteq	r0, fp
     edc:	01a503c4 			; <UNDEFINED> instruction: 0x01a503c4
     ee0:	91020000 	mrsls	r0, (UNDEF: 2)
     ee4:	08ca0d60 	stmiaeq	sl, {r5, r6, r8, sl, fp}^
     ee8:	c5010000 	strgt	r0, [r1, #-0]
     eec:	00024103 	andeq	r4, r2, r3, lsl #2
     ef0:	68910200 	ldmvs	r1, {r9}
     ef4:	00790e00 	rsbseq	r0, r9, r0, lsl #28
     ef8:	610b0000 	mrsvs	r0, (UNDEF: 11)
     efc:	01000009 	tsteq	r0, r9
     f00:	00560456 	subseq	r0, r6, r6, asr r4
     f04:	1ad80000 	bne	ff600f0c <_estack+0xf75f0f0c>
     f08:	01100001 	tsteq	r0, r1
     f0c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f10:	000004fa 	strdeq	r0, [r0], -sl
     f14:	000b1c0c 	andeq	r1, fp, ip, lsl #24
     f18:	04560100 	ldrbeq	r0, [r6], #-256	; 0xffffff00
     f1c:	00000257 	andeq	r0, r0, r7, asr r2
     f20:	0c649102 	stfeqp	f1, [r4], #-8
     f24:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
     f28:	8f045601 	svchi	0x00045601
     f2c:	02000004 	andeq	r0, r0, #4
     f30:	260c6091 			; <UNDEFINED> instruction: 0x260c6091
     f34:	01000008 	tsteq	r0, r8
     f38:	04050456 	streq	r0, [r5], #-1110	; 0xfffffbaa
     f3c:	91020000 	mrsls	r0, (UNDEF: 2)
     f40:	094c0d5c 	stmdbeq	ip, {r2, r3, r4, r6, r8, sl, fp}^
     f44:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     f48:	00005604 	andeq	r5, r0, r4, lsl #12
     f4c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     f50:	000a7a0d 	andeq	r7, sl, sp, lsl #20
     f54:	04590100 	ldrbeq	r0, [r9], #-256	; 0xffffff00
     f58:	0000005d 	andeq	r0, r0, sp, asr r0
     f5c:	00689102 	rsbeq	r9, r8, r2, lsl #2
     f60:	0008080b 	andeq	r0, r8, fp, lsl #16
     f64:	048f0100 	streq	r0, [pc], #256	; f6c <_start-0x7094>
     f68:	0000005d 	andeq	r0, r0, sp, asr r0
     f6c:	00011be8 	andeq	r1, r1, r8, ror #23
     f70:	00000064 	andeq	r0, r0, r4, rrx
     f74:	05339c01 	ldreq	r9, [r3, #-3073]!	; 0xfffff3ff
     f78:	1c0c0000 	stcne	0, cr0, [ip], {-0}
     f7c:	0100000b 	tsteq	r0, fp
     f80:	0533048f 	ldreq	r0, [r3, #-1167]!	; 0xfffffb71
     f84:	91020000 	mrsls	r0, (UNDEF: 2)
     f88:	094b0d64 	stmdbeq	fp, {r2, r5, r6, r8, sl, fp}^
     f8c:	91010000 	mrsls	r0, (UNDEF: 1)
     f90:	00005d04 	andeq	r5, r0, r4, lsl #26
     f94:	6c910200 	lfmvs	f0, 4, [r1], {0}
     f98:	02570e00 	subseq	r0, r7, #0, 28
     f9c:	a40b0000 	strge	r0, [fp], #-0
     fa0:	01000009 	tsteq	r0, r9
     fa4:	005d049d 			; <UNDEFINED> instruction: 0x005d049d
     fa8:	1c4c0000 	marne	acc0, r0, ip
     fac:	005c0001 	subseq	r0, ip, r1
     fb0:	9c010000 	stcls	0, cr0, [r1], {-0}
     fb4:	00000571 	andeq	r0, r0, r1, ror r5
     fb8:	000b1c0c 	andeq	r1, fp, ip, lsl #24
     fbc:	049d0100 	ldreq	r0, [sp], #256	; 0x100
     fc0:	00000533 	andeq	r0, r0, r3, lsr r5
     fc4:	0d649102 	stfeqp	f1, [r4, #-8]!
     fc8:	0000094b 	andeq	r0, r0, fp, asr #18
     fcc:	5d049f01 	stcpl	15, cr9, [r4, #-4]
     fd0:	02000000 	andeq	r0, r0, #0
     fd4:	0f006c91 	svceq	0x00006c91
     fd8:	000008fb 	strdeq	r0, [r0], -fp
     fdc:	a804a901 	stmdage	r4, {r0, r8, fp, sp, pc}
     fe0:	5c00011c 	stfpls	f0, [r0], {28}
     fe4:	01000000 	mrseq	r0, (UNDEF: 0)
     fe8:	0005979c 	muleq	r5, ip, r7
     fec:	0b1c0c00 	bleq	703ff4 <mailbuffer+0x6c8f04>
     ff0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
     ff4:	00025704 	andeq	r5, r2, r4, lsl #14
     ff8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     ffc:	088a1000 	stmeq	sl, {ip}
    1000:	d2010000 	andle	r0, r1, #0
    1004:	011d0404 	tsteq	sp, r4, lsl #8
    1008:	00015c00 	andeq	r5, r1, r0, lsl #24
    100c:	db9c0100 	blle	fe701414 <_estack+0xf66f1414>
    1010:	0c000005 	stceq	0, cr0, [r0], {5}
    1014:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1018:	6204d201 	andvs	sp, r4, #268435456	; 0x10000000
    101c:	02000002 	andeq	r0, r0, #2
    1020:	c20c6c91 	andgt	r6, ip, #37120	; 0x9100
    1024:	01000009 	tsteq	r0, r9
    1028:	008204d2 	ldrdeq	r0, [r2], r2
    102c:	91020000 	mrsls	r0, (UNDEF: 2)
    1030:	0aec0c68 	beq	ffb041d8 <_estack+0xf7af41d8>
    1034:	d2010000 	andle	r0, r1, #0
    1038:	00005604 	andeq	r5, r0, r4, lsl #12
    103c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1040:	086a1000 	stmdaeq	sl!, {ip}^
    1044:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    1048:	011e6004 	tsteq	lr, r4
    104c:	0000bc00 	andeq	fp, r0, r0, lsl #24
    1050:	109c0100 	addsne	r0, ip, r0, lsl #2
    1054:	0c000006 	stceq	0, cr0, [r0], {6}
    1058:	00000b1c 	andeq	r0, r0, ip, lsl fp
    105c:	1004f801 	andne	pc, r4, r1, lsl #16
    1060:	02000006 	andeq	r0, r0, #6
    1064:	b20c6c91 	andlt	r6, ip, #37120	; 0x9100
    1068:	0100000a 	tsteq	r0, sl
    106c:	008204f8 	strdeq	r0, [r2], r8
    1070:	91020000 	mrsls	r0, (UNDEF: 2)
    1074:	620e0068 	andvs	r0, lr, #104	; 0x68
    1078:	10000002 	andne	r0, r0, r2
    107c:	00000ace 	andeq	r0, r0, lr, asr #21
    1080:	1c050601 	stcne	6, cr0, [r5], {1}
    1084:	2c00011f 	stfcss	f0, [r0], {31}
    1088:	01000001 	tsteq	r0, r1
    108c:	00063b9c 	muleq	r6, ip, fp
    1090:	0b1c0c00 	bleq	704098 <mailbuffer+0x6c8fa8>
    1094:	06010000 	streq	r0, [r1], -r0
    1098:	00025705 	andeq	r5, r2, r5, lsl #14
    109c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    10a0:	085a1100 	ldmdaeq	sl, {r8, ip}^
    10a4:	46010000 	strmi	r0, [r1], -r0
    10a8:	00005605 	andeq	r5, r0, r5, lsl #12
    10ac:	01204800 	teqeq	r0, r0, lsl #16
    10b0:	00007400 	andeq	r7, r0, r0, lsl #8
    10b4:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    10b8:	0c000006 	stceq	0, cr0, [r0], {6}
    10bc:	00000b1c 	andeq	r0, r0, ip, lsl fp
    10c0:	33054601 	movwcc	r4, #22017	; 0x5601
    10c4:	02000005 	andeq	r0, r0, #5
    10c8:	4c0d6491 	cfstrsmi	mvf6, [sp], {145}	; 0x91
    10cc:	01000009 	tsteq	r0, r9
    10d0:	00560548 	subseq	r0, r6, r8, asr #10
    10d4:	91020000 	mrsls	r0, (UNDEF: 2)
    10d8:	400b006c 	andmi	r0, fp, ip, rrx
    10dc:	01000008 	tsteq	r0, r8
    10e0:	00560552 	subseq	r0, r6, r2, asr r5
    10e4:	20bc0000 	adcscs	r0, ip, r0
    10e8:	006c0001 	rsbeq	r0, ip, r1
    10ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    10f0:	000006ad 	andeq	r0, r0, sp, lsr #13
    10f4:	000b1c0c 	andeq	r1, fp, ip, lsl #24
    10f8:	05520100 	ldrbeq	r0, [r2, #-256]	; 0xffffff00
    10fc:	00000533 	andeq	r0, r0, r3, lsr r5
    1100:	0d649102 	stfeqp	f1, [r4, #-8]!
    1104:	0000094c 	andeq	r0, r0, ip, asr #18
    1108:	56055401 	strpl	r5, [r5], -r1, lsl #8
    110c:	02000000 	andeq	r0, r0, #0
    1110:	11006c91 			; <UNDEFINED> instruction: 0x11006c91
    1114:	00000a91 	muleq	r0, r1, sl
    1118:	56055d01 	strpl	r5, [r5], -r1, lsl #26
    111c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1120:	7c000121 	stfvcs	f0, [r0], {33}	; 0x21
    1124:	01000000 	mrseq	r0, (UNDEF: 0)
    1128:	0006e69c 	muleq	r6, ip, r6
    112c:	0b1c0c00 	bleq	704134 <mailbuffer+0x6c9044>
    1130:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1134:	00053305 	andeq	r3, r5, r5, lsl #6
    1138:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    113c:	00094c0d 	andeq	r4, r9, sp, lsl #24
    1140:	055f0100 	ldrbeq	r0, [pc, #-256]	; 1048 <_start-0x6fb8>
    1144:	00000056 	andeq	r0, r0, r6, asr r0
    1148:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    114c:	000a4512 	andeq	r4, sl, r2, lsl r5
    1150:	05690100 	strbeq	r0, [r9, #-256]!	; 0xffffff00
    1154:	00000056 	andeq	r0, r0, r6, asr r0
    1158:	000121a4 	andeq	r2, r1, r4, lsr #3
    115c:	00000074 	andeq	r0, r0, r4, ror r0
    1160:	1c0c9c01 	stcne	12, cr9, [ip], {1}
    1164:	0100000b 	tsteq	r0, fp
    1168:	05330569 	ldreq	r0, [r3, #-1385]!	; 0xfffffa97
    116c:	91020000 	mrsls	r0, (UNDEF: 2)
    1170:	094c0d64 	stmdbeq	ip, {r2, r5, r6, r8, sl, fp}^
    1174:	6b010000 	blvs	4117c <mailbuffer+0x608c>
    1178:	00005605 	andeq	r5, r0, r5, lsl #12
    117c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1180:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
    1184:	00040000 	andeq	r0, r4, r0
    1188:	00000533 	andeq	r0, r0, r3, lsr r5
    118c:	00190104 	andseq	r0, r9, r4, lsl #2
    1190:	bd010000 	stclt	0, cr0, [r1, #-0]
    1194:	dc00000c 	stcle	0, cr0, [r0], {12}
    1198:	1800000d 	stmdane	r0, {r0, r2, r3}
    119c:	5c000122 	stfpls	f0, [r0], {34}	; 0x22
    11a0:	9a00001f 	bls	1224 <_start-0x6ddc>
    11a4:	02000008 	andeq	r0, r0, #8
    11a8:	072c0601 	streq	r0, [ip, -r1, lsl #12]!
    11ac:	01020000 	mrseq	r0, (UNDEF: 2)
    11b0:	00072a08 	andeq	r2, r7, r8, lsl #20
    11b4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    11b8:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    11bc:	32070202 	andcc	r0, r7, #536870912	; 0x20000000
    11c0:	02000001 	andeq	r0, r0, #1
    11c4:	07980504 	ldreq	r0, [r8, r4, lsl #10]
    11c8:	04020000 	streq	r0, [r2], #-0
    11cc:	00071807 	andeq	r1, r7, r7, lsl #16
    11d0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    11d4:	00000793 	muleq	r0, r3, r7
    11d8:	13070802 	movwne	r0, #30722	; 0x7802
    11dc:	03000007 	movweq	r0, #7
    11e0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    11e4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    11e8:	00071d07 	andeq	r1, r7, r7, lsl #26
    11ec:	081f0400 	ldmdaeq	pc, {sl}	; <UNPREDICTABLE>
    11f0:	d4020000 	strle	r0, [r2], #-0
    11f4:	00000064 	andeq	r0, r0, r4, rrx
    11f8:	04020405 	streq	r0, [r2], #-1029	; 0xfffffbfb
    11fc:	0001d407 	andeq	sp, r1, r7, lsl #8
    1200:	06010200 	streq	r0, [r1], -r0, lsl #4
    1204:	00000733 	andeq	r0, r0, r3, lsr r7
    1208:	00014504 	andeq	r4, r1, r4, lsl #10
    120c:	91470300 	mrsls	r0, (UNDEF: 119)
    1210:	06000000 	streq	r0, [r0], -r0
    1214:	00009704 	andeq	r9, r0, r4, lsl #14
    1218:	00a20700 	adceq	r0, r2, r0, lsl #14
    121c:	76080000 	strvc	r0, [r8], -r0
    1220:	00000000 	andeq	r0, r0, r0
    1224:	00000c04 	andeq	r0, r0, r4, lsl #24
    1228:	481f0400 	ldmdami	pc, {sl}	; <UNPREDICTABLE>
    122c:	04000000 	streq	r0, [r0], #-0
    1230:	00000d80 	andeq	r0, r0, r0, lsl #27
    1234:	00b85705 	adcseq	r5, r8, r5, lsl #14
    1238:	04060000 	streq	r0, [r6], #-0
    123c:	000000be 	strheq	r0, [r0], -lr
    1240:	00004109 	andeq	r4, r0, r9, lsl #2
    1244:	0000cd00 	andeq	ip, r0, r0, lsl #26
    1248:	00760800 	rsbseq	r0, r6, r0, lsl #16
    124c:	0a000000 	beq	1254 <_start-0x6dac>
    1250:	00000447 	andeq	r0, r0, r7, asr #8
    1254:	16690614 			; <UNDEFINED> instruction: 0x16690614
    1258:	0b000001 	bleq	1264 <_start-0x6d9c>
    125c:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    1260:	00a26b06 	adceq	r6, r2, r6, lsl #22
    1264:	0b000000 	bleq	126c <_start-0x6d94>
    1268:	000005af 	andeq	r0, r0, pc, lsr #11
    126c:	01166c06 	tsteq	r6, r6, lsl #24
    1270:	0b040000 	bleq	101278 <mailbuffer+0xc6188>
    1274:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    1278:	01166d06 	tsteq	r6, r6, lsl #26
    127c:	0b080000 	bleq	201284 <mailbuffer+0x1c6194>
    1280:	0000034e 	andeq	r0, r0, lr, asr #6
    1284:	00766e06 	rsbseq	r6, r6, r6, lsl #28
    1288:	0b0c0000 	bleq	301290 <mailbuffer+0x2c61a0>
    128c:	00000388 	andeq	r0, r0, r8, lsl #7
    1290:	00766f06 	rsbseq	r6, r6, r6, lsl #30
    1294:	00100000 	andseq	r0, r0, r0
    1298:	011c0406 	tsteq	ip, r6, lsl #8
    129c:	cd0c0000 	stcgt	0, cr0, [ip, #-0]
    12a0:	04000000 	streq	r0, [r0], #-0
    12a4:	000005e1 	andeq	r0, r0, r1, ror #11
    12a8:	00cd7106 	sbceq	r7, sp, r6, lsl #2
    12ac:	3f0a0000 	svccc	0x000a0000
    12b0:	0c000006 	stceq	0, cr0, [r0], {6}
    12b4:	015d7306 	cmpeq	sp, r6, lsl #6
    12b8:	bd0b0000 	stclt	0, cr0, [fp, #-0]
    12bc:	06000003 	streq	r0, [r0], -r3
    12c0:	0000a275 	andeq	sl, r0, r5, ror r2
    12c4:	af0b0000 	svcge	0x000b0000
    12c8:	06000005 	streq	r0, [r0], -r5
    12cc:	00011676 	andeq	r1, r1, r6, ror r6
    12d0:	b00b0400 	andlt	r0, fp, r0, lsl #8
    12d4:	06000004 	streq	r0, [r0], -r4
    12d8:	00011677 	andeq	r1, r1, r7, ror r6
    12dc:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    12e0:	00000529 	andeq	r0, r0, r9, lsr #10
    12e4:	012c7906 	teqeq	ip, r6, lsl #18
    12e8:	4f0a0000 	svcmi	0x000a0000
    12ec:	14000006 	strne	r0, [r0], #-6
    12f0:	01997e06 	orrseq	r7, r9, r6, lsl #28
    12f4:	4f0b0000 	svcmi	0x000b0000
    12f8:	06000005 	streq	r0, [r0], -r5
    12fc:	00019980 	andeq	r9, r1, r0, lsl #19
    1300:	b50b0000 	strlt	r0, [fp, #-0]
    1304:	06000003 	streq	r0, [r0], -r3
    1308:	00019e81 	andeq	r9, r1, r1, lsl #29
    130c:	c80b0400 	stmdagt	fp, {sl}
    1310:	06000003 	streq	r0, [r0], -r3
    1314:	0001a982 	andeq	sl, r1, r2, lsl #19
    1318:	0c000800 	stceq	8, cr0, [r0], {-0}
    131c:	00000048 	andeq	r0, r0, r8, asr #32
    1320:	01a40406 			; <UNDEFINED> instruction: 0x01a40406
    1324:	210c0000 	mrscs	r0, (UNDEF: 12)
    1328:	0c000001 	stceq	0, cr0, [r0], {1}
    132c:	0000015d 	andeq	r0, r0, sp, asr r1
    1330:	0007c304 	andeq	ip, r7, r4, lsl #6
    1334:	68830600 	stmvs	r3, {r9, sl}
    1338:	04000001 	streq	r0, [r0], #-1
    133c:	00000c06 	andeq	r0, r0, r6, lsl #24
    1340:	00766307 	rsbseq	r6, r6, r7, lsl #6
    1344:	9d0a0000 	stcls	0, cr0, [sl, #-0]
    1348:	08000008 	stmdaeq	r0, {r3}
    134c:	01e96807 	mvneq	r6, r7, lsl #16
    1350:	ec0b0000 	stc	0, cr0, [fp], {-0}
    1354:	07000008 	streq	r0, [r0, -r8]
    1358:	0000416a 	andeq	r4, r0, sl, ror #2
    135c:	0f0b0000 	svceq	0x000b0000
    1360:	07000009 	streq	r0, [r0, -r9]
    1364:	0000a26b 	andeq	sl, r0, fp, ror #4
    1368:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
    136c:	0000093e 	andeq	r0, r0, lr, lsr r9
    1370:	01c46c07 	biceq	r6, r4, r7, lsl #24
    1374:	b20a0000 	andlt	r0, sl, #0
    1378:	0c00000d 	stceq	0, cr0, [r0], {13}
    137c:	02257107 	eoreq	r7, r5, #-1073741823	; 0xc0000001
    1380:	980b0000 	stmdals	fp, {}	; <UNPREDICTABLE>
    1384:	07000011 	smladeq	r0, r1, r0, r0
    1388:	00007673 	andeq	r7, r0, r3, ror r6
    138c:	0a0b0000 	beq	2c1394 <mailbuffer+0x2862a4>
    1390:	0700000f 	streq	r0, [r0, -pc]
    1394:	00004874 	andeq	r4, r0, r4, ror r8
    1398:	f70b0400 			; <UNDEFINED> instruction: 0xf70b0400
    139c:	0700000f 	streq	r0, [r0, -pc]
    13a0:	00004875 	andeq	r4, r0, r5, ror r8
    13a4:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    13a8:	00001004 	andeq	r1, r0, r4
    13ac:	01f47607 	mvnseq	r7, r7, lsl #12
    13b0:	350d0000 	strcc	r0, [sp, #-0]
    13b4:	06000002 	streq	r0, [r0], -r2
    13b8:	00023b04 	andeq	r3, r2, r4, lsl #22
    13bc:	00250d00 	eoreq	r0, r5, r0, lsl #26
    13c0:	04060000 	streq	r0, [r6], #-0
    13c4:	00000048 	andeq	r0, r0, r8, asr #32
    13c8:	000c2f0a 	andeq	r2, ip, sl, lsl #30
    13cc:	66014800 	strvs	r4, [r1], -r0, lsl #16
    13d0:	000002a7 	andeq	r0, r0, r7, lsr #5
    13d4:	0002010b 	andeq	r0, r2, fp, lsl #2
    13d8:	a7680100 	strbge	r0, [r8, -r0, lsl #2]!
    13dc:	00000002 	andeq	r0, r0, r2
    13e0:	00067f0b 	andeq	r7, r6, fp, lsl #30
    13e4:	216e0100 	cmncs	lr, r0, lsl #2
    13e8:	04000001 	streq	r0, [r0], #-1
    13ec:	0006900b 	andeq	r9, r6, fp
    13f0:	216f0100 	cmncs	pc, r0, lsl #2
    13f4:	18000001 	stmdane	r0, {r0}
    13f8:	0005780b 	andeq	r7, r5, fp, lsl #16
    13fc:	48700100 	ldmdami	r0!, {r8}^
    1400:	2c000000 	stccs	0, cr0, [r0], {-0}
    1404:	000e4d0b 	andeq	r4, lr, fp, lsl #26
    1408:	40710100 	rsbsmi	r0, r1, r0, lsl #2
    140c:	30000002 	andcc	r0, r0, r2
    1410:	0011020b 	andseq	r0, r1, fp, lsl #4
    1414:	ad720100 	ldfgee	f0, [r2, #-0]
    1418:	34000002 	strcc	r0, [r0], #-2
    141c:	000ba80b 	andeq	sl, fp, fp, lsl #16
    1420:	ad860100 	stfges	f0, [r6]
    1424:	44000000 	strmi	r0, [r0], #-0
    1428:	99040600 	stmdbls	r4, {r9, sl}
    142c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1430:	00000025 	andeq	r0, r0, r5, lsr #32
    1434:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
    1438:	0000780f 	andeq	r7, r0, pc, lsl #16
    143c:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
    1440:	00000d79 	andeq	r0, r0, r9, ror sp
    1444:	02469301 	subeq	r9, r6, #67108864	; 0x4000000
    1448:	b2100000 	andslt	r0, r0, #0
    144c:	0100000b 	tsteq	r0, fp
    1450:	0041019b 	umaaleq	r0, r1, fp, r1
    1454:	22180000 	andscs	r0, r8, #0
    1458:	02980001 	addseq	r0, r8, #1
    145c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1460:	00000392 	muleq	r0, r2, r3
    1464:	000ec411 	andeq	ip, lr, r1, lsl r4
    1468:	019b0100 	orrseq	r0, fp, r0, lsl #2
    146c:	00000086 	andeq	r0, r0, r6, lsl #1
    1470:	115c9102 	cmpne	ip, r2, lsl #2
    1474:	0000115a 	andeq	r1, r0, sl, asr r1
    1478:	30019b01 	andcc	r9, r1, r1, lsl #22
    147c:	02000002 	andeq	r0, r0, #2
    1480:	7c115891 	ldcvc	8, cr5, [r1], {145}	; 0x91
    1484:	0100000c 	tsteq	r0, ip
    1488:	003a019b 	mlaseq	sl, fp, r1, r0
    148c:	91020000 	mrsls	r0, (UNDEF: 2)
    1490:	01dd1156 	bicseq	r1, sp, r6, asr r1
    1494:	9b010000 	blls	4149c <mailbuffer+0x63ac>
    1498:	00007601 	andeq	r7, r0, r1, lsl #12
    149c:	50910200 	addspl	r0, r1, r0, lsl #4
    14a0:	00057811 	andeq	r7, r5, r1, lsl r8
    14a4:	019b0100 	orrseq	r0, fp, r0, lsl #2
    14a8:	00000048 	andeq	r0, r0, r8, asr #32
    14ac:	11009102 	tstne	r0, r2, lsl #2
    14b0:	00000d4b 	andeq	r0, r0, fp, asr #26
    14b4:	92019b01 	andls	r9, r1, #1024	; 0x400
    14b8:	02000003 	andeq	r0, r0, #3
    14bc:	89110491 	ldmdbhi	r1, {r0, r4, r7, sl}
    14c0:	0100000c 	tsteq	r0, ip
    14c4:	0240019b 	subeq	r0, r0, #-1073741786	; 0xc0000026
    14c8:	91020000 	mrsls	r0, (UNDEF: 2)
    14cc:	0e901108 	fmleqs	f1, f0, #0.0
    14d0:	9b010000 	blls	414d8 <mailbuffer+0x63e8>
    14d4:	00039801 	andeq	r9, r3, r1, lsl #16
    14d8:	0c910200 	lfmeq	f0, 4, [r1], {0}
    14dc:	00094c12 	andeq	r4, r9, r2, lsl ip
    14e0:	019d0100 	orrseq	r0, sp, r0, lsl #2
    14e4:	00000041 	andeq	r0, r0, r1, asr #32
    14e8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    14ec:	00000c43 	andeq	r0, r0, r3, asr #24
    14f0:	a8019e01 	stmdage	r1, {r0, r9, sl, fp, ip, pc}
    14f4:	02000003 	andeq	r0, r0, #3
    14f8:	6c136891 	ldcvs	8, cr6, [r3], {145}	; 0x91
    14fc:	d0000122 	andle	r0, r0, r2, lsr #2
    1500:	12000001 	andne	r0, r0, #1
    1504:	00000201 	andeq	r0, r0, r1, lsl #4
    1508:	4001a901 	andmi	sl, r1, r1, lsl #18
    150c:	02000002 	andeq	r0, r0, #2
    1510:	00006491 	muleq	r0, r1, r4
    1514:	01b90406 			; <UNDEFINED> instruction: 0x01b90406
    1518:	9d0d0000 	stcls	0, cr0, [sp, #-0]
    151c:	06000003 	streq	r0, [r0], -r3
    1520:	0003a304 	andeq	sl, r3, r4, lsl #6
    1524:	02250d00 	eoreq	r0, r5, #0, 26
    1528:	04060000 	streq	r0, [r6], #-0
    152c:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
    1530:	00103114 	andseq	r3, r0, r4, lsl r1
    1534:	02400100 	subeq	r0, r0, #0, 2
    1538:	000124b0 			; <UNDEFINED> instruction: 0x000124b0
    153c:	00000134 	andeq	r0, r0, r4, lsr r1
    1540:	03e39c01 	mvneq	r9, #256	; 0x100
    1544:	81110000 	tsthi	r1, r0
    1548:	0100000e 	tsteq	r0, lr
    154c:	01b90240 			; <UNDEFINED> instruction: 0x01b90240
    1550:	91020000 	mrsls	r0, (UNDEF: 2)
    1554:	0d911264 	lfmeq	f1, 4, [r1, #400]	; 0x190
    1558:	42010000 	andmi	r0, r1, #0
    155c:	0003a802 	andeq	sl, r3, r2, lsl #16
    1560:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1564:	0f371400 	svceq	0x00371400
    1568:	82010000 	andhi	r0, r1, #0
    156c:	0125e402 	teqeq	r5, r2, lsl #8
    1570:	00014000 	andeq	r4, r1, r0
    1574:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    1578:	11000004 	tstne	r0, r4
    157c:	00000ef7 	strdeq	r0, [r0], -r7
    1580:	45028201 	strmi	r8, [r2, #-513]	; 0xfffffdff
    1584:	02000004 	andeq	r0, r0, #4
    1588:	f3115c91 			; <UNDEFINED> instruction: 0xf3115c91
    158c:	01000010 	tsteq	r0, r0, lsl r0
    1590:	00a20282 	adceq	r0, r2, r2, lsl #5
    1594:	91020000 	mrsls	r0, (UNDEF: 2)
    1598:	05d51258 	ldrbeq	r1, [r5, #600]	; 0x258
    159c:	84010000 	strhi	r0, [r1], #-0
    15a0:	0000a202 	andeq	sl, r0, r2, lsl #4
    15a4:	68910200 	ldmvs	r1, {r9}
    15a8:	000bc512 	andeq	ip, fp, r2, lsl r5
    15ac:	02850100 	addeq	r0, r5, #0, 2
    15b0:	00000041 	andeq	r0, r0, r1, asr #32
    15b4:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    15b8:	00000fca 	andeq	r0, r0, sl, asr #31
    15bc:	41028501 	tstmi	r2, r1, lsl #10
    15c0:	02000000 	andeq	r0, r0, #0
    15c4:	0d006c91 	stceq	12, cr6, [r0, #-580]	; 0xfffffdbc
    15c8:	0000044a 	andeq	r0, r0, sl, asr #8
    15cc:	00a20406 	adceq	r0, r2, r6, lsl #8
    15d0:	fb140000 	blx	5015da <mailbuffer+0x4c64ea>
    15d4:	0100000b 	tsteq	r0, fp
    15d8:	272402c3 	strcs	r0, [r4, -r3, asr #5]!
    15dc:	00ac0001 	adceq	r0, ip, r1
    15e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    15e4:	00000494 	muleq	r0, r4, r4
    15e8:	00067111 	andeq	r7, r6, r1, lsl r1
    15ec:	02c30100 	sbceq	r0, r3, #0, 2
    15f0:	000000a2 	andeq	r0, r0, r2, lsr #1
    15f4:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    15f8:	000005d5 	ldrdeq	r0, [r0], -r5
    15fc:	a202c501 	andge	ip, r2, #4194304	; 0x400000
    1600:	02000000 	andeq	r0, r0, #0
    1604:	c5126891 	ldrgt	r6, [r2, #-2193]	; 0xfffff76f
    1608:	0100000b 	tsteq	r0, fp
    160c:	004102c6 	subeq	r0, r1, r6, asr #5
    1610:	91020000 	mrsls	r0, (UNDEF: 2)
    1614:	6110006c 	tstvs	r0, ip, rrx
    1618:	01000011 	tsteq	r0, r1, lsl r0
    161c:	004802f1 	strdeq	r0, [r8], #-33	; 0xffffffdf
    1620:	27d00000 	ldrbcs	r0, [r0, r0]
    1624:	00880001 	addeq	r0, r8, r1
    1628:	9c010000 	stcls	0, cr0, [r1], {-0}
    162c:	000004dc 	ldrdeq	r0, [r0], -ip
    1630:	000d2311 	andeq	r2, sp, r1, lsl r3
    1634:	02f10100 	rscseq	r0, r1, #0, 2
    1638:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    163c:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    1640:	00000d91 	muleq	r0, r1, sp
    1644:	a802f301 	stmdage	r2, {r0, r8, r9, ip, sp, lr, pc}
    1648:	02000003 	andeq	r0, r0, #3
    164c:	4b126c91 	blmi	49c898 <mailbuffer+0x4617a8>
    1650:	01000009 	tsteq	r0, r9
    1654:	004802f4 	strdeq	r0, [r8], #-36	; 0xffffffdc
    1658:	91020000 	mrsls	r0, (UNDEF: 2)
    165c:	98140068 	ldmdals	r4, {r3, r5, r6}
    1660:	0100000c 	tsteq	r0, ip
    1664:	28580307 	ldmdacs	r8, {r0, r1, r2, r8, r9}^
    1668:	01cc0001 	biceq	r0, ip, r1
    166c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1670:	0000053e 	andeq	r0, r0, lr, lsr r5
    1674:	000d2311 	andeq	r2, sp, r1, lsl r3
    1678:	03070100 	movweq	r0, #28928	; 0x7100
    167c:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    1680:	115c9102 	cmpne	ip, r2, lsl #2
    1684:	00000f1a 	andeq	r0, r0, sl, lsl pc
    1688:	48030701 	stmdami	r3, {r0, r8, r9, sl}
    168c:	02000000 	andeq	r0, r0, #0
    1690:	91125891 			; <UNDEFINED> instruction: 0x91125891
    1694:	0100000d 	tsteq	r0, sp
    1698:	03a80309 			; <UNDEFINED> instruction: 0x03a80309
    169c:	91020000 	mrsls	r0, (UNDEF: 2)
    16a0:	11361268 	teqne	r6, r8, ror #4
    16a4:	0a010000 	beq	416ac <mailbuffer+0x65bc>
    16a8:	00004803 	andeq	r4, r0, r3, lsl #16
    16ac:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    16b0:	000d9712 	andeq	r9, sp, r2, lsl r7
    16b4:	030b0100 	movweq	r0, #45312	; 0xb100
    16b8:	00000041 	andeq	r0, r0, r1, asr #32
    16bc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    16c0:	000b5314 	andeq	r5, fp, r4, lsl r3
    16c4:	03730100 	cmneq	r3, #0, 2
    16c8:	00012a24 	andeq	r2, r1, r4, lsr #20
    16cc:	00000138 	andeq	r0, r0, r8, lsr r1
    16d0:	05739c01 	ldrbeq	r9, [r3, #-3073]!	; 0xfffff3ff
    16d4:	88110000 	ldmdahi	r1, {}	; <UNPREDICTABLE>
    16d8:	01000011 	tsteq	r0, r1, lsl r0
    16dc:	01b90373 			; <UNDEFINED> instruction: 0x01b90373
    16e0:	91020000 	mrsls	r0, (UNDEF: 2)
    16e4:	0d911264 	lfmeq	f1, 4, [r1, #400]	; 0x190
    16e8:	75010000 	strvc	r0, [r1, #-0]
    16ec:	0003a803 	andeq	sl, r3, r3, lsl #16
    16f0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    16f4:	0d591000 	ldcleq	0, cr1, [r9, #-0]
    16f8:	b3010000 	movwlt	r0, #4096	; 0x1000
    16fc:	00004103 	andeq	r4, r0, r3, lsl #2
    1700:	012b5c00 	teqeq	fp, r0, lsl #24
    1704:	0000a800 	andeq	sl, r0, r0, lsl #16
    1708:	bb9c0100 	bllt	fe701b10 <_estack+0xf66f1b10>
    170c:	11000005 	tstne	r0, r5
    1710:	00000d24 	andeq	r0, r0, r4, lsr #26
    1714:	b903b301 	stmdblt	r3, {r0, r8, r9, ip, sp, pc}
    1718:	02000001 	andeq	r0, r0, #1
    171c:	4c126491 	cfldrsmi	mvf6, [r2], {145}	; 0x91
    1720:	01000009 	tsteq	r0, r9
    1724:	004103b5 	strheq	r0, [r1], #-53	; 0xffffffcb
    1728:	91020000 	mrsls	r0, (UNDEF: 2)
    172c:	0d91126c 	lfmeq	f1, 4, [r1, #432]	; 0x1b0
    1730:	b6010000 	strlt	r0, [r1], -r0
    1734:	0005bb03 	andeq	fp, r5, r3, lsl #22
    1738:	68910200 	ldmvs	r1, {r9}
    173c:	05c00d00 	strbeq	r0, [r0, #3328]	; 0xd00
    1740:	04060000 	streq	r0, [r6], #-0
    1744:	000005c6 	andeq	r0, r0, r6, asr #11
    1748:	0002bd0d 	andeq	fp, r2, sp, lsl #26
    174c:	0da61400 	cfstrseq	mvf1, [r6]
    1750:	d5010000 	strle	r0, [r1, #-0]
    1754:	012c0403 	teqeq	ip, r3, lsl #8
    1758:	00012000 	andeq	r2, r1, r0
    175c:	009c0100 	addseq	r0, ip, r0, lsl #2
    1760:	11000006 	tstne	r0, r6
    1764:	00000bec 	andeq	r0, r0, ip, ror #23
    1768:	b903d501 	stmdblt	r3, {r0, r8, sl, ip, lr, pc}
    176c:	02000001 	andeq	r0, r0, #1
    1770:	91126491 			; <UNDEFINED> instruction: 0x91126491
    1774:	0100000d 	tsteq	r0, sp
    1778:	03a803d7 			; <UNDEFINED> instruction: 0x03a803d7
    177c:	91020000 	mrsls	r0, (UNDEF: 2)
    1780:	b710006c 	ldrlt	r0, [r0, -ip, rrx]
    1784:	0100000f 	tsteq	r0, pc
    1788:	00410402 	subeq	r0, r1, r2, lsl #8
    178c:	2d240000 	stccs	0, cr0, [r4, #-0]
    1790:	01480001 	cmpeq	r8, r1
    1794:	9c010000 	stcls	0, cr0, [r1], {-0}
    1798:	00000657 	andeq	r0, r0, r7, asr r6
    179c:	000bec11 	andeq	lr, fp, r1, lsl ip
    17a0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    17a4:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    17a8:	125c9102 	subsne	r9, ip, #-2147483648	; 0x80000000
    17ac:	00000d97 	muleq	r0, r7, sp
    17b0:	41040401 	tstmi	r4, r1, lsl #8
    17b4:	02000000 	andeq	r0, r0, #0
    17b8:	91126c91 			; <UNDEFINED> instruction: 0x91126c91
    17bc:	0100000d 	tsteq	r0, sp
    17c0:	03a80405 			; <UNDEFINED> instruction: 0x03a80405
    17c4:	91020000 	mrsls	r0, (UNDEF: 2)
    17c8:	0a7a1268 	beq	1e86170 <mailbuffer+0x1e4b080>
    17cc:	06010000 	streq	r0, [r1], -r0
    17d0:	00004804 	andeq	r4, r0, r4, lsl #16
    17d4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    17d8:	0ca91400 	cfstrseq	mvf1, [r9]
    17dc:	30010000 	andcc	r0, r1, r0
    17e0:	012e6c04 	teqeq	lr, r4, lsl #24
    17e4:	0000c400 	andeq	ip, r0, r0, lsl #8
    17e8:	7d9c0100 	ldfvcs	f0, [ip]
    17ec:	12000006 	andne	r0, r0, #6
    17f0:	0000094c 	andeq	r0, r0, ip, asr #18
    17f4:	41043201 	tstmi	r4, r1, lsl #4
    17f8:	02000000 	andeq	r0, r0, #0
    17fc:	15006c91 	strne	r6, [r0, #-3217]	; 0xfffff36f
    1800:	00000f85 	andeq	r0, r0, r5, lsl #31
    1804:	30047101 	andcc	r7, r4, r1, lsl #2
    1808:	6000012f 	andvs	r0, r0, pc, lsr #2
    180c:	01000000 	mrseq	r0, (UNDEF: 0)
    1810:	10d5159c 	smullsne	r1, r5, ip, r5
    1814:	7c010000 	stcvc	0, cr0, [r1], {-0}
    1818:	012f9004 	teqeq	pc, r4
    181c:	00005400 	andeq	r5, r0, r0, lsl #8
    1820:	109c0100 	addsne	r0, ip, r0, lsl #2
    1824:	00000f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    1828:	41048401 	tstmi	r4, r1, lsl #8
    182c:	e4000000 	str	r0, [r0], #-0
    1830:	ec00012f 	stfs	f0, [r0], {47}	; 0x2f
    1834:	01000001 	tsteq	r0, r1
    1838:	0006f29c 	muleq	r6, ip, r2
    183c:	0d911200 	lfmeq	f1, 4, [r1]
    1840:	86010000 	strhi	r0, [r1], -r0
    1844:	0003a804 	andeq	sl, r3, r4, lsl #16
    1848:	12540100 	subsne	r0, r4, #0, 2
    184c:	00000bc5 	andeq	r0, r0, r5, asr #23
    1850:	41048701 	tstmi	r4, r1, lsl #14
    1854:	02000000 	andeq	r0, r0, #0
    1858:	58136c91 	ldmdapl	r3, {r0, r4, r7, sl, fp, sp, lr}
    185c:	4c000130 	stfmis	f0, [r0], {48}	; 0x30
    1860:	12000001 	andne	r0, r0, #1
    1864:	00000d97 	muleq	r0, r7, sp
    1868:	41049a01 	tstmi	r4, r1, lsl #20
    186c:	02000000 	andeq	r0, r0, #0
    1870:	00006891 	muleq	r0, r1, r8
    1874:	00103d10 	andseq	r3, r0, r0, lsl sp
    1878:	04db0100 	ldrbeq	r0, [fp], #256	; 0x100
    187c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1880:	000131d0 	ldrdeq	r3, [r1], -r0
    1884:	00000064 	andeq	r0, r0, r4, rrx
    1888:	071c9c01 	ldreq	r9, [ip, -r1, lsl #24]
    188c:	ce120000 	cdpgt	0, 1, cr0, cr2, cr0, {0}
    1890:	01000010 	tsteq	r0, r0, lsl r0
    1894:	00a204dd 	ldrdeq	r0, [r2], sp	; <UNPREDICTABLE>
    1898:	91020000 	mrsls	r0, (UNDEF: 2)
    189c:	4c10006c 	ldcmi	0, cr0, [r0], {108}	; 0x6c
    18a0:	0100000c 	tsteq	r0, ip
    18a4:	00a204ea 	adceq	r0, r2, sl, ror #9
    18a8:	32340000 	eorscc	r0, r4, #0
    18ac:	00640001 	rsbeq	r0, r4, r1
    18b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18b4:	00000755 	andeq	r0, r0, r5, asr r7
    18b8:	00094c12 	andeq	r4, r9, r2, lsl ip
    18bc:	04ec0100 	strbteq	r0, [ip], #256	; 0x100
    18c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    18c4:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    18c8:	00000a7a 	andeq	r0, r0, sl, ror sl
    18cc:	4804ed01 	stmdami	r4, {r0, r8, sl, fp, sp, lr, pc}
    18d0:	02000000 	andeq	r0, r0, #0
    18d4:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
    18d8:	00001083 	andeq	r1, r0, r3, lsl #1
    18dc:	4804f701 	stmdami	r4, {r0, r8, r9, sl, ip, sp, lr, pc}
    18e0:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    18e4:	4c000132 	stfmis	f0, [r0], {50}	; 0x32
    18e8:	01000000 	mrseq	r0, (UNDEF: 0)
    18ec:	0f47149c 	svceq	0x0047149c
    18f0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    18f4:	0132e405 	teqeq	r2, r5, lsl #8
    18f8:	00028000 	andeq	r8, r2, r0
    18fc:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    1900:	12000007 	andne	r0, r0, #7
    1904:	00000d91 	muleq	r0, r1, sp
    1908:	a805ab01 	stmdage	r5, {r0, r8, r9, fp, sp, pc}
    190c:	02000003 	andeq	r0, r0, #3
    1910:	4c176891 	ldcmi	8, cr6, [r7], {145}	; 0x91
    1914:	ac000133 	stfges	f0, [r0], {51}	; 0x33
    1918:	ad000000 	stcge	0, cr0, [r0, #-0]
    191c:	12000007 	andne	r0, r0, #7
    1920:	00000366 	andeq	r0, r0, r6, ror #6
    1924:	c705b501 	strgt	fp, [r5, -r1, lsl #10]
    1928:	02000007 	andeq	r0, r0, #7
    192c:	13006c91 	movwne	r6, #3217	; 0xc91
    1930:	000133f8 	strdeq	r3, [r1], -r8
    1934:	00000130 	andeq	r0, r0, r0, lsr r1
    1938:	0003bd12 	andeq	fp, r3, r2, lsl sp
    193c:	05d60100 	ldrbeq	r0, [r6, #256]	; 0x100
    1940:	000000a2 	andeq	r0, r0, r2, lsr #1
    1944:	00649102 	rsbeq	r9, r4, r2, lsl #2
    1948:	ae040600 	cfmadd32ge	mvax0, mvfx0, mvfx4, mvfx0
    194c:	14000001 	strne	r0, [r0], #-1
    1950:	00000dc1 	andeq	r0, r0, r1, asr #27
    1954:	6405f601 	strvs	pc, [r5], #-1537	; 0xfffff9ff
    1958:	84000135 	strhi	r0, [r0], #-309	; 0xfffffecb
    195c:	01000000 	mrseq	r0, (UNDEF: 0)
    1960:	0008119c 	muleq	r8, ip, r1
    1964:	0d241100 	stfeqs	f1, [r4, #-0]
    1968:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    196c:	0001b905 	andeq	fp, r1, r5, lsl #18
    1970:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1974:	000b8611 	andeq	r8, fp, r1, lsl r6
    1978:	05f60100 	ldrbeq	r0, [r6, #256]!	; 0x100
    197c:	000000ad 	andeq	r0, r0, sp, lsr #1
    1980:	12609102 	rsbne	r9, r0, #-2147483648	; 0x80000000
    1984:	00000d92 	muleq	r0, r2, sp
    1988:	a805f801 	stmdage	r5, {r0, fp, ip, sp, lr, pc}
    198c:	02000003 	andeq	r0, r0, #3
    1990:	10006c91 	mulne	r0, r1, ip
    1994:	0000110d 	andeq	r1, r0, sp, lsl #2
    1998:	ad061001 	stcge	0, cr1, [r6, #-4]
    199c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    19a0:	8c000135 	stfhis	f0, [r0], {53}	; 0x35
    19a4:	01000000 	mrseq	r0, (UNDEF: 0)
    19a8:	0008599c 	muleq	r8, ip, r9
    19ac:	0d241100 	stfeqs	f1, [r4, #-0]
    19b0:	10010000 	andne	r0, r1, r0
    19b4:	0001b906 	andeq	fp, r1, r6, lsl #18
    19b8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    19bc:	000d9212 	andeq	r9, sp, r2, lsl r2
    19c0:	06120100 	ldreq	r0, [r2], -r0, lsl #2
    19c4:	000003a8 	andeq	r0, r0, r8, lsr #7
    19c8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    19cc:	0000094c 	andeq	r0, r0, ip, asr #18
    19d0:	ad061301 	stcge	3, cr1, [r6, #-4]
    19d4:	02000000 	andeq	r0, r0, #0
    19d8:	10006891 	mulne	r0, r1, r8
    19dc:	00000c12 	andeq	r0, r0, r2, lsl ip
    19e0:	41062d01 	tstmi	r6, r1, lsl #26
    19e4:	74000000 	strvc	r0, [r0], #-0
    19e8:	ac000136 	stfges	f0, [r0], {54}	; 0x36
    19ec:	01000000 	mrseq	r0, (UNDEF: 0)
    19f0:	0008b09c 	muleq	r8, ip, r0
    19f4:	0d241100 	stfeqs	f1, [r4, #-0]
    19f8:	2d010000 	stccs	0, cr0, [r1, #-0]
    19fc:	0001b906 	andeq	fp, r1, r6, lsl #18
    1a00:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1a04:	000d2a11 	andeq	r2, sp, r1, lsl sl
    1a08:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    1a0c:	00000076 	andeq	r0, r0, r6, ror r0
    1a10:	12609102 	rsbne	r9, r0, #-2147483648	; 0x80000000
    1a14:	00000d92 	muleq	r0, r2, sp
    1a18:	a8062f01 	stmdage	r6, {r0, r8, r9, sl, fp, sp}
    1a1c:	02000003 	andeq	r0, r0, #3
    1a20:	4c126c91 	ldcmi	12, cr6, [r2], {145}	; 0x91
    1a24:	01000009 	tsteq	r0, r9
    1a28:	00410630 	subeq	r0, r1, r0, lsr r6
    1a2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1a30:	3a140068 	bcc	501bd8 <mailbuffer+0x4c6ae8>
    1a34:	0100000e 	tsteq	r0, lr
    1a38:	3720064b 	strcc	r0, [r0, -fp, asr #12]!
    1a3c:	01300001 	teqeq	r0, r1
    1a40:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a44:	000008e0 	andeq	r0, r0, r0, ror #17
    1a48:	0137b813 	teqeq	r7, r3, lsl r8
    1a4c:	00007c00 	andeq	r7, r0, r0, lsl #24
    1a50:	04521200 	ldrbeq	r1, [r2], #-512	; 0xfffffe00
    1a54:	7c010000 	stcvc	0, cr0, [r1], {-0}
    1a58:	0008e006 	andeq	lr, r8, r6
    1a5c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a60:	c70d0000 	strgt	r0, [sp, -r0]
    1a64:	14000007 	strne	r0, [r0], #-7
    1a68:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1a6c:	50068701 	andpl	r8, r6, r1, lsl #14
    1a70:	cc000138 	stfgts	f0, [r0], {56}	; 0x38
    1a74:	01000000 	mrseq	r0, (UNDEF: 0)
    1a78:	0009299c 	muleq	r9, ip, r9
    1a7c:	05b61100 	ldreq	r1, [r6, #256]!	; 0x100
    1a80:	87010000 	strhi	r0, [r1, -r0]
    1a84:	00092906 	andeq	r2, r9, r6, lsl #18
    1a88:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1a8c:	00112911 	andseq	r2, r1, r1, lsl r9
    1a90:	06870100 	streq	r0, [r7], r0, lsl #2
    1a94:	000000a2 	andeq	r0, r0, r2, lsr #1
    1a98:	12609102 	rsbne	r9, r0, #-2147483648	; 0x80000000
    1a9c:	000005d5 	ldrdeq	r0, [r0], -r5
    1aa0:	a2068901 	andge	r8, r6, #16384	; 0x4000
    1aa4:	02000000 	andeq	r0, r0, #0
    1aa8:	0d006c91 	stceq	12, cr6, [r0, #-580]	; 0xfffffdbc
    1aac:	0000092e 	andeq	r0, r0, lr, lsr #18
    1ab0:	09340406 	ldmdbeq	r4!, {r1, r2, sl}
    1ab4:	ae0d0000 	cdpge	0, 0, cr0, cr13, cr0, {0}
    1ab8:	10000001 	andne	r0, r0, r1
    1abc:	00000f5a 	andeq	r0, r0, sl, asr pc
    1ac0:	4106d901 	tstmi	r6, r1, lsl #18
    1ac4:	1c000000 	stcne	0, cr0, [r0], {-0}
    1ac8:	44000139 	strmi	r0, [r0], #-313	; 0xfffffec7
    1acc:	01000001 	tsteq	r0, r1
    1ad0:	0009819c 	muleq	r9, ip, r1
    1ad4:	05b61100 	ldreq	r1, [r6, #256]!	; 0x100
    1ad8:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    1adc:	00092906 	andeq	r2, r9, r6, lsl #18
    1ae0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1ae4:	000f2812 	andeq	r2, pc, r2, lsl r8	; <UNPREDICTABLE>
    1ae8:	06db0100 	ldrbeq	r0, [fp], r0, lsl #2
    1aec:	000003a8 	andeq	r0, r0, r8, lsr #7
    1af0:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    1af4:	0000094c 	andeq	r0, r0, ip, asr #18
    1af8:	4106dc01 	tstmi	r6, r1, lsl #24
    1afc:	02000000 	andeq	r0, r0, #0
    1b00:	14006c91 	strne	r6, [r0], #-3217	; 0xfffff36f
    1b04:	00001173 	andeq	r1, r0, r3, ror r1
    1b08:	60070c01 	andvs	r0, r7, r1, lsl #24
    1b0c:	6c00013a 	stfvss	f0, [r0], {58}	; 0x3a
    1b10:	01000000 	mrseq	r0, (UNDEF: 0)
    1b14:	0009a79c 	muleq	r9, ip, r7
    1b18:	0bd51100 	bleq	ff545f20 <_estack+0xf7535f20>
    1b1c:	0c010000 	stceq	0, cr0, [r1], {-0}
    1b20:	0009a707 	andeq	sl, r9, r7, lsl #14
    1b24:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1b28:	09ac0d00 	stmibeq	ip!, {r8, sl, fp}
    1b2c:	04060000 	streq	r0, [r6], #-0
    1b30:	000001e9 	andeq	r0, r0, r9, ror #3
    1b34:	00104f10 	andseq	r4, r0, r0, lsl pc
    1b38:	07140100 	ldreq	r0, [r4, -r0, lsl #2]
    1b3c:	00000041 	andeq	r0, r0, r1, asr #32
    1b40:	00013acc 	andeq	r3, r1, ip, asr #21
    1b44:	0000012c 	andeq	r0, r0, ip, lsr #2
    1b48:	09fa9c01 	ldmibeq	sl!, {r0, sl, fp, ip, pc}^
    1b4c:	d5110000 	ldrle	r0, [r1, #-0]
    1b50:	0100000b 	tsteq	r0, fp
    1b54:	09a70714 	stmibeq	r7!, {r2, r4, r8, r9, sl}
    1b58:	91020000 	mrsls	r0, (UNDEF: 2)
    1b5c:	11281164 	teqne	r8, r4, ror #2
    1b60:	14010000 	strne	r0, [r1], #-0
    1b64:	00044507 	andeq	r4, r4, r7, lsl #10
    1b68:	60910200 	addsvs	r0, r1, r0, lsl #4
    1b6c:	00094c12 	andeq	r4, r9, r2, lsl ip
    1b70:	07160100 	ldreq	r0, [r6, -r0, lsl #2]
    1b74:	00000041 	andeq	r0, r0, r1, asr #32
    1b78:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1b7c:	000fa615 	andeq	sl, pc, r5, lsl r6	; <UNPREDICTABLE>
    1b80:	07420100 	strbeq	r0, [r2, -r0, lsl #2]
    1b84:	00013bf8 	strdeq	r3, [r1], -r8
    1b88:	00000048 	andeq	r0, r0, r8, asr #32
    1b8c:	2e189c01 	cdpcs	12, 1, cr9, cr8, cr1, {0}
    1b90:	0100000e 	tsteq	r0, lr
    1b94:	3c400776 	mcrrcc	7, 7, r0, r0, cr6
    1b98:	00440001 	subeq	r0, r4, r1
    1b9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ba0:	00000a32 	andeq	r0, r0, r2, lsr sl
    1ba4:	0001dd11 	andeq	sp, r1, r1, lsl sp
    1ba8:	07760100 	ldrbeq	r0, [r6, -r0, lsl #2]!
    1bac:	00000076 	andeq	r0, r0, r6, ror r0
    1bb0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1bb4:	000b3918 	andeq	r3, fp, r8, lsl r9
    1bb8:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    1bbc:	00013c84 	andeq	r3, r1, r4, lsl #25
    1bc0:	000000e8 	andeq	r0, r0, r8, ror #1
    1bc4:	0a949c01 	beq	fe528bd0 <_estack+0xf6518bd0>
    1bc8:	91110000 	tstls	r1, r0
    1bcc:	0100000d 	tsteq	r0, sp
    1bd0:	03a807b7 			; <UNDEFINED> instruction: 0x03a807b7
    1bd4:	91020000 	mrsls	r0, (UNDEF: 2)
    1bd8:	115a116c 	cmpne	sl, ip, ror #2
    1bdc:	b7010000 	strlt	r0, [r1, -r0]
    1be0:	00023007 	andeq	r3, r2, r7
    1be4:	68910200 	ldmvs	r1, {r9}
    1be8:	00057811 	andeq	r7, r5, r1, lsl r8
    1bec:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    1bf0:	00000048 	andeq	r0, r0, r8, asr #32
    1bf4:	11649102 	cmnne	r4, r2, lsl #2
    1bf8:	00000e90 	muleq	r0, r0, lr
    1bfc:	9807b701 	stmdals	r7, {r0, r8, r9, sl, ip, sp, pc}
    1c00:	02000003 	andeq	r0, r0, #3
    1c04:	7c116091 	ldcvc	0, cr6, [r1], {145}	; 0x91
    1c08:	0100000c 	tsteq	r0, ip
    1c0c:	003a07b7 	ldrhteq	r0, [sl], -r7
    1c10:	91020000 	mrsls	r0, (UNDEF: 2)
    1c14:	a6180000 	ldrge	r0, [r8], -r0
    1c18:	01000011 	tsteq	r0, r1, lsl r0
    1c1c:	3d6c080d 	stclcc	8, cr0, [ip, #-52]!	; 0xffffffcc
    1c20:	00e80001 	rsceq	r0, r8, r1
    1c24:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c28:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
    1c2c:	00057812 	andeq	r7, r5, r2, lsl r8
    1c30:	080f0100 	stmdaeq	pc, {r8}	; <UNPREDICTABLE>
    1c34:	00000048 	andeq	r0, r0, r8, asr #32
    1c38:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1c3c:	000fd718 	andeq	sp, pc, r8, lsl r7	; <UNPREDICTABLE>
    1c40:	082d0100 	stmdaeq	sp!, {r8}
    1c44:	00013e54 	andeq	r3, r1, r4, asr lr
    1c48:	000000f4 	strdeq	r0, [r0], -r4
    1c4c:	0b039c01 	bleq	e8c58 <mailbuffer+0xadb68>
    1c50:	78130000 	ldmdavc	r3, {}	; <UNPREDICTABLE>
    1c54:	b400013e 	strlt	r0, [r0], #-318	; 0xfffffec2
    1c58:	12000000 	andne	r0, r0, #0
    1c5c:	00000bdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1c60:	41083101 	tstmi	r8, r1, lsl #2
    1c64:	02000000 	andeq	r0, r0, #0
    1c68:	c0136c91 	mulsgt	r3, r1, ip
    1c6c:	6c00013e 	stfvss	f0, [r0], {62}	; 0x3e
    1c70:	12000000 	andne	r0, r0, #0
    1c74:	00000d91 	muleq	r0, r1, sp
    1c78:	a8083d01 	stmdage	r8, {r0, r8, sl, fp, ip, sp}
    1c7c:	02000003 	andeq	r0, r0, #3
    1c80:	00006891 	muleq	r0, r1, r8
    1c84:	10121800 	andsne	r1, r2, r0, lsl #16
    1c88:	50010000 	andpl	r0, r1, r0
    1c8c:	013f4808 	teqeq	pc, r8, lsl #16
    1c90:	0000ec00 	andeq	lr, r0, r0, lsl #24
    1c94:	299c0100 	ldmibcs	ip, {r8}
    1c98:	1100000b 	tstne	r0, fp
    1c9c:	000005d5 	ldrdeq	r0, [r0], -r5
    1ca0:	a2085001 	andge	r5, r8, #1
    1ca4:	02000000 	andeq	r0, r0, #0
    1ca8:	19006c91 	stmdbne	r0, {r0, r4, r7, sl, fp, sp, lr}
    1cac:	00000c65 	andeq	r0, r0, r5, ror #24
    1cb0:	a8086a01 	stmdage	r8, {r0, r9, fp, sp, lr}
    1cb4:	34000003 	strcc	r0, [r0], #-3
    1cb8:	e4000140 	str	r0, [r0], #-320	; 0xfffffec0
    1cbc:	01000000 	mrseq	r0, (UNDEF: 0)
    1cc0:	000b719c 	muleq	fp, ip, r1
    1cc4:	0c7c1100 	ldfeqe	f1, [ip], #-0
    1cc8:	6a010000 	bvs	41cd0 <mailbuffer+0x6be0>
    1ccc:	00003a08 	andeq	r3, r0, r8, lsl #20
    1cd0:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    1cd4:	000c8911 	andeq	r8, ip, r1, lsl r9
    1cd8:	086a0100 	stmdaeq	sl!, {r8}^
    1cdc:	00000240 	andeq	r0, r0, r0, asr #4
    1ce0:	12609102 	rsbne	r9, r0, #-2147483648	; 0x80000000
    1ce4:	00000c43 	andeq	r0, r0, r3, asr #24
    1ce8:	a8086c01 	stmdage	r8, {r0, sl, fp, sp, lr}
    1cec:	02000003 	andeq	r0, r0, #3
    1cf0:	18006c91 	stmdane	r0, {r0, r4, r7, sl, fp, sp, lr}
    1cf4:	00000e14 	andeq	r0, r0, r4, lsl lr
    1cf8:	18092901 	stmdane	r9, {r0, r8, fp, sp}
    1cfc:	5c000141 	stfpls	f0, [r0], {65}	; 0x41
    1d00:	01000000 	mrseq	r0, (UNDEF: 0)
    1d04:	000b979c 	muleq	fp, ip, r7
    1d08:	0d911100 	ldfeqs	f1, [r1]
    1d0c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    1d10:	0003a809 	andeq	sl, r3, r9, lsl #16
    1d14:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1d18:	01ae0e00 			; <UNDEFINED> instruction: 0x01ae0e00
    1d1c:	0ba70000 	bleq	fe9c1d24 <_estack+0xf69b1d24>
    1d20:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
    1d24:	04000000 	streq	r0, [r0], #-0
    1d28:	10711a00 	rsbsne	r1, r1, r0, lsl #20
    1d2c:	a3010000 	movwge	r0, #4096	; 0x1000
    1d30:	00000b97 	muleq	r0, r7, fp
    1d34:	0d280305 	stceq	3, cr0, [r8, #-20]!	; 0xffffffec
    1d38:	9a1a0003 	bls	681d4c <mailbuffer+0x646c5c>
    1d3c:	01000010 	tsteq	r0, r0, lsl r0
    1d40:	0001aea4 	andeq	sl, r1, r4, lsr #29
    1d44:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    1d48:	1a00030d 	bne	2984 <_start-0x567c>
    1d4c:	000010ac 	andeq	r1, r0, ip, lsr #1
    1d50:	01aea501 			; <UNDEFINED> instruction: 0x01aea501
    1d54:	03050000 	movweq	r0, #20480	; 0x5000
    1d58:	00030da0 	andeq	r0, r3, r0, lsr #27
    1d5c:	0011481a 	andseq	r4, r1, sl, lsl r8
    1d60:	eba60100 	bl	fe982168 <_estack+0xf6972168>
    1d64:	0500000b 	streq	r0, [r0, #-11]
    1d68:	030db403 	movweq	fp, #54275	; 0xd403
    1d6c:	07c70c00 	strbeq	r0, [r7, r0, lsl #24]
    1d70:	671a0000 	ldrvs	r0, [sl, -r0]
    1d74:	0100000e 	tsteq	r0, lr
    1d78:	000beba7 	andeq	lr, fp, r7, lsr #23
    1d7c:	b8030500 	stmdalt	r3, {r8, sl}
    1d80:	1a00030d 	bne	29bc <_start-0x5644>
    1d84:	00000e99 	muleq	r0, r9, lr
    1d88:	01aea801 			; <UNDEFINED> instruction: 0x01aea801
    1d8c:	03050000 	movweq	r0, #20480	; 0x5000
    1d90:	00030dbc 			; <UNDEFINED> instruction: 0x00030dbc
    1d94:	000eab1a 	andeq	sl, lr, sl, lsl fp
    1d98:	aeac0100 	fdvgee	f0, f4, f0
    1d9c:	05000001 	streq	r0, [r0, #-1]
    1da0:	030dd003 	movweq	sp, #53251	; 0xd003
    1da4:	0b771a00 	bleq	1dc85ac <mailbuffer+0x1d8d4bc>
    1da8:	ad010000 	stcge	0, cr0, [r1, #-0]
    1dac:	00000199 	muleq	r0, r9, r1
    1db0:	0de40305 	stcleq	3, cr0, [r4, #20]!
    1db4:	951a0003 	ldrls	r0, [sl, #-3]
    1db8:	0100000b 	tsteq	r0, fp
    1dbc:	0001aeb3 			; <UNDEFINED> instruction: 0x0001aeb3
    1dc0:	e8030500 	stmda	r3, {r8, sl}
    1dc4:	1a00030d 	bne	2a00 <_start-0x5600>
    1dc8:	00000b60 	andeq	r0, r0, r0, ror #22
    1dcc:	0199be01 	orrseq	fp, r9, r1, lsl #28
    1dd0:	03050000 	movweq	r0, #20480	; 0x5000
    1dd4:	00030dfc 	strdeq	r0, [r3], -ip
    1dd8:	000d6e1a 	andeq	r6, sp, sl, lsl lr
    1ddc:	67bf0100 	ldrvs	r0, [pc, r0, lsl #2]!
    1de0:	0500000c 	streq	r0, [r0, #-12]
    1de4:	030e0003 	movweq	r0, #57347	; 0xe003
    1de8:	00a20c00 	adceq	r0, r2, r0, lsl #24
    1dec:	551a0000 	ldrpl	r0, [sl, #-0]
    1df0:	0100000e 	tsteq	r0, lr
    1df4:	000048c0 	andeq	r4, r0, r0, asr #17
    1df8:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    1dfc:	1a00030e 	bne	2a3c <_start-0x55c4>
    1e00:	00000ee4 	andeq	r0, r0, r4, ror #29
    1e04:	0199c101 	orrseq	ip, r9, r1, lsl #2
    1e08:	03050000 	movweq	r0, #20480	; 0x5000
    1e0c:	00030e08 	andeq	r0, r3, r8, lsl #28
    1e10:	000f731a 	andeq	r7, pc, sl, lsl r3	; <UNPREDICTABLE>
    1e14:	9fc20100 	svcls	0x00c20100
    1e18:	0500000c 	streq	r0, [r0, #-12]
    1e1c:	030e0c03 	movweq	r0, #60419	; 0xec03
    1e20:	00410c00 	subeq	r0, r1, r0, lsl #24
    1e24:	361a0000 	ldrcc	r0, [sl], -r0
    1e28:	0100000d 	tsteq	r0, sp
    1e2c:	000199c3 	andeq	r9, r1, r3, asr #19
    1e30:	10030500 	andne	r0, r3, r0, lsl #10
    1e34:	1a00030e 	bne	2a74 <_start-0x558c>
    1e38:	000010e5 	andeq	r1, r0, r5, ror #1
    1e3c:	0199c401 	orrseq	ip, r9, r1, lsl #8
    1e40:	03050000 	movweq	r0, #20480	; 0x5000
    1e44:	00030e14 	andeq	r0, r3, r4, lsl lr
    1e48:	000e211a 	andeq	r2, lr, sl, lsl r1
    1e4c:	9fc50100 	svcls	0x00c50100
    1e50:	0500000c 	streq	r0, [r0, #-12]
    1e54:	030e1803 	movweq	r1, #59395	; 0xe803
    1e58:	10be1a00 	adcsne	r1, lr, r0, lsl #20
    1e5c:	c6010000 	strgt	r0, [r1], -r0
    1e60:	00000c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1e64:	0e1c0305 	cdpeq	3, 1, cr0, cr12, cr5, {0}
    1e68:	641a0003 	ldrvs	r0, [sl], #-3
    1e6c:	01000010 	tsteq	r0, r0, lsl r0
    1e70:	000048c7 	andeq	r4, r0, r7, asr #17
    1e74:	20030500 	andcs	r0, r3, r0, lsl #10
    1e78:	1a00030e 	bne	2ab8 <_start-0x5548>
    1e7c:	00000ecf 	andeq	r0, r0, pc, asr #29
    1e80:	00a2c801 	adceq	ip, r2, r1, lsl #16
    1e84:	03050000 	movweq	r0, #20480	; 0x5000
    1e88:	00030b54 	andeq	r0, r3, r4, asr fp
    1e8c:	00030a1b 	andeq	r0, r3, fp, lsl sl
    1e90:	1b9f0100 	blne	fe7c2298 <_estack+0xf67b2298>
    1e94:	0500000d 	streq	r0, [r0, #-13]
    1e98:	030d2403 	movweq	r2, #54275	; 0xd403
    1e9c:	03a80c00 			; <UNDEFINED> instruction: 0x03a80c00
    1ea0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ea4:	04000003 	streq	r0, [r0], #-3
    1ea8:	0006bf00 	andeq	fp, r6, r0, lsl #30
    1eac:	19010400 	stmdbne	r1, {sl}
    1eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    1eb4:	0000123f 	andeq	r1, r0, pc, lsr r2
    1eb8:	00014174 	andeq	r4, r1, r4, ror r1
    1ebc:	000005ac 	andeq	r0, r0, ip, lsr #11
    1ec0:	00000d86 	andeq	r0, r0, r6, lsl #27
    1ec4:	00131002 	andseq	r1, r3, r2
    1ec8:	2c0b0200 	sfmcs	f0, 4, [fp], {-0}
    1ecc:	03000000 	movweq	r0, #0
    1ed0:	00003204 	andeq	r3, r0, r4, lsl #4
    1ed4:	00420400 	subeq	r0, r2, r0, lsl #8
    1ed8:	42050000 	andmi	r0, r5, #0
    1edc:	05000000 	streq	r0, [r0, #-0]
    1ee0:	00000049 	andeq	r0, r0, r9, asr #32
    1ee4:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
    1ee8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1eec:	08080407 	stmdaeq	r8, {r0, r1, r2, sl}
    1ef0:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    1ef4:	91090000 	mrsls	r0, (UNDEF: 9)
    1ef8:	02000012 	andeq	r0, r0, #18
    1efc:	0000210e 	andeq	r2, r0, lr, lsl #2
    1f00:	1d090000 	stcne	0, cr0, [r9, #-0]
    1f04:	02000001 	andeq	r0, r0, #1
    1f08:	0000490f 	andeq	r4, r0, pc, lsl #18
    1f0c:	02000400 	andeq	r0, r0, #0, 8
    1f10:	00001325 	andeq	r1, r0, r5, lsr #6
    1f14:	004b1002 	subeq	r1, fp, r2
    1f18:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    1f1c:	00f80c01 	rscseq	r0, r8, r1, lsl #24
    1f20:	67090000 	strvs	r0, [r9, -r0]
    1f24:	01000013 	tsteq	r0, r3, lsl r0
    1f28:	0000f80d 	andeq	pc, r0, sp, lsl #16
    1f2c:	bd090000 	stclt	0, cr0, [r9, #-0]
    1f30:	01000011 	tsteq	r0, r1, lsl r0
    1f34:	0000f80e 	andeq	pc, r0, lr, lsl #16
    1f38:	c6090400 	strgt	r0, [r9], -r0, lsl #8
    1f3c:	01000011 	tsteq	r0, r1, lsl r0
    1f40:	0000f80f 	andeq	pc, r0, pc, lsl #16
    1f44:	ee090800 	cdp	8, 0, cr0, cr9, cr0, {0}
    1f48:	01000011 	tsteq	r0, r1, lsl r0
    1f4c:	0000f810 	andeq	pc, r0, r0, lsl r8	; <UNPREDICTABLE>
    1f50:	7c090c00 	stcvc	12, cr0, [r9], {-0}
    1f54:	01000013 	tsteq	r0, r3, lsl r0
    1f58:	0000f811 	andeq	pc, r0, r1, lsl r8	; <UNPREDICTABLE>
    1f5c:	27091000 	strcs	r1, [r9, -r0]
    1f60:	01000012 	tsteq	r0, r2, lsl r0
    1f64:	0000f812 	andeq	pc, r0, r2, lsl r8	; <UNPREDICTABLE>
    1f68:	70091400 	andvc	r1, r9, r0, lsl #8
    1f6c:	01000013 	tsteq	r0, r3, lsl r0
    1f70:	0000f813 	andeq	pc, r0, r3, lsl r8	; <UNPREDICTABLE>
    1f74:	e0091800 	and	r1, r9, r0, lsl #16
    1f78:	01000012 	tsteq	r0, r2, lsl r0
    1f7c:	0000f814 	andeq	pc, r0, r4, lsl r8	; <UNPREDICTABLE>
    1f80:	e9091c00 	stmdb	r9, {sl, fp, ip}
    1f84:	01000012 	tsteq	r0, r2, lsl r0
    1f88:	0000f815 	andeq	pc, r0, r5, lsl r8	; <UNPREDICTABLE>
    1f8c:	cf092000 	svcgt	0x00092000
    1f90:	01000011 	tsteq	r0, r1, lsl r0
    1f94:	0000f816 	andeq	pc, r0, r6, lsl r8	; <UNPREDICTABLE>
    1f98:	0a002400 	beq	afa0 <__module_entries_end+0x2ec0>
    1f9c:	07180704 	ldreq	r0, [r8, -r4, lsl #14]
    1fa0:	dc020000 	stcle	0, cr0, [r2], {-0}
    1fa4:	01000011 	tsteq	r0, r1, lsl r0
    1fa8:	00007717 	andeq	r7, r0, r7, lsl r7
    1fac:	13470b00 	movtne	r0, #31488	; 0x7b00
    1fb0:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1fb4:	00014174 	andeq	r4, r1, r4, ror r1
    1fb8:	0000003c 	andeq	r0, r0, ip, lsr r0
    1fbc:	340b9c01 	strcc	r9, [fp], #-3073	; 0xfffff3ff
    1fc0:	01000012 	tsteq	r0, r2, lsl r0
    1fc4:	0141b022 	cmpeq	r1, r2, lsr #32
    1fc8:	00003c00 	andeq	r3, r0, r0, lsl #24
    1fcc:	0c9c0100 	ldfeqs	f0, [ip], {0}
    1fd0:	000012d5 	ldrdeq	r1, [r0], -r5
    1fd4:	41ec3001 	mvnmi	r3, r1
    1fd8:	01000001 	tsteq	r0, r1
    1fdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fe0:	00000182 	andeq	r0, r0, r2, lsl #3
    1fe4:	00120e0d 	andseq	r0, r2, sp, lsl #28
    1fe8:	f8310100 			; <UNDEFINED> instruction: 0xf8310100
    1fec:	01000000 	mrseq	r0, (UNDEF: 0)
    1ff0:	121d0d54 	andsne	r0, sp, #84, 26	; 0x1500
    1ff4:	32010000 	andcc	r0, r1, #0
    1ff8:	000000f8 	strdeq	r0, [r0], -r8
    1ffc:	800e5501 	andhi	r5, lr, r1, lsl #10
    2000:	14000142 	strne	r0, [r0], #-322	; 0xfffffebe
    2004:	0d000000 	stceq	0, cr0, [r0, #-0]
    2008:	000012cd 	andeq	r1, r0, sp, asr #5
    200c:	00f84f01 	rscseq	r4, r8, r1, lsl #30
    2010:	91020000 	mrsls	r0, (UNDEF: 2)
    2014:	13510d60 	cmpne	r1, #96, 26	; 0x1800
    2018:	4f010000 	svcmi	0x00010000
    201c:	000000f8 	strdeq	r0, [r0], -r8
    2020:	00649102 	rsbeq	r9, r4, r2, lsl #2
    2024:	13040f00 	movwne	r0, #20224	; 0x4f00
    2028:	55010000 	strpl	r0, [r1, #-0]
    202c:	000142ec 	andeq	r4, r1, ip, ror #5
    2030:	00000048 	andeq	r0, r0, r8, asr #32
    2034:	01b49c01 			; <UNDEFINED> instruction: 0x01b49c01
    2038:	00100000 	andseq	r0, r0, r0
    203c:	01000000 	mrseq	r0, (UNDEF: 0)
    2040:	00004255 	andeq	r4, r0, r5, asr r2
    2044:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2048:	00011d10 	andeq	r1, r1, r0, lsl sp
    204c:	49550100 	ldmdbmi	r5, {r8}^
    2050:	02000000 	andeq	r0, r0, #0
    2054:	11006891 			; <UNDEFINED> instruction: 0x11006891
    2058:	000011f6 	strdeq	r1, [r0], -r6
    205c:	00425d01 	subeq	r5, r2, r1, lsl #26
    2060:	43340000 	teqmi	r4, #0
    2064:	00a40001 	adceq	r0, r4, r1
    2068:	9c010000 	stcls	0, cr0, [r1], {-0}
    206c:	000001da 	ldrdeq	r0, [r0], -sl
    2070:	01006912 	tsteq	r0, r2, lsl r9
    2074:	0000425e 	andeq	r4, r0, lr, asr r2
    2078:	6c910200 	lfmvs	f0, 4, [r1], {0}
    207c:	12f21300 	rscsne	r1, r2, #0, 6
    2080:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    2084:	00000042 	andeq	r0, r0, r2, asr #32
    2088:	000143d8 	ldrdeq	r4, [r1], -r8
    208c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2090:	021e9c01 	andseq	r9, lr, #256	; 0x100
    2094:	00100000 	andseq	r0, r0, r0
    2098:	01000000 	mrseq	r0, (UNDEF: 0)
    209c:	00004268 	andeq	r4, r0, r8, ror #4
    20a0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    20a4:	00129110 	andseq	r9, r2, r0, lsl r1
    20a8:	21680100 	cmncs	r8, r0, lsl #2
    20ac:	02000000 	andeq	r0, r0, #0
    20b0:	1d106891 	ldcne	8, cr6, [r0, #-580]	; 0xfffffdbc
    20b4:	01000001 	tsteq	r0, r1
    20b8:	00004968 	andeq	r4, r0, r8, ror #18
    20bc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    20c0:	13571300 	cmpne	r7, #0, 6
    20c4:	75010000 	strvc	r0, [r1, #-0]
    20c8:	00000042 	andeq	r0, r0, r2, asr #32
    20cc:	00014488 	andeq	r4, r1, r8, lsl #9
    20d0:	00000104 	andeq	r0, r0, r4, lsl #2
    20d4:	02549c01 	subseq	r9, r4, #256	; 0x100
    20d8:	00100000 	andseq	r0, r0, r0
    20dc:	01000000 	mrseq	r0, (UNDEF: 0)
    20e0:	00004275 	andeq	r4, r0, r5, ror r2
    20e4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    20e8:	00122f0d 	andseq	r2, r2, sp, lsl #30
    20ec:	54770100 	ldrbtpl	r0, [r7], #-256	; 0xffffff00
    20f0:	02000002 	andeq	r0, r0, #2
    20f4:	0a006c91 	beq	1d340 <DWHCITransferStageDataSetSplitComplete+0x50>
    20f8:	071d0704 	ldreq	r0, [sp, -r4, lsl #14]
    20fc:	36130000 	ldrcc	r0, [r3], -r0
    2100:	01000013 	tsteq	r0, r3, lsl r0
    2104:	00004287 	andeq	r4, r0, r7, lsl #5
    2108:	01458c00 	cmpeq	r5, r0, lsl #24
    210c:	00010400 	andeq	r0, r1, r0, lsl #8
    2110:	919c0100 	orrsls	r0, ip, r0, lsl #2
    2114:	10000002 	andne	r0, r0, r2
    2118:	00000000 	andeq	r0, r0, r0
    211c:	00428701 	subeq	r8, r2, r1, lsl #14
    2120:	91020000 	mrsls	r0, (UNDEF: 2)
    2124:	122f0d64 	eorne	r0, pc, #100, 26	; 0x1900
    2128:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    212c:	00000254 	andeq	r0, r0, r4, asr r2
    2130:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    2134:	0012bc14 	andseq	fp, r2, r4, lsl ip
    2138:	42990100 	addsmi	r0, r9, #0, 2
    213c:	90000000 	andls	r0, r0, r0
    2140:	48000146 	stmdami	r0, {r1, r2, r6, r8}
    2144:	01000000 	mrseq	r0, (UNDEF: 0)
    2148:	129c149c 	addsne	r1, ip, #156, 8	; 0x9c000000
    214c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    2150:	00000042 	andeq	r0, r0, r2, asr #32
    2154:	000146d8 	ldrdeq	r4, [r1], -r8
    2158:	00000048 	andeq	r0, r0, r8, asr #32
    215c:	6c159c01 	ldcvs	12, cr9, [r5], {1}
    2160:	cb000000 	blgt	2168 <_start-0x5e98>
    2164:	16000002 	strne	r0, [r0], -r2
    2168:	000002cb 	andeq	r0, r0, fp, asr #5
    216c:	040a0047 	streq	r0, [sl], #-71	; 0xffffffb9
    2170:	0001d407 	andeq	sp, r1, r7, lsl #8
    2174:	12ae0d00 	adcne	r0, lr, #0, 26
    2178:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    217c:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    2180:	0e240305 	cdpeq	3, 2, cr0, cr4, cr5, {0}
    2184:	f00d0003 			; <UNDEFINED> instruction: 0xf00d0003
    2188:	01000045 	tsteq	r0, r5, asr #32
    218c:	0002f419 	andeq	pc, r2, r9, lsl r4	; <UNPREDICTABLE>
    2190:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    2194:	170002db 			; <UNDEFINED> instruction: 0x170002db
    2198:	000002f9 	strdeq	r0, [r0], -r9
    219c:	02ff0403 	rscseq	r0, pc, #50331648	; 0x3000000
    21a0:	ff180000 			; <UNDEFINED> instruction: 0xff180000
    21a4:	00000000 	andeq	r0, r0, r0
    21a8:	000003ef 	andeq	r0, r0, pc, ror #7
    21ac:	08180004 	ldmdaeq	r8, {r2}
    21b0:	01040000 	mrseq	r0, (UNDEF: 4)
    21b4:	00000019 	andeq	r0, r0, r9, lsl r0
    21b8:	00139d01 	andseq	r9, r3, r1, lsl #26
    21bc:	01472000 	mrseq	r2, (UNDEF: 71)
    21c0:	00073400 	andeq	r3, r7, r0, lsl #8
    21c4:	000eab00 	andeq	sl, lr, r0, lsl #22
    21c8:	14740200 	ldrbtne	r0, [r4], #-512	; 0xfffffe00
    21cc:	02010000 	andeq	r0, r1, #0
    21d0:	00005805 	andeq	r5, r0, r5, lsl #16
    21d4:	14c10300 	strbne	r0, [r1], #768	; 0x300
    21d8:	03000000 	movweq	r0, #0
    21dc:	000014dc 	ldrdeq	r1, [r0], -ip
    21e0:	15920301 	ldrne	r0, [r2, #769]	; 0x301
    21e4:	03020000 	movweq	r0, #8192	; 0x2000
    21e8:	000014b5 			; <UNDEFINED> instruction: 0x000014b5
    21ec:	14ea0303 	strbtne	r0, [sl], #771	; 0x303
    21f0:	03040000 	movweq	r0, #16384	; 0x4000
    21f4:	0000142d 	andeq	r1, r0, sp, lsr #8
    21f8:	14410305 	strbne	r0, [r1], #-773	; 0xfffffcfb
    21fc:	00060000 	andeq	r0, r6, r0
    2200:	00149e02 	andseq	r9, r4, r2, lsl #28
    2204:	18020100 	stmdane	r2, {r8}
    2208:	00000071 	andeq	r0, r0, r1, ror r0
    220c:	0014ad03 	andseq	sl, r4, r3, lsl #26
    2210:	bf030000 	svclt	0x00030000
    2214:	01000015 	tsteq	r0, r5, lsl r0
    2218:	01a00400 	lsleq	r0, r0, #8
    221c:	00019a08 	andeq	r9, r1, r8, lsl #20
    2220:	15280500 	strne	r0, [r8, #-1280]!	; 0xfffffb00
    2224:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    2228:	0000019a 	muleq	r0, sl, r1
    222c:	152f0500 	strne	r0, [pc, #-1280]!	; 1d34 <_start-0x62cc>
    2230:	0a010000 	beq	42238 <mailbuffer+0x7148>
    2234:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2238:	13970518 	orrsne	r0, r7, #24, 10	; 0x6000000
    223c:	0b010000 	bleq	42244 <mailbuffer+0x7154>
    2240:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2244:	153a051c 	ldrne	r0, [sl, #-1308]!	; 0xfffffae4
    2248:	0c010000 	stceq	0, cr0, [r1], {-0}
    224c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2250:	14210524 	strtne	r0, [r1], #-1316	; 0xfffffadc
    2254:	0d010000 	stceq	0, cr0, [r1, #-0]
    2258:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    225c:	15450528 	strbne	r0, [r5, #-1320]	; 0xfffffad8
    2260:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2264:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2268:	14f50530 	ldrbtne	r0, [r5], #1328	; 0x530
    226c:	0f010000 	svceq	0x00010000
    2270:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2274:	15500534 	ldrbne	r0, [r0, #-1332]	; 0xfffffacc
    2278:	10010000 	andne	r0, r1, r0
    227c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2280:	1509053c 	strne	r0, [r9, #-1340]	; 0xfffffac4
    2284:	11010000 	mrsne	r0, (UNDEF: 1)
    2288:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    228c:	155b0540 	ldrbne	r0, [fp, #-1344]	; 0xfffffac0
    2290:	12010000 	andne	r0, r1, #0
    2294:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2298:	15030548 	strne	r0, [r3, #-1352]	; 0xfffffab8
    229c:	13010000 	movwne	r0, #4096	; 0x1000
    22a0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    22a4:	1566054c 	strbne	r0, [r6, #-1356]!	; 0xfffffab4
    22a8:	14010000 	strne	r0, [r1], #-0
    22ac:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    22b0:	14a70554 	strtne	r0, [r7], #1364	; 0x554
    22b4:	15010000 	strne	r0, [r1, #-0]
    22b8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    22bc:	15710558 	ldrbne	r0, [r1, #-1368]!	; 0xfffffaa8
    22c0:	16010000 	strne	r0, [r1], -r0
    22c4:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    22c8:	14270560 	strtne	r0, [r7], #-1376	; 0xfffffaa0
    22cc:	17010000 	strne	r0, [r1, -r0]
    22d0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    22d4:	157c0564 	ldrbne	r0, [ip, #-1380]!	; 0xfffffa9c
    22d8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    22dc:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    22e0:	14cd056c 	strbne	r0, [sp], #1388	; 0x56c
    22e4:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    22e8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    22ec:	15870570 	strne	r0, [r7, #1392]	; 0x570
    22f0:	1a010000 	bne	422f8 <mailbuffer+0x7208>
    22f4:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    22f8:	14870578 	strne	r0, [r7], #1400	; 0x578
    22fc:	1b010000 	blne	42304 <mailbuffer+0x7214>
    2300:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2304:	15a9057c 	strne	r0, [r9, #1404]!	; 0x57c
    2308:	1c010000 	stcne	0, cr0, [r1], {-0}
    230c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2310:	14670584 	strbtne	r0, [r7], #-1412	; 0xfffffa7c
    2314:	1d010000 	stcne	0, cr0, [r1, #-0]
    2318:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    231c:	15b40588 	ldrne	r0, [r4, #1416]!	; 0x588
    2320:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    2324:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2328:	146e0590 	strbtne	r0, [lr], #-1424	; 0xfffffa70
    232c:	1f010000 	svcne	0x00010000
    2330:	000001c8 	andeq	r0, r0, r8, asr #3
    2334:	14d30594 	ldrbne	r0, [r3], #1428	; 0x594
    2338:	20010000 	andcs	r0, r1, r0
    233c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2340:	b1060098 	swplt	r0, r8, [r6]
    2344:	aa000001 	bge	2350 <_start-0x5cb0>
    2348:	07000001 	streq	r0, [r0, -r1]
    234c:	000001aa 	andeq	r0, r0, sl, lsr #3
    2350:	04080005 	streq	r0, [r8], #-5
    2354:	0001d407 	andeq	sp, r1, r7, lsl #8
    2358:	07040800 	streq	r0, [r4, -r0, lsl #16]
    235c:	00000718 	andeq	r0, r0, r8, lsl r7
    2360:	0001b106 	andeq	fp, r1, r6, lsl #2
    2364:	0001c800 	andeq	ip, r1, r0, lsl #16
    2368:	01aa0700 			; <UNDEFINED> instruction: 0x01aa0700
    236c:	00010000 	andeq	r0, r1, r0
    2370:	0001b106 	andeq	fp, r1, r6, lsl #2
    2374:	0001d800 	andeq	sp, r1, r0, lsl #16
    2378:	01aa0700 			; <UNDEFINED> instruction: 0x01aa0700
    237c:	00000000 	andeq	r0, r0, r0
    2380:	0013f209 	andseq	pc, r3, r9, lsl #4
    2384:	71220100 	teqvc	r2, r0, lsl #2
    2388:	0a000000 	beq	2390 <_start-0x5c70>
    238c:	0000148e 	andeq	r1, r0, lr, lsl #9
    2390:	47202701 	strmi	r2, [r0, -r1, lsl #14]!
    2394:	00f80001 	rscseq	r0, r8, r1
    2398:	9c010000 	stcls	0, cr0, [r1], {-0}
    239c:	0000023f 	andeq	r0, r0, pc, lsr r2
    23a0:	0014090b 	andseq	r0, r4, fp, lsl #18
    23a4:	3f270100 	svccc	0x00270100
    23a8:	02000002 	andeq	r0, r0, #2
    23ac:	fb0b5c91 	blx	2d95fa <mailbuffer+0x29e50a>
    23b0:	01000014 	tsteq	r0, r4, lsl r0
    23b4:	00023f27 	andeq	r3, r2, r7, lsr #30
    23b8:	58910200 	ldmpl	r1, {r9}
    23bc:	0015210c 	andseq	r2, r5, ip, lsl #2
    23c0:	46290100 	strtmi	r0, [r9], -r0, lsl #2
    23c4:	02000002 	andeq	r0, r0, #2
    23c8:	760d6c91 			; <UNDEFINED> instruction: 0x760d6c91
    23cc:	01006c61 	tsteq	r0, r1, ror #24
    23d0:	0001b12b 	andeq	fp, r1, fp, lsr #2
    23d4:	68910200 	ldmvs	r1, {r9}
    23d8:	0014040c 	andseq	r0, r4, ip, lsl #8
    23dc:	462d0100 	strtmi	r0, [sp], -r0, lsl #2
    23e0:	02000002 	andeq	r0, r0, #2
    23e4:	08006491 	stmdaeq	r0, {r0, r4, r7, sl, sp, lr}
    23e8:	071d0704 	ldreq	r0, [sp, -r4, lsl #14]
    23ec:	040e0000 	streq	r0, [lr], #-0
    23f0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    23f4:	14100a00 	ldrne	r0, [r0], #-2560	; 0xfffff600
    23f8:	33010000 	movwcc	r0, #4096	; 0x1000
    23fc:	00014818 	andeq	r4, r1, r8, lsl r8
    2400:	0000005c 	andeq	r0, r0, ip, asr r0
    2404:	027f9c01 	rsbseq	r9, pc, #256	; 0x100
    2408:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    240c:	01000014 	tsteq	r0, r4, lsl r0
    2410:	00023f33 	andeq	r3, r2, r3, lsr pc
    2414:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2418:	7269640f 	rsbvc	r6, r9, #251658240	; 0xf000000
    241c:	58330100 	ldmdapl	r3!, {r8}
    2420:	02000000 	andeq	r0, r0, #0
    2424:	0a006b91 	beq	1d270 <DWHCITransferStageDataTransactionComplete+0x1c0>
    2428:	000015a1 	andeq	r1, r0, r1, lsr #11
    242c:	48743701 	ldmdami	r4!, {r0, r8, r9, sl, ip, sp}^
    2430:	00e80001 	rsceq	r0, r8, r1
    2434:	9c010000 	stcls	0, cr0, [r1], {-0}
    2438:	000002cd 	andeq	r0, r0, sp, asr #5
    243c:	0014090b 	andseq	r0, r4, fp, lsl #18
    2440:	3f370100 	svccc	0x00370100
    2444:	02000002 	andeq	r0, r0, #2
    2448:	800b6491 	mulhi	fp, r1, r4
    244c:	01000014 	tsteq	r0, r4, lsl r0
    2450:	00023f37 	andeq	r3, r2, r7, lsr pc
    2454:	60910200 	addsvs	r0, r1, r0, lsl #4
    2458:	0015210c 	andseq	r2, r5, ip, lsl #2
    245c:	b1380100 	teqlt	r8, r0, lsl #2
    2460:	02000001 	andeq	r0, r0, #1
    2464:	2f0c6c91 	svccs	0x000c6c91
    2468:	01000012 	tsteq	r0, r2, lsl r0
    246c:	0001b139 	andeq	fp, r1, r9, lsr r1
    2470:	68910200 	ldmvs	r1, {r9}
    2474:	13e91000 	mvnne	r1, #0
    2478:	42010000 	andmi	r0, r1, #0
    247c:	00000246 	andeq	r0, r0, r6, asr #4
    2480:	0001495c 	andeq	r4, r1, ip, asr r9
    2484:	0000007c 	andeq	r0, r0, ip, ror r0
    2488:	02f59c01 	rscseq	r9, r5, #256	; 0x100
    248c:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    2490:	01000014 	tsteq	r0, r4, lsl r0
    2494:	00023f42 	andeq	r3, r2, r2, asr #30
    2498:	6c910200 	lfmvs	f0, 4, [r1], {0}
    249c:	14560a00 	ldrbne	r0, [r6], #-2560	; 0xfffff600
    24a0:	46010000 	strmi	r0, [r1], -r0
    24a4:	000149d8 	ldrdeq	r4, [r1], -r8
    24a8:	000001fc 	strdeq	r0, [r0], -ip
    24ac:	03439c01 	movteq	r9, #15361	; 0x3c01
    24b0:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    24b4:	01000014 	tsteq	r0, r4, lsl r0
    24b8:	00023f46 	andeq	r3, r2, r6, asr #30
    24bc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    24c0:	0001d80b 	andeq	sp, r1, fp, lsl #16
    24c4:	21460100 	mrscs	r0, (UNDEF: 86)
    24c8:	02000000 	andeq	r0, r0, #0
    24cc:	2f0c6391 	svccs	0x000c6391
    24d0:	01000012 	tsteq	r0, r2, lsl r0
    24d4:	0001b148 	andeq	fp, r1, r8, asr #2
    24d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    24dc:	0015210c 	andseq	r2, r5, ip, lsl #2
    24e0:	b1490100 	mrslt	r0, (UNDEF: 89)
    24e4:	02000001 	andeq	r0, r0, #1
    24e8:	0a006891 	beq	1c734 <DWHCIRegisterClearBit+0x94>
    24ec:	0000150f 	andeq	r1, r0, pc, lsl #10
    24f0:	4bd46301 	blmi	ff51b0fc <_estack+0xf750b0fc>
    24f4:	02040001 	andeq	r0, r4, #1
    24f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    24fc:	00000391 	muleq	r0, r1, r3
    2500:	0014090b 	andseq	r0, r4, fp, lsl #18
    2504:	3f630100 	svccc	0x00630100
    2508:	02000002 	andeq	r0, r0, #2
    250c:	d80b6491 	stmdale	fp, {r0, r4, r7, sl, sp, lr}
    2510:	01000001 	tsteq	r0, r1
    2514:	00002163 	andeq	r2, r0, r3, ror #2
    2518:	63910200 	orrsvs	r0, r1, #0, 4
    251c:	00122f0c 	andseq	r2, r2, ip, lsl #30
    2520:	b1650100 	cmnlt	r5, r0, lsl #2
    2524:	02000001 	andeq	r0, r0, #1
    2528:	210c6c91 			; <UNDEFINED> instruction: 0x210c6c91
    252c:	01000015 	tsteq	r0, r5, lsl r0
    2530:	0001b166 	andeq	fp, r1, r6, ror #2
    2534:	68910200 	ldmvs	r1, {r9}
    2538:	13840a00 	orrne	r0, r4, #0, 20
    253c:	80010000 	andhi	r0, r1, r0
    2540:	00014dd8 	ldrdeq	r4, [r1], -r8
    2544:	0000007c 	andeq	r0, r0, ip, ror r0
    2548:	03d19c01 	bicseq	r9, r1, #256	; 0x100
    254c:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    2550:	01000014 	tsteq	r0, r4, lsl r0
    2554:	00023f80 	andeq	r3, r2, r0, lsl #31
    2558:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    255c:	00122f0c 	andseq	r2, r2, ip, lsl #30
    2560:	b1820100 	orrlt	r0, r2, r0, lsl #2
    2564:	02000001 	andeq	r0, r0, #1
    2568:	210c6c91 			; <UNDEFINED> instruction: 0x210c6c91
    256c:	01000015 	tsteq	r0, r5, lsl r0
    2570:	0001b183 	andeq	fp, r1, r3, lsl #3
    2574:	68910200 	ldmvs	r1, {r9}
    2578:	45f01100 	ldrbmi	r1, [r0, #256]!	; 0x100
    257c:	24010000 	strcs	r0, [r1], #-0
    2580:	000003e2 	andeq	r0, r0, r2, ror #7
    2584:	dbc00305 	blle	ff0031a0 <_estack+0xf6ff31a0>
    2588:	e7120002 	ldr	r0, [r2, -r2]
    258c:	13000003 	movwne	r0, #3
    2590:	0003ed04 	andeq	lr, r3, r4, lsl #26
    2594:	01d81400 	bicseq	r1, r8, r0, lsl #8
    2598:	c3000000 	movwgt	r0, #0
    259c:	04000002 	streq	r0, [r0], #-2
    25a0:	00092d00 	andeq	r2, r9, r0, lsl #26
    25a4:	19010400 	stmdbne	r1, {sl}
    25a8:	01000000 	mrseq	r0, (UNDEF: 0)
    25ac:	000015e3 	andeq	r1, r0, r3, ror #11
    25b0:	00014e54 	andeq	r4, r1, r4, asr lr
    25b4:	000005c8 	andeq	r0, r0, r8, asr #11
    25b8:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    25bc:	00081f02 	andeq	r1, r8, r2, lsl #30
    25c0:	2cd40200 	lfmcs	f0, 2, [r4], {0}
    25c4:	03000000 	movweq	r0, #0
    25c8:	071d0704 	ldreq	r0, [sp, -r4, lsl #14]
    25cc:	04040000 	streq	r0, [r4], #-0
    25d0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    25d4:	06010300 	streq	r0, [r1], -r0, lsl #6
    25d8:	0000072c 	andeq	r0, r0, ip, lsr #14
    25dc:	2a080103 	bcs	2029f0 <mailbuffer+0x1c7900>
    25e0:	03000007 	movweq	r0, #7
    25e4:	07b80502 	ldreq	r0, [r8, r2, lsl #10]!
    25e8:	02030000 	andeq	r0, r3, #0
    25ec:	00013207 	andeq	r3, r1, r7, lsl #4
    25f0:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    25f4:	00000798 	muleq	r0, r8, r7
    25f8:	18070403 	stmdane	r7, {r0, r1, sl}
    25fc:	03000007 	movweq	r0, #7
    2600:	07930508 	ldreq	r0, [r3, r8, lsl #10]
    2604:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2608:	00071307 	andeq	r1, r7, r7, lsl #6
    260c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2610:	000001d4 	ldrdeq	r0, [r0], -r4
    2614:	04060405 	streq	r0, [r6], #-1029	; 0xfffffbfb
    2618:	00000041 	andeq	r0, r0, r1, asr #32
    261c:	33060103 	movwcc	r0, #24835	; 0x6103
    2620:	07000007 	streq	r0, [r0, -r7]
    2624:	000016a8 	andeq	r1, r0, r8, lsr #13
    2628:	5c01a000 	stcpl	0, cr10, [r1], {-0}
    262c:	000000ac 	andeq	r0, r0, ip, lsr #1
    2630:	0016ba08 	andseq	fp, r6, r8, lsl #20
    2634:	ac5f0100 	ldfgee	f0, [pc], {-0}
    2638:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    263c:	000016b3 			; <UNDEFINED> instruction: 0x000016b3
    2640:	00b86301 	adcseq	r6, r8, r1, lsl #6
    2644:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2648:	000000b1 	strheq	r0, [r0], -r1
    264c:	74040803 	strvc	r0, [r4], #-2051	; 0xfffff7fd
    2650:	0a000016 	beq	26b0 <_start-0x5950>
    2654:	00000041 	andeq	r0, r0, r1, asr #32
    2658:	000000c9 	andeq	r0, r0, r9, asr #1
    265c:	0000720b 	andeq	r7, r0, fp, lsl #4
    2660:	009fff00 	addseq	pc, pc, r0, lsl #30
    2664:	00165b0c 	andseq	r5, r6, ip, lsl #22
    2668:	68010800 	stmdavs	r1, {fp}
    266c:	000000ee 	andeq	r0, r0, lr, ror #1
    2670:	00177b0d 	andseq	r7, r7, sp, lsl #22
    2674:	ee6a0100 	powe	f0, f2, f0
    2678:	00000000 	andeq	r0, r0, r0
    267c:	0016c10d 	andseq	ip, r6, sp, lsl #2
    2680:	216b0100 	cmncs	fp, r0, lsl #2
    2684:	04000000 	streq	r0, [r0], #-0
    2688:	c9040600 	stmdbgt	r4, {r9, sl}
    268c:	02000000 	andeq	r0, r0, #0
    2690:	0000172d 	andeq	r1, r0, sp, lsr #14
    2694:	00c96c01 	sbceq	r6, r9, r1, lsl #24
    2698:	8a0e0000 	bhi	3826a0 <mailbuffer+0x3475b0>
    269c:	01000016 	tsteq	r0, r6, lsl r0
    26a0:	00007992 	muleq	r0, r2, r9
    26a4:	014e5400 	cmpeq	lr, r0, lsl #8
    26a8:	00020800 	andeq	r0, r2, r0, lsl #16
    26ac:	5f9c0100 	svcpl	0x009c0100
    26b0:	0f000001 	svceq	0x00000001
    26b4:	00001742 	andeq	r1, r0, r2, asr #14
    26b8:	00219201 	eoreq	r9, r1, r1, lsl #4
    26bc:	91020000 	mrsls	r0, (UNDEF: 2)
    26c0:	167b105c 			; <UNDEFINED> instruction: 0x167b105c
    26c4:	94010000 	strls	r0, [r1], #-0
    26c8:	0000015f 	andeq	r0, r0, pc, asr r1
    26cc:	106c9102 	rsbne	r9, ip, r2, lsl #2
    26d0:	000016d8 	ldrdeq	r1, [r0], -r8
    26d4:	015f9401 	cmpeq	pc, r1, lsl #8
    26d8:	91020000 	mrsls	r0, (UNDEF: 2)
    26dc:	176c1068 	strbne	r1, [ip, -r8, rrx]!
    26e0:	94010000 	strls	r0, [r1], #-0
    26e4:	0000015f 	andeq	r0, r0, pc, asr r1
    26e8:	10609102 	rsbne	r9, r0, r2, lsl #2
    26ec:	000016f7 	strdeq	r1, [r0], -r7
    26f0:	00799501 	rsbseq	r9, r9, r1, lsl #10
    26f4:	91020000 	mrsls	r0, (UNDEF: 2)
    26f8:	04060064 	streq	r0, [r6], #-100	; 0xffffff9c
    26fc:	000000f4 	strdeq	r0, [r0], -r4
    2700:	00174e11 	andseq	r4, r7, r1, lsl lr
    2704:	5cee0100 	stfple	f0, [lr]
    2708:	a8000150 	stmdage	r0, {r4, r6, r8}
    270c:	01000000 	mrseq	r0, (UNDEF: 0)
    2710:	0001a49c 	muleq	r1, ip, r4
    2714:	76701200 	ldrbtvc	r1, [r0], -r0, lsl #4
    2718:	79ee0100 	stmibvc	lr!, {r8}^
    271c:	02000000 	andeq	r0, r0, #0
    2720:	70136491 	mulsvc	r3, r1, r4
    2724:	01006375 	tsteq	r0, r5, ror r3
    2728:	00007bf0 	strdeq	r7, [r0], -r0
    272c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2730:	00168310 	andseq	r8, r6, r0, lsl r3
    2734:	5ff10100 	svcpl	0x00f10100
    2738:	02000001 	andeq	r0, r0, #1
    273c:	14006891 	strne	r6, [r0], #-2193	; 0xfffff76f
    2740:	00001646 	andeq	r1, r0, r6, asr #12
    2744:	21010701 	tstcs	r1, r1, lsl #14
    2748:	04000000 	streq	r0, [r0], #-0
    274c:	4c000151 	stfmis	f0, [r0], {81}	; 0x51
    2750:	01000000 	mrseq	r0, (UNDEF: 0)
    2754:	1700159c 			; <UNDEFINED> instruction: 0x1700159c
    2758:	0d010000 	stceq	0, cr0, [r1, #-0]
    275c:	01515001 	cmpeq	r1, r1
    2760:	00003800 	andeq	r3, r0, r0, lsl #16
    2764:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    2768:	00001668 	andeq	r1, r0, r8, ror #12
    276c:	88011301 	stmdahi	r1, {r0, r8, r9, ip}
    2770:	18000151 	stmdane	r0, {r0, r4, r6, r8}
    2774:	01000001 	tsteq	r0, r1
    2778:	0002019c 	muleq	r2, ip, r1
    277c:	16971700 	ldrne	r1, [r7], r0, lsl #14
    2780:	15010000 	strne	r0, [r1, #-0]
    2784:	00015f01 	andeq	r5, r1, r1, lsl #30
    2788:	68910200 	ldmvs	r1, {r9}
    278c:	00178b17 	andseq	r8, r7, r7, lsl fp
    2790:	01160100 	tsteq	r6, r0, lsl #2
    2794:	0000007b 	andeq	r0, r0, fp, ror r0
    2798:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    279c:	0015c816 	andseq	ip, r5, r6, lsl r8
    27a0:	01340100 	teqeq	r4, r0, lsl #2
    27a4:	000152a0 	andeq	r5, r1, r0, lsr #5
    27a8:	0000017c 	andeq	r0, r0, ip, ror r1
    27ac:	02459c01 	subeq	r9, r5, #256	; 0x100
    27b0:	96180000 	ldrls	r0, [r8], -r0
    27b4:	01000017 	tsteq	r0, r7, lsl r0
    27b8:	015f0134 	cmpeq	pc, r4, lsr r1	; <UNPREDICTABLE>
    27bc:	91020000 	mrsls	r0, (UNDEF: 2)
    27c0:	07ad1764 	streq	r1, [sp, r4, ror #14]!
    27c4:	36010000 	strcc	r0, [r1], -r0
    27c8:	00015f01 	andeq	r5, r1, r1, lsl #30
    27cc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    27d0:	63757019 	cmnvs	r5, #25
    27d4:	01370100 	teqeq	r7, r0, lsl #2
    27d8:	0000007b 	andeq	r0, r0, fp, ror r0
    27dc:	00689102 	rsbeq	r9, r8, r2, lsl #2
    27e0:	0016cc10 	andseq	ip, r6, r0, lsl ip
    27e4:	88640100 	stmdahi	r4!, {r8}^
    27e8:	05000000 	streq	r0, [r0, #-0]
    27ec:	03106803 	tsteq	r0, #196608	; 0x30000
    27f0:	17161000 	ldrne	r1, [r6, -r0]
    27f4:	82010000 	andhi	r0, r1, #0
    27f8:	00000267 	andeq	r0, r0, r7, ror #4
    27fc:	dbc40305 	blle	ff103418 <_estack+0xf70f3418>
    2800:	4f1a0002 	svcmi	0x001a0002
    2804:	10000000 	andne	r0, r0, r0
    2808:	000016e8 	andeq	r1, r0, r8, ror #13
    280c:	027d8501 	rsbseq	r8, sp, #4194304	; 0x400000
    2810:	03050000 	movweq	r0, #20480	; 0x5000
    2814:	0002dbc8 	andeq	sp, r2, r8, asr #23
    2818:	0000211a 	andeq	r2, r0, sl, lsl r1
    281c:	17261000 	strne	r1, [r6, -r0]!
    2820:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2824:	000000f4 	strdeq	r0, [r0], -r4
    2828:	b0680305 	rsblt	r0, r8, r5, lsl #6
    282c:	d2100003 	andsle	r0, r0, #3
    2830:	01000016 	tsteq	r0, r6, lsl r0
    2834:	00015f88 	andeq	r5, r1, r8, lsl #31
    2838:	70030500 	andvc	r0, r3, r0, lsl #10
    283c:	100003b0 			; <UNDEFINED> instruction: 0x100003b0
    2840:	00001758 	andeq	r1, r0, r8, asr r7
    2844:	00218c01 	eoreq	r8, r1, r1, lsl #24
    2848:	03050000 	movweq	r0, #20480	; 0x5000
    284c:	00030b58 	andeq	r0, r3, r8, asr fp
    2850:	0017381b 	andseq	r3, r7, fp, lsl r8
    2854:	21910100 	orrscs	r0, r1, r0, lsl #2
    2858:	05000000 	streq	r0, [r0, #-0]
    285c:	03b07403 	movseq	r7, #50331648	; 0x3000000
    2860:	00c00000 	sbceq	r0, r0, r0
    2864:	00040000 	andeq	r0, r4, r0
    2868:	00000ac6 	andeq	r0, r0, r6, asr #21
    286c:	00190104 	andseq	r0, r9, r4, lsl #2
    2870:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    2874:	44000017 	strmi	r0, [r0], #-23	; 0xffffffe9
    2878:	88000154 	stmdahi	r0, {r2, r4, r6, r8}
    287c:	cb000001 	blgt	2888 <_start-0x5778>
    2880:	02000010 	andeq	r0, r0, #16
    2884:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2888:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    288c:	00071d07 	andeq	r1, r7, r7, lsl #26
    2890:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2894:	00000718 	andeq	r0, r0, r8, lsl r7
    2898:	98050403 	stmdals	r5, {r0, r1, sl}
    289c:	03000007 	movweq	r0, #7
    28a0:	072c0601 	streq	r0, [ip, -r1, lsl #12]!
    28a4:	02030000 	andeq	r0, r3, #0
    28a8:	00013207 	andeq	r3, r1, r7, lsl #4
    28ac:	07040300 	streq	r0, [r4, -r0, lsl #6]
    28b0:	000001d4 	ldrdeq	r0, [r0], -r4
    28b4:	0017ab04 	andseq	sl, r7, r4, lsl #22
    28b8:	44090100 	strmi	r0, [r9], #-256	; 0xffffff00
    28bc:	4c000154 	stfmis	f0, [r0], {84}	; 0x54
    28c0:	01000000 	mrseq	r0, (UNDEF: 0)
    28c4:	0000749c 	muleq	r0, ip, r4
    28c8:	00690500 	rsbeq	r0, r9, r0, lsl #10
    28cc:	00210a01 	eoreq	r0, r1, r1, lsl #20
    28d0:	91020000 	mrsls	r0, (UNDEF: 2)
    28d4:	b8040074 	stmdalt	r4, {r2, r4, r5, r6}
    28d8:	01000017 	tsteq	r0, r7, lsl r0
    28dc:	01549012 	cmpeq	r4, r2, lsl r0
    28e0:	00005400 	andeq	r5, r0, r0, lsl #8
    28e4:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    28e8:	05000000 	streq	r0, [r0, #-0]
    28ec:	13010069 	movwne	r0, #4201	; 0x1069
    28f0:	00000021 	andeq	r0, r0, r1, lsr #32
    28f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    28f8:	0017a606 	andseq	sl, r7, r6, lsl #12
    28fc:	21220100 	teqcs	r2, r0, lsl #2
    2900:	e4000000 	str	r0, [r0], #-0
    2904:	e8000154 	stmda	r0, {r2, r4, r6, r8}
    2908:	01000000 	mrseq	r0, (UNDEF: 0)
    290c:	17b1079c 			; <UNDEFINED> instruction: 0x17b1079c
    2910:	03020000 	movweq	r0, #8192	; 0x2000
    2914:	000000bc 	strheq	r0, [r0], -ip
    2918:	b07c0305 	rsbslt	r0, ip, r5, lsl #6
    291c:	01030003 	tsteq	r3, r3
    2920:	00073306 	andeq	r3, r7, r6, lsl #6
    2924:	00a40000 	adceq	r0, r4, r0
    2928:	00040000 	andeq	r0, r4, r0
    292c:	00000b40 	andeq	r0, r0, r0, asr #22
    2930:	00190104 	andseq	r0, r9, r4, lsl #2
    2934:	02010000 	andeq	r0, r1, #0
    2938:	cc000018 	stcgt	0, cr0, [r0], {24}
    293c:	50000155 	andpl	r0, r0, r5, asr r1
    2940:	d1000001 	tstle	r0, r1
    2944:	02000011 	andeq	r0, r0, #17
    2948:	0000185d 	andeq	r1, r0, sp, asr r8
    294c:	55cc0b01 	strbpl	r0, [ip, #2817]	; 0xb01
    2950:	009c0001 	addseq	r0, ip, r1
    2954:	9c010000 	stcls	0, cr0, [r1], {-0}
    2958:	00000061 	andeq	r0, r0, r1, rrx
    295c:	00187203 	andseq	r7, r8, r3, lsl #4
    2960:	610b0100 	mrsvs	r0, (UNDEF: 27)
    2964:	02000000 	andeq	r0, r0, #0
    2968:	6a036491 	bvs	dbbb4 <mailbuffer+0xa0ac4>
    296c:	01000018 	tsteq	r0, r8, lsl r0
    2970:	0000610b 	andeq	r6, r0, fp, lsl #2
    2974:	60910200 	addsvs	r0, r1, r0, lsl #4
    2978:	00187c04 	andseq	r7, r8, r4, lsl #24
    297c:	610c0100 	mrsvs	r0, (UNDEF: 28)
    2980:	02000000 	andeq	r0, r0, #0
    2984:	05006c91 	streq	r6, [r0, #-3217]	; 0xfffff36f
    2988:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    298c:	51060074 	tstpl	r6, r4, ror r0
    2990:	01000018 	tsteq	r0, r8, lsl r0
    2994:	00006114 	andeq	r6, r0, r4, lsl r1
    2998:	01566800 	cmpeq	r6, r0, lsl #16
    299c:	0000b400 	andeq	fp, r0, r0, lsl #8
    29a0:	039c0100 	orrseq	r0, ip, #0, 2
    29a4:	0000186a 	andeq	r1, r0, sl, ror #16
    29a8:	00611401 	rsbeq	r1, r1, r1, lsl #8
    29ac:	91020000 	mrsls	r0, (UNDEF: 2)
    29b0:	61720764 	cmnvs	r2, r4, ror #14
    29b4:	61150100 	tstvs	r5, r0, lsl #2
    29b8:	02000000 	andeq	r0, r0, #0
    29bc:	7c046891 	stcvc	8, cr6, [r4], {145}	; 0x91
    29c0:	01000018 	tsteq	r0, r8, lsl r0
    29c4:	00006116 	andeq	r6, r0, r6, lsl r1
    29c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    29cc:	013b0000 	teqeq	fp, r0
    29d0:	00040000 	andeq	r0, r4, r0
    29d4:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
    29d8:	00190104 	andseq	r0, r9, r4, lsl #2
    29dc:	cd010000 	stcgt	0, cr0, [r1, #-0]
    29e0:	1c000018 	stcne	0, cr0, [r0], {24}
    29e4:	90000157 	andls	r0, r0, r7, asr r1
    29e8:	62000002 	andvs	r0, r0, #2
    29ec:	02000012 	andeq	r0, r0, #18
    29f0:	000018aa 	andeq	r1, r0, sl, lsr #17
    29f4:	571c0e01 	ldrpl	r0, [ip, -r1, lsl #28]
    29f8:	01480001 	cmpeq	r8, r1
    29fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a00:	00000080 	andeq	r0, r0, r0, lsl #1
    2a04:	0018a203 	andseq	sl, r8, r3, lsl #4
    2a08:	800e0100 	andhi	r0, lr, r0, lsl #2
    2a0c:	02000000 	andeq	r0, r0, #0
    2a10:	c3035491 	movwgt	r5, #13457	; 0x3491
    2a14:	01000018 	tsteq	r0, r8, lsl r0
    2a18:	0000800e 	andeq	r8, r0, lr
    2a1c:	50910200 	addspl	r0, r1, r0, lsl #4
    2a20:	01574804 	cmpeq	r7, r4, lsl #16
    2a24:	00011400 	andeq	r1, r1, r0, lsl #8
    2a28:	006d0500 	rsbeq	r0, sp, r0, lsl #10
    2a2c:	00821101 	addeq	r1, r2, r1, lsl #2
    2a30:	91030000 	mrsls	r0, (UNDEF: 3)
    2a34:	d404065c 	strle	r0, [r4], #-1628	; 0xfffff9a4
    2a38:	44000157 	strmi	r0, [r0], #-343	; 0xfffffea9
    2a3c:	05000000 	streq	r0, [r0, #-0]
    2a40:	12010069 	andne	r0, r1, #105	; 0x69
    2a44:	000000a3 	andeq	r0, r0, r3, lsr #1
    2a48:	00649102 	rsbeq	r9, r4, r2, lsl #2
    2a4c:	04060000 	streq	r0, [r6], #-0
    2a50:	00009c07 	andeq	r9, r0, r7, lsl #24
    2a54:	00009500 	andeq	r9, r0, r0, lsl #10
    2a58:	00950800 	addseq	r0, r5, r0, lsl #16
    2a5c:	91030000 	mrsls	r0, (UNDEF: 3)
    2a60:	09000660 	stmdbeq	r0, {r5, r6, r9, sl}
    2a64:	01d40704 	bicseq	r0, r4, r4, lsl #14
    2a68:	01090000 	mrseq	r0, (UNDEF: 9)
    2a6c:	00073306 	andeq	r3, r7, r6, lsl #6
    2a70:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
    2a74:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2a78:	00188a02 	andseq	r8, r8, r2, lsl #20
    2a7c:	641c0100 	ldrvs	r0, [ip], #-256	; 0xffffff00
    2a80:	48000158 	stmdami	r0, {r3, r4, r6, r8}
    2a84:	01000001 	tsteq	r0, r1
    2a88:	0001099c 	muleq	r1, ip, r9
    2a8c:	18a20300 	stmiane	r2!, {r8, r9}
    2a90:	1c010000 	stcne	0, cr0, [r1], {-0}
    2a94:	00000080 	andeq	r0, r0, r0, lsl #1
    2a98:	03549102 	cmpeq	r4, #-2147483648	; 0x80000000
    2a9c:	000018c3 	andeq	r1, r0, r3, asr #17
    2aa0:	00801c01 	addeq	r1, r0, r1, lsl #24
    2aa4:	91020000 	mrsls	r0, (UNDEF: 2)
    2aa8:	58900450 	ldmpl	r0, {r4, r6, sl}
    2aac:	01140001 	tsteq	r4, r1
    2ab0:	6d050000 	stcvs	0, cr0, [r5, #-0]
    2ab4:	091e0100 	ldmdbeq	lr, {r8}
    2ab8:	03000001 	movweq	r0, #1
    2abc:	04065c91 	streq	r5, [r6], #-3217	; 0xfffff36f
    2ac0:	00015900 	andeq	r5, r1, r0, lsl #18
    2ac4:	00000044 	andeq	r0, r0, r4, asr #32
    2ac8:	01006905 	tsteq	r0, r5, lsl #18
    2acc:	0000a31f 	andeq	sl, r0, pc, lsl r3
    2ad0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2ad4:	07000000 	streq	r0, [r0, -r0]
    2ad8:	0000009c 	muleq	r0, ip, r0
    2adc:	0000011c 	andeq	r0, r0, ip, lsl r1
    2ae0:	00009508 	andeq	r9, r0, r8, lsl #10
    2ae4:	60910300 	addsvs	r0, r1, r0, lsl #6
    2ae8:	b10b0006 	tstlt	fp, r6
    2aec:	02000017 	andeq	r0, r0, #23
    2af0:	00009c03 	andeq	r9, r0, r3, lsl #24
    2af4:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    2af8:	0b0003b0 	bleq	39c0 <_start-0x4640>
    2afc:	00001884 	andeq	r1, r0, r4, lsl #17
    2b00:	00a30201 	adceq	r0, r3, r1, lsl #4
    2b04:	03050000 	movweq	r0, #20480	; 0x5000
    2b08:	0003b078 	andeq	fp, r3, r8, ror r0
    2b0c:	0003b100 	andeq	fp, r3, r0, lsl #2
    2b10:	51000400 	tstpl	r0, r0, lsl #8
    2b14:	0400000c 	streq	r0, [r0], #-12
    2b18:	00001901 	andeq	r1, r0, r1, lsl #18
    2b1c:	19a10100 	stmibne	r1!, {r8}
    2b20:	59b00000 	ldmibpl	r0!, {}	; <UNPREDICTABLE>
    2b24:	0bc80001 	bleq	ff202b30 <_estack+0xf71f2b30>
    2b28:	135d0000 	cmpne	sp, #0
    2b2c:	21020000 	mrscs	r0, (UNDEF: 2)
    2b30:	01000019 	tsteq	r0, r9, lsl r0
    2b34:	0159b00e 	cmpeq	r9, lr
    2b38:	00024c00 	andeq	r4, r2, r0, lsl #24
    2b3c:	039c0100 	orrseq	r0, ip, #0, 2
    2b40:	0000198e 	andeq	r1, r0, lr, lsl #19
    2b44:	5bfc5601 	blpl	fff18350 <_estack+0xf7f08350>
    2b48:	00600001 	rsbeq	r0, r0, r1
    2b4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b50:	0000006e 	andeq	r0, r0, lr, rrx
    2b54:	01007804 	tsteq	r0, r4, lsl #16
    2b58:	00006e56 	andeq	r6, r0, r6, asr lr
    2b5c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b60:	01007904 	tsteq	r0, r4, lsl #18
    2b64:	00006e56 	andeq	r6, r0, r6, asr lr
    2b68:	70910200 	addsvc	r0, r1, r0, lsl #4
    2b6c:	00191a05 	andseq	r1, r9, r5, lsl #20
    2b70:	75560100 	ldrbvc	r0, [r6, #-256]	; 0xffffff00
    2b74:	02000000 	andeq	r0, r0, #0
    2b78:	06006c91 			; <UNDEFINED> instruction: 0x06006c91
    2b7c:	071d0704 	ldreq	r0, [sp, -r4, lsl #14]
    2b80:	04070000 	streq	r0, [r7], #-0
    2b84:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2b88:	19280800 	stmdbne	r8!, {fp}
    2b8c:	5b010000 	blpl	42b94 <mailbuffer+0x7aa4>
    2b90:	00015c5c 	andeq	r5, r1, ip, asr ip
    2b94:	0000008c 	andeq	r0, r0, ip, lsl #1
    2b98:	00ec9c01 	rsceq	r9, ip, r1, lsl #24
    2b9c:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    2ba0:	5b010031 	blpl	42c6c <mailbuffer+0x7b7c>
    2ba4:	0000006e 	andeq	r0, r0, lr, rrx
    2ba8:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
    2bac:	01003179 	tsteq	r0, r9, ror r1
    2bb0:	00006e5b 	andeq	r6, r0, fp, asr lr
    2bb4:	68910200 	ldmvs	r1, {r9}
    2bb8:	00327804 	eorseq	r7, r2, r4, lsl #16
    2bbc:	006e5b01 	rsbeq	r5, lr, r1, lsl #22
    2bc0:	91020000 	mrsls	r0, (UNDEF: 2)
    2bc4:	32790464 	rsbscc	r0, r9, #100, 8	; 0x64000000
    2bc8:	6e5b0100 	rdfvse	f0, f3, f0
    2bcc:	02000000 	andeq	r0, r0, #0
    2bd0:	1a056091 	bne	15ae1c <mailbuffer+0x11fd2c>
    2bd4:	01000019 	tsteq	r0, r9, lsl r0
    2bd8:	0000755b 	andeq	r7, r0, fp, asr r5
    2bdc:	00910200 	addseq	r0, r1, r0, lsl #4
    2be0:	01006909 	tsteq	r0, r9, lsl #18
    2be4:	00006e5c 	andeq	r6, r0, ip, asr lr
    2be8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2bec:	01006a09 	tsteq	r0, r9, lsl #20
    2bf0:	00006e5c 	andeq	r6, r0, ip, asr lr
    2bf4:	70910200 	addsvc	r0, r1, r0, lsl #4
    2bf8:	19980300 	ldmibne	r8, {r8, r9}
    2bfc:	70010000 	andvc	r0, r1, r0
    2c00:	00015ce8 	andeq	r5, r1, r8, ror #25
    2c04:	00000128 	andeq	r0, r0, r8, lsr #2
    2c08:	014c9c01 	cmpeq	ip, r1, lsl #24
    2c0c:	63040000 	movwvs	r0, #16384	; 0x4000
    2c10:	4c700100 	ldfmie	f0, [r0], #-0
    2c14:	02000001 	andeq	r0, r0, #1
    2c18:	78046f91 	stmdavc	r4, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    2c1c:	75700100 	ldrbvc	r0, [r0, #-256]!	; 0xffffff00
    2c20:	02000000 	andeq	r0, r0, #0
    2c24:	79046891 	stmdbvc	r4, {r0, r4, r7, fp, sp, lr}
    2c28:	75700100 	ldrbvc	r0, [r0, #-256]!	; 0xffffff00
    2c2c:	02000000 	andeq	r0, r0, #0
    2c30:	1a056491 	bne	15be7c <mailbuffer+0x120d8c>
    2c34:	01000019 	tsteq	r0, r9, lsl r0
    2c38:	00007570 	andeq	r7, r0, r0, ror r5
    2c3c:	60910200 	addsvs	r0, r1, r0, lsl #4
    2c40:	01006909 	tsteq	r0, r9, lsl #18
    2c44:	00007571 	andeq	r7, r0, r1, ror r5
    2c48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2c4c:	01006a09 	tsteq	r0, r9, lsl #20
    2c50:	00007571 	andeq	r7, r0, r1, ror r5
    2c54:	70910200 	addsvc	r0, r1, r0, lsl #4
    2c58:	08010600 	stmdaeq	r1, {r9, sl}
    2c5c:	0000072a 	andeq	r0, r0, sl, lsr #14
    2c60:	00195f08 	andseq	r5, r9, r8, lsl #30
    2c64:	10870100 	addne	r0, r7, r0, lsl #2
    2c68:	6c00015e 	stfvss	f0, [r0], {94}	; 0x5e
    2c6c:	01000000 	mrseq	r0, (UNDEF: 0)
    2c70:	00019d9c 	muleq	r1, ip, sp
    2c74:	74730400 	ldrbtvc	r0, [r3], #-1024	; 0xfffffc00
    2c78:	87010072 	smlsdxhi	r1, r2, r0, r0
    2c7c:	0000019d 	muleq	r0, sp, r1
    2c80:	04749102 	ldrbteq	r9, [r4], #-258	; 0xfffffefe
    2c84:	87010078 	smlsdxhi	r1, r8, r0, r0
    2c88:	00000075 	andeq	r0, r0, r5, ror r0
    2c8c:	04709102 	ldrbteq	r9, [r0], #-258	; 0xfffffefe
    2c90:	87010079 	smlsdxhi	r1, r9, r0, r0
    2c94:	00000075 	andeq	r0, r0, r5, ror r0
    2c98:	056c9102 	strbeq	r9, [ip, #-258]!	; 0xfffffefe
    2c9c:	0000191a 	andeq	r1, r0, sl, lsl r9
    2ca0:	00758701 	rsbseq	r8, r5, r1, lsl #14
    2ca4:	91020000 	mrsls	r0, (UNDEF: 2)
    2ca8:	040a0068 	streq	r0, [sl], #-104	; 0xffffff98
    2cac:	000001a3 	andeq	r0, r0, r3, lsr #3
    2cb0:	0001a80b 	andeq	sl, r1, fp, lsl #16
    2cb4:	06010600 	streq	r0, [r1], -r0, lsl #12
    2cb8:	00000733 	andeq	r0, r0, r3, lsr r7
    2cbc:	0019f908 	andseq	pc, r9, r8, lsl #18
    2cc0:	7c910100 	ldfvcs	f0, [r1], {0}
    2cc4:	b000015e 	andlt	r0, r0, lr, asr r1
    2cc8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ccc:	0001e19c 	muleq	r1, ip, r1
    2cd0:	19120500 	ldmdbne	r2, {r8, sl}
    2cd4:	91010000 	mrsls	r0, (UNDEF: 1)
    2cd8:	0000019d 	muleq	r0, sp, r1
    2cdc:	05749102 	ldrbeq	r9, [r4, #-258]!	; 0xfffffefe
    2ce0:	0000191a 	andeq	r1, r0, sl, lsl r9
    2ce4:	00759101 	rsbseq	r9, r5, r1, lsl #2
    2ce8:	91020000 	mrsls	r0, (UNDEF: 2)
    2cec:	48080070 	stmdami	r8, {r4, r5, r6}
    2cf0:	01000019 	tsteq	r0, r9, lsl r0
    2cf4:	015f2ce7 	cmpeq	pc, r7, ror #25
    2cf8:	00020c00 	andeq	r0, r2, r0, lsl #24
    2cfc:	3a9c0100 	bcc	fe703104 <_estack+0xf66f3104>
    2d00:	05000002 	streq	r0, [r0, #-2]
    2d04:	00001912 	andeq	r1, r0, r2, lsl r9
    2d08:	019de701 	orrseq	lr, sp, r1, lsl #14
    2d0c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d10:	19890544 	stmibne	r9, {r2, r6, r8, sl}
    2d14:	e7010000 	str	r0, [r1, -r0]
    2d18:	00000075 	andeq	r0, r0, r5, ror r0
    2d1c:	05409102 	strbeq	r9, [r0, #-258]	; 0xfffffefe
    2d20:	0000191a 	andeq	r1, r0, sl, lsl r9
    2d24:	0075e701 	rsbseq	lr, r5, r1, lsl #14
    2d28:	91030000 	mrsls	r0, (UNDEF: 3)
    2d2c:	6d097fbc 	stcvs	15, cr7, [r9, #-752]	; 0xfffffd10
    2d30:	3ae80100 	bcc	ffa03138 <_estack+0xf79f3138>
    2d34:	02000002 	andeq	r0, r0, #2
    2d38:	69094891 	stmdbvs	r9, {r0, r4, r7, fp, lr}
    2d3c:	75e90100 	strbvc	r0, [r9, #256]!	; 0x100
    2d40:	02000000 	andeq	r0, r0, #0
    2d44:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
    2d48:	000001a8 	andeq	r0, r0, r8, lsr #3
    2d4c:	0000024a 	andeq	r0, r0, sl, asr #4
    2d50:	00024a0d 	andeq	r4, r2, sp, lsl #20
    2d54:	06002900 	streq	r2, [r0], -r0, lsl #18
    2d58:	01d40704 	bicseq	r0, r4, r4, lsl #14
    2d5c:	6f0e0000 	svcvs	0x000e0000
    2d60:	01000019 	tsteq	r0, r9, lsl r0
    2d64:	016138fb 	strdeq	r3, [r1, #-139]!	; 0xffffff75
    2d68:	00044000 	andeq	r4, r4, r0
    2d6c:	899c0100 	ldmibhi	ip, {r8}
    2d70:	0f000002 	svceq	0x00000002
    2d74:	00001979 	andeq	r1, r0, r9, ror r9
    2d78:	89010301 	stmdbhi	r1, {r0, r8, r9}
    2d7c:	10000002 	andne	r0, r0, r2
    2d80:	0001615c 	andeq	r6, r1, ip, asr r1
    2d84:	00000064 	andeq	r0, r0, r4, rrx
    2d88:	01007809 	tsteq	r0, r9, lsl #16
    2d8c:	000075ff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
    2d90:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2d94:	750c0000 	strvc	r0, [ip, #-0]
    2d98:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    2d9c:	0d000002 	stceq	0, cr0, [r0, #-8]
    2da0:	0000024a 	andeq	r0, r0, sl, asr #4
    2da4:	b111000f 	tstlt	r1, pc
    2da8:	01000017 	tsteq	r0, r7, lsl r0
    2dac:	0001a804 	andeq	sl, r1, r4, lsl #16
    2db0:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    2db4:	0c0003b0 	stceq	3, cr0, [r0], {176}	; 0xb0
    2db8:	0000014c 	andeq	r0, r0, ip, asr #2
    2dbc:	000002c0 	andeq	r0, r0, r0, asr #5
    2dc0:	00024a0d 	andeq	r4, r2, sp, lsl #20
    2dc4:	4a0d5f00 	bmi	35a9cc <mailbuffer+0x31f8dc>
    2dc8:	05000002 	streq	r0, [r0, #-2]
    2dcc:	196a1100 	stmdbne	sl!, {r8, ip}^
    2dd0:	01020000 	mrseq	r0, (UNDEF: 2)
    2dd4:	000002d1 	ldrdeq	r0, [r0], -r1
    2dd8:	dbdc0305 	blle	ff7039f4 <_estack+0xf76f39f4>
    2ddc:	aa0b0002 	bge	2c2dec <mailbuffer+0x287cfc>
    2de0:	11000002 	tstne	r0, r2
    2de4:	00001a0a 	andeq	r1, r0, sl, lsl #20
    2de8:	00750701 	rsbseq	r0, r5, r1, lsl #14
    2dec:	03050000 	movweq	r0, #20480	; 0x5000
    2df0:	0003b0e0 	andeq	fp, r3, r0, ror #1
    2df4:	00195111 	andseq	r5, r9, r1, lsl r1
    2df8:	75080100 	strvc	r0, [r8, #-256]	; 0xffffff00
    2dfc:	05000000 	streq	r0, [r0, #-0]
    2e00:	03b0e803 	movseq	lr, #196608	; 0x30000
    2e04:	006e0c00 	rsbeq	r0, lr, r0, lsl #24
    2e08:	03080000 	movweq	r0, #32768	; 0x8000
    2e0c:	4a0d0000 	bmi	342e14 <mailbuffer+0x307d24>
    2e10:	15000002 	strne	r0, [r0, #-2]
    2e14:	19311100 	ldmdbne	r1!, {r8, ip}
    2e18:	0b010000 	bleq	42e20 <mailbuffer+0x7d30>
    2e1c:	000002f8 	strdeq	r0, [r0], -r8
    2e20:	b0f00305 	rscslt	r0, r0, r5, lsl #6
    2e24:	3c110003 	ldccc	0, cr0, [r1], {3}
    2e28:	01000019 	tsteq	r0, r9, lsl r0
    2e2c:	00032a0c 	andeq	r2, r3, ip, lsl #20
    2e30:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    2e34:	0a0003b0 	beq	3cfc <_start-0x4304>
    2e38:	00006e04 	andeq	r6, r0, r4, lsl #28
    2e3c:	19ee1100 	stmibne	lr!, {r8, ip}^
    2e40:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2e44:	00000075 	andeq	r0, r0, r5, ror r0
    2e48:	b0800305 	addlt	r0, r0, r5, lsl #6
    2e4c:	7e110003 	cdpvc	0, 1, cr0, cr1, cr3, {0}
    2e50:	01000019 	tsteq	r0, r9, lsl r0
    2e54:	0000758f 	andeq	r7, r0, pc, lsl #11
    2e58:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    2e5c:	110003b0 			; <UNDEFINED> instruction: 0x110003b0
    2e60:	00001979 	andeq	r1, r0, r9, ror r9
    2e64:	0289a301 	addeq	sl, r9, #67108864	; 0x4000000
    2e68:	03050000 	movweq	r0, #20480	; 0x5000
    2e6c:	0003b088 	andeq	fp, r3, r8, lsl #1
    2e70:	0001a80c 	andeq	sl, r1, ip, lsl #16
    2e74:	00037300 	andeq	r7, r3, r0, lsl #6
    2e78:	024a0d00 	subeq	r0, sl, #0, 26
    2e7c:	000f0000 	andeq	r0, pc, r0
    2e80:	78656812 	stmdavc	r5!, {r1, r4, fp, sp, lr}^
    2e84:	63a40100 			; <UNDEFINED> instruction: 0x63a40100
    2e88:	05000003 	streq	r0, [r0, #-3]
    2e8c:	030b5c03 	movweq	r5, #48131	; 0xbc03
    2e90:	014c0c00 	cmpeq	ip, r0, lsl #24
    2e94:	03940000 	orrseq	r0, r4, #0
    2e98:	4a0d0000 	bmi	342ea0 <mailbuffer+0x307db0>
    2e9c:	0d000002 	stceq	0, cr0, [r0, #-8]
    2ea0:	1a011100 	bne	472a8 <mailbuffer+0xc1b8>
    2ea4:	a6010000 	strge	r0, [r1], -r0
    2ea8:	00000384 	andeq	r0, r0, r4, lsl #7
    2eac:	0b6c0305 	bleq	1b03ac8 <mailbuffer+0x1ac89d8>
    2eb0:	69120003 	ldmdbvs	r2, {r0, r1}
    2eb4:	75a70100 	strvc	r0, [r7, #256]!	; 0x100
    2eb8:	05000000 	streq	r0, [r0, #-0]
    2ebc:	03b0e403 	movseq	lr, #50331648	; 0x3000000
    2ec0:	04eb0000 	strbteq	r0, [fp], #0
    2ec4:	00040000 	andeq	r0, r4, r0
    2ec8:	00000d66 	andeq	r0, r0, r6, ror #26
    2ecc:	00190104 	andseq	r0, r9, r4, lsl #2
    2ed0:	aa010000 	bge	42ed8 <mailbuffer+0x7de8>
    2ed4:	8000001a 	andhi	r0, r0, sl, lsl r0
    2ed8:	4c000165 	stfmis	f0, [r0], {101}	; 0x65
    2edc:	ba000008 	blt	2f04 <_start-0x50fc>
    2ee0:	02000014 	andeq	r0, r0, #20
    2ee4:	00001b6c 	andeq	r1, r0, ip, ror #22
    2ee8:	002c3c02 	eoreq	r3, ip, r2, lsl #24
    2eec:	41030000 	mrsmi	r0, (UNDEF: 3)
    2ef0:	04000000 	streq	r0, [r0], #-0
    2ef4:	00000041 	andeq	r0, r0, r1, asr #32
    2ef8:	00004804 	andeq	r4, r0, r4, lsl #16
    2efc:	00480400 	subeq	r0, r8, r0, lsl #8
    2f00:	05000000 	streq	r0, [r0, #-0]
    2f04:	071d0704 	ldreq	r0, [sp, -r4, lsl #14]
    2f08:	04060000 	streq	r0, [r6], #-0
    2f0c:	001b1002 	andseq	r1, fp, r2
    2f10:	55480200 	strbpl	r0, [r8, #-512]	; 0xfffffe00
    2f14:	03000000 	movweq	r0, #0
    2f18:	00000060 	andeq	r0, r0, r0, rrx
    2f1c:	00004804 	andeq	r4, r0, r4, lsl #16
    2f20:	04070000 	streq	r0, [r7], #-0
    2f24:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2f28:	081f0200 	ldmdaeq	pc, {r9}	; <UNPREDICTABLE>
    2f2c:	d4030000 	strle	r0, [r3], #-0
    2f30:	00000041 	andeq	r0, r0, r1, asr #32
    2f34:	18070405 	stmdane	r7, {r0, r2, sl}
    2f38:	05000007 	streq	r0, [r0, #-7]
    2f3c:	07980504 	ldreq	r0, [r8, r4, lsl #10]
    2f40:	01050000 	mrseq	r0, (UNDEF: 5)
    2f44:	00072c06 	andeq	r2, r7, r6, lsl #24
    2f48:	07020500 	streq	r0, [r2, -r0, lsl #10]
    2f4c:	00000132 	andeq	r0, r0, r2, lsr r1
    2f50:	d4070405 	strle	r0, [r7], #-1029	; 0xfffffbfb
    2f54:	08000001 	stmdaeq	r0, {r0}
    2f58:	00001b80 	andeq	r1, r0, r0, lsl #23
    2f5c:	65802301 	strvs	r2, [r0, #769]	; 0x301
    2f60:	00540001 	subseq	r0, r4, r1
    2f64:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f68:	000000b9 	strheq	r0, [r0], -r9
    2f6c:	001b0209 	andseq	r0, fp, r9, lsl #4
    2f70:	41230100 	teqmi	r3, r0, lsl #2
    2f74:	02000000 	andeq	r0, r0, #0
    2f78:	08006c91 	stmdaeq	r0, {r0, r4, r7, sl, fp, sp, lr}
    2f7c:	00001b22 	andeq	r1, r0, r2, lsr #22
    2f80:	65d42801 	ldrbvs	r2, [r4, #2049]	; 0x801
    2f84:	00540001 	subseq	r0, r4, r1
    2f88:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f8c:	000000dd 	ldrdeq	r0, [r0], -sp
    2f90:	001a6609 	andseq	r6, sl, r9, lsl #12
    2f94:	41280100 	teqmi	r8, r0, lsl #2
    2f98:	02000000 	andeq	r0, r0, #0
    2f9c:	0a006c91 	beq	1e1e8 <DWHCITransferStageDataGetStatusMask+0x74>
    2fa0:	00001b2a 	andeq	r1, r0, sl, lsr #22
    2fa4:	00412d01 	subeq	r2, r1, r1, lsl #26
    2fa8:	66280000 	strtvs	r0, [r8], -r0
    2fac:	006c0001 	rsbeq	r0, ip, r1
    2fb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2fb4:	0000012f 	andeq	r0, r0, pc, lsr #2
    2fb8:	001b9109 	andseq	r9, fp, r9, lsl #2
    2fbc:	412d0100 	teqmi	sp, r0, lsl #2
    2fc0:	02000000 	andeq	r0, r0, #0
    2fc4:	9b096c91 	blls	25e210 <mailbuffer+0x223120>
    2fc8:	0100001a 	tsteq	r0, sl, lsl r0
    2fcc:	00012f2d 	andeq	r2, r1, sp, lsr #30
    2fd0:	68910200 	ldmvs	r1, {r9}
    2fd4:	00011d09 	andeq	r1, r1, r9, lsl #26
    2fd8:	482d0100 	stmdami	sp!, {r8}
    2fdc:	02000000 	andeq	r0, r0, #0
    2fe0:	48096491 	stmdami	r9, {r0, r4, r7, sl, sp, lr}
    2fe4:	0100001b 	tsteq	r0, fp, lsl r0
    2fe8:	0000482d 	andeq	r4, r0, sp, lsr #16
    2fec:	60910200 	addsvs	r0, r1, r0, lsl #4
    2ff0:	21040b00 	tstcs	r4, r0, lsl #22
    2ff4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2ff8:	00001a79 	andeq	r1, r0, r9, ror sl
    2ffc:	66943201 	ldrvs	r3, [r4], r1, lsl #4
    3000:	00540001 	subseq	r0, r4, r1
    3004:	9c010000 	stcls	0, cr0, [r1], {-0}
    3008:	00000159 	andeq	r0, r0, r9, asr r1
    300c:	00295909 	eoreq	r5, r9, r9, lsl #18
    3010:	41320100 	teqmi	r2, r0, lsl #2
    3014:	02000000 	andeq	r0, r0, #0
    3018:	08006c91 	stmdaeq	r0, {r0, r4, r7, sl, fp, sp, lr}
    301c:	00001b51 	andeq	r1, r0, r1, asr fp
    3020:	66e83601 	strbtvs	r3, [r8], r1, lsl #12
    3024:	00600001 	rsbeq	r0, r0, r1
    3028:	9c010000 	stcls	0, cr0, [r1], {-0}
    302c:	00000199 	muleq	r0, r9, r1
    3030:	00000009 	andeq	r0, r0, r9
    3034:	41360100 	teqmi	r6, r0, lsl #2
    3038:	02000000 	andeq	r0, r0, #0
    303c:	91096c91 			; <UNDEFINED> instruction: 0x91096c91
    3040:	01000012 	tsteq	r0, r2, lsl r0
    3044:	00019936 	andeq	r9, r1, r6, lsr r9
    3048:	68910200 	ldmvs	r1, {r9}
    304c:	00011d09 	andeq	r1, r1, r9, lsl #26
    3050:	48360100 	ldmdami	r6!, {r8}
    3054:	02000000 	andeq	r0, r0, #0
    3058:	0b006491 	bleq	1c2a4 <DWHCIRegisterRead+0x80>
    305c:	00004a04 	andeq	r4, r0, r4, lsl #20
    3060:	1a8b0a00 	bne	fe2c5868 <_estack+0xf62b5868>
    3064:	3b010000 	blcc	4306c <mailbuffer+0x7f7c>
    3068:	00000060 	andeq	r0, r0, r0, rrx
    306c:	00016748 	andeq	r6, r1, r8, asr #14
    3070:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3074:	01d59c01 	bicseq	r9, r5, r1, lsl #24
    3078:	62090000 	andvs	r0, r9, #0
    307c:	0100001b 	tsteq	r0, fp, lsl r0
    3080:	0000413b 	andeq	r4, r0, fp, lsr r1
    3084:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3088:	0019310c 	andseq	r3, r9, ip, lsl #2
    308c:	d53c0100 	ldrle	r0, [ip, #-256]!	; 0xffffff00
    3090:	02000001 	andeq	r0, r0, #1
    3094:	0d000074 	stceq	0, cr0, [r0, #-464]	; 0xfffffe30
    3098:	00000041 	andeq	r0, r0, r1, asr #32
    309c:	000001e5 	andeq	r0, r0, r5, ror #3
    30a0:	00008e0e 	andeq	r8, r0, lr, lsl #28
    30a4:	0a000700 	beq	4cac <_start-0x3354>
    30a8:	0000455c 	andeq	r4, r0, ip, asr r5
    30ac:	00605101 	rsbeq	r5, r0, r1, lsl #2
    30b0:	68180000 	ldmdavs	r8, {}	; <UNPREDICTABLE>
    30b4:	01380001 	teqeq	r8, r1
    30b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    30bc:	00000229 	andeq	r0, r0, r9, lsr #4
    30c0:	000c9109 	andeq	r9, ip, r9, lsl #2
    30c4:	29510100 	ldmdbcs	r1, {r8}^
    30c8:	02000002 	andeq	r0, r0, #2
    30cc:	310c6491 			; <UNDEFINED> instruction: 0x310c6491
    30d0:	01000019 	tsteq	r0, r9, lsl r0
    30d4:	00023652 	andeq	r3, r2, r2, asr r6
    30d8:	00740200 	rsbseq	r0, r4, r0, lsl #4
    30dc:	7274730f 	rsbsvc	r7, r4, #1006632960	; 0x3c000000
    30e0:	46640100 	strbtmi	r0, [r4], -r0, lsl #2
    30e4:	02000002 	andeq	r0, r0, #2
    30e8:	0b006891 	bleq	1d334 <DWHCITransferStageDataSetSplitComplete+0x44>
    30ec:	00022f04 	andeq	r2, r2, r4, lsl #30
    30f0:	08010500 	stmdaeq	r1, {r8, sl}
    30f4:	0000072a 	andeq	r0, r0, sl, lsr #14
    30f8:	0000410d 	andeq	r4, r0, sp, lsl #2
    30fc:	00024600 	andeq	r4, r2, r0, lsl #12
    3100:	008e0e00 	addeq	r0, lr, r0, lsl #28
    3104:	00060000 	andeq	r0, r6, r0
    3108:	0002560d 	andeq	r5, r2, sp, lsl #12
    310c:	00025600 	andeq	r5, r2, r0, lsl #12
    3110:	008e0e00 	addeq	r0, lr, r0, lsl #28
    3114:	00060000 	andeq	r0, r6, r0
    3118:	33060105 	movwcc	r0, #24837	; 0x6105
    311c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    3120:	00001a25 	andeq	r1, r0, r5, lsr #20
    3124:	69507a01 	ldmdbvs	r0, {r0, r9, fp, ip, sp, lr}^
    3128:	00600001 	rsbeq	r0, r0, r1
    312c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3130:	0000029e 	muleq	r0, lr, r2
    3134:	001a2e09 	andseq	r2, sl, r9, lsl #28
    3138:	9e7a0100 	rpwlse	f0, f2, f0
    313c:	02000002 	andeq	r0, r0, #2
    3140:	88096491 	stmdahi	r9, {r0, r4, r7, sl, sp, lr}
    3144:	0100001b 	tsteq	r0, fp, lsl r0
    3148:	0000417a 	andeq	r4, r0, sl, ror r1
    314c:	60910200 	addsvs	r0, r1, r0, lsl #4
    3150:	001a1709 	andseq	r1, sl, r9, lsl #14
    3154:	9e7a0100 	rpwlse	f0, f2, f0
    3158:	02000002 	andeq	r0, r0, #2
    315c:	00107891 	mulseq	r0, r1, r8
    3160:	02a4040b 	adceq	r0, r4, #184549376	; 0xb000000
    3164:	56110000 	ldrpl	r0, [r1], -r0
    3168:	08000002 	stmdaeq	r0, {r1}
    316c:	00001a3d 	andeq	r1, r0, sp, lsr sl
    3170:	69b08701 	ldmibvs	r0!, {r0, r8, r9, sl, pc}
    3174:	005c0001 	subseq	r0, ip, r1
    3178:	9c010000 	stcls	0, cr0, [r1], {-0}
    317c:	000002e9 	andeq	r0, r0, r9, ror #5
    3180:	001b3b09 	andseq	r3, fp, r9, lsl #22
    3184:	9e870100 	rmflss	f0, f7, f0
    3188:	02000002 	andeq	r0, r0, #2
    318c:	a4096c91 	strge	r6, [r9], #-3217	; 0xfffff36f
    3190:	0100001a 	tsteq	r0, sl, lsl r0
    3194:	00029e87 	andeq	r9, r2, r7, lsl #29
    3198:	68910200 	ldmvs	r1, {r9}
    319c:	001a6009 	andseq	r6, sl, r9
    31a0:	41870100 	orrmi	r0, r7, r0, lsl #2
    31a4:	02000000 	andeq	r0, r0, #0
    31a8:	08006491 	stmdaeq	r0, {r0, r4, r7, sl, sp, lr}
    31ac:	00001a53 	andeq	r1, r0, r3, asr sl
    31b0:	6a0c8d01 	bvs	3265bc <mailbuffer+0x2eb4cc>
    31b4:	004c0001 	subeq	r0, ip, r1
    31b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    31bc:	00000329 	andeq	r0, r0, r9, lsr #6
    31c0:	00265309 	eoreq	r5, r6, r9, lsl #6
    31c4:	298d0100 	stmibcs	sp, {r8}
    31c8:	02000003 	andeq	r0, r0, #3
    31cc:	0e096c91 	mcreq	12, 0, r6, cr9, cr1, {4}
    31d0:	0100002c 	tsteq	r0, ip, lsr #32
    31d4:	0000418d 	andeq	r4, r0, sp, lsl #3
    31d8:	68910200 	ldmvs	r1, {r9}
    31dc:	001a2e09 	andseq	r2, sl, r9, lsl #28
    31e0:	9e8d0100 	rmflse	f0, f5, f0
    31e4:	02000002 	andeq	r0, r0, #2
    31e8:	0b006491 	bleq	1c434 <DWHCIRegisterSet+0x30>
    31ec:	00032f04 	andeq	r2, r3, r4, lsl #30
    31f0:	360a1200 	strcc	r1, [sl], -r0, lsl #4
    31f4:	0100001a 	tsteq	r0, sl, lsl r0
    31f8:	00004894 	muleq	r0, r4, r8
    31fc:	016a5800 	cmneq	sl, r0, lsl #16
    3200:	00005800 	andeq	r5, r0, r0, lsl #16
    3204:	589c0100 	ldmpl	ip, {r8}
    3208:	09000003 	stmdbeq	r0, {r0, r1}
    320c:	00002bf3 	strdeq	r2, [r0], -r3
    3210:	00419401 	subeq	r9, r1, r1, lsl #8
    3214:	91020000 	mrsls	r0, (UNDEF: 2)
    3218:	7408006c 	strvc	r0, [r8], #-108	; 0xffffff94
    321c:	0100001a 	tsteq	r0, sl, lsl r0
    3220:	016ab098 			; <UNDEFINED> instruction: 0x016ab098
    3224:	00004c00 	andeq	r4, r0, r0, lsl #24
    3228:	7c9c0100 	ldfvcs	f0, [ip], {0}
    322c:	09000003 	stmdbeq	r0, {r0, r1}
    3230:	00001b41 	andeq	r1, r0, r1, asr #22
    3234:	00489801 	subeq	r9, r8, r1, lsl #16
    3238:	91020000 	mrsls	r0, (UNDEF: 2)
    323c:	840a006c 	strhi	r0, [sl], #-108	; 0xffffff94
    3240:	01000049 	tsteq	r0, r9, asr #32
    3244:	0000489c 	muleq	r0, ip, r8
    3248:	016afc00 	msreq	SPSR_fx, r0, lsl #24
    324c:	00009000 	andeq	r9, r0, r0
    3250:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    3254:	13000003 	movwne	r0, #3
    3258:	9c010073 	stcls	0, cr0, [r1], {115}	; 0x73
    325c:	00000048 	andeq	r0, r0, r8, asr #32
    3260:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    3264:	9c010063 	stcls	0, cr0, [r1], {99}	; 0x63
    3268:	00000060 	andeq	r0, r0, r0, rrx
    326c:	13609102 	cmnne	r0, #-2147483648	; 0x80000000
    3270:	9c01006e 	stcls	0, cr0, [r1], {110}	; 0x6e
    3274:	00000067 	andeq	r0, r0, r7, rrx
    3278:	0f5c9102 	svceq	0x005c9102
    327c:	9d010070 	stcls	0, cr0, [r1, #-448]	; 0xfffffe40
    3280:	00000229 	andeq	r0, r0, r9, lsr #4
    3284:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3288:	0048ce0a 	subeq	ip, r8, sl, lsl #28
    328c:	60a30100 	adcvs	r0, r3, r0, lsl #2
    3290:	8c000000 	stchi	0, cr0, [r0], {-0}
    3294:	cc00016b 	stfgts	f0, [r0], {107}	; 0x6b
    3298:	01000000 	mrseq	r0, (UNDEF: 0)
    329c:	0004209c 	muleq	r4, ip, r0
    32a0:	31731300 	cmncc	r3, r0, lsl #6
    32a4:	29a30100 	stmibcs	r3!, {r8}
    32a8:	02000003 	andeq	r0, r0, #3
    32ac:	73136491 	tstvc	r3, #-1862270976	; 0x91000000
    32b0:	a3010032 	movwge	r0, #4146	; 0x1032
    32b4:	00000329 	andeq	r0, r0, r9, lsr #6
    32b8:	13609102 	cmnne	r0, #-2147483648	; 0x80000000
    32bc:	a301006e 	movwge	r0, #4206	; 0x106e
    32c0:	00000067 	andeq	r0, r0, r7, rrx
    32c4:	0f5c9102 	svceq	0x005c9102
    32c8:	01003170 	tsteq	r0, r0, ror r1
    32cc:	000420a4 	andeq	r2, r4, r4, lsr #1
    32d0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    32d4:	0032700f 	eorseq	r7, r2, pc
    32d8:	0420a401 	strteq	sl, [r0], #-1025	; 0xfffffbff
    32dc:	91020000 	mrsls	r0, (UNDEF: 2)
    32e0:	040b0068 	streq	r0, [fp], #-104	; 0xffffff98
    32e4:	00000426 	andeq	r0, r0, r6, lsr #8
    32e8:	00022f11 	andeq	r2, r2, r1, lsl pc
    32ec:	49b60a00 	ldmibmi	r6!, {r9, fp}
    32f0:	ad010000 	stcge	0, cr0, [r1, #-0]
    32f4:	00000048 	andeq	r0, r0, r8, asr #32
    32f8:	00016c58 	andeq	r6, r1, r8, asr ip
    32fc:	000000a0 	andeq	r0, r0, r0, lsr #1
    3300:	04879c01 	streq	r9, [r7], #3073	; 0xc01
    3304:	20090000 	andcs	r0, r9, r0
    3308:	0100001a 	tsteq	r0, sl, lsl r0
    330c:	000048ad 	andeq	r4, r0, sp, lsr #17
    3310:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3314:	63727313 	cmnvs	r2, #1275068416	; 0x4c000000
    3318:	29ad0100 	stmibcs	sp!, {r8}
    331c:	02000003 	andeq	r0, r0, #3
    3320:	6e136091 	mrcvs	0, 0, r6, cr3, cr1, {4}
    3324:	67ad0100 	strvs	r0, [sp, r0, lsl #2]!
    3328:	02000000 	andeq	r0, r0, #0
    332c:	640f5c91 	strvs	r5, [pc], #-3217	; 3334 <_start-0x4ccc>
    3330:	ae010070 	mcrge	0, 0, r0, cr1, cr0, {3}
    3334:	00000487 	andeq	r0, r0, r7, lsl #9
    3338:	0f6c9102 	svceq	0x006c9102
    333c:	01007073 	tsteq	r0, r3, ror r0
    3340:	00029eaf 	andeq	r9, r2, pc, lsr #29
    3344:	68910200 	ldmvs	r1, {r9}
    3348:	56040b00 	strpl	r0, [r4], -r0, lsl #22
    334c:	0a000002 	beq	335c <_start-0x4ca4>
    3350:	000048c1 	andeq	r4, r0, r1, asr #17
    3354:	0487b501 	streq	fp, [r7], #1281	; 0x501
    3358:	6cf80000 	ldclvs	0, cr0, [r8]
    335c:	00d40001 	sbcseq	r0, r4, r1
    3360:	9c010000 	stcls	0, cr0, [r1], {-0}
    3364:	000004dd 	ldrdeq	r0, [r0], -sp
    3368:	001a2009 	andseq	r2, sl, r9
    336c:	87b50100 	ldrhi	r0, [r5, r0, lsl #2]!
    3370:	02000004 	andeq	r0, r0, #4
    3374:	73136491 	tstvc	r3, #-1862270976	; 0x91000000
    3378:	01006372 	tsteq	r0, r2, ror r3
    337c:	00029eb5 			; <UNDEFINED> instruction: 0x00029eb5
    3380:	60910200 	addsvs	r0, r1, r0, lsl #4
    3384:	01006e13 	tsteq	r0, r3, lsl lr
    3388:	000067b5 			; <UNDEFINED> instruction: 0x000067b5
    338c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    3390:	7465720f 	strbtvc	r7, [r5], #-527	; 0xfffffdf1
    3394:	87b60100 	ldrhi	r0, [r6, r0, lsl #2]!
    3398:	02000004 	andeq	r0, r0, #4
    339c:	14006c91 	strne	r6, [r0], #-3217	; 0xfffff36f
    33a0:	000017b1 			; <UNDEFINED> instruction: 0x000017b1
    33a4:	02560304 	subseq	r0, r6, #4, 6	; 0x10000000
    33a8:	03050000 	movweq	r0, #20480	; 0x5000
    33ac:	0003b07c 	andeq	fp, r3, ip, ror r0
    33b0:	0003b400 	andeq	fp, r3, r0, lsl #8
    33b4:	61000400 	tstvs	r0, r0, lsl #8
    33b8:	0400000e 	streq	r0, [r0], #-14
    33bc:	00001901 	andeq	r1, r0, r1, lsl #18
    33c0:	1ba30100 	blne	fe8c37c8 <_estack+0xf68b37c8>
    33c4:	0ddc0000 	ldcleq	0, cr0, [ip]
    33c8:	6dcc0000 	stclvs	0, cr0, [ip]
    33cc:	03440001 	movteq	r0, #16385	; 0x4001
    33d0:	16a30000 	strtne	r0, [r3], r0
    33d4:	01020000 	mrseq	r0, (UNDEF: 2)
    33d8:	00073306 	andeq	r3, r7, r6, lsl #6
    33dc:	08010200 	stmdaeq	r1, {r9}
    33e0:	0000072a 	andeq	r0, r0, sl, lsr #14
    33e4:	1d070402 	cfstrsne	mvf0, [r7, #-8]
    33e8:	03000007 	movweq	r0, #7
    33ec:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    33f0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    33f4:	0001d407 	andeq	sp, r1, r7, lsl #8
    33f8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    33fc:	00000132 	andeq	r0, r0, r2, lsr r1
    3400:	00387504 	eorseq	r7, r8, r4, lsl #10
    3404:	002c1702 	eoreq	r1, ip, r2, lsl #14
    3408:	75040000 	strvc	r0, [r4, #-0]
    340c:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    3410:	00004818 	andeq	r4, r0, r8, lsl r8
    3414:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3418:	00000713 	andeq	r0, r0, r3, lsl r7
    341c:	b8050202 	stmdalt	r5, {r1, r9}
    3420:	02000007 	andeq	r0, r0, #7
    3424:	07180704 	ldreq	r0, [r8, -r4, lsl #14]
    3428:	04020000 	streq	r0, [r2], #-0
    342c:	00079805 	andeq	r9, r7, r5, lsl #16
    3430:	03010500 	movweq	r0, #5376	; 0x1500
    3434:	0001fb20 	andeq	pc, r1, r0, lsr #22
    3438:	1dfc0600 	ldclne	6, cr0, [ip]
    343c:	06000000 	streq	r0, [r0], -r0
    3440:	00001df3 	strdeq	r1, [r0], -r3
    3444:	16060180 	strne	r0, [r6], -r0, lsl #3
    3448:	8100001e 	tsthi	r0, lr, lsl r0
    344c:	1cd00601 	ldclne	6, cr0, [r0], {1}
    3450:	01820000 	orreq	r0, r2, r0
    3454:	001c2406 	andseq	r2, ip, r6, lsl #8
    3458:	06018300 	streq	r8, [r1], -r0, lsl #6
    345c:	00001ce9 	andeq	r1, r0, r9, ror #25
    3460:	31060184 	smlabbcc	r6, r4, r1, r0
    3464:	8500001c 	strhi	r0, [r0, #-28]	; 0xffffffe4
    3468:	1c4b0601 	mcrrne	6, 0, r0, fp, cr1
    346c:	01860000 	orreq	r0, r6, r0
    3470:	001eea06 	andseq	lr, lr, r6, lsl #20
    3474:	06018700 	streq	r8, [r1], -r0, lsl #14
    3478:	00001c68 	andeq	r1, r0, r8, ror #24
    347c:	3f060188 	svccc	0x00060188
    3480:	8900001d 	stmdbhi	r0, {r0, r2, r3, r4}
    3484:	1cdd0601 	ldclne	6, cr0, [sp], {1}
    3488:	018a0000 	orreq	r0, sl, r0
    348c:	001efc06 	andseq	pc, lr, r6, lsl #24
    3490:	06018b00 	streq	r8, [r1], -r0, lsl #22
    3494:	00001ef4 	strdeq	r1, [r0], -r4
    3498:	0e06018c 	adfeqd	f0, f6, #4.0
    349c:	8d00001e 	stchi	0, cr0, [r0, #-120]	; 0xffffff88
    34a0:	1cc70601 	stclne	6, cr0, [r7], {1}
    34a4:	018e0000 	orreq	r0, lr, r0
    34a8:	001ea306 	andseq	sl, lr, r6, lsl #6
    34ac:	06018f00 	streq	r8, [r1], -r0, lsl #30
    34b0:	00001ea9 	andeq	r1, r0, r9, lsr #29
    34b4:	af060190 	svcge	0x00060190
    34b8:	9100001e 	tstls	r0, lr, lsl r0
    34bc:	1eb50601 	cdpne	6, 11, cr0, cr5, cr1, {0}
    34c0:	01920000 	orrseq	r0, r2, r0
    34c4:	001ebb06 	andseq	fp, lr, r6, lsl #22
    34c8:	06019300 	streq	r9, [r1], -r0, lsl #6
    34cc:	00001ec1 	andeq	r1, r0, r1, asr #29
    34d0:	c7060194 			; <UNDEFINED> instruction: 0xc7060194
    34d4:	9500001e 	strls	r0, [r0, #-30]	; 0xffffffe2
    34d8:	1ecd0601 	cdpne	6, 12, cr0, cr13, cr1, {0}
    34dc:	01960000 	orrseq	r0, r6, r0
    34e0:	001ed306 	andseq	sp, lr, r6, lsl #6
    34e4:	06019700 	streq	r9, [r1], -r0, lsl #14
    34e8:	00001c53 	andeq	r1, r0, r3, asr ip
    34ec:	5a060198 	bpl	183b54 <mailbuffer+0x148a64>
    34f0:	9900001c 	stmdbls	r0, {r2, r3, r4}
    34f4:	1c610601 	stclne	6, cr0, [r1], #-4
    34f8:	019a0000 	orrseq	r0, sl, r0
    34fc:	001e7f06 	andseq	r7, lr, r6, lsl #30
    3500:	06019b00 	streq	r9, [r1], -r0, lsl #22
    3504:	00001bf6 	strdeq	r1, [r0], -r6
    3508:	1006019c 	mulne	r6, ip, r1
    350c:	9d00001d 	stcls	0, cr0, [r0, #-116]	; 0xffffff8c
    3510:	1dd70601 	ldclne	6, cr0, [r7, #4]
    3514:	019e0000 	orrseq	r0, lr, r0
    3518:	001ed906 	andseq	sp, lr, r6, lsl #18
    351c:	06019f00 	streq	r9, [r1], -r0, lsl #30
    3520:	00001c02 	andeq	r1, r0, r2, lsl #24
    3524:	8d0601a0 	stfhis	f0, [r6, #-640]	; 0xfffffd80
    3528:	a100001d 	tstge	r0, sp, lsl r0
    352c:	1dbf0601 	ldcne	6, cr0, [pc, #4]!	; 3538 <_start-0x4ac8>
    3530:	01a20000 			; <UNDEFINED> instruction: 0x01a20000
    3534:	001d6e06 	andseq	r6, sp, r6, lsl #28
    3538:	0601a300 	streq	sl, [r1], -r0, lsl #6
    353c:	00001e04 	andeq	r1, r0, r4, lsl #28
    3540:	200601a4 	andcs	r0, r6, r4, lsr #3
    3544:	a500001e 	strge	r0, [r0, #-30]	; 0xffffffe2
    3548:	1d270601 	stcne	6, cr0, [r7, #-4]!
    354c:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
    3550:	001d2f06 	andseq	r2, sp, r6, lsl #30
    3554:	0601a700 	streq	sl, [r1], -r0, lsl #14
    3558:	00001d37 	andeq	r1, r0, r7, lsr sp
    355c:	e20601a8 	and	r0, r6, #168, 2	; 0x2a
    3560:	a900001e 	stmdbge	r0, {r1, r2, r3, r4}
    3564:	1d460601 	stclne	6, cr0, [r6, #-4]
    3568:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    356c:	001d4e06 	andseq	r4, sp, r6, lsl #28
    3570:	0601ab00 	streq	sl, [r1], -r0, lsl #22
    3574:	00001d56 	andeq	r1, r0, r6, asr sp
    3578:	5e0601ac 	adfpldp	f0, f6, #4.0
    357c:	ad00001d 	stcge	0, cr0, [r0, #-116]	; 0xffffff8c
    3580:	1d660601 	stclne	6, cr0, [r6, #-4]!
    3584:	01ae0000 			; <UNDEFINED> instruction: 0x01ae0000
    3588:	001d1f06 	andseq	r1, sp, r6, lsl #30
    358c:	0601af00 	streq	sl, [r1], -r0, lsl #30
    3590:	00001e2c 	andeq	r1, r0, ip, lsr #28
    3594:	b30601b0 	movwlt	r0, #25008	; 0x61b0
    3598:	b100001d 	tstlt	r0, sp, lsl r0
    359c:	1caa0601 	stcne	6, cr0, [sl], #4
    35a0:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    35a4:	001b9806 	andseq	r9, fp, r6, lsl #16
    35a8:	0001b300 	andeq	fp, r1, r0, lsl #6
    35ac:	00004f07 	andeq	r4, r0, r7, lsl #30
    35b0:	00020b00 	andeq	r0, r2, r0, lsl #22
    35b4:	00410800 	subeq	r0, r1, r0, lsl #16
    35b8:	00050000 	andeq	r0, r5, r0
    35bc:	001cb709 	andseq	fp, ip, r9, lsl #14
    35c0:	12010e00 	andne	r0, r1, #0, 28
    35c4:	0000023c 	andeq	r0, r0, ip, lsr r2
    35c8:	001c880a 	andseq	r8, ip, sl, lsl #16
    35cc:	fb140100 	blx	5039d6 <mailbuffer+0x4c88e6>
    35d0:	00000001 	andeq	r0, r0, r1
    35d4:	001e390a 	andseq	r3, lr, sl, lsl #18
    35d8:	fb150100 	blx	5439e2 <mailbuffer+0x5088f2>
    35dc:	06000001 	streq	r0, [r0], -r1
    35e0:	001de50a 	andseq	lr, sp, sl, lsl #10
    35e4:	59160100 	ldmdbpl	r6, {r8}
    35e8:	0c000000 	stceq	0, cr0, [r0], {-0}
    35ec:	1cb70b00 	vldmiane	r7!, {d0-d-1}
    35f0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    35f4:	0000020b 	andeq	r0, r0, fp, lsl #4
    35f8:	001e7409 	andseq	r7, lr, r9, lsl #8
    35fc:	1b011c00 	blne	4a604 <mailbuffer+0xf514>
    3600:	000002c0 	andeq	r0, r0, r0, asr #5
    3604:	001c3b0a 	andseq	r3, ip, sl, lsl #22
    3608:	591d0100 	ldmdbpl	sp, {r8}
    360c:	00000000 	andeq	r0, r0, r0
    3610:	001e430a 	andseq	r4, lr, sl, lsl #6
    3614:	591f0100 	ldmdbpl	pc, {r8}	; <UNPREDICTABLE>
    3618:	02000000 	andeq	r0, r0, #0
    361c:	001e590a 	andseq	r5, lr, sl, lsl #18
    3620:	4f210100 	svcmi	0x00210100
    3624:	04000000 	streq	r0, [r0], #-0
    3628:	001c0d0a 	andseq	r0, ip, sl, lsl #26
    362c:	4f220100 	svcmi	0x00220100
    3630:	05000000 	streq	r0, [r0, #-0]
    3634:	001e8e0a 	andseq	r8, lr, sl, lsl #28
    3638:	59230100 	stmdbpl	r3!, {r8}
    363c:	06000000 	streq	r0, [r0], -r0
    3640:	001d7d0a 	andseq	r7, sp, sl, lsl #26
    3644:	fb260100 	blx	983a4e <mailbuffer+0x94895e>
    3648:	08000001 	stmdaeq	r0, {r0}
    364c:	001c720a 	andseq	r7, ip, sl, lsl #4
    3650:	c0270100 	eorgt	r0, r7, r0, lsl #2
    3654:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3658:	001cf30a 	andseq	pc, ip, sl, lsl #6
    365c:	fb280100 	blx	a03a66 <mailbuffer+0x9c8976>
    3660:	12000001 	andne	r0, r0, #1
    3664:	001c940a 	andseq	r9, ip, sl, lsl #8
    3668:	c0290100 	eorgt	r0, r9, r0, lsl #2
    366c:	18000002 	stmdane	r0, {r1}
    3670:	004f0700 	subeq	r0, pc, r0, lsl #14
    3674:	02d00000 	sbcseq	r0, r0, #0
    3678:	41080000 	mrsmi	r0, (UNDEF: 8)
    367c:	03000000 	movweq	r0, #0
    3680:	1e740b00 	vaddne.f64	d16, d4, d0
    3684:	2b010000 	blcs	4368c <mailbuffer+0x859c>
    3688:	00000247 	andeq	r0, r0, r7, asr #4
    368c:	001f0209 	andseq	r0, pc, r9, lsl #4
    3690:	2d012a00 	vstrcs	s4, [r1, #-0]
    3694:	00000300 	andeq	r0, r0, r0, lsl #6
    3698:	001dce0a 	andseq	ip, sp, sl, lsl #28
    369c:	3c2f0100 	stfccs	f0, [pc], #-0	; 36a4 <_start-0x495c>
    36a0:	00000002 	andeq	r0, r0, r2
    36a4:	5052410c 	subspl	r4, r2, ip, lsl #2
    36a8:	d0300100 	eorsle	r0, r0, r0, lsl #2
    36ac:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    36b0:	1f020b00 	svcne	0x00020b00
    36b4:	32010000 	andcc	r0, r1, #0
    36b8:	000002db 	ldrdeq	r0, [r0], -fp
    36bc:	7072610d 	rsbsvc	r6, r2, sp, lsl #2
    36c0:	3a380100 	bcc	e03ac8 <mailbuffer+0xdc89d8>
    36c4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    36c8:	4400016d 	strmi	r0, [r0], #-365	; 0xfffffe93
    36cc:	01000003 	tsteq	r0, r3
    36d0:	0003649c 	muleq	r3, ip, r4
    36d4:	1da50e00 	stcne	14, cr0, [r5]
    36d8:	50010000 	andpl	r0, r1, r0
    36dc:	000001fb 	strdeq	r0, [r0], -fp
    36e0:	0f649102 	svceq	0x00649102
    36e4:	00000000 	andeq	r0, r0, r0
    36e8:	000c910e 	andeq	r9, ip, lr, lsl #2
    36ec:	64550100 	ldrbvs	r0, [r5], #-256	; 0xffffff00
    36f0:	03000003 	movweq	r0, #3
    36f4:	0e73a091 	mrceq	0, 3, sl, cr3, cr1, {4}
    36f8:	00001e96 	muleq	r0, r6, lr
    36fc:	00335601 	eorseq	r5, r3, r1, lsl #12
    3700:	91020000 	mrsls	r0, (UNDEF: 2)
    3704:	1e6a0e60 	cdpne	14, 6, cr0, cr10, cr0, {3}
    3708:	63010000 	movwvs	r0, #4096	; 0x1000
    370c:	00000375 	andeq	r0, r0, r5, ror r3
    3710:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3714:	004f0700 	subeq	r0, pc, r0, lsl #14
    3718:	03750000 	cmneq	r5, #0
    371c:	41100000 	tstmi	r0, r0
    3720:	3f000000 	svccc	0x00000000
    3724:	04110006 	ldreq	r0, [r1], #-6
    3728:	00000300 	andeq	r0, r0, r0, lsl #6
    372c:	001d030e 	andseq	r0, sp, lr, lsl #6
    3730:	8c340100 	ldfhis	f0, [r4], #-0
    3734:	05000003 	streq	r0, [r0, #-3]
    3738:	02de8803 	sbcseq	r8, lr, #196608	; 0x30000
    373c:	02c01200 	sbceq	r1, r0, #0, 4
    3740:	25070000 	strcs	r0, [r7, #-0]
    3744:	a1000000 	mrsge	r0, (UNDEF: 0)
    3748:	08000003 	stmdaeq	r0, {r0, r1}
    374c:	00000041 	andeq	r0, r0, r1, asr #32
    3750:	9a0e0006 	bls	383770 <mailbuffer+0x348680>
    3754:	0100001d 	tsteq	r0, sp, lsl r0
    3758:	0003b236 	andeq	fp, r3, r6, lsr r2
    375c:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    3760:	120002de 	andne	r0, r0, #-536870899	; 0xe000000d
    3764:	00000391 	muleq	r0, r1, r3
    3768:	00158400 	andseq	r8, r5, r0, lsl #8
    376c:	43000400 	movwmi	r0, #1024	; 0x400
    3770:	0400000f 	streq	r0, [r0], #-15
    3774:	00001901 	andeq	r1, r0, r1, lsl #18
    3778:	2b540100 	blcs	1503b80 <mailbuffer+0x14c8a90>
    377c:	0ddc0000 	ldcleq	0, cr0, [ip]
    3780:	71100000 	tstvc	r0, r0
    3784:	13c40001 	bicne	r0, r4, #1
    3788:	17cc0000 	strbne	r0, [ip, r0]
    378c:	75020000 	strvc	r0, [r2, #-0]
    3790:	17020038 	smladxne	r2, r8, r0, r0
    3794:	0000002f 	andeq	r0, r0, pc, lsr #32
    3798:	2a080103 	bcs	203bac <mailbuffer+0x1c8abc>
    379c:	02000007 	andeq	r0, r0, #7
    37a0:	00363175 	eorseq	r3, r6, r5, ror r1
    37a4:	00411802 	subeq	r1, r1, r2, lsl #16
    37a8:	02030000 	andeq	r0, r3, #0
    37ac:	00013207 	andeq	r3, r1, r7, lsl #4
    37b0:	33750200 	cmncc	r5, #0, 4
    37b4:	19020032 	stmdbne	r2, {r1, r4, r5}
    37b8:	00000053 	andeq	r0, r0, r3, asr r0
    37bc:	1d070403 	cfstrsne	mvf0, [r7, #-12]
    37c0:	03000007 	movweq	r0, #7
    37c4:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
    37c8:	01030000 	mrseq	r0, (UNDEF: 3)
    37cc:	00073306 	andeq	r3, r7, r6, lsl #6
    37d0:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    37d4:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    37d8:	69050404 	stmdbvs	r5, {r2, sl}
    37dc:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
    37e0:	00002930 	andeq	r2, r0, r0, lsr r9
    37e4:	006f2002 	rsbeq	r2, pc, r2
    37e8:	04030000 	streq	r0, [r3], #-0
    37ec:	00071807 	andeq	r1, r7, r7, lsl #16
    37f0:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    37f4:	00000798 	muleq	r0, r8, r7
    37f8:	0026f006 	eoreq	pc, r6, r6
    37fc:	19031000 	stmdbne	r3, {ip}
    3800:	000000cc 	andeq	r0, r0, ip, asr #1
    3804:	001f2307 	andseq	r2, pc, r7, lsl #6
    3808:	cc1b0300 	ldcgt	3, cr0, [fp], {-0}
    380c:	00000000 	andeq	r0, r0, r0
    3810:	00221b07 	eoreq	r1, r2, r7, lsl #22
    3814:	d21c0300 	andsle	r0, ip, #0, 6
    3818:	04000000 	streq	r0, [r0], #-0
    381c:	0020e207 	eoreq	lr, r0, r7, lsl #4
    3820:	d81d0300 	ldmdale	sp, {r8, r9}
    3824:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3828:	0029f807 	eoreq	pc, r9, r7, lsl #16
    382c:	761e0300 	ldrvc	r0, [lr], -r0, lsl #6
    3830:	0c000000 	stceq	0, cr0, [r0], {-0}
    3834:	8f040800 	svchi	0x00040800
    3838:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    383c:	00006104 	andeq	r6, r0, r4, lsl #2
    3840:	05040900 	streq	r0, [r4, #-2304]	; 0xfffff700
    3844:	000026f0 	strdeq	r2, [r0], -r0
    3848:	008f2003 	addeq	r2, pc, r3
    384c:	c1060000 	mrsgt	r0, (UNDEF: 6)
    3850:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    3854:	00fe2203 	rscseq	r2, lr, r3, lsl #4
    3858:	0b070000 	bleq	1c3860 <mailbuffer+0x188770>
    385c:	0300002b 	movweq	r0, #43	; 0x2b
    3860:	0000fe24 	andeq	pc, r0, r4, lsr #28
    3864:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3868:	0000da04 	andeq	sp, r0, r4, lsl #20
    386c:	21c10500 	biccs	r0, r1, r0, lsl #10
    3870:	26030000 	strcs	r0, [r3], -r0
    3874:	000000e5 	andeq	r0, r0, r5, ror #1
    3878:	1b04010a 	blne	103ca8 <mailbuffer+0xc8bb8>
    387c:	0000012a 	andeq	r0, r0, sl, lsr #2
    3880:	0025460b 	eoreq	r4, r5, fp, lsl #12
    3884:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
    3888:	0100002b 	tsteq	r0, fp, lsr #32
    388c:	0028bb0b 	eoreq	fp, r8, fp, lsl #22
    3890:	05000200 	streq	r0, [r0, #-512]	; 0xfffffe00
    3894:	00002213 	andeq	r2, r0, r3, lsl r2
    3898:	010f2204 	tsteq	pc, r4, lsl #4
    389c:	010a0000 	mrseq	r0, (UNDEF: 10)
    38a0:	01562b04 	cmpeq	r6, r4, lsl #22
    38a4:	9a0b0000 	bls	2c38ac <mailbuffer+0x2887bc>
    38a8:	00000025 	andeq	r0, r0, r5, lsr #32
    38ac:	002c490b 	eoreq	r4, ip, fp, lsl #18
    38b0:	210b0100 	mrscs	r0, (UNDEF: 27)
    38b4:	02000022 	andeq	r0, r0, #34	; 0x22
    38b8:	00265b0b 	eoreq	r5, r6, fp, lsl #22
    38bc:	05000300 	streq	r0, [r0, #-768]	; 0xfffffd00
    38c0:	00002421 	andeq	r2, r0, r1, lsr #8
    38c4:	01353104 	teqeq	r5, r4, lsl #2
    38c8:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    38cc:	01a63404 			; <UNDEFINED> instruction: 0x01a63404
    38d0:	76070000 	strvc	r0, [r7], -r0
    38d4:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    38d8:	00002f36 	andeq	r2, r0, r6, lsr pc
    38dc:	d3070000 	movwle	r0, #28672	; 0x7000
    38e0:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    38e4:	00002f37 	andeq	r2, r0, r7, lsr pc
    38e8:	f3070100 	vrhadd.u8	d0, d7, d0
    38ec:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    38f0:	00004138 	andeq	r4, r0, r8, lsr r1
    38f4:	0c070200 	sfmeq	f0, 4, [r7], {-0}
    38f8:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    38fc:	00004139 	andeq	r4, r0, r9, lsr r1
    3900:	b3070400 	movwlt	r0, #29696	; 0x7400
    3904:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    3908:	0000413a 	andeq	r4, r0, sl, lsr r1
    390c:	05000600 	streq	r0, [r0, #-1536]	; 0xfffffa00
    3910:	00002208 	andeq	r2, r0, r8, lsl #4
    3914:	01613d04 	cmneq	r1, r4, lsl #26
    3918:	120c0000 	andne	r0, ip, #0
    391c:	02625c04 	rsbeq	r5, r2, #4, 24	; 0x400
    3920:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    3924:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3928:	00002f5e 	andeq	r2, r0, lr, asr pc
    392c:	2b070000 	blcs	1c3934 <mailbuffer+0x188844>
    3930:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    3934:	00002f5f 	andeq	r2, r0, pc, asr pc
    3938:	8c070100 	stfhis	f0, [r7], {-0}
    393c:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    3940:	00004160 	andeq	r4, r0, r0, ror #2
    3944:	28070200 	stmdacs	r7, {r9}
    3948:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    394c:	00002f61 	andeq	r2, r0, r1, ror #30
    3950:	f6070400 			; <UNDEFINED> instruction: 0xf6070400
    3954:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    3958:	00002f62 	andeq	r2, r0, r2, ror #30
    395c:	9f070500 	svcls	0x00070500
    3960:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    3964:	00002f63 	andeq	r2, r0, r3, ror #30
    3968:	e7070600 	str	r0, [r7, -r0, lsl #12]
    396c:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    3970:	00002f64 	andeq	r2, r0, r4, ror #30
    3974:	56070700 	strpl	r0, [r7], -r0, lsl #14
    3978:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    397c:	00004166 	andeq	r4, r0, r6, ror #2
    3980:	44070800 	strmi	r0, [r7], #-2048	; 0xfffff800
    3984:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    3988:	00004167 	andeq	r4, r0, r7, ror #2
    398c:	35070a00 	strcc	r0, [r7, #-2560]	; 0xfffff600
    3990:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    3994:	00004168 	andeq	r4, r0, r8, ror #2
    3998:	fa070c00 	blx	1c69a0 <mailbuffer+0x18b8b0>
    399c:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    39a0:	00002f69 	andeq	r2, r0, r9, ror #30
    39a4:	3b070e00 	blcc	1c71ac <mailbuffer+0x18c0bc>
    39a8:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    39ac:	00002f6a 	andeq	r2, r0, sl, ror #30
    39b0:	22070f00 	andcs	r0, r7, #0, 30
    39b4:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    39b8:	00002f6b 	andeq	r2, r0, fp, ror #30
    39bc:	a8071000 	stmdage	r7, {ip}
    39c0:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    39c4:	00002f6c 	andeq	r2, r0, ip, ror #30
    39c8:	05001100 	streq	r1, [r0, #-256]	; 0xffffff00
    39cc:	000028c7 	andeq	r2, r0, r7, asr #17
    39d0:	01b16e04 			; <UNDEFINED> instruction: 0x01b16e04
    39d4:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    39d8:	02d67104 	sbcseq	r7, r6, #4, 2
    39dc:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    39e0:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    39e4:	00002f73 	andeq	r2, r0, r3, ror pc
    39e8:	2b070000 	blcs	1c39f0 <mailbuffer+0x188900>
    39ec:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    39f0:	00002f74 	andeq	r2, r0, r4, ror pc
    39f4:	88070100 	stmdahi	r7, {r8}
    39f8:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    39fc:	00004175 	andeq	r4, r0, r5, ror r1
    3a00:	b0070200 	andlt	r0, r7, r0, lsl #4
    3a04:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3a08:	00002f76 	andeq	r2, r0, r6, ror pc
    3a0c:	4f070400 	svcmi	0x00070400
    3a10:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    3a14:	00002f77 	andeq	r2, r0, r7, ror pc
    3a18:	90070500 	andls	r0, r7, r0, lsl #10
    3a1c:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    3a20:	00002f78 	andeq	r2, r0, r8, ror pc
    3a24:	8d070600 	stchi	6, cr0, [r7, #-0]
    3a28:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    3a2c:	00002f79 	andeq	r2, r0, r9, ror pc
    3a30:	b3070700 	movwlt	r0, #30464	; 0x7700
    3a34:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    3a38:	00002f7a 	andeq	r2, r0, sl, ror pc
    3a3c:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    3a40:	00002306 	andeq	r2, r0, r6, lsl #6
    3a44:	026d7c04 	rsbeq	r7, sp, #4, 24	; 0x400
    3a48:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    3a4c:	03567f04 	cmpeq	r6, #4, 30
    3a50:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    3a54:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3a58:	00002f81 	andeq	r2, r0, r1, lsl #31
    3a5c:	2b070000 	blcs	1c3a64 <mailbuffer+0x188974>
    3a60:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    3a64:	00002f82 	andeq	r2, r0, r2, lsl #31
    3a68:	17070100 	strne	r0, [r7, -r0, lsl #2]
    3a6c:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    3a70:	00002f83 	andeq	r2, r0, r3, lsl #31
    3a74:	41070200 	mrsmi	r0, (UNDEF: 39)
    3a78:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    3a7c:	00002f84 	andeq	r2, r0, r4, lsl #31
    3a80:	69070300 	stmdbvs	r7, {r8, r9}
    3a84:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    3a88:	00002f85 	andeq	r2, r0, r5, lsl #31
    3a8c:	21070400 	tstcs	r7, r0, lsl #8
    3a90:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    3a94:	00002f86 	andeq	r2, r0, r6, lsl #31
    3a98:	29070500 	stmdbcs	r7, {r8, sl}
    3a9c:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    3aa0:	00002f87 	andeq	r2, r0, r7, lsl #31
    3aa4:	95070600 	strls	r0, [r7, #-1536]	; 0xfffffa00
    3aa8:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    3aac:	00002f88 	andeq	r2, r0, r8, lsl #31
    3ab0:	16070700 	strne	r0, [r7], -r0, lsl #14
    3ab4:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    3ab8:	00002f89 	andeq	r2, r0, r9, lsl #31
    3abc:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    3ac0:	000027e4 	andeq	r2, r0, r4, ror #15
    3ac4:	02e18b04 	rsceq	r8, r1, #4, 22	; 0x1000
    3ac8:	070c0000 	streq	r0, [ip, -r0]
    3acc:	03b28e04 			; <UNDEFINED> instruction: 0x03b28e04
    3ad0:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    3ad4:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3ad8:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    3adc:	2b070000 	blcs	1c3ae4 <mailbuffer+0x1889f4>
    3ae0:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    3ae4:	00002f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    3ae8:	c9070100 	stmdbgt	r7, {r8}
    3aec:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    3af0:	00002f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    3af4:	8d070200 	sfmhi	f0, 4, [r7, #-0]
    3af8:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    3afc:	00002f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    3b00:	60070300 	andvs	r0, r7, r0, lsl #6
    3b04:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3b08:	00004194 	muleq	r0, r4, r1
    3b0c:	22070400 	andcs	r0, r7, #0, 8
    3b10:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    3b14:	00002f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    3b18:	05000600 	streq	r0, [r0, #-1536]	; 0xfffffa00
    3b1c:	00002bda 	ldrdeq	r2, [r0], -sl
    3b20:	03619704 	cmneq	r1, #4, 14	; 0x100000
    3b24:	020c0000 	andeq	r0, ip, #0
    3b28:	03de9c04 	bicseq	r9, lr, #4, 24	; 0x400
    3b2c:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    3b30:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3b34:	00002f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    3b38:	2b070000 	blcs	1c3b40 <mailbuffer+0x188a50>
    3b3c:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    3b40:	00002f9f 	muleq	r0, pc, pc	; <UNPREDICTABLE>
    3b44:	0d000100 	stfeqs	f0, [r0, #-0]
    3b48:	139a0409 	orrsne	r0, sl, #150994944	; 0x9000000
    3b4c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    3b50:	00003c02 	andeq	r3, r0, r2, lsl #24
    3b54:	03bda104 			; <UNDEFINED> instruction: 0x03bda104
    3b58:	910e0000 	mrsls	r0, (UNDEF: 14)
    3b5c:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    3b60:	0002d6a3 	andeq	sp, r2, r3, lsr #13
    3b64:	3c4c0e00 	mcrrcc	14, 0, r0, ip, cr0
    3b68:	a4040000 	strge	r0, [r4], #-0
    3b6c:	00000356 	andeq	r0, r0, r6, asr r3
    3b70:	0025840e 	eoreq	r8, r5, lr, lsl #8
    3b74:	b2a50400 	adclt	r0, r5, #0, 8
    3b78:	00000003 	andeq	r0, r0, r3
    3b7c:	0026fc05 	eoreq	pc, r6, r5, lsl #24
    3b80:	dea70400 	cdple	4, 10, cr0, cr7, cr0, {0}
    3b84:	06000003 	streq	r0, [r0], -r3
    3b88:	00002466 	andeq	r2, r0, r6, ror #8
    3b8c:	4fa90402 	svcmi	0x00a90402
    3b90:	07000004 	streq	r0, [r0, -r4]
    3b94:	000029a8 	andeq	r2, r0, r8, lsr #19
    3b98:	002fab04 	eoreq	sl, pc, r4, lsl #22
    3b9c:	07000000 	streq	r0, [r0, -r0]
    3ba0:	0000242b 	andeq	r2, r0, fp, lsr #8
    3ba4:	002fac04 	eoreq	sl, pc, r4, lsl #24
    3ba8:	07010000 	streq	r0, [r1, -r0]
    3bac:	00002074 	andeq	r2, r0, r4, ror r0
    3bb0:	044fad04 	strbeq	sl, [pc], #-3332	; 3bb8 <_start-0x4448>
    3bb4:	00020000 	andeq	r0, r2, r0
    3bb8:	0000410f 	andeq	r4, r0, pc, lsl #2
    3bbc:	00045e00 	andeq	r5, r4, r0, lsl #28
    3bc0:	045e1000 	ldrbeq	r1, [lr], #-0
    3bc4:	03000000 	movweq	r0, #0
    3bc8:	01d40704 	bicseq	r0, r4, r4, lsl #14
    3bcc:	66050000 	strvs	r0, [r5], -r0
    3bd0:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    3bd4:	00041eaf 	andeq	r1, r4, pc, lsr #29
    3bd8:	25520600 	ldrbcs	r0, [r2, #-1536]	; 0xfffffa00
    3bdc:	05180000 	ldreq	r0, [r8, #-0]
    3be0:	0004c51e 	andeq	ip, r4, lr, lsl r5
    3be4:	26510700 	ldrbcs	r0, [r1], -r0, lsl #14
    3be8:	20050000 	andcs	r0, r5, r0
    3bec:	000004c5 	andeq	r0, r0, r5, asr #9
    3bf0:	2c0c0700 	stccs	7, cr0, [ip], {-0}
    3bf4:	21050000 	mrscs	r0, (UNDEF: 5)
    3bf8:	00000053 	andeq	r0, r0, r3, asr r0
    3bfc:	268a0704 	strcs	r0, [sl], r4, lsl #14
    3c00:	22050000 	andcs	r0, r5, #0
    3c04:	00000076 	andeq	r0, r0, r6, ror r0
    3c08:	21690708 	cmncs	r9, r8, lsl #14
    3c0c:	23050000 	movwcs	r0, #20480	; 0x5000
    3c10:	000004c5 	andeq	r0, r0, r5, asr #9
    3c14:	277d070c 	ldrbcs	r0, [sp, -ip, lsl #14]!
    3c18:	24050000 	strcs	r0, [r5], #-0
    3c1c:	000004c5 	andeq	r0, r0, r5, asr #9
    3c20:	2bbb0710 	blcs	feec5868 <_estack+0xf6eb5868>
    3c24:	25050000 	strcs	r0, [r5, #-0]
    3c28:	000004c5 	andeq	r0, r0, r5, asr #9
    3c2c:	04080014 	streq	r0, [r8], #-20	; 0xffffffec
    3c30:	000004cb 	andeq	r0, r0, fp, asr #9
    3c34:	00041311 	andeq	r1, r4, r1, lsl r3
    3c38:	25520500 	ldrbcs	r0, [r2, #-1280]	; 0xfffffb00
    3c3c:	27050000 	strcs	r0, [r5, -r0]
    3c40:	00000470 	andeq	r0, r0, r0, ror r4
    3c44:	00263106 	eoreq	r3, r6, r6, lsl #2
    3c48:	1f060c00 	svcne	0x00060c00
    3c4c:	0000050c 	andeq	r0, r0, ip, lsl #10
    3c50:	00265107 	eoreq	r5, r6, r7, lsl #2
    3c54:	d2210600 	eorle	r0, r1, #0, 12
    3c58:	00000000 	andeq	r0, r0, r0
    3c5c:	002bf107 	eoreq	pc, fp, r7, lsl #2
    3c60:	53220600 	teqpl	r2, #0, 12
    3c64:	04000000 	streq	r0, [r0], #-0
    3c68:	00248507 	eoreq	r8, r4, r7, lsl #10
    3c6c:	d2230600 	eorle	r0, r3, #0, 12
    3c70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3c74:	26310500 	ldrtcs	r0, [r1], -r0, lsl #10
    3c78:	25060000 	strcs	r0, [r6, #-0]
    3c7c:	000004db 	ldrdeq	r0, [r0], -fp
    3c80:	00253b06 	eoreq	r3, r5, r6, lsl #22
    3c84:	21070c00 	tstcs	r7, r0, lsl #24
    3c88:	00000548 	andeq	r0, r0, r8, asr #10
    3c8c:	0020e007 	eoreq	lr, r0, r7
    3c90:	e5230700 	str	r0, [r3, #-1792]!	; 0xfffff900
    3c94:	00000005 	andeq	r0, r0, r5
    3c98:	002c3c07 	eoreq	r3, ip, r7, lsl #24
    3c9c:	eb250700 	bl	9458a4 <mailbuffer+0x90a7b4>
    3ca0:	04000005 	streq	r0, [r0], #-5
    3ca4:	002a9507 	eoreq	r9, sl, r7, lsl #10
    3ca8:	f1270700 			; <UNDEFINED> instruction: 0xf1270700
    3cac:	08000005 	stmdaeq	r0, {r0, r2}
    3cb0:	2ad10600 	bcs	ff4454b8 <_estack+0xf74354b8>
    3cb4:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    3cb8:	0005e52d 	andeq	lr, r5, sp, lsr #10
    3cbc:	5a280700 	bpl	a058c4 <mailbuffer+0x9ca7d4>
    3cc0:	2f080000 	svccs	0x00080000
    3cc4:	00000611 	andeq	r0, r0, r1, lsl r6
    3cc8:	24430700 	strbcs	r0, [r3], #-1792	; 0xfffff900
    3ccc:	31080000 	mrscc	r0, (UNDEF: 8)
    3cd0:	00000660 	andeq	r0, r0, r0, ror #12
    3cd4:	207c0704 	rsbscs	r0, ip, r4, lsl #14
    3cd8:	33080000 	movwcc	r0, #32768	; 0x8000
    3cdc:	00000025 	andeq	r0, r0, r5, lsr #32
    3ce0:	243b0708 	ldrtcs	r0, [fp], #-1800	; 0xfffff8f8
    3ce4:	34080000 	strcc	r0, [r8], #-0
    3ce8:	00000156 	andeq	r0, r0, r6, asr r1
    3cec:	22930709 	addscs	r0, r3, #2359296	; 0x240000
    3cf0:	35080000 	strcc	r0, [r8, #-0]
    3cf4:	000006c7 	andeq	r0, r0, r7, asr #13
    3cf8:	1f7a070c 	svcne	0x007a070c
    3cfc:	37080000 	strcc	r0, [r8, -r0]
    3d00:	00000025 	andeq	r0, r0, r5, lsr #32
    3d04:	26a90710 	ssatcs	r0, #10, r0, lsl #14
    3d08:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    3d0c:	00000025 	andeq	r0, r0, r5, lsr #32
    3d10:	296f0711 	stmdbcs	pc!, {r0, r4, r8, r9, sl}^	; <UNPREDICTABLE>
    3d14:	3a080000 	bcc	203d1c <mailbuffer+0x1c8c2c>
    3d18:	000006cd 	andeq	r0, r0, sp, asr #13
    3d1c:	1fb20714 	svcne	0x00b20714
    3d20:	3b080000 	blcc	203d28 <mailbuffer+0x1c8c38>
    3d24:	000006d3 	ldrdeq	r0, [r0], -r3
    3d28:	27fc0718 			; <UNDEFINED> instruction: 0x27fc0718
    3d2c:	3d080000 	stccc	0, cr0, [r8, #-0]
    3d30:	000006d9 	ldrdeq	r0, [r0], -r9
    3d34:	2b34071c 	blcs	d059ac <mailbuffer+0xcca8bc>
    3d38:	3f080000 	svccc	0x00080000
    3d3c:	000005f7 	strdeq	r0, [r0], -r7
    3d40:	21780720 	cmncs	r8, r0, lsr #14
    3d44:	40080000 	andmi	r0, r8, r0
    3d48:	000005f7 	strdeq	r0, [r0], -r7
    3d4c:	0408002c 	streq	r0, [r8], #-44	; 0xffffffd4
    3d50:	00000548 	andeq	r0, r0, r8, asr #10
    3d54:	04650408 	strbteq	r0, [r5], #-1032	; 0xfffffbf8
    3d58:	04080000 	streq	r0, [r8], #-0
    3d5c:	0000050c 	andeq	r0, r0, ip, lsl #10
    3d60:	00253b05 	eoreq	r3, r5, r5, lsl #22
    3d64:	17290700 	strne	r0, [r9, -r0, lsl #14]!
    3d68:	12000005 	andne	r0, r0, #5
    3d6c:	00000076 	andeq	r0, r0, r6, ror r0
    3d70:	00000611 	andeq	r0, r0, r1, lsl r6
    3d74:	0005e513 	andeq	lr, r5, r3, lsl r5
    3d78:	04080000 	streq	r0, [r8], #-0
    3d7c:	00000602 	andeq	r0, r0, r2, lsl #12
    3d80:	00287606 	eoreq	r7, r8, r6, lsl #12
    3d84:	26095400 	strcs	r5, [r9], -r0, lsl #8
    3d88:	00000660 	andeq	r0, r0, r0, ror #12
    3d8c:	00273d07 	eoreq	r3, r7, r7, lsl #26
    3d90:	53280900 	teqpl	r8, #0, 18
    3d94:	00000000 	andeq	r0, r0, r0
    3d98:	001f3c07 	andseq	r3, pc, r7, lsl #24
    3d9c:	db290900 	blle	a461a4 <mailbuffer+0xa0b0b4>
    3da0:	04000009 	streq	r0, [r0], #-9
    3da4:	0025da07 	eoreq	sp, r5, r7, lsl #20
    3da8:	e02b0900 	eor	r0, fp, r0, lsl #18
    3dac:	08000009 	stmdaeq	r0, {r0, r3}
    3db0:	00270b07 	eoreq	r0, r7, r7, lsl #22
    3db4:	f62d0900 			; <UNDEFINED> instruction: 0xf62d0900
    3db8:	48000009 	stmdami	r0, {r0, r3}
    3dbc:	002b4907 	eoreq	r4, fp, r7, lsl #18
    3dc0:	082f0900 	stmdaeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    3dc4:	4c000008 	stcmi	0, cr0, [r0], {8}
    3dc8:	17040800 	strne	r0, [r4, -r0, lsl #16]
    3dcc:	06000006 	streq	r0, [r0], -r6
    3dd0:	00002580 	andeq	r2, r0, r0, lsl #11
    3dd4:	c7280a18 			; <UNDEFINED> instruction: 0xc7280a18
    3dd8:	07000006 	streq	r0, [r0, -r6]
    3ddc:	000020e0 	andeq	r2, r0, r0, ror #1
    3de0:	07162a0a 	ldreq	r2, [r6, -sl, lsl #20]
    3de4:	07000000 	streq	r0, [r0, -r0]
    3de8:	00001fe8 	andeq	r1, r0, r8, ror #31
    3dec:	00252b0a 	eoreq	r2, r5, sl, lsl #22
    3df0:	07040000 	streq	r0, [r4, -r0]
    3df4:	00002149 	andeq	r2, r0, r9, asr #2
    3df8:	070b2c0a 	streq	r2, [fp, -sl, lsl #24]
    3dfc:	07050000 	streq	r0, [r5, -r0]
    3e00:	0000266b 	andeq	r2, r0, fp, ror #12
    3e04:	00762d0a 	rsbseq	r2, r6, sl, lsl #26
    3e08:	07080000 	streq	r0, [r8, -r0]
    3e0c:	000021d4 	ldrdeq	r2, [r0], -r4
    3e10:	00482e0a 	subeq	r2, r8, sl, lsl #28
    3e14:	070c0000 	streq	r0, [ip, -r0]
    3e18:	00002857 	andeq	r2, r0, r7, asr r8
    3e1c:	00532f0a 	subseq	r2, r3, sl, lsl #30
    3e20:	07100000 	ldreq	r0, [r0, -r0]
    3e24:	000022d7 	ldrdeq	r2, [r0], -r7
    3e28:	012a300a 	teqeq	sl, sl
    3e2c:	00140000 	andseq	r0, r4, r0
    3e30:	06660408 	strbteq	r0, [r6], -r8, lsl #8
    3e34:	04080000 	streq	r0, [r8], #-0
    3e38:	00000262 	andeq	r0, r0, r2, ror #4
    3e3c:	02d60408 	sbcseq	r0, r6, #8, 8	; 0x8000000
    3e40:	04080000 	streq	r0, [r8], #-0
    3e44:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3e48:	002ad105 	eoreq	sp, sl, r5, lsl #2
    3e4c:	48420800 	stmdami	r2, {fp}^
    3e50:	0a000005 	beq	3e6c <_start-0x4194>
    3e54:	0b200a01 	bleq	806660 <mailbuffer+0x7cb570>
    3e58:	0b000007 	bleq	3e7c <_start-0x4184>
    3e5c:	00002a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    3e60:	1fc00b00 	svcne	0x00c00b00
    3e64:	0b010000 	bleq	43e6c <mailbuffer+0x8d7c>
    3e68:	0000222e 	andeq	r2, r0, lr, lsr #4
    3e6c:	25c20b02 	strbcs	r0, [r2, #2818]	; 0xb02
    3e70:	00030000 	andeq	r0, r3, r0
    3e74:	002afd05 	eoreq	pc, sl, r5, lsl #26
    3e78:	ea260a00 	b	986680 <mailbuffer+0x94b590>
    3e7c:	08000006 	stmdaeq	r0, {r1, r2}
    3e80:	0006df04 	andeq	sp, r6, r4, lsl #30
    3e84:	25800500 	strcs	r0, [r0, #1280]	; 0x500
    3e88:	320a0000 	andcc	r0, sl, #0
    3e8c:	00000666 	andeq	r0, r0, r6, ror #12
    3e90:	00269305 	eoreq	r9, r6, r5, lsl #6
    3e94:	32210b00 	eorcc	r0, r1, #0, 22
    3e98:	14000007 	strne	r0, [r0], #-7
    3e9c:	00000747 	andeq	r0, r0, r7, asr #14
    3ea0:	00074713 	andeq	r4, r7, r3, lsl r7
    3ea4:	00d81300 	sbcseq	r1, r8, r0, lsl #6
    3ea8:	d8130000 	ldmdale	r3, {}	; <UNPREDICTABLE>
    3eac:	00000000 	andeq	r0, r0, r0
    3eb0:	074d0408 	strbeq	r0, [sp, -r8, lsl #8]
    3eb4:	07060000 	streq	r0, [r6, -r0]
    3eb8:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
    3ebc:	07c6230b 	strbeq	r2, [r6, fp, lsl #6]
    3ec0:	7d070000 	stcvc	0, cr0, [r7, #-0]
    3ec4:	0b000029 	bleq	3f70 <_start-0x4090>
    3ec8:	0007c625 	andeq	ip, r7, r5, lsr #12
    3ecc:	44070000 	strmi	r0, [r7], #-0
    3ed0:	0b000028 	bleq	3f78 <_start-0x4088>
    3ed4:	0007cc27 	andeq	ip, r7, r7, lsr #24
    3ed8:	51070400 	tstpl	r7, r0, lsl #8
    3edc:	0b000026 	bleq	3f7c <_start-0x4084>
    3ee0:	0000d828 	andeq	sp, r0, r8, lsr #16
    3ee4:	0c070800 	stceq	8, cr0, [r7], {-0}
    3ee8:	0b00002c 	bleq	3fa0 <_start-0x4060>
    3eec:	00004829 	andeq	r4, r0, r9, lsr #16
    3ef0:	3f070c00 	svccc	0x00070c00
    3ef4:	0b000021 	bleq	3f80 <_start-0x4080>
    3ef8:	00006f2b 	andeq	r6, r0, fp, lsr #30
    3efc:	eb071000 	bl	1c7f04 <mailbuffer+0x18ce14>
    3f00:	0b000029 	bleq	3fac <_start-0x4054>
    3f04:	0000482c 	andeq	r4, r0, ip, lsr #16
    3f08:	ba071400 	blt	1c8f10 <mailbuffer+0x18de20>
    3f0c:	0b000023 	bleq	3fa0 <_start-0x4060>
    3f10:	0007d22e 	andeq	sp, r7, lr, lsr #4
    3f14:	59071800 	stmdbpl	r7, {fp, ip}
    3f18:	0b000023 	bleq	3fac <_start-0x4054>
    3f1c:	0000d82f 	andeq	sp, r0, pc, lsr #16
    3f20:	13071c00 	movwne	r1, #31744	; 0x7c00
    3f24:	0b00002b 	bleq	3fd8 <_start-0x4028>
    3f28:	0000d830 	andeq	sp, r0, r0, lsr r8
    3f2c:	08002000 	stmdaeq	r0, {sp}
    3f30:	00071c04 	andeq	r1, r7, r4, lsl #24
    3f34:	a6040800 	strge	r0, [r4], -r0, lsl #16
    3f38:	08000001 	stmdaeq	r0, {r0}
    3f3c:	00072704 	andeq	r2, r7, r4, lsl #14
    3f40:	29070500 	stmdbcs	r7, {r8, sl}
    3f44:	320b0000 	andcc	r0, fp, #0
    3f48:	0000074d 	andeq	r0, r0, sp, asr #14
    3f4c:	00274906 	eoreq	r4, r7, r6, lsl #18
    3f50:	200c0800 	andcs	r0, ip, r0, lsl #16
    3f54:	00000808 	andeq	r0, r0, r8, lsl #16
    3f58:	00244307 	eoreq	r4, r4, r7, lsl #6
    3f5c:	60220c00 	eorvs	r0, r2, r0, lsl #24
    3f60:	00000006 	andeq	r0, r0, r6
    3f64:	0020e007 	eoreq	lr, r0, r7
    3f68:	16240c00 	strtne	r0, [r4], -r0, lsl #24
    3f6c:	04000007 	streq	r0, [r0], #-7
    3f70:	27490500 	strbcs	r0, [r9, -r0, lsl #10]
    3f74:	260c0000 	strcs	r0, [ip], -r0
    3f78:	000007e3 	andeq	r0, r0, r3, ror #15
    3f7c:	00250d06 	eoreq	r0, r5, r6, lsl #26
    3f80:	1d0d1800 	stcne	8, cr1, [sp, #-0]
    3f84:	00000868 	andeq	r0, r0, r8, ror #16
    3f88:	0039ce07 	eorseq	ip, r9, r7, lsl #28
    3f8c:	791f0d00 	ldmdbvc	pc, {r8, sl, fp}	; <UNPREDICTABLE>
    3f90:	00000008 	andeq	r0, r0, r8
    3f94:	00508607 	subseq	r8, r0, r7, lsl #12
    3f98:	79210d00 	stmdbvc	r1!, {r8, sl, fp}
    3f9c:	04000008 	streq	r0, [r0], #-8
    3fa0:	00504707 	subseq	r4, r0, r7, lsl #14
    3fa4:	8e220d00 	cdphi	13, 2, cr0, cr2, cr0, {0}
    3fa8:	08000008 	stmdaeq	r0, {r3}
    3fac:	0036f407 	eorseq	pc, r6, r7, lsl #8
    3fb0:	a4230d00 	strtge	r0, [r3], #-3328	; 0xfffff300
    3fb4:	0c000008 	stceq	0, cr0, [r0], {8}
    3fb8:	004fe907 	subeq	lr, pc, r7, lsl #18
    3fbc:	79250d00 	stmdbvc	r5!, {r8, sl, fp}
    3fc0:	10000008 	andne	r0, r0, r8
    3fc4:	004fc007 	subeq	ip, pc, r7
    3fc8:	8e270d00 	cdphi	13, 2, cr0, cr7, cr0, {0}
    3fcc:	14000008 	strne	r0, [r0], #-8
    3fd0:	08731400 	ldmdaeq	r3!, {sl, ip}^
    3fd4:	73130000 	tstvc	r3, #0
    3fd8:	00000008 	andeq	r0, r0, r8
    3fdc:	08130408 	ldmdaeq	r3, {r3, sl}
    3fe0:	04080000 	streq	r0, [r8], #-0
    3fe4:	00000868 	andeq	r0, r0, r8, ror #16
    3fe8:	00007612 	andeq	r7, r0, r2, lsl r6
    3fec:	00088e00 	andeq	r8, r8, r0, lsl #28
    3ff0:	08731300 	ldmdaeq	r3!, {r8, r9, ip}^
    3ff4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3ff8:	00087f04 	andeq	r7, r8, r4, lsl #30
    3ffc:	08a41400 	stmiaeq	r4!, {sl, ip}
    4000:	73130000 	tstvc	r3, #0
    4004:	13000008 	movwne	r0, #8
    4008:	00000048 	andeq	r0, r0, r8, asr #32
    400c:	94040800 	strls	r0, [r4], #-2048	; 0xfffff800
    4010:	05000008 	streq	r0, [r0, #-8]
    4014:	0000250d 	andeq	r2, r0, sp, lsl #10
    4018:	0813290d 	ldmdaeq	r3, {r0, r2, r3, r8, fp, sp}
    401c:	a0060000 	andge	r0, r6, r0
    4020:	54000022 	strpl	r0, [r0], #-34	; 0xffffffde
    4024:	09be220e 	ldmibeq	lr!, {r1, r2, r3, r9, sp}
    4028:	29070000 	stmdbcs	r7, {}	; <UNPREDICTABLE>
    402c:	0e00002a 	cdpeq	0, 0, cr0, cr0, cr10, {1}
    4030:	00005324 	andeq	r5, r0, r4, lsr #6
    4034:	2a070000 	bcs	1c403c <mailbuffer+0x188f4c>
    4038:	0e000026 	cdpeq	0, 0, cr0, cr0, cr6, {1}
    403c:	0009be25 	andeq	fp, r9, r5, lsr #28
    4040:	bb070400 	bllt	1c5048 <mailbuffer+0x189f58>
    4044:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    4048:	00007626 	andeq	r7, r0, r6, lsr #12
    404c:	67070800 	strvs	r0, [r7, -r0, lsl #16]
    4050:	0e000022 	cdpeq	0, 0, cr0, cr0, cr2, {1}
    4054:	00007627 	andeq	r7, r0, r7, lsr #12
    4058:	bd070c00 	stclt	12, cr0, [r7, #-0]
    405c:	0e00002a 	cdpeq	0, 0, cr0, cr0, cr10, {1}
    4060:	00007629 	andeq	r7, r0, r9, lsr #12
    4064:	17071000 	strne	r1, [r7, -r0]
    4068:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    406c:	0000762a 	andeq	r7, r0, sl, lsr #12
    4070:	e0071400 	and	r1, r7, r0, lsl #8
    4074:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    4078:	0007162c 	andeq	r1, r7, ip, lsr #12
    407c:	7d071800 	stcvc	8, cr1, [r7, #-0]
    4080:	0e000029 	cdpeq	0, 0, cr0, cr0, cr9, {1}
    4084:	0007c62d 	andeq	ip, r7, sp, lsr #12
    4088:	3b071c00 	blcc	1cb090 <mailbuffer+0x18ffa0>
    408c:	0e000024 	cdpeq	0, 0, cr0, cr0, cr4, {1}
    4090:	0001562e 	andeq	r5, r1, lr, lsr #12
    4094:	d4072000 	strle	r2, [r7], #-0
    4098:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    409c:	0000482f 	andeq	r4, r0, pc, lsr #16
    40a0:	9c072400 	cfstrsls	mvf2, [r7], {-0}
    40a4:	0e000023 	cdpeq	0, 0, cr0, cr0, cr3, {1}
    40a8:	00004831 	andeq	r4, r0, r1, lsr r8
    40ac:	b0072800 	andlt	r2, r7, r0, lsl #16
    40b0:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    40b4:	00005332 	andeq	r5, r0, r2, lsr r3
    40b8:	95072c00 	strls	r2, [r7, #-3072]	; 0xfffff400
    40bc:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    40c0:	00004833 	andeq	r4, r0, r3, lsr r8
    40c4:	ea073000 	b	1d00cc <mailbuffer+0x194fdc>
    40c8:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    40cc:	00005334 	andeq	r5, r0, r4, lsr r3
    40d0:	39073400 	stmdbcc	r7, {sl, ip, sp}
    40d4:	0e000026 	cdpeq	0, 0, cr0, cr0, cr6, {1}
    40d8:	00004835 	andeq	r4, r0, r5, lsr r8
    40dc:	8c073800 	stchi	8, cr3, [r7], {-0}
    40e0:	0e000028 	cdpeq	0, 0, cr0, cr0, cr8, {1}
    40e4:	00005337 	andeq	r5, r0, r7, lsr r3
    40e8:	31073c00 	tstcc	r7, r0, lsl #24
    40ec:	0e000027 	cdpeq	0, 0, cr0, cr0, cr7, {1}
    40f0:	00005338 	andeq	r5, r0, r8, lsr r3
    40f4:	2f074000 	svccs	0x00074000
    40f8:	0e000028 	cdpeq	0, 0, cr0, cr0, cr8, {1}
    40fc:	00004839 	andeq	r4, r0, r9, lsr r8
    4100:	dc074400 	cfstrsle	mvf4, [r7], {-0}
    4104:	0e00002a 	cdpeq	0, 0, cr0, cr0, cr10, {1}
    4108:	0009c43b 	andeq	ip, r9, fp, lsr r4
    410c:	a7074800 	strge	r4, [r7, -r0, lsl #16]
    4110:	0e000024 	cdpeq	0, 0, cr0, cr0, cr4, {1}
    4114:	0000d83c 	andeq	sp, r0, ip, lsr r8
    4118:	a0074c00 	andge	r4, r7, r0, lsl #24
    411c:	0e00001f 	mcreq	0, 0, r0, cr0, cr15, {0}
    4120:	0009ca3e 	andeq	ip, r9, lr, lsr sl
    4124:	08005000 	stmdaeq	r0, {ip, lr}
    4128:	0007d804 	andeq	sp, r7, r4, lsl #16
    412c:	48040800 	stmdami	r4, {fp}
    4130:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4134:	0008aa04 	andeq	sl, r8, r4, lsl #20
    4138:	22a00500 	adccs	r0, r0, #0, 10
    413c:	400e0000 	andmi	r0, lr, r0
    4140:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    4144:	00005315 	andeq	r5, r0, r5, lsl r3
    4148:	09f00f00 	ldmibeq	r0!, {r8, r9, sl, fp}^
    414c:	09f00000 	ldmibeq	r0!, {}^	; <UNPREDICTABLE>
    4150:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
    4154:	0f000004 	svceq	0x00000004
    4158:	d0040800 	andle	r0, r4, r0, lsl #16
    415c:	15000009 	strne	r0, [r0, #-9]
    4160:	00000076 	andeq	r0, r0, r6, ror r0
    4164:	00287605 	eoreq	r7, r8, r5, lsl #12
    4168:	17310900 	ldrne	r0, [r1, -r0, lsl #18]!
    416c:	0a000006 	beq	418c <_start-0x3e74>
    4170:	81200f01 	teqhi	r0, r1, lsl #30
    4174:	0b00000b 	bleq	41a8 <_start-0x3e58>
    4178:	00001dfc 	strdeq	r1, [r0], -ip
    417c:	1df30b00 	ldclne	11, cr0, [r3]
    4180:	01800000 	orreq	r0, r0, r0
    4184:	001e160b 	andseq	r1, lr, fp, lsl #12
    4188:	0b018100 	bleq	64590 <mailbuffer+0x294a0>
    418c:	00001cd0 	ldrdeq	r1, [r0], -r0
    4190:	240b0182 	strcs	r0, [fp], #-386	; 0xfffffe7e
    4194:	8300001c 	movwhi	r0, #28
    4198:	1ce90b01 	fstmiaxne	r9!, {d16-d15}	;@ Deprecated
    419c:	01840000 	orreq	r0, r4, r0
    41a0:	001c310b 	andseq	r3, ip, fp, lsl #2
    41a4:	0b018500 	bleq	655ac <mailbuffer+0x2a4bc>
    41a8:	00001c4b 	andeq	r1, r0, fp, asr #24
    41ac:	ea0b0186 	b	2c47cc <mailbuffer+0x2896dc>
    41b0:	8700001e 	smladhi	r0, lr, r0, r0
    41b4:	1c680b01 	stclne	11, cr0, [r8], #-4
    41b8:	01880000 	orreq	r0, r8, r0
    41bc:	001d3f0b 	andseq	r3, sp, fp, lsl #30
    41c0:	0b018900 	bleq	665c8 <mailbuffer+0x2b4d8>
    41c4:	00001cdd 	ldrdeq	r1, [r0], -sp
    41c8:	fc0b018a 	stc2	1, cr0, [fp], {138}	; 0x8a
    41cc:	8b00001e 	blhi	424c <_start-0x3db4>
    41d0:	1ef40b01 	vmovne.f64	d16, #65	; 0x41
    41d4:	018c0000 	orreq	r0, ip, r0
    41d8:	001e0e0b 	andseq	r0, lr, fp, lsl #28
    41dc:	0b018d00 	bleq	675e4 <mailbuffer+0x2c4f4>
    41e0:	00001cc7 	andeq	r1, r0, r7, asr #25
    41e4:	a30b018e 	movwge	r0, #45454	; 0xb18e
    41e8:	8f00001e 	svchi	0x0000001e
    41ec:	1ea90b01 	vfmane.f64	d0, d9, d1
    41f0:	01900000 	orrseq	r0, r0, r0
    41f4:	001eaf0b 	andseq	sl, lr, fp, lsl #30
    41f8:	0b019100 	bleq	68600 <mailbuffer+0x2d510>
    41fc:	00001eb5 			; <UNDEFINED> instruction: 0x00001eb5
    4200:	bb0b0192 	bllt	2c4850 <mailbuffer+0x289760>
    4204:	9300001e 	movwls	r0, #30
    4208:	1ec10b01 	vdivne.f64	d16, d1, d1
    420c:	01940000 	orrseq	r0, r4, r0
    4210:	001ec70b 	andseq	ip, lr, fp, lsl #14
    4214:	0b019500 	bleq	6961c <mailbuffer+0x2e52c>
    4218:	00001ecd 	andeq	r1, r0, sp, asr #29
    421c:	d30b0196 	movwle	r0, #45462	; 0xb196
    4220:	9700001e 	smladls	r0, lr, r0, r0
    4224:	1c530b01 	mrrcne	11, 0, r0, r3, cr1
    4228:	01980000 	orrseq	r0, r8, r0
    422c:	001c5a0b 	andseq	r5, ip, fp, lsl #20
    4230:	0b019900 	bleq	6a638 <mailbuffer+0x2f548>
    4234:	00001c61 	andeq	r1, r0, r1, ror #24
    4238:	7f0b019a 	svcvc	0x000b019a
    423c:	9b00001e 	blls	42bc <_start-0x3d44>
    4240:	1bf60b01 	blne	ffd86e4c <_estack+0xf7d76e4c>
    4244:	019c0000 	orrseq	r0, ip, r0
    4248:	001d100b 	andseq	r1, sp, fp
    424c:	0b019d00 	bleq	6b654 <mailbuffer+0x30564>
    4250:	00001dd7 	ldrdeq	r1, [r0], -r7
    4254:	d90b019e 	stmdble	fp, {r1, r2, r3, r4, r7, r8}
    4258:	9f00001e 	svcls	0x0000001e
    425c:	1c020b01 	stcne	11, cr0, [r2], {1}
    4260:	01a00000 	moveq	r0, r0
    4264:	001d8d0b 	andseq	r8, sp, fp, lsl #26
    4268:	0b01a100 	bleq	6c670 <mailbuffer+0x31580>
    426c:	00001dbf 			; <UNDEFINED> instruction: 0x00001dbf
    4270:	6e0b01a2 	adfvs<illegal precision>p	f0, f3, f2
    4274:	a300001d 	movwge	r0, #29
    4278:	1e040b01 	vmlane.f64	d0, d4, d1
    427c:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
    4280:	001e200b 	andseq	r2, lr, fp
    4284:	0b01a500 	bleq	6d68c <mailbuffer+0x3259c>
    4288:	00001d27 	andeq	r1, r0, r7, lsr #26
    428c:	2f0b01a6 	svccs	0x000b01a6
    4290:	a700001d 	smladge	r0, sp, r0, r0
    4294:	1d370b01 	fldmdbxne	r7!, {d0-d-1}	;@ Deprecated
    4298:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    429c:	001ee20b 	andseq	lr, lr, fp, lsl #4
    42a0:	0b01a900 	bleq	6e6a8 <mailbuffer+0x335b8>
    42a4:	00001d46 	andeq	r1, r0, r6, asr #26
    42a8:	4e0b01aa 	adfmi<illegal precision>p	f0, f3, #2.0
    42ac:	ab00001d 	blge	4328 <_start-0x3cd8>
    42b0:	1d560b01 	vldrne	d16, [r6, #-4]
    42b4:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    42b8:	001d5e0b 	andseq	r5, sp, fp, lsl #28
    42bc:	0b01ad00 	bleq	6f6c4 <mailbuffer+0x345d4>
    42c0:	00001d66 	andeq	r1, r0, r6, ror #26
    42c4:	1f0b01ae 	svcne	0x000b01ae
    42c8:	af00001d 	svcge	0x0000001d
    42cc:	1e2c0b01 	vmulne.f64	d0, d12, d1
    42d0:	01b00000 	movseq	r0, r0
    42d4:	001db30b 	andseq	fp, sp, fp, lsl #6
    42d8:	0b01b100 	bleq	706e0 <mailbuffer+0x355f0>
    42dc:	00001caa 	andeq	r1, r0, sl, lsr #25
    42e0:	980b01b2 	stmdals	fp, {r1, r4, r5, r7, r8}
    42e4:	b300001b 	movwlt	r0, #27
    42e8:	50170001 	andspl	r0, r7, r1
    42ec:	8c000021 	stchi	0, cr0, [r0], {33}	; 0x21
    42f0:	c26f0f01 	rsbgt	r0, pc, #1, 30
    42f4:	0700000b 	streq	r0, [r0, -fp]
    42f8:	00002883 	andeq	r2, r0, r3, lsl #17
    42fc:	0bc2710f 	bleq	ff0a0740 <_estack+0xf7090740>
    4300:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4304:	00002c9c 	muleq	r0, ip, ip
    4308:	0076730f 	rsbseq	r7, r6, pc, lsl #6
    430c:	01800000 	orreq	r0, r0, r0
    4310:	00248e18 	eoreq	r8, r4, r8, lsl lr
    4314:	76740f00 	ldrbtvc	r0, [r4], -r0, lsl #30
    4318:	84000000 	strhi	r0, [r0], #-0
    431c:	23ac1801 			; <UNDEFINED> instruction: 0x23ac1801
    4320:	750f0000 	strvc	r0, [pc, #-0]	; 4328 <_start-0x3cd8>
    4324:	00000076 	andeq	r0, r0, r6, ror r0
    4328:	0f000188 	svceq	0x00000188
    432c:	00000025 	andeq	r0, r0, r5, lsr #32
    4330:	00000bd8 	ldrdeq	r0, [r0], -r8
    4334:	00045e16 	andeq	r5, r4, r6, lsl lr
    4338:	5e167f00 	cdppl	15, 1, cr7, cr6, cr0, {0}
    433c:	02000004 	andeq	r0, r0, #4
    4340:	21500500 	cmpcs	r0, r0, lsl #10
    4344:	770f0000 	strvc	r0, [pc, -r0]
    4348:	00000b81 	andeq	r0, r0, r1, lsl #23
    434c:	0024d605 	eoreq	sp, r4, r5, lsl #12
    4350:	ee1f1000 	cdp	0, 1, cr1, cr15, cr0, {0}
    4354:	1400000b 	strne	r0, [r0], #-11
    4358:	00000bf9 	strdeq	r0, [r0], -r9
    435c:	000bf913 	andeq	pc, fp, r3, lsl r9	; <UNPREDICTABLE>
    4360:	04080000 	streq	r0, [r8], #-0
    4364:	00000bff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4368:	00006111 	andeq	r6, r0, r1, lsl r1
    436c:	26da0500 	ldrbcs	r0, [sl], r0, lsl #10
    4370:	20100000 	andscs	r0, r0, r0
    4374:	00000c0f 	andeq	r0, r0, pc, lsl #24
    4378:	000c1a14 	andeq	r1, ip, r4, lsl sl
    437c:	00531300 	subseq	r1, r3, r0, lsl #6
    4380:	05000000 	streq	r0, [r0, #-0]
    4384:	00002913 	andeq	r2, r0, r3, lsl r9
    4388:	0c252110 	stfeqs	f2, [r5], #-64	; 0xffffffc0
    438c:	05190000 	ldreq	r0, [r9, #-0]
    4390:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
    4394:	0c312410 	cfldrseq	mvf2, [r1], #-64	; 0xffffffc0
    4398:	41140000 	tstmi	r4, r0
    439c:	1300000c 	movwne	r0, #12
    43a0:	0000002f 	andeq	r0, r0, pc, lsr #32
    43a4:	000c4113 	andeq	r4, ip, r3, lsl r1
    43a8:	04080000 	streq	r0, [r8], #-0
    43ac:	00000c47 	andeq	r0, r0, r7, asr #24
    43b0:	00002f11 	andeq	r2, r0, r1, lsl pc
    43b4:	28631700 	stmdacs	r3!, {r8, r9, sl, ip}^
    43b8:	01ec0000 	mvneq	r0, r0
    43bc:	0cf62710 	ldcleq	7, cr2, [r6], #64	; 0x40
    43c0:	01070000 	mrseq	r0, (UNDEF: 7)
    43c4:	10000025 	andne	r0, r0, r5, lsr #32
    43c8:	0006df29 	andeq	sp, r6, r9, lsr #30
    43cc:	03070000 	movweq	r0, #28672	; 0x7000
    43d0:	10000021 	andne	r0, r0, r1, lsr #32
    43d4:	0000252b 	andeq	r2, r0, fp, lsr #10
    43d8:	d6073800 	strle	r3, [r7], -r0, lsl #16
    43dc:	10000029 	andne	r0, r0, r9, lsr #32
    43e0:	0000252c 	andeq	r2, r0, ip, lsr #10
    43e4:	62073900 	andvs	r3, r7, #0, 18
    43e8:	10000020 	andne	r0, r0, r0, lsr #32
    43ec:	0007c62e 	andeq	ip, r7, lr, lsr #12
    43f0:	ac073c00 	stcge	12, cr3, [r7], {-0}
    43f4:	10000020 	andne	r0, r0, r0, lsr #32
    43f8:	000cf630 	andeq	pc, ip, r0, lsr r6	; <UNPREDICTABLE>
    43fc:	71074000 	mrsvc	r4, (UNDEF: 7)
    4400:	1000002a 	andne	r0, r0, sl, lsr #32
    4404:	000cfc31 	andeq	pc, ip, r1, lsr ip	; <UNPREDICTABLE>
    4408:	c4074400 	strgt	r4, [r7], #-1024	; 0xfffffc00
    440c:	10000022 	andne	r0, r0, r2, lsr #32
    4410:	000d0232 	andeq	r0, sp, r2, lsr r2
    4414:	13074800 	movwne	r4, #30720	; 0x7800
    4418:	10000026 	andne	r0, r0, r6, lsr #32
    441c:	000d0833 	andeq	r0, sp, r3, lsr r8
    4420:	2a074c00 	bcs	1d7428 <mailbuffer+0x19c338>
    4424:	10000026 	andne	r0, r0, r6, lsr #32
    4428:	0009be35 	andeq	fp, r9, r5, lsr lr
    442c:	34075000 	strcc	r5, [r7], #-0
    4430:	1000002a 	andne	r0, r0, sl, lsr #32
    4434:	000d0e36 	andeq	r0, sp, r6, lsr lr
    4438:	7a075400 	bvc	1d9440 <mailbuffer+0x19e350>
    443c:	10000026 	andne	r0, r0, r6, lsr #32
    4440:	00002538 	andeq	r2, r0, r8, lsr r5
    4444:	57075800 	strpl	r5, [r7, -r0, lsl #16]
    4448:	10000029 	andne	r0, r0, r9, lsr #32
    444c:	00005339 	andeq	r5, r0, r9, lsr r3
    4450:	83075c00 	movwhi	r5, #31744	; 0x7c00
    4454:	10000028 	andne	r0, r0, r8, lsr #32
    4458:	000bd83b 	andeq	sp, fp, fp, lsr r8
    445c:	08006000 	stmdaeq	r0, {sp, lr}
    4460:	000be304 	andeq	lr, fp, r4, lsl #6
    4464:	04040800 	streq	r0, [r4], #-2048	; 0xfffff800
    4468:	0800000c 	stmdaeq	r0, {r2, r3}
    446c:	000c1a04 	andeq	r1, ip, r4, lsl #20
    4470:	26040800 	strcs	r0, [r4], -r0, lsl #16
    4474:	0800000c 	stmdaeq	r0, {r2, r3}
    4478:	00002504 	andeq	r2, r0, r4, lsl #10
    447c:	28630500 	stmdacs	r3!, {r8, sl}^
    4480:	3d100000 	ldccc	0, cr0, [r0, #-0]
    4484:	00000c4c 	andeq	r0, r0, ip, asr #24
    4488:	002c2805 	eoreq	r2, ip, r5, lsl #16
    448c:	2a1e1100 	bcs	788894 <mailbuffer+0x74d7a4>
    4490:	1400000d 	strne	r0, [r0], #-13
    4494:	00000d3f 	andeq	r0, r0, pc, lsr sp
    4498:	00005313 	andeq	r5, r0, r3, lsl r3
    449c:	006f1300 	rsbeq	r1, pc, r0, lsl #6
    44a0:	6f130000 	svcvs	0x00130000
    44a4:	00000000 	andeq	r0, r0, r0
    44a8:	001f1306 	andseq	r1, pc, r6, lsl #6
    44ac:	20114c00 	andscs	r4, r1, r0, lsl #24
    44b0:	00000da0 	andeq	r0, r0, r0, lsr #27
    44b4:	00250107 	eoreq	r0, r5, r7, lsl #2
    44b8:	df221100 	svcle	0x00221100
    44bc:	00000006 	andeq	r0, r0, r6
    44c0:	00210307 	eoreq	r0, r1, r7, lsl #6
    44c4:	25241100 	strcs	r1, [r4, #-256]!	; 0xffffff00
    44c8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    44cc:	0029d607 	eoreq	sp, r9, r7, lsl #12
    44d0:	25251100 	strcs	r1, [r5, #-256]!	; 0xffffff00
    44d4:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    44d8:	00206207 	eoreq	r6, r0, r7, lsl #4
    44dc:	c6271100 	strtgt	r1, [r7], -r0, lsl #2
    44e0:	3c000007 	stccc	0, cr0, [r0], {7}
    44e4:	00275807 	eoreq	r5, r7, r7, lsl #16
    44e8:	a0291100 	eorge	r1, r9, r0, lsl #2
    44ec:	4000000d 	andmi	r0, r0, sp
    44f0:	00262a07 	eoreq	r2, r6, r7, lsl #20
    44f4:	be2b1100 	suflte	f1, f3, f0
    44f8:	44000009 	strmi	r0, [r0], #-9
    44fc:	002a3407 	eoreq	r3, sl, r7, lsl #8
    4500:	0e2c1100 	sufeqe	f1, f4, f0
    4504:	4800000d 	stmdami	r0, {r0, r2, r3}
    4508:	1f040800 	svcne	0x00040800
    450c:	0500000d 	streq	r0, [r0, #-13]
    4510:	00001f13 	andeq	r1, r0, r3, lsl pc
    4514:	0d3f2e11 	ldceq	14, cr2, [pc, #-68]!	; 44d8 <_start-0x3b28>
    4518:	85050000 	strhi	r0, [r5, #-0]
    451c:	1200002c 	andne	r0, r0, #44	; 0x2c
    4520:	000bee2c 	andeq	lr, fp, ip, lsr #28
    4524:	23440500 	movtcs	r0, #17664	; 0x4500
    4528:	30120000 	andscc	r0, r2, r0
    452c:	00000c25 	andeq	r0, r0, r5, lsr #24
    4530:	0024e905 	eoreq	lr, r4, r5, lsl #18
    4534:	2a4b1200 	bcs	12c8d3c <mailbuffer+0x128dc4c>
    4538:	0c00000d 	stceq	0, cr0, [r0], {13}
    453c:	ff96120c 			; <UNDEFINED> instruction: 0xff96120c
    4540:	0700000d 	streq	r0, [r0, -sp]
    4544:	000012cf 	andeq	r1, r0, pc, asr #5
    4548:	006f9812 	rsbeq	r9, pc, r2, lsl r8	; <UNPREDICTABLE>
    454c:	07000000 	streq	r0, [r0, -r0]
    4550:	00002284 	andeq	r2, r0, r4, lsl #5
    4554:	006f9912 	rsbeq	r9, pc, r2, lsl r9	; <UNPREDICTABLE>
    4558:	07040000 	streq	r0, [r4, -r0]
    455c:	000027dc 	ldrdeq	r2, [r0], -ip
    4560:	006f9a12 	rsbeq	r9, pc, r2, lsl sl	; <UNPREDICTABLE>
    4564:	00080000 	andeq	r0, r8, r0
    4568:	00281e06 	eoreq	r1, r8, r6, lsl #28
    456c:	93127000 	tstls	r2, #0
    4570:	00000e54 	andeq	r0, r0, r4, asr lr
    4574:	00241b07 	eoreq	r1, r4, r7, lsl #22
    4578:	6f951200 	svcvs	0x00951200
    457c:	00000000 	andeq	r0, r0, r0
    4580:	00241c07 	eoreq	r1, r4, r7, lsl #24
    4584:	549b1200 	ldrpl	r1, [fp], #512	; 0x200
    4588:	0400000e 	streq	r0, [r0], #-14
    458c:	00205307 	eoreq	r5, r0, r7, lsl #6
    4590:	6f9d1200 	svcvs	0x009d1200
    4594:	4c000000 	stcmi	0, cr0, [r0], {-0}
    4598:	00205407 	eoreq	r5, r0, r7, lsl #8
    459c:	649e1200 	ldrvs	r1, [lr], #512	; 0x200
    45a0:	5000000e 	andpl	r0, r0, lr
    45a4:	0027af07 	eoreq	sl, r7, r7, lsl #30
    45a8:	6fa01200 	svcvs	0x00a01200
    45ac:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    45b0:	0027b007 	eoreq	fp, r7, r7
    45b4:	53a11200 			; <UNDEFINED> instruction: 0x53a11200
    45b8:	6c000000 	stcvs	0, cr0, [r0], {-0}
    45bc:	0dd20f00 	ldcleq	15, cr0, [r2]
    45c0:	0e640000 	cdpeq	0, 6, cr0, cr4, cr0, {0}
    45c4:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
    45c8:	05000004 	streq	r0, [r0, #-4]
    45cc:	006f0f00 	rsbeq	r0, pc, r0, lsl #30
    45d0:	0e740000 	cdpeq	0, 7, cr0, cr4, cr0, {0}
    45d4:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
    45d8:	05000004 	streq	r0, [r0, #-4]
    45dc:	281e0500 	ldmdacs	lr, {r8, sl}
    45e0:	a3120000 	tstge	r2, #0
    45e4:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    45e8:	00256a05 	eoreq	r6, r5, r5, lsl #20
    45ec:	8aa81200 	bhi	fea08df4 <_estack+0xf69f8df4>
    45f0:	1400000e 	strne	r0, [r0], #-14
    45f4:	00000e9a 	muleq	r0, sl, lr
    45f8:	00005313 	andeq	r5, r0, r3, lsl r3
    45fc:	0e9a1300 	cdpeq	3, 9, cr1, cr10, cr0, {0}
    4600:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4604:	000ea004 	andeq	sl, lr, r4
    4608:	0e741100 	rpweqs	f1, f4, f0
    460c:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    4610:	1000001f 	andne	r0, r0, pc, lsl r0
    4614:	0eeeb512 	mcreq	5, 7, fp, cr14, cr2, {0}
    4618:	56070000 	strpl	r0, [r7], -r0
    461c:	1200002c 	andne	r0, r0, #44	; 0x2c
    4620:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    4624:	44070000 	strmi	r0, [r7], #-0
    4628:	12000022 	andne	r0, r0, #34	; 0x22
    462c:	000041b9 			; <UNDEFINED> instruction: 0x000041b9
    4630:	35070200 	strcc	r0, [r7, #-512]	; 0xfffffe00
    4634:	12000021 	andne	r0, r0, #33	; 0x21
    4638:	000041ba 			; <UNDEFINED> instruction: 0x000041ba
    463c:	05070400 	streq	r0, [r7, #-1024]	; 0xfffffc00
    4640:	12000026 	andne	r0, r0, #38	; 0x26
    4644:	000bf9bd 			; <UNDEFINED> instruction: 0x000bf9bd
    4648:	eb070800 	bl	1c6650 <mailbuffer+0x18b560>
    464c:	12000023 	andne	r0, r0, #35	; 0x23
    4650:	000bf9be 			; <UNDEFINED> instruction: 0x000bf9be
    4654:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    4658:	00001f89 	andeq	r1, r0, r9, lsl #31
    465c:	0ea5c012 	mcreq	0, 5, ip, cr5, cr2, {0}
    4660:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    4664:	d0000029 	andle	r0, r0, r9, lsr #32
    4668:	0fa21f13 	svceq	0x00a21f13
    466c:	01070000 	mrseq	r0, (UNDEF: 7)
    4670:	13000025 	movwne	r0, #37	; 0x25
    4674:	0006df21 	andeq	sp, r6, r1, lsr #30
    4678:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    467c:	13000020 	movwne	r0, #32
    4680:	00005322 	andeq	r5, r0, r2, lsr #6
    4684:	03073800 	movweq	r3, #30720	; 0x7800
    4688:	13000021 	movwne	r0, #33	; 0x21
    468c:	00002524 	andeq	r2, r0, r4, lsr #10
    4690:	d6073c00 	strle	r3, [r7], -r0, lsl #24
    4694:	13000029 	movwne	r0, #41	; 0x29
    4698:	00002525 	andeq	r2, r0, r5, lsr #10
    469c:	cc073d00 	stcgt	13, cr3, [r7], {-0}
    46a0:	1300002b 	movwne	r0, #43	; 0x2b
    46a4:	0007c627 	andeq	ip, r7, r7, lsr #12
    46a8:	2c074000 	stccs	0, cr4, [r7], {-0}
    46ac:	13000025 	movwne	r0, #37	; 0x25
    46b0:	0007c628 	andeq	ip, r7, r8, lsr #12
    46b4:	4e074400 	cfcpysmi	mvf4, mvf7
    46b8:	13000022 	movwne	r0, #34	; 0x22
    46bc:	000e742a 	andeq	r7, lr, sl, lsr #8
    46c0:	58074800 	stmdapl	r7, {fp, lr}
    46c4:	13000027 	movwne	r0, #39	; 0x27
    46c8:	000fa22b 	andeq	sl, pc, fp, lsr #4
    46cc:	b807b800 	stmdalt	r7, {fp, ip, sp, pc}
    46d0:	13000027 	movwne	r0, #39	; 0x27
    46d4:	0000362d 	andeq	r3, r0, sp, lsr #12
    46d8:	d107bc00 	tstle	r7, r0, lsl #24
    46dc:	1300001f 	movwne	r0, #31
    46e0:	000d0e2e 	andeq	r0, sp, lr, lsr #28
    46e4:	2a07c000 	bcs	1f46ec <mailbuffer+0x1b95fc>
    46e8:	13000026 	movwne	r0, #38	; 0x26
    46ec:	0009be30 	andeq	fp, r9, r0, lsr lr
    46f0:	3407c400 	strcc	ip, [r7], #-1024	; 0xfffffc00
    46f4:	1300002a 	movwne	r0, #42	; 0x2a
    46f8:	000d0e31 	andeq	r0, sp, r1, lsr lr
    46fc:	f707c800 			; <UNDEFINED> instruction: 0xf707c800
    4700:	13000025 	movwne	r0, #37	; 0x25
    4704:	00003632 	andeq	r3, r0, r2, lsr r6
    4708:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
    470c:	000e7f04 	andeq	r7, lr, r4, lsl #30
    4710:	29890500 	stmibcs	r9, {r8, sl}
    4714:	34130000 	ldrcc	r0, [r3], #-0
    4718:	00000ef9 	strdeq	r0, [r0], -r9
    471c:	001f5c06 	andseq	r5, pc, r6, lsl #24
    4720:	25145000 	ldrcs	r5, [r4, #-0]
    4724:	00001008 	andeq	r1, r0, r8
    4728:	00250107 	eoreq	r0, r5, r7, lsl #2
    472c:	df271400 	svcle	0x00271400
    4730:	00000006 	andeq	r0, r0, r6
    4734:	002bcc07 	eoreq	ip, fp, r7, lsl #24
    4738:	c6291400 	strtgt	r1, [r9], -r0, lsl #8
    473c:	38000007 	stmdacc	r0, {r0, r1, r2}
    4740:	00252c07 	eoreq	r2, r5, r7, lsl #24
    4744:	c62a1400 	strtgt	r1, [sl], -r0, lsl #8
    4748:	3c000007 	stccc	0, cr0, [r0], {7}
    474c:	0028dc07 	eoreq	sp, r8, r7, lsl #24
    4750:	532c1400 	teqpl	ip, #0, 8
    4754:	40000000 	andmi	r0, r0, r0
    4758:	0026bb07 	eoreq	fp, r6, r7, lsl #22
    475c:	532d1400 	teqpl	sp, #0, 8
    4760:	44000000 	strmi	r0, [r0], #-0
    4764:	00292407 	eoreq	r2, r9, r7, lsl #8
    4768:	5a2e1400 	bpl	b89770 <mailbuffer+0xb4e680>
    476c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4770:	1f5c0500 	svcne	0x005c0500
    4774:	30140000 	andscc	r0, r4, r0
    4778:	00000fb3 			; <UNDEFINED> instruction: 0x00000fb3
    477c:	001f5006 	andseq	r5, pc, r6
    4780:	1c150c00 	ldcne	12, cr0, [r5], {-0}
    4784:	00001038 	andeq	r1, r0, r8, lsr r0
    4788:	00268a07 	eoreq	r8, r6, r7, lsl #20
    478c:	761e1500 	ldrvc	r1, [lr], -r0, lsl #10
    4790:	00000000 	andeq	r0, r0, r0
    4794:	00247b07 	eoreq	r7, r4, r7, lsl #22
    4798:	38201500 	stmdacc	r0!, {r8, sl, ip}
    479c:	04000010 	streq	r0, [r0], #-16
    47a0:	00250f00 	eoreq	r0, r5, r0, lsl #30
    47a4:	10480000 	subne	r0, r8, r0
    47a8:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
    47ac:	05000004 	streq	r0, [r0, #-4]
    47b0:	1f500500 	svcne	0x00500500
    47b4:	22150000 	andscs	r0, r5, #0
    47b8:	00001013 	andeq	r1, r0, r3, lsl r0
    47bc:	0029bf06 	eoreq	fp, r9, r6, lsl #30
    47c0:	1f165000 	svcne	0x00165000
    47c4:	0000109c 	muleq	r0, ip, r0
    47c8:	00250107 	eoreq	r0, r5, r7, lsl #2
    47cc:	df211600 	svcle	0x00211600
    47d0:	00000006 	andeq	r0, r0, r6
    47d4:	00280c07 	eoreq	r0, r8, r7, lsl #24
    47d8:	c6231600 	strtgt	r1, [r3], -r0, lsl #12
    47dc:	38000007 	stmdacc	r0, {r0, r1, r2}
    47e0:	002aea07 	eoreq	lr, sl, r7, lsl #20
    47e4:	c6241600 	strtgt	r1, [r4], -r0, lsl #12
    47e8:	3c000007 	stccc	0, cr0, [r0], {7}
    47ec:	0023de07 	eoreq	sp, r3, r7, lsl #28
    47f0:	48261600 	stmdami	r6!, {r9, sl, ip}
    47f4:	40000010 	andmi	r0, r0, r0, lsl r0
    47f8:	002a8907 	eoreq	r8, sl, r7, lsl #18
    47fc:	0e281600 	cfmadda32eq	mvax0, mvax1, mvfx8, mvfx0
    4800:	4c00000d 	stcmi	0, cr0, [r0], {13}
    4804:	29bf0500 	ldmibcs	pc!, {r8, sl}	; <UNPREDICTABLE>
    4808:	2a160000 	bcs	584810 <mailbuffer+0x549720>
    480c:	00001053 	andeq	r1, r0, r3, asr r0
    4810:	00299b06 	eoreq	r9, r9, r6, lsl #22
    4814:	25178400 	ldrcs	r8, [r7, #-1024]	; 0xfffffc00
    4818:	00001108 	andeq	r1, r0, r8, lsl #2
    481c:	0021c807 	eoreq	ip, r1, r7, lsl #16
    4820:	04271700 	strteq	r1, [r7], #-1792	; 0xfffff900
    4824:	00000001 	andeq	r0, r0, r1
    4828:	002cac07 	eoreq	sl, ip, r7, lsl #24
    482c:	fb281700 	blx	a0a436 <mailbuffer+0x9cf346>
    4830:	04000009 	streq	r0, [r0], #-9
    4834:	0021ec07 	eoreq	lr, r1, r7, lsl #24
    4838:	08291700 	stmdaeq	r9!, {r8, r9, sl, ip}
    483c:	58000011 	stmdapl	r0, {r0, r4}
    4840:	0024cd07 	eoreq	ip, r4, r7, lsl #26
    4844:	0e2a1700 	cdpeq	7, 2, cr1, cr10, cr0, {0}
    4848:	5c000011 	stcpl	0, cr0, [r0], {17}
    484c:	00285107 	eoreq	r5, r8, r7, lsl #2
    4850:	142b1700 	strtne	r1, [fp], #-1792	; 0xfffff900
    4854:	60000011 	andvs	r0, r0, r1, lsl r0
    4858:	00277707 	eoreq	r7, r7, r7, lsl #14
    485c:	2a2c1700 	bcs	b0a464 <mailbuffer+0xacf374>
    4860:	70000011 	andvc	r0, r0, r1, lsl r0
    4864:	00225607 	eoreq	r5, r2, r7, lsl #12
    4868:	302d1700 	eorcc	r1, sp, r0, lsl #14
    486c:	74000011 	strvc	r0, [r0], #-17	; 0xffffffef
    4870:	14040800 	strne	r0, [r4], #-2048	; 0xfffff800
    4874:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    4878:	000da604 	andeq	sl, sp, r4, lsl #12
    487c:	11240f00 	teqne	r4, r0, lsl #30
    4880:	11240000 	teqne	r4, r0
    4884:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
    4888:	03000004 	movweq	r0, #4
    488c:	08040800 	stmdaeq	r4, {fp}
    4890:	08000010 	stmdaeq	r0, {r4}
    4894:	00109c04 	andseq	r9, r0, r4, lsl #24
    4898:	11400f00 	cmpne	r0, r0, lsl #30
    489c:	11400000 	mrsne	r0, (UNDEF: 64)
    48a0:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
    48a4:	03000004 	movweq	r0, #4
    48a8:	a8040800 	stmdage	r4, {fp}
    48ac:	0500000f 	streq	r0, [r0, #-15]
    48b0:	0000299b 	muleq	r0, fp, r9
    48b4:	10a72f17 	adcne	r2, r7, r7, lsl pc
    48b8:	cf1a0000 	svcgt	0x001a0000
    48bc:	01000023 	tsteq	r0, r3, lsr #32
    48c0:	00006f20 	andeq	r6, r0, r0, lsr #30
    48c4:	01711000 	cmneq	r1, r0
    48c8:	00038400 	andeq	r8, r3, r0, lsl #8
    48cc:	cb9c0100 	blgt	fe704cd4 <_estack+0xf66f4cd4>
    48d0:	1b000011 	blne	491c <_start-0x36e4>
    48d4:	000172dc 	ldrdeq	r7, [r1], -ip
    48d8:	000000a0 	andeq	r0, r0, r0, lsr #1
    48dc:	0000119c 	muleq	r0, ip, r1
    48e0:	0100691c 	tsteq	r0, ip, lsl r9
    48e4:	0000533a 	andeq	r5, r0, sl, lsr r3
    48e8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    48ec:	0172e81d 	cmneq	r2, sp, lsl r8
    48f0:	00007c00 	andeq	r7, r0, r0, lsl #24
    48f4:	2a441e00 	bcs	110c0fc <mailbuffer+0x10d100c>
    48f8:	3c010000 	stccc	0, cr0, [r1], {-0}
    48fc:	0000050c 	andeq	r0, r0, ip, lsl #10
    4900:	00549102 	subseq	r9, r4, r2, lsl #2
    4904:	73ac1d00 			; <UNDEFINED> instruction: 0x73ac1d00
    4908:	00a80001 	adceq	r0, r8, r1
    490c:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
    4910:	53480100 	movtpl	r0, #33024	; 0x8100
    4914:	02000000 	andeq	r0, r0, #0
    4918:	b81d6091 	ldmdalt	sp, {r0, r4, r7, sp, lr}
    491c:	84000173 	strhi	r0, [r0], #-371	; 0xfffffe8d
    4920:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4924:	00002a44 	andeq	r2, r0, r4, asr #20
    4928:	050c4a01 	streq	r4, [ip, #-2561]	; 0xfffff5ff
    492c:	91020000 	mrsls	r0, (UNDEF: 2)
    4930:	00000048 	andeq	r0, r0, r8, asr #32
    4934:	0023861f 	eoreq	r8, r3, pc, lsl r6
    4938:	6f590100 	svcvs	0x00590100
    493c:	94000000 	strls	r0, [r0], #-0
    4940:	90000174 	andls	r0, r0, r4, ror r1
    4944:	01000000 	mrseq	r0, (UNDEF: 0)
    4948:	2c5f209c 	mrrccs	0, 9, r2, pc, cr12	; <UNPREDICTABLE>
    494c:	5f010000 	svcpl	0x00010000
    4950:	00017524 	andeq	r7, r1, r4, lsr #10
    4954:	000000bc 	strheq	r0, [r0], -ip
    4958:	12049c01 	andne	r9, r4, #256	; 0x100
    495c:	ae210000 	cdpge	0, 2, cr0, cr1, cr0, {0}
    4960:	01000020 	tsteq	r0, r0, lsr #32
    4964:	0012045f 	andseq	r0, r2, pc, asr r4
    4968:	6c910200 	lfmvs	f0, 4, [r1], {0}
    496c:	b1040800 	tstlt	r4, r0, lsl #16
    4970:	2000000d 	andcs	r0, r0, sp
    4974:	00002a05 	andeq	r2, r0, r5, lsl #20
    4978:	75e06601 	strbvc	r6, [r0, #1537]!	; 0x601
    497c:	00bc0001 	adcseq	r0, ip, r1
    4980:	9c010000 	stcls	0, cr0, [r1], {-0}
    4984:	0000122e 	andeq	r1, r0, lr, lsr #4
    4988:	0022c621 	eoreq	ip, r2, r1, lsr #12
    498c:	2e660100 	powcss	f0, f6, f0
    4990:	02000012 	andeq	r0, r0, #18
    4994:	08006c91 	stmdaeq	r0, {r0, r4, r7, sl, fp, sp, lr}
    4998:	000dbc04 	andeq	fp, sp, r4, lsl #24
    499c:	21882000 	orrcs	r2, r8, r0
    49a0:	6d010000 	stcvs	0, cr0, [r1, #-0]
    49a4:	0001769c 	muleq	r1, ip, r6
    49a8:	000000bc 	strheq	r0, [r0], -ip
    49ac:	12589c01 	subsne	r9, r8, #256	; 0x100
    49b0:	15210000 	strne	r0, [r1, #-0]!
    49b4:	01000026 	tsteq	r0, r6, lsr #32
    49b8:	000d086d 	andeq	r0, sp, sp, ror #16
    49bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    49c0:	2bf91f00 	blcs	ffe4c5c8 <_estack+0xf7e3c5c8>
    49c4:	74010000 	strvc	r0, [r1], #-0
    49c8:	0000006f 	andeq	r0, r0, pc, rrx
    49cc:	00017758 	andeq	r7, r1, r8, asr r7
    49d0:	00000090 	muleq	r0, r0, r0
    49d4:	c1209c01 	teqgt	r0, r1, lsl #24
    49d8:	01000020 	tsteq	r0, r0, lsr #32
    49dc:	0177e87a 	cmneq	r7, sl, ror r8
    49e0:	0000bc00 	andeq	fp, r0, r0, lsl #24
    49e4:	919c0100 	orrsls	r0, ip, r0, lsl #2
    49e8:	21000012 	tstcs	r0, r2, lsl r0
    49ec:	0000275a 	andeq	r2, r0, sl, asr r7
    49f0:	12917a01 	addsne	r7, r1, #4096	; 0x1000
    49f4:	91020000 	mrsls	r0, (UNDEF: 2)
    49f8:	0408006c 	streq	r0, [r8], #-108	; 0xffffff94
    49fc:	00000dc7 	andeq	r0, r0, r7, asr #27
    4a00:	0029381a 	eoreq	r3, r9, sl, lsl r8
    4a04:	6f810100 	svcvs	0x00810100
    4a08:	a4000000 	strge	r0, [r0], #-0
    4a0c:	c0000178 	andgt	r0, r0, r8, ror r1
    4a10:	01000000 	mrseq	r0, (UNDEF: 0)
    4a14:	0012bd9c 	mulseq	r2, ip, sp
    4a18:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    4a1c:	00538501 	subseq	r8, r3, r1, lsl #10
    4a20:	91020000 	mrsls	r0, (UNDEF: 2)
    4a24:	6c1a006c 	ldcvs	0, cr0, [sl], {108}	; 0x6c
    4a28:	01000023 	tsteq	r0, r3, lsr #32
    4a2c:	00006f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    4a30:	01796400 	cmneq	r9, r0, lsl #8
    4a34:	00011c00 	andeq	r1, r1, r0, lsl #24
    4a38:	0f9c0100 	svceq	0x009c0100
    4a3c:	21000013 	tstcs	r0, r3, lsl r0
    4a40:	00002926 	andeq	r2, r0, r6, lsr #18
    4a44:	005a9101 	subseq	r9, sl, r1, lsl #2
    4a48:	91020000 	mrsls	r0, (UNDEF: 2)
    4a4c:	26532168 	ldrbcs	r2, [r3], -r8, ror #2
    4a50:	91010000 	mrsls	r0, (UNDEF: 1)
    4a54:	000000d8 	ldrdeq	r0, [r0], -r8
    4a58:	21649102 	cmncs	r4, r2, lsl #2
    4a5c:	000021e5 	andeq	r2, r0, r5, ror #3
    4a60:	00539101 	subseq	r9, r3, r1, lsl #2
    4a64:	91020000 	mrsls	r0, (UNDEF: 2)
    4a68:	200a2160 	andcs	r2, sl, r0, ror #2
    4a6c:	91010000 	mrsls	r0, (UNDEF: 1)
    4a70:	00000053 	andeq	r0, r0, r3, asr r0
    4a74:	00009102 	andeq	r9, r0, r2, lsl #2
    4a78:	00244b1a 	eoreq	r4, r4, sl, lsl fp
    4a7c:	6fa30100 	svcvs	0x00a30100
    4a80:	80000000 	andhi	r0, r0, r0
    4a84:	1c00017a 	stfnes	f0, [r0], {122}	; 0x7a
    4a88:	01000001 	tsteq	r0, r1
    4a8c:	0013619c 	mulseq	r3, ip, r1
    4a90:	29262100 	stmdbcs	r6!, {r8, sp}
    4a94:	a3010000 	movwge	r0, #4096	; 0x1000
    4a98:	0000005a 	andeq	r0, r0, sl, asr r0
    4a9c:	21689102 	cmncs	r8, r2, lsl #2
    4aa0:	00002653 	andeq	r2, r0, r3, asr r6
    4aa4:	1361a301 	cmnne	r1, #67108864	; 0x4000000
    4aa8:	91020000 	mrsls	r0, (UNDEF: 2)
    4aac:	21e52164 	mvncs	r2, r4, ror #2
    4ab0:	a3010000 	movwge	r0, #4096	; 0x1000
    4ab4:	00000053 	andeq	r0, r0, r3, asr r0
    4ab8:	21609102 	cmncs	r0, r2, lsl #2
    4abc:	0000200a 	andeq	r2, r0, sl
    4ac0:	0053a301 	subseq	sl, r3, r1, lsl #6
    4ac4:	91020000 	mrsls	r0, (UNDEF: 2)
    4ac8:	04080000 	streq	r0, [r8], #-0
    4acc:	00001367 	andeq	r1, r0, r7, ror #6
    4ad0:	28e61a22 	stmiacs	r6!, {r1, r5, r9, fp, ip}^
    4ad4:	b5010000 	strlt	r0, [r1, #-0]
    4ad8:	00000053 	andeq	r0, r0, r3, asr r0
    4adc:	00017b9c 	muleq	r1, ip, fp
    4ae0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4ae4:	13909c01 	orrsne	r9, r0, #256	; 0x100
    4ae8:	0a210000 	beq	844af0 <mailbuffer+0x809a00>
    4aec:	01000020 	tsteq	r0, r0, lsr #32
    4af0:	000053b5 			; <UNDEFINED> instruction: 0x000053b5
    4af4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4af8:	25a61f00 	strcs	r1, [r6, #3840]!	; 0xf00
    4afc:	c2010000 	andgt	r0, r1, #0
    4b00:	0000006f 	andeq	r0, r0, pc, rrx
    4b04:	00017c6c 	andeq	r7, r1, ip, ror #24
    4b08:	00000090 	muleq	r0, r0, r0
    4b0c:	16209c01 	strtne	r9, [r0], -r1, lsl #24
    4b10:	0100002c 	tsteq	r0, ip, lsr #32
    4b14:	017cfcc8 	cmneq	ip, r8, asr #25
    4b18:	0000ec00 	andeq	lr, r0, r0, lsl #24
    4b1c:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    4b20:	21000013 	tstcs	r0, r3, lsl r0
    4b24:	00000c91 	muleq	r0, r1, ip
    4b28:	13d7c801 	bicsne	ip, r7, #65536	; 0x10000
    4b2c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b30:	22b81e64 	adcscs	r1, r8, #100, 28	; 0x640
    4b34:	cc010000 	stcgt	0, cr0, [r1], {-0}
    4b38:	000013dd 	ldrdeq	r1, [r0], -sp
    4b3c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    4b40:	002f0408 	eoreq	r0, pc, r8, lsl #8
    4b44:	04080000 	streq	r0, [r8], #-0
    4b48:	00001048 	andeq	r1, r0, r8, asr #32
    4b4c:	0024991a 	eoreq	r9, r4, sl, lsl r9
    4b50:	6fd20100 	svcvs	0x00d20100
    4b54:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    4b58:	e400017d 	str	r0, [r0], #-381	; 0xfffffe83
    4b5c:	01000000 	mrseq	r0, (UNDEF: 0)
    4b60:	0014199c 	mulseq	r4, ip, r9
    4b64:	26532100 	ldrbcs	r2, [r3], -r0, lsl #2
    4b68:	d2010000 	andle	r0, r1, #0
    4b6c:	00001361 	andeq	r1, r0, r1, ror #6
    4b70:	216c9102 	cmncs	ip, r2, lsl #2
    4b74:	00004c0e 	andeq	r4, r0, lr, lsl #24
    4b78:	0053d201 	subseq	sp, r3, r1, lsl #4
    4b7c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b80:	581a0068 	ldmdapl	sl, {r3, r5, r6}
    4b84:	01000021 	tsteq	r0, r1, lsr #32
    4b88:	00006fd9 	ldrdeq	r6, [r0], -r9
    4b8c:	017ecc00 	cmneq	lr, r0, lsl #24
    4b90:	0000e400 	andeq	lr, r0, r0, lsl #8
    4b94:	4f9c0100 	svcmi	0x009c0100
    4b98:	21000014 	tstcs	r0, r4, lsl r0
    4b9c:	00002653 	andeq	r2, r0, r3, asr r6
    4ba0:	00d8d901 	sbcseq	sp, r8, r1, lsl #18
    4ba4:	91020000 	mrsls	r0, (UNDEF: 2)
    4ba8:	2a63216c 	bcs	18cd160 <mailbuffer+0x1892070>
    4bac:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    4bb0:	0000144f 	andeq	r1, r0, pc, asr #8
    4bb4:	00689102 	rsbeq	r9, r8, r2, lsl #2
    4bb8:	00530408 	subseq	r0, r3, r8, lsl #8
    4bbc:	e11a0000 	tst	sl, r0
    4bc0:	01000022 	tsteq	r0, r2, lsr #32
    4bc4:	00006fe0 	andeq	r6, r0, r0, ror #31
    4bc8:	017fb000 	cmneq	pc, r0
    4bcc:	0000c800 	andeq	ip, r0, r0, lsl #16
    4bd0:	7b9c0100 	blvc	fe704fd8 <_estack+0xf66f4fd8>
    4bd4:	1c000014 	stcne	0, cr0, [r0], {20}
    4bd8:	e4010069 	str	r0, [r1], #-105	; 0xffffff97
    4bdc:	00000053 	andeq	r0, r0, r3, asr r0
    4be0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    4be4:	0023f420 	eoreq	pc, r3, r0, lsr #8
    4be8:	78f00100 	ldmvc	r0!, {r8}^
    4bec:	e8000180 	stmda	r0, {r7, r8}
    4bf0:	01000000 	mrseq	r0, (UNDEF: 0)
    4bf4:	0014ab9c 	mulseq	r4, ip, fp
    4bf8:	275a2100 	ldrbcs	r2, [sl, -r0, lsl #2]
    4bfc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    4c00:	00000fa2 	andeq	r0, r0, r2, lsr #31
    4c04:	1c649102 	stfnep	f1, [r4], #-8
    4c08:	f4010069 	vst4.16	{d0-d3}, [r1 :128], r9
    4c0c:	00000053 	andeq	r0, r0, r3, asr r0
    4c10:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    4c14:	001ff31a 	andseq	pc, pc, sl, lsl r3	; <UNPREDICTABLE>
    4c18:	9afe0100 	bls	fff85020 <_estack+0xf7f75020>
    4c1c:	6000000e 	andvs	r0, r0, lr
    4c20:	00000181 	andeq	r0, r0, r1, lsl #3
    4c24:	01000001 	tsteq	r0, r1
    4c28:	0014d39c 	mulseq	r4, ip, r3
    4c2c:	200a2100 	andcs	r2, sl, r0, lsl #2
    4c30:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    4c34:	00000053 	andeq	r0, r0, r3, asr r0
    4c38:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    4c3c:	00202823 	eoreq	r2, r0, r3, lsr #16
    4c40:	010d0100 	mrseq	r0, (UNDEF: 29)
    4c44:	0000006f 	andeq	r0, r0, pc, rrx
    4c48:	00018260 	andeq	r8, r1, r0, ror #4
    4c4c:	00000274 	andeq	r0, r0, r4, ror r2
    4c50:	15399c01 	ldrne	r9, [r9, #-3073]!	; 0xfffff3ff
    4c54:	cf240000 	svcgt	0x00240000
    4c58:	01000029 	tsteq	r0, r9, lsr #32
    4c5c:	0053010d 	subseq	r0, r3, sp, lsl #2
    4c60:	91020000 	mrsls	r0, (UNDEF: 2)
    4c64:	200a2464 	andcs	r2, sl, r4, ror #8
    4c68:	0d010000 	stceq	0, cr0, [r1, #-0]
    4c6c:	00005301 	andeq	r5, r0, r1, lsl #6
    4c70:	60910200 	addsvs	r0, r1, r0, lsl #4
    4c74:	0025bc24 	eoreq	fp, r5, r4, lsr #24
    4c78:	010d0100 	mrseq	r0, (UNDEF: 29)
    4c7c:	00001539 	andeq	r1, r0, r9, lsr r5
    4c80:	255c9102 	ldrbcs	r9, [ip, #-258]	; 0xfffffefe
    4c84:	00002330 	andeq	r2, r0, r0, lsr r3
    4c88:	16011101 	strne	r1, [r1], -r1, lsl #2
    4c8c:	02000007 	andeq	r0, r0, #7
    4c90:	15256c91 	strne	r6, [r5, #-3217]!	; 0xfffff36f
    4c94:	01000024 	tsteq	r0, r4, lsr #32
    4c98:	153f0141 	ldrne	r0, [pc, #-321]!	; 4b5f <_start-0x34a1>
    4c9c:	91020000 	mrsls	r0, (UNDEF: 2)
    4ca0:	04080068 	streq	r0, [r8], #-104	; 0xffffff98
    4ca4:	00000eee 	andeq	r0, r0, lr, ror #29
    4ca8:	15450408 	strbne	r0, [r5, #-1032]	; 0xfffffbf8
    4cac:	62110000 	andsvs	r0, r1, #0
    4cb0:	0f000002 	svceq	0x00000002
    4cb4:	00000061 	andeq	r0, r0, r1, rrx
    4cb8:	0000155a 	andeq	r1, r0, sl, asr r5
    4cbc:	00045e16 	andeq	r5, r4, r6, lsl lr
    4cc0:	1e000400 	cfcpysne	mvf0, mvf0
    4cc4:	00002059 	andeq	r2, r0, r9, asr r0
    4cc8:	156b1c01 	strbne	r1, [fp, #-3073]!	; 0xfffff3ff
    4ccc:	03050000 	movweq	r0, #20480	; 0x5000
    4cd0:	0002df5c 	andeq	sp, r2, ip, asr pc
    4cd4:	00154a11 	andseq	r4, r5, r1, lsl sl
    4cd8:	225c1e00 	subscs	r1, ip, #0, 28
    4cdc:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    4ce0:	00001581 	andeq	r1, r0, r1, lsl #11
    4ce4:	b0c80305 	sbclt	r0, r8, r5, lsl #6
    4ce8:	04080003 	streq	r0, [r8], #-3
    4cec:	00001146 	andeq	r1, r0, r6, asr #2
    4cf0:	00175300 	andseq	r5, r7, r0, lsl #6
    4cf4:	29000400 	stmdbcs	r0, {sl}
    4cf8:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    4cfc:	00001901 	andeq	r1, r0, r1, lsl #18
    4d00:	30170100 	andscc	r0, r7, r0, lsl #2
    4d04:	0ddc0000 	ldcleq	0, cr0, [ip]
    4d08:	84d40000 	ldrbhi	r0, [r4], #0
    4d0c:	3bc40001 	blcc	ff104d18 <_estack+0xf70f4d18>
    4d10:	1c8d0000 	stcne	0, cr0, [sp], {0}
    4d14:	01020000 	mrseq	r0, (UNDEF: 2)
    4d18:	00401b02 	subeq	r1, r0, r2, lsl #22
    4d1c:	46030000 	strmi	r0, [r3], -r0
    4d20:	00000025 	andeq	r0, r0, r5, lsr #32
    4d24:	002b2803 	eoreq	r2, fp, r3, lsl #16
    4d28:	bb030100 	bllt	c5130 <mailbuffer+0x8a040>
    4d2c:	02000028 	andeq	r0, r0, #40	; 0x28
    4d30:	22130400 	andscs	r0, r3, #0, 8
    4d34:	22020000 	andcs	r0, r2, #0
    4d38:	00000025 	andeq	r0, r0, r5, lsr #32
    4d3c:	2b020102 	blcs	8514c <mailbuffer+0x4a05c>
    4d40:	0000006c 	andeq	r0, r0, ip, rrx
    4d44:	00259a03 	eoreq	r9, r5, r3, lsl #20
    4d48:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    4d4c:	0100002c 	tsteq	r0, ip, lsr #32
    4d50:	00222103 	eoreq	r2, r2, r3, lsl #2
    4d54:	5b030200 	blpl	c555c <mailbuffer+0x8a46c>
    4d58:	03000026 	movweq	r0, #38	; 0x26
    4d5c:	24210400 	strtcs	r0, [r1], #-1024	; 0xfffffc00
    4d60:	31020000 	mrscc	r0, (UNDEF: 2)
    4d64:	0000004b 	andeq	r0, r0, fp, asr #32
    4d68:	34020805 	strcc	r0, [r2], #-2053	; 0xfffff7fb
    4d6c:	000000bc 	strheq	r0, [r0], -ip
    4d70:	00227606 	eoreq	r7, r2, r6, lsl #12
    4d74:	bc360200 	lfmlt	f0, 4, [r6], #-0
    4d78:	00000000 	andeq	r0, r0, r0
    4d7c:	0027d306 	eoreq	sp, r7, r6, lsl #6
    4d80:	bc370200 	lfmlt	f0, 4, [r7], #-0
    4d84:	01000000 	mrseq	r0, (UNDEF: 0)
    4d88:	0021f306 	eoreq	pc, r1, r6, lsl #6
    4d8c:	c3380200 	teqgt	r8, #0, 4
    4d90:	02000000 	andeq	r0, r0, #0
    4d94:	001f0c06 	andseq	r0, pc, r6, lsl #24
    4d98:	c3390200 	teqgt	r9, #0, 4
    4d9c:	04000000 	streq	r0, [r0], #-0
    4da0:	002bb306 	eoreq	fp, fp, r6, lsl #6
    4da4:	c33a0200 	teqgt	sl, #0, 4
    4da8:	06000000 	streq	r0, [r0], -r0
    4dac:	08010700 	stmdaeq	r1, {r8, r9, sl}
    4db0:	0000072a 	andeq	r0, r0, sl, lsr #14
    4db4:	32070207 	andcc	r0, r7, #1879048192	; 0x70000000
    4db8:	04000001 	streq	r0, [r0], #-1
    4dbc:	00002208 	andeq	r2, r0, r8, lsl #4
    4dc0:	00773d02 	rsbseq	r3, r7, r2, lsl #26
    4dc4:	12050000 	andne	r0, r5, #0
    4dc8:	01865c02 	orreq	r5, r6, r2, lsl #24
    4dcc:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    4dd0:	02000029 	andeq	r0, r0, #41	; 0x29
    4dd4:	0000bc5e 	andeq	fp, r0, lr, asr ip
    4dd8:	2b060000 	blcs	184de0 <mailbuffer+0x149cf0>
    4ddc:	02000024 	andeq	r0, r0, #36	; 0x24
    4de0:	0000bc5f 	andeq	fp, r0, pc, asr ip
    4de4:	8c060100 	stfhis	f0, [r6], {-0}
    4de8:	02000022 	andeq	r0, r0, #34	; 0x22
    4dec:	0000c360 	andeq	ip, r0, r0, ror #6
    4df0:	28060200 	stmdacs	r6, {r9}
    4df4:	02000021 	andeq	r0, r0, #33	; 0x21
    4df8:	0000bc61 	andeq	fp, r0, r1, ror #24
    4dfc:	f6060400 			; <UNDEFINED> instruction: 0xf6060400
    4e00:	02000022 	andeq	r0, r0, #34	; 0x22
    4e04:	0000bc62 	andeq	fp, r0, r2, ror #24
    4e08:	9f060500 	svcls	0x00060500
    4e0c:	02000027 	andeq	r0, r0, #39	; 0x27
    4e10:	0000bc63 	andeq	fp, r0, r3, ror #24
    4e14:	e7060600 	str	r0, [r6, -r0, lsl #12]
    4e18:	02000025 	andeq	r0, r0, #37	; 0x25
    4e1c:	0000bc64 	andeq	fp, r0, r4, ror #24
    4e20:	56060700 	strpl	r0, [r6], -r0, lsl #14
    4e24:	0200002c 	andeq	r0, r0, #44	; 0x2c
    4e28:	0000c366 	andeq	ip, r0, r6, ror #6
    4e2c:	44060800 	strmi	r0, [r6], #-2048	; 0xfffff800
    4e30:	02000022 	andeq	r0, r0, #34	; 0x22
    4e34:	0000c367 	andeq	ip, r0, r7, ror #6
    4e38:	35060a00 	strcc	r0, [r6, #-2560]	; 0xfffff600
    4e3c:	02000021 	andeq	r0, r0, #33	; 0x21
    4e40:	0000c368 	andeq	ip, r0, r8, ror #6
    4e44:	fa060c00 	blx	187e4c <mailbuffer+0x14cd5c>
    4e48:	02000021 	andeq	r0, r0, #33	; 0x21
    4e4c:	0000bc69 	andeq	fp, r0, r9, ror #24
    4e50:	3b060e00 	blcc	188658 <mailbuffer+0x14d568>
    4e54:	02000023 	andeq	r0, r0, #35	; 0x23
    4e58:	0000bc6a 	andeq	fp, r0, sl, ror #24
    4e5c:	22060f00 	andcs	r0, r6, #0, 30
    4e60:	02000023 	andeq	r0, r0, #35	; 0x23
    4e64:	0000bc6b 	andeq	fp, r0, fp, ror #24
    4e68:	a8061000 	stmdage	r6, {ip}
    4e6c:	02000028 	andeq	r0, r0, #40	; 0x28
    4e70:	0000bc6c 	andeq	fp, r0, ip, ror #24
    4e74:	04001100 	streq	r1, [r0], #-256	; 0xffffff00
    4e78:	000028c7 	andeq	r2, r0, r7, asr #17
    4e7c:	00d56e02 	sbcseq	r6, r5, r2, lsl #28
    4e80:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
    4e84:	01fa7102 	mvnseq	r7, r2, lsl #2
    4e88:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    4e8c:	02000029 	andeq	r0, r0, #41	; 0x29
    4e90:	0000bc73 	andeq	fp, r0, r3, ror ip
    4e94:	2b060000 	blcs	184e9c <mailbuffer+0x149dac>
    4e98:	02000024 	andeq	r0, r0, #36	; 0x24
    4e9c:	0000bc74 	andeq	fp, r0, r4, ror ip
    4ea0:	88060100 	stmdahi	r6, {r8}
    4ea4:	02000020 	andeq	r0, r0, #32
    4ea8:	0000c375 	andeq	ip, r0, r5, ror r3
    4eac:	b0060200 	andlt	r0, r6, r0, lsl #4
    4eb0:	02000029 	andeq	r0, r0, #41	; 0x29
    4eb4:	0000bc76 	andeq	fp, r0, r6, ror ip
    4eb8:	4f060400 	svcmi	0x00060400
    4ebc:	0200002a 	andeq	r0, r0, #42	; 0x2a
    4ec0:	0000bc77 	andeq	fp, r0, r7, ror ip
    4ec4:	90060500 	andls	r0, r6, r0, lsl #10
    4ec8:	02000027 	andeq	r0, r0, #39	; 0x27
    4ecc:	0000bc78 	andeq	fp, r0, r8, ror ip
    4ed0:	8d060600 	stchi	6, cr0, [r6, #-0]
    4ed4:	02000025 	andeq	r0, r0, #37	; 0x25
    4ed8:	0000bc79 	andeq	fp, r0, r9, ror ip
    4edc:	b3060700 	movwlt	r0, #26368	; 0x6700
    4ee0:	0200002a 	andeq	r0, r0, #42	; 0x2a
    4ee4:	0000bc7a 	andeq	fp, r0, sl, ror ip
    4ee8:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    4eec:	00002306 	andeq	r2, r0, r6, lsl #6
    4ef0:	01917c02 	orrseq	r7, r1, r2, lsl #24
    4ef4:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
    4ef8:	027a7f02 	rsbseq	r7, sl, #2, 30
    4efc:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    4f00:	02000029 	andeq	r0, r0, #41	; 0x29
    4f04:	0000bc81 	andeq	fp, r0, r1, lsl #25
    4f08:	2b060000 	blcs	184f10 <mailbuffer+0x149e20>
    4f0c:	02000024 	andeq	r0, r0, #36	; 0x24
    4f10:	0000bc82 	andeq	fp, r0, r2, lsl #25
    4f14:	17060100 	strne	r0, [r6, -r0, lsl #2]
    4f18:	02000020 	andeq	r0, r0, #32
    4f1c:	0000bc83 	andeq	fp, r0, r3, lsl #25
    4f20:	41060200 	mrsmi	r0, LR_usr
    4f24:	02000020 	andeq	r0, r0, #32
    4f28:	0000bc84 	andeq	fp, r0, r4, lsl #25
    4f2c:	69060300 	stmdbvs	r6, {r8, r9}
    4f30:	02000027 	andeq	r0, r0, #39	; 0x27
    4f34:	0000bc85 	andeq	fp, r0, r5, lsl #25
    4f38:	21060400 	tstcs	r6, r0, lsl #8
    4f3c:	02000027 	andeq	r0, r0, #39	; 0x27
    4f40:	0000bc86 	andeq	fp, r0, r6, lsl #25
    4f44:	29060500 	stmdbcs	r6, {r8, sl}
    4f48:	0200001f 	andeq	r0, r0, #31
    4f4c:	0000bc87 	andeq	fp, r0, r7, lsl #25
    4f50:	95060600 	strls	r0, [r6, #-1536]	; 0xfffffa00
    4f54:	02000028 	andeq	r0, r0, #40	; 0x28
    4f58:	0000bc88 	andeq	fp, r0, r8, lsl #25
    4f5c:	16060700 	strne	r0, [r6], -r0, lsl #14
    4f60:	02000027 	andeq	r0, r0, #39	; 0x27
    4f64:	0000bc89 	andeq	fp, r0, r9, lsl #25
    4f68:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    4f6c:	000027e4 	andeq	r2, r0, r4, ror #15
    4f70:	02058b02 	andeq	r8, r5, #2048	; 0x800
    4f74:	07050000 	streq	r0, [r5, -r0]
    4f78:	02d68e02 	sbcseq	r8, r6, #2, 28
    4f7c:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    4f80:	02000029 	andeq	r0, r0, #41	; 0x29
    4f84:	0000bc90 	muleq	r0, r0, ip
    4f88:	2b060000 	blcs	184f90 <mailbuffer+0x149ea0>
    4f8c:	02000024 	andeq	r0, r0, #36	; 0x24
    4f90:	0000bc91 	muleq	r0, r1, ip
    4f94:	c9060100 	stmdbgt	r6, {r8}
    4f98:	02000026 	andeq	r0, r0, #38	; 0x26
    4f9c:	0000bc92 	muleq	r0, r2, ip
    4fa0:	8d060200 	sfmhi	f0, 4, [r6, #-0]
    4fa4:	02000025 	andeq	r0, r0, #37	; 0x25
    4fa8:	0000bc93 	muleq	r0, r3, ip
    4fac:	60060300 	andvs	r0, r6, r0, lsl #6
    4fb0:	02000029 	andeq	r0, r0, #41	; 0x29
    4fb4:	0000c394 	muleq	r0, r4, r3
    4fb8:	22060400 	andcs	r0, r6, #0, 8
    4fbc:	02000025 	andeq	r0, r0, #37	; 0x25
    4fc0:	0000bc95 	muleq	r0, r5, ip
    4fc4:	04000600 	streq	r0, [r0], #-1536	; 0xfffffa00
    4fc8:	00002bda 	ldrdeq	r2, [r0], -sl
    4fcc:	02859702 	addeq	r9, r5, #524288	; 0x80000
    4fd0:	02050000 	andeq	r0, r5, #0
    4fd4:	03029c02 	movweq	r9, #11266	; 0x2c02
    4fd8:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    4fdc:	02000029 	andeq	r0, r0, #41	; 0x29
    4fe0:	0000bc9e 	muleq	r0, lr, ip
    4fe4:	2b060000 	blcs	184fec <mailbuffer+0x149efc>
    4fe8:	02000024 	andeq	r0, r0, #36	; 0x24
    4fec:	0000bc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    4ff0:	08000100 	stmdaeq	r0, {r8}
    4ff4:	379a0209 	ldrcc	r0, [sl, r9, lsl #4]
    4ff8:	09000003 	stmdbeq	r0, {r0, r1}
    4ffc:	00003c02 	andeq	r3, r0, r2, lsl #24
    5000:	02e1a102 	rsceq	sl, r1, #-2147483648	; 0x80000000
    5004:	91090000 	mrsls	r0, (UNDEF: 9)
    5008:	02000027 	andeq	r0, r0, #39	; 0x27
    500c:	0001faa3 	andeq	pc, r1, r3, lsr #21
    5010:	3c4c0900 	mcrrcc	9, 0, r0, ip, cr0
    5014:	a4020000 	strge	r0, [r2], #-0
    5018:	0000027a 	andeq	r0, r0, sl, ror r2
    501c:	00258409 	eoreq	r8, r5, r9, lsl #8
    5020:	d6a50200 	strtle	r0, [r5], r0, lsl #4
    5024:	00000002 	andeq	r0, r0, r2
    5028:	0026fc04 	eoreq	pc, r6, r4, lsl #24
    502c:	02a70200 	adceq	r0, r7, #0, 4
    5030:	0a000003 	beq	5044 <_start-0x2fbc>
    5034:	00002466 	andeq	r2, r0, r6, ror #8
    5038:	73a90202 			; <UNDEFINED> instruction: 0x73a90202
    503c:	06000003 	streq	r0, [r0], -r3
    5040:	000029a8 	andeq	r2, r0, r8, lsr #19
    5044:	00bcab02 	adcseq	sl, ip, r2, lsl #22
    5048:	06000000 	streq	r0, [r0], -r0
    504c:	0000242b 	andeq	r2, r0, fp, lsr #8
    5050:	00bcac02 	adcseq	sl, ip, r2, lsl #24
    5054:	06010000 	streq	r0, [r1], -r0
    5058:	00002074 	andeq	r2, r0, r4, ror r0
    505c:	0373ad02 	cmneq	r3, #2, 26	; 0x80
    5060:	00020000 	andeq	r0, r2, r0
    5064:	0000c30b 	andeq	ip, r0, fp, lsl #6
    5068:	00038200 	andeq	r8, r3, r0, lsl #4
    506c:	03820c00 	orreq	r0, r2, #0, 24
    5070:	07000000 	streq	r0, [r0, -r0]
    5074:	01d40704 	bicseq	r0, r4, r4, lsl #14
    5078:	66040000 	strvs	r0, [r4], -r0
    507c:	02000024 	andeq	r0, r0, #36	; 0x24
    5080:	000342af 	andeq	r4, r3, pc, lsr #5
    5084:	38750d00 	ldmdacc	r5!, {r8, sl, fp}^
    5088:	bc170300 	ldclt	3, cr0, [r7], {-0}
    508c:	0d000000 	stceq	0, cr0, [r0, #-0]
    5090:	00363175 	eorseq	r3, r6, r5, ror r1
    5094:	00c31803 	sbceq	r1, r3, r3, lsl #16
    5098:	750d0000 	strvc	r0, [sp, #-0]
    509c:	03003233 	movweq	r3, #563	; 0x233
    50a0:	0003b419 	andeq	fp, r3, r9, lsl r4
    50a4:	07040700 	streq	r0, [r4, -r0, lsl #14]
    50a8:	0000071d 	andeq	r0, r0, sp, lsl r7
    50ac:	13070807 	movwne	r0, #30727	; 0x7807
    50b0:	07000007 	streq	r0, [r0, -r7]
    50b4:	07330601 	ldreq	r0, [r3, -r1, lsl #12]!
    50b8:	02070000 	andeq	r0, r7, #0
    50bc:	0007b805 	andeq	fp, r7, r5, lsl #16
    50c0:	05040e00 	streq	r0, [r4, #-3584]	; 0xfffff200
    50c4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    50c8:	00293004 	eoreq	r3, r9, r4
    50cc:	d0200300 	eorle	r0, r0, r0, lsl #6
    50d0:	07000003 	streq	r0, [r0, -r3]
    50d4:	07180704 	ldreq	r0, [r8, -r4, lsl #14]
    50d8:	04070000 	streq	r0, [r7], #-0
    50dc:	00079805 	andeq	r9, r7, r5, lsl #16
    50e0:	25520a00 	ldrbcs	r0, [r2, #-2560]	; 0xfffff600
    50e4:	04180000 	ldreq	r0, [r8], #-0
    50e8:	0004451e 	andeq	r4, r4, lr, lsl r5
    50ec:	26510600 	ldrbcs	r0, [r1], -r0, lsl #12
    50f0:	20040000 	andcs	r0, r4, r0
    50f4:	00000445 	andeq	r0, r0, r5, asr #8
    50f8:	2c0c0600 	stccs	6, cr0, [ip], {-0}
    50fc:	21040000 	mrscs	r0, (UNDEF: 4)
    5100:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    5104:	268a0604 	strcs	r0, [sl], r4, lsl #12
    5108:	22040000 	andcs	r0, r4, #0
    510c:	000003d7 	ldrdeq	r0, [r0], -r7
    5110:	21690608 	cmncs	r9, r8, lsl #12
    5114:	23040000 	movwcs	r0, #16384	; 0x4000
    5118:	00000445 	andeq	r0, r0, r5, asr #8
    511c:	277d060c 	ldrbcs	r0, [sp, -ip, lsl #12]!
    5120:	24040000 	strcs	r0, [r4], #-0
    5124:	00000445 	andeq	r0, r0, r5, asr #8
    5128:	2bbb0610 	blcs	feec6970 <_estack+0xf6eb6970>
    512c:	25040000 	strcs	r0, [r4, #-0]
    5130:	00000445 	andeq	r0, r0, r5, asr #8
    5134:	040f0014 	streq	r0, [pc], #-20	; 513c <_start-0x2ec4>
    5138:	0000044b 	andeq	r0, r0, fp, asr #8
    513c:	00033710 	andeq	r3, r3, r0, lsl r7
    5140:	25520400 	ldrbcs	r0, [r2, #-1024]	; 0xfffffc00
    5144:	27040000 	strcs	r0, [r4, -r0]
    5148:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    514c:	310a0411 	tstcc	sl, r1, lsl r4
    5150:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
    5154:	048e1f05 	streq	r1, [lr], #3845	; 0xf05
    5158:	51060000 	mrspl	r0, (UNDEF: 6)
    515c:	05000026 	streq	r0, [r0, #-38]	; 0xffffffda
    5160:	00048e21 	andeq	r8, r4, r1, lsr #28
    5164:	f1060000 	cps	#0
    5168:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    516c:	0003b422 	andeq	fp, r3, r2, lsr #8
    5170:	85060400 	strhi	r0, [r6, #-1024]	; 0xfffffc00
    5174:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
    5178:	00048e23 	andeq	r8, r4, r3, lsr #28
    517c:	0f000800 	svceq	0x00000800
    5180:	0003c204 	andeq	ip, r3, r4, lsl #4
    5184:	26310400 	ldrtcs	r0, [r1], -r0, lsl #8
    5188:	25050000 	strcs	r0, [r5, #-0]
    518c:	0000045d 	andeq	r0, r0, sp, asr r4
    5190:	00253b0a 	eoreq	r3, r5, sl, lsl #22
    5194:	21060c00 	tstcs	r6, r0, lsl #24
    5198:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    519c:	0020e006 	eoreq	lr, r0, r6
    51a0:	6d230600 	stcvs	6, cr0, [r3, #-0]
    51a4:	00000005 	andeq	r0, r0, r5
    51a8:	002c3c06 	eoreq	r3, ip, r6, lsl #24
    51ac:	73250600 	teqvc	r5, #0, 12
    51b0:	04000005 	streq	r0, [r0], #-5
    51b4:	002a9506 	eoreq	r9, sl, r6, lsl #10
    51b8:	79270600 	stmdbvc	r7!, {r9, sl}
    51bc:	08000005 	stmdaeq	r0, {r0, r2}
    51c0:	2ad10a00 	bcs	ff4479c8 <_estack+0xf74379c8>
    51c4:	07380000 	ldreq	r0, [r8, -r0]!
    51c8:	00056d2d 	andeq	r6, r5, sp, lsr #26
    51cc:	5a280600 	bpl	a069d4 <mailbuffer+0x9cb8e4>
    51d0:	2f070000 	svccs	0x00070000
    51d4:	00000599 	muleq	r0, r9, r5
    51d8:	24430600 	strbcs	r0, [r3], #-1536	; 0xfffffa00
    51dc:	31070000 	mrscc	r0, (UNDEF: 7)
    51e0:	000005e8 	andeq	r0, r0, r8, ror #11
    51e4:	207c0604 	rsbscs	r0, ip, r4, lsl #12
    51e8:	33070000 	movwcc	r0, #28672	; 0x7000
    51ec:	00000394 	muleq	r0, r4, r3
    51f0:	243b0608 	ldrtcs	r0, [fp], #-1544	; 0xfffff9f8
    51f4:	34070000 	strcc	r0, [r7], #-0
    51f8:	0000006c 	andeq	r0, r0, ip, rrx
    51fc:	22930609 	addscs	r0, r3, #9437184	; 0x900000
    5200:	35070000 	strcc	r0, [r7, #-0]
    5204:	0000064f 	andeq	r0, r0, pc, asr #12
    5208:	1f7a060c 	svcne	0x007a060c
    520c:	37070000 	strcc	r0, [r7, -r0]
    5210:	00000394 	muleq	r0, r4, r3
    5214:	26a90610 	ssatcs	r0, #10, r0, lsl #12
    5218:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    521c:	00000394 	muleq	r0, r4, r3
    5220:	296f0611 	stmdbcs	pc!, {r0, r4, r9, sl}^	; <UNPREDICTABLE>
    5224:	3a070000 	bcc	1c522c <mailbuffer+0x18a13c>
    5228:	00000655 	andeq	r0, r0, r5, asr r6
    522c:	1fb20614 	svcne	0x00b20614
    5230:	3b070000 	blcc	1c5238 <mailbuffer+0x18a148>
    5234:	0000065b 	andeq	r0, r0, fp, asr r6
    5238:	27fc0618 			; <UNDEFINED> instruction: 0x27fc0618
    523c:	3d070000 	stccc	0, cr0, [r7, #-0]
    5240:	00000661 	andeq	r0, r0, r1, ror #12
    5244:	2b34061c 	blcs	d06abc <mailbuffer+0xccb9cc>
    5248:	3f070000 	svccc	0x00070000
    524c:	0000057f 	andeq	r0, r0, pc, ror r5
    5250:	21780620 	cmncs	r8, r0, lsr #12
    5254:	40070000 	andmi	r0, r7, r0
    5258:	0000057f 	andeq	r0, r0, pc, ror r5
    525c:	040f002c 	streq	r0, [pc], #-44	; 5264 <_start-0x2d9c>
    5260:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5264:	0389040f 	orreq	r0, r9, #251658240	; 0xf000000
    5268:	040f0000 	streq	r0, [pc], #-0	; 5270 <_start-0x2d90>
    526c:	00000494 	muleq	r0, r4, r4
    5270:	00253b04 	eoreq	r3, r5, r4, lsl #22
    5274:	9f290600 	svcls	0x00290600
    5278:	12000004 	andne	r0, r0, #4
    527c:	000003d7 	ldrdeq	r0, [r0], -r7
    5280:	00000599 	muleq	r0, r9, r5
    5284:	00056d13 	andeq	r6, r5, r3, lsl sp
    5288:	040f0000 	streq	r0, [pc], #-0	; 5290 <_start-0x2d70>
    528c:	0000058a 	andeq	r0, r0, sl, lsl #11
    5290:	0028760a 	eoreq	r7, r8, sl, lsl #12
    5294:	26085400 	strcs	r5, [r8], -r0, lsl #8
    5298:	000005e8 	andeq	r0, r0, r8, ror #11
    529c:	00273d06 	eoreq	r3, r7, r6, lsl #26
    52a0:	b4280800 	strtlt	r0, [r8], #-2048	; 0xfffff800
    52a4:	00000003 	andeq	r0, r0, r3
    52a8:	001f3c06 	andseq	r3, pc, r6, lsl #24
    52ac:	9f290800 	svcls	0x00290800
    52b0:	04000009 	streq	r0, [r0], #-9
    52b4:	0025da06 	eoreq	sp, r5, r6, lsl #20
    52b8:	a42b0800 	strtge	r0, [fp], #-2048	; 0xfffff800
    52bc:	08000009 	stmdaeq	r0, {r0, r3}
    52c0:	00270b06 	eoreq	r0, r7, r6, lsl #22
    52c4:	ba2d0800 	blt	b472cc <mailbuffer+0xb0c1dc>
    52c8:	48000009 	stmdami	r0, {r0, r3}
    52cc:	002b4906 	eoreq	r4, fp, r6, lsl #18
    52d0:	902f0800 	eorls	r0, pc, r0, lsl #16
    52d4:	4c000007 	stcmi	0, cr0, [r0], {7}
    52d8:	9f040f00 	svcls	0x00040f00
    52dc:	0a000005 	beq	52f8 <_start-0x2d08>
    52e0:	00002580 	andeq	r2, r0, r0, lsl #11
    52e4:	4f280918 	svcmi	0x00280918
    52e8:	06000006 	streq	r0, [r0], -r6
    52ec:	000020e0 	andeq	r2, r0, r0, ror #1
    52f0:	069e2a09 	ldreq	r2, [lr], r9, lsl #20
    52f4:	06000000 	streq	r0, [r0], -r0
    52f8:	00001fe8 	andeq	r1, r0, r8, ror #31
    52fc:	03942b09 	orrseq	r2, r4, #9216	; 0x2400
    5300:	06040000 	streq	r0, [r4], -r0
    5304:	00002149 	andeq	r2, r0, r9, asr #2
    5308:	06932c09 	ldreq	r2, [r3], r9, lsl #24
    530c:	06050000 	streq	r0, [r5], -r0
    5310:	0000266b 	andeq	r2, r0, fp, ror #12
    5314:	03d72d09 	bicseq	r2, r7, #576	; 0x240
    5318:	06080000 	streq	r0, [r8], -r0
    531c:	000021d4 	ldrdeq	r2, [r0], -r4
    5320:	03a92e09 			; <UNDEFINED> instruction: 0x03a92e09
    5324:	060c0000 	streq	r0, [ip], -r0
    5328:	00002857 	andeq	r2, r0, r7, asr r8
    532c:	03b42f09 			; <UNDEFINED> instruction: 0x03b42f09
    5330:	06100000 	ldreq	r0, [r0], -r0
    5334:	000022d7 	ldrdeq	r2, [r0], -r7
    5338:	00403009 	subeq	r3, r0, r9
    533c:	00140000 	andseq	r0, r4, r0
    5340:	05ee040f 	strbeq	r0, [lr, #1039]!	; 0x40f
    5344:	040f0000 	streq	r0, [pc], #-0	; 534c <_start-0x2cb4>
    5348:	00000186 	andeq	r0, r0, r6, lsl #3
    534c:	01fa040f 	mvnseq	r0, pc, lsl #8
    5350:	040f0000 	streq	r0, [pc], #-0	; 5358 <_start-0x2ca8>
    5354:	00000450 	andeq	r0, r0, r0, asr r4
    5358:	002ad104 	eoreq	sp, sl, r4, lsl #2
    535c:	d0420700 	suble	r0, r2, r0, lsl #14
    5360:	02000004 	andeq	r0, r0, #4
    5364:	93200901 	teqls	r0, #16384	; 0x4000
    5368:	03000006 	movweq	r0, #6
    536c:	00002a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    5370:	1fc00300 	svcne	0x00c00300
    5374:	03010000 	movweq	r0, #4096	; 0x1000
    5378:	0000222e 	andeq	r2, r0, lr, lsr #4
    537c:	25c20302 	strbcs	r0, [r2, #770]	; 0x302
    5380:	00030000 	andeq	r0, r3, r0
    5384:	002afd04 	eoreq	pc, sl, r4, lsl #26
    5388:	72260900 	eorvc	r0, r6, #0, 18
    538c:	0f000006 	svceq	0x00000006
    5390:	00066704 	andeq	r6, r6, r4, lsl #14
    5394:	25800400 	strcs	r0, [r0, #1024]	; 0x400
    5398:	32090000 	andcc	r0, r9, #0
    539c:	000005ee 	andeq	r0, r0, lr, ror #11
    53a0:	00269304 	eoreq	r9, r6, r4, lsl #6
    53a4:	ba210a00 	blt	847bac <mailbuffer+0x80cabc>
    53a8:	14000006 	strne	r0, [r0], #-6
    53ac:	000006cf 	andeq	r0, r0, pc, asr #13
    53b0:	0006cf13 	andeq	ip, r6, r3, lsl pc
    53b4:	045b1300 	ldrbeq	r1, [fp], #-768	; 0xfffffd00
    53b8:	5b130000 	blpl	4c53c0 <mailbuffer+0x48a2d0>
    53bc:	00000004 	andeq	r0, r0, r4
    53c0:	06d5040f 	ldrbeq	r0, [r5], pc, lsl #8
    53c4:	070a0000 	streq	r0, [sl, -r0]
    53c8:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
    53cc:	074e230a 	strbeq	r2, [lr, -sl, lsl #6]
    53d0:	7d060000 	stcvc	0, cr0, [r6, #-0]
    53d4:	0a000029 	beq	5480 <_start-0x2b80>
    53d8:	00074e25 	andeq	r4, r7, r5, lsr #28
    53dc:	44060000 	strmi	r0, [r6], #-0
    53e0:	0a000028 	beq	5488 <_start-0x2b78>
    53e4:	00075427 	andeq	r5, r7, r7, lsr #8
    53e8:	51060400 	tstpl	r6, r0, lsl #8
    53ec:	0a000026 	beq	548c <_start-0x2b74>
    53f0:	00045b28 	andeq	r5, r4, r8, lsr #22
    53f4:	0c060800 	stceq	8, cr0, [r6], {-0}
    53f8:	0a00002c 	beq	54b0 <_start-0x2b50>
    53fc:	0003a929 	andeq	sl, r3, r9, lsr #18
    5400:	3f060c00 	svccc	0x00060c00
    5404:	0a000021 	beq	5490 <_start-0x2b70>
    5408:	0003d02b 	andeq	sp, r3, fp, lsr #32
    540c:	eb061000 	bl	189414 <mailbuffer+0x14e324>
    5410:	0a000029 	beq	54bc <_start-0x2b44>
    5414:	0003a92c 	andeq	sl, r3, ip, lsr #18
    5418:	ba061400 	blt	18a420 <mailbuffer+0x14f330>
    541c:	0a000023 	beq	54b0 <_start-0x2b50>
    5420:	00075a2e 	andeq	r5, r7, lr, lsr #20
    5424:	59061800 	stmdbpl	r6, {fp, ip}
    5428:	0a000023 	beq	54bc <_start-0x2b44>
    542c:	00045b2f 	andeq	r5, r4, pc, lsr #22
    5430:	13061c00 	movwne	r1, #27648	; 0x6c00
    5434:	0a00002b 	beq	54e8 <_start-0x2b18>
    5438:	00045b30 	andeq	r5, r4, r0, lsr fp
    543c:	0f002000 	svceq	0x00002000
    5440:	0006a404 	andeq	sl, r6, r4, lsl #8
    5444:	ca040f00 	bgt	10904c <mailbuffer+0xcdf5c>
    5448:	0f000000 	svceq	0x00000000
    544c:	0006af04 	andeq	sl, r6, r4, lsl #30
    5450:	29070400 	stmdbcs	r7, {sl}
    5454:	320a0000 	andcc	r0, sl, #0
    5458:	000006d5 	ldrdeq	r0, [r0], -r5
    545c:	0027490a 	eoreq	r4, r7, sl, lsl #18
    5460:	200b0800 	andcs	r0, fp, r0, lsl #16
    5464:	00000790 	muleq	r0, r0, r7
    5468:	00244306 	eoreq	r4, r4, r6, lsl #6
    546c:	e8220b00 	stmda	r2!, {r8, r9, fp}
    5470:	00000005 	andeq	r0, r0, r5
    5474:	0020e006 	eoreq	lr, r0, r6
    5478:	9e240b00 	vmulls.f64	d0, d4, d0
    547c:	04000006 	streq	r0, [r0], #-6
    5480:	27490400 	strbcs	r0, [r9, -r0, lsl #8]
    5484:	260b0000 	strcs	r0, [fp], -r0
    5488:	0000076b 	andeq	r0, r0, fp, ror #14
    548c:	00250d0a 	eoreq	r0, r5, sl, lsl #26
    5490:	1d0c1800 	stcne	8, cr1, [ip, #-0]
    5494:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5498:	0039ce06 	eorseq	ip, r9, r6, lsl #28
    549c:	011f0c00 	tsteq	pc, r0, lsl #24
    54a0:	00000008 	andeq	r0, r0, r8
    54a4:	00508606 	subseq	r8, r0, r6, lsl #12
    54a8:	01210c00 	teqeq	r1, r0, lsl #24
    54ac:	04000008 	streq	r0, [r0], #-8
    54b0:	00504706 	subseq	r4, r0, r6, lsl #14
    54b4:	16220c00 	strtne	r0, [r2], -r0, lsl #24
    54b8:	08000008 	stmdaeq	r0, {r3}
    54bc:	0036f406 	eorseq	pc, r6, r6, lsl #8
    54c0:	2c230c00 	stccs	12, cr0, [r3], #-0
    54c4:	0c000008 	stceq	0, cr0, [r0], {8}
    54c8:	004fe906 	subeq	lr, pc, r6, lsl #18
    54cc:	01250c00 	teqeq	r5, r0, lsl #24
    54d0:	10000008 	andne	r0, r0, r8
    54d4:	004fc006 	subeq	ip, pc, r6
    54d8:	16270c00 	strtne	r0, [r7], -r0, lsl #24
    54dc:	14000008 	strne	r0, [r0], #-8
    54e0:	07fb1400 	ldrbeq	r1, [fp, r0, lsl #8]!
    54e4:	fb130000 	blx	4c54ee <mailbuffer+0x48a3fe>
    54e8:	00000007 	andeq	r0, r0, r7
    54ec:	079b040f 	ldreq	r0, [fp, pc, lsl #8]
    54f0:	040f0000 	streq	r0, [pc], #-0	; 54f8 <_start-0x2b08>
    54f4:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    54f8:	0003d712 	andeq	sp, r3, r2, lsl r7
    54fc:	00081600 	andeq	r1, r8, r0, lsl #12
    5500:	07fb1300 	ldrbeq	r1, [fp, r0, lsl #6]!
    5504:	0f000000 	svceq	0x00000000
    5508:	00080704 	andeq	r0, r8, r4, lsl #14
    550c:	082c1400 	stmdaeq	ip!, {sl, ip}
    5510:	fb130000 	blx	4c551a <mailbuffer+0x48a42a>
    5514:	13000007 	movwne	r0, #7
    5518:	000003a9 	andeq	r0, r0, r9, lsr #7
    551c:	1c040f00 	stcne	15, cr0, [r4], {-0}
    5520:	04000008 	streq	r0, [r0], #-8
    5524:	0000250d 	andeq	r2, r0, sp, lsl #10
    5528:	079b290c 	ldreq	r2, [fp, ip, lsl #18]
    552c:	a00a0000 	andge	r0, sl, r0
    5530:	54000022 	strpl	r0, [r0], #-34	; 0xffffffde
    5534:	0946220d 	stmdbeq	r6, {r0, r2, r3, r9, sp}^
    5538:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
    553c:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
    5540:	0003b424 	andeq	fp, r3, r4, lsr #8
    5544:	2a060000 	bcs	18554c <mailbuffer+0x14a45c>
    5548:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    554c:	00094625 	andeq	r4, r9, r5, lsr #12
    5550:	bb060400 	bllt	186558 <mailbuffer+0x14b468>
    5554:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    5558:	0003d726 	andeq	sp, r3, r6, lsr #14
    555c:	67060800 	strvs	r0, [r6, -r0, lsl #16]
    5560:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    5564:	0003d727 	andeq	sp, r3, r7, lsr #14
    5568:	bd060c00 	stclt	12, cr0, [r6, #-0]
    556c:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
    5570:	0003d729 	andeq	sp, r3, r9, lsr #14
    5574:	17061000 	strne	r1, [r6, -r0]
    5578:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    557c:	0003d72a 	andeq	sp, r3, sl, lsr #14
    5580:	e0061400 	and	r1, r6, r0, lsl #8
    5584:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    5588:	00069e2c 	andeq	r9, r6, ip, lsr #28
    558c:	7d061800 	stcvc	8, cr1, [r6, #-0]
    5590:	0d000029 	stceq	0, cr0, [r0, #-164]	; 0xffffff5c
    5594:	00074e2d 	andeq	r4, r7, sp, lsr #28
    5598:	3b061c00 	blcc	18c5a0 <mailbuffer+0x1514b0>
    559c:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    55a0:	00006c2e 	andeq	r6, r0, lr, lsr #24
    55a4:	d4062000 	strle	r2, [r6], #-0
    55a8:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    55ac:	0003a92f 	andeq	sl, r3, pc, lsr #18
    55b0:	9c062400 	cfstrsls	mvf2, [r6], {-0}
    55b4:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    55b8:	0003a931 	andeq	sl, r3, r1, lsr r9
    55bc:	b0062800 	andlt	r2, r6, r0, lsl #16
    55c0:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    55c4:	0003b432 	andeq	fp, r3, r2, lsr r4
    55c8:	95062c00 	strls	r2, [r6, #-3072]	; 0xfffff400
    55cc:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    55d0:	0003a933 	andeq	sl, r3, r3, lsr r9
    55d4:	ea063000 	b	1915dc <mailbuffer+0x1564ec>
    55d8:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    55dc:	0003b434 	andeq	fp, r3, r4, lsr r4
    55e0:	39063400 	stmdbcc	r6, {sl, ip, sp}
    55e4:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    55e8:	0003a935 	andeq	sl, r3, r5, lsr r9
    55ec:	8c063800 	stchi	8, cr3, [r6], {-0}
    55f0:	0d000028 	stceq	0, cr0, [r0, #-160]	; 0xffffff60
    55f4:	0003b437 	andeq	fp, r3, r7, lsr r4
    55f8:	31063c00 	tstcc	r6, r0, lsl #24
    55fc:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    5600:	0003b438 	andeq	fp, r3, r8, lsr r4
    5604:	2f064000 	svccs	0x00064000
    5608:	0d000028 	stceq	0, cr0, [r0, #-160]	; 0xffffff60
    560c:	0003a939 	andeq	sl, r3, r9, lsr r9
    5610:	dc064400 	cfstrsle	mvf4, [r6], {-0}
    5614:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
    5618:	00094c3b 	andeq	r4, r9, fp, lsr ip
    561c:	a7064800 	strge	r4, [r6, -r0, lsl #16]
    5620:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    5624:	00045b3c 	andeq	r5, r4, ip, lsr fp
    5628:	a0064c00 	andge	r4, r6, r0, lsl #24
    562c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    5630:	0009523e 	andeq	r5, r9, lr, lsr r2
    5634:	0f005000 	svceq	0x00005000
    5638:	00076004 	andeq	r6, r7, r4
    563c:	a9040f00 	stmdbge	r4, {r8, r9, sl, fp}
    5640:	0f000003 	svceq	0x00000003
    5644:	00083204 	andeq	r3, r8, r4, lsl #4
    5648:	22a00400 	adccs	r0, r0, #0, 8
    564c:	400d0000 	andmi	r0, sp, r0
    5650:	0000083d 	andeq	r0, r0, sp, lsr r8
    5654:	002e9f0a 	eoreq	r9, lr, sl, lsl #30
    5658:	1e0e0c00 	cdpne	12, 0, cr0, cr14, cr0, {0}
    565c:	00000994 	muleq	r0, r4, r9
    5660:	00268a06 	eoreq	r8, r6, r6, lsl #20
    5664:	d7200e00 	strle	r0, [r0, -r0, lsl #28]!
    5668:	00000003 	andeq	r0, r0, r3
    566c:	0030f806 	eorseq	pc, r0, r6, lsl #16
    5670:	a9210e00 	stmdbge	r1!, {r9, sl, fp}
    5674:	04000003 	streq	r0, [r0], #-3
    5678:	002ec406 	eoreq	ip, lr, r6, lsl #8
    567c:	a9220e00 	stmdbge	r2!, {r9, sl, fp}
    5680:	08000003 	stmdaeq	r0, {r0, r1}
    5684:	2e9f0400 	cdpcs	4, 9, cr0, cr15, cr0, {0}
    5688:	240e0000 	strcs	r0, [lr], #-0
    568c:	00000963 	andeq	r0, r0, r3, ror #18
    5690:	0003b415 	andeq	fp, r3, r5, lsl r4
    5694:	09b40b00 	ldmibeq	r4!, {r8, r9, fp}
    5698:	09b40000 	ldmibeq	r4!, {}	; <UNPREDICTABLE>
    569c:	82160000 	andshi	r0, r6, #0
    56a0:	0f000003 	svceq	0x00000003
    56a4:	58040f00 	stmdapl	r4, {r8, r9, sl, fp}
    56a8:	15000009 	strne	r0, [r0, #-9]
    56ac:	000003d7 	ldrdeq	r0, [r0], -r7
    56b0:	00287604 	eoreq	r7, r8, r4, lsl #12
    56b4:	9f310800 	svcls	0x00310800
    56b8:	02000005 	andeq	r0, r0, #5
    56bc:	f12e0101 			; <UNDEFINED> instruction: 0xf12e0101
    56c0:	03000009 	movweq	r0, #9
    56c4:	00002d6c 	andeq	r2, r0, ip, ror #26
    56c8:	2ef40300 	cdpcs	3, 15, cr0, cr4, cr0, {0}
    56cc:	03010000 	movweq	r0, #4096	; 0x1000
    56d0:	00002cb2 			; <UNDEFINED> instruction: 0x00002cb2
    56d4:	2fb60302 	svccs	0x00b60302
    56d8:	03030000 	movweq	r0, #12288	; 0x3000
    56dc:	000032c6 	andeq	r3, r0, r6, asr #5
    56e0:	01020004 	tsteq	r2, r4
    56e4:	0a0c3801 	beq	3136f0 <mailbuffer+0x2d8600>
    56e8:	39030000 	stmdbcc	r3, {}	; <UNPREDICTABLE>
    56ec:	00000032 	andeq	r0, r0, r2, lsr r0
    56f0:	002db403 	eoreq	fp, sp, r3, lsl #8
    56f4:	18030100 	stmdane	r3, {r8}
    56f8:	0200002d 	andeq	r0, r0, #45	; 0x2d
    56fc:	28771700 	ldmdacs	r7!, {r8, r9, sl, ip}^
    5700:	5c010000 	stcpl	0, cr0, [r1], {-0}
    5704:	000184d4 	ldrdeq	r8, [r1], -r4
    5708:	000000d8 	ldrdeq	r0, [r0], -r8
    570c:	0a489c01 	beq	122c718 <mailbuffer+0x11f1628>
    5710:	af180000 	svcge	0x00180000
    5714:	01000043 	tsteq	r0, r3, asr #32
    5718:	000a485c 	andeq	r4, sl, ip, asr r8
    571c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5720:	01855819 	orreq	r5, r5, r9, lsl r8
    5724:	00003800 	andeq	r3, r0, r0, lsl #16
    5728:	2a2b1a00 	bcs	acbf30 <mailbuffer+0xa90e40>
    572c:	65010000 	strvs	r0, [r1, #-0]
    5730:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    5734:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    5738:	bf040f00 	svclt	0x00040f00
    573c:	17000009 	strne	r0, [r0, -r9]
    5740:	00003314 	andeq	r3, r0, r4, lsl r3
    5744:	85ac6b01 	strhi	r6, [ip, #2817]!	; 0xb01
    5748:	00540001 	subseq	r0, r4, r1
    574c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5750:	00000a72 	andeq	r0, r0, r2, ror sl
    5754:	0043af18 	subeq	sl, r3, r8, lsl pc
    5758:	486b0100 	stmdami	fp!, {r8}^
    575c:	0200000a 	andeq	r0, r0, #10
    5760:	1b006c91 	blne	209ac <USBEndpoint2+0x64>
    5764:	00003185 	andeq	r3, r0, r5, lsl #3
    5768:	03d77001 	bicseq	r7, r7, #1
    576c:	86000000 	strhi	r0, [r0], -r0
    5770:	02d40001 	sbcseq	r0, r4, #1
    5774:	9c010000 	stcls	0, cr0, [r1], {-0}
    5778:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
    577c:	0043af18 	subeq	sl, r3, r8, lsl pc
    5780:	48700100 	ldmdami	r0!, {r8}^
    5784:	0200000a 	andeq	r0, r0, #10
    5788:	4b1a5491 	blmi	69a9d4 <mailbuffer+0x65f8e4>
    578c:	01000031 	tsteq	r0, r1, lsr r0
    5790:	00099476 	andeq	r9, r9, r6, ror r4
    5794:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5798:	002fac1a 	eoreq	sl, pc, sl, lsl ip	; <UNPREDICTABLE>
    579c:	94870100 	strls	r0, [r7], #256	; 0x100
    57a0:	02000009 	andeq	r0, r0, #9
    57a4:	1b005891 	blne	1b9f0 <DWHCIDeviceWaitForBit+0xb0>
    57a8:	00003117 	andeq	r3, r0, r7, lsl r1
    57ac:	03d0bc01 	bicseq	fp, r0, #256	; 0x100
    57b0:	88d40000 	ldmhi	r4, {}^	; <UNPREDICTABLE>
    57b4:	00e80001 	rsceq	r0, r8, r1
    57b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    57bc:	00000b32 	andeq	r0, r0, r2, lsr fp
    57c0:	0043af18 	subeq	sl, r3, r8, lsl pc
    57c4:	48bc0100 	ldmmi	ip!, {r8}
    57c8:	0200000a 	andeq	r0, r0, #10
    57cc:	7f186c91 	svcvc	0x00186c91
    57d0:	01000029 	tsteq	r0, r9, lsr #32
    57d4:	00074ebc 			; <UNDEFINED> instruction: 0x00074ebc
    57d8:	68910200 	ldmvs	r1, {r9}
    57dc:	0030bb18 	eorseq	fp, r0, r8, lsl fp
    57e0:	bcbd0100 	ldflts	f0, [sp]
    57e4:	02000000 	andeq	r0, r0, #0
    57e8:	f8186791 			; <UNDEFINED> instruction: 0xf8186791
    57ec:	0100002d 	tsteq	r0, sp, lsr #32
    57f0:	0000bcbd 			; <UNDEFINED> instruction: 0x0000bcbd
    57f4:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    57f8:	00265318 	eoreq	r5, r6, r8, lsl r3
    57fc:	5bbe0100 	blpl	fef85c04 <_estack+0xf6f75c04>
    5800:	02000004 	andeq	r0, r0, #4
    5804:	d8180091 	ldmdale	r8, {r0, r4, r7}
    5808:	0100002e 	tsteq	r0, lr, lsr #32
    580c:	0003b4be 			; <UNDEFINED> instruction: 0x0003b4be
    5810:	04910200 	ldreq	r0, [r1], #512	; 0x200
    5814:	00327718 	eorseq	r7, r2, r8, lsl r7
    5818:	bcbf0100 	ldflts	f0, [pc]	; 5820 <_start-0x27e0>
    581c:	02000000 	andeq	r0, r0, #0
    5820:	1b000891 	blne	7a6c <_start-0x594>
    5824:	000031e0 	andeq	r3, r0, r0, ror #3
    5828:	03d7c901 	bicseq	ip, r7, #16384	; 0x4000
    582c:	89bc0000 	ldmibhi	ip!, {}	; <UNPREDICTABLE>
    5830:	00d40001 	sbcseq	r0, r4, r1
    5834:	9c010000 	stcls	0, cr0, [r1], {-0}
    5838:	00000b76 	andeq	r0, r0, r6, ror fp
    583c:	0043af18 	subeq	sl, r3, r8, lsl pc
    5840:	48c90100 	stmiami	r9, {r8}^
    5844:	0200000a 	andeq	r0, r0, #10
    5848:	7f186c91 	svcvc	0x00186c91
    584c:	01000029 	tsteq	r0, r9, lsr #32
    5850:	00074ec9 	andeq	r4, r7, r9, asr #29
    5854:	68910200 	ldmvs	r1, {r9}
    5858:	002f4b18 	eoreq	r4, pc, r8, lsl fp	; <UNPREDICTABLE>
    585c:	94c90100 	strbls	r0, [r9], #256	; 0x100
    5860:	02000003 	andeq	r0, r0, #3
    5864:	1b006791 	blne	1f6b0 <USBDeviceInitialize+0x450>
    5868:	0000315f 	andeq	r3, r0, pc, asr r1
    586c:	03d7d701 	bicseq	sp, r7, #262144	; 0x40000
    5870:	8a900000 	bhi	fe405878 <_estack+0xf63f5878>
    5874:	00d40001 	sbcseq	r0, r4, r1
    5878:	9c010000 	stcls	0, cr0, [r1], {-0}
    587c:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    5880:	0043af18 	subeq	sl, r3, r8, lsl pc
    5884:	48d70100 	ldmmi	r7, {r8}^
    5888:	0200000a 	andeq	r0, r0, #10
    588c:	7f186c91 	svcvc	0x00186c91
    5890:	01000029 	tsteq	r0, r9, lsr #32
    5894:	00074ed7 	ldrdeq	r4, [r7], -r7
    5898:	68910200 	ldmvs	r1, {r9}
    589c:	0032b118 	eorseq	fp, r2, r8, lsl r1
    58a0:	94d70100 	ldrbls	r0, [r7], #256	; 0x100
    58a4:	02000003 	andeq	r0, r0, #3
    58a8:	1b006791 	blne	1f6f4 <USBDeviceInitialize+0x494>
    58ac:	000031f6 	strdeq	r3, [r0], -r6
    58b0:	03d0e501 	bicseq	lr, r0, #4194304	; 0x400000
    58b4:	8b640000 	blhi	19058bc <mailbuffer+0x18ca7cc>
    58b8:	01700001 	cmneq	r0, r1
    58bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    58c0:	00000c72 	andeq	r0, r0, r2, ror ip
    58c4:	0043af18 	subeq	sl, r3, r8, lsl pc
    58c8:	48e50100 	stmiami	r5!, {r8}^
    58cc:	0300000a 	movweq	r0, #10
    58d0:	187fbc91 	ldmdane	pc!, {r0, r4, r7, sl, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    58d4:	0000297f 	andeq	r2, r0, pc, ror r9
    58d8:	074ee501 	strbeq	lr, [lr, -r1, lsl #10]
    58dc:	91030000 	mrsls	r0, (UNDEF: 3)
    58e0:	77187fb8 			; <UNDEFINED> instruction: 0x77187fb8
    58e4:	01000032 	tsteq	r0, r2, lsr r0
    58e8:	000394e6 	andeq	r9, r3, r6, ror #9
    58ec:	b7910300 	ldrlt	r0, [r1, r0, lsl #6]
    58f0:	30e6187f 	rsccc	r1, r6, pc, ror r8
    58f4:	e6010000 	str	r0, [r1], -r0
    58f8:	00000394 	muleq	r0, r4, r3
    58fc:	7fb69103 	svcvc	0x00b69103
    5900:	002d6418 	eoreq	r6, sp, r8, lsl r4
    5904:	9ee60100 	cdpls	1, 14, cr0, cr6, cr0, {0}
    5908:	02000003 	andeq	r0, r0, #3
    590c:	f0180091 			; <UNDEFINED> instruction: 0xf0180091
    5910:	01000030 	tsteq	r0, r0, lsr r0
    5914:	00039ee6 	andeq	r9, r3, r6, ror #29
    5918:	04910200 	ldreq	r0, [r1], #512	; 0x200
    591c:	00220d18 	eoreq	r0, r2, r8, lsl sp
    5920:	5be70100 	blpl	ff9c5d28 <_estack+0xf79b5d28>
    5924:	02000004 	andeq	r0, r0, #4
    5928:	38180891 	ldmdacc	r8, {r0, r4, r7, fp}
    592c:	0100002d 	tsteq	r0, sp, lsr #32
    5930:	00039ee7 	andeq	r9, r3, r7, ror #29
    5934:	0c910200 	lfmeq	f0, 4, [r1], {0}
    5938:	002cfb1a 	eoreq	pc, ip, sl, lsl fp	; <UNPREDICTABLE>
    593c:	54eb0100 	strbtpl	r0, [fp], #256	; 0x100
    5940:	02000007 	andeq	r0, r0, #7
    5944:	551c6891 	ldrpl	r6, [ip, #-2193]	; 0xfffff76f
    5948:	01004252 	tsteq	r0, r2, asr r2
    594c:	000760f4 	strdeq	r6, [r7], -r4
    5950:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    5954:	0030de1a 	eorseq	sp, r0, sl, lsl lr
    5958:	d0f70100 	rscsle	r0, r7, r0, lsl #2
    595c:	02000003 	andeq	r0, r0, #3
    5960:	1d006c91 	stcne	12, cr6, [r0, #-580]	; 0xfffffdbc
    5964:	00003103 	andeq	r3, r0, r3, lsl #2
    5968:	d0010501 	andle	r0, r1, r1, lsl #10
    596c:	d4000003 	strle	r0, [r0], #-3
    5970:	e400018c 	str	r0, [r0], #-396	; 0xfffffe74
    5974:	01000000 	mrseq	r0, (UNDEF: 0)
    5978:	000ce99c 	muleq	ip, ip, r9
    597c:	43af1e00 			; <UNDEFINED> instruction: 0x43af1e00
    5980:	05010000 	streq	r0, [r1, #-0]
    5984:	000a4801 	andeq	r4, sl, r1, lsl #16
    5988:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    598c:	00297f1e 	eoreq	r7, r9, lr, lsl pc
    5990:	01050100 	mrseq	r0, (UNDEF: 21)
    5994:	0000074e 	andeq	r0, r0, lr, asr #14
    5998:	1e409102 	sqtnes	f1, f2
    599c:	00002653 	andeq	r2, r0, r3, asr r6
    59a0:	5b010501 	blpl	46dac <mailbuffer+0xbcbc>
    59a4:	03000004 	movweq	r0, #4
    59a8:	1e7fbc91 	mrcne	12, 3, fp, cr15, cr1, {4}
    59ac:	00002ed8 	ldrdeq	r2, [r0], -r8
    59b0:	b4010501 	strlt	r0, [r1], #-1281	; 0xfffffaff
    59b4:	03000003 	movweq	r0, #3
    59b8:	1f7fb891 	svcne	0x007fb891
    59bc:	00425255 	subeq	r5, r2, r5, asr r2
    59c0:	60010901 	andvs	r0, r1, r1, lsl #18
    59c4:	02000007 	andeq	r0, r0, #7
    59c8:	de204891 	mcrle	8, 1, r4, cr0, cr1, {4}
    59cc:	01000030 	tsteq	r0, r0, lsr r0
    59d0:	03d0010c 	bicseq	r0, r0, #12, 2
    59d4:	91020000 	mrsls	r0, (UNDEF: 2)
    59d8:	431d006c 	tstmi	sp, #108	; 0x6c
    59dc:	0100002d 	tsteq	r0, sp, lsr #32
    59e0:	03d70118 	bicseq	r0, r7, #24, 2
    59e4:	8db80000 	ldchi	0, cr0, [r8]
    59e8:	03380001 	teqeq	r8, #1
    59ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    59f0:	00000d3b 	andeq	r0, r0, fp, lsr sp
    59f4:	0043af1e 	subeq	sl, r3, lr, lsl pc
    59f8:	01180100 	tsteq	r8, r0, lsl #2
    59fc:	00000a48 	andeq	r0, r0, r8, asr #20
    5a00:	1e649102 	lgnnes	f1, f2
    5a04:	0000262c 	andeq	r2, r0, ip, lsr #12
    5a08:	46011801 	strmi	r1, [r1], -r1, lsl #16
    5a0c:	02000009 	andeq	r0, r0, #9
    5a10:	5c196091 	ldcpl	0, cr6, [r9], {145}	; 0x91
    5a14:	a000018e 	andge	r0, r0, lr, lsl #3
    5a18:	20000001 	andcs	r0, r0, r1
    5a1c:	00002cfb 	strdeq	r2, [r0], -fp
    5a20:	54012301 	strpl	r2, [r1], #-769	; 0xfffffcff
    5a24:	02000007 	andeq	r0, r0, #7
    5a28:	00006c91 	muleq	r0, r1, ip
    5a2c:	0032d81d 	eorseq	sp, r2, sp, lsl r8
    5a30:	01570100 	cmpeq	r7, r0, lsl #2
    5a34:	000003d7 	ldrdeq	r0, [r0], -r7
    5a38:	000190f0 	strdeq	r9, [r1], -r0
    5a3c:	00000164 	andeq	r0, r0, r4, ror #2
    5a40:	0d839c01 	stceq	12, cr9, [r3, #4]
    5a44:	af1e0000 	svcge	0x001e0000
    5a48:	01000043 	tsteq	r0, r3, asr #32
    5a4c:	0a480157 	beq	1205fb0 <mailbuffer+0x11caec0>
    5a50:	91020000 	mrsls	r0, (UNDEF: 2)
    5a54:	262c1e64 	strtcs	r1, [ip], -r4, ror #28
    5a58:	57010000 	strpl	r0, [r1, -r0]
    5a5c:	00094601 	andeq	r4, r9, r1, lsl #12
    5a60:	60910200 	addsvs	r0, r1, r0, lsl #4
    5a64:	4b4f621f 	blmi	13de2e8 <mailbuffer+0x13a31f8>
    5a68:	01640100 	cmneq	r4, r0, lsl #2
    5a6c:	000003d7 	ldrdeq	r0, [r0], -r7
    5a70:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    5a74:	002d861d 	eoreq	r8, sp, sp, lsl r6
    5a78:	016b0100 	cmneq	fp, r0, lsl #2
    5a7c:	000003d7 	ldrdeq	r0, [r0], -r7
    5a80:	00019254 	andeq	r9, r1, r4, asr r2
    5a84:	00000364 	andeq	r0, r0, r4, ror #6
    5a88:	0dda9c01 	ldcleq	12, cr9, [sl, #4]
    5a8c:	af1e0000 	svcge	0x001e0000
    5a90:	01000043 	tsteq	r0, r3, asr #32
    5a94:	0a48016b 	beq	1206048 <mailbuffer+0x11caf58>
    5a98:	91020000 	mrsls	r0, (UNDEF: 2)
    5a9c:	317b2044 	cmncc	fp, r4, asr #32
    5aa0:	6f010000 	svcvs	0x00010000
    5aa4:	00099401 	andeq	r9, r9, r1, lsl #8
    5aa8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5aac:	002d0220 	eoreq	r0, sp, r0, lsr #4
    5ab0:	01820100 	orreq	r0, r2, r0, lsl #2
    5ab4:	00000994 	muleq	r0, r4, r9
    5ab8:	20589102 	subscs	r9, r8, r2, lsl #2
    5abc:	00002fac 	andeq	r2, r0, ip, lsr #31
    5ac0:	94019901 	strls	r9, [r1], #-2305	; 0xfffff6ff
    5ac4:	02000009 	andeq	r0, r0, #9
    5ac8:	1d004c91 	stcne	12, cr4, [r0, #-580]	; 0xfffffdbc
    5acc:	00002ce7 	andeq	r2, r0, r7, ror #25
    5ad0:	d701b201 	strle	fp, [r1, -r1, lsl #4]
    5ad4:	b8000003 	stmdalt	r0, {r0, r1}
    5ad8:	0c000195 	stfeqs	f0, [r0], {149}	; 0x95
    5adc:	01000003 	tsteq	r0, r3
    5ae0:	000e819c 	muleq	lr, ip, r1
    5ae4:	43af1e00 			; <UNDEFINED> instruction: 0x43af1e00
    5ae8:	b2010000 	andlt	r0, r1, #0
    5aec:	000a4801 	andeq	r4, sl, r1, lsl #16
    5af0:	8c910300 	ldchi	3, cr0, [r1], {0}
    5af4:	2ab7207f 	bcs	fedcdcf8 <_estack+0xf6dbdcf8>
    5af8:	b7010000 	strlt	r0, [r1, -r0]
    5afc:	00099401 	andeq	r9, r9, r1, lsl #8
    5b00:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5b04:	00315420 	eorseq	r5, r1, r0, lsr #8
    5b08:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
    5b0c:	00000994 	muleq	r0, r4, r9
    5b10:	20589102 	subscs	r9, r8, r2, lsl #2
    5b14:	00002d02 	andeq	r2, r0, r2, lsl #26
    5b18:	9401c001 	strls	ip, [r1], #-1
    5b1c:	02000009 	andeq	r0, r0, #9
    5b20:	7b204c91 	blvc	818d6c <mailbuffer+0x7ddc7c>
    5b24:	01000031 	tsteq	r0, r1, lsr r0
    5b28:	099401c2 	ldmibeq	r4, {r1, r6, r7, r8}
    5b2c:	91020000 	mrsls	r0, (UNDEF: 2)
    5b30:	2d2d2040 	stccs	0, cr2, [sp, #-256]!	; 0xffffff00
    5b34:	d2010000 	andle	r0, r1, #0
    5b38:	00099401 	andeq	r9, r9, r1, lsl #8
    5b3c:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
    5b40:	3285207f 	addcc	r2, r5, #127	; 0x7f
    5b44:	d6010000 	strle	r0, [r1], -r0
    5b48:	00099401 	andeq	r9, r9, r1, lsl #8
    5b4c:	a8910300 	ldmge	r1, {r8, r9}
    5b50:	2f95207f 	svccs	0x0095207f
    5b54:	dc010000 	stcle	0, cr0, [r1], {-0}
    5b58:	00099401 	andeq	r9, r9, r1, lsl #8
    5b5c:	9c910300 	ldcls	3, cr0, [r1], {0}
    5b60:	2e73207f 	mrccs	0, 3, r2, cr3, cr15, {3}
    5b64:	e6010000 	str	r0, [r1], -r0
    5b68:	00099401 	andeq	r9, r9, r1, lsl #8
    5b6c:	90910300 	addsls	r0, r1, r0, lsl #6
    5b70:	9a1d007f 	bls	745d74 <mailbuffer+0x70ac84>
    5b74:	0100002d 	tsteq	r0, sp, lsr #32
    5b78:	03d70200 	bicseq	r0, r7, #0, 4
    5b7c:	98c40000 	stmials	r4, {}^	; <UNPREDICTABLE>
    5b80:	015c0001 	cmpeq	ip, r1
    5b84:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b88:	00000eba 			; <UNDEFINED> instruction: 0x00000eba
    5b8c:	0043af1e 	subeq	sl, r3, lr, lsl pc
    5b90:	02000100 	andeq	r0, r0, #0, 2
    5b94:	00000a48 	andeq	r0, r0, r8, asr #20
    5b98:	205c9102 	subscs	r9, ip, r2, lsl #2
    5b9c:	00002e73 	andeq	r2, r0, r3, ror lr
    5ba0:	94020401 	strls	r0, [r2], #-1025	; 0xfffffbff
    5ba4:	02000009 	andeq	r0, r0, #9
    5ba8:	1d006491 	cfstrsne	mvf6, [r0, #-580]	; 0xfffffdbc
    5bac:	00003228 	andeq	r3, r0, r8, lsr #4
    5bb0:	d7022301 	strle	r2, [r2, -r1, lsl #6]
    5bb4:	20000003 	andcs	r0, r0, r3
    5bb8:	3c00019a 	stfccs	f0, [r0], {154}	; 0x9a
    5bbc:	01000001 	tsteq	r0, r1
    5bc0:	000ef39c 	muleq	lr, ip, r3
    5bc4:	43af1e00 			; <UNDEFINED> instruction: 0x43af1e00
    5bc8:	23010000 	movwcs	r0, #4096	; 0x1000
    5bcc:	000a4802 	andeq	r4, sl, r2, lsl #16
    5bd0:	5c910200 	lfmpl	f0, 4, [r1], {0}
    5bd4:	000ac820 	andeq	ip, sl, r0, lsr #16
    5bd8:	02270100 	eoreq	r0, r7, #0, 2
    5bdc:	00000994 	muleq	r0, r4, r9
    5be0:	00649102 	rsbeq	r9, r4, r2, lsl #2
    5be4:	002e0021 	eoreq	r0, lr, r1, lsr #32
    5be8:	02440100 	subeq	r0, r4, #0, 2
    5bec:	00019b5c 	andeq	r9, r1, ip, asr fp
    5bf0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    5bf4:	0f289c01 	svceq	0x00289c01
    5bf8:	af1e0000 	svcge	0x001e0000
    5bfc:	01000043 	tsteq	r0, r3, asr #32
    5c00:	0a480244 	beq	1206518 <mailbuffer+0x11cb428>
    5c04:	91020000 	mrsls	r0, (UNDEF: 2)
    5c08:	2fac205c 	svccs	0x00ac205c
    5c0c:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    5c10:	00099402 	andeq	r9, r9, r2, lsl #8
    5c14:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5c18:	30762100 	rsbscc	r2, r6, r0, lsl #2
    5c1c:	51010000 	mrspl	r0, (UNDEF: 1)
    5c20:	019c0c02 	orrseq	r0, ip, r2, lsl #24
    5c24:	0000a000 	andeq	sl, r0, r0
    5c28:	5d9c0100 	ldfpls	f0, [ip]
    5c2c:	1e00000f 	cdpne	0, 0, cr0, cr0, cr15, {0}
    5c30:	000043af 	andeq	r4, r0, pc, lsr #7
    5c34:	48025101 	stmdami	r2, {r0, r8, ip, lr}
    5c38:	0200000a 	andeq	r0, r0, #10
    5c3c:	ce205c91 	mcrgt	12, 1, r5, cr0, cr1, {4}
    5c40:	0100002e 	tsteq	r0, lr, lsr #32
    5c44:	09940255 	ldmibeq	r4, {r0, r2, r4, r6, r9}
    5c48:	91020000 	mrsls	r0, (UNDEF: 2)
    5c4c:	f7210064 			; <UNDEFINED> instruction: 0xf7210064
    5c50:	0100002f 	tsteq	r0, pc, lsr #32
    5c54:	9cac0269 	sfmls	f0, 4, [ip], #420	; 0x1a4
    5c58:	00c80001 	sbceq	r0, r8, r1
    5c5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5c60:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    5c64:	0043af1e 	subeq	sl, r3, lr, lsl pc
    5c68:	02690100 	rsbeq	r0, r9, #0, 2
    5c6c:	00000a48 	andeq	r0, r0, r8, asr #20
    5c70:	205c9102 	subscs	r9, ip, r2, lsl #2
    5c74:	00002f72 	andeq	r2, r0, r2, ror pc
    5c78:	94026d01 	strls	r6, [r2], #-3329	; 0xfffff2ff
    5c7c:	02000009 	andeq	r0, r0, #9
    5c80:	21006491 			; <UNDEFINED> instruction: 0x21006491
    5c84:	00002e22 	andeq	r2, r0, r2, lsr #28
    5c88:	74027d01 	strvc	r7, [r2], #-3329	; 0xfffff2ff
    5c8c:	cc00019d 	stfgts	f0, [r0], {157}	; 0x9d
    5c90:	01000000 	mrseq	r0, (UNDEF: 0)
    5c94:	000fd69c 	muleq	pc, ip, r6	; <UNPREDICTABLE>
    5c98:	43af1e00 			; <UNDEFINED> instruction: 0x43af1e00
    5c9c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    5ca0:	000a4802 	andeq	r4, sl, r2, lsl #16
    5ca4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    5ca8:	002a2b1e 	eoreq	r2, sl, lr, lsl fp
    5cac:	027d0100 	rsbseq	r0, sp, #0, 2
    5cb0:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    5cb4:	20589102 	subscs	r9, r8, r2, lsl #2
    5cb8:	000031a8 	andeq	r3, r0, r8, lsr #3
    5cbc:	94028101 	strls	r8, [r2], #-257	; 0xfffffeff
    5cc0:	02000009 	andeq	r0, r0, #9
    5cc4:	21006491 			; <UNDEFINED> instruction: 0x21006491
    5cc8:	000031bd 			; <UNDEFINED> instruction: 0x000031bd
    5ccc:	40028f01 	andmi	r8, r2, r1, lsl #30
    5cd0:	d000019e 	mulle	r0, lr, r1
    5cd4:	01000000 	mrseq	r0, (UNDEF: 0)
    5cd8:	00101a9c 	mulseq	r0, ip, sl
    5cdc:	43af1e00 			; <UNDEFINED> instruction: 0x43af1e00
    5ce0:	8f010000 	svchi	0x00010000
    5ce4:	000a4802 	andeq	r4, sl, r2, lsl #16
    5ce8:	5c910200 	lfmpl	f0, 4, [r1], {0}
    5cec:	002a2b1e 	eoreq	r2, sl, lr, lsl fp
    5cf0:	028f0100 	addeq	r0, pc, #0, 2
    5cf4:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    5cf8:	20589102 	subscs	r9, r8, r2, lsl #2
    5cfc:	000031a8 	andeq	r3, r0, r8, lsr #3
    5d00:	94029301 	strls	r9, [r2], #-769	; 0xfffffcff
    5d04:	02000009 	andeq	r0, r0, #9
    5d08:	21006491 			; <UNDEFINED> instruction: 0x21006491
    5d0c:	00002e44 	andeq	r2, r0, r4, asr #28
    5d10:	1002a101 	andne	sl, r2, r1, lsl #2
    5d14:	0800019f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r8}
    5d18:	01000001 	tsteq	r0, r1
    5d1c:	00105e9c 	mulseq	r0, ip, lr
    5d20:	43af1e00 			; <UNDEFINED> instruction: 0x43af1e00
    5d24:	a1010000 	mrsge	r0, (UNDEF: 1)
    5d28:	000a4802 	andeq	r4, sl, r2, lsl #16
    5d2c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    5d30:	002d121e 	eoreq	r1, sp, lr, lsl r2
    5d34:	02a10100 	adceq	r0, r1, #0, 2
    5d38:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    5d3c:	20589102 	subscs	r9, r8, r2, lsl #2
    5d40:	00000ac8 	andeq	r0, r0, r8, asr #21
    5d44:	9402a501 	strls	sl, [r2], #-1281	; 0xfffffaff
    5d48:	02000009 	andeq	r0, r0, #9
    5d4c:	21006491 			; <UNDEFINED> instruction: 0x21006491
    5d50:	00003321 	andeq	r3, r0, r1, lsr #6
    5d54:	1802b401 	stmdane	r2, {r0, sl, ip, sp, pc}
    5d58:	dc0001a0 	stfles	f0, [r0], {160}	; 0xa0
    5d5c:	01000000 	mrseq	r0, (UNDEF: 0)
    5d60:	0010939c 	mulseq	r0, ip, r3
    5d64:	43af1e00 			; <UNDEFINED> instruction: 0x43af1e00
    5d68:	b4010000 	strlt	r0, [r1], #-0
    5d6c:	000a4802 	andeq	r4, sl, r2, lsl #16
    5d70:	5c910200 	lfmpl	f0, 4, [r1], {0}
    5d74:	000ac820 	andeq	ip, sl, r0, lsr #16
    5d78:	02b80100 	adcseq	r0, r8, #0, 2
    5d7c:	00000994 	muleq	r0, r4, r9
    5d80:	00649102 	rsbeq	r9, r4, r2, lsl #2
    5d84:	002f211d 	eoreq	r2, pc, sp, lsl r1	; <UNPREDICTABLE>
    5d88:	02c50100 	sbceq	r0, r5, #0, 2
    5d8c:	000003d7 	ldrdeq	r0, [r0], -r7
    5d90:	0001a0f4 	strdeq	sl, [r1], -r4
    5d94:	00000140 	andeq	r0, r0, r0, asr #2
    5d98:	10ea9c01 	rscne	r9, sl, r1, lsl #24
    5d9c:	af1e0000 	svcge	0x001e0000
    5da0:	01000043 	tsteq	r0, r3, asr #32
    5da4:	0a4802c5 	beq	12068c0 <mailbuffer+0x11cb7d0>
    5da8:	91020000 	mrsls	r0, (UNDEF: 2)
    5dac:	262c1e6c 	strtcs	r1, [ip], -ip, ror #28
    5db0:	c5010000 	strgt	r0, [r1, #-0]
    5db4:	00094602 	andeq	r4, r9, r2, lsl #12
    5db8:	68910200 	ldmvs	r1, {r9}
    5dbc:	6e496222 	cdpvs	2, 4, cr6, cr9, cr2, {1}
    5dc0:	02c50100 	sbceq	r0, r5, #0, 2
    5dc4:	000003d7 	ldrdeq	r0, [r0], -r7
    5dc8:	1e649102 	lgnnes	f1, f2
    5dcc:	00002269 	andeq	r2, r0, r9, ror #4
    5dd0:	d702c501 	strle	ip, [r2, -r1, lsl #10]
    5dd4:	02000003 	andeq	r0, r0, #3
    5dd8:	21006091 	swpcs	r6, r1, [r0]
    5ddc:	00002cca 	andeq	r2, r0, sl, asr #25
    5de0:	3402de01 	strcc	sp, [r2], #-3585	; 0xfffff1ff
    5de4:	840001a2 	strhi	r0, [r0], #-418	; 0xfffffe5e
    5de8:	01000000 	mrseq	r0, (UNDEF: 0)
    5dec:	00113d9c 	mulseq	r1, ip, sp
    5df0:	262c1e00 	strtcs	r1, [ip], -r0, lsl #28
    5df4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    5df8:	00094602 	andeq	r4, r9, r2, lsl #12
    5dfc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5e00:	00011d1e 	andeq	r1, r1, lr, lsl sp
    5e04:	02de0100 	sbcseq	r0, lr, #0, 2
    5e08:	0000045b 	andeq	r0, r0, fp, asr r4
    5e0c:	1e609102 	lgnnes	f1, f2
    5e10:	00001b48 	andeq	r1, r0, r8, asr #22
    5e14:	5b02de01 	blpl	bd620 <mailbuffer+0x82530>
    5e18:	02000004 	andeq	r0, r0, #4
    5e1c:	af205c91 	svcge	0x00205c91
    5e20:	01000043 	tsteq	r0, r3, asr #32
    5e24:	0a4802e0 	beq	12069ac <mailbuffer+0x11cb8bc>
    5e28:	91020000 	mrsls	r0, (UNDEF: 2)
    5e2c:	f61d006c 			; <UNDEFINED> instruction: 0xf61d006c
    5e30:	01000032 	tsteq	r0, r2, lsr r0
    5e34:	03d702e6 	bicseq	r0, r7, #1610612750	; 0x6000000e
    5e38:	a2b80000 	adcsge	r0, r8, #0
    5e3c:	024c0001 	subeq	r0, ip, #1
    5e40:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e44:	000011cb 	andeq	r1, r0, fp, asr #3
    5e48:	0043af1e 	subeq	sl, r3, lr, lsl pc
    5e4c:	02e60100 	rsceq	r0, r6, #0, 2
    5e50:	00000a48 	andeq	r0, r0, r8, asr #20
    5e54:	1e5c9102 	lognee	f1, f2
    5e58:	0000262c 	andeq	r2, r0, ip, lsr #12
    5e5c:	4602e601 	strmi	lr, [r2], -r1, lsl #12
    5e60:	02000009 	andeq	r0, r0, #9
    5e64:	62225891 	eorvs	r5, r2, #9502720	; 0x910000
    5e68:	01006e49 	tsteq	r0, r9, asr #28
    5e6c:	03d702e6 	bicseq	r0, r7, #1610612750	; 0x6000000e
    5e70:	91020000 	mrsls	r0, (UNDEF: 2)
    5e74:	22691e54 	rsbcs	r1, r9, #84, 28	; 0x540
    5e78:	e6010000 	str	r0, [r1], -r0
    5e7c:	0003d702 	andeq	sp, r3, r2, lsl #14
    5e80:	50910200 	addspl	r0, r1, r0, lsl #4
    5e84:	002a2b20 	eoreq	r2, sl, r0, lsr #22
    5e88:	02eb0100 	rsceq	r0, fp, #0, 2
    5e8c:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    5e90:	206c9102 	rsbcs	r9, ip, r2, lsl #2
    5e94:	000025dc 	ldrdeq	r2, [r0], -ip
    5e98:	b402f101 	strlt	pc, [r2], #-257	; 0xfffffeff
    5e9c:	02000009 	andeq	r0, r0, #9
    5ea0:	20196891 	mulscs	r9, r1, r8
    5ea4:	b00001a4 	andlt	r0, r0, r4, lsr #3
    5ea8:	20000000 	andcs	r0, r0, r0
    5eac:	00001fa2 	andeq	r1, r0, r2, lsr #31
    5eb0:	52031201 	andpl	r1, r3, #268435456	; 0x10000000
    5eb4:	02000009 	andeq	r0, r0, #9
    5eb8:	00006491 	muleq	r0, r1, r4
    5ebc:	0030c221 	eorseq	ip, r0, r1, lsr #4
    5ec0:	031d0100 	tsteq	sp, #0, 2
    5ec4:	0001a504 	andeq	sl, r1, r4, lsl #10
    5ec8:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    5ecc:	12379c01 	eorsne	r9, r7, #256	; 0x100
    5ed0:	af1e0000 	svcge	0x001e0000
    5ed4:	01000043 	tsteq	r0, r3, asr #32
    5ed8:	0a48031d 	beq	1206b54 <mailbuffer+0x11cba64>
    5edc:	91020000 	mrsls	r0, (UNDEF: 2)
    5ee0:	25dc1e4c 	ldrbcs	r1, [ip, #3660]	; 0xe4c
    5ee4:	1d010000 	stcne	0, cr0, [r1, #-0]
    5ee8:	0009b403 	andeq	fp, r9, r3, lsl #8
    5eec:	48910200 	ldmmi	r1, {r9}
    5ef0:	002a2b20 	eoreq	r2, sl, r0, lsr #22
    5ef4:	03220100 	teqeq	r2, #0, 2
    5ef8:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    5efc:	206c9102 	rsbcs	r9, ip, r2, lsl #2
    5f00:	00002fce 	andeq	r2, r0, lr, asr #31
    5f04:	94032601 	strls	r2, [r3], #-1537	; 0xfffff9ff
    5f08:	02000009 	andeq	r0, r0, #9
    5f0c:	fc196091 	ldc2	0, cr6, [r9], {145}	; 0x91
    5f10:	840001a5 	strhi	r0, [r0], #-421	; 0xfffffe5b
    5f14:	20000000 	andcs	r0, r0, r0
    5f18:	000031ab 	andeq	r3, r0, fp, lsr #3
    5f1c:	94033101 	strls	r3, [r3], #-257	; 0xfffffeff
    5f20:	02000009 	andeq	r0, r0, #9
    5f24:	00005491 	muleq	r0, r1, r4
    5f28:	0030a321 	eorseq	sl, r0, r1, lsr #6
    5f2c:	03400100 	movteq	r0, #256	; 0x100
    5f30:	0001a6b8 			; <UNDEFINED> instruction: 0x0001a6b8
    5f34:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    5f38:	12e99c01 	rscne	r9, r9, #256	; 0x100
    5f3c:	af1e0000 	svcge	0x001e0000
    5f40:	01000043 	tsteq	r0, r3, asr #32
    5f44:	0a480340 	beq	1206c4c <mailbuffer+0x11cbb5c>
    5f48:	91030000 	mrsls	r0, (UNDEF: 3)
    5f4c:	dc1e7f9c 	ldcle	15, cr7, [lr], {156}	; 0x9c
    5f50:	01000025 	tsteq	r0, r5, lsr #32
    5f54:	09b40340 	ldmibeq	r4!, {r6, r8, r9}
    5f58:	91030000 	mrsls	r0, (UNDEF: 3)
    5f5c:	2b207f98 	blcs	825dc4 <mailbuffer+0x7eacd4>
    5f60:	0100002a 	tsteq	r0, sl, lsr #32
    5f64:	03b40345 			; <UNDEFINED> instruction: 0x03b40345
    5f68:	91020000 	mrsls	r0, (UNDEF: 2)
    5f6c:	2f3d206c 	svccs	0x003d206c
    5f70:	4b010000 	blmi	45f78 <mailbuffer+0xae88>
    5f74:	00099403 	andeq	r9, r9, r3, lsl #8
    5f78:	5c910200 	lfmpl	f0, 4, [r1], {0}
    5f7c:	00239f20 	eoreq	r9, r3, r0, lsr #30
    5f80:	03510100 	cmpeq	r1, #0, 2
    5f84:	00000994 	muleq	r0, r4, r9
    5f88:	20509102 	subscs	r9, r0, r2, lsl #2
    5f8c:	00003538 	andeq	r3, r0, r8, lsr r5
    5f90:	94035a01 	strls	r5, [r3], #-2561	; 0xfffff5ff
    5f94:	02000009 	andeq	r0, r0, #9
    5f98:	9b204491 	blls	8171e4 <mailbuffer+0x7dc0f4>
    5f9c:	01000031 	tsteq	r0, r1, lsr r0
    5fa0:	09940364 	ldmibeq	r4, {r2, r5, r6, r8, r9}
    5fa4:	91030000 	mrsls	r0, (UNDEF: 3)
    5fa8:	ce207fb8 	mcrgt	15, 1, r7, cr0, cr8, {5}
    5fac:	0100002f 	tsteq	r0, pc, lsr #32
    5fb0:	09940376 	ldmibeq	r4, {r1, r2, r4, r5, r6, r8, r9}
    5fb4:	91030000 	mrsls	r0, (UNDEF: 3)
    5fb8:	a2207fac 	eorge	r7, r0, #172, 30	; 0x2b0
    5fbc:	0100001f 	tsteq	r0, pc, lsl r0
    5fc0:	0952039a 	ldmdbeq	r2, {r1, r3, r4, r7, r8, r9}^
    5fc4:	91020000 	mrsls	r0, (UNDEF: 2)
    5fc8:	31ab2068 			; <UNDEFINED> instruction: 0x31ab2068
    5fcc:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    5fd0:	00099403 	andeq	r9, r9, r3, lsl #8
    5fd4:	a0910300 	addsge	r0, r1, r0, lsl #6
    5fd8:	7c21007f 	stcvc	0, cr0, [r1], #-508	; 0xfffffe04
    5fdc:	0100002e 	tsteq	r0, lr, lsr #32
    5fe0:	ac7403ba 	ldclge	3, cr0, [r4], #-744	; 0xfffffd18
    5fe4:	07a40001 	streq	r0, [r4, r1]!
    5fe8:	9c010000 	stcls	0, cr0, [r1], {-0}
    5fec:	000013cb 	andeq	r1, r0, fp, asr #7
    5ff0:	0043af1e 	subeq	sl, r3, lr, lsl pc
    5ff4:	03ba0100 			; <UNDEFINED> instruction: 0x03ba0100
    5ff8:	00000a48 	andeq	r0, r0, r8, asr #20
    5ffc:	7fb49103 	svcvc	0x00b49103
    6000:	002a2b1e 	eoreq	r2, sl, lr, lsl fp
    6004:	03ba0100 			; <UNDEFINED> instruction: 0x03ba0100
    6008:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    600c:	7fb09103 	svcvc	0x00b09103
    6010:	0025dc20 	eoreq	sp, r5, r0, lsr #24
    6014:	03be0100 			; <UNDEFINED> instruction: 0x03be0100
    6018:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    601c:	20649102 	rsbcs	r9, r4, r2, lsl #2
    6020:	00001fa2 	andeq	r1, r0, r2, lsr #31
    6024:	5203c001 	andpl	ip, r3, #1
    6028:	02000009 	andeq	r0, r0, #9
    602c:	2c206091 	stccs	0, cr6, [r0], #-580	; 0xfffffdbc
    6030:	01000026 	tsteq	r0, r6, lsr #32
    6034:	094603c1 	stmdbeq	r6, {r0, r6, r7, r8, r9}^
    6038:	91020000 	mrsls	r0, (UNDEF: 2)
    603c:	283c205c 	ldmdacs	ip!, {r2, r3, r4, r6, sp}
    6040:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    6044:	0003b403 	andeq	fp, r3, r3, lsl #8
    6048:	58910200 	ldmpl	r1, {r9}
    604c:	002ee123 	eoreq	lr, lr, r3, lsr #2
    6050:	04590100 	ldrbeq	r0, [r9], #-256	; 0xffffff00
    6054:	0001b234 	andeq	fp, r1, r4, lsr r2
    6058:	01ad6c24 			; <UNDEFINED> instruction: 0x01ad6c24
    605c:	00015800 	andeq	r5, r1, r0, lsl #16
    6060:	00139400 	andseq	r9, r3, r0, lsl #8
    6064:	239f2000 	orrscs	r2, pc, #0
    6068:	cf010000 	svcgt	0x00010000
    606c:	00099403 	andeq	r9, r9, r3, lsl #8
    6070:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    6074:	002f3d20 	eoreq	r3, pc, r0, lsr #26
    6078:	03d30100 	bicseq	r0, r3, #0, 2
    607c:	00000994 	muleq	r0, r4, r9
    6080:	7fb89103 	svcvc	0x00b89103
    6084:	af7c2400 	svcge	0x007c2400
    6088:	005c0001 	subseq	r0, ip, r1
    608c:	13b10000 			; <UNDEFINED> instruction: 0x13b10000
    6090:	59200000 	stmdbpl	r0!, {}	; <UNPREDICTABLE>
    6094:	01000028 	tsteq	r0, r8, lsr #32
    6098:	03b403ff 			; <UNDEFINED> instruction: 0x03b403ff
    609c:	91020000 	mrsls	r0, (UNDEF: 2)
    60a0:	fc190054 	ldc2	0, cr0, [r9], {84}	; 0x54
    60a4:	580001b2 	stmdapl	r0, {r1, r4, r5, r7, r8}
    60a8:	20000000 	andcs	r0, r0, r0
    60ac:	00002859 	andeq	r2, r0, r9, asr r8
    60b0:	b4047901 	strlt	r7, [r4], #-2305	; 0xfffff6ff
    60b4:	02000003 	andeq	r0, r0, #3
    60b8:	00005091 	muleq	r0, r1, r0
    60bc:	002ddc21 	eoreq	sp, sp, r1, lsr #24
    60c0:	04970100 	ldreq	r0, [r7], #256	; 0x100
    60c4:	0001b418 	andeq	fp, r1, r8, lsl r4
    60c8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    60cc:	146a9c01 	strbtne	r9, [sl], #-3073	; 0xfffff3ff
    60d0:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
    60d4:	01000001 	tsteq	r0, r1
    60d8:	045b0497 	ldrbeq	r0, [fp], #-1175	; 0xfffffb69
    60dc:	91030000 	mrsls	r0, (UNDEF: 3)
    60e0:	af207fbc 	svcge	0x00207fbc
    60e4:	01000043 	tsteq	r0, r3, asr #32
    60e8:	0a480499 	beq	1207354 <mailbuffer+0x11cc264>
    60ec:	91020000 	mrsls	r0, (UNDEF: 2)
    60f0:	2ece2064 	cdpcs	0, 12, cr2, cr14, cr4, {3}
    60f4:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    60f8:	00099404 	andeq	r9, r9, r4, lsl #8
    60fc:	58910200 	ldmpl	r1, {r9}
    6100:	01b4ac19 			; <UNDEFINED> instruction: 0x01b4ac19
    6104:	0000e400 	andeq	lr, r0, r0, lsl #8
    6108:	2f3a2000 	svccs	0x003a2000
    610c:	a4010000 	strge	r0, [r1], #-0
    6110:	00099404 	andeq	r9, r9, r4, lsl #8
    6114:	4c910200 	lfmmi	f0, 4, [r1], {0}
    6118:	002f8820 	eoreq	r8, pc, r0, lsr #16
    611c:	04a90100 	strteq	r0, [r9], #256	; 0x100
    6120:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    6124:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    6128:	0001b4e0 	andeq	fp, r1, r0, ror #9
    612c:	000000a4 	andeq	r0, r0, r4, lsr #1
    6130:	002a2b20 	eoreq	r2, sl, r0, lsr #22
    6134:	04aa0100 	strteq	r0, [sl], #256	; 0x100
    6138:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    613c:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    6140:	0001b50c 	andeq	fp, r1, ip, lsl #10
    6144:	0000004c 	andeq	r0, r0, ip, asr #32
    6148:	0031ab20 	eorseq	sl, r1, r0, lsr #22
    614c:	04ae0100 	strteq	r0, [lr], #256	; 0x100
    6150:	00000994 	muleq	r0, r4, r9
    6154:	00409102 	subeq	r9, r0, r2, lsl #2
    6158:	21000000 	mrscs	r0, (UNDEF: 0)
    615c:	00002e5b 	andeq	r2, r0, fp, asr lr
    6160:	c804d401 	stmdagt	r4, {r0, sl, ip, lr, pc}
    6164:	840001b5 	strhi	r0, [r0], #-437	; 0xfffffe4b
    6168:	01000001 	tsteq	r0, r1
    616c:	0014e59c 	mulseq	r4, ip, r5
    6170:	29591e00 	ldmdbcs	r9, {r9, sl, fp, ip}^
    6174:	d4010000 	strle	r0, [r1], #-0
    6178:	0003b404 	andeq	fp, r3, r4, lsl #8
    617c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    6180:	00011d1e 	andeq	r1, r1, lr, lsl sp
    6184:	04d40100 	ldrbeq	r0, [r4], #256	; 0x100
    6188:	0000045b 	andeq	r0, r0, fp, asr r4
    618c:	1e589102 	lognee	f1, f2
    6190:	00001b48 	andeq	r1, r0, r8, asr #22
    6194:	5b04d401 	blpl	13b1a0 <mailbuffer+0x1000b0>
    6198:	02000004 	andeq	r0, r0, #4
    619c:	af205491 	svcge	0x00205491
    61a0:	01000043 	tsteq	r0, r3, asr #32
    61a4:	0a4804d6 	beq	1207504 <mailbuffer+0x11cc414>
    61a8:	91020000 	mrsls	r0, (UNDEF: 2)
    61ac:	25dc206c 	ldrbcs	r2, [ip, #108]	; 0x6c
    61b0:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    61b4:	0009b404 	andeq	fp, r9, r4, lsl #8
    61b8:	68910200 	ldmvs	r1, {r9}
    61bc:	01b6b819 			; <UNDEFINED> instruction: 0x01b6b819
    61c0:	00005800 	andeq	r5, r0, r0, lsl #16
    61c4:	1fa22000 	svcne	0x00a22000
    61c8:	e6010000 	str	r0, [r1], -r0
    61cc:	00095204 	andeq	r5, r9, r4, lsl #4
    61d0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    61d4:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
    61d8:	01000032 	tsteq	r0, r2, lsr r0
    61dc:	03b404f5 			; <UNDEFINED> instruction: 0x03b404f5
    61e0:	b74c0000 	strblt	r0, [ip, -r0]
    61e4:	00f80001 	rscseq	r0, r8, r1
    61e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    61ec:	00001537 	andeq	r1, r0, r7, lsr r5
    61f0:	0043af1e 	subeq	sl, r3, lr, lsl pc
    61f4:	04f50100 	ldrbteq	r0, [r5], #256	; 0x100
    61f8:	00000a48 	andeq	r0, r0, r8, asr #20
    61fc:	20649102 	rsbcs	r9, r4, r2, lsl #2
    6200:	00002f88 	andeq	r2, r0, r8, lsl #31
    6204:	b404fb01 	strlt	pc, [r4], #-2817	; 0xfffff4ff
    6208:	02000003 	andeq	r0, r0, #3
    620c:	a4196c91 	ldrge	r6, [r9], #-3217	; 0xfffff36f
    6210:	740001b7 	strvc	r0, [r0], #-439	; 0xfffffe49
    6214:	20000000 	andcs	r0, r0, r0
    6218:	00002a2b 	andeq	r2, r0, fp, lsr #20
    621c:	b404fc01 	strlt	pc, [r4], #-3073	; 0xfffff3ff
    6220:	02000003 	andeq	r0, r0, #3
    6224:	00006891 	muleq	r0, r1, r8
    6228:	002f5b21 	eoreq	r5, pc, r1, lsr #22
    622c:	050f0100 	streq	r0, [pc, #-256]	; 6134 <_start-0x1ecc>
    6230:	0001b844 	andeq	fp, r1, r4, asr #16
    6234:	000000fc 	strdeq	r0, [r0], -ip
    6238:	157b9c01 	ldrbne	r9, [fp, #-3073]!	; 0xfffff3ff
    623c:	af1e0000 	svcge	0x001e0000
    6240:	01000043 	tsteq	r0, r3, asr #32
    6244:	0a48050f 	beq	1207688 <mailbuffer+0x11cc598>
    6248:	91020000 	mrsls	r0, (UNDEF: 2)
    624c:	2a2b1e64 	bcs	acdbe4 <mailbuffer+0xa92af4>
    6250:	0f010000 	svceq	0x00010000
    6254:	0003b405 	andeq	fp, r3, r5, lsl #8
    6258:	60910200 	addsvs	r0, r1, r0, lsl #4
    625c:	002f8820 	eoreq	r8, pc, r0, lsr #16
    6260:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
    6264:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    6268:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    626c:	00329b1d 	eorseq	r9, r2, sp, lsl fp
    6270:	051e0100 	ldreq	r0, [lr, #-256]	; 0xffffff00
    6274:	000003d7 	ldrdeq	r0, [r0], -r7
    6278:	0001b940 	andeq	fp, r1, r0, asr #18
    627c:	00000168 	andeq	r0, r0, r8, ror #2
    6280:	15e19c01 	strbne	r9, [r1, #3073]!	; 0xc01
    6284:	af1e0000 	svcge	0x001e0000
    6288:	01000043 	tsteq	r0, r3, asr #32
    628c:	0a48051e 	beq	120770c <mailbuffer+0x11cc61c>
    6290:	91020000 	mrsls	r0, (UNDEF: 2)
    6294:	2f171e6c 	svccs	0x00171e6c
    6298:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    629c:	0015e105 	andseq	lr, r5, r5, lsl #2
    62a0:	68910200 	ldmvs	r1, {r9}
    62a4:	002d0c1e 	eoreq	r0, sp, lr, lsl ip
    62a8:	051e0100 	ldreq	r0, [lr, #-256]	; 0xffffff00
    62ac:	000003a9 	andeq	r0, r0, r9, lsr #7
    62b0:	1e649102 	lgnnes	f1, f2
    62b4:	00002f7a 	andeq	r2, r0, sl, ror pc
    62b8:	d7051e01 	strle	r1, [r5, -r1, lsl #28]
    62bc:	02000003 	andeq	r0, r0, #3
    62c0:	981e6091 	ldmdals	lr, {r0, r4, r7, sp, lr}
    62c4:	01000030 	tsteq	r0, r0, lsr r0
    62c8:	03b4051e 			; <UNDEFINED> instruction: 0x03b4051e
    62cc:	91020000 	mrsls	r0, (UNDEF: 2)
    62d0:	040f0000 	streq	r0, [pc], #-0	; 62d8 <_start-0x1d28>
    62d4:	00000994 	muleq	r0, r4, r9
    62d8:	0032101d 	eorseq	r1, r2, sp, lsl r0
    62dc:	05370100 	ldreq	r0, [r7, #-256]!	; 0xffffff00
    62e0:	0000006c 	andeq	r0, r0, ip, rrx
    62e4:	0001baa8 	andeq	fp, r1, r8, lsr #21
    62e8:	000000f4 	strdeq	r0, [r0], -r4
    62ec:	162f9c01 	strtne	r9, [pc], -r1, lsl #24
    62f0:	af1e0000 	svcge	0x001e0000
    62f4:	01000043 	tsteq	r0, r3, asr #32
    62f8:	0a480537 	beq	12077dc <mailbuffer+0x11cc6ec>
    62fc:	91020000 	mrsls	r0, (UNDEF: 2)
    6300:	4221205c 	eormi	r2, r1, #92	; 0x5c
    6304:	3b010000 	blcc	4630c <mailbuffer+0xb21c>
    6308:	00006c05 	andeq	r6, r0, r5, lsl #24
    630c:	6f910200 	svcvs	0x00910200
    6310:	002e7320 	eoreq	r7, lr, r0, lsr #6
    6314:	053d0100 	ldreq	r0, [sp, #-256]!	; 0xffffff00
    6318:	00000994 	muleq	r0, r4, r9
    631c:	00609102 	rsbeq	r9, r0, r2, lsl #2
    6320:	002fd81d 	eoreq	sp, pc, sp, lsl r8	; <UNPREDICTABLE>
    6324:	05570100 	ldrbeq	r0, [r7, #-256]	; 0xffffff00
    6328:	000003d7 	ldrdeq	r0, [r0], -r7
    632c:	0001bb9c 	muleq	r1, ip, fp
    6330:	000000c4 	andeq	r0, r0, r4, asr #1
    6334:	16689c01 	strbtne	r9, [r8], -r1, lsl #24
    6338:	af1e0000 	svcge	0x001e0000
    633c:	01000043 	tsteq	r0, r3, asr #32
    6340:	0a480557 	beq	12078a4 <mailbuffer+0x11cc7b4>
    6344:	91020000 	mrsls	r0, (UNDEF: 2)
    6348:	2e73205c 	mrccs	0, 3, r2, cr3, cr12, {2}
    634c:	5b010000 	blpl	46354 <mailbuffer+0xb264>
    6350:	00099405 	andeq	r9, r9, r5, lsl #8
    6354:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    6358:	31302100 	teqcc	r0, r0, lsl #2
    635c:	6a010000 	bvs	46364 <mailbuffer+0xb274>
    6360:	01bc6005 			; <UNDEFINED> instruction: 0x01bc6005
    6364:	0000b000 	andeq	fp, r0, r0
    6368:	9d9c0100 	ldflss	f0, [ip]
    636c:	1e000016 	mcrne	0, 0, r0, cr0, cr6, {0}
    6370:	000043af 	andeq	r4, r0, pc, lsr #7
    6374:	48056a01 	stmdami	r5, {r0, r9, fp, sp, lr}
    6378:	0200000a 	andeq	r0, r0, #10
    637c:	73205c91 	teqvc	r0, #37120	; 0x9100
    6380:	0100002e 	tsteq	r0, lr, lsr #32
    6384:	0994056e 	ldmibeq	r4, {r1, r2, r3, r5, r6, r8, sl}
    6388:	91020000 	mrsls	r0, (UNDEF: 2)
    638c:	09210064 	stmdbeq	r1!, {r2, r5, r6}
    6390:	0100002f 	tsteq	r0, pc, lsr #32
    6394:	bd10057a 	cfldr32lt	mvfx0, [r0, #-488]	; 0xfffffe18
    6398:	00c40001 	sbceq	r0, r4, r1
    639c:	9c010000 	stcls	0, cr0, [r1], {-0}
    63a0:	000016f0 	strdeq	r1, [r0], -r0
    63a4:	0043af1e 	subeq	sl, r3, lr, lsl pc
    63a8:	057a0100 	ldrbeq	r0, [sl, #-256]!	; 0xffffff00
    63ac:	00000a48 	andeq	r0, r0, r8, asr #20
    63b0:	1e5c9102 	lognee	f1, f2
    63b4:	0000221b 	andeq	r2, r0, fp, lsl r2
    63b8:	f0057a01 			; <UNDEFINED> instruction: 0xf0057a01
    63bc:	02000016 	andeq	r0, r0, #22
    63c0:	fa1e5891 	blx	79c60c <mailbuffer+0x76151c>
    63c4:	01000030 	tsteq	r0, r0, lsr r0
    63c8:	03a9057a 			; <UNDEFINED> instruction: 0x03a9057a
    63cc:	91020000 	mrsls	r0, (UNDEF: 2)
    63d0:	2ea52054 	mcrcs	0, 5, r2, cr5, cr4, {2}
    63d4:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    63d8:	00099405 	andeq	r9, r9, r5, lsl #8
    63dc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    63e0:	f6040f00 			; <UNDEFINED> instruction: 0xf6040f00
    63e4:	10000016 	andne	r0, r0, r6, lsl r0
    63e8:	000003c2 	andeq	r0, r0, r2, asr #7
    63ec:	002eae21 	eoreq	sl, lr, r1, lsr #28
    63f0:	05880100 	streq	r0, [r8, #256]	; 0x100
    63f4:	0001bdd4 	ldrdeq	fp, [r1], -r4
    63f8:	000002c4 	andeq	r0, r0, r4, asr #5
    63fc:	17309c01 	ldrne	r9, [r0, -r1, lsl #24]!
    6400:	af1e0000 	svcge	0x001e0000
    6404:	01000043 	tsteq	r0, r3, asr #32
    6408:	0a480588 	beq	1207a30 <mailbuffer+0x11cc940>
    640c:	91020000 	mrsls	r0, (UNDEF: 2)
    6410:	2a2b1e6c 	bcs	acddc8 <mailbuffer+0xa92cd8>
    6414:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    6418:	0003b405 	andeq	fp, r3, r5, lsl #8
    641c:	68910200 	ldmvs	r1, {r9}
    6420:	03c20b00 	biceq	r0, r2, #0, 22
    6424:	17400000 	strbne	r0, [r0, -r0]
    6428:	82160000 	andshi	r0, r6, #0
    642c:	05000003 	streq	r0, [r0, #-3]
    6430:	2ca81a00 	vstmiacs	r8!, {s2-s1}
    6434:	3f010000 	svccc	0x00010000
    6438:	00001751 	andeq	r1, r0, r1, asr r7
    643c:	e0d40305 	sbcs	r0, r4, r5, lsl #6
    6440:	30100002 	andscc	r0, r0, r2
    6444:	00000017 	andeq	r0, r0, r7, lsl r0
    6448:	00000357 	andeq	r0, r0, r7, asr r3
    644c:	13100004 	tstne	r0, #4
    6450:	01040000 	mrseq	r0, (UNDEF: 4)
    6454:	00000019 	andeq	r0, r0, r9, lsl r0
    6458:	00338501 	eorseq	r8, r3, r1, lsl #10
    645c:	01c09800 	biceq	r9, r0, r0, lsl #16
    6460:	00099000 	andeq	r9, r9, r0
    6464:	0023d300 	eoreq	sp, r3, r0, lsl #6
    6468:	07040200 	streq	r0, [r4, -r0, lsl #4]
    646c:	0000071d 	andeq	r0, r0, sp, lsl r7
    6470:	2a080102 	bcs	206880 <mailbuffer+0x1cb790>
    6474:	02000007 	andeq	r0, r0, #7
    6478:	01320702 	teqeq	r2, r2, lsl #14
    647c:	75030000 	strvc	r0, [r3, #-0]
    6480:	03003233 	movweq	r3, #563	; 0x233
    6484:	00002119 	andeq	r2, r0, r9, lsl r1
    6488:	07080200 	streq	r0, [r8, -r0, lsl #4]
    648c:	00000713 	andeq	r0, r0, r3, lsl r7
    6490:	33060102 	movwcc	r0, #24834	; 0x6102
    6494:	02000007 	andeq	r0, r0, #7
    6498:	07b80502 	ldreq	r0, [r8, r2, lsl #10]!
    649c:	04040000 	streq	r0, [r4], #-0
    64a0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    64a4:	29300500 	ldmdbcs	r0!, {r8, sl}
    64a8:	20030000 	andcs	r0, r3, r0
    64ac:	00000056 	andeq	r0, r0, r6, asr r0
    64b0:	18070402 	stmdane	r7, {r1, sl}
    64b4:	02000007 	andeq	r0, r0, #7
    64b8:	07980504 	ldreq	r0, [r8, r4, lsl #10]
    64bc:	9f060000 	svcls	0x00060000
    64c0:	0c00002e 	stceq	0, cr0, [r0], {46}	; 0x2e
    64c4:	00a71e02 	adceq	r1, r7, r2, lsl #28
    64c8:	8a070000 	bhi	1c64d0 <mailbuffer+0x18b3e0>
    64cc:	02000026 	andeq	r0, r0, #38	; 0x26
    64d0:	00005d20 	andeq	r5, r0, r0, lsr #26
    64d4:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
    64d8:	02000030 	andeq	r0, r0, #48	; 0x30
    64dc:	00003621 	andeq	r3, r0, r1, lsr #12
    64e0:	c4070400 	strgt	r0, [r7], #-1024	; 0xfffffc00
    64e4:	0200002e 	andeq	r0, r0, #46	; 0x2e
    64e8:	00003622 	andeq	r3, r0, r2, lsr #12
    64ec:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    64f0:	00002e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    64f4:	00762402 	rsbseq	r2, r6, r2, lsl #8
    64f8:	a0080000 	andge	r0, r8, r0
    64fc:	0100002e 	tsteq	r0, lr, lsr #32
    6500:	01c09818 	biceq	r9, r0, r8, lsl r8
    6504:	00008400 	andeq	r8, r0, r0, lsl #8
    6508:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    650c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6510:	000043af 	andeq	r4, r0, pc, lsr #7
    6514:	00e41801 	rsceq	r1, r4, r1, lsl #16
    6518:	91020000 	mrsls	r0, (UNDEF: 2)
    651c:	30fa096c 	rscscc	r0, sl, ip, ror #18
    6520:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    6524:	00000036 	andeq	r0, r0, r6, lsr r0
    6528:	00689102 	rsbeq	r9, r8, r2, lsl #2
    652c:	00a7040a 	adceq	r0, r7, sl, lsl #8
    6530:	47080000 	strmi	r0, [r8, -r0]
    6534:	01000034 	tsteq	r0, r4, lsr r0
    6538:	01c11c1f 	biceq	r1, r1, pc, lsl ip
    653c:	00009400 	andeq	r9, r0, r0, lsl #8
    6540:	2a9c0100 	bcs	fe706948 <_estack+0xf66f6948>
    6544:	09000001 	stmdbeq	r0, {r0}
    6548:	000043af 	andeq	r4, r0, pc, lsr #7
    654c:	00e41f01 	rsceq	r1, r4, r1, lsl #30
    6550:	91020000 	mrsls	r0, (UNDEF: 2)
    6554:	30fa096c 	rscscc	r0, sl, ip, ror #18
    6558:	1f010000 	svcne	0x00010000
    655c:	00000036 	andeq	r0, r0, r6, lsr r0
    6560:	09689102 	stmdbeq	r8!, {r1, r8, ip, pc}^
    6564:	00002a5c 	andeq	r2, r0, ip, asr sl
    6568:	00361f01 	eorseq	r1, r6, r1, lsl #30
    656c:	91020000 	mrsls	r0, (UNDEF: 2)
    6570:	7a080064 	bvc	206708 <mailbuffer+0x1cb618>
    6574:	01000034 	tsteq	r0, r4, lsr r0
    6578:	01c1b027 	biceq	fp, r1, r7, lsr #32
    657c:	00007400 	andeq	r7, r0, r0, lsl #8
    6580:	4e9c0100 	fmlmie	f0, f4, f0
    6584:	09000001 	stmdbeq	r0, {r0}
    6588:	000043af 	andeq	r4, r0, pc, lsr #7
    658c:	00e42701 	rsceq	r2, r4, r1, lsl #14
    6590:	91020000 	mrsls	r0, (UNDEF: 2)
    6594:	1f0b006c 	svcne	0x000b006c
    6598:	01000034 	tsteq	r0, r4, lsr r0
    659c:	0000362d 	andeq	r3, r0, sp, lsr #12
    65a0:	01c22400 	biceq	r2, r2, r0, lsl #8
    65a4:	00009800 	andeq	r9, r0, r0, lsl #16
    65a8:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    65ac:	09000001 	stmdbeq	r0, {r0}
    65b0:	000043af 	andeq	r4, r0, pc, lsr #7
    65b4:	00e42d01 	rsceq	r2, r4, r1, lsl #26
    65b8:	91020000 	mrsls	r0, (UNDEF: 2)
    65bc:	3d08006c 	stccc	0, cr0, [r8, #-432]	; 0xfffffe50
    65c0:	01000033 	tsteq	r0, r3, lsr r0
    65c4:	01c2bc36 	biceq	fp, r2, r6, lsr ip
    65c8:	0000a800 	andeq	sl, r0, r0, lsl #16
    65cc:	9a9c0100 	bls	fe7069d4 <_estack+0xf66f69d4>
    65d0:	09000001 	stmdbeq	r0, {r0}
    65d4:	000043af 	andeq	r4, r0, pc, lsr #7
    65d8:	00e43601 	rsceq	r3, r4, r1, lsl #12
    65dc:	91020000 	mrsls	r0, (UNDEF: 2)
    65e0:	500b006c 	andpl	r0, fp, ip, rrx
    65e4:	01000033 	tsteq	r0, r3, lsr r0
    65e8:	0000363d 	andeq	r3, r0, sp, lsr r6
    65ec:	01c36400 	biceq	r6, r3, r0, lsl #8
    65f0:	0000a000 	andeq	sl, r0, r0
    65f4:	c29c0100 	addsgt	r0, ip, #0, 2
    65f8:	09000001 	stmdbeq	r0, {r0}
    65fc:	000043af 	andeq	r4, r0, pc, lsr #7
    6600:	00e43d01 	rsceq	r3, r4, r1, lsl #26
    6604:	91020000 	mrsls	r0, (UNDEF: 2)
    6608:	fc08006c 	stc2	0, cr0, [r8], {108}	; 0x6c
    660c:	01000033 	tsteq	r0, r3, lsr r0
    6610:	01c40444 	biceq	r0, r4, r4, asr #8
    6614:	00008400 	andeq	r8, r0, r0, lsl #8
    6618:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    661c:	09000001 	stmdbeq	r0, {r0}
    6620:	000043af 	andeq	r4, r0, pc, lsr #7
    6624:	00e44401 	rsceq	r4, r4, r1, lsl #8
    6628:	91020000 	mrsls	r0, (UNDEF: 2)
    662c:	2a5c096c 	bcs	1708be4 <mailbuffer+0x16cdaf4>
    6630:	44010000 	strmi	r0, [r1], #-0
    6634:	00000036 	andeq	r0, r0, r6, lsr r0
    6638:	00689102 	rsbeq	r9, r8, r2, lsl #2
    663c:	0034560b 	eorseq	r5, r4, fp, lsl #12
    6640:	5d4b0100 	stfple	f0, [fp, #-0]
    6644:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    6648:	c00001c4 	andgt	r0, r0, r4, asr #3
    664c:	01000000 	mrseq	r0, (UNDEF: 0)
    6650:	00022a9c 	muleq	r2, ip, sl
    6654:	43af0900 			; <UNDEFINED> instruction: 0x43af0900
    6658:	4b010000 	blmi	46660 <mailbuffer+0xb570>
    665c:	000000e4 	andeq	r0, r0, r4, ror #1
    6660:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    6664:	00002d0c 	andeq	r2, r0, ip, lsl #26
    6668:	00364b01 	eorseq	r4, r6, r1, lsl #22
    666c:	91020000 	mrsls	r0, (UNDEF: 2)
    6670:	69080068 	stmdbvs	r8, {r3, r5, r6}
    6674:	01000034 	tsteq	r0, r4, lsr r0
    6678:	01c54852 	biceq	r4, r5, r2, asr r8
    667c:	0000ac00 	andeq	sl, r0, r0, lsl #24
    6680:	5c9c0100 	ldfpls	f0, [ip], {0}
    6684:	09000002 	stmdbeq	r0, {r1}
    6688:	000043af 	andeq	r4, r0, pc, lsr #7
    668c:	00e45201 	rsceq	r5, r4, r1, lsl #4
    6690:	91020000 	mrsls	r0, (UNDEF: 2)
    6694:	2d0c096c 	stccs	9, cr0, [ip, #-432]	; 0xfffffe50
    6698:	52010000 	andpl	r0, r1, #0
    669c:	00000036 	andeq	r0, r0, r6, lsr r0
    66a0:	00689102 	rsbeq	r9, r8, r2, lsl #2
    66a4:	00336108 	eorseq	r6, r3, r8, lsl #2
    66a8:	f4590100 			; <UNDEFINED> instruction: 0xf4590100
    66ac:	ac0001c5 	stfges	f0, [r0], {197}	; 0xc5
    66b0:	01000000 	mrseq	r0, (UNDEF: 0)
    66b4:	00028e9c 	muleq	r2, ip, lr
    66b8:	43af0900 			; <UNDEFINED> instruction: 0x43af0900
    66bc:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    66c0:	000000e4 	andeq	r0, r0, r4, ror #1
    66c4:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    66c8:	00002d0c 	andeq	r2, r0, ip, lsl #26
    66cc:	00365901 	eorseq	r5, r6, r1, lsl #18
    66d0:	91020000 	mrsls	r0, (UNDEF: 2)
    66d4:	e6080068 	str	r0, [r8], -r8, rrx
    66d8:	01000033 	tsteq	r0, r3, lsr r0
    66dc:	01c6a060 	biceq	sl, r6, r0, rrx
    66e0:	0000dc00 	andeq	sp, r0, r0, lsl #24
    66e4:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    66e8:	09000002 	stmdbeq	r0, {r1}
    66ec:	000043af 	andeq	r4, r0, pc, lsr #7
    66f0:	00e46001 	rsceq	r6, r4, r1
    66f4:	91020000 	mrsls	r0, (UNDEF: 2)
    66f8:	3338096c 	teqcc	r8, #108, 18	; 0x1b0000
    66fc:	60010000 	andvs	r0, r1, r0
    6700:	00000021 	andeq	r0, r0, r1, lsr #32
    6704:	00689102 	rsbeq	r9, r8, r2, lsl #2
    6708:	00348908 	eorseq	r8, r4, r8, lsl #18
    670c:	7c680100 	stfvce	f0, [r8], #-0
    6710:	d80001c7 	stmdale	r0, {r0, r1, r2, r6, r7, r8}
    6714:	01000000 	mrseq	r0, (UNDEF: 0)
    6718:	0002f29c 	muleq	r2, ip, r2
    671c:	43af0900 			; <UNDEFINED> instruction: 0x43af0900
    6720:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    6724:	000000e4 	andeq	r0, r0, r4, ror #1
    6728:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    672c:	00003338 	andeq	r3, r0, r8, lsr r3
    6730:	00216801 	eoreq	r6, r1, r1, lsl #16
    6734:	91020000 	mrsls	r0, (UNDEF: 2)
    6738:	31080068 	tstcc	r8, r8, rrx
    673c:	01000034 	tsteq	r0, r4, lsr r0
    6740:	01c85470 	biceq	r5, r8, r0, ror r4
    6744:	00008000 	andeq	r8, r0, r0
    6748:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    674c:	09000003 	stmdbeq	r0, {r0, r1}
    6750:	000043af 	andeq	r4, r0, pc, lsr #7
    6754:	00e47001 	rsceq	r7, r4, r1
    6758:	91020000 	mrsls	r0, (UNDEF: 2)
    675c:	7108006c 	tstvc	r8, ip, rrx
    6760:	01000033 	tsteq	r0, r3, lsr r0
    6764:	01c8d477 	biceq	sp, r8, r7, ror r4
    6768:	00008000 	andeq	r8, r0, r0
    676c:	3a9c0100 	bcc	fe706b74 <_estack+0xf66f6b74>
    6770:	09000003 	stmdbeq	r0, {r0, r1}
    6774:	000043af 	andeq	r4, r0, pc, lsr #7
    6778:	00e47701 	rsceq	r7, r4, r1, lsl #14
    677c:	91020000 	mrsls	r0, (UNDEF: 2)
    6780:	0d0c006c 	stceq	0, cr0, [ip, #-432]	; 0xfffffe50
    6784:	01000034 	tsteq	r0, r4, lsr r0
    6788:	01c95480 	biceq	r5, r9, r0, lsl #9
    678c:	0000d400 	andeq	sp, r0, r0, lsl #8
    6790:	099c0100 	ldmibeq	ip, {r8}
    6794:	000043af 	andeq	r4, r0, pc, lsr #7
    6798:	00e48001 	rsceq	r8, r4, r1
    679c:	91020000 	mrsls	r0, (UNDEF: 2)
    67a0:	c300006c 	movwgt	r0, #108	; 0x6c
    67a4:	0400000f 	streq	r0, [r0], #-15
    67a8:	0013d600 	andseq	sp, r3, r0, lsl #12
    67ac:	19010400 	stmdbne	r1, {sl}
    67b0:	01000000 	mrseq	r0, (UNDEF: 0)
    67b4:	0000349d 	muleq	r0, sp, r4
    67b8:	00000ddc 	ldrdeq	r0, [r0], -ip
    67bc:	0001ca28 	andeq	ip, r1, r8, lsr #20
    67c0:	00001ad8 	ldrdeq	r1, [r0], -r8
    67c4:	000025ea 	andeq	r2, r0, sl, ror #11
    67c8:	1b020102 	blne	86bd8 <mailbuffer+0x4bae8>
    67cc:	00000040 	andeq	r0, r0, r0, asr #32
    67d0:	00254603 	eoreq	r4, r5, r3, lsl #12
    67d4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    67d8:	0100002b 	tsteq	r0, fp, lsr #32
    67dc:	0028bb03 	eoreq	fp, r8, r3, lsl #22
    67e0:	04000200 	streq	r0, [r0], #-512	; 0xfffffe00
    67e4:	00002213 	andeq	r2, r0, r3, lsl r2
    67e8:	00252202 	eoreq	r2, r5, r2, lsl #4
    67ec:	01020000 	mrseq	r0, (UNDEF: 2)
    67f0:	006c2b02 	rsbeq	r2, ip, r2, lsl #22
    67f4:	9a030000 	bls	c67fc <mailbuffer+0x8b70c>
    67f8:	00000025 	andeq	r0, r0, r5, lsr #32
    67fc:	002c4903 	eoreq	r4, ip, r3, lsl #18
    6800:	21030100 	mrscs	r0, (UNDEF: 19)
    6804:	02000022 	andeq	r0, r0, #34	; 0x22
    6808:	00265b03 	eoreq	r5, r6, r3, lsl #22
    680c:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    6810:	00002421 	andeq	r2, r0, r1, lsr #8
    6814:	004b3102 	subeq	r3, fp, r2, lsl #2
    6818:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    681c:	00bc3402 	adcseq	r3, ip, r2, lsl #8
    6820:	76060000 	strvc	r0, [r6], -r0
    6824:	02000022 	andeq	r0, r0, #34	; 0x22
    6828:	0000bc36 	andeq	fp, r0, r6, lsr ip
    682c:	d3060000 	movwle	r0, #24576	; 0x6000
    6830:	02000027 	andeq	r0, r0, #39	; 0x27
    6834:	0000bc37 	andeq	fp, r0, r7, lsr ip
    6838:	f3060100 	vrhadd.u8	d0, d6, d0
    683c:	02000021 	andeq	r0, r0, #33	; 0x21
    6840:	0000c338 	andeq	ip, r0, r8, lsr r3
    6844:	0c060200 	sfmeq	f0, 4, [r6], {-0}
    6848:	0200001f 	andeq	r0, r0, #31
    684c:	0000c339 	andeq	ip, r0, r9, lsr r3
    6850:	b3060400 	movwlt	r0, #25600	; 0x6400
    6854:	0200002b 	andeq	r0, r0, #43	; 0x2b
    6858:	0000c33a 	andeq	ip, r0, sl, lsr r3
    685c:	07000600 	streq	r0, [r0, -r0, lsl #12]
    6860:	072a0801 	streq	r0, [sl, -r1, lsl #16]!
    6864:	02070000 	andeq	r0, r7, #0
    6868:	00013207 	andeq	r3, r1, r7, lsl #4
    686c:	22080400 	andcs	r0, r8, #0, 8
    6870:	3d020000 	stccc	0, cr0, [r2, #-0]
    6874:	00000077 	andeq	r0, r0, r7, ror r0
    6878:	5c021205 	sfmpl	f1, 4, [r2], {5}
    687c:	00000186 	andeq	r0, r0, r6, lsl #3
    6880:	0029a806 	eoreq	sl, r9, r6, lsl #16
    6884:	bc5e0200 	lfmlt	f0, 2, [lr], {-0}
    6888:	00000000 	andeq	r0, r0, r0
    688c:	00242b06 	eoreq	r2, r4, r6, lsl #22
    6890:	bc5f0200 	lfmlt	f0, 2, [pc], {-0}
    6894:	01000000 	mrseq	r0, (UNDEF: 0)
    6898:	00228c06 	eoreq	r8, r2, r6, lsl #24
    689c:	c3600200 	cmngt	r0, #0, 4
    68a0:	02000000 	andeq	r0, r0, #0
    68a4:	00212806 	eoreq	r2, r1, r6, lsl #16
    68a8:	bc610200 	sfmlt	f0, 2, [r1], #-0
    68ac:	04000000 	streq	r0, [r0], #-0
    68b0:	0022f606 	eoreq	pc, r2, r6, lsl #12
    68b4:	bc620200 	sfmlt	f0, 2, [r2], #-0
    68b8:	05000000 	streq	r0, [r0, #-0]
    68bc:	00279f06 	eoreq	r9, r7, r6, lsl #30
    68c0:	bc630200 	sfmlt	f0, 2, [r3], #-0
    68c4:	06000000 	streq	r0, [r0], -r0
    68c8:	0025e706 	eoreq	lr, r5, r6, lsl #14
    68cc:	bc640200 	sfmlt	f0, 2, [r4], #-0
    68d0:	07000000 	streq	r0, [r0, -r0]
    68d4:	002c5606 	eoreq	r5, ip, r6, lsl #12
    68d8:	c3660200 	cmngt	r6, #0, 4
    68dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    68e0:	00224406 	eoreq	r4, r2, r6, lsl #8
    68e4:	c3670200 	cmngt	r7, #0, 4
    68e8:	0a000000 	beq	68f0 <_start-0x1710>
    68ec:	00213506 	eoreq	r3, r1, r6, lsl #10
    68f0:	c3680200 	cmngt	r8, #0, 4
    68f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    68f8:	0021fa06 	eoreq	pc, r1, r6, lsl #20
    68fc:	bc690200 	sfmlt	f0, 2, [r9], #-0
    6900:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6904:	00233b06 	eoreq	r3, r3, r6, lsl #22
    6908:	bc6a0200 	sfmlt	f0, 2, [sl], #-0
    690c:	0f000000 	svceq	0x00000000
    6910:	00232206 	eoreq	r2, r3, r6, lsl #4
    6914:	bc6b0200 	sfmlt	f0, 2, [fp], #-0
    6918:	10000000 	andne	r0, r0, r0
    691c:	0028a806 	eoreq	sl, r8, r6, lsl #16
    6920:	bc6c0200 	sfmlt	f0, 2, [ip], #-0
    6924:	11000000 	mrsne	r0, (UNDEF: 0)
    6928:	28c70400 	stmiacs	r7, {sl}^
    692c:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
    6930:	000000d5 	ldrdeq	r0, [r0], -r5
    6934:	71020905 	tstvc	r2, r5, lsl #18
    6938:	000001fa 	strdeq	r0, [r0], -sl
    693c:	0029a806 	eoreq	sl, r9, r6, lsl #16
    6940:	bc730200 	lfmlt	f0, 2, [r3], #-0
    6944:	00000000 	andeq	r0, r0, r0
    6948:	00242b06 	eoreq	r2, r4, r6, lsl #22
    694c:	bc740200 	lfmlt	f0, 2, [r4], #-0
    6950:	01000000 	mrseq	r0, (UNDEF: 0)
    6954:	00208806 	eoreq	r8, r0, r6, lsl #16
    6958:	c3750200 	cmngt	r5, #0, 4
    695c:	02000000 	andeq	r0, r0, #0
    6960:	0029b006 	eoreq	fp, r9, r6
    6964:	bc760200 	lfmlt	f0, 2, [r6], #-0
    6968:	04000000 	streq	r0, [r0], #-0
    696c:	002a4f06 	eoreq	r4, sl, r6, lsl #30
    6970:	bc770200 	lfmlt	f0, 2, [r7], #-0
    6974:	05000000 	streq	r0, [r0, #-0]
    6978:	00279006 	eoreq	r9, r7, r6
    697c:	bc780200 	lfmlt	f0, 2, [r8], #-0
    6980:	06000000 	streq	r0, [r0], -r0
    6984:	00258d06 	eoreq	r8, r5, r6, lsl #26
    6988:	bc790200 	lfmlt	f0, 2, [r9], #-0
    698c:	07000000 	streq	r0, [r0, -r0]
    6990:	002ab306 	eoreq	fp, sl, r6, lsl #6
    6994:	bc7a0200 	lfmlt	f0, 2, [sl], #-0
    6998:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    699c:	23060400 	movwcs	r0, #25600	; 0x6400
    69a0:	7c020000 	stcvc	0, cr0, [r2], {-0}
    69a4:	00000191 	muleq	r0, r1, r1
    69a8:	7f020905 	svcvc	0x00020905
    69ac:	0000027a 	andeq	r0, r0, sl, ror r2
    69b0:	0029a806 	eoreq	sl, r9, r6, lsl #16
    69b4:	bc810200 	sfmlt	f0, 4, [r1], {0}
    69b8:	00000000 	andeq	r0, r0, r0
    69bc:	00242b06 	eoreq	r2, r4, r6, lsl #22
    69c0:	bc820200 	sfmlt	f0, 4, [r2], {0}
    69c4:	01000000 	mrseq	r0, (UNDEF: 0)
    69c8:	00201706 	eoreq	r1, r0, r6, lsl #14
    69cc:	bc830200 	sfmlt	f0, 4, [r3], {0}
    69d0:	02000000 	andeq	r0, r0, #0
    69d4:	00204106 	eoreq	r4, r0, r6, lsl #2
    69d8:	bc840200 	sfmlt	f0, 4, [r4], {0}
    69dc:	03000000 	movweq	r0, #0
    69e0:	00276906 	eoreq	r6, r7, r6, lsl #18
    69e4:	bc850200 	sfmlt	f0, 4, [r5], {0}
    69e8:	04000000 	streq	r0, [r0], #-0
    69ec:	00272106 	eoreq	r2, r7, r6, lsl #2
    69f0:	bc860200 	sfmlt	f0, 4, [r6], {0}
    69f4:	05000000 	streq	r0, [r0, #-0]
    69f8:	001f2906 	andseq	r2, pc, r6, lsl #18
    69fc:	bc870200 	sfmlt	f0, 4, [r7], {0}
    6a00:	06000000 	streq	r0, [r0], -r0
    6a04:	00289506 	eoreq	r9, r8, r6, lsl #10
    6a08:	bc880200 	sfmlt	f0, 4, [r8], {0}
    6a0c:	07000000 	streq	r0, [r0, -r0]
    6a10:	00271606 	eoreq	r1, r7, r6, lsl #12
    6a14:	bc890200 	sfmlt	f0, 4, [r9], {0}
    6a18:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6a1c:	27e40400 	strbcs	r0, [r4, r0, lsl #8]!
    6a20:	8b020000 	blhi	86a28 <mailbuffer+0x4b938>
    6a24:	00000205 	andeq	r0, r0, r5, lsl #4
    6a28:	8e020705 	cdphi	7, 0, cr0, cr2, cr5, {0}
    6a2c:	000002d6 	ldrdeq	r0, [r0], -r6
    6a30:	0029a806 	eoreq	sl, r9, r6, lsl #16
    6a34:	bc900200 	lfmlt	f0, 4, [r0], {0}
    6a38:	00000000 	andeq	r0, r0, r0
    6a3c:	00242b06 	eoreq	r2, r4, r6, lsl #22
    6a40:	bc910200 	lfmlt	f0, 4, [r1], {0}
    6a44:	01000000 	mrseq	r0, (UNDEF: 0)
    6a48:	0026c906 	eoreq	ip, r6, r6, lsl #18
    6a4c:	bc920200 	lfmlt	f0, 4, [r2], {0}
    6a50:	02000000 	andeq	r0, r0, #0
    6a54:	00258d06 	eoreq	r8, r5, r6, lsl #26
    6a58:	bc930200 	lfmlt	f0, 4, [r3], {0}
    6a5c:	03000000 	movweq	r0, #0
    6a60:	00296006 	eoreq	r6, r9, r6
    6a64:	c3940200 	orrsgt	r0, r4, #0, 4
    6a68:	04000000 	streq	r0, [r0], #-0
    6a6c:	00252206 	eoreq	r2, r5, r6, lsl #4
    6a70:	bc950200 	lfmlt	f0, 4, [r5], {0}
    6a74:	06000000 	streq	r0, [r0], -r0
    6a78:	2bda0400 	blcs	ff687a80 <_estack+0xf7677a80>
    6a7c:	97020000 	strls	r0, [r2, -r0]
    6a80:	00000285 	andeq	r0, r0, r5, lsl #5
    6a84:	9c020205 	sfmls	f0, 4, [r2], {5}
    6a88:	00000302 	andeq	r0, r0, r2, lsl #6
    6a8c:	0029a806 	eoreq	sl, r9, r6, lsl #16
    6a90:	bc9e0200 	lfmlt	f0, 4, [lr], {0}
    6a94:	00000000 	andeq	r0, r0, r0
    6a98:	00242b06 	eoreq	r2, r4, r6, lsl #22
    6a9c:	bc9f0200 	lfmlt	f0, 4, [pc], {0}
    6aa0:	01000000 	mrseq	r0, (UNDEF: 0)
    6aa4:	02090800 	andeq	r0, r9, #0, 16
    6aa8:	0003379a 	muleq	r3, sl, r7
    6aac:	3c020900 	stccc	9, cr0, [r2], {-0}
    6ab0:	a1020000 	mrsge	r0, (UNDEF: 2)
    6ab4:	000002e1 	andeq	r0, r0, r1, ror #5
    6ab8:	00279109 	eoreq	r9, r7, r9, lsl #2
    6abc:	faa30200 	blx	fe8c72c4 <_estack+0xf68b72c4>
    6ac0:	09000001 	stmdbeq	r0, {r0}
    6ac4:	00003c4c 	andeq	r3, r0, ip, asr #24
    6ac8:	027aa402 	rsbseq	sl, sl, #33554432	; 0x2000000
    6acc:	84090000 	strhi	r0, [r9], #-0
    6ad0:	02000025 	andeq	r0, r0, #37	; 0x25
    6ad4:	0002d6a5 	andeq	sp, r2, r5, lsr #13
    6ad8:	fc040000 	stc2	0, cr0, [r4], {-0}
    6adc:	02000026 	andeq	r0, r0, #38	; 0x26
    6ae0:	000302a7 	andeq	r0, r3, r7, lsr #5
    6ae4:	24660a00 	strbtcs	r0, [r6], #-2560	; 0xfffff600
    6ae8:	02020000 	andeq	r0, r2, #0
    6aec:	000373a9 	andeq	r7, r3, r9, lsr #7
    6af0:	29a80600 	stmibcs	r8!, {r9, sl}
    6af4:	ab020000 	blge	86afc <mailbuffer+0x4ba0c>
    6af8:	000000bc 	strheq	r0, [r0], -ip
    6afc:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    6b00:	ac020000 	stcge	0, cr0, [r2], {-0}
    6b04:	000000bc 	strheq	r0, [r0], -ip
    6b08:	20740601 	rsbscs	r0, r4, r1, lsl #12
    6b0c:	ad020000 	stcge	0, cr0, [r2, #-0]
    6b10:	00000373 	andeq	r0, r0, r3, ror r3
    6b14:	c30b0002 	movwgt	r0, #45058	; 0xb002
    6b18:	82000000 	andhi	r0, r0, #0
    6b1c:	0c000003 	stceq	0, cr0, [r0], {3}
    6b20:	00000382 	andeq	r0, r0, r2, lsl #7
    6b24:	07040700 	streq	r0, [r4, -r0, lsl #14]
    6b28:	000001d4 	ldrdeq	r0, [r0], -r4
    6b2c:	00246604 	eoreq	r6, r4, r4, lsl #12
    6b30:	42af0200 	adcmi	r0, pc, #0, 4
    6b34:	0d000003 	stceq	0, cr0, [r0, #-12]
    6b38:	03003875 	movweq	r3, #2165	; 0x875
    6b3c:	0000bc17 	andeq	fp, r0, r7, lsl ip
    6b40:	33750d00 	cmncc	r5, #0, 26
    6b44:	19030032 	stmdbne	r3, {r1, r4, r5}
    6b48:	000003a9 	andeq	r0, r0, r9, lsr #7
    6b4c:	1d070407 	cfstrsne	mvf0, [r7, #-28]	; 0xffffffe4
    6b50:	07000007 	streq	r0, [r0, -r7]
    6b54:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
    6b58:	01070000 	mrseq	r0, (UNDEF: 7)
    6b5c:	00073306 	andeq	r3, r7, r6, lsl #6
    6b60:	05020700 	streq	r0, [r2, #-1792]	; 0xfffff900
    6b64:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    6b68:	6905040e 	stmdbvs	r5, {r1, r2, r3, sl}
    6b6c:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    6b70:	00002930 	andeq	r2, r0, r0, lsr r9
    6b74:	03c52003 	biceq	r2, r5, #3
    6b78:	04070000 	streq	r0, [r7], #-0
    6b7c:	00071807 	andeq	r1, r7, r7, lsl #16
    6b80:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
    6b84:	00000798 	muleq	r0, r8, r7
    6b88:	0025520a 	eoreq	r5, r5, sl, lsl #4
    6b8c:	1e041800 	cdpne	8, 0, cr1, cr4, cr0, {0}
    6b90:	0000043a 	andeq	r0, r0, sl, lsr r4
    6b94:	00265106 	eoreq	r5, r6, r6, lsl #2
    6b98:	3a200400 	bcc	807ba0 <mailbuffer+0x7ccab0>
    6b9c:	00000004 	andeq	r0, r0, r4
    6ba0:	002c0c06 	eoreq	r0, ip, r6, lsl #24
    6ba4:	a9210400 	stmdbge	r1!, {sl}
    6ba8:	04000003 	streq	r0, [r0], #-3
    6bac:	00268a06 	eoreq	r8, r6, r6, lsl #20
    6bb0:	cc220400 	cfstrsgt	mvf0, [r2], #-0
    6bb4:	08000003 	stmdaeq	r0, {r0, r1}
    6bb8:	00216906 	eoreq	r6, r1, r6, lsl #18
    6bbc:	3a230400 	bcc	8c7bc4 <mailbuffer+0x88cad4>
    6bc0:	0c000004 	stceq	0, cr0, [r0], {4}
    6bc4:	00277d06 	eoreq	r7, r7, r6, lsl #26
    6bc8:	3a240400 	bcc	907bd0 <mailbuffer+0x8ccae0>
    6bcc:	10000004 	andne	r0, r0, r4
    6bd0:	002bbb06 	eoreq	fp, fp, r6, lsl #22
    6bd4:	3a250400 	bcc	947bdc <mailbuffer+0x90caec>
    6bd8:	14000004 	strne	r0, [r0], #-4
    6bdc:	40040f00 	andmi	r0, r4, r0, lsl #30
    6be0:	10000004 	andne	r0, r0, r4
    6be4:	00000337 	andeq	r0, r0, r7, lsr r3
    6be8:	00255204 	eoreq	r5, r5, r4, lsl #4
    6bec:	e5270400 	str	r0, [r7, #-1024]!	; 0xfffffc00
    6bf0:	11000003 	tstne	r0, r3
    6bf4:	26310a04 	ldrtcs	r0, [r1], -r4, lsl #20
    6bf8:	050c0000 	streq	r0, [ip, #-0]
    6bfc:	0004831f 	andeq	r8, r4, pc, lsl r3
    6c00:	26510600 	ldrbcs	r0, [r1], -r0, lsl #12
    6c04:	21050000 	mrscs	r0, (UNDEF: 5)
    6c08:	00000483 	andeq	r0, r0, r3, lsl #9
    6c0c:	2bf10600 	blcs	ffc48414 <_estack+0xf7c38414>
    6c10:	22050000 	andcs	r0, r5, #0
    6c14:	000003a9 	andeq	r0, r0, r9, lsr #7
    6c18:	24850604 	strcs	r0, [r5], #1540	; 0x604
    6c1c:	23050000 	movwcs	r0, #20480	; 0x5000
    6c20:	00000483 	andeq	r0, r0, r3, lsl #9
    6c24:	040f0008 	streq	r0, [pc], #-8	; 6c2c <_start-0x13d4>
    6c28:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    6c2c:	00263104 	eoreq	r3, r6, r4, lsl #2
    6c30:	52250500 	eorpl	r0, r5, #0, 10
    6c34:	0a000004 	beq	6c4c <_start-0x13b4>
    6c38:	0000253b 	andeq	r2, r0, fp, lsr r5
    6c3c:	c521060c 	strgt	r0, [r1, #-1548]!	; 0xfffff9f4
    6c40:	06000004 	streq	r0, [r0], -r4
    6c44:	000020e0 	andeq	r2, r0, r0, ror #1
    6c48:	05622306 	strbeq	r2, [r2, #-774]!	; 0xfffffcfa
    6c4c:	06000000 	streq	r0, [r0], -r0
    6c50:	00002c3c 	andeq	r2, r0, ip, lsr ip
    6c54:	05682506 	strbeq	r2, [r8, #-1286]!	; 0xfffffafa
    6c58:	06040000 	streq	r0, [r4], -r0
    6c5c:	00002a95 	muleq	r0, r5, sl
    6c60:	056e2706 	strbeq	r2, [lr, #-1798]!	; 0xfffff8fa
    6c64:	00080000 	andeq	r0, r8, r0
    6c68:	002ad10a 	eoreq	sp, sl, sl, lsl #2
    6c6c:	2d073800 	stccs	8, cr3, [r7, #-0]
    6c70:	00000562 	andeq	r0, r0, r2, ror #10
    6c74:	005a2806 	subseq	r2, sl, r6, lsl #16
    6c78:	8e2f0700 	cdphi	7, 2, cr0, cr15, cr0, {0}
    6c7c:	00000005 	andeq	r0, r0, r5
    6c80:	00244306 	eoreq	r4, r4, r6, lsl #6
    6c84:	99310700 	ldmdbls	r1!, {r8, r9, sl}
    6c88:	04000005 	streq	r0, [r0], #-5
    6c8c:	00207c06 	eoreq	r7, r0, r6, lsl #24
    6c90:	94330700 	ldrtls	r0, [r3], #-1792	; 0xfffff900
    6c94:	08000003 	stmdaeq	r0, {r0, r1}
    6c98:	00243b06 	eoreq	r3, r4, r6, lsl #22
    6c9c:	6c340700 	ldcvs	7, cr0, [r4], #-0
    6ca0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6ca4:	00229306 	eoreq	r9, r2, r6, lsl #6
    6ca8:	00350700 	eorseq	r0, r5, r0, lsl #14
    6cac:	0c000006 	stceq	0, cr0, [r0], {6}
    6cb0:	001f7a06 	andseq	r7, pc, r6, lsl #20
    6cb4:	94370700 	ldrtls	r0, [r7], #-1792	; 0xfffff900
    6cb8:	10000003 	andne	r0, r0, r3
    6cbc:	0026a906 	eoreq	sl, r6, r6, lsl #18
    6cc0:	94380700 	ldrtls	r0, [r8], #-1792	; 0xfffff900
    6cc4:	11000003 	tstne	r0, r3
    6cc8:	00296f06 	eoreq	r6, r9, r6, lsl #30
    6ccc:	063a0700 	ldrteq	r0, [sl], -r0, lsl #14
    6cd0:	14000006 	strne	r0, [r0], #-6
    6cd4:	001fb206 	andseq	fp, pc, r6, lsl #4
    6cd8:	0c3b0700 	ldceq	7, cr0, [fp], #-0
    6cdc:	18000006 	stmdane	r0, {r1, r2}
    6ce0:	0027fc06 	eoreq	pc, r7, r6, lsl #24
    6ce4:	123d0700 	eorsne	r0, sp, #0, 14
    6ce8:	1c000006 	stcne	0, cr0, [r0], {6}
    6cec:	002b3406 	eoreq	r3, fp, r6, lsl #8
    6cf0:	743f0700 	ldrtvc	r0, [pc], #-1792	; 6cf8 <_start-0x1308>
    6cf4:	20000005 	andcs	r0, r0, r5
    6cf8:	00217806 	eoreq	r7, r1, r6, lsl #16
    6cfc:	74400700 	strbvc	r0, [r0], #-1792	; 0xfffff900
    6d00:	2c000005 	stccs	0, cr0, [r0], {5}
    6d04:	c5040f00 	strgt	r0, [r4, #-3840]	; 0xfffff100
    6d08:	0f000004 	svceq	0x00000004
    6d0c:	00038904 	andeq	r8, r3, r4, lsl #18
    6d10:	89040f00 	stmdbhi	r4, {r8, r9, sl, fp}
    6d14:	04000004 	streq	r0, [r0], #-4
    6d18:	0000253b 	andeq	r2, r0, fp, lsr r5
    6d1c:	04942906 	ldreq	r2, [r4], #2310	; 0x906
    6d20:	cc120000 	ldcgt	0, cr0, [r2], {-0}
    6d24:	8e000003 	cdphi	0, 0, cr0, cr0, cr3, {0}
    6d28:	13000005 	movwne	r0, #5
    6d2c:	00000562 	andeq	r0, r0, r2, ror #10
    6d30:	7f040f00 	svcvc	0x00040f00
    6d34:	14000005 	strne	r0, [r0], #-5
    6d38:	00002876 	andeq	r2, r0, r6, ror r8
    6d3c:	0594040f 	ldreq	r0, [r4, #1039]	; 0x40f
    6d40:	800a0000 	andhi	r0, sl, r0
    6d44:	18000025 	stmdane	r0, {r0, r2, r5}
    6d48:	06002808 	streq	r2, [r0], -r8, lsl #16
    6d4c:	e0060000 	and	r0, r6, r0
    6d50:	08000020 	stmdaeq	r0, {r5}
    6d54:	00064f2a 	andeq	r4, r6, sl, lsr #30
    6d58:	e8060000 	stmda	r6, {}	; <UNPREDICTABLE>
    6d5c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    6d60:	0003942b 	andeq	r9, r3, fp, lsr #8
    6d64:	49060400 	stmdbmi	r6, {sl}
    6d68:	08000021 	stmdaeq	r0, {r0, r5}
    6d6c:	0006442c 	andeq	r4, r6, ip, lsr #8
    6d70:	6b060500 	blvs	188178 <mailbuffer+0x14d088>
    6d74:	08000026 	stmdaeq	r0, {r1, r2, r5}
    6d78:	0003cc2d 	andeq	ip, r3, sp, lsr #24
    6d7c:	d4060800 	strle	r0, [r6], #-2048	; 0xfffff800
    6d80:	08000021 	stmdaeq	r0, {r0, r5}
    6d84:	00039e2e 	andeq	r9, r3, lr, lsr #28
    6d88:	57060c00 	strpl	r0, [r6, -r0, lsl #24]
    6d8c:	08000028 	stmdaeq	r0, {r3, r5}
    6d90:	0003a92f 	andeq	sl, r3, pc, lsr #18
    6d94:	d7061000 	strle	r1, [r6, -r0]
    6d98:	08000022 	stmdaeq	r0, {r1, r5}
    6d9c:	00004030 	andeq	r4, r0, r0, lsr r0
    6da0:	0f001400 	svceq	0x00001400
    6da4:	00059f04 	andeq	r9, r5, r4, lsl #30
    6da8:	86040f00 	strhi	r0, [r4], -r0, lsl #30
    6dac:	0f000001 	svceq	0x00000001
    6db0:	0001fa04 	andeq	pc, r1, r4, lsl #20
    6db4:	45040f00 	strmi	r0, [r4, #-3840]	; 0xfffff100
    6db8:	04000004 	streq	r0, [r0], #-4
    6dbc:	00002ad1 	ldrdeq	r2, [r0], -r1
    6dc0:	04c54207 	strbeq	r4, [r5], #519	; 0x207
    6dc4:	01020000 	mrseq	r0, (UNDEF: 2)
    6dc8:	06442008 	strbeq	r2, [r4], -r8
    6dcc:	9f030000 	svcls	0x00030000
    6dd0:	0000002a 	andeq	r0, r0, sl, lsr #32
    6dd4:	001fc003 	andseq	ip, pc, r3
    6dd8:	2e030100 	adfcss	f0, f3, f0
    6ddc:	02000022 	andeq	r0, r0, #34	; 0x22
    6de0:	0025c203 	eoreq	ip, r5, r3, lsl #4
    6de4:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    6de8:	00002afd 	strdeq	r2, [r0], -sp
    6dec:	06232608 	strteq	r2, [r3], -r8, lsl #12
    6df0:	040f0000 	streq	r0, [pc], #-0	; 6df8 <_start-0x1208>
    6df4:	00000618 	andeq	r0, r0, r8, lsl r6
    6df8:	00258004 	eoreq	r8, r5, r4
    6dfc:	9f320800 	svcls	0x00320800
    6e00:	04000005 	streq	r0, [r0], #-5
    6e04:	00002693 	muleq	r0, r3, r6
    6e08:	066b2109 	strbteq	r2, [fp], -r9, lsl #2
    6e0c:	80150000 	andshi	r0, r5, r0
    6e10:	13000006 	movwne	r0, #6
    6e14:	00000680 	andeq	r0, r0, r0, lsl #13
    6e18:	00045013 	andeq	r5, r4, r3, lsl r0
    6e1c:	04501300 	ldrbeq	r1, [r0], #-768	; 0xfffffd00
    6e20:	0f000000 	svceq	0x00000000
    6e24:	00068604 	andeq	r8, r6, r4, lsl #12
    6e28:	29070a00 	stmdbcs	r7, {r9, fp}
    6e2c:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    6e30:	0006ff23 	andeq	pc, r6, r3, lsr #30
    6e34:	297d0600 	ldmdbcs	sp!, {r9, sl}^
    6e38:	25090000 	strcs	r0, [r9, #-0]
    6e3c:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6e40:	28440600 	stmdacs	r4, {r9, sl}^
    6e44:	27090000 	strcs	r0, [r9, -r0]
    6e48:	00000705 	andeq	r0, r0, r5, lsl #14
    6e4c:	26510604 	ldrbcs	r0, [r1], -r4, lsl #12
    6e50:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    6e54:	00000450 	andeq	r0, r0, r0, asr r4
    6e58:	2c0c0608 	stccs	6, cr0, [ip], {8}
    6e5c:	29090000 	stmdbcs	r9, {}	; <UNPREDICTABLE>
    6e60:	0000039e 	muleq	r0, lr, r3
    6e64:	213f060c 	teqcs	pc, ip, lsl #12
    6e68:	2b090000 	blcs	246e70 <mailbuffer+0x20bd80>
    6e6c:	000003c5 	andeq	r0, r0, r5, asr #7
    6e70:	29eb0610 	stmibcs	fp!, {r4, r9, sl}^
    6e74:	2c090000 	stccs	0, cr0, [r9], {-0}
    6e78:	0000039e 	muleq	r0, lr, r3
    6e7c:	23ba0614 			; <UNDEFINED> instruction: 0x23ba0614
    6e80:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    6e84:	0000070b 	andeq	r0, r0, fp, lsl #14
    6e88:	23590618 	cmpcs	r9, #24, 12	; 0x1800000
    6e8c:	2f090000 	svccs	0x00090000
    6e90:	00000450 	andeq	r0, r0, r0, asr r4
    6e94:	2b13061c 	blcs	4c870c <mailbuffer+0x48d61c>
    6e98:	30090000 	andcc	r0, r9, r0
    6e9c:	00000450 	andeq	r0, r0, r0, asr r4
    6ea0:	040f0020 	streq	r0, [pc], #-32	; 6ea8 <_start-0x1158>
    6ea4:	00000655 	andeq	r0, r0, r5, asr r6
    6ea8:	00ca040f 	sbceq	r0, sl, pc, lsl #8
    6eac:	040f0000 	streq	r0, [pc], #-0	; 6eb4 <_start-0x114c>
    6eb0:	00000660 	andeq	r0, r0, r0, ror #12
    6eb4:	00290704 	eoreq	r0, r9, r4, lsl #14
    6eb8:	86320900 	ldrthi	r0, [r2], -r0, lsl #18
    6ebc:	0a000006 	beq	6edc <_start-0x1124>
    6ec0:	0000250d 	andeq	r2, r0, sp, lsl #10
    6ec4:	711d0a18 	tstvc	sp, r8, lsl sl
    6ec8:	06000007 	streq	r0, [r0], -r7
    6ecc:	000039ce 	andeq	r3, r0, lr, asr #19
    6ed0:	07821f0a 	streq	r1, [r2, sl, lsl #30]
    6ed4:	06000000 	streq	r0, [r0], -r0
    6ed8:	00005086 	andeq	r5, r0, r6, lsl #1
    6edc:	0782210a 	streq	r2, [r2, sl, lsl #2]
    6ee0:	06040000 	streq	r0, [r4], -r0
    6ee4:	00005047 	andeq	r5, r0, r7, asr #32
    6ee8:	0797220a 	ldreq	r2, [r7, sl, lsl #4]
    6eec:	06080000 	streq	r0, [r8], -r0
    6ef0:	000036f4 	strdeq	r3, [r0], -r4
    6ef4:	07ad230a 	streq	r2, [sp, sl, lsl #6]!
    6ef8:	060c0000 	streq	r0, [ip], -r0
    6efc:	00004fe9 	andeq	r4, r0, r9, ror #31
    6f00:	0782250a 	streq	r2, [r2, sl, lsl #10]
    6f04:	06100000 	ldreq	r0, [r0], -r0
    6f08:	00004fc0 	andeq	r4, r0, r0, asr #31
    6f0c:	0797270a 	ldreq	r2, [r7, sl, lsl #14]
    6f10:	00140000 	andseq	r0, r4, r0
    6f14:	00077c15 	andeq	r7, r7, r5, lsl ip
    6f18:	077c1300 	ldrbeq	r1, [ip, -r0, lsl #6]!
    6f1c:	0f000000 	svceq	0x00000000
    6f20:	00071c04 	andeq	r1, r7, r4, lsl #24
    6f24:	71040f00 	tstvc	r4, r0, lsl #30
    6f28:	12000007 	andne	r0, r0, #7
    6f2c:	000003cc 	andeq	r0, r0, ip, asr #7
    6f30:	00000797 	muleq	r0, r7, r7
    6f34:	00077c13 	andeq	r7, r7, r3, lsl ip
    6f38:	040f0000 	streq	r0, [pc], #-0	; 6f40 <_start-0x10c0>
    6f3c:	00000788 	andeq	r0, r0, r8, lsl #15
    6f40:	0007ad15 	andeq	sl, r7, r5, lsl sp
    6f44:	077c1300 	ldrbeq	r1, [ip, -r0, lsl #6]!
    6f48:	9e130000 	cdpls	0, 1, cr0, cr3, cr0, {0}
    6f4c:	00000003 	andeq	r0, r0, r3
    6f50:	079d040f 	ldreq	r0, [sp, pc, lsl #8]
    6f54:	0d040000 	stceq	0, cr0, [r4, #-0]
    6f58:	0a000025 	beq	6ff4 <_start-0x100c>
    6f5c:	00071c29 	andeq	r1, r7, r9, lsr #24
    6f60:	22a00a00 	adccs	r0, r0, #0, 20
    6f64:	0b540000 	bleq	1506f6c <mailbuffer+0x14cbe7c>
    6f68:	0008c722 	andeq	ip, r8, r2, lsr #14
    6f6c:	2a290600 	bcs	a48774 <mailbuffer+0xa0d684>
    6f70:	240b0000 	strcs	r0, [fp], #-0
    6f74:	000003a9 	andeq	r0, r0, r9, lsr #7
    6f78:	262a0600 	strtcs	r0, [sl], -r0, lsl #12
    6f7c:	250b0000 	strcs	r0, [fp, #-0]
    6f80:	000008c7 	andeq	r0, r0, r7, asr #17
    6f84:	21bb0604 			; <UNDEFINED> instruction: 0x21bb0604
    6f88:	260b0000 	strcs	r0, [fp], -r0
    6f8c:	000003cc 	andeq	r0, r0, ip, asr #7
    6f90:	22670608 	rsbcs	r0, r7, #8, 12	; 0x800000
    6f94:	270b0000 	strcs	r0, [fp, -r0]
    6f98:	000003cc 	andeq	r0, r0, ip, asr #7
    6f9c:	2abd060c 	bcs	fef487d4 <_estack+0xf6f387d4>
    6fa0:	290b0000 	stmdbcs	fp, {}	; <UNPREDICTABLE>
    6fa4:	000003cc 	andeq	r0, r0, ip, asr #7
    6fa8:	21170610 	tstcs	r7, r0, lsl r6
    6fac:	2a0b0000 	bcs	2c6fb4 <mailbuffer+0x28bec4>
    6fb0:	000003cc 	andeq	r0, r0, ip, asr #7
    6fb4:	20e00614 	rsccs	r0, r0, r4, lsl r6
    6fb8:	2c0b0000 	stccs	0, cr0, [fp], {-0}
    6fbc:	0000064f 	andeq	r0, r0, pc, asr #12
    6fc0:	297d0618 	ldmdbcs	sp!, {r3, r4, r9, sl}^
    6fc4:	2d0b0000 	stccs	0, cr0, [fp, #-0]
    6fc8:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6fcc:	243b061c 	ldrtcs	r0, [fp], #-1564	; 0xfffff9e4
    6fd0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    6fd4:	0000006c 	andeq	r0, r0, ip, rrx
    6fd8:	21d40620 	bicscs	r0, r4, r0, lsr #12
    6fdc:	2f0b0000 	svccs	0x000b0000
    6fe0:	0000039e 	muleq	r0, lr, r3
    6fe4:	239c0624 	orrscs	r0, ip, #36, 12	; 0x2400000
    6fe8:	310b0000 	mrscc	r0, (UNDEF: 11)
    6fec:	0000039e 	muleq	r0, lr, r3
    6ff0:	21b00628 	lsrscs	r0, r8, #12
    6ff4:	320b0000 	andcc	r0, fp, #0
    6ff8:	000003a9 	andeq	r0, r0, r9, lsr #7
    6ffc:	2095062c 	addscs	r0, r5, ip, lsr #12
    7000:	330b0000 	movwcc	r0, #45056	; 0xb000
    7004:	0000039e 	muleq	r0, lr, r3
    7008:	20ea0630 	rsccs	r0, sl, r0, lsr r6
    700c:	340b0000 	strcc	r0, [fp], #-0
    7010:	000003a9 	andeq	r0, r0, r9, lsr #7
    7014:	26390634 			; <UNDEFINED> instruction: 0x26390634
    7018:	350b0000 	strcc	r0, [fp, #-0]
    701c:	0000039e 	muleq	r0, lr, r3
    7020:	288c0638 	stmcs	ip, {r3, r4, r5, r9, sl}
    7024:	370b0000 	strcc	r0, [fp, -r0]
    7028:	000003a9 	andeq	r0, r0, r9, lsr #7
    702c:	2731063c 			; <UNDEFINED> instruction: 0x2731063c
    7030:	380b0000 	stmdacc	fp, {}	; <UNPREDICTABLE>
    7034:	000003a9 	andeq	r0, r0, r9, lsr #7
    7038:	282f0640 	stmdacs	pc!, {r6, r9, sl}	; <UNPREDICTABLE>
    703c:	390b0000 	stmdbcc	fp, {}	; <UNPREDICTABLE>
    7040:	0000039e 	muleq	r0, lr, r3
    7044:	2adc0644 	bcs	ff70895c <_estack+0xf76f895c>
    7048:	3b0b0000 	blcc	2c7050 <mailbuffer+0x28bf60>
    704c:	000008cd 	andeq	r0, r0, sp, asr #17
    7050:	24a70648 	strtcs	r0, [r7], #1608	; 0x648
    7054:	3c0b0000 	stccc	0, cr0, [fp], {-0}
    7058:	00000450 	andeq	r0, r0, r0, asr r4
    705c:	1fa0064c 	svcne	0x00a0064c
    7060:	3e0b0000 	cdpcc	0, 0, cr0, cr11, cr0, {0}
    7064:	000008d3 	ldrdeq	r0, [r0], -r3
    7068:	040f0050 	streq	r0, [pc], #-80	; 7070 <_start-0xf90>
    706c:	00000711 	andeq	r0, r0, r1, lsl r7
    7070:	039e040f 	orrseq	r0, lr, #251658240	; 0xf000000
    7074:	040f0000 	streq	r0, [pc], #-0	; 707c <_start-0xf84>
    7078:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
    707c:	0022a004 	eoreq	sl, r2, r4
    7080:	be400b00 	vmlalt.f64	d16, d0, d0
    7084:	0a000007 	beq	70a8 <_start-0xf58>
    7088:	00003725 	andeq	r3, r0, r5, lsr #14
    708c:	211a0c24 	tstcs	sl, r4, lsr #24
    7090:	06000009 	streq	r0, [r0], -r9
    7094:	000039cd 	andeq	r3, r0, sp, asr #19
    7098:	07b31c0c 	ldreq	r1, [r3, ip, lsl #24]!
    709c:	06000000 	streq	r0, [r0], -r0
    70a0:	0000288c 	andeq	r2, r0, ip, lsl #17
    70a4:	03a91e0c 			; <UNDEFINED> instruction: 0x03a91e0c
    70a8:	06180000 	ldreq	r0, [r8], -r0
    70ac:	000036a4 	andeq	r3, r0, r4, lsr #13
    70b0:	03a91f0c 			; <UNDEFINED> instruction: 0x03a91f0c
    70b4:	061c0000 	ldreq	r0, [ip], -r0
    70b8:	00003835 	andeq	r3, r0, r5, lsr r8
    70bc:	03a9210c 			; <UNDEFINED> instruction: 0x03a9210c
    70c0:	00200000 	eoreq	r0, r0, r0
    70c4:	00372504 	eorseq	r2, r7, r4, lsl #10
    70c8:	e4230c00 	strt	r0, [r3], #-3072	; 0xfffff400
    70cc:	0a000008 	beq	70f4 <_start-0xf0c>
    70d0:	0000356c 	andeq	r3, r0, ip, ror #10
    70d4:	5d1a0d20 	ldcpl	13, cr0, [sl, #-128]	; 0xffffff80
    70d8:	06000009 	streq	r0, [r0], -r9
    70dc:	000039cd 	andeq	r3, r0, sp, asr #19
    70e0:	07b31c0d 	ldreq	r1, [r3, sp, lsl #24]!
    70e4:	06000000 	streq	r0, [r0], -r0
    70e8:	0000288c 	andeq	r2, r0, ip, lsl #17
    70ec:	03a91e0d 			; <UNDEFINED> instruction: 0x03a91e0d
    70f0:	06180000 	ldreq	r0, [r8], -r0
    70f4:	000036a4 	andeq	r3, r0, r4, lsr #13
    70f8:	03a91f0d 			; <UNDEFINED> instruction: 0x03a91f0d
    70fc:	001c0000 	andseq	r0, ip, r0
    7100:	00356c04 	eorseq	r6, r5, r4, lsl #24
    7104:	2c210d00 	stccs	13, cr0, [r1], #-0
    7108:	0a000009 	beq	7134 <_start-0xecc>
    710c:	000038b2 			; <UNDEFINED> instruction: 0x000038b2
    7110:	991a0e20 	ldmdbls	sl, {r5, r9, sl, fp}
    7114:	06000009 	streq	r0, [r0], -r9
    7118:	000039cd 	andeq	r3, r0, sp, asr #19
    711c:	07b31c0e 	ldreq	r1, [r3, lr, lsl #24]!
    7120:	06000000 	streq	r0, [r0], -r0
    7124:	00003503 	andeq	r3, r0, r3, lsl #10
    7128:	03cc1e0e 	biceq	r1, ip, #14, 28	; 0xe0
    712c:	06180000 	ldreq	r0, [r8], -r0
    7130:	00003835 	andeq	r3, r0, r5, lsr r8
    7134:	03a91f0e 			; <UNDEFINED> instruction: 0x03a91f0e
    7138:	001c0000 	andseq	r0, ip, r0
    713c:	0038b204 	eorseq	fp, r8, r4, lsl #4
    7140:	68210e00 	stmdavs	r1!, {r9, sl, fp}
    7144:	16000009 	strne	r0, [r0], -r9
    7148:	000022a1 	andeq	r2, r0, r1, lsr #5
    714c:	ca281c01 	bgt	a0e158 <mailbuffer+0x9d3068>
    7150:	057c0001 	ldrbeq	r0, [ip, #-1]!
    7154:	9c010000 	stcls	0, cr0, [r1], {-0}
    7158:	00000a00 	andeq	r0, r0, r0, lsl #20
    715c:	0043af17 	subeq	sl, r3, r7, lsl pc
    7160:	001c0100 	andseq	r0, ip, r0, lsl #2
    7164:	0200000a 	andeq	r0, r0, #10
    7168:	2b176c91 	blcs	5e23b4 <mailbuffer+0x5a72c4>
    716c:	0100002a 	tsteq	r0, sl, lsr #32
    7170:	0003a91c 	andeq	sl, r3, ip, lsl r9
    7174:	68910200 	ldmvs	r1, {r9}
    7178:	00262c17 	eoreq	r2, r6, r7, lsl ip
    717c:	c71c0100 	ldrgt	r0, [ip, -r0, lsl #2]
    7180:	02000008 	andeq	r0, r0, #8
    7184:	62186491 	andsvs	r6, r8, #-1862270976	; 0x91000000
    7188:	01006e49 	tsteq	r0, r9, asr #28
    718c:	0003cc1c 	andeq	ip, r3, ip, lsl ip
    7190:	60910200 	addsvs	r0, r1, r0, lsl #4
    7194:	00226917 	eoreq	r6, r2, r7, lsl r9
    7198:	cc1c0100 	ldfgts	f0, [ip], {-0}
    719c:	02000003 	andeq	r0, r0, #3
    71a0:	0f000091 	svceq	0x00000091
    71a4:	0008d904 	andeq	sp, r8, r4, lsl #18
    71a8:	391c1600 	ldmdbcc	ip, {r9, sl, ip}
    71ac:	86010000 	strhi	r0, [r1], -r0
    71b0:	0001cfa4 	andeq	ip, r1, r4, lsr #31
    71b4:	0000010c 	andeq	r0, r0, ip, lsl #2
    71b8:	0a2a9c01 	beq	aae1c4 <mailbuffer+0xa730d4>
    71bc:	af170000 	svcge	0x00170000
    71c0:	01000043 	tsteq	r0, r3, asr #32
    71c4:	000a0086 	andeq	r0, sl, r6, lsl #1
    71c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    71cc:	36de1600 	ldrbcc	r1, [lr], r0, lsl #12
    71d0:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    71d4:	0001d0b0 	strheq	sp, [r1], -r0
    71d8:	00000240 	andeq	r0, r0, r0, asr #4
    71dc:	0a949c01 	beq	fe52e1e8 <_estack+0xf651e1e8>
    71e0:	af170000 	svcge	0x00170000
    71e4:	01000043 	tsteq	r0, r3, asr #32
    71e8:	000a009e 	muleq	sl, lr, r0
    71ec:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    71f0:	00283c17 	eoreq	r3, r8, r7, lsl ip
    71f4:	9e9e0100 	fmllse	f0, f6, f0
    71f8:	02000003 	andeq	r0, r0, #3
    71fc:	ad176091 	ldcge	0, cr6, [r7, #-580]	; 0xfffffdbc
    7200:	01000036 	tsteq	r0, r6, lsr r0
    7204:	00039e9e 	muleq	r3, lr, lr
    7208:	5c910200 	lfmpl	f0, 4, [r1], {0}
    720c:	0038a717 	eorseq	sl, r8, r7, lsl r7
    7210:	9e9e0100 	fmllse	f0, f6, f0
    7214:	02000003 	andeq	r0, r0, #3
    7218:	85195891 	ldrhi	r5, [r9, #-2193]	; 0xfffff76f
    721c:	01000037 	tsteq	r0, r7, lsr r0
    7220:	00039eb5 			; <UNDEFINED> instruction: 0x00039eb5
    7224:	68910200 	ldmvs	r1, {r9}
    7228:	00364319 	eorseq	r4, r6, r9, lsl r3
    722c:	9eb60100 	frdlss	f0, f6, f0
    7230:	02000003 	andeq	r0, r0, #3
    7234:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
    7238:	00003955 	andeq	r3, r0, r5, asr r9
    723c:	d2f0d401 	rscsle	sp, r0, #16777216	; 0x1000000
    7240:	00a00001 	adceq	r0, r0, r1
    7244:	9c010000 	stcls	0, cr0, [r1], {-0}
    7248:	00000ac6 	andeq	r0, r0, r6, asr #21
    724c:	0043af17 	subeq	sl, r3, r7, lsl pc
    7250:	00d40100 	sbcseq	r0, r4, r0, lsl #2
    7254:	0200000a 	andeq	r0, r0, #10
    7258:	03176c91 	tsteq	r7, #37120	; 0x9100
    725c:	01000038 	tsteq	r0, r8, lsr r0
    7260:	0003ccd4 	ldrdeq	ip, [r3], -r4
    7264:	68910200 	ldmvs	r1, {r9}
    7268:	37421600 	strbcc	r1, [r2, -r0, lsl #12]
    726c:	dc010000 	stcle	0, cr0, [r1], {-0}
    7270:	0001d390 	muleq	r1, r0, r3
    7274:	00000078 	andeq	r0, r0, r8, ror r0
    7278:	0af89c01 	beq	ffe2e284 <_estack+0xf7e1e284>
    727c:	af170000 	svcge	0x00170000
    7280:	01000043 	tsteq	r0, r3, asr #32
    7284:	000a00dc 	ldrdeq	r0, [sl], -ip
    7288:	6c910200 	lfmvs	f0, 4, [r1], {0}
    728c:	00288e17 	eoreq	r8, r8, r7, lsl lr
    7290:	a9dc0100 	ldmibge	ip, {r8}^
    7294:	02000003 	andeq	r0, r0, #3
    7298:	1a006891 	bne	214e4 <USBRequest+0xe0>
    729c:	00003a2e 	andeq	r3, r0, lr, lsr #20
    72a0:	03a9e201 			; <UNDEFINED> instruction: 0x03a9e201
    72a4:	d4080000 	strle	r0, [r8], #-0
    72a8:	00780001 	rsbseq	r0, r8, r1
    72ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    72b0:	00000b20 	andeq	r0, r0, r0, lsr #22
    72b4:	0043af17 	subeq	sl, r3, r7, lsl pc
    72b8:	00e20100 	rsceq	r0, r2, r0, lsl #2
    72bc:	0200000a 	andeq	r0, r0, #10
    72c0:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
    72c4:	000035aa 	andeq	r3, r0, sl, lsr #11
    72c8:	d480e801 	strle	lr, [r0], #2049	; 0x801
    72cc:	00780001 	rsbseq	r0, r8, r1
    72d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    72d4:	00000b52 	andeq	r0, r0, r2, asr fp
    72d8:	0043af17 	subeq	sl, r3, r7, lsl pc
    72dc:	00e80100 	rsceq	r0, r8, r0, lsl #2
    72e0:	0200000a 	andeq	r0, r0, #10
    72e4:	33176c91 	tstcc	r7, #37120	; 0x9100
    72e8:	01000027 	tsteq	r0, r7, lsr #32
    72ec:	0003a9e8 	andeq	sl, r3, r8, ror #19
    72f0:	68910200 	ldmvs	r1, {r9}
    72f4:	38681a00 	stmdacc	r8!, {r9, fp, ip}^
    72f8:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    72fc:	000003a9 	andeq	r0, r0, r9, lsr #7
    7300:	0001d4f8 	strdeq	sp, [r1], -r8
    7304:	00000078 	andeq	r0, r0, r8, ror r0
    7308:	0b7a9c01 	bleq	1eae314 <mailbuffer+0x1e73224>
    730c:	af170000 	svcge	0x00170000
    7310:	01000043 	tsteq	r0, r3, asr #32
    7314:	000a00ee 	andeq	r0, sl, lr, ror #1
    7318:	6c910200 	lfmvs	f0, 4, [r1], {0}
    731c:	39a71a00 	stmibcc	r7!, {r9, fp, ip}
    7320:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    7324:	000003cc 	andeq	r0, r0, ip, asr #7
    7328:	0001d570 	andeq	sp, r1, r0, ror r5
    732c:	00000050 	andeq	r0, r0, r0, asr r0
    7330:	0ba29c01 	bleq	fe8ae33c <_estack+0xf689e33c>
    7334:	af170000 	svcge	0x00170000
    7338:	01000043 	tsteq	r0, r3, asr #32
    733c:	000a00f4 	strdeq	r0, [sl], -r4
    7340:	6c910200 	lfmvs	f0, 4, [r1], {0}
    7344:	38ce1a00 	stmiacc	lr, {r9, fp, ip}^
    7348:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    734c:	000003a9 	andeq	r0, r0, r9, lsr #7
    7350:	0001d5c0 	andeq	sp, r1, r0, asr #11
    7354:	00000078 	andeq	r0, r0, r8, ror r0
    7358:	0bca9c01 	bleq	ff2ae364 <_estack+0xf729e364>
    735c:	af170000 	svcge	0x00170000
    7360:	01000043 	tsteq	r0, r3, asr #32
    7364:	000a00f9 	strdeq	r0, [sl], -r9
    7368:	6c910200 	lfmvs	f0, 4, [r1], {0}
    736c:	39341a00 	ldmdbcc	r4!, {r9, fp, ip}
    7370:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    7374:	000003cc 	andeq	r0, r0, ip, asr #7
    7378:	0001d638 	andeq	sp, r1, r8, lsr r6
    737c:	000000d4 	ldrdeq	r0, [r0], -r4
    7380:	0c019c01 	stceq	12, cr9, [r1], {1}
    7384:	af170000 	svcge	0x00170000
    7388:	01000043 	tsteq	r0, r3, asr #32
    738c:	000a00ff 	strdeq	r0, [sl], -pc	; <UNPREDICTABLE>
    7390:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    7394:	00214b1b 	eoreq	r4, r1, fp, lsl fp
    7398:	01030100 	mrseq	r0, (UNDEF: 19)
    739c:	00000644 	andeq	r0, r0, r4, asr #12
    73a0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    73a4:	0039e31c 	eorseq	lr, r9, ip, lsl r3
    73a8:	01090100 	mrseq	r0, (UNDEF: 25)
    73ac:	00000394 	muleq	r0, r4, r3
    73b0:	0001d70c 	andeq	sp, r1, ip, lsl #14
    73b4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    73b8:	0c2b9c01 	stceq	12, cr9, [fp], #-4
    73bc:	af1d0000 	svcge	0x001d0000
    73c0:	01000043 	tsteq	r0, r3, asr #32
    73c4:	0a000109 	beq	77f0 <_start-0x810>
    73c8:	91020000 	mrsls	r0, (UNDEF: 2)
    73cc:	421c006c 	andsmi	r0, ip, #108	; 0x6c
    73d0:	01000038 	tsteq	r0, r8, lsr r0
    73d4:	03940110 	orrseq	r0, r4, #16, 2
    73d8:	d7bc0000 	ldrle	r0, [ip, r0]!
    73dc:	01140001 	tsteq	r4, r1
    73e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    73e4:	00000c64 	andeq	r0, r0, r4, ror #24
    73e8:	0043af1d 	subeq	sl, r3, sp, lsl pc
    73ec:	01100100 	tsteq	r0, r0, lsl #2
    73f0:	00000a00 	andeq	r0, r0, r0, lsl #20
    73f4:	1b649102 	blne	192b804 <mailbuffer+0x18f0714>
    73f8:	00003511 	andeq	r3, r0, r1, lsl r5
    73fc:	a9011501 	stmdbge	r1, {r0, r8, sl, ip}
    7400:	02000003 	andeq	r0, r0, #3
    7404:	1c006c91 	stcne	12, cr6, [r0], {145}	; 0x91
    7408:	0000361b 	andeq	r3, r0, fp, lsl r6
    740c:	94012d01 	strls	r2, [r1], #-3329	; 0xfffff2ff
    7410:	d0000003 	andle	r0, r0, r3
    7414:	b00001d8 	ldrdlt	r0, [r0], -r8
    7418:	01000000 	mrseq	r0, (UNDEF: 0)
    741c:	000c8e9c 	muleq	ip, ip, lr
    7420:	43af1d00 			; <UNDEFINED> instruction: 0x43af1d00
    7424:	2d010000 	stccs	0, cr0, [r1, #-0]
    7428:	000a0001 	andeq	r0, sl, r1
    742c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    7430:	367d1c00 	ldrbtcc	r1, [sp], -r0, lsl #24
    7434:	34010000 	strcc	r0, [r1], #-0
    7438:	00039e01 	andeq	r9, r3, r1, lsl #28
    743c:	01d98000 	bicseq	r8, r9, r0
    7440:	00007800 	andeq	r7, r0, r0, lsl #16
    7444:	b89c0100 	ldmlt	ip, {r8}
    7448:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    744c:	000043af 	andeq	r4, r0, pc, lsr #7
    7450:	00013401 	andeq	r3, r1, r1, lsl #8
    7454:	0200000a 	andeq	r0, r0, #10
    7458:	1c006c91 	stcne	12, cr6, [r0], {145}	; 0x91
    745c:	00003798 	muleq	r0, r8, r7
    7460:	6c013a01 	stcvs	10, cr3, [r1], {1}
    7464:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    7468:	780001d9 	stmdavc	r0, {r0, r3, r4, r6, r7, r8}
    746c:	01000000 	mrseq	r0, (UNDEF: 0)
    7470:	000ce29c 	muleq	ip, ip, r2
    7474:	43af1d00 			; <UNDEFINED> instruction: 0x43af1d00
    7478:	3a010000 	bcc	47480 <mailbuffer+0xc390>
    747c:	000a0001 	andeq	r0, sl, r1
    7480:	6c910200 	lfmvs	f0, 4, [r1], {0}
    7484:	37081c00 	strcc	r1, [r8, -r0, lsl #24]
    7488:	40010000 	andmi	r0, r1, r0
    748c:	00039401 	andeq	r9, r3, r1, lsl #8
    7490:	01da7000 	bicseq	r7, sl, r0
    7494:	00011c00 	andeq	r1, r1, r0, lsl #24
    7498:	1b9c0100 	blne	fe7078a0 <_estack+0xf66f78a0>
    749c:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    74a0:	000043af 	andeq	r4, r0, pc, lsr #7
    74a4:	00014001 	andeq	r4, r1, r1
    74a8:	0200000a 	andeq	r0, r0, #10
    74ac:	771b6491 			; <UNDEFINED> instruction: 0x771b6491
    74b0:	01000036 	tsteq	r0, r6, lsr r0
    74b4:	03940145 	orrseq	r0, r4, #1073741841	; 0x40000011
    74b8:	91020000 	mrsls	r0, (UNDEF: 2)
    74bc:	ba1c006f 	blt	707680 <mailbuffer+0x6cc590>
    74c0:	01000036 	tsteq	r0, r6, lsr r0
    74c4:	03cc015d 	biceq	r0, ip, #1073741847	; 0x40000017
    74c8:	db8c0000 	blle	fe3074d0 <_estack+0xf62f74d0>
    74cc:	00780001 	rsbseq	r0, r8, r1
    74d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    74d4:	00000d45 	andeq	r0, r0, r5, asr #26
    74d8:	0043af1d 	subeq	sl, r3, sp, lsl pc
    74dc:	015d0100 	cmpeq	sp, r0, lsl #2
    74e0:	00000a00 	andeq	r0, r0, r0, lsl #20
    74e4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    74e8:	003a0a1c 	eorseq	r0, sl, ip, lsl sl
    74ec:	01630100 	cmneq	r3, r0, lsl #2
    74f0:	000003cc 	andeq	r0, r0, ip, asr #7
    74f4:	0001dc04 	andeq	sp, r1, r4, lsl #24
    74f8:	00000078 	andeq	r0, r0, r8, ror r0
    74fc:	0d6f9c01 	stcleq	12, cr9, [pc, #-4]!	; 7500 <_start-0xb00>
    7500:	af1d0000 	svcge	0x001d0000
    7504:	01000043 	tsteq	r0, r3, asr #32
    7508:	0a000163 	beq	7a9c <_start-0x564>
    750c:	91020000 	mrsls	r0, (UNDEF: 2)
    7510:	1f1c006c 	svcne	0x001c006c
    7514:	01000035 	tsteq	r0, r5, lsr r0
    7518:	039e0169 	orrseq	r0, lr, #1073741850	; 0x4000001a
    751c:	dc7c0000 	ldclle	0, cr0, [ip], #-0
    7520:	00a40001 	adceq	r0, r4, r1
    7524:	9c010000 	stcls	0, cr0, [r1], {-0}
    7528:	00000d99 	muleq	r0, r9, sp
    752c:	0043af1d 	subeq	sl, r3, sp, lsl pc
    7530:	01690100 	cmneq	r9, r0, lsl #2
    7534:	00000a00 	andeq	r0, r0, r0, lsl #20
    7538:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    753c:	0035431c 	eorseq	r4, r5, ip, lsl r3
    7540:	01710100 	cmneq	r1, r0, lsl #2
    7544:	0000039e 	muleq	r0, lr, r3
    7548:	0001dd20 	andeq	sp, r1, r0, lsr #26
    754c:	00000078 	andeq	r0, r0, r8, ror r0
    7550:	0dc39c01 	stcleq	12, cr9, [r3, #4]
    7554:	af1d0000 	svcge	0x001d0000
    7558:	01000043 	tsteq	r0, r3, asr #32
    755c:	0a000171 	beq	7b28 <_start-0x4d8>
    7560:	91020000 	mrsls	r0, (UNDEF: 2)
    7564:	f01c006c 			; <UNDEFINED> instruction: 0xf01c006c
    7568:	01000035 	tsteq	r0, r5, lsr r0
    756c:	039e0177 	orrseq	r0, lr, #-1073741795	; 0xc000001d
    7570:	dd980000 	ldcle	0, cr0, [r8]
    7574:	00780001 	rsbseq	r0, r8, r1
    7578:	9c010000 	stcls	0, cr0, [r1], {-0}
    757c:	00000ded 	andeq	r0, r0, sp, ror #27
    7580:	0043af1d 	subeq	sl, r3, sp, lsl pc
    7584:	01770100 	cmneq	r7, r0, lsl #2
    7588:	00000a00 	andeq	r0, r0, r0, lsl #20
    758c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    7590:	00358c1c 	eorseq	r8, r5, ip, lsl ip
    7594:	017d0100 	cmneq	sp, r0, lsl #2
    7598:	000003cc 	andeq	r0, r0, ip, asr #7
    759c:	0001de10 	andeq	sp, r1, r0, lsl lr
    75a0:	00000078 	andeq	r0, r0, r8, ror r0
    75a4:	0e179c01 	cdpeq	12, 1, cr9, cr7, cr1, {0}
    75a8:	af1d0000 	svcge	0x001d0000
    75ac:	01000043 	tsteq	r0, r3, asr #32
    75b0:	0a00017d 	beq	7bac <_start-0x454>
    75b4:	91020000 	mrsls	r0, (UNDEF: 2)
    75b8:	dd1c006c 	ldcle	0, cr0, [ip, #-432]	; 0xfffffe50
    75bc:	01000037 	tsteq	r0, r7, lsr r0
    75c0:	03cc0183 	biceq	r0, ip, #-1073741792	; 0xc0000020
    75c4:	de880000 	cdple	0, 8, cr0, cr8, cr0, {0}
    75c8:	00a00001 	adceq	r0, r0, r1
    75cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    75d0:	00000e41 	andeq	r0, r0, r1, asr #28
    75d4:	0043af1d 	subeq	sl, r3, sp, lsl pc
    75d8:	01830100 	orreq	r0, r3, r0, lsl #2
    75dc:	00000a00 	andeq	r0, r0, r0, lsl #20
    75e0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    75e4:	0037611c 	eorseq	r6, r7, ip, lsl r1
    75e8:	018b0100 	orreq	r0, fp, r0, lsl #2
    75ec:	00000394 	muleq	r0, r4, r3
    75f0:	0001df28 	andeq	sp, r1, r8, lsr #30
    75f4:	000000d8 	ldrdeq	r0, [r0], -r8
    75f8:	0e6b9c01 	cdpeq	12, 6, cr9, cr11, cr1, {0}
    75fc:	af1d0000 	svcge	0x001d0000
    7600:	01000043 	tsteq	r0, r3, asr #32
    7604:	0a00018b 	beq	7c38 <_start-0x3c8>
    7608:	91020000 	mrsls	r0, (UNDEF: 2)
    760c:	0d1c006c 	ldceq	0, cr0, [ip, #-432]	; 0xfffffe50
    7610:	01000038 	tsteq	r0, r8, lsr r0
    7614:	03940194 	orrseq	r0, r4, #148, 2	; 0x25
    7618:	e0000000 	and	r0, r0, r0
    761c:	00d80001 	sbcseq	r0, r8, r1
    7620:	9c010000 	stcls	0, cr0, [r1], {-0}
    7624:	00000e95 	muleq	r0, r5, lr
    7628:	0043af1d 	subeq	sl, r3, sp, lsl pc
    762c:	01940100 	orrseq	r0, r4, r0, lsl #2
    7630:	00000a00 	andeq	r0, r0, r0, lsl #20
    7634:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    7638:	0038f51c 	eorseq	pc, r8, ip, lsl r5	; <UNPREDICTABLE>
    763c:	019d0100 	orrseq	r0, sp, r0, lsl #2
    7640:	00000394 	muleq	r0, r4, r3
    7644:	0001e0d8 	ldrdeq	lr, [r1], -r8
    7648:	0000009c 	muleq	r0, ip, r0
    764c:	0ebf9c01 	cdpeq	12, 11, cr9, cr15, cr1, {0}
    7650:	af1d0000 	svcge	0x001d0000
    7654:	01000043 	tsteq	r0, r3, asr #32
    7658:	0a00019d 	beq	7cd4 <_start-0x32c>
    765c:	91020000 	mrsls	r0, (UNDEF: 2)
    7660:	cc1c006c 	ldcgt	0, cr0, [ip], {108}	; 0x6c
    7664:	01000035 	tsteq	r0, r5, lsr r0
    7668:	039e01a4 	orrseq	r0, lr, #164, 2	; 0x29
    766c:	e1740000 	cmn	r4, r0
    7670:	00ac0001 	adceq	r0, ip, r1
    7674:	9c010000 	stcls	0, cr0, [r1], {-0}
    7678:	00000ef8 	strdeq	r0, [r0], -r8
    767c:	0043af1d 	subeq	sl, r3, sp, lsl pc
    7680:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    7684:	00000a00 	andeq	r0, r0, r0, lsl #20
    7688:	1b649102 	blne	192ba98 <mailbuffer+0x18f09a8>
    768c:	00002d0c 	andeq	r2, r0, ip, lsl #26
    7690:	9e01a701 	cdpls	7, 0, cr10, cr1, cr1, {0}
    7694:	02000003 	andeq	r0, r0, #3
    7698:	1c006c91 	stcne	12, cr6, [r0], {145}	; 0x91
    769c:	0000397c 	andeq	r3, r0, ip, ror r9
    76a0:	9e01b601 	cfmadd32ls	mvax0, mvfx11, mvfx1, mvfx1
    76a4:	20000003 	andcs	r0, r0, r3
    76a8:	a00001e2 	andge	r0, r0, r2, ror #3
    76ac:	01000000 	mrseq	r0, (UNDEF: 0)
    76b0:	000f229c 	muleq	pc, ip, r2	; <UNPREDICTABLE>
    76b4:	43af1d00 			; <UNDEFINED> instruction: 0x43af1d00
    76b8:	b6010000 	strlt	r0, [r1], -r0
    76bc:	000a0001 	andeq	r0, sl, r1
    76c0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    76c4:	37b71c00 	ldrcc	r1, [r7, r0, lsl #24]!
    76c8:	bd010000 	stclt	0, cr0, [r1, #-0]
    76cc:	0003cc01 	andeq	ip, r3, r1, lsl #24
    76d0:	01e2c000 	mvneq	ip, r0
    76d4:	00008c00 	andeq	r8, r0, r0, lsl #24
    76d8:	4c9c0100 	ldfmis	f0, [ip], {0}
    76dc:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    76e0:	000043af 	andeq	r4, r0, pc, lsr #7
    76e4:	0001bd01 	andeq	fp, r1, r1, lsl #26
    76e8:	0200000a 	andeq	r0, r0, #10
    76ec:	1c006c91 	stcne	12, cr6, [r0], {145}	; 0x91
    76f0:	00003654 	andeq	r3, r0, r4, asr r6
    76f4:	9e01c301 	cdpls	3, 0, cr12, cr1, cr1, {0}
    76f8:	4c000003 	stcmi	0, cr0, [r0], {3}
    76fc:	9c0001e3 	stflss	f0, [r0], {227}	; 0xe3
    7700:	01000000 	mrseq	r0, (UNDEF: 0)
    7704:	000f769c 	muleq	pc, ip, r6	; <UNPREDICTABLE>
    7708:	43af1d00 			; <UNDEFINED> instruction: 0x43af1d00
    770c:	c3010000 	movwgt	r0, #4096	; 0x1000
    7710:	000a0001 	andeq	r0, sl, r1
    7714:	6c910200 	lfmvs	f0, 4, [r1], {0}
    7718:	388a1c00 	stmcc	sl, {sl, fp, ip}
    771c:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    7720:	0008c701 	andeq	ip, r8, r1, lsl #14
    7724:	01e3e800 	mvneq	lr, r0, lsl #16
    7728:	0000a000 	andeq	sl, r0, r0
    772c:	a09c0100 	addsge	r0, ip, r0, lsl #2
    7730:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    7734:	000043af 	andeq	r4, r0, pc, lsr #7
    7738:	0001ce01 	andeq	ip, r1, r1, lsl #28
    773c:	0200000a 	andeq	r0, r0, #10
    7740:	1e006c91 	mcrne	12, 0, r6, cr0, cr1, {4}
    7744:	00003a4d 	andeq	r3, r0, sp, asr #20
    7748:	d301d501 	movwle	sp, #5377	; 0x1501
    774c:	88000008 	stmdahi	r0, {r3}
    7750:	780001e4 	stmdavc	r0, {r2, r5, r6, r7, r8}
    7754:	01000000 	mrseq	r0, (UNDEF: 0)
    7758:	43af1d9c 			; <UNDEFINED> instruction: 0x43af1d9c
    775c:	d5010000 	strle	r0, [r1, #-0]
    7760:	000a0001 	andeq	r0, sl, r1
    7764:	6c910200 	lfmvs	f0, 4, [r1], {0}
    7768:	04470000 	strbeq	r0, [r7], #-0
    776c:	00040000 	andeq	r0, r4, r0
    7770:	00001577 	andeq	r1, r0, r7, ror r5
    7774:	00190104 	andseq	r0, r9, r4, lsl #2
    7778:	8d010000 	stchi	0, cr0, [r1, #-0]
    777c:	0000003a 	andeq	r0, r0, sl, lsr r0
    7780:	c00001e5 	andgt	r0, r0, r5, ror #3
    7784:	b8000006 	stmdalt	r0, {r1, r2}
    7788:	0200002a 	andeq	r0, r0, #42	; 0x2a
    778c:	072a0801 	streq	r0, [sl, -r1, lsl #16]!
    7790:	02020000 	andeq	r0, r2, #0
    7794:	00013207 	andeq	r3, r1, r7, lsl #4
    7798:	02090300 	andeq	r0, r9, #0, 6
    779c:	00009871 	andeq	r9, r0, r1, ror r8
    77a0:	29a80400 	stmibcs	r8!, {sl}
    77a4:	73020000 	movwvc	r0, #8192	; 0x2000
    77a8:	00000021 	andeq	r0, r0, r1, lsr #32
    77ac:	242b0400 	strtcs	r0, [fp], #-1024	; 0xfffffc00
    77b0:	74020000 	strvc	r0, [r2], #-0
    77b4:	00000021 	andeq	r0, r0, r1, lsr #32
    77b8:	20880401 	addcs	r0, r8, r1, lsl #8
    77bc:	75020000 	strvc	r0, [r2, #-0]
    77c0:	00000028 	andeq	r0, r0, r8, lsr #32
    77c4:	29b00402 	ldmibcs	r0!, {r1, sl}
    77c8:	76020000 	strvc	r0, [r2], -r0
    77cc:	00000021 	andeq	r0, r0, r1, lsr #32
    77d0:	2a4f0404 	bcs	13c87e8 <mailbuffer+0x138d6f8>
    77d4:	77020000 	strvc	r0, [r2, -r0]
    77d8:	00000021 	andeq	r0, r0, r1, lsr #32
    77dc:	27900405 	ldrcs	r0, [r0, r5, lsl #8]
    77e0:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
    77e4:	00000021 	andeq	r0, r0, r1, lsr #32
    77e8:	258d0406 	strcs	r0, [sp, #1030]	; 0x406
    77ec:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
    77f0:	00000021 	andeq	r0, r0, r1, lsr #32
    77f4:	2ab30407 	bcs	fecc8818 <_estack+0xf6cb8818>
    77f8:	7a020000 	bvc	87800 <mailbuffer+0x4c710>
    77fc:	00000021 	andeq	r0, r0, r1, lsr #32
    7800:	06050008 	streq	r0, [r5], -r8
    7804:	02000023 	andeq	r0, r0, #35	; 0x23
    7808:	00002f7c 	andeq	r2, r0, ip, ror pc
    780c:	02090300 	andeq	r0, r9, #0, 6
    7810:	0001187f 	andeq	r1, r1, pc, ror r8
    7814:	29a80400 	stmibcs	r8!, {sl}
    7818:	81020000 	mrshi	r0, (UNDEF: 2)
    781c:	00000021 	andeq	r0, r0, r1, lsr #32
    7820:	242b0400 	strtcs	r0, [fp], #-1024	; 0xfffffc00
    7824:	82020000 	andhi	r0, r2, #0
    7828:	00000021 	andeq	r0, r0, r1, lsr #32
    782c:	20170401 	andscs	r0, r7, r1, lsl #8
    7830:	83020000 	movwhi	r0, #8192	; 0x2000
    7834:	00000021 	andeq	r0, r0, r1, lsr #32
    7838:	20410402 	subcs	r0, r1, r2, lsl #8
    783c:	84020000 	strhi	r0, [r2], #-0
    7840:	00000021 	andeq	r0, r0, r1, lsr #32
    7844:	27690403 	strbcs	r0, [r9, -r3, lsl #8]!
    7848:	85020000 	strhi	r0, [r2, #-0]
    784c:	00000021 	andeq	r0, r0, r1, lsr #32
    7850:	27210404 	strcs	r0, [r1, -r4, lsl #8]!
    7854:	86020000 	strhi	r0, [r2], -r0
    7858:	00000021 	andeq	r0, r0, r1, lsr #32
    785c:	1f290405 	svcne	0x00290405
    7860:	87020000 	strhi	r0, [r2, -r0]
    7864:	00000021 	andeq	r0, r0, r1, lsr #32
    7868:	28950406 	ldmcs	r5, {r1, r2, sl}
    786c:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    7870:	00000021 	andeq	r0, r0, r1, lsr #32
    7874:	27160407 	ldrcs	r0, [r6, -r7, lsl #8]
    7878:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    787c:	00000021 	andeq	r0, r0, r1, lsr #32
    7880:	e4050008 	str	r0, [r5], #-8
    7884:	02000027 	andeq	r0, r0, #39	; 0x27
    7888:	0000a38b 	andeq	sl, r0, fp, lsl #7
    788c:	02070300 	andeq	r0, r7, #0, 6
    7890:	0001748e 	andeq	r7, r1, lr, lsl #9
    7894:	29a80400 	stmibcs	r8!, {sl}
    7898:	90020000 	andls	r0, r2, r0
    789c:	00000021 	andeq	r0, r0, r1, lsr #32
    78a0:	242b0400 	strtcs	r0, [fp], #-1024	; 0xfffffc00
    78a4:	91020000 	mrsls	r0, (UNDEF: 2)
    78a8:	00000021 	andeq	r0, r0, r1, lsr #32
    78ac:	26c90401 	strbcs	r0, [r9], r1, lsl #8
    78b0:	92020000 	andls	r0, r2, #0
    78b4:	00000021 	andeq	r0, r0, r1, lsr #32
    78b8:	258d0402 	strcs	r0, [sp, #1026]	; 0x402
    78bc:	93020000 	movwls	r0, #8192	; 0x2000
    78c0:	00000021 	andeq	r0, r0, r1, lsr #32
    78c4:	29600403 	stmdbcs	r0!, {r0, r1, sl}^
    78c8:	94020000 	strls	r0, [r2], #-0
    78cc:	00000028 	andeq	r0, r0, r8, lsr #32
    78d0:	25220404 	strcs	r0, [r2, #-1028]!	; 0xfffffbfc
    78d4:	95020000 	strls	r0, [r2, #-0]
    78d8:	00000021 	andeq	r0, r0, r1, lsr #32
    78dc:	da050006 	ble	1478fc <mailbuffer+0x10c80c>
    78e0:	0200002b 	andeq	r0, r0, #43	; 0x2b
    78e4:	00012397 	muleq	r1, r7, r3
    78e8:	02020300 	andeq	r0, r2, #0, 6
    78ec:	0001a09c 	muleq	r1, ip, r0
    78f0:	29a80400 	stmibcs	r8!, {sl}
    78f4:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    78f8:	00000021 	andeq	r0, r0, r1, lsr #32
    78fc:	242b0400 	strtcs	r0, [fp], #-1024	; 0xfffffc00
    7900:	9f020000 	svcls	0x00020000
    7904:	00000021 	andeq	r0, r0, r1, lsr #32
    7908:	09060001 	stmdbeq	r6, {r0}
    790c:	01d59a02 	bicseq	r9, r5, r2, lsl #20
    7910:	02070000 	andeq	r0, r7, #0
    7914:	0200003c 	andeq	r0, r0, #60	; 0x3c
    7918:	00017fa1 	andeq	r7, r1, r1, lsr #31
    791c:	27910700 	ldrcs	r0, [r1, r0, lsl #14]
    7920:	a3020000 	movwge	r0, #8192	; 0x2000
    7924:	00000098 	muleq	r0, r8, r0
    7928:	003c4c07 	eorseq	r4, ip, r7, lsl #24
    792c:	18a40200 	stmiane	r4!, {r9}
    7930:	07000001 	streq	r0, [r0, -r1]
    7934:	00002584 	andeq	r2, r0, r4, lsl #11
    7938:	0174a502 	cmneq	r4, r2, lsl #10
    793c:	05000000 	streq	r0, [r0, #-0]
    7940:	000026fc 	strdeq	r2, [r0], -ip
    7944:	01a0a702 	lsleq	sl, r2, #14
    7948:	04020000 	streq	r0, [r2], #-0
    794c:	0001d407 	andeq	sp, r1, r7, lsl #8
    7950:	38750800 	ldmdacc	r5!, {fp}^
    7954:	21170300 	tstcs	r7, r0, lsl #6
    7958:	02000000 	andeq	r0, r0, #0
    795c:	071d0704 	ldreq	r0, [sp, -r4, lsl #14]
    7960:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7964:	00071307 	andeq	r1, r7, r7, lsl #6
    7968:	06010200 	streq	r0, [r1], -r0, lsl #4
    796c:	00000733 	andeq	r0, r0, r3, lsr r7
    7970:	b8050202 	stmdalt	r5, {r1, r9}
    7974:	09000007 	stmdbeq	r0, {r0, r1, r2}
    7978:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    797c:	30050074 	andcc	r0, r5, r4, ror r0
    7980:	03000029 	movweq	r0, #41	; 0x29
    7984:	00020d20 	andeq	r0, r2, r0, lsr #26
    7988:	07040200 	streq	r0, [r4, -r0, lsl #4]
    798c:	00000718 	andeq	r0, r0, r8, lsl r7
    7990:	98050402 	stmdals	r5, {r1, sl}
    7994:	0a000007 	beq	79b8 <_start-0x648>
    7998:	00002552 	andeq	r2, r0, r2, asr r5
    799c:	821e0418 	andshi	r0, lr, #24, 8	; 0x18000000
    79a0:	04000002 	streq	r0, [r0], #-2
    79a4:	00002651 	andeq	r2, r0, r1, asr r6
    79a8:	02822004 	addeq	r2, r2, #4
    79ac:	04000000 	streq	r0, [r0], #-0
    79b0:	00002c0c 	andeq	r2, r0, ip, lsl #24
    79b4:	01f12104 	mvnseq	r2, r4, lsl #2
    79b8:	04040000 	streq	r0, [r4], #-0
    79bc:	0000268a 	andeq	r2, r0, sl, lsl #13
    79c0:	02142204 	andseq	r2, r4, #4, 4	; 0x40000000
    79c4:	04080000 	streq	r0, [r8], #-0
    79c8:	00002169 	andeq	r2, r0, r9, ror #2
    79cc:	02822304 	addeq	r2, r2, #4, 6	; 0x10000000
    79d0:	040c0000 	streq	r0, [ip], #-0
    79d4:	0000277d 	andeq	r2, r0, sp, ror r7
    79d8:	02822404 	addeq	r2, r2, #4, 8	; 0x4000000
    79dc:	04100000 	ldreq	r0, [r0], #-0
    79e0:	00002bbb 			; <UNDEFINED> instruction: 0x00002bbb
    79e4:	02822504 	addeq	r2, r2, #4, 10	; 0x1000000
    79e8:	00140000 	andseq	r0, r4, r0
    79ec:	0288040b 	addeq	r0, r8, #184549376	; 0xb000000
    79f0:	d50c0000 	strle	r0, [ip, #-0]
    79f4:	05000001 	streq	r0, [r0, #-1]
    79f8:	00002552 	andeq	r2, r0, r2, asr r5
    79fc:	022d2704 	eoreq	r2, sp, #4, 14	; 0x100000
    7a00:	530d0000 	movwpl	r0, #53248	; 0xd000
    7a04:	01000025 	tsteq	r0, r5, lsr #32
    7a08:	01e5001a 	mvneq	r0, sl, lsl r0
    7a0c:	00036400 	andeq	r6, r3, r0, lsl #8
    7a10:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    7a14:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    7a18:	000043af 	andeq	r4, r0, pc, lsr #7
    7a1c:	03361a01 	teqeq	r6, #4096	; 0x1000
    7a20:	91020000 	mrsls	r0, (UNDEF: 2)
    7a24:	26530e5c 			; <UNDEFINED> instruction: 0x26530e5c
    7a28:	1a010000 	bne	47a30 <mailbuffer+0xc940>
    7a2c:	0000033c 	andeq	r0, r0, ip, lsr r3
    7a30:	0e589102 	logeqe	f1, f2
    7a34:	00002c0e 	andeq	r2, r0, lr, lsl #24
    7a38:	01f11a01 	mvnseq	r1, r1, lsl #20
    7a3c:	91020000 	mrsls	r0, (UNDEF: 2)
    7a40:	277f0f54 			; <UNDEFINED> instruction: 0x277f0f54
    7a44:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    7a48:	00000282 	andeq	r0, r0, r2, lsl #5
    7a4c:	0f6c9102 	svceq	0x006c9102
    7a50:	00003a7e 	andeq	r3, r0, lr, ror sl
    7a54:	01e73901 	mvneq	r3, r1, lsl #18
    7a58:	91020000 	mrsls	r0, (UNDEF: 2)
    7a5c:	e6ac106b 	strt	r1, [ip], fp, rrx
    7a60:	01480001 	cmpeq	r8, r1
    7a64:	140f0000 	strne	r0, [pc], #-0	; 7a6c <_start-0x594>
    7a68:	0100003b 	tsteq	r0, fp, lsr r0
    7a6c:	0001e73c 	andeq	lr, r1, ip, lsr r7
    7a70:	69910200 	ldmibvs	r1, {r9}
    7a74:	003b420f 	eorseq	r4, fp, pc, lsl #4
    7a78:	e73d0100 	ldr	r0, [sp, -r0, lsl #2]!
    7a7c:	02000001 	andeq	r0, r0, #1
    7a80:	750f6891 	strvc	r6, [pc, #-2193]	; 71f7 <_start-0xe09>
    7a84:	0100003a 	tsteq	r0, sl, lsr r0
    7a88:	0003433f 	andeq	r4, r3, pc, lsr r3
    7a8c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    7a90:	003b650f 	eorseq	r6, fp, pc, lsl #10
    7a94:	e7460100 	strb	r0, [r6, -r0, lsl #2]
    7a98:	02000001 	andeq	r0, r0, #1
    7a9c:	00006a91 	muleq	r0, r1, sl
    7aa0:	028d040b 	addeq	r0, sp, #184549376	; 0xb000000
    7aa4:	040b0000 	streq	r0, [fp], #-0
    7aa8:	00000342 	andeq	r0, r0, r2, asr #6
    7aac:	d5040b11 	strle	r0, [r4, #-2833]	; 0xfffff4ef
    7ab0:	0d000001 	stceq	0, cr0, [r0, #-4]
    7ab4:	00003b4d 	andeq	r3, r0, sp, asr #22
    7ab8:	e8647d01 	stmda	r4!, {r0, r8, sl, fp, ip, sp, lr}^
    7abc:	00740001 	rsbseq	r0, r4, r1
    7ac0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7ac4:	0000036d 	andeq	r0, r0, sp, ror #6
    7ac8:	0043af0e 	subeq	sl, r3, lr, lsl #30
    7acc:	367d0100 	ldrbtcc	r0, [sp], -r0, lsl #2
    7ad0:	02000003 	andeq	r0, r0, #3
    7ad4:	12006c91 	andne	r6, r0, #37120	; 0x9100
    7ad8:	00003b73 	andeq	r3, r0, r3, ror fp
    7adc:	02148301 	andseq	r8, r4, #67108864	; 0x4000000
    7ae0:	e8d80000 	ldm	r8, {}^	; <UNPREDICTABLE>
    7ae4:	00780001 	rsbseq	r0, r8, r1
    7ae8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7aec:	00000395 	muleq	r0, r5, r3
    7af0:	0043af0e 	subeq	sl, r3, lr, lsl #30
    7af4:	36830100 	strcc	r0, [r3], r0, lsl #2
    7af8:	02000003 	andeq	r0, r0, #3
    7afc:	12006c91 	andne	r6, r0, #37120	; 0x9100
    7b00:	00003af0 	strdeq	r3, [r0], -r0
    7b04:	02828901 	addeq	r8, r2, #16384	; 0x4000
    7b08:	e9500000 	ldmdb	r0, {}^	; <UNPREDICTABLE>
    7b0c:	01940001 	orrseq	r0, r4, r1
    7b10:	9c010000 	stcls	0, cr0, [r1], {-0}
    7b14:	0000040d 	andeq	r0, r0, sp, lsl #8
    7b18:	0043af0e 	subeq	sl, r3, lr, lsl #30
    7b1c:	36890100 	strcc	r0, [r9], r0, lsl #2
    7b20:	02000003 	andeq	r0, r0, #3
    7b24:	bb0e5c91 	bllt	39ed70 <mailbuffer+0x363c80>
    7b28:	01000030 	tsteq	r0, r0, lsr r0
    7b2c:	0001e789 	andeq	lr, r1, r9, lsl #15
    7b30:	5b910200 	blpl	fe448338 <_estack+0xf6438338>
    7b34:	003b3a0f 	eorseq	r3, fp, pc, lsl #20
    7b38:	828e0100 	addhi	r0, lr, #0, 2
    7b3c:	02000002 	andeq	r0, r0, #2
    7b40:	d8106c91 	ldmdale	r0, {r0, r4, r7, sl, fp, sp, lr}
    7b44:	b40001e9 	strlt	r0, [r0], #-489	; 0xfffffe17
    7b48:	0f000000 	svceq	0x00000000
    7b4c:	00003b14 	andeq	r3, r0, r4, lsl fp
    7b50:	01e79201 	mvneq	r9, r1, lsl #4
    7b54:	91020000 	mrsls	r0, (UNDEF: 2)
    7b58:	3b420f6b 	blcc	108b90c <mailbuffer+0x105081c>
    7b5c:	93010000 	movwls	r0, #4096	; 0x1000
    7b60:	000001e7 	andeq	r0, r0, r7, ror #3
    7b64:	0f6a9102 	svceq	0x006a9102
    7b68:	00003a75 	andeq	r3, r0, r5, ror sl
    7b6c:	03439501 	movteq	r9, #13569	; 0x3501
    7b70:	91020000 	mrsls	r0, (UNDEF: 2)
    7b74:	0d000064 	stceq	0, cr0, [r0, #-400]	; 0xfffffe70
    7b78:	00003b1e 	andeq	r3, r0, lr, lsl fp
    7b7c:	eae4b101 	b	ff933f88 <_estack+0xf7923f88>
    7b80:	00dc0001 	sbcseq	r0, ip, r1
    7b84:	9c010000 	stcls	0, cr0, [r1], {-0}
    7b88:	0000043f 	andeq	r0, r0, pc, lsr r4
    7b8c:	0043af0e 	subeq	sl, r3, lr, lsl #30
    7b90:	36b10100 	ldrtcc	r0, [r1], r0, lsl #2
    7b94:	02000003 	andeq	r0, r0, #3
    7b98:	2e0e6c91 	mcrcs	12, 0, r6, cr14, cr1, {4}
    7b9c:	0100001a 	tsteq	r0, sl, lsl r0
    7ba0:	00043fb1 			; <UNDEFINED> instruction: 0x00043fb1
    7ba4:	68910200 	ldmvs	r1, {r9}
    7ba8:	45040b00 	strmi	r0, [r4, #-2816]	; 0xfffff500
    7bac:	0c000004 	stceq	0, cr0, [r0], {4}
    7bb0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7bb4:	000deb00 	andeq	lr, sp, r0, lsl #22
    7bb8:	70000400 	andvc	r0, r0, r0, lsl #8
    7bbc:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7bc0:	00001901 	andeq	r1, r0, r1, lsl #18
    7bc4:	3c7a0100 	ldfcce	f0, [sl], #-0
    7bc8:	0ddc0000 	ldcleq	0, cr0, [ip]
    7bcc:	ebc00000 	bl	ff007bd4 <_estack+0xf6ff7bd4>
    7bd0:	182c0001 	stmdane	ip!, {r0}
    7bd4:	2c7f0000 	ldclcs	0, cr0, [pc], #-0	; 7bdc <_start-0x424>
    7bd8:	01020000 	mrseq	r0, (UNDEF: 2)
    7bdc:	00401b02 	subeq	r1, r0, r2, lsl #22
    7be0:	46030000 	strmi	r0, [r3], -r0
    7be4:	00000025 	andeq	r0, r0, r5, lsr #32
    7be8:	002b2803 	eoreq	r2, fp, r3, lsl #16
    7bec:	bb030100 	bllt	c7ff4 <mailbuffer+0x8cf04>
    7bf0:	02000028 	andeq	r0, r0, #40	; 0x28
    7bf4:	22130400 	andscs	r0, r3, #0, 8
    7bf8:	22020000 	andcs	r0, r2, #0
    7bfc:	00000025 	andeq	r0, r0, r5, lsr #32
    7c00:	2b020102 	blcs	88010 <mailbuffer+0x4cf20>
    7c04:	0000006c 	andeq	r0, r0, ip, rrx
    7c08:	00259a03 	eoreq	r9, r5, r3, lsl #20
    7c0c:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    7c10:	0100002c 	tsteq	r0, ip, lsr #32
    7c14:	00222103 	eoreq	r2, r2, r3, lsl #2
    7c18:	5b030200 	blpl	c8420 <mailbuffer+0x8d330>
    7c1c:	03000026 	movweq	r0, #38	; 0x26
    7c20:	24210400 	strtcs	r0, [r1], #-1024	; 0xfffffc00
    7c24:	31020000 	mrscc	r0, (UNDEF: 2)
    7c28:	0000004b 	andeq	r0, r0, fp, asr #32
    7c2c:	34020805 	strcc	r0, [r2], #-2053	; 0xfffff7fb
    7c30:	000000bc 	strheq	r0, [r0], -ip
    7c34:	00227606 	eoreq	r7, r2, r6, lsl #12
    7c38:	bc360200 	lfmlt	f0, 4, [r6], #-0
    7c3c:	00000000 	andeq	r0, r0, r0
    7c40:	0027d306 	eoreq	sp, r7, r6, lsl #6
    7c44:	bc370200 	lfmlt	f0, 4, [r7], #-0
    7c48:	01000000 	mrseq	r0, (UNDEF: 0)
    7c4c:	0021f306 	eoreq	pc, r1, r6, lsl #6
    7c50:	c3380200 	teqgt	r8, #0, 4
    7c54:	02000000 	andeq	r0, r0, #0
    7c58:	001f0c06 	andseq	r0, pc, r6, lsl #24
    7c5c:	c3390200 	teqgt	r9, #0, 4
    7c60:	04000000 	streq	r0, [r0], #-0
    7c64:	002bb306 	eoreq	fp, fp, r6, lsl #6
    7c68:	c33a0200 	teqgt	sl, #0, 4
    7c6c:	06000000 	streq	r0, [r0], -r0
    7c70:	08010700 	stmdaeq	r1, {r8, r9, sl}
    7c74:	0000072a 	andeq	r0, r0, sl, lsr #14
    7c78:	32070207 	andcc	r0, r7, #1879048192	; 0x70000000
    7c7c:	04000001 	streq	r0, [r0], #-1
    7c80:	00002208 	andeq	r2, r0, r8, lsl #4
    7c84:	00773d02 	rsbseq	r3, r7, r2, lsl #26
    7c88:	12050000 	andne	r0, r5, #0
    7c8c:	01865c02 	orreq	r5, r6, r2, lsl #24
    7c90:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    7c94:	02000029 	andeq	r0, r0, #41	; 0x29
    7c98:	0000bc5e 	andeq	fp, r0, lr, asr ip
    7c9c:	2b060000 	blcs	187ca4 <mailbuffer+0x14cbb4>
    7ca0:	02000024 	andeq	r0, r0, #36	; 0x24
    7ca4:	0000bc5f 	andeq	fp, r0, pc, asr ip
    7ca8:	8c060100 	stfhis	f0, [r6], {-0}
    7cac:	02000022 	andeq	r0, r0, #34	; 0x22
    7cb0:	0000c360 	andeq	ip, r0, r0, ror #6
    7cb4:	28060200 	stmdacs	r6, {r9}
    7cb8:	02000021 	andeq	r0, r0, #33	; 0x21
    7cbc:	0000bc61 	andeq	fp, r0, r1, ror #24
    7cc0:	f6060400 			; <UNDEFINED> instruction: 0xf6060400
    7cc4:	02000022 	andeq	r0, r0, #34	; 0x22
    7cc8:	0000bc62 	andeq	fp, r0, r2, ror #24
    7ccc:	9f060500 	svcls	0x00060500
    7cd0:	02000027 	andeq	r0, r0, #39	; 0x27
    7cd4:	0000bc63 	andeq	fp, r0, r3, ror #24
    7cd8:	e7060600 	str	r0, [r6, -r0, lsl #12]
    7cdc:	02000025 	andeq	r0, r0, #37	; 0x25
    7ce0:	0000bc64 	andeq	fp, r0, r4, ror #24
    7ce4:	56060700 	strpl	r0, [r6], -r0, lsl #14
    7ce8:	0200002c 	andeq	r0, r0, #44	; 0x2c
    7cec:	0000c366 	andeq	ip, r0, r6, ror #6
    7cf0:	44060800 	strmi	r0, [r6], #-2048	; 0xfffff800
    7cf4:	02000022 	andeq	r0, r0, #34	; 0x22
    7cf8:	0000c367 	andeq	ip, r0, r7, ror #6
    7cfc:	35060a00 	strcc	r0, [r6, #-2560]	; 0xfffff600
    7d00:	02000021 	andeq	r0, r0, #33	; 0x21
    7d04:	0000c368 	andeq	ip, r0, r8, ror #6
    7d08:	fa060c00 	blx	18ad10 <mailbuffer+0x14fc20>
    7d0c:	02000021 	andeq	r0, r0, #33	; 0x21
    7d10:	0000bc69 	andeq	fp, r0, r9, ror #24
    7d14:	3b060e00 	blcc	18b51c <mailbuffer+0x15042c>
    7d18:	02000023 	andeq	r0, r0, #35	; 0x23
    7d1c:	0000bc6a 	andeq	fp, r0, sl, ror #24
    7d20:	22060f00 	andcs	r0, r6, #0, 30
    7d24:	02000023 	andeq	r0, r0, #35	; 0x23
    7d28:	0000bc6b 	andeq	fp, r0, fp, ror #24
    7d2c:	a8061000 	stmdage	r6, {ip}
    7d30:	02000028 	andeq	r0, r0, #40	; 0x28
    7d34:	0000bc6c 	andeq	fp, r0, ip, ror #24
    7d38:	04001100 	streq	r1, [r0], #-256	; 0xffffff00
    7d3c:	000028c7 	andeq	r2, r0, r7, asr #17
    7d40:	00d56e02 	sbcseq	r6, r5, r2, lsl #28
    7d44:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
    7d48:	01fa7102 	mvnseq	r7, r2, lsl #2
    7d4c:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    7d50:	02000029 	andeq	r0, r0, #41	; 0x29
    7d54:	0000bc73 	andeq	fp, r0, r3, ror ip
    7d58:	2b060000 	blcs	187d60 <mailbuffer+0x14cc70>
    7d5c:	02000024 	andeq	r0, r0, #36	; 0x24
    7d60:	0000bc74 	andeq	fp, r0, r4, ror ip
    7d64:	88060100 	stmdahi	r6, {r8}
    7d68:	02000020 	andeq	r0, r0, #32
    7d6c:	0000c375 	andeq	ip, r0, r5, ror r3
    7d70:	b0060200 	andlt	r0, r6, r0, lsl #4
    7d74:	02000029 	andeq	r0, r0, #41	; 0x29
    7d78:	0000bc76 	andeq	fp, r0, r6, ror ip
    7d7c:	4f060400 	svcmi	0x00060400
    7d80:	0200002a 	andeq	r0, r0, #42	; 0x2a
    7d84:	0000bc77 	andeq	fp, r0, r7, ror ip
    7d88:	90060500 	andls	r0, r6, r0, lsl #10
    7d8c:	02000027 	andeq	r0, r0, #39	; 0x27
    7d90:	0000bc78 	andeq	fp, r0, r8, ror ip
    7d94:	8d060600 	stchi	6, cr0, [r6, #-0]
    7d98:	02000025 	andeq	r0, r0, #37	; 0x25
    7d9c:	0000bc79 	andeq	fp, r0, r9, ror ip
    7da0:	b3060700 	movwlt	r0, #26368	; 0x6700
    7da4:	0200002a 	andeq	r0, r0, #42	; 0x2a
    7da8:	0000bc7a 	andeq	fp, r0, sl, ror ip
    7dac:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    7db0:	00002306 	andeq	r2, r0, r6, lsl #6
    7db4:	01917c02 	orrseq	r7, r1, r2, lsl #24
    7db8:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
    7dbc:	027a7f02 	rsbseq	r7, sl, #2, 30
    7dc0:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    7dc4:	02000029 	andeq	r0, r0, #41	; 0x29
    7dc8:	0000bc81 	andeq	fp, r0, r1, lsl #25
    7dcc:	2b060000 	blcs	187dd4 <mailbuffer+0x14cce4>
    7dd0:	02000024 	andeq	r0, r0, #36	; 0x24
    7dd4:	0000bc82 	andeq	fp, r0, r2, lsl #25
    7dd8:	17060100 	strne	r0, [r6, -r0, lsl #2]
    7ddc:	02000020 	andeq	r0, r0, #32
    7de0:	0000bc83 	andeq	fp, r0, r3, lsl #25
    7de4:	41060200 	mrsmi	r0, LR_usr
    7de8:	02000020 	andeq	r0, r0, #32
    7dec:	0000bc84 	andeq	fp, r0, r4, lsl #25
    7df0:	69060300 	stmdbvs	r6, {r8, r9}
    7df4:	02000027 	andeq	r0, r0, #39	; 0x27
    7df8:	0000bc85 	andeq	fp, r0, r5, lsl #25
    7dfc:	21060400 	tstcs	r6, r0, lsl #8
    7e00:	02000027 	andeq	r0, r0, #39	; 0x27
    7e04:	0000bc86 	andeq	fp, r0, r6, lsl #25
    7e08:	29060500 	stmdbcs	r6, {r8, sl}
    7e0c:	0200001f 	andeq	r0, r0, #31
    7e10:	0000bc87 	andeq	fp, r0, r7, lsl #25
    7e14:	95060600 	strls	r0, [r6, #-1536]	; 0xfffffa00
    7e18:	02000028 	andeq	r0, r0, #40	; 0x28
    7e1c:	0000bc88 	andeq	fp, r0, r8, lsl #25
    7e20:	16060700 	strne	r0, [r6], -r0, lsl #14
    7e24:	02000027 	andeq	r0, r0, #39	; 0x27
    7e28:	0000bc89 	andeq	fp, r0, r9, lsl #25
    7e2c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    7e30:	000027e4 	andeq	r2, r0, r4, ror #15
    7e34:	02058b02 	andeq	r8, r5, #2048	; 0x800
    7e38:	07050000 	streq	r0, [r5, -r0]
    7e3c:	02d68e02 	sbcseq	r8, r6, #2, 28
    7e40:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    7e44:	02000029 	andeq	r0, r0, #41	; 0x29
    7e48:	0000bc90 	muleq	r0, r0, ip
    7e4c:	2b060000 	blcs	187e54 <mailbuffer+0x14cd64>
    7e50:	02000024 	andeq	r0, r0, #36	; 0x24
    7e54:	0000bc91 	muleq	r0, r1, ip
    7e58:	c9060100 	stmdbgt	r6, {r8}
    7e5c:	02000026 	andeq	r0, r0, #38	; 0x26
    7e60:	0000bc92 	muleq	r0, r2, ip
    7e64:	8d060200 	sfmhi	f0, 4, [r6, #-0]
    7e68:	02000025 	andeq	r0, r0, #37	; 0x25
    7e6c:	0000bc93 	muleq	r0, r3, ip
    7e70:	60060300 	andvs	r0, r6, r0, lsl #6
    7e74:	02000029 	andeq	r0, r0, #41	; 0x29
    7e78:	0000c394 	muleq	r0, r4, r3
    7e7c:	22060400 	andcs	r0, r6, #0, 8
    7e80:	02000025 	andeq	r0, r0, #37	; 0x25
    7e84:	0000bc95 	muleq	r0, r5, ip
    7e88:	04000600 	streq	r0, [r0], #-1536	; 0xfffffa00
    7e8c:	00002bda 	ldrdeq	r2, [r0], -sl
    7e90:	02859702 	addeq	r9, r5, #524288	; 0x80000
    7e94:	02050000 	andeq	r0, r5, #0
    7e98:	03029c02 	movweq	r9, #11266	; 0x2c02
    7e9c:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    7ea0:	02000029 	andeq	r0, r0, #41	; 0x29
    7ea4:	0000bc9e 	muleq	r0, lr, ip
    7ea8:	2b060000 	blcs	187eb0 <mailbuffer+0x14cdc0>
    7eac:	02000024 	andeq	r0, r0, #36	; 0x24
    7eb0:	0000bc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    7eb4:	08000100 	stmdaeq	r0, {r8}
    7eb8:	379a0209 	ldrcc	r0, [sl, r9, lsl #4]
    7ebc:	09000003 	stmdbeq	r0, {r0, r1}
    7ec0:	00003c02 	andeq	r3, r0, r2, lsl #24
    7ec4:	02e1a102 	rsceq	sl, r1, #-2147483648	; 0x80000000
    7ec8:	91090000 	mrsls	r0, (UNDEF: 9)
    7ecc:	02000027 	andeq	r0, r0, #39	; 0x27
    7ed0:	0001faa3 	andeq	pc, r1, r3, lsr #21
    7ed4:	3c4c0900 	mcrrcc	9, 0, r0, ip, cr0
    7ed8:	a4020000 	strge	r0, [r2], #-0
    7edc:	0000027a 	andeq	r0, r0, sl, ror r2
    7ee0:	00258409 	eoreq	r8, r5, r9, lsl #8
    7ee4:	d6a50200 	strtle	r0, [r5], r0, lsl #4
    7ee8:	00000002 	andeq	r0, r0, r2
    7eec:	0026fc04 	eoreq	pc, r6, r4, lsl #24
    7ef0:	02a70200 	adceq	r0, r7, #0, 4
    7ef4:	0a000003 	beq	7f08 <_start-0xf8>
    7ef8:	00002466 	andeq	r2, r0, r6, ror #8
    7efc:	73a90202 			; <UNDEFINED> instruction: 0x73a90202
    7f00:	06000003 	streq	r0, [r0], -r3
    7f04:	000029a8 	andeq	r2, r0, r8, lsr #19
    7f08:	00bcab02 	adcseq	sl, ip, r2, lsl #22
    7f0c:	06000000 	streq	r0, [r0], -r0
    7f10:	0000242b 	andeq	r2, r0, fp, lsr #8
    7f14:	00bcac02 	adcseq	sl, ip, r2, lsl #24
    7f18:	06010000 	streq	r0, [r1], -r0
    7f1c:	00002074 	andeq	r2, r0, r4, ror r0
    7f20:	0373ad02 	cmneq	r3, #2, 26	; 0x80
    7f24:	00020000 	andeq	r0, r2, r0
    7f28:	0000c30b 	andeq	ip, r0, fp, lsl #6
    7f2c:	00038200 	andeq	r8, r3, r0, lsl #4
    7f30:	03820c00 	orreq	r0, r2, #0, 24
    7f34:	07000000 	streq	r0, [r0, -r0]
    7f38:	01d40704 	bicseq	r0, r4, r4, lsl #14
    7f3c:	66040000 	strvs	r0, [r4], -r0
    7f40:	02000024 	andeq	r0, r0, #36	; 0x24
    7f44:	000342af 	andeq	r4, r3, pc, lsr #5
    7f48:	38750d00 	ldmdacc	r5!, {r8, sl, fp}^
    7f4c:	bc170300 	ldclt	3, cr0, [r7], {-0}
    7f50:	0d000000 	stceq	0, cr0, [r0, #-0]
    7f54:	00363175 	eorseq	r3, r6, r5, ror r1
    7f58:	00c31803 	sbceq	r1, r3, r3, lsl #16
    7f5c:	750d0000 	strvc	r0, [sp, #-0]
    7f60:	03003233 	movweq	r3, #563	; 0x233
    7f64:	0003b419 	andeq	fp, r3, r9, lsl r4
    7f68:	07040700 	streq	r0, [r4, -r0, lsl #14]
    7f6c:	0000071d 	andeq	r0, r0, sp, lsl r7
    7f70:	13070807 	movwne	r0, #30727	; 0x7807
    7f74:	07000007 	streq	r0, [r0, -r7]
    7f78:	07330601 	ldreq	r0, [r3, -r1, lsl #12]!
    7f7c:	02070000 	andeq	r0, r7, #0
    7f80:	0007b805 	andeq	fp, r7, r5, lsl #16
    7f84:	05040e00 	streq	r0, [r4, #-3584]	; 0xfffff200
    7f88:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7f8c:	00293004 	eoreq	r3, r9, r4
    7f90:	d0200300 	eorle	r0, r0, r0, lsl #6
    7f94:	07000003 	streq	r0, [r0, -r3]
    7f98:	07180704 	ldreq	r0, [r8, -r4, lsl #14]
    7f9c:	04070000 	streq	r0, [r7], #-0
    7fa0:	00079805 	andeq	r9, r7, r5, lsl #16
    7fa4:	25520a00 	ldrbcs	r0, [r2, #-2560]	; 0xfffff600
    7fa8:	04180000 	ldreq	r0, [r8], #-0
    7fac:	0004451e 	andeq	r4, r4, lr, lsl r5
    7fb0:	26510600 	ldrbcs	r0, [r1], -r0, lsl #12
    7fb4:	20040000 	andcs	r0, r4, r0
    7fb8:	00000445 	andeq	r0, r0, r5, asr #8
    7fbc:	2c0c0600 	stccs	6, cr0, [ip], {-0}
    7fc0:	21040000 	mrscs	r0, (UNDEF: 4)
    7fc4:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    7fc8:	268a0604 	strcs	r0, [sl], r4, lsl #12
    7fcc:	22040000 	andcs	r0, r4, #0
    7fd0:	000003d7 	ldrdeq	r0, [r0], -r7
    7fd4:	21690608 	cmncs	r9, r8, lsl #12
    7fd8:	23040000 	movwcs	r0, #16384	; 0x4000
    7fdc:	00000445 	andeq	r0, r0, r5, asr #8
    7fe0:	277d060c 	ldrbcs	r0, [sp, -ip, lsl #12]!
    7fe4:	24040000 	strcs	r0, [r4], #-0
    7fe8:	00000445 	andeq	r0, r0, r5, asr #8
    7fec:	2bbb0610 	blcs	feec9834 <_estack+0xf6eb9834>
    7ff0:	25040000 	strcs	r0, [r4, #-0]
    7ff4:	00000445 	andeq	r0, r0, r5, asr #8
    7ff8:	040f0014 	streq	r0, [pc], #-20	; 8000 <_start>
    7ffc:	0000044b 	andeq	r0, r0, fp, asr #8
    8000:	00033710 	andeq	r3, r3, r0, lsl r7
    8004:	25520400 	ldrbcs	r0, [r2, #-1024]	; 0xfffffc00
    8008:	27040000 	strcs	r0, [r4, -r0]
    800c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8010:	310a0411 	tstcc	sl, r1, lsl r4
    8014:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
    8018:	048e1f05 	streq	r1, [lr], #3845	; 0xf05
    801c:	51060000 	mrspl	r0, (UNDEF: 6)
    8020:	05000026 	streq	r0, [r0, #-38]	; 0xffffffda
    8024:	00048e21 	andeq	r8, r4, r1, lsr #28
    8028:	f1060000 	cps	#0
    802c:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    8030:	0003b422 	andeq	fp, r3, r2, lsr #8
    8034:	85060400 	strhi	r0, [r6, #-1024]	; 0xfffffc00
    8038:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
    803c:	00048e23 	andeq	r8, r4, r3, lsr #28
    8040:	0f000800 	svceq	0x00000800
    8044:	0003c204 	andeq	ip, r3, r4, lsl #4
    8048:	26310400 	ldrtcs	r0, [r1], -r0, lsl #8
    804c:	25050000 	strcs	r0, [r5, #-0]
    8050:	0000045d 	andeq	r0, r0, sp, asr r4
    8054:	00253b0a 	eoreq	r3, r5, sl, lsl #22
    8058:	21060c00 	tstcs	r6, r0, lsl #24
    805c:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8060:	0020e006 	eoreq	lr, r0, r6
    8064:	6d230600 	stcvs	6, cr0, [r3, #-0]
    8068:	00000005 	andeq	r0, r0, r5
    806c:	002c3c06 	eoreq	r3, ip, r6, lsl #24
    8070:	73250600 	teqvc	r5, #0, 12
    8074:	04000005 	streq	r0, [r0], #-5
    8078:	002a9506 	eoreq	r9, sl, r6, lsl #10
    807c:	79270600 	stmdbvc	r7!, {r9, sl}
    8080:	08000005 	stmdaeq	r0, {r0, r2}
    8084:	2ad10a00 	bcs	ff44a88c <_estack+0xf743a88c>
    8088:	07380000 	ldreq	r0, [r8, -r0]!
    808c:	00056d2d 	andeq	r6, r5, sp, lsr #26
    8090:	5a280600 	bpl	a09898 <mailbuffer+0x9ce7a8>
    8094:	2f070000 	svccs	0x00070000
    8098:	000005c5 	andeq	r0, r0, r5, asr #11
    809c:	24430600 	strbcs	r0, [r3], #-1536	; 0xfffffa00
    80a0:	31070000 	mrscc	r0, (UNDEF: 7)
    80a4:	00000614 	andeq	r0, r0, r4, lsl r6
    80a8:	207c0604 	rsbscs	r0, ip, r4, lsl #12
    80ac:	33070000 	movwcc	r0, #28672	; 0x7000
    80b0:	00000394 	muleq	r0, r4, r3
    80b4:	243b0608 	ldrtcs	r0, [fp], #-1544	; 0xfffff9f8
    80b8:	34070000 	strcc	r0, [r7], #-0
    80bc:	0000006c 	andeq	r0, r0, ip, rrx
    80c0:	22930609 	addscs	r0, r3, #9437184	; 0x900000
    80c4:	35070000 	strcc	r0, [r7, #-0]
    80c8:	0000067b 	andeq	r0, r0, fp, ror r6
    80cc:	1f7a060c 	svcne	0x007a060c
    80d0:	37070000 	strcc	r0, [r7, -r0]
    80d4:	00000394 	muleq	r0, r4, r3
    80d8:	26a90610 	ssatcs	r0, #10, r0, lsl #12
    80dc:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    80e0:	00000394 	muleq	r0, r4, r3
    80e4:	296f0611 	stmdbcs	pc!, {r0, r4, r9, sl}^	; <UNPREDICTABLE>
    80e8:	3a070000 	bcc	1c80f0 <mailbuffer+0x18d000>
    80ec:	00000681 	andeq	r0, r0, r1, lsl #13
    80f0:	1fb20614 	svcne	0x00b20614
    80f4:	3b070000 	blcc	1c80fc <mailbuffer+0x18d00c>
    80f8:	00000687 	andeq	r0, r0, r7, lsl #13
    80fc:	27fc0618 			; <UNDEFINED> instruction: 0x27fc0618
    8100:	3d070000 	stccc	0, cr0, [r7, #-0]
    8104:	0000068d 	andeq	r0, r0, sp, lsl #13
    8108:	2b34061c 	blcs	d09980 <mailbuffer+0xcce890>
    810c:	3f070000 	svccc	0x00070000
    8110:	0000057f 	andeq	r0, r0, pc, ror r5
    8114:	21780620 	cmncs	r8, r0, lsr #12
    8118:	40070000 	andmi	r0, r7, r0
    811c:	0000057f 	andeq	r0, r0, pc, ror r5
    8120:	040f002c 	streq	r0, [pc], #-44	; 8128 <__module_entries_end+0x48>
    8124:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8128:	0389040f 	orreq	r0, r9, #251658240	; 0xf000000
    812c:	040f0000 	streq	r0, [pc], #-0	; 8134 <__module_entries_end+0x54>
    8130:	00000494 	muleq	r0, r4, r4
    8134:	00253b04 	eoreq	r3, r5, r4, lsl #22
    8138:	9f290600 	svcls	0x00290600
    813c:	02000004 	andeq	r0, r0, #4
    8140:	ab220701 	blge	889d4c <mailbuffer+0x84ec5c>
    8144:	03000005 	movweq	r0, #5
    8148:	00003c69 	andeq	r3, r0, r9, ror #24
    814c:	3d700300 	ldclcc	3, cr0, [r0, #-0]
    8150:	03010000 	movweq	r0, #4096	; 0x1000
    8154:	00003c42 	andeq	r3, r0, r2, asr #24
    8158:	3b910302 	blcc	fe448d68 <_estack+0xf6438d68>
    815c:	00030000 	andeq	r0, r3, r0
    8160:	003be004 	eorseq	lr, fp, r4
    8164:	8a280700 	bhi	a09d6c <mailbuffer+0x9cec7c>
    8168:	12000005 	andne	r0, r0, #5
    816c:	000003d7 	ldrdeq	r0, [r0], -r7
    8170:	000005c5 	andeq	r0, r0, r5, asr #11
    8174:	00056d13 	andeq	r6, r5, r3, lsl sp
    8178:	040f0000 	streq	r0, [pc], #-0	; 8180 <__module_entries_end+0xa0>
    817c:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    8180:	0028760a 	eoreq	r7, r8, sl, lsl #12
    8184:	26085400 	strcs	r5, [r8], -r0, lsl #8
    8188:	00000614 	andeq	r0, r0, r4, lsl r6
    818c:	00273d06 	eoreq	r3, r7, r6, lsl #26
    8190:	b4280800 	strtlt	r0, [r8], #-2048	; 0xfffff800
    8194:	00000003 	andeq	r0, r0, r3
    8198:	001f3c06 	andseq	r3, pc, r6, lsl #24
    819c:	8f290800 	svchi	0x00290800
    81a0:	04000009 	streq	r0, [r0], #-9
    81a4:	0025da06 	eoreq	sp, r5, r6, lsl #20
    81a8:	942b0800 	strtls	r0, [fp], #-2048	; 0xfffff800
    81ac:	08000009 	stmdaeq	r0, {r0, r3}
    81b0:	00270b06 	eoreq	r0, r7, r6, lsl #22
    81b4:	aa2d0800 	bge	b4a1bc <mailbuffer+0xb0f0cc>
    81b8:	48000009 	stmdami	r0, {r0, r3}
    81bc:	002b4906 	eoreq	r4, fp, r6, lsl #18
    81c0:	bc2f0800 	stclt	8, cr0, [pc], #-0	; 81c8 <__module_entries_end+0xe8>
    81c4:	4c000007 	stcmi	0, cr0, [r0], {7}
    81c8:	cb040f00 	blgt	10bdd0 <mailbuffer+0xd0ce0>
    81cc:	0a000005 	beq	81e8 <__module_entries_end+0x108>
    81d0:	00002580 	andeq	r2, r0, r0, lsl #11
    81d4:	7b280918 	blvc	a0a63c <mailbuffer+0x9cf54c>
    81d8:	06000006 	streq	r0, [r0], -r6
    81dc:	000020e0 	andeq	r2, r0, r0, ror #1
    81e0:	06ca2a09 	strbeq	r2, [sl], r9, lsl #20
    81e4:	06000000 	streq	r0, [r0], -r0
    81e8:	00001fe8 	andeq	r1, r0, r8, ror #31
    81ec:	03942b09 	orrseq	r2, r4, #9216	; 0x2400
    81f0:	06040000 	streq	r0, [r4], -r0
    81f4:	00002149 	andeq	r2, r0, r9, asr #2
    81f8:	06bf2c09 	ldrteq	r2, [pc], r9, lsl #24
    81fc:	06050000 	streq	r0, [r5], -r0
    8200:	0000266b 	andeq	r2, r0, fp, ror #12
    8204:	03d72d09 	bicseq	r2, r7, #576	; 0x240
    8208:	06080000 	streq	r0, [r8], -r0
    820c:	000021d4 	ldrdeq	r2, [r0], -r4
    8210:	03a92e09 			; <UNDEFINED> instruction: 0x03a92e09
    8214:	060c0000 	streq	r0, [ip], -r0
    8218:	00002857 	andeq	r2, r0, r7, asr r8
    821c:	03b42f09 			; <UNDEFINED> instruction: 0x03b42f09
    8220:	06100000 	ldreq	r0, [r0], -r0
    8224:	000022d7 	ldrdeq	r2, [r0], -r7
    8228:	00403009 	subeq	r3, r0, r9
    822c:	00140000 	andseq	r0, r4, r0
    8230:	061a040f 	ldreq	r0, [sl], -pc, lsl #8
    8234:	040f0000 	streq	r0, [pc], #-0	; 823c <__module_entries_end+0x15c>
    8238:	00000186 	andeq	r0, r0, r6, lsl #3
    823c:	01fa040f 	mvnseq	r0, pc, lsl #8
    8240:	040f0000 	streq	r0, [pc], #-0	; 8248 <__module_entries_end+0x168>
    8244:	00000450 	andeq	r0, r0, r0, asr r4
    8248:	002ad104 	eoreq	sp, sl, r4, lsl #2
    824c:	d0420700 	suble	r0, r2, r0, lsl #14
    8250:	02000004 	andeq	r0, r0, #4
    8254:	bf200901 	svclt	0x00200901
    8258:	03000006 	movweq	r0, #6
    825c:	00002a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    8260:	1fc00300 	svcne	0x00c00300
    8264:	03010000 	movweq	r0, #4096	; 0x1000
    8268:	0000222e 	andeq	r2, r0, lr, lsr #4
    826c:	25c20302 	strbcs	r0, [r2, #770]	; 0x302
    8270:	00030000 	andeq	r0, r3, r0
    8274:	002afd04 	eoreq	pc, sl, r4, lsl #26
    8278:	9e260900 	cdpls	9, 2, cr0, cr6, cr0, {0}
    827c:	0f000006 	svceq	0x00000006
    8280:	00069304 	andeq	r9, r6, r4, lsl #6
    8284:	25800400 	strcs	r0, [r0, #1024]	; 0x400
    8288:	32090000 	andcc	r0, r9, #0
    828c:	0000061a 	andeq	r0, r0, sl, lsl r6
    8290:	00269304 	eoreq	r9, r6, r4, lsl #6
    8294:	e6210a00 	strt	r0, [r1], -r0, lsl #20
    8298:	14000006 	strne	r0, [r0], #-6
    829c:	000006fb 	strdeq	r0, [r0], -fp
    82a0:	0006fb13 	andeq	pc, r6, r3, lsl fp	; <UNPREDICTABLE>
    82a4:	045b1300 	ldrbeq	r1, [fp], #-768	; 0xfffffd00
    82a8:	5b130000 	blpl	4c82b0 <mailbuffer+0x48d1c0>
    82ac:	00000004 	andeq	r0, r0, r4
    82b0:	0701040f 	streq	r0, [r1, -pc, lsl #8]
    82b4:	070a0000 	streq	r0, [sl, -r0]
    82b8:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
    82bc:	077a230a 	ldrbeq	r2, [sl, -sl, lsl #6]!
    82c0:	7d060000 	stcvc	0, cr0, [r6, #-0]
    82c4:	0a000029 	beq	8370 <__module_entries_end+0x290>
    82c8:	00077a25 	andeq	r7, r7, r5, lsr #20
    82cc:	44060000 	strmi	r0, [r6], #-0
    82d0:	0a000028 	beq	8378 <__module_entries_end+0x298>
    82d4:	00078027 	andeq	r8, r7, r7, lsr #32
    82d8:	51060400 	tstpl	r6, r0, lsl #8
    82dc:	0a000026 	beq	837c <__module_entries_end+0x29c>
    82e0:	00045b28 	andeq	r5, r4, r8, lsr #22
    82e4:	0c060800 	stceq	8, cr0, [r6], {-0}
    82e8:	0a00002c 	beq	83a0 <__module_entries_end+0x2c0>
    82ec:	0003a929 	andeq	sl, r3, r9, lsr #18
    82f0:	3f060c00 	svccc	0x00060c00
    82f4:	0a000021 	beq	8380 <__module_entries_end+0x2a0>
    82f8:	0003d02b 	andeq	sp, r3, fp, lsr #32
    82fc:	eb061000 	bl	18c304 <mailbuffer+0x151214>
    8300:	0a000029 	beq	83ac <__module_entries_end+0x2cc>
    8304:	0003a92c 	andeq	sl, r3, ip, lsr #18
    8308:	ba061400 	blt	18d310 <mailbuffer+0x152220>
    830c:	0a000023 	beq	83a0 <__module_entries_end+0x2c0>
    8310:	0007862e 	andeq	r8, r7, lr, lsr #12
    8314:	59061800 	stmdbpl	r6, {fp, ip}
    8318:	0a000023 	beq	83ac <__module_entries_end+0x2cc>
    831c:	00045b2f 	andeq	r5, r4, pc, lsr #22
    8320:	13061c00 	movwne	r1, #27648	; 0x6c00
    8324:	0a00002b 	beq	83d8 <__module_entries_end+0x2f8>
    8328:	00045b30 	andeq	r5, r4, r0, lsr fp
    832c:	0f002000 	svceq	0x00002000
    8330:	0006d004 	andeq	sp, r6, r4
    8334:	ca040f00 	bgt	10bf3c <mailbuffer+0xd0e4c>
    8338:	0f000000 	svceq	0x00000000
    833c:	0006db04 	andeq	sp, r6, r4, lsl #22
    8340:	29070400 	stmdbcs	r7, {sl}
    8344:	320a0000 	andcc	r0, sl, #0
    8348:	00000701 	andeq	r0, r0, r1, lsl #14
    834c:	0027490a 	eoreq	r4, r7, sl, lsl #18
    8350:	200b0800 	andcs	r0, fp, r0, lsl #16
    8354:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    8358:	00244306 	eoreq	r4, r4, r6, lsl #6
    835c:	14220b00 	strtne	r0, [r2], #-2816	; 0xfffff500
    8360:	00000006 	andeq	r0, r0, r6
    8364:	0020e006 	eoreq	lr, r0, r6
    8368:	ca240b00 	bgt	90af70 <mailbuffer+0x8cfe80>
    836c:	04000006 	streq	r0, [r0], #-6
    8370:	27490400 	strbcs	r0, [r9, -r0, lsl #8]
    8374:	260b0000 	strcs	r0, [fp], -r0
    8378:	00000797 	muleq	r0, r7, r7
    837c:	00250d0a 	eoreq	r0, r5, sl, lsl #26
    8380:	1d0c1800 	stcne	8, cr1, [ip, #-0]
    8384:	0000081c 	andeq	r0, r0, ip, lsl r8
    8388:	0039ce06 	eorseq	ip, r9, r6, lsl #28
    838c:	2d1f0c00 	ldccs	12, cr0, [pc, #-0]	; 8394 <__module_entries_end+0x2b4>
    8390:	00000008 	andeq	r0, r0, r8
    8394:	00508606 	subseq	r8, r0, r6, lsl #12
    8398:	2d210c00 	stccs	12, cr0, [r1, #-0]
    839c:	04000008 	streq	r0, [r0], #-8
    83a0:	00504706 	subseq	r4, r0, r6, lsl #14
    83a4:	42220c00 	eormi	r0, r2, #0, 24
    83a8:	08000008 	stmdaeq	r0, {r3}
    83ac:	0036f406 	eorseq	pc, r6, r6, lsl #8
    83b0:	58230c00 	stmdapl	r3!, {sl, fp}
    83b4:	0c000008 	stceq	0, cr0, [r0], {8}
    83b8:	004fe906 	subeq	lr, pc, r6, lsl #18
    83bc:	2d250c00 	stccs	12, cr0, [r5, #-0]
    83c0:	10000008 	andne	r0, r0, r8
    83c4:	004fc006 	subeq	ip, pc, r6
    83c8:	42270c00 	eormi	r0, r7, #0, 24
    83cc:	14000008 	strne	r0, [r0], #-8
    83d0:	08271400 	stmdaeq	r7!, {sl, ip}
    83d4:	27130000 	ldrcs	r0, [r3, -r0]
    83d8:	00000008 	andeq	r0, r0, r8
    83dc:	07c7040f 	strbeq	r0, [r7, pc, lsl #8]
    83e0:	040f0000 	streq	r0, [pc], #-0	; 83e8 <__module_entries_end+0x308>
    83e4:	0000081c 	andeq	r0, r0, ip, lsl r8
    83e8:	0003d712 	andeq	sp, r3, r2, lsl r7
    83ec:	00084200 	andeq	r4, r8, r0, lsl #4
    83f0:	08271300 	stmdaeq	r7!, {r8, r9, ip}
    83f4:	0f000000 	svceq	0x00000000
    83f8:	00083304 	andeq	r3, r8, r4, lsl #6
    83fc:	08581400 	ldmdaeq	r8, {sl, ip}^
    8400:	27130000 	ldrcs	r0, [r3, -r0]
    8404:	13000008 	movwne	r0, #8
    8408:	000003a9 	andeq	r0, r0, r9, lsr #7
    840c:	48040f00 	stmdami	r4, {r8, r9, sl, fp}
    8410:	04000008 	streq	r0, [r0], #-8
    8414:	0000250d 	andeq	r2, r0, sp, lsl #10
    8418:	07c7290c 	strbeq	r2, [r7, ip, lsl #18]
    841c:	a00a0000 	andge	r0, sl, r0
    8420:	54000022 	strpl	r0, [r0], #-34	; 0xffffffde
    8424:	0972220d 	ldmdbeq	r2!, {r0, r2, r3, r9, sp}^
    8428:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
    842c:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
    8430:	0003b424 	andeq	fp, r3, r4, lsr #8
    8434:	2a060000 	bcs	18843c <mailbuffer+0x14d34c>
    8438:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    843c:	00097225 	andeq	r7, r9, r5, lsr #4
    8440:	bb060400 	bllt	189448 <mailbuffer+0x14e358>
    8444:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    8448:	0003d726 	andeq	sp, r3, r6, lsr #14
    844c:	67060800 	strvs	r0, [r6, -r0, lsl #16]
    8450:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8454:	0003d727 	andeq	sp, r3, r7, lsr #14
    8458:	bd060c00 	stclt	12, cr0, [r6, #-0]
    845c:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
    8460:	0003d729 	andeq	sp, r3, r9, lsr #14
    8464:	17061000 	strne	r1, [r6, -r0]
    8468:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    846c:	0003d72a 	andeq	sp, r3, sl, lsr #14
    8470:	e0061400 	and	r1, r6, r0, lsl #8
    8474:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    8478:	0006ca2c 	andeq	ip, r6, ip, lsr #20
    847c:	7d061800 	stcvc	8, cr1, [r6, #-0]
    8480:	0d000029 	stceq	0, cr0, [r0, #-164]	; 0xffffff5c
    8484:	00077a2d 	andeq	r7, r7, sp, lsr #20
    8488:	3b061c00 	blcc	18f490 <mailbuffer+0x1543a0>
    848c:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    8490:	00006c2e 	andeq	r6, r0, lr, lsr #24
    8494:	d4062000 	strle	r2, [r6], #-0
    8498:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    849c:	0003a92f 	andeq	sl, r3, pc, lsr #18
    84a0:	9c062400 	cfstrsls	mvf2, [r6], {-0}
    84a4:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    84a8:	0003a931 	andeq	sl, r3, r1, lsr r9
    84ac:	b0062800 	andlt	r2, r6, r0, lsl #16
    84b0:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    84b4:	0003b432 	andeq	fp, r3, r2, lsr r4
    84b8:	95062c00 	strls	r2, [r6, #-3072]	; 0xfffff400
    84bc:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    84c0:	0003a933 	andeq	sl, r3, r3, lsr r9
    84c4:	ea063000 	b	1944cc <mailbuffer+0x1593dc>
    84c8:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    84cc:	0003b434 	andeq	fp, r3, r4, lsr r4
    84d0:	39063400 	stmdbcc	r6, {sl, ip, sp}
    84d4:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    84d8:	0003a935 	andeq	sl, r3, r5, lsr r9
    84dc:	8c063800 	stchi	8, cr3, [r6], {-0}
    84e0:	0d000028 	stceq	0, cr0, [r0, #-160]	; 0xffffff60
    84e4:	0003b437 	andeq	fp, r3, r7, lsr r4
    84e8:	31063c00 	tstcc	r6, r0, lsl #24
    84ec:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    84f0:	0003b438 	andeq	fp, r3, r8, lsr r4
    84f4:	2f064000 	svccs	0x00064000
    84f8:	0d000028 	stceq	0, cr0, [r0, #-160]	; 0xffffff60
    84fc:	0003a939 	andeq	sl, r3, r9, lsr r9
    8500:	dc064400 	cfstrsle	mvf4, [r6], {-0}
    8504:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
    8508:	0009783b 	andeq	r7, r9, fp, lsr r8
    850c:	a7064800 	strge	r4, [r6, -r0, lsl #16]
    8510:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    8514:	00045b3c 	andeq	r5, r4, ip, lsr fp
    8518:	a0064c00 	andge	r4, r6, r0, lsl #24
    851c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    8520:	00097e3e 	andeq	r7, r9, lr, lsr lr
    8524:	0f005000 	svceq	0x00005000
    8528:	00078c04 	andeq	r8, r7, r4, lsl #24
    852c:	a9040f00 	stmdbge	r4, {r8, r9, sl, fp}
    8530:	0f000003 	svceq	0x00000003
    8534:	00085e04 	andeq	r5, r8, r4, lsl #28
    8538:	22a00400 	adccs	r0, r0, #0, 8
    853c:	400d0000 	andmi	r0, sp, r0
    8540:	00000869 	andeq	r0, r0, r9, ror #16
    8544:	0003b415 	andeq	fp, r3, r5, lsl r4
    8548:	09a40b00 	stmibeq	r4!, {r8, r9, fp}
    854c:	09a40000 	stmibeq	r4!, {}	; <UNPREDICTABLE>
    8550:	82160000 	andshi	r0, r6, #0
    8554:	0f000003 	svceq	0x00000003
    8558:	84040f00 	strhi	r0, [r4], #-3840	; 0xfffff100
    855c:	15000009 	strne	r0, [r0, #-9]
    8560:	000003d7 	ldrdeq	r0, [r0], -r7
    8564:	003bf40a 	eorseq	pc, fp, sl, lsl #8
    8568:	1d011200 	sfmne	f1, 4, [r1, #-0]
    856c:	000009d4 	ldrdeq	r0, [r0], -r4
    8570:	00279106 	eoreq	r9, r7, r6, lsl #2
    8574:	fa1f0100 	blx	7c897c <mailbuffer+0x78d88c>
    8578:	00000001 	andeq	r0, r0, r1
    857c:	003c4c06 	eorseq	r4, ip, r6, lsl #24
    8580:	7a200100 	bvc	808988 <mailbuffer+0x7cd898>
    8584:	09000002 	stmdbeq	r0, {r1}
    8588:	3bf40400 	blcc	ffd09590 <_estack+0xf7cf9590>
    858c:	22010000 	andcs	r0, r1, #0
    8590:	000009af 	andeq	r0, r0, pc, lsr #19
    8594:	002ad217 	eoreq	sp, sl, r7, lsl r2
    8598:	c02a0100 	eorgt	r0, sl, r0, lsl #2
    859c:	f00001eb 			; <UNDEFINED> instruction: 0xf00001eb
    85a0:	01000001 	tsteq	r0, r1
    85a4:	000a3b9c 	muleq	sl, ip, fp
    85a8:	43af1800 			; <UNDEFINED> instruction: 0x43af1800
    85ac:	2a010000 	bcs	485b4 <mailbuffer+0xd4c4>
    85b0:	000006ca 	andeq	r0, r0, sl, asr #13
    85b4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    85b8:	00002445 	andeq	r2, r0, r5, asr #8
    85bc:	06142a01 	ldreq	r2, [r4], -r1, lsl #20
    85c0:	91020000 	mrsls	r0, (UNDEF: 2)
    85c4:	24251868 	strtcs	r1, [r5], #-2152	; 0xfffff798
    85c8:	2a010000 	bcs	485d0 <mailbuffer+0xd4e0>
    85cc:	0000006c 	andeq	r0, r0, ip, rrx
    85d0:	18679102 	stmdane	r7!, {r1, r8, ip, pc}^
    85d4:	00001f7c 	andeq	r1, r0, ip, ror pc
    85d8:	03942a01 	orrseq	r2, r4, #4096	; 0x1000
    85dc:	91020000 	mrsls	r0, (UNDEF: 2)
    85e0:	26ab1866 	strtcs	r1, [fp], r6, ror #16
    85e4:	2a010000 	bcs	485ec <mailbuffer+0xd4fc>
    85e8:	00000394 	muleq	r0, r4, r3
    85ec:	00009102 	andeq	r9, r0, r2, lsl #2
    85f0:	003cfd17 	eorseq	pc, ip, r7, lsl sp	; <UNPREDICTABLE>
    85f4:	b0470100 	sublt	r0, r7, r0, lsl #2
    85f8:	400001ed 	andmi	r0, r0, sp, ror #3
    85fc:	01000003 	tsteq	r0, r3
    8600:	000a859c 	muleq	sl, ip, r5
    8604:	43af1800 			; <UNDEFINED> instruction: 0x43af1800
    8608:	47010000 	strmi	r0, [r1, -r0]
    860c:	000006ca 	andeq	r0, r0, sl, asr #13
    8610:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    8614:	000020e2 	andeq	r2, r0, r2, ror #1
    8618:	06ca4701 	strbeq	r4, [sl], r1, lsl #14
    861c:	91020000 	mrsls	r0, (UNDEF: 2)
    8620:	efcc1960 	svc	0x00cc1960
    8624:	01080001 	tsteq	r8, r1
    8628:	bf1a0000 	svclt	0x001a0000
    862c:	0100003b 	tsteq	r0, fp, lsr r0
    8630:	0003b46b 	andeq	fp, r3, fp, ror #8
    8634:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8638:	02170000 	andseq	r0, r7, #0
    863c:	01000025 	tsteq	r0, r5, lsr #32
    8640:	01f0f07c 	mvnseq	pc, ip, ror r0	; <UNPREDICTABLE>
    8644:	00017000 	andeq	r7, r1, r0
    8648:	a99c0100 	ldmibge	ip, {r8}
    864c:	1800000a 	stmdane	r0, {r1, r3}
    8650:	000043af 	andeq	r4, r0, pc, lsr #7
    8654:	06ca7c01 	strbeq	r7, [sl], r1, lsl #24
    8658:	91020000 	mrsls	r0, (UNDEF: 2)
    865c:	cc1b006c 	ldcgt	0, cr0, [fp], {108}	; 0x6c
    8660:	0100003b 	tsteq	r0, fp, lsr r0
    8664:	0003d7a2 	andeq	sp, r3, r2, lsr #15
    8668:	01f26000 	mvnseq	r6, r0
    866c:	00074c00 	andeq	r4, r7, r0, lsl #24
    8670:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    8674:	1800000b 	stmdane	r0, {r0, r1, r3}
    8678:	000043af 	andeq	r4, r0, pc, lsr #7
    867c:	06caa201 	strbeq	sl, [sl], r1, lsl #4
    8680:	91020000 	mrsls	r0, (UNDEF: 2)
    8684:	207e1a64 	rsbscs	r1, lr, r4, ror #20
    8688:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    868c:	00000394 	muleq	r0, r4, r3
    8690:	1c6f9102 	stfnep	f1, [pc], #-8	; 8690 <__module_entries_end+0x5b0>
    8694:	00003bbf 			; <UNDEFINED> instruction: 0x00003bbf
    8698:	b4011a01 	strlt	r1, [r1], #-2561	; 0xfffff5ff
    869c:	02000003 	andeq	r0, r0, #3
    86a0:	dc196891 	ldcle	8, cr6, [r9], {145}	; 0x91
    86a4:	900001f5 	strdls	r0, [r0], -r5
    86a8:	1a000000 	bne	86b0 <__module_entries_end+0x5d0>
    86ac:	00003d81 	andeq	r3, r0, r1, lsl #27
    86b0:	039eee01 	orrseq	lr, lr, #1, 28
    86b4:	91020000 	mrsls	r0, (UNDEF: 2)
    86b8:	1d00006c 	stcne	0, cr0, [r0, #-432]	; 0xfffffe50
    86bc:	00003c56 	andeq	r3, r0, r6, asr ip
    86c0:	d7014101 	strle	r4, [r1, -r1, lsl #2]
    86c4:	ac000003 	stcge	0, cr0, [r0], {3}
    86c8:	400001f9 	strdmi	r0, [r0], -r9
    86cc:	01000001 	tsteq	r0, r1
    86d0:	000b309c 	muleq	fp, ip, r0
    86d4:	43af1e00 			; <UNDEFINED> instruction: 0x43af1e00
    86d8:	41010000 	mrsmi	r0, (UNDEF: 1)
    86dc:	0006ca01 	andeq	ip, r6, r1, lsl #20
    86e0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    86e4:	3d1c1d00 	ldccc	13, cr1, [ip, #-0]
    86e8:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    86ec:	00057901 	andeq	r7, r5, r1, lsl #18
    86f0:	01faec00 	mvnseq	lr, r0, lsl #24
    86f4:	00029800 	andeq	r9, r2, r0, lsl #16
    86f8:	9d9c0100 	ldflss	f0, [ip]
    86fc:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    8700:	000043af 	andeq	r4, r0, pc, lsr #7
    8704:	ca015801 	bgt	5e710 <mailbuffer+0x23620>
    8708:	02000006 	andeq	r0, r0, #6
    870c:	eb1e6491 	bl	7a1958 <mailbuffer+0x766868>
    8710:	0100003b 	tsteq	r0, fp, lsr r0
    8714:	05ab0158 	streq	r0, [fp, #344]!	; 0x158
    8718:	91020000 	mrsls	r0, (UNDEF: 2)
    871c:	2a971c63 	bcs	fe5cf8b0 <_estack+0xf65bf8b0>
    8720:	5c010000 	stcpl	0, cr0, [r1], {-0}
    8724:	00057901 	andeq	r7, r5, r1, lsl #18
    8728:	6c910200 	lfmvs	f0, 4, [r1], {0}
    872c:	003bb71f 	eorseq	fp, fp, pc, lsl r7
    8730:	01870100 	orreq	r0, r7, r0, lsl #2
    8734:	0001fd48 	andeq	pc, r1, r8, asr #26
    8738:	01fc9019 	mvnseq	r9, r9, lsl r0
    873c:	00009c00 	andeq	r9, r0, r0, lsl #24
    8740:	3c3a1c00 	ldccc	12, cr1, [sl], #-0
    8744:	77010000 	strvc	r0, [r1, -r0]
    8748:	000b9d01 	andeq	r9, fp, r1, lsl #26
    874c:	68910200 	ldmvs	r1, {r9}
    8750:	040f0000 	streq	r0, [pc], #-0	; 8758 <__module_entries_end+0x678>
    8754:	000009d4 	ldrdeq	r0, [r0], -r4
    8758:	003ba31d 	eorseq	sl, fp, sp, lsl r3
    875c:	018f0100 	orreq	r0, pc, r0, lsl #2
    8760:	00000394 	muleq	r0, r4, r3
    8764:	0001fd84 	andeq	pc, r1, r4, lsl #27
    8768:	00000078 	andeq	r0, r0, r8, ror r0
    876c:	0bcd9c01 	bleq	ff36f778 <_estack+0xf735f778>
    8770:	af1e0000 	svcge	0x001e0000
    8774:	01000043 	tsteq	r0, r3, asr #32
    8778:	06ca018f 	strbeq	r0, [sl], pc, lsl #3
    877c:	91020000 	mrsls	r0, (UNDEF: 2)
    8780:	2d1d006c 	ldccs	0, cr0, [sp, #-432]	; 0xfffffe50
    8784:	0100003d 	tsteq	r0, sp, lsr r0
    8788:	006c0195 	mlseq	ip, r5, r1, r0
    878c:	fdfc0000 	ldc2l	0, cr0, [ip]
    8790:	00780001 	rsbseq	r0, r8, r1
    8794:	9c010000 	stcls	0, cr0, [r1], {-0}
    8798:	00000bf7 	strdeq	r0, [r0], -r7
    879c:	0043af1e 	subeq	sl, r3, lr, lsl pc
    87a0:	01950100 	orrseq	r0, r5, r0, lsl #2
    87a4:	000006ca 	andeq	r0, r0, sl, asr #13
    87a8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    87ac:	003d8e1d 	eorseq	r8, sp, sp, lsl lr
    87b0:	019b0100 	orrseq	r0, fp, r0, lsl #2
    87b4:	00000394 	muleq	r0, r4, r3
    87b8:	0001fe74 	andeq	pc, r1, r4, ror lr	; <UNPREDICTABLE>
    87bc:	00000078 	andeq	r0, r0, r8, ror r0
    87c0:	0c219c01 	stceq	12, cr9, [r1], #-4
    87c4:	af1e0000 	svcge	0x001e0000
    87c8:	01000043 	tsteq	r0, r3, asr #32
    87cc:	06ca019b 			; <UNDEFINED> instruction: 0x06ca019b
    87d0:	91020000 	mrsls	r0, (UNDEF: 2)
    87d4:	091d006c 	ldmdbeq	sp, {r2, r3, r5, r6}
    87d8:	0100003c 	tsteq	r0, ip, lsr r0
    87dc:	039401a1 	orrseq	r0, r4, #1073741864	; 0x40000028
    87e0:	feec0000 	cdp2	0, 14, cr0, cr12, cr0, {0}
    87e4:	00780001 	rsbseq	r0, r8, r1
    87e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    87ec:	00000c4b 	andeq	r0, r0, fp, asr #24
    87f0:	0043af1e 	subeq	sl, r3, lr, lsl pc
    87f4:	01a10100 			; <UNDEFINED> instruction: 0x01a10100
    87f8:	000006ca 	andeq	r0, r0, sl, asr #13
    87fc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    8800:	003ce71d 	eorseq	lr, ip, sp, lsl r7
    8804:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    8808:	0000067b 	andeq	r0, r0, fp, ror r6
    880c:	0001ff64 	andeq	pc, r1, r4, ror #30
    8810:	000000a0 	andeq	r0, r0, r0, lsr #1
    8814:	0c759c01 	ldcleq	12, cr9, [r5], #-4
    8818:	af1e0000 	svcge	0x001e0000
    881c:	01000043 	tsteq	r0, r3, asr #32
    8820:	06ca01a7 	strbeq	r0, [sl], r7, lsr #3
    8824:	91020000 	mrsls	r0, (UNDEF: 2)
    8828:	0b1d006c 	bleq	7489e0 <mailbuffer+0x70d8f0>
    882c:	0100003d 	tsteq	r0, sp, lsr r0
    8830:	061401ae 	ldreq	r0, [r4], -lr, lsr #3
    8834:	00040000 	andeq	r0, r4, r0
    8838:	00a00002 	adceq	r0, r0, r2
    883c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8840:	00000c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    8844:	0043af1e 	subeq	sl, r3, lr, lsl pc
    8848:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
    884c:	000006ca 	andeq	r0, r0, sl, asr #13
    8850:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    8854:	003d531d 	eorseq	r5, sp, sp, lsl r3
    8858:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    885c:	00000cc9 	andeq	r0, r0, r9, asr #25
    8860:	000200a4 	andeq	r0, r2, r4, lsr #1
    8864:	000000a0 	andeq	r0, r0, r0, lsr #1
    8868:	0cc99c01 	stcleq	12, cr9, [r9], {1}
    886c:	af1e0000 	svcge	0x001e0000
    8870:	01000043 	tsteq	r0, r3, asr #32
    8874:	06ca01b5 			; <UNDEFINED> instruction: 0x06ca01b5
    8878:	91020000 	mrsls	r0, (UNDEF: 2)
    887c:	040f006c 	streq	r0, [pc], #-108	; 8884 <__module_entries_end+0x7a4>
    8880:	00000ccf 	andeq	r0, r0, pc, asr #25
    8884:	00018610 	andeq	r8, r1, r0, lsl r6
    8888:	3dcc1d00 	stclcc	13, cr1, [ip]
    888c:	bc010000 	stclt	0, cr0, [r1], {-0}
    8890:	000cfe01 	andeq	pc, ip, r1, lsl #28
    8894:	02014400 	andeq	r4, r1, #0, 8
    8898:	0000a000 	andeq	sl, r0, r0
    889c:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    88a0:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    88a4:	000043af 	andeq	r4, r0, pc, lsr #7
    88a8:	ca01bc01 	bgt	778b4 <mailbuffer+0x3c7c4>
    88ac:	02000006 	andeq	r0, r0, #6
    88b0:	0f006c91 	svceq	0x00006c91
    88b4:	000d0404 	andeq	r0, sp, r4, lsl #8
    88b8:	01fa1000 	mvnseq	r1, r0
    88bc:	231d0000 	tstcs	sp, #0
    88c0:	0100003c 	tsteq	r0, ip, lsr r0
    88c4:	044501c3 	strbeq	r0, [r5], #-451	; 0xfffffe3d
    88c8:	01e40000 	mvneq	r0, r0
    88cc:	00bc0002 	adcseq	r0, ip, r2
    88d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    88d4:	00000d42 	andeq	r0, r0, r2, asr #26
    88d8:	0043af1e 	subeq	sl, r3, lr, lsl pc
    88dc:	01c30100 	biceq	r0, r3, r0, lsl #2
    88e0:	000006ca 	andeq	r0, r0, sl, asr #13
    88e4:	1e6c9102 	lgnnee	f1, f2
    88e8:	000030bb 	strheq	r3, [r0], -fp
    88ec:	9401c301 	strls	ip, [r1], #-769	; 0xfffffcff
    88f0:	02000003 	andeq	r0, r0, #3
    88f4:	20006b91 	mulcs	r0, r1, fp
    88f8:	00003db0 			; <UNDEFINED> instruction: 0x00003db0
    88fc:	a001ca01 	andge	ip, r1, r1, lsl #20
    8900:	a8000202 	stmdage	r0, {r1, r9}
    8904:	01000000 	mrseq	r0, (UNDEF: 0)
    8908:	000d779c 	muleq	sp, ip, r7
    890c:	43af1e00 			; <UNDEFINED> instruction: 0x43af1e00
    8910:	ca010000 	bgt	48918 <mailbuffer+0xd828>
    8914:	0006ca01 	andeq	ip, r6, r1, lsl #20
    8918:	6c910200 	lfmvs	f0, 4, [r1], {0}
    891c:	001a2e1e 	andseq	r2, sl, lr, lsl lr
    8920:	01ca0100 	biceq	r0, sl, r0, lsl #2
    8924:	00000d77 	andeq	r0, r0, r7, ror sp
    8928:	00689102 	rsbeq	r9, r8, r2, lsl #2
    892c:	0d7d040f 	cfldrdeq	mvd0, [sp, #-60]!	; 0xffffffc4
    8930:	c2100000 	andsgt	r0, r0, #0
    8934:	20000003 	andcs	r0, r0, r3
    8938:	00003d3f 	andeq	r3, r0, pc, lsr sp
    893c:	4801d101 	stmdami	r1, {r0, r8, ip, lr, pc}
    8940:	a4000203 	strge	r0, [r0], #-515	; 0xfffffdfd
    8944:	01000000 	mrseq	r0, (UNDEF: 0)
    8948:	000db79c 	muleq	sp, ip, r7
    894c:	43af1e00 			; <UNDEFINED> instruction: 0x43af1e00
    8950:	d1010000 	mrsle	r0, (UNDEF: 1)
    8954:	0006ca01 	andeq	ip, r6, r1, lsl #20
    8958:	6c910200 	lfmvs	f0, 4, [r1], {0}
    895c:	00207e1e 	eoreq	r7, r0, lr, lsl lr
    8960:	01d10100 	bicseq	r0, r1, r0, lsl #2
    8964:	00000394 	muleq	r0, r4, r3
    8968:	006b9102 	rsbeq	r9, fp, r2, lsl #2
    896c:	0003c20b 	andeq	ip, r3, fp, lsl #4
    8970:	000dc700 	andeq	ip, sp, r0, lsl #14
    8974:	03821600 	orreq	r1, r2, #0, 12
    8978:	00060000 	andeq	r0, r6, r0
    897c:	003da51a 	eorseq	sl, sp, sl, lsl r5
    8980:	d8260100 	stmdale	r6!, {r8}
    8984:	0500000d 	streq	r0, [r0, #-13]
    8988:	02eac003 	rsceq	ip, sl, #3
    898c:	0db71000 	ldceq	0, cr1, [r7]
    8990:	d71a0000 	ldrle	r0, [sl, -r0]
    8994:	0100003c 	tsteq	r0, ip, lsr r0
    8998:	00039428 	andeq	r9, r3, r8, lsr #8
    899c:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    89a0:	0000030b 	andeq	r0, r0, fp, lsl #6
    89a4:	000010cc 	andeq	r1, r0, ip, asr #1
    89a8:	181f0004 	ldmdane	pc, {r2}	; <UNPREDICTABLE>
    89ac:	01040000 	mrseq	r0, (UNDEF: 4)
    89b0:	00000019 	andeq	r0, r0, r9, lsl r0
    89b4:	003eda01 	eorseq	sp, lr, r1, lsl #20
    89b8:	000ddc00 	andeq	sp, sp, r0, lsl #24
    89bc:	0203ec00 	andeq	lr, r3, #0, 24
    89c0:	00047400 	andeq	r7, r4, r0, lsl #8
    89c4:	0030a900 	eorseq	sl, r0, r0, lsl #18
    89c8:	02010200 	andeq	r0, r1, #0, 4
    89cc:	0000401b 	andeq	r4, r0, fp, lsl r0
    89d0:	25460300 	strbcs	r0, [r6, #-768]	; 0xfffffd00
    89d4:	03000000 	movweq	r0, #0
    89d8:	00002b28 	andeq	r2, r0, r8, lsr #22
    89dc:	28bb0301 	ldmcs	fp!, {r0, r8, r9}
    89e0:	00020000 	andeq	r0, r2, r0
    89e4:	00221304 	eoreq	r1, r2, r4, lsl #6
    89e8:	25220200 	strcs	r0, [r2, #-512]!	; 0xfffffe00
    89ec:	02000000 	andeq	r0, r0, #0
    89f0:	6c2b0201 	sfmvs	f0, 4, [fp], #-4
    89f4:	03000000 	movweq	r0, #0
    89f8:	0000259a 	muleq	r0, sl, r5
    89fc:	2c490300 	mcrrcs	3, 0, r0, r9, cr0
    8a00:	03010000 	movweq	r0, #4096	; 0x1000
    8a04:	00002221 	andeq	r2, r0, r1, lsr #4
    8a08:	265b0302 	ldrbcs	r0, [fp], -r2, lsl #6
    8a0c:	00030000 	andeq	r0, r3, r0
    8a10:	00242104 	eoreq	r2, r4, r4, lsl #2
    8a14:	4b310200 	blmi	c4921c <mailbuffer+0xc0e12c>
    8a18:	05000000 	streq	r0, [r0, #-0]
    8a1c:	bc340208 	lfmlt	f0, 4, [r4], #-32	; 0xffffffe0
    8a20:	06000000 	streq	r0, [r0], -r0
    8a24:	00002276 	andeq	r2, r0, r6, ror r2
    8a28:	00bc3602 	adcseq	r3, ip, r2, lsl #12
    8a2c:	06000000 	streq	r0, [r0], -r0
    8a30:	000027d3 	ldrdeq	r2, [r0], -r3
    8a34:	00bc3702 	adcseq	r3, ip, r2, lsl #14
    8a38:	06010000 	streq	r0, [r1], -r0
    8a3c:	000021f3 	strdeq	r2, [r0], -r3
    8a40:	00c33802 	sbceq	r3, r3, r2, lsl #16
    8a44:	06020000 	streq	r0, [r2], -r0
    8a48:	00001f0c 	andeq	r1, r0, ip, lsl #30
    8a4c:	00c33902 	sbceq	r3, r3, r2, lsl #18
    8a50:	06040000 	streq	r0, [r4], -r0
    8a54:	00002bb3 			; <UNDEFINED> instruction: 0x00002bb3
    8a58:	00c33a02 	sbceq	r3, r3, r2, lsl #20
    8a5c:	00060000 	andeq	r0, r6, r0
    8a60:	2a080107 	bcs	208e84 <mailbuffer+0x1cdd94>
    8a64:	07000007 	streq	r0, [r0, -r7]
    8a68:	01320702 	teqeq	r2, r2, lsl #14
    8a6c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    8a70:	02000022 	andeq	r0, r0, #34	; 0x22
    8a74:	0000773d 	andeq	r7, r0, sp, lsr r7
    8a78:	02120500 	andseq	r0, r2, #0, 10
    8a7c:	0001865c 	andeq	r8, r1, ip, asr r6
    8a80:	29a80600 	stmibcs	r8!, {r9, sl}
    8a84:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    8a88:	000000bc 	strheq	r0, [r0], -ip
    8a8c:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    8a90:	5f020000 	svcpl	0x00020000
    8a94:	000000bc 	strheq	r0, [r0], -ip
    8a98:	228c0601 	addcs	r0, ip, #1048576	; 0x100000
    8a9c:	60020000 	andvs	r0, r2, r0
    8aa0:	000000c3 	andeq	r0, r0, r3, asr #1
    8aa4:	21280602 	teqcs	r8, r2, lsl #12
    8aa8:	61020000 	mrsvs	r0, (UNDEF: 2)
    8aac:	000000bc 	strheq	r0, [r0], -ip
    8ab0:	22f60604 	rscscs	r0, r6, #4, 12	; 0x400000
    8ab4:	62020000 	andvs	r0, r2, #0
    8ab8:	000000bc 	strheq	r0, [r0], -ip
    8abc:	279f0605 	ldrcs	r0, [pc, r5, lsl #12]
    8ac0:	63020000 	movwvs	r0, #8192	; 0x2000
    8ac4:	000000bc 	strheq	r0, [r0], -ip
    8ac8:	25e70606 	strbcs	r0, [r7, #1542]!	; 0x606
    8acc:	64020000 	strvs	r0, [r2], #-0
    8ad0:	000000bc 	strheq	r0, [r0], -ip
    8ad4:	2c560607 	mrrccs	6, 0, r0, r6, cr7
    8ad8:	66020000 	strvs	r0, [r2], -r0
    8adc:	000000c3 	andeq	r0, r0, r3, asr #1
    8ae0:	22440608 	subcs	r0, r4, #8, 12	; 0x800000
    8ae4:	67020000 	strvs	r0, [r2, -r0]
    8ae8:	000000c3 	andeq	r0, r0, r3, asr #1
    8aec:	2135060a 	teqcs	r5, sl, lsl #12
    8af0:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
    8af4:	000000c3 	andeq	r0, r0, r3, asr #1
    8af8:	21fa060c 	mvnscs	r0, ip, lsl #12
    8afc:	69020000 	stmdbvs	r2, {}	; <UNPREDICTABLE>
    8b00:	000000bc 	strheq	r0, [r0], -ip
    8b04:	233b060e 	teqcs	fp, #14680064	; 0xe00000
    8b08:	6a020000 	bvs	88b10 <mailbuffer+0x4da20>
    8b0c:	000000bc 	strheq	r0, [r0], -ip
    8b10:	2322060f 	teqcs	r2, #15728640	; 0xf00000
    8b14:	6b020000 	blvs	88b1c <mailbuffer+0x4da2c>
    8b18:	000000bc 	strheq	r0, [r0], -ip
    8b1c:	28a80610 	stmiacs	r8!, {r4, r9, sl}
    8b20:	6c020000 	stcvs	0, cr0, [r2], {-0}
    8b24:	000000bc 	strheq	r0, [r0], -ip
    8b28:	c7040011 	smladgt	r4, r1, r0, r0
    8b2c:	02000028 	andeq	r0, r0, #40	; 0x28
    8b30:	0000d56e 	andeq	sp, r0, lr, ror #10
    8b34:	02090500 	andeq	r0, r9, #0, 10
    8b38:	0001fa71 	andeq	pc, r1, r1, ror sl	; <UNPREDICTABLE>
    8b3c:	29a80600 	stmibcs	r8!, {r9, sl}
    8b40:	73020000 	movwvc	r0, #8192	; 0x2000
    8b44:	000000bc 	strheq	r0, [r0], -ip
    8b48:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    8b4c:	74020000 	strvc	r0, [r2], #-0
    8b50:	000000bc 	strheq	r0, [r0], -ip
    8b54:	20880601 	addcs	r0, r8, r1, lsl #12
    8b58:	75020000 	strvc	r0, [r2, #-0]
    8b5c:	000000c3 	andeq	r0, r0, r3, asr #1
    8b60:	29b00602 	ldmibcs	r0!, {r1, r9, sl}
    8b64:	76020000 	strvc	r0, [r2], -r0
    8b68:	000000bc 	strheq	r0, [r0], -ip
    8b6c:	2a4f0604 	bcs	13ca384 <mailbuffer+0x138f294>
    8b70:	77020000 	strvc	r0, [r2, -r0]
    8b74:	000000bc 	strheq	r0, [r0], -ip
    8b78:	27900605 	ldrcs	r0, [r0, r5, lsl #12]
    8b7c:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
    8b80:	000000bc 	strheq	r0, [r0], -ip
    8b84:	258d0606 	strcs	r0, [sp, #1542]	; 0x606
    8b88:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
    8b8c:	000000bc 	strheq	r0, [r0], -ip
    8b90:	2ab30607 	bcs	fecca3b4 <_estack+0xf6cba3b4>
    8b94:	7a020000 	bvc	88b9c <mailbuffer+0x4daac>
    8b98:	000000bc 	strheq	r0, [r0], -ip
    8b9c:	06040008 	streq	r0, [r4], -r8
    8ba0:	02000023 	andeq	r0, r0, #35	; 0x23
    8ba4:	0001917c 	andeq	r9, r1, ip, ror r1
    8ba8:	02090500 	andeq	r0, r9, #0, 10
    8bac:	00027a7f 	andeq	r7, r2, pc, ror sl
    8bb0:	29a80600 	stmibcs	r8!, {r9, sl}
    8bb4:	81020000 	mrshi	r0, (UNDEF: 2)
    8bb8:	000000bc 	strheq	r0, [r0], -ip
    8bbc:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    8bc0:	82020000 	andhi	r0, r2, #0
    8bc4:	000000bc 	strheq	r0, [r0], -ip
    8bc8:	20170601 	andscs	r0, r7, r1, lsl #12
    8bcc:	83020000 	movwhi	r0, #8192	; 0x2000
    8bd0:	000000bc 	strheq	r0, [r0], -ip
    8bd4:	20410602 	subcs	r0, r1, r2, lsl #12
    8bd8:	84020000 	strhi	r0, [r2], #-0
    8bdc:	000000bc 	strheq	r0, [r0], -ip
    8be0:	27690603 	strbcs	r0, [r9, -r3, lsl #12]!
    8be4:	85020000 	strhi	r0, [r2, #-0]
    8be8:	000000bc 	strheq	r0, [r0], -ip
    8bec:	27210604 	strcs	r0, [r1, -r4, lsl #12]!
    8bf0:	86020000 	strhi	r0, [r2], -r0
    8bf4:	000000bc 	strheq	r0, [r0], -ip
    8bf8:	1f290605 	svcne	0x00290605
    8bfc:	87020000 	strhi	r0, [r2, -r0]
    8c00:	000000bc 	strheq	r0, [r0], -ip
    8c04:	28950606 	ldmcs	r5, {r1, r2, r9, sl}
    8c08:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    8c0c:	000000bc 	strheq	r0, [r0], -ip
    8c10:	27160607 	ldrcs	r0, [r6, -r7, lsl #12]
    8c14:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    8c18:	000000bc 	strheq	r0, [r0], -ip
    8c1c:	e4040008 	str	r0, [r4], #-8
    8c20:	02000027 	andeq	r0, r0, #39	; 0x27
    8c24:	0002058b 	andeq	r0, r2, fp, lsl #11
    8c28:	02070500 	andeq	r0, r7, #0, 10
    8c2c:	0002d68e 	andeq	sp, r2, lr, lsl #13
    8c30:	29a80600 	stmibcs	r8!, {r9, sl}
    8c34:	90020000 	andls	r0, r2, r0
    8c38:	000000bc 	strheq	r0, [r0], -ip
    8c3c:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    8c40:	91020000 	mrsls	r0, (UNDEF: 2)
    8c44:	000000bc 	strheq	r0, [r0], -ip
    8c48:	26c90601 	strbcs	r0, [r9], r1, lsl #12
    8c4c:	92020000 	andls	r0, r2, #0
    8c50:	000000bc 	strheq	r0, [r0], -ip
    8c54:	258d0602 	strcs	r0, [sp, #1538]	; 0x602
    8c58:	93020000 	movwls	r0, #8192	; 0x2000
    8c5c:	000000bc 	strheq	r0, [r0], -ip
    8c60:	29600603 	stmdbcs	r0!, {r0, r1, r9, sl}^
    8c64:	94020000 	strls	r0, [r2], #-0
    8c68:	000000c3 	andeq	r0, r0, r3, asr #1
    8c6c:	25220604 	strcs	r0, [r2, #-1540]!	; 0xfffff9fc
    8c70:	95020000 	strls	r0, [r2, #-0]
    8c74:	000000bc 	strheq	r0, [r0], -ip
    8c78:	da040006 	ble	108c98 <mailbuffer+0xcdba8>
    8c7c:	0200002b 	andeq	r0, r0, #43	; 0x2b
    8c80:	00028597 	muleq	r2, r7, r5
    8c84:	02020500 	andeq	r0, r2, #0, 10
    8c88:	0003029c 	muleq	r3, ip, r2
    8c8c:	29a80600 	stmibcs	r8!, {r9, sl}
    8c90:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    8c94:	000000bc 	strheq	r0, [r0], -ip
    8c98:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    8c9c:	9f020000 	svcls	0x00020000
    8ca0:	000000bc 	strheq	r0, [r0], -ip
    8ca4:	09080001 	stmdbeq	r8, {r0}
    8ca8:	03379a02 	teqeq	r7, #8192	; 0x2000
    8cac:	02090000 	andeq	r0, r9, #0
    8cb0:	0200003c 	andeq	r0, r0, #60	; 0x3c
    8cb4:	0002e1a1 	andeq	lr, r2, r1, lsr #3
    8cb8:	27910900 	ldrcs	r0, [r1, r0, lsl #18]
    8cbc:	a3020000 	movwge	r0, #8192	; 0x2000
    8cc0:	000001fa 	strdeq	r0, [r0], -sl
    8cc4:	003c4c09 	eorseq	r4, ip, r9, lsl #24
    8cc8:	7aa40200 	bvc	fe9094d0 <_estack+0xf68f94d0>
    8ccc:	09000002 	stmdbeq	r0, {r1}
    8cd0:	00002584 	andeq	r2, r0, r4, lsl #11
    8cd4:	02d6a502 	sbcseq	sl, r6, #8388608	; 0x800000
    8cd8:	04000000 	streq	r0, [r0], #-0
    8cdc:	000026fc 	strdeq	r2, [r0], -ip
    8ce0:	0302a702 	movweq	sl, #9986	; 0x2702
    8ce4:	660a0000 	strvs	r0, [sl], -r0
    8ce8:	02000024 	andeq	r0, r0, #36	; 0x24
    8cec:	0373a902 	cmneq	r3, #32768	; 0x8000
    8cf0:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    8cf4:	02000029 	andeq	r0, r0, #41	; 0x29
    8cf8:	0000bcab 	andeq	fp, r0, fp, lsr #25
    8cfc:	2b060000 	blcs	188d04 <mailbuffer+0x14dc14>
    8d00:	02000024 	andeq	r0, r0, #36	; 0x24
    8d04:	0000bcac 	andeq	fp, r0, ip, lsr #25
    8d08:	74060100 	strvc	r0, [r6], #-256	; 0xffffff00
    8d0c:	02000020 	andeq	r0, r0, #32
    8d10:	000373ad 	andeq	r7, r3, sp, lsr #7
    8d14:	0b000200 	bleq	951c <__module_entries_end+0x143c>
    8d18:	000000c3 	andeq	r0, r0, r3, asr #1
    8d1c:	00000382 	andeq	r0, r0, r2, lsl #7
    8d20:	0003820c 	andeq	r8, r3, ip, lsl #4
    8d24:	04070000 	streq	r0, [r7], #-0
    8d28:	0001d407 	andeq	sp, r1, r7, lsl #8
    8d2c:	24660400 	strbtcs	r0, [r6], #-1024	; 0xfffffc00
    8d30:	af020000 	svcge	0x00020000
    8d34:	00000342 	andeq	r0, r0, r2, asr #6
    8d38:	0038750d 	eorseq	r7, r8, sp, lsl #10
    8d3c:	00bc1703 	adcseq	r1, ip, r3, lsl #14
    8d40:	750d0000 	strvc	r0, [sp, #-0]
    8d44:	03003631 	movweq	r3, #1585	; 0x631
    8d48:	0000c318 	andeq	ip, r0, r8, lsl r3
    8d4c:	33750d00 	cmncc	r5, #0, 26
    8d50:	19030032 	stmdbne	r3, {r1, r4, r5}
    8d54:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    8d58:	1d070407 	cfstrsne	mvf0, [r7, #-28]	; 0xffffffe4
    8d5c:	07000007 	streq	r0, [r0, -r7]
    8d60:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
    8d64:	01070000 	mrseq	r0, (UNDEF: 7)
    8d68:	00073306 	andeq	r3, r7, r6, lsl #6
    8d6c:	05020700 	streq	r0, [r2, #-1792]	; 0xfffff900
    8d70:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    8d74:	6905040e 	stmdbvs	r5, {r1, r2, r3, sl}
    8d78:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    8d7c:	00002930 	andeq	r2, r0, r0, lsr r9
    8d80:	03d02003 	bicseq	r2, r0, #3
    8d84:	04070000 	streq	r0, [r7], #-0
    8d88:	00071807 	andeq	r1, r7, r7, lsl #16
    8d8c:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
    8d90:	00000798 	muleq	r0, r8, r7
    8d94:	0025520a 	eoreq	r5, r5, sl, lsl #4
    8d98:	1e041800 	cdpne	8, 0, cr1, cr4, cr0, {0}
    8d9c:	00000445 	andeq	r0, r0, r5, asr #8
    8da0:	00265106 	eoreq	r5, r6, r6, lsl #2
    8da4:	45200400 	strmi	r0, [r0, #-1024]!	; 0xfffffc00
    8da8:	00000004 	andeq	r0, r0, r4
    8dac:	002c0c06 	eoreq	r0, ip, r6, lsl #24
    8db0:	b4210400 	strtlt	r0, [r1], #-1024	; 0xfffffc00
    8db4:	04000003 	streq	r0, [r0], #-3
    8db8:	00268a06 	eoreq	r8, r6, r6, lsl #20
    8dbc:	d7220400 	strle	r0, [r2, -r0, lsl #8]!
    8dc0:	08000003 	stmdaeq	r0, {r0, r1}
    8dc4:	00216906 	eoreq	r6, r1, r6, lsl #18
    8dc8:	45230400 	strmi	r0, [r3, #-1024]!	; 0xfffffc00
    8dcc:	0c000004 	stceq	0, cr0, [r0], {4}
    8dd0:	00277d06 	eoreq	r7, r7, r6, lsl #26
    8dd4:	45240400 	strmi	r0, [r4, #-1024]!	; 0xfffffc00
    8dd8:	10000004 	andne	r0, r0, r4
    8ddc:	002bbb06 	eoreq	fp, fp, r6, lsl #22
    8de0:	45250400 	strmi	r0, [r5, #-1024]!	; 0xfffffc00
    8de4:	14000004 	strne	r0, [r0], #-4
    8de8:	4b040f00 	blmi	10c9f0 <mailbuffer+0xd1900>
    8dec:	10000004 	andne	r0, r0, r4
    8df0:	00000337 	andeq	r0, r0, r7, lsr r3
    8df4:	00255204 	eoreq	r5, r5, r4, lsl #4
    8df8:	f0270400 			; <UNDEFINED> instruction: 0xf0270400
    8dfc:	11000003 	tstne	r0, r3
    8e00:	26310a04 	ldrtcs	r0, [r1], -r4, lsl #20
    8e04:	050c0000 	streq	r0, [ip, #-0]
    8e08:	00048e1f 	andeq	r8, r4, pc, lsl lr
    8e0c:	26510600 	ldrbcs	r0, [r1], -r0, lsl #12
    8e10:	21050000 	mrscs	r0, (UNDEF: 5)
    8e14:	0000048e 	andeq	r0, r0, lr, lsl #9
    8e18:	2bf10600 	blcs	ffc4a620 <_estack+0xf7c3a620>
    8e1c:	22050000 	andcs	r0, r5, #0
    8e20:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    8e24:	24850604 	strcs	r0, [r5], #1540	; 0x604
    8e28:	23050000 	movwcs	r0, #20480	; 0x5000
    8e2c:	0000048e 	andeq	r0, r0, lr, lsl #9
    8e30:	040f0008 	streq	r0, [pc], #-8	; 8e38 <__module_entries_end+0xd58>
    8e34:	000003c2 	andeq	r0, r0, r2, asr #7
    8e38:	00263104 	eoreq	r3, r6, r4, lsl #2
    8e3c:	5d250500 	cfstr32pl	mvfx0, [r5, #-0]
    8e40:	0a000004 	beq	8e58 <__module_entries_end+0xd78>
    8e44:	0000253b 	andeq	r2, r0, fp, lsr r5
    8e48:	d021060c 	eorle	r0, r1, ip, lsl #12
    8e4c:	06000004 	streq	r0, [r0], -r4
    8e50:	000020e0 	andeq	r2, r0, r0, ror #1
    8e54:	056d2306 	strbeq	r2, [sp, #-774]!	; 0xfffffcfa
    8e58:	06000000 	streq	r0, [r0], -r0
    8e5c:	00002c3c 	andeq	r2, r0, ip, lsr ip
    8e60:	05732506 	ldrbeq	r2, [r3, #-1286]!	; 0xfffffafa
    8e64:	06040000 	streq	r0, [r4], -r0
    8e68:	00002a95 	muleq	r0, r5, sl
    8e6c:	05792706 	ldrbeq	r2, [r9, #-1798]!	; 0xfffff8fa
    8e70:	00080000 	andeq	r0, r8, r0
    8e74:	002ad10a 	eoreq	sp, sl, sl, lsl #2
    8e78:	2d073800 	stccs	8, cr3, [r7, #-0]
    8e7c:	0000056d 	andeq	r0, r0, sp, ror #10
    8e80:	005a2806 	subseq	r2, sl, r6, lsl #16
    8e84:	ba2f0700 	blt	bcaa8c <mailbuffer+0xb8f99c>
    8e88:	00000005 	andeq	r0, r0, r5
    8e8c:	00244306 	eoreq	r4, r4, r6, lsl #6
    8e90:	09310700 	ldmdbeq	r1!, {r8, r9, sl}
    8e94:	04000006 	streq	r0, [r0], #-6
    8e98:	00207c06 	eoreq	r7, r0, r6, lsl #24
    8e9c:	94330700 	ldrtls	r0, [r3], #-1792	; 0xfffff900
    8ea0:	08000003 	stmdaeq	r0, {r0, r1}
    8ea4:	00243b06 	eoreq	r3, r4, r6, lsl #22
    8ea8:	6c340700 	ldcvs	7, cr0, [r4], #-0
    8eac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8eb0:	00229306 	eoreq	r9, r2, r6, lsl #6
    8eb4:	70350700 	eorsvc	r0, r5, r0, lsl #14
    8eb8:	0c000006 	stceq	0, cr0, [r0], {6}
    8ebc:	001f7a06 	andseq	r7, pc, r6, lsl #20
    8ec0:	94370700 	ldrtls	r0, [r7], #-1792	; 0xfffff900
    8ec4:	10000003 	andne	r0, r0, r3
    8ec8:	0026a906 	eoreq	sl, r6, r6, lsl #18
    8ecc:	94380700 	ldrtls	r0, [r8], #-1792	; 0xfffff900
    8ed0:	11000003 	tstne	r0, r3
    8ed4:	00296f06 	eoreq	r6, r9, r6, lsl #30
    8ed8:	763a0700 	ldrtvc	r0, [sl], -r0, lsl #14
    8edc:	14000006 	strne	r0, [r0], #-6
    8ee0:	001fb206 	andseq	fp, pc, r6, lsl #4
    8ee4:	7c3b0700 	ldcvc	7, cr0, [fp], #-0
    8ee8:	18000006 	stmdane	r0, {r1, r2}
    8eec:	0027fc06 	eoreq	pc, r7, r6, lsl #24
    8ef0:	823d0700 	eorshi	r0, sp, #0, 14
    8ef4:	1c000006 	stcne	0, cr0, [r0], {6}
    8ef8:	002b3406 	eoreq	r3, fp, r6, lsl #8
    8efc:	7f3f0700 	svcvc	0x003f0700
    8f00:	20000005 	andcs	r0, r0, r5
    8f04:	00217806 	eoreq	r7, r1, r6, lsl #16
    8f08:	7f400700 	svcvc	0x00400700
    8f0c:	2c000005 	stccs	0, cr0, [r0], {5}
    8f10:	d0040f00 	andle	r0, r4, r0, lsl #30
    8f14:	0f000004 	svceq	0x00000004
    8f18:	00038904 	andeq	r8, r3, r4, lsl #18
    8f1c:	94040f00 	strls	r0, [r4], #-3840	; 0xfffff100
    8f20:	04000004 	streq	r0, [r0], #-4
    8f24:	0000253b 	andeq	r2, r0, fp, lsr r5
    8f28:	049f2906 	ldreq	r2, [pc], #2310	; 8f30 <__module_entries_end+0xe50>
    8f2c:	01020000 	mrseq	r0, (UNDEF: 2)
    8f30:	05ab2207 	streq	r2, [fp, #519]!	; 0x207
    8f34:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    8f38:	0000003c 	andeq	r0, r0, ip, lsr r0
    8f3c:	003d7003 	eorseq	r7, sp, r3
    8f40:	42030100 	andmi	r0, r3, #0, 2
    8f44:	0200003c 	andeq	r0, r0, #60	; 0x3c
    8f48:	003b9103 	eorseq	r9, fp, r3, lsl #2
    8f4c:	12000300 	andne	r0, r0, #0, 6
    8f50:	000003d7 	ldrdeq	r0, [r0], -r7
    8f54:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
    8f58:	00056d13 	andeq	r6, r5, r3, lsl sp
    8f5c:	040f0000 	streq	r0, [pc], #-0	; 8f64 <__module_entries_end+0xe84>
    8f60:	000005ab 	andeq	r0, r0, fp, lsr #11
    8f64:	0028760a 	eoreq	r7, r8, sl, lsl #12
    8f68:	26085400 	strcs	r5, [r8], -r0, lsl #8
    8f6c:	00000609 	andeq	r0, r0, r9, lsl #12
    8f70:	00273d06 	eoreq	r3, r7, r6, lsl #26
    8f74:	b4280800 	strtlt	r0, [r8], #-2048	; 0xfffff800
    8f78:	00000003 	andeq	r0, r0, r3
    8f7c:	001f3c06 	andseq	r3, pc, r6, lsl #24
    8f80:	3c290800 	stccc	8, cr0, [r9], #-0
    8f84:	0400000a 	streq	r0, [r0], #-10
    8f88:	0025da06 	eoreq	sp, r5, r6, lsl #20
    8f8c:	412b0800 	teqmi	fp, r0, lsl #16
    8f90:	0800000a 	stmdaeq	r0, {r1, r3}
    8f94:	00270b06 	eoreq	r0, r7, r6, lsl #22
    8f98:	572d0800 	strpl	r0, [sp, -r0, lsl #16]!
    8f9c:	4800000a 	stmdami	r0, {r1, r3}
    8fa0:	002b4906 	eoreq	r4, fp, r6, lsl #18
    8fa4:	692f0800 	stmdbvs	pc!, {fp}	; <UNPREDICTABLE>
    8fa8:	4c000008 	stcmi	0, cr0, [r0], {8}
    8fac:	c0040f00 	andgt	r0, r4, r0, lsl #30
    8fb0:	0a000005 	beq	8fcc <__module_entries_end+0xeec>
    8fb4:	00002580 	andeq	r2, r0, r0, lsl #11
    8fb8:	70280918 	eorvc	r0, r8, r8, lsl r9
    8fbc:	06000006 	streq	r0, [r0], -r6
    8fc0:	000020e0 	andeq	r2, r0, r0, ror #1
    8fc4:	07772a09 	ldrbeq	r2, [r7, -r9, lsl #20]!
    8fc8:	06000000 	streq	r0, [r0], -r0
    8fcc:	00001fe8 	andeq	r1, r0, r8, ror #31
    8fd0:	03942b09 	orrseq	r2, r4, #9216	; 0x2400
    8fd4:	06040000 	streq	r0, [r4], -r0
    8fd8:	00002149 	andeq	r2, r0, r9, asr #2
    8fdc:	076c2c09 	strbeq	r2, [ip, -r9, lsl #24]!
    8fe0:	06050000 	streq	r0, [r5], -r0
    8fe4:	0000266b 	andeq	r2, r0, fp, ror #12
    8fe8:	03d72d09 	bicseq	r2, r7, #576	; 0x240
    8fec:	06080000 	streq	r0, [r8], -r0
    8ff0:	000021d4 	ldrdeq	r2, [r0], -r4
    8ff4:	03a92e09 			; <UNDEFINED> instruction: 0x03a92e09
    8ff8:	060c0000 	streq	r0, [ip], -r0
    8ffc:	00002857 	andeq	r2, r0, r7, asr r8
    9000:	03b42f09 			; <UNDEFINED> instruction: 0x03b42f09
    9004:	06100000 	ldreq	r0, [r0], -r0
    9008:	000022d7 	ldrdeq	r2, [r0], -r7
    900c:	00403009 	subeq	r3, r0, r9
    9010:	00140000 	andseq	r0, r4, r0
    9014:	060f040f 	streq	r0, [pc], -pc, lsl #8
    9018:	040f0000 	streq	r0, [pc], #-0	; 9020 <__module_entries_end+0xf40>
    901c:	00000186 	andeq	r0, r0, r6, lsl #3
    9020:	01fa040f 	mvnseq	r0, pc, lsl #8
    9024:	040f0000 	streq	r0, [pc], #-0	; 902c <__module_entries_end+0xf4c>
    9028:	00000450 	andeq	r0, r0, r0, asr r4
    902c:	002ad104 	eoreq	sp, sl, r4, lsl #2
    9030:	d0420700 	suble	r0, r2, r0, lsl #14
    9034:	0a000004 	beq	904c <__module_entries_end+0xf6c>
    9038:	00003e63 	andeq	r3, r0, r3, ror #28
    903c:	002c0a09 	eoreq	r0, ip, r9, lsl #20
    9040:	06000007 	streq	r0, [r0], -r7
    9044:	00003e47 	andeq	r3, r0, r7, asr #28
    9048:	00bc2e0a 	adcseq	r2, ip, sl, lsl #28
    904c:	06000000 	streq	r0, [r0], -r0
    9050:	0000242b 	andeq	r2, r0, fp, lsr #8
    9054:	00bc2f0a 	adcseq	r2, ip, sl, lsl #30
    9058:	06010000 	streq	r0, [r1], -r0
    905c:	00003ed0 	ldrdeq	r3, [r0], -r0
    9060:	00bc300a 	adcseq	r3, ip, sl
    9064:	06020000 	streq	r0, [r2], -r0
    9068:	00003e00 	andeq	r3, r0, r0, lsl #28
    906c:	00c3310a 	sbceq	r3, r3, sl, lsl #2
    9070:	06030000 	streq	r0, [r3], -r0
    9074:	00003e96 	muleq	r0, r6, lr
    9078:	00bc360a 	adcseq	r3, ip, sl, lsl #12
    907c:	06050000 	streq	r0, [r5], -r0
    9080:	00003ea5 	andeq	r3, r0, r5, lsr #29
    9084:	00bc370a 	adcseq	r3, ip, sl, lsl #14
    9088:	06060000 	streq	r0, [r6], -r0
    908c:	00003e14 	andeq	r3, r0, r4, lsl lr
    9090:	0700380a 	streq	r3, [r0, -sl, lsl #16]
    9094:	06070000 	streq	r0, [r7], -r0
    9098:	00003df0 	strdeq	r3, [r0], -r0
    909c:	0700390a 	streq	r3, [r0, -sl, lsl #18]
    90a0:	00080000 	andeq	r0, r8, r0
    90a4:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    90a8:	00071000 	andeq	r1, r7, r0
    90ac:	03821400 	orreq	r1, r2, #0, 8
    90b0:	00000000 	andeq	r0, r0, r0
    90b4:	003e6304 	eorseq	r6, lr, r4, lsl #6
    90b8:	933b0a00 	teqls	fp, #0, 20
    90bc:	0a000006 	beq	90dc <__module_entries_end+0xffc>
    90c0:	00003e75 	andeq	r3, r0, r5, ror lr
    90c4:	40480a04 	submi	r0, r8, r4, lsl #20
    90c8:	06000007 	streq	r0, [r0], -r7
    90cc:	00003f3e 	andeq	r3, r0, lr, lsr pc
    90d0:	00c34a0a 	sbceq	r4, r3, sl, lsl #20
    90d4:	06000000 	streq	r0, [r0], -r0
    90d8:	00003e30 	andeq	r3, r0, r0, lsr lr
    90dc:	00c3520a 	sbceq	r5, r3, sl, lsl #4
    90e0:	00020000 	andeq	r0, r2, r0
    90e4:	003e7504 	eorseq	r7, lr, r4, lsl #10
    90e8:	1b540a00 	blne	150b8f0 <mailbuffer+0x14d0800>
    90ec:	02000007 	andeq	r0, r0, #7
    90f0:	6c200901 	stcvs	9, cr0, [r0], #-4
    90f4:	03000007 	movweq	r0, #7
    90f8:	00002a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    90fc:	1fc00300 	svcne	0x00c00300
    9100:	03010000 	movweq	r0, #4096	; 0x1000
    9104:	0000222e 	andeq	r2, r0, lr, lsr #4
    9108:	25c20302 	strbcs	r0, [r2, #770]	; 0x302
    910c:	00030000 	andeq	r0, r3, r0
    9110:	002afd04 	eoreq	pc, sl, r4, lsl #26
    9114:	4b260900 	blmi	98b51c <mailbuffer+0x95042c>
    9118:	0f000007 	svceq	0x00000007
    911c:	00068804 	andeq	r8, r6, r4, lsl #16
    9120:	25800400 	strcs	r0, [r0, #1024]	; 0x400
    9124:	32090000 	andcc	r0, r9, #0
    9128:	0000060f 	andeq	r0, r0, pc, lsl #12
    912c:	00269304 	eoreq	r9, r6, r4, lsl #6
    9130:	93210b00 	teqls	r1, #0, 22
    9134:	15000007 	strne	r0, [r0, #-7]
    9138:	000007a8 	andeq	r0, r0, r8, lsr #15
    913c:	0007a813 	andeq	sl, r7, r3, lsl r8
    9140:	045b1300 	ldrbeq	r1, [fp], #-768	; 0xfffffd00
    9144:	5b130000 	blpl	4c914c <mailbuffer+0x48e05c>
    9148:	00000004 	andeq	r0, r0, r4
    914c:	07ae040f 	streq	r0, [lr, pc, lsl #8]!
    9150:	070a0000 	streq	r0, [sl, -r0]
    9154:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
    9158:	0827230b 	stmdaeq	r7!, {r0, r1, r3, r8, r9, sp}
    915c:	7d060000 	stcvc	0, cr0, [r6, #-0]
    9160:	0b000029 	bleq	920c <__module_entries_end+0x112c>
    9164:	00082725 	andeq	r2, r8, r5, lsr #14
    9168:	44060000 	strmi	r0, [r6], #-0
    916c:	0b000028 	bleq	9214 <__module_entries_end+0x1134>
    9170:	00082d27 	andeq	r2, r8, r7, lsr #26
    9174:	51060400 	tstpl	r6, r0, lsl #8
    9178:	0b000026 	bleq	9218 <__module_entries_end+0x1138>
    917c:	00045b28 	andeq	r5, r4, r8, lsr #22
    9180:	0c060800 	stceq	8, cr0, [r6], {-0}
    9184:	0b00002c 	bleq	923c <__module_entries_end+0x115c>
    9188:	0003a929 	andeq	sl, r3, r9, lsr #18
    918c:	3f060c00 	svccc	0x00060c00
    9190:	0b000021 	bleq	921c <__module_entries_end+0x113c>
    9194:	0003d02b 	andeq	sp, r3, fp, lsr #32
    9198:	eb061000 	bl	18d1a0 <mailbuffer+0x1520b0>
    919c:	0b000029 	bleq	9248 <__module_entries_end+0x1168>
    91a0:	0003a92c 	andeq	sl, r3, ip, lsr #18
    91a4:	ba061400 	blt	18e1ac <mailbuffer+0x1530bc>
    91a8:	0b000023 	bleq	923c <__module_entries_end+0x115c>
    91ac:	0008332e 	andeq	r3, r8, lr, lsr #6
    91b0:	59061800 	stmdbpl	r6, {fp, ip}
    91b4:	0b000023 	bleq	9248 <__module_entries_end+0x1168>
    91b8:	00045b2f 	andeq	r5, r4, pc, lsr #22
    91bc:	13061c00 	movwne	r1, #27648	; 0x6c00
    91c0:	0b00002b 	bleq	9274 <__module_entries_end+0x1194>
    91c4:	00045b30 	andeq	r5, r4, r0, lsr fp
    91c8:	0f002000 	svceq	0x00002000
    91cc:	00077d04 	andeq	r7, r7, r4, lsl #26
    91d0:	ca040f00 	bgt	10cdd8 <mailbuffer+0xd1ce8>
    91d4:	0f000000 	svceq	0x00000000
    91d8:	00078804 	andeq	r8, r7, r4, lsl #16
    91dc:	29070400 	stmdbcs	r7, {sl}
    91e0:	320b0000 	andcc	r0, fp, #0
    91e4:	000007ae 	andeq	r0, r0, lr, lsr #15
    91e8:	0027490a 	eoreq	r4, r7, sl, lsl #18
    91ec:	200c0800 	andcs	r0, ip, r0, lsl #16
    91f0:	00000869 	andeq	r0, r0, r9, ror #16
    91f4:	00244306 	eoreq	r4, r4, r6, lsl #6
    91f8:	09220c00 	stmdbeq	r2!, {sl, fp}
    91fc:	00000006 	andeq	r0, r0, r6
    9200:	0020e006 	eoreq	lr, r0, r6
    9204:	77240c00 	strvc	r0, [r4, -r0, lsl #24]!
    9208:	04000007 	streq	r0, [r0], #-7
    920c:	27490400 	strbcs	r0, [r9, -r0, lsl #8]
    9210:	260c0000 	strcs	r0, [ip], -r0
    9214:	00000844 	andeq	r0, r0, r4, asr #16
    9218:	00250d0a 	eoreq	r0, r5, sl, lsl #26
    921c:	1d0d1800 	stcne	8, cr1, [sp, #-0]
    9220:	000008c9 	andeq	r0, r0, r9, asr #17
    9224:	0039ce06 	eorseq	ip, r9, r6, lsl #28
    9228:	da1f0d00 	ble	7cc630 <mailbuffer+0x791540>
    922c:	00000008 	andeq	r0, r0, r8
    9230:	00508606 	subseq	r8, r0, r6, lsl #12
    9234:	da210d00 	ble	84c63c <mailbuffer+0x81154c>
    9238:	04000008 	streq	r0, [r0], #-8
    923c:	00504706 	subseq	r4, r0, r6, lsl #14
    9240:	ef220d00 	svc	0x00220d00
    9244:	08000008 	stmdaeq	r0, {r3}
    9248:	0036f406 	eorseq	pc, r6, r6, lsl #8
    924c:	05230d00 	streq	r0, [r3, #-3328]!	; 0xfffff300
    9250:	0c000009 	stceq	0, cr0, [r0], {9}
    9254:	004fe906 	subeq	lr, pc, r6, lsl #18
    9258:	da250d00 	ble	94c660 <mailbuffer+0x911570>
    925c:	10000008 	andne	r0, r0, r8
    9260:	004fc006 	subeq	ip, pc, r6
    9264:	ef270d00 	svc	0x00270d00
    9268:	14000008 	strne	r0, [r0], #-8
    926c:	08d41500 	ldmeq	r4, {r8, sl, ip}^
    9270:	d4130000 	ldrle	r0, [r3], #-0
    9274:	00000008 	andeq	r0, r0, r8
    9278:	0874040f 	ldmdaeq	r4!, {r0, r1, r2, r3, sl}^
    927c:	040f0000 	streq	r0, [pc], #-0	; 9284 <__module_entries_end+0x11a4>
    9280:	000008c9 	andeq	r0, r0, r9, asr #17
    9284:	0003d712 	andeq	sp, r3, r2, lsl r7
    9288:	0008ef00 	andeq	lr, r8, r0, lsl #30
    928c:	08d41300 	ldmeq	r4, {r8, r9, ip}^
    9290:	0f000000 	svceq	0x00000000
    9294:	0008e004 	andeq	lr, r8, r4
    9298:	09051500 	stmdbeq	r5, {r8, sl, ip}
    929c:	d4130000 	ldrle	r0, [r3], #-0
    92a0:	13000008 	movwne	r0, #8
    92a4:	000003a9 	andeq	r0, r0, r9, lsr #7
    92a8:	f5040f00 			; <UNDEFINED> instruction: 0xf5040f00
    92ac:	04000008 	streq	r0, [r0], #-8
    92b0:	0000250d 	andeq	r2, r0, sp, lsl #10
    92b4:	0874290d 	ldmdaeq	r4!, {r0, r2, r3, r8, fp, sp}^
    92b8:	a00a0000 	andge	r0, sl, r0
    92bc:	54000022 	strpl	r0, [r0], #-34	; 0xffffffde
    92c0:	0a1f220e 	beq	7d1b00 <mailbuffer+0x796a10>
    92c4:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
    92c8:	0e00002a 	cdpeq	0, 0, cr0, cr0, cr10, {1}
    92cc:	0003b424 	andeq	fp, r3, r4, lsr #8
    92d0:	2a060000 	bcs	1892d8 <mailbuffer+0x14e1e8>
    92d4:	0e000026 	cdpeq	0, 0, cr0, cr0, cr6, {1}
    92d8:	000a1f25 	andeq	r1, sl, r5, lsr #30
    92dc:	bb060400 	bllt	18a2e4 <mailbuffer+0x14f1f4>
    92e0:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    92e4:	0003d726 	andeq	sp, r3, r6, lsr #14
    92e8:	67060800 	strvs	r0, [r6, -r0, lsl #16]
    92ec:	0e000022 	cdpeq	0, 0, cr0, cr0, cr2, {1}
    92f0:	0003d727 	andeq	sp, r3, r7, lsr #14
    92f4:	bd060c00 	stclt	12, cr0, [r6, #-0]
    92f8:	0e00002a 	cdpeq	0, 0, cr0, cr0, cr10, {1}
    92fc:	0003d729 	andeq	sp, r3, r9, lsr #14
    9300:	17061000 	strne	r1, [r6, -r0]
    9304:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    9308:	0003d72a 	andeq	sp, r3, sl, lsr #14
    930c:	e0061400 	and	r1, r6, r0, lsl #8
    9310:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    9314:	0007772c 	andeq	r7, r7, ip, lsr #14
    9318:	7d061800 	stcvc	8, cr1, [r6, #-0]
    931c:	0e000029 	cdpeq	0, 0, cr0, cr0, cr9, {1}
    9320:	0008272d 	andeq	r2, r8, sp, lsr #14
    9324:	3b061c00 	blcc	19032c <mailbuffer+0x15523c>
    9328:	0e000024 	cdpeq	0, 0, cr0, cr0, cr4, {1}
    932c:	00006c2e 	andeq	r6, r0, lr, lsr #24
    9330:	d4062000 	strle	r2, [r6], #-0
    9334:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    9338:	0003a92f 	andeq	sl, r3, pc, lsr #18
    933c:	9c062400 	cfstrsls	mvf2, [r6], {-0}
    9340:	0e000023 	cdpeq	0, 0, cr0, cr0, cr3, {1}
    9344:	0003a931 	andeq	sl, r3, r1, lsr r9
    9348:	b0062800 	andlt	r2, r6, r0, lsl #16
    934c:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    9350:	0003b432 	andeq	fp, r3, r2, lsr r4
    9354:	95062c00 	strls	r2, [r6, #-3072]	; 0xfffff400
    9358:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    935c:	0003a933 	andeq	sl, r3, r3, lsr r9
    9360:	ea063000 	b	195368 <mailbuffer+0x15a278>
    9364:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    9368:	0003b434 	andeq	fp, r3, r4, lsr r4
    936c:	39063400 	stmdbcc	r6, {sl, ip, sp}
    9370:	0e000026 	cdpeq	0, 0, cr0, cr0, cr6, {1}
    9374:	0003a935 	andeq	sl, r3, r5, lsr r9
    9378:	8c063800 	stchi	8, cr3, [r6], {-0}
    937c:	0e000028 	cdpeq	0, 0, cr0, cr0, cr8, {1}
    9380:	0003b437 	andeq	fp, r3, r7, lsr r4
    9384:	31063c00 	tstcc	r6, r0, lsl #24
    9388:	0e000027 	cdpeq	0, 0, cr0, cr0, cr7, {1}
    938c:	0003b438 	andeq	fp, r3, r8, lsr r4
    9390:	2f064000 	svccs	0x00064000
    9394:	0e000028 	cdpeq	0, 0, cr0, cr0, cr8, {1}
    9398:	0003a939 	andeq	sl, r3, r9, lsr r9
    939c:	dc064400 	cfstrsle	mvf4, [r6], {-0}
    93a0:	0e00002a 	cdpeq	0, 0, cr0, cr0, cr10, {1}
    93a4:	000a253b 	andeq	r2, sl, fp, lsr r5
    93a8:	a7064800 	strge	r4, [r6, -r0, lsl #16]
    93ac:	0e000024 	cdpeq	0, 0, cr0, cr0, cr4, {1}
    93b0:	00045b3c 	andeq	r5, r4, ip, lsr fp
    93b4:	a0064c00 	andge	r4, r6, r0, lsl #24
    93b8:	0e00001f 	mcreq	0, 0, r0, cr0, cr15, {0}
    93bc:	000a2b3e 	andeq	r2, sl, lr, lsr fp
    93c0:	0f005000 	svceq	0x00005000
    93c4:	00083904 	andeq	r3, r8, r4, lsl #18
    93c8:	a9040f00 	stmdbge	r4, {r8, r9, sl, fp}
    93cc:	0f000003 	svceq	0x00000003
    93d0:	00090b04 	andeq	r0, r9, r4, lsl #22
    93d4:	22a00400 	adccs	r0, r0, #0, 8
    93d8:	400e0000 	andmi	r0, lr, r0
    93dc:	00000916 	andeq	r0, r0, r6, lsl r9
    93e0:	0003b416 	andeq	fp, r3, r6, lsl r4
    93e4:	0a510b00 	beq	144bfec <mailbuffer+0x1410efc>
    93e8:	0a510000 	beq	14493f0 <mailbuffer+0x140e300>
    93ec:	82140000 	andshi	r0, r4, #0
    93f0:	0f000003 	svceq	0x00000003
    93f4:	31040f00 	tstcc	r4, r0, lsl #30
    93f8:	1600000a 	strne	r0, [r0], -sl
    93fc:	000003d7 	ldrdeq	r0, [r0], -r7
    9400:	003e530a 	eorseq	r5, lr, sl, lsl #6
    9404:	220f8000 	andcs	r8, pc, #0
    9408:	00000aa5 	andeq	r0, r0, r5, lsr #21
    940c:	00250106 	eoreq	r0, r5, r6, lsl #2
    9410:	88240f00 	stmdahi	r4!, {r8, r9, sl, fp}
    9414:	00000006 	andeq	r0, r0, r6
    9418:	003e2506 	eorseq	r2, lr, r6, lsl #10
    941c:	a5260f00 	strge	r0, [r6, #-3840]!	; 0xfffff100
    9420:	3800000a 	stmdacc	r0, {r1, r3}
    9424:	003e3e06 	eorseq	r3, lr, r6, lsl #28
    9428:	b4280f00 	strtlt	r0, [r8], #-3840	; 0xfffff100
    942c:	3c000003 	stccc	0, cr0, [r0], {3}
    9430:	0020e006 	eoreq	lr, r0, r6
    9434:	ab290f00 	blge	a4d03c <mailbuffer+0xa11f4c>
    9438:	4000000a 	andmi	r0, r0, sl
    943c:	003e8406 	eorseq	r8, lr, r6, lsl #8
    9440:	bb2a0f00 	bllt	a8d048 <mailbuffer+0xa51f58>
    9444:	6000000a 	andvs	r0, r0, sl
    9448:	10040f00 	andne	r0, r4, r0, lsl #30
    944c:	0b000007 	bleq	9470 <__module_entries_end+0x1390>
    9450:	00000777 	andeq	r0, r0, r7, ror r7
    9454:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
    9458:	00038214 	andeq	r8, r3, r4, lsl r2
    945c:	0b000700 	bleq	b064 <__module_entries_end+0x2f84>
    9460:	00000acb 	andeq	r0, r0, fp, asr #21
    9464:	00000acb 	andeq	r0, r0, fp, asr #21
    9468:	00038214 	andeq	r8, r3, r4, lsl r2
    946c:	0f000700 	svceq	0x00000700
    9470:	00074004 	andeq	r4, r7, r4
    9474:	3e530400 	cdpcc	4, 5, cr0, cr3, cr0, {0}
    9478:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    947c:	00000a5c 	andeq	r0, r0, ip, asr sl
    9480:	001f5c0a 	andseq	r5, pc, sl, lsl #24
    9484:	25105000 	ldrcs	r5, [r0, #-0]
    9488:	00000b31 	andeq	r0, r0, r1, lsr fp
    948c:	00250106 	eoreq	r0, r5, r6, lsl #2
    9490:	88271000 	stmdahi	r7!, {ip}
    9494:	00000006 	andeq	r0, r0, r6
    9498:	002bcc06 	eoreq	ip, fp, r6, lsl #24
    949c:	27291000 	strcs	r1, [r9, -r0]!
    94a0:	38000008 	stmdacc	r0, {r3}
    94a4:	00252c06 	eoreq	r2, r5, r6, lsl #24
    94a8:	272a1000 	strcs	r1, [sl, -r0]!
    94ac:	3c000008 	stccc	0, cr0, [r0], {8}
    94b0:	0028dc06 	eoreq	sp, r8, r6, lsl #24
    94b4:	b42c1000 	strtlt	r1, [ip], #-0
    94b8:	40000003 	andmi	r0, r0, r3
    94bc:	0026bb06 	eoreq	fp, r6, r6, lsl #22
    94c0:	b42d1000 	strtlt	r1, [sp], #-0
    94c4:	44000003 	strmi	r0, [r0], #-3
    94c8:	00292406 	eoreq	r2, r9, r6, lsl #8
    94cc:	bb2e1000 	bllt	b8d4d4 <mailbuffer+0xb523e4>
    94d0:	48000003 	stmdami	r0, {r0, r1}
    94d4:	1f5c0400 	svcne	0x005c0400
    94d8:	30100000 	andscc	r0, r0, r0
    94dc:	00000adc 	ldrdeq	r0, [r0], -ip
    94e0:	00215017 	eoreq	r5, r1, r7, lsl r0
    94e4:	11018c00 	tstne	r1, r0, lsl #24
    94e8:	000b7d6f 	andeq	r7, fp, pc, ror #26
    94ec:	28830600 	stmcs	r3, {r9, sl}
    94f0:	71110000 	tstvc	r1, r0
    94f4:	00000b7d 	andeq	r0, r0, sp, ror fp
    94f8:	2c9c1800 	ldccs	8, cr1, [ip], {0}
    94fc:	73110000 	tstvc	r1, #0
    9500:	000003d7 	ldrdeq	r0, [r0], -r7
    9504:	8e180180 	mufhi<illegal precision>	f0, f0, f0
    9508:	11000024 	tstne	r0, r4, lsr #32
    950c:	0003d774 	andeq	sp, r3, r4, ror r7
    9510:	18018400 	stmdane	r1, {sl, pc}
    9514:	000023ac 	andeq	r2, r0, ip, lsr #7
    9518:	03d77511 	bicseq	r7, r7, #71303168	; 0x4400000
    951c:	01880000 	orreq	r0, r8, r0
    9520:	03940b00 	orrseq	r0, r4, #0, 22
    9524:	0b930000 	bleq	fe4c952c <_estack+0xf64b952c>
    9528:	82140000 	andshi	r0, r4, #0
    952c:	7f000003 	svcvc	0x00000003
    9530:	00038214 	andeq	r8, r3, r4, lsl r2
    9534:	04000200 	streq	r0, [r0], #-512	; 0xfffffe00
    9538:	00002150 	andeq	r2, r0, r0, asr r1
    953c:	0b3c7711 	bleq	f27188 <mailbuffer+0xeec098>
    9540:	d6040000 	strle	r0, [r4], -r0
    9544:	12000024 	andne	r0, r0, #36	; 0x24
    9548:	000ba91f 	andeq	sl, fp, pc, lsl r9
    954c:	0bb41500 	bleq	fed0e954 <_estack+0xf6cfe954>
    9550:	b4130000 	ldrlt	r0, [r3], #-0
    9554:	0000000b 	andeq	r0, r0, fp
    9558:	0bba040f 	bleq	fee8a59c <_estack+0xf6e7a59c>
    955c:	c2100000 	andsgt	r0, r0, #0
    9560:	04000003 	streq	r0, [r0], #-3
    9564:	000026da 	ldrdeq	r2, [r0], -sl
    9568:	0bca2012 	bleq	ff2915b8 <_estack+0xf72815b8>
    956c:	d5150000 	ldrle	r0, [r5, #-0]
    9570:	1300000b 	movwne	r0, #11
    9574:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    9578:	29130400 	ldmdbcs	r3, {sl}
    957c:	21120000 	tstcs	r2, r0
    9580:	00000be0 	andeq	r0, r0, r0, ror #23
    9584:	24b80419 	ldrtcs	r0, [r8], #1049	; 0x419
    9588:	24120000 	ldrcs	r0, [r2], #-0
    958c:	00000bec 	andeq	r0, r0, ip, ror #23
    9590:	000bfc15 	andeq	pc, fp, r5, lsl ip	; <UNPREDICTABLE>
    9594:	00bc1300 	adcseq	r1, ip, r0, lsl #6
    9598:	fc130000 	ldc2	0, cr0, [r3], {-0}
    959c:	0000000b 	andeq	r0, r0, fp
    95a0:	0c02040f 	cfstrseq	mvf0, [r2], {15}
    95a4:	bc100000 	ldclt	0, cr0, [r0], {-0}
    95a8:	17000000 	strne	r0, [r0, -r0]
    95ac:	00002863 	andeq	r2, r0, r3, ror #16
    95b0:	271201ec 	ldrcs	r0, [r2, -ip, ror #3]
    95b4:	00000cb1 			; <UNDEFINED> instruction: 0x00000cb1
    95b8:	00250106 	eoreq	r0, r5, r6, lsl #2
    95bc:	88291200 	stmdahi	r9!, {r9, ip}
    95c0:	00000006 	andeq	r0, r0, r6
    95c4:	00210306 	eoreq	r0, r1, r6, lsl #6
    95c8:	942b1200 	strtls	r1, [fp], #-512	; 0xfffffe00
    95cc:	38000003 	stmdacc	r0, {r0, r1}
    95d0:	0029d606 	eoreq	sp, r9, r6, lsl #12
    95d4:	942c1200 	strtls	r1, [ip], #-512	; 0xfffffe00
    95d8:	39000003 	stmdbcc	r0, {r0, r1}
    95dc:	00206206 	eoreq	r6, r0, r6, lsl #4
    95e0:	272e1200 	strcs	r1, [lr, -r0, lsl #4]!
    95e4:	3c000008 	stccc	0, cr0, [r0], {8}
    95e8:	0020ac06 	eoreq	sl, r0, r6, lsl #24
    95ec:	b1301200 	teqlt	r0, r0, lsl #4
    95f0:	4000000c 	andmi	r0, r0, ip
    95f4:	002a7106 	eoreq	r7, sl, r6, lsl #2
    95f8:	b7311200 	ldrlt	r1, [r1, -r0, lsl #4]!
    95fc:	4400000c 	strmi	r0, [r0], #-12
    9600:	0022c406 	eoreq	ip, r2, r6, lsl #8
    9604:	bd321200 	lfmlt	f1, 4, [r2, #-0]
    9608:	4800000c 	stmdami	r0, {r2, r3}
    960c:	00261306 	eoreq	r1, r6, r6, lsl #6
    9610:	c3331200 	teqgt	r3, #0, 4
    9614:	4c00000c 	stcmi	0, cr0, [r0], {12}
    9618:	00262a06 	eoreq	r2, r6, r6, lsl #20
    961c:	1f351200 	svcne	0x00351200
    9620:	5000000a 	andpl	r0, r0, sl
    9624:	002a3406 	eoreq	r3, sl, r6, lsl #8
    9628:	c9361200 	ldmdbgt	r6!, {r9, ip}
    962c:	5400000c 	strpl	r0, [r0], #-12
    9630:	00267a06 	eoreq	r7, r6, r6, lsl #20
    9634:	94381200 	ldrtls	r1, [r8], #-512	; 0xfffffe00
    9638:	58000003 	stmdapl	r0, {r0, r1}
    963c:	00295706 	eoreq	r5, r9, r6, lsl #14
    9640:	b4391200 	ldrtlt	r1, [r9], #-512	; 0xfffffe00
    9644:	5c000003 	stcpl	0, cr0, [r0], {3}
    9648:	00288306 	eoreq	r8, r8, r6, lsl #6
    964c:	933b1200 	teqls	fp, #0, 4
    9650:	6000000b 	andvs	r0, r0, fp
    9654:	9e040f00 	cdpls	15, 0, cr0, cr4, cr0, {0}
    9658:	0f00000b 	svceq	0x0000000b
    965c:	000bbf04 	andeq	fp, fp, r4, lsl #30
    9660:	d5040f00 	strle	r0, [r4, #-3840]	; 0xfffff100
    9664:	0f00000b 	svceq	0x0000000b
    9668:	000be104 	andeq	lr, fp, r4, lsl #2
    966c:	94040f00 	strls	r0, [r4], #-3840	; 0xfffff100
    9670:	04000003 	streq	r0, [r0], #-3
    9674:	00002863 	andeq	r2, r0, r3, ror #16
    9678:	0c073d12 	stceq	13, cr3, [r7], {18}
    967c:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    9680:	1300002c 	movwne	r0, #44	; 0x2c
    9684:	000ce51e 	andeq	lr, ip, lr, lsl r5
    9688:	0cfa1500 	cfldr64eq	mvdx1, [sl]
    968c:	b4130000 	ldrlt	r0, [r3], #-0
    9690:	13000003 	movwne	r0, #3
    9694:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    9698:	0003d013 	andeq	sp, r3, r3, lsl r0
    969c:	130a0000 	movwne	r0, #40960	; 0xa000
    96a0:	4c00001f 	stcmi	0, cr0, [r0], {31}
    96a4:	0d5b2013 	ldcleq	0, cr2, [fp, #-76]	; 0xffffffb4
    96a8:	01060000 	mrseq	r0, (UNDEF: 6)
    96ac:	13000025 	movwne	r0, #37	; 0x25
    96b0:	00068822 	andeq	r8, r6, r2, lsr #16
    96b4:	03060000 	movweq	r0, #24576	; 0x6000
    96b8:	13000021 	movwne	r0, #33	; 0x21
    96bc:	00039424 	andeq	r9, r3, r4, lsr #8
    96c0:	d6063800 	strle	r3, [r6], -r0, lsl #16
    96c4:	13000029 	movwne	r0, #41	; 0x29
    96c8:	00039425 	andeq	r9, r3, r5, lsr #8
    96cc:	62063900 	andvs	r3, r6, #0, 18
    96d0:	13000020 	movwne	r0, #32
    96d4:	00082727 	andeq	r2, r8, r7, lsr #14
    96d8:	58063c00 	stmdapl	r6, {sl, fp, ip, sp}
    96dc:	13000027 	movwne	r0, #39	; 0x27
    96e0:	000d5b29 	andeq	r5, sp, r9, lsr #22
    96e4:	2a064000 	bcs	1996ec <mailbuffer+0x15e5fc>
    96e8:	13000026 	movwne	r0, #38	; 0x26
    96ec:	000a1f2b 	andeq	r1, sl, fp, lsr #30
    96f0:	34064400 	strcc	r4, [r6], #-1024	; 0xfffffc00
    96f4:	1300002a 	movwne	r0, #42	; 0x2a
    96f8:	000cc92c 	andeq	ip, ip, ip, lsr #18
    96fc:	0f004800 	svceq	0x00004800
    9700:	000cda04 	andeq	sp, ip, r4, lsl #20
    9704:	1f130400 	svcne	0x00130400
    9708:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    970c:	00000cfa 	strdeq	r0, [r0], -sl
    9710:	96140c05 	ldrls	r0, [r4], -r5, lsl #24
    9714:	00000d99 	muleq	r0, r9, sp
    9718:	0012cf06 	andseq	ip, r2, r6, lsl #30
    971c:	d0981400 	addsle	r1, r8, r0, lsl #8
    9720:	00000003 	andeq	r0, r0, r3
    9724:	00228406 	eoreq	r8, r2, r6, lsl #8
    9728:	d0991400 	addsle	r1, r9, r0, lsl #8
    972c:	04000003 	streq	r0, [r0], #-3
    9730:	0027dc06 	eoreq	sp, r7, r6, lsl #24
    9734:	d09a1400 	addsle	r1, sl, r0, lsl #8
    9738:	08000003 	stmdaeq	r0, {r0, r1}
    973c:	281e0a00 	ldmdacs	lr, {r9, fp}
    9740:	14700000 	ldrbtne	r0, [r0], #-0
    9744:	000dee93 	muleq	sp, r3, lr
    9748:	241b0600 	ldrcs	r0, [fp], #-1536	; 0xfffffa00
    974c:	95140000 	ldrls	r0, [r4, #-0]
    9750:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    9754:	241c0600 	ldrcs	r0, [ip], #-1536	; 0xfffffa00
    9758:	9b140000 	blls	509760 <mailbuffer+0x4ce670>
    975c:	00000dee 	andeq	r0, r0, lr, ror #27
    9760:	20530604 	subscs	r0, r3, r4, lsl #12
    9764:	9d140000 	ldcls	0, cr0, [r4, #-0]
    9768:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    976c:	2054064c 	subscs	r0, r4, ip, asr #12
    9770:	9e140000 	cdpls	0, 1, cr0, cr4, cr0, {0}
    9774:	00000dfe 	strdeq	r0, [r0], -lr
    9778:	27af0650 	sbfxcs	r0, r0, #12, #16
    977c:	a0140000 	andsge	r0, r4, r0
    9780:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    9784:	27b00668 	ldrcs	r0, [r0, r8, ror #12]!
    9788:	a1140000 	tstge	r4, r0
    978c:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    9790:	6c0b006c 	stcvs	0, cr0, [fp], {108}	; 0x6c
    9794:	fe00000d 	cdp2	0, 0, cr0, cr0, cr13, {0}
    9798:	1400000d 	strne	r0, [r0], #-13
    979c:	00000382 	andeq	r0, r0, r2, lsl #7
    97a0:	d00b0005 	andle	r0, fp, r5
    97a4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    97a8:	1400000e 	strne	r0, [r0], #-14
    97ac:	00000382 	andeq	r0, r0, r2, lsl #7
    97b0:	1e040005 	cdpne	0, 0, cr0, cr4, cr5, {0}
    97b4:	14000028 	strne	r0, [r0], #-40	; 0xffffffd8
    97b8:	000d99a3 	andeq	r9, sp, r3, lsr #19
    97bc:	256a0400 	strbcs	r0, [sl, #-1024]!	; 0xfffffc00
    97c0:	a8140000 	ldmdage	r4, {}	; <UNPREDICTABLE>
    97c4:	00000e24 	andeq	r0, r0, r4, lsr #28
    97c8:	000e3415 	andeq	r3, lr, r5, lsl r4
    97cc:	03b41300 			; <UNDEFINED> instruction: 0x03b41300
    97d0:	34130000 	ldrcc	r0, [r3], #-0
    97d4:	0000000e 	andeq	r0, r0, lr
    97d8:	0e3a040f 	cdpeq	4, 3, cr0, cr10, cr15, {0}
    97dc:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    97e0:	0a00000e 	beq	9820 <__module_entries_end+0x1740>
    97e4:	00002989 	andeq	r2, r0, r9, lsl #19
    97e8:	e81f15d0 	ldmda	pc, {r4, r6, r7, r8, sl, ip}	; <UNPREDICTABLE>
    97ec:	0600000e 	streq	r0, [r0], -lr
    97f0:	00002501 	andeq	r2, r0, r1, lsl #10
    97f4:	06882115 	pkhbteq	r2, r8, r5, lsl #2
    97f8:	06000000 	streq	r0, [r0], -r0
    97fc:	00002008 	andeq	r2, r0, r8
    9800:	03b42215 			; <UNDEFINED> instruction: 0x03b42215
    9804:	06380000 	ldrteq	r0, [r8], -r0
    9808:	00002103 	andeq	r2, r0, r3, lsl #2
    980c:	03942415 	orrseq	r2, r4, #352321536	; 0x15000000
    9810:	063c0000 	ldrteq	r0, [ip], -r0
    9814:	000029d6 	ldrdeq	r2, [r0], -r6
    9818:	03942515 	orrseq	r2, r4, #88080384	; 0x5400000
    981c:	063d0000 	ldrteq	r0, [sp], -r0
    9820:	00002bcc 	andeq	r2, r0, ip, asr #23
    9824:	08272715 	stmdaeq	r7!, {r0, r2, r4, r8, r9, sl, sp}
    9828:	06400000 	strbeq	r0, [r0], -r0
    982c:	0000252c 	andeq	r2, r0, ip, lsr #10
    9830:	08272815 	stmdaeq	r7!, {r0, r2, r4, fp, sp}
    9834:	06440000 	strbeq	r0, [r4], -r0
    9838:	0000224e 	andeq	r2, r0, lr, asr #4
    983c:	0e0e2a15 	mcreq	10, 0, r2, cr14, cr5, {0}
    9840:	06480000 	strbeq	r0, [r8], -r0
    9844:	00002758 	andeq	r2, r0, r8, asr r7
    9848:	0ee82b15 	vdupeq.8	q4, r2
    984c:	06b80000 	ldrteq	r0, [r8], r0
    9850:	000027b8 			; <UNDEFINED> instruction: 0x000027b8
    9854:	039e2d15 	orrseq	r2, lr, #1344	; 0x540
    9858:	06bc0000 	ldrteq	r0, [ip], r0
    985c:	00001fd1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    9860:	0cc92e15 	stcleq	14, cr2, [r9], {21}
    9864:	06c00000 	strbeq	r0, [r0], r0
    9868:	0000262a 	andeq	r2, r0, sl, lsr #12
    986c:	0a1f3015 	beq	7d58c8 <mailbuffer+0x79a7d8>
    9870:	06c40000 	strbeq	r0, [r4], r0
    9874:	00002a34 	andeq	r2, r0, r4, lsr sl
    9878:	0cc93115 	stfeqe	f3, [r9], {21}
    987c:	06c80000 	strbeq	r0, [r8], r0
    9880:	000025f7 	strdeq	r2, [r0], -r7
    9884:	039e3215 	orrseq	r3, lr, #1342177281	; 0x50000001
    9888:	00cc0000 	sbceq	r0, ip, r0
    988c:	0e19040f 	cfmulseq	mvf0, mvf9, mvf15
    9890:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
    9894:	15000029 	strne	r0, [r0, #-41]	; 0xffffffd7
    9898:	000e3f34 	andeq	r3, lr, r4, lsr pc
    989c:	1f500a00 	svcne	0x00500a00
    98a0:	160c0000 	strne	r0, [ip], -r0
    98a4:	000f1e1c 	andeq	r1, pc, ip, lsl lr	; <UNPREDICTABLE>
    98a8:	268a0600 	strcs	r0, [sl], r0, lsl #12
    98ac:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
    98b0:	000003d7 	ldrdeq	r0, [r0], -r7
    98b4:	247b0600 	ldrbtcs	r0, [fp], #-1536	; 0xfffffa00
    98b8:	20160000 	andscs	r0, r6, r0
    98bc:	00000f1e 	andeq	r0, r0, lr, lsl pc
    98c0:	940b0004 	strls	r0, [fp], #-4
    98c4:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    98c8:	1400000f 	strne	r0, [r0], #-15
    98cc:	00000382 	andeq	r0, r0, r2, lsl #7
    98d0:	50040005 	andpl	r0, r4, r5
    98d4:	1600001f 			; <UNDEFINED> instruction: 0x1600001f
    98d8:	000ef922 	andeq	pc, lr, r2, lsr #18
    98dc:	29bf0a00 	ldmibcs	pc!, {r9, fp}	; <UNPREDICTABLE>
    98e0:	17500000 	ldrbne	r0, [r0, -r0]
    98e4:	000f821f 	andeq	r8, pc, pc, lsl r2	; <UNPREDICTABLE>
    98e8:	25010600 	strcs	r0, [r1, #-1536]	; 0xfffffa00
    98ec:	21170000 	tstcs	r7, r0
    98f0:	00000688 	andeq	r0, r0, r8, lsl #13
    98f4:	280c0600 	stmdacs	ip, {r9, sl}
    98f8:	23170000 	tstcs	r7, #0
    98fc:	00000827 	andeq	r0, r0, r7, lsr #16
    9900:	2aea0638 	bcs	ffa8b1e8 <_estack+0xf7a7b1e8>
    9904:	24170000 	ldrcs	r0, [r7], #-0
    9908:	00000827 	andeq	r0, r0, r7, lsr #16
    990c:	23de063c 	bicscs	r0, lr, #60, 12	; 0x3c00000
    9910:	26170000 	ldrcs	r0, [r7], -r0
    9914:	00000f2e 	andeq	r0, r0, lr, lsr #30
    9918:	2a890640 	bcs	fe24b220 <_estack+0xf623b220>
    991c:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
    9920:	00000cc9 	andeq	r0, r0, r9, asr #25
    9924:	bf04004c 	svclt	0x0004004c
    9928:	17000029 	strne	r0, [r0, -r9, lsr #32]
    992c:	000f392a 	andeq	r3, pc, sl, lsr #18
    9930:	3eb61a00 	vmovcc.f32	s2, #96	; 0x60
    9934:	22010000 	andcs	r0, r1, #0
    9938:	00000777 	andeq	r0, r0, r7, ror r7
    993c:	000203ec 	andeq	r0, r2, ip, ror #7
    9940:	00000124 	andeq	r0, r0, r4, lsr #2
    9944:	0fc39c01 	svceq	0x00c39c01
    9948:	8e1b0000 	cdphi	0, 1, cr0, cr11, cr0, {0}
    994c:	0100003e 	tsteq	r0, lr, lsr r0
    9950:	00077722 	andeq	r7, r7, r2, lsr #14
    9954:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    9958:	003b3a1c 	eorseq	r3, fp, ip, lsl sl
    995c:	77260100 	strvc	r0, [r6, -r0, lsl #2]!
    9960:	02000007 	andeq	r0, r0, #7
    9964:	1a006c91 	bne	24bb0 <SMSC951xDeviceDumpReg+0xc4>
    9968:	000043a3 	andeq	r4, r0, r3, lsr #7
    996c:	07773301 	ldrbeq	r3, [r7, -r1, lsl #6]!
    9970:	05100000 	ldreq	r0, [r0, #-0]
    9974:	03500002 	cmpeq	r0, #2
    9978:	9c010000 	stcls	0, cr0, [r1], {-0}
    997c:	000010ab 	andeq	r1, r0, fp, lsr #1
    9980:	003e8e1b 	eorseq	r8, lr, fp, lsl lr
    9984:	77330100 	ldrvc	r0, [r3, -r0, lsl #2]!
    9988:	02000007 	andeq	r0, r0, #7
    998c:	1b1b4c91 	blne	6dcbd8 <mailbuffer+0x6a1ae8>
    9990:	01000022 	tsteq	r0, r2, lsr #32
    9994:	00057933 	andeq	r7, r5, r3, lsr r9
    9998:	48910200 	ldmmi	r1, {r9}
    999c:	003b3a1c 	eorseq	r3, fp, ip, lsl sl
    99a0:	77380100 	ldrvc	r0, [r8, -r0, lsl #2]!
    99a4:	02000007 	andeq	r0, r0, #7
    99a8:	a81d6c91 	ldmdage	sp, {r0, r4, r7, sl, fp, sp, lr}
    99ac:	48000205 	stmdami	r0, {r0, r2, r9}
    99b0:	22000000 	andcs	r0, r0, #0
    99b4:	1c000010 	stcne	0, cr0, [r0], {16}
    99b8:	000020e2 	andeq	r2, r0, r2, ror #1
    99bc:	10ab3c01 	adcne	r3, fp, r1, lsl #24
    99c0:	91020000 	mrsls	r0, (UNDEF: 2)
    99c4:	101d0068 	andsne	r0, sp, r8, rrx
    99c8:	48000206 	stmdami	r0, {r1, r2, r9}
    99cc:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    99d0:	1c000010 	stcne	0, cr0, [r0], {16}
    99d4:	000020e2 	andeq	r2, r0, r2, ror #1
    99d8:	10b14301 	adcsne	r4, r1, r1, lsl #6
    99dc:	91020000 	mrsls	r0, (UNDEF: 2)
    99e0:	781d0064 	ldmdavc	sp, {r2, r5, r6}
    99e4:	48000206 	stmdami	r0, {r1, r2, r9}
    99e8:	5a000000 	bpl	99f0 <__module_entries_end+0x1910>
    99ec:	1c000010 	stcne	0, cr0, [r0], {16}
    99f0:	000020e2 	andeq	r2, r0, r2, ror #1
    99f4:	10b74a01 	adcsne	r4, r7, r1, lsl #20
    99f8:	91020000 	mrsls	r0, (UNDEF: 2)
    99fc:	e01d0060 	ands	r0, sp, r0, rrx
    9a00:	48000206 	stmdami	r0, {r1, r2, r9}
    9a04:	76000000 	strvc	r0, [r0], -r0
    9a08:	1c000010 	stcne	0, cr0, [r0], {16}
    9a0c:	000020e2 	andeq	r2, r0, r2, ror #1
    9a10:	10bd5101 	adcsne	r5, sp, r1, lsl #2
    9a14:	91020000 	mrsls	r0, (UNDEF: 2)
    9a18:	481d005c 	ldmdami	sp, {r2, r3, r4, r6}
    9a1c:	48000207 	stmdami	r0, {r0, r1, r2, r9}
    9a20:	92000000 	andls	r0, r0, #0
    9a24:	1c000010 	stcne	0, cr0, [r0], {16}
    9a28:	000020e2 	andeq	r2, r0, r2, ror #1
    9a2c:	10c35801 	sbcne	r5, r3, r1, lsl #16
    9a30:	91020000 	mrsls	r0, (UNDEF: 2)
    9a34:	b01e0058 	andslt	r0, lr, r8, asr r0
    9a38:	48000207 	stmdami	r0, {r0, r1, r2, r9}
    9a3c:	1c000000 	stcne	0, cr0, [r0], {-0}
    9a40:	000020e2 	andeq	r2, r0, r2, ror #1
    9a44:	10c95f01 	sbcne	r5, r9, r1, lsl #30
    9a48:	91020000 	mrsls	r0, (UNDEF: 2)
    9a4c:	0f000054 	svceq	0x00000054
    9a50:	000ad104 	andeq	sp, sl, r4, lsl #2
    9a54:	31040f00 	tstcc	r4, r0, lsl #30
    9a58:	0f00000b 	svceq	0x0000000b
    9a5c:	000ccf04 	andeq	ip, ip, r4, lsl #30
    9a60:	61040f00 	tstvs	r4, r0, lsl #30
    9a64:	0f00000d 	svceq	0x0000000d
    9a68:	000f8204 	andeq	r8, pc, r4, lsl #4
    9a6c:	ee040f00 	cdp	15, 0, cr0, cr4, cr0, {0}
    9a70:	0000000e 	andeq	r0, r0, lr
    9a74:	000008da 	ldrdeq	r0, [r0], -sl
    9a78:	19830004 	stmibne	r3, {r2}
    9a7c:	01040000 	mrseq	r0, (UNDEF: 4)
    9a80:	00000019 	andeq	r0, r0, r9, lsl r0
    9a84:	003ffc01 	eorseq	pc, pc, r1, lsl #24
    9a88:	000ddc00 	andeq	sp, sp, r0, lsl #24
    9a8c:	02086000 	andeq	r6, r8, #0
    9a90:	000ba400 	andeq	sl, fp, r0, lsl #8
    9a94:	0033c600 	eorseq	ip, r3, r0, lsl #12
    9a98:	02010200 	andeq	r0, r1, #0, 4
    9a9c:	0000401b 	andeq	r4, r0, fp, lsl r0
    9aa0:	25460300 	strbcs	r0, [r6, #-768]	; 0xfffffd00
    9aa4:	03000000 	movweq	r0, #0
    9aa8:	00002b28 	andeq	r2, r0, r8, lsr #22
    9aac:	28bb0301 	ldmcs	fp!, {r0, r8, r9}
    9ab0:	00020000 	andeq	r0, r2, r0
    9ab4:	00221304 	eoreq	r1, r2, r4, lsl #6
    9ab8:	25220200 	strcs	r0, [r2, #-512]!	; 0xfffffe00
    9abc:	02000000 	andeq	r0, r0, #0
    9ac0:	6c2b0201 	sfmvs	f0, 4, [fp], #-4
    9ac4:	03000000 	movweq	r0, #0
    9ac8:	0000259a 	muleq	r0, sl, r5
    9acc:	2c490300 	mcrrcs	3, 0, r0, r9, cr0
    9ad0:	03010000 	movweq	r0, #4096	; 0x1000
    9ad4:	00002221 	andeq	r2, r0, r1, lsr #4
    9ad8:	265b0302 	ldrbcs	r0, [fp], -r2, lsl #6
    9adc:	00030000 	andeq	r0, r3, r0
    9ae0:	00242104 	eoreq	r2, r4, r4, lsl #2
    9ae4:	4b310200 	blmi	c4a2ec <mailbuffer+0xc0f1fc>
    9ae8:	05000000 	streq	r0, [r0, #-0]
    9aec:	072a0801 	streq	r0, [sl, -r1, lsl #16]!
    9af0:	02050000 	andeq	r0, r5, #0
    9af4:	00013207 	andeq	r3, r1, r7, lsl #4
    9af8:	02120600 	andseq	r0, r2, #0, 12
    9afc:	0001365c 	andeq	r3, r1, ip, asr r6
    9b00:	29a80700 	stmibcs	r8!, {r8, r9, sl}
    9b04:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    9b08:	00000077 	andeq	r0, r0, r7, ror r0
    9b0c:	242b0700 	strtcs	r0, [fp], #-1792	; 0xfffff900
    9b10:	5f020000 	svcpl	0x00020000
    9b14:	00000077 	andeq	r0, r0, r7, ror r0
    9b18:	228c0701 	addcs	r0, ip, #262144	; 0x40000
    9b1c:	60020000 	andvs	r0, r2, r0
    9b20:	0000007e 	andeq	r0, r0, lr, ror r0
    9b24:	21280702 	teqcs	r8, r2, lsl #14
    9b28:	61020000 	mrsvs	r0, (UNDEF: 2)
    9b2c:	00000077 	andeq	r0, r0, r7, ror r0
    9b30:	22f60704 	rscscs	r0, r6, #4, 14	; 0x100000
    9b34:	62020000 	andvs	r0, r2, #0
    9b38:	00000077 	andeq	r0, r0, r7, ror r0
    9b3c:	279f0705 	ldrcs	r0, [pc, r5, lsl #14]
    9b40:	63020000 	movwvs	r0, #8192	; 0x2000
    9b44:	00000077 	andeq	r0, r0, r7, ror r0
    9b48:	25e70706 	strbcs	r0, [r7, #1798]!	; 0x706
    9b4c:	64020000 	strvs	r0, [r2], #-0
    9b50:	00000077 	andeq	r0, r0, r7, ror r0
    9b54:	2c560707 	mrrccs	7, 0, r0, r6, cr7
    9b58:	66020000 	strvs	r0, [r2], -r0
    9b5c:	0000007e 	andeq	r0, r0, lr, ror r0
    9b60:	22440708 	subcs	r0, r4, #8, 14	; 0x200000
    9b64:	67020000 	strvs	r0, [r2, -r0]
    9b68:	0000007e 	andeq	r0, r0, lr, ror r0
    9b6c:	2135070a 	teqcs	r5, sl, lsl #14
    9b70:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
    9b74:	0000007e 	andeq	r0, r0, lr, ror r0
    9b78:	21fa070c 	mvnscs	r0, ip, lsl #14
    9b7c:	69020000 	stmdbvs	r2, {}	; <UNPREDICTABLE>
    9b80:	00000077 	andeq	r0, r0, r7, ror r0
    9b84:	233b070e 	teqcs	fp, #3670016	; 0x380000
    9b88:	6a020000 	bvs	89b90 <mailbuffer+0x4eaa0>
    9b8c:	00000077 	andeq	r0, r0, r7, ror r0
    9b90:	2322070f 	teqcs	r2, #3932160	; 0x3c0000
    9b94:	6b020000 	blvs	89b9c <mailbuffer+0x4eaac>
    9b98:	00000077 	andeq	r0, r0, r7, ror r0
    9b9c:	28a80710 	stmiacs	r8!, {r4, r8, r9, sl}
    9ba0:	6c020000 	stcvs	0, cr0, [r2], {-0}
    9ba4:	00000077 	andeq	r0, r0, r7, ror r0
    9ba8:	c7040011 	smladgt	r4, r1, r0, r0
    9bac:	02000028 	andeq	r0, r0, #40	; 0x28
    9bb0:	0000856e 	andeq	r8, r0, lr, ror #10
    9bb4:	02090600 	andeq	r0, r9, #0, 12
    9bb8:	0001aa71 	andeq	sl, r1, r1, ror sl
    9bbc:	29a80700 	stmibcs	r8!, {r8, r9, sl}
    9bc0:	73020000 	movwvc	r0, #8192	; 0x2000
    9bc4:	00000077 	andeq	r0, r0, r7, ror r0
    9bc8:	242b0700 	strtcs	r0, [fp], #-1792	; 0xfffff900
    9bcc:	74020000 	strvc	r0, [r2], #-0
    9bd0:	00000077 	andeq	r0, r0, r7, ror r0
    9bd4:	20880701 	addcs	r0, r8, r1, lsl #14
    9bd8:	75020000 	strvc	r0, [r2, #-0]
    9bdc:	0000007e 	andeq	r0, r0, lr, ror r0
    9be0:	29b00702 	ldmibcs	r0!, {r1, r8, r9, sl}
    9be4:	76020000 	strvc	r0, [r2], -r0
    9be8:	00000077 	andeq	r0, r0, r7, ror r0
    9bec:	2a4f0704 	bcs	13cb804 <mailbuffer+0x1390714>
    9bf0:	77020000 	strvc	r0, [r2, -r0]
    9bf4:	00000077 	andeq	r0, r0, r7, ror r0
    9bf8:	27900705 	ldrcs	r0, [r0, r5, lsl #14]
    9bfc:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
    9c00:	00000077 	andeq	r0, r0, r7, ror r0
    9c04:	258d0706 	strcs	r0, [sp, #1798]	; 0x706
    9c08:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
    9c0c:	00000077 	andeq	r0, r0, r7, ror r0
    9c10:	2ab30707 	bcs	feccb834 <_estack+0xf6cbb834>
    9c14:	7a020000 	bvc	89c1c <mailbuffer+0x4eb2c>
    9c18:	00000077 	andeq	r0, r0, r7, ror r0
    9c1c:	06040008 	streq	r0, [r4], -r8
    9c20:	02000023 	andeq	r0, r0, #35	; 0x23
    9c24:	0001417c 	andeq	r4, r1, ip, ror r1
    9c28:	02090600 	andeq	r0, r9, #0, 12
    9c2c:	00022a7f 	andeq	r2, r2, pc, ror sl
    9c30:	29a80700 	stmibcs	r8!, {r8, r9, sl}
    9c34:	81020000 	mrshi	r0, (UNDEF: 2)
    9c38:	00000077 	andeq	r0, r0, r7, ror r0
    9c3c:	242b0700 	strtcs	r0, [fp], #-1792	; 0xfffff900
    9c40:	82020000 	andhi	r0, r2, #0
    9c44:	00000077 	andeq	r0, r0, r7, ror r0
    9c48:	20170701 	andscs	r0, r7, r1, lsl #14
    9c4c:	83020000 	movwhi	r0, #8192	; 0x2000
    9c50:	00000077 	andeq	r0, r0, r7, ror r0
    9c54:	20410702 	subcs	r0, r1, r2, lsl #14
    9c58:	84020000 	strhi	r0, [r2], #-0
    9c5c:	00000077 	andeq	r0, r0, r7, ror r0
    9c60:	27690703 	strbcs	r0, [r9, -r3, lsl #14]!
    9c64:	85020000 	strhi	r0, [r2, #-0]
    9c68:	00000077 	andeq	r0, r0, r7, ror r0
    9c6c:	27210704 	strcs	r0, [r1, -r4, lsl #14]!
    9c70:	86020000 	strhi	r0, [r2], -r0
    9c74:	00000077 	andeq	r0, r0, r7, ror r0
    9c78:	1f290705 	svcne	0x00290705
    9c7c:	87020000 	strhi	r0, [r2, -r0]
    9c80:	00000077 	andeq	r0, r0, r7, ror r0
    9c84:	28950706 	ldmcs	r5, {r1, r2, r8, r9, sl}
    9c88:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    9c8c:	00000077 	andeq	r0, r0, r7, ror r0
    9c90:	27160707 	ldrcs	r0, [r6, -r7, lsl #14]
    9c94:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    9c98:	00000077 	andeq	r0, r0, r7, ror r0
    9c9c:	e4040008 	str	r0, [r4], #-8
    9ca0:	02000027 	andeq	r0, r0, #39	; 0x27
    9ca4:	0001b58b 	andeq	fp, r1, fp, lsl #11
    9ca8:	02070600 	andeq	r0, r7, #0, 12
    9cac:	0002868e 	andeq	r8, r2, lr, lsl #13
    9cb0:	29a80700 	stmibcs	r8!, {r8, r9, sl}
    9cb4:	90020000 	andls	r0, r2, r0
    9cb8:	00000077 	andeq	r0, r0, r7, ror r0
    9cbc:	242b0700 	strtcs	r0, [fp], #-1792	; 0xfffff900
    9cc0:	91020000 	mrsls	r0, (UNDEF: 2)
    9cc4:	00000077 	andeq	r0, r0, r7, ror r0
    9cc8:	26c90701 	strbcs	r0, [r9], r1, lsl #14
    9ccc:	92020000 	andls	r0, r2, #0
    9cd0:	00000077 	andeq	r0, r0, r7, ror r0
    9cd4:	258d0702 	strcs	r0, [sp, #1794]	; 0x702
    9cd8:	93020000 	movwls	r0, #8192	; 0x2000
    9cdc:	00000077 	andeq	r0, r0, r7, ror r0
    9ce0:	29600703 	stmdbcs	r0!, {r0, r1, r8, r9, sl}^
    9ce4:	94020000 	strls	r0, [r2], #-0
    9ce8:	0000007e 	andeq	r0, r0, lr, ror r0
    9cec:	25220704 	strcs	r0, [r2, #-1796]!	; 0xfffff8fc
    9cf0:	95020000 	strls	r0, [r2, #-0]
    9cf4:	00000077 	andeq	r0, r0, r7, ror r0
    9cf8:	da040006 	ble	109d18 <mailbuffer+0xcec28>
    9cfc:	0200002b 	andeq	r0, r0, #43	; 0x2b
    9d00:	00023597 	muleq	r2, r7, r5
    9d04:	02020600 	andeq	r0, r2, #0, 12
    9d08:	0002b29c 	muleq	r2, ip, r2
    9d0c:	29a80700 	stmibcs	r8!, {r8, r9, sl}
    9d10:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    9d14:	00000077 	andeq	r0, r0, r7, ror r0
    9d18:	242b0700 	strtcs	r0, [fp], #-1792	; 0xfffff900
    9d1c:	9f020000 	svcls	0x00020000
    9d20:	00000077 	andeq	r0, r0, r7, ror r0
    9d24:	09080001 	stmdbeq	r8, {r0}
    9d28:	02e79a02 	rsceq	r9, r7, #8192	; 0x2000
    9d2c:	02090000 	andeq	r0, r9, #0
    9d30:	0200003c 	andeq	r0, r0, #60	; 0x3c
    9d34:	000291a1 	andeq	r9, r2, r1, lsr #3
    9d38:	27910900 	ldrcs	r0, [r1, r0, lsl #18]
    9d3c:	a3020000 	movwge	r0, #8192	; 0x2000
    9d40:	000001aa 	andeq	r0, r0, sl, lsr #3
    9d44:	003c4c09 	eorseq	r4, ip, r9, lsl #24
    9d48:	2aa40200 	bcs	fe90a550 <_estack+0xf68fa550>
    9d4c:	09000002 	stmdbeq	r0, {r1}
    9d50:	00002584 	andeq	r2, r0, r4, lsl #11
    9d54:	0286a502 	addeq	sl, r6, #8388608	; 0x800000
    9d58:	04000000 	streq	r0, [r0], #-0
    9d5c:	000026fc 	strdeq	r2, [r0], -ip
    9d60:	02b2a702 	adcseq	sl, r2, #524288	; 0x80000
    9d64:	660a0000 	strvs	r0, [sl], -r0
    9d68:	02000024 	andeq	r0, r0, #36	; 0x24
    9d6c:	0323a902 	teqeq	r3, #32768	; 0x8000
    9d70:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    9d74:	02000029 	andeq	r0, r0, #41	; 0x29
    9d78:	000077ab 	andeq	r7, r0, fp, lsr #15
    9d7c:	2b070000 	blcs	1c9d84 <mailbuffer+0x18ec94>
    9d80:	02000024 	andeq	r0, r0, #36	; 0x24
    9d84:	000077ac 	andeq	r7, r0, ip, lsr #15
    9d88:	74070100 	strvc	r0, [r7], #-256	; 0xffffff00
    9d8c:	02000020 	andeq	r0, r0, #32
    9d90:	000323ad 	andeq	r2, r3, sp, lsr #7
    9d94:	0b000200 	bleq	a59c <__module_entries_end+0x24bc>
    9d98:	0000007e 	andeq	r0, r0, lr, ror r0
    9d9c:	00000332 	andeq	r0, r0, r2, lsr r3
    9da0:	0003320c 	andeq	r3, r3, ip, lsl #4
    9da4:	04050000 	streq	r0, [r5], #-0
    9da8:	0001d407 	andeq	sp, r1, r7, lsl #8
    9dac:	24660400 	strbtcs	r0, [r6], #-1024	; 0xfffffc00
    9db0:	af020000 	svcge	0x00020000
    9db4:	000002f2 	strdeq	r0, [r0], -r2
    9db8:	0038750d 	eorseq	r7, r8, sp, lsl #10
    9dbc:	00771703 	rsbseq	r1, r7, r3, lsl #14
    9dc0:	750d0000 	strvc	r0, [sp, #-0]
    9dc4:	03003233 	movweq	r3, #563	; 0x233
    9dc8:	00035919 	andeq	r5, r3, r9, lsl r9
    9dcc:	07040500 	streq	r0, [r4, -r0, lsl #10]
    9dd0:	0000071d 	andeq	r0, r0, sp, lsl r7
    9dd4:	13070805 	movwne	r0, #30725	; 0x7805
    9dd8:	05000007 	streq	r0, [r0, #-7]
    9ddc:	07330601 	ldreq	r0, [r3, -r1, lsl #12]!
    9de0:	02050000 	andeq	r0, r5, #0
    9de4:	0007b805 	andeq	fp, r7, r5, lsl #16
    9de8:	05040e00 	streq	r0, [r4, #-3584]	; 0xfffff200
    9dec:	00746e69 	rsbseq	r6, r4, r9, ror #28
    9df0:	00293004 	eoreq	r3, r9, r4
    9df4:	75200300 	strvc	r0, [r0, #-768]!	; 0xfffffd00
    9df8:	05000003 	streq	r0, [r0, #-3]
    9dfc:	07180704 	ldreq	r0, [r8, -r4, lsl #14]
    9e00:	04050000 	streq	r0, [r5], #-0
    9e04:	00079805 	andeq	r9, r7, r5, lsl #16
    9e08:	25520a00 	ldrbcs	r0, [r2, #-2560]	; 0xfffff600
    9e0c:	04180000 	ldreq	r0, [r8], #-0
    9e10:	0003ea1e 	andeq	lr, r3, lr, lsl sl
    9e14:	26510700 	ldrbcs	r0, [r1], -r0, lsl #14
    9e18:	20040000 	andcs	r0, r4, r0
    9e1c:	000003ea 	andeq	r0, r0, sl, ror #7
    9e20:	2c0c0700 	stccs	7, cr0, [ip], {-0}
    9e24:	21040000 	mrscs	r0, (UNDEF: 4)
    9e28:	00000359 	andeq	r0, r0, r9, asr r3
    9e2c:	268a0704 	strcs	r0, [sl], r4, lsl #14
    9e30:	22040000 	andcs	r0, r4, #0
    9e34:	0000037c 	andeq	r0, r0, ip, ror r3
    9e38:	21690708 	cmncs	r9, r8, lsl #14
    9e3c:	23040000 	movwcs	r0, #16384	; 0x4000
    9e40:	000003ea 	andeq	r0, r0, sl, ror #7
    9e44:	277d070c 	ldrbcs	r0, [sp, -ip, lsl #14]!
    9e48:	24040000 	strcs	r0, [r4], #-0
    9e4c:	000003ea 	andeq	r0, r0, sl, ror #7
    9e50:	2bbb0710 	blcs	feecba98 <_estack+0xf6ebba98>
    9e54:	25040000 	strcs	r0, [r4, #-0]
    9e58:	000003ea 	andeq	r0, r0, sl, ror #7
    9e5c:	040f0014 	streq	r0, [pc], #-20	; 9e64 <__module_entries_end+0x1d84>
    9e60:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    9e64:	0002e710 	andeq	lr, r2, r0, lsl r7
    9e68:	25520400 	ldrbcs	r0, [r2, #-1024]	; 0xfffffc00
    9e6c:	27040000 	strcs	r0, [r4, -r0]
    9e70:	00000395 	muleq	r0, r5, r3
    9e74:	0026310a 	eoreq	r3, r6, sl, lsl #2
    9e78:	1f050c00 	svcne	0x00050c00
    9e7c:	00000431 	andeq	r0, r0, r1, lsr r4
    9e80:	00265107 	eoreq	r5, r6, r7, lsl #2
    9e84:	31210500 	teqcc	r1, r0, lsl #10
    9e88:	00000004 	andeq	r0, r0, r4
    9e8c:	002bf107 	eoreq	pc, fp, r7, lsl #2
    9e90:	59220500 	stmdbpl	r2!, {r8, sl}
    9e94:	04000003 	streq	r0, [r0], #-3
    9e98:	00248507 	eoreq	r8, r4, r7, lsl #10
    9e9c:	31230500 	teqcc	r3, r0, lsl #10
    9ea0:	08000004 	stmdaeq	r0, {r2}
    9ea4:	67040f00 	strvs	r0, [r4, -r0, lsl #30]
    9ea8:	04000003 	streq	r0, [r0], #-3
    9eac:	00002631 	andeq	r2, r0, r1, lsr r6
    9eb0:	04002505 	streq	r2, [r0], #-1285	; 0xfffffafb
    9eb4:	3b0a0000 	blcc	289ebc <mailbuffer+0x24edcc>
    9eb8:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    9ebc:	04732106 	ldrbteq	r2, [r3], #-262	; 0xfffffefa
    9ec0:	e0070000 	and	r0, r7, r0
    9ec4:	06000020 	streq	r0, [r0], -r0, lsr #32
    9ec8:	00051023 	andeq	r1, r5, r3, lsr #32
    9ecc:	3c070000 	stccc	0, cr0, [r7], {-0}
    9ed0:	0600002c 	streq	r0, [r0], -ip, lsr #32
    9ed4:	00051625 	andeq	r1, r5, r5, lsr #12
    9ed8:	95070400 	strls	r0, [r7, #-1024]	; 0xfffffc00
    9edc:	0600002a 	streq	r0, [r0], -sl, lsr #32
    9ee0:	00051c27 	andeq	r1, r5, r7, lsr #24
    9ee4:	0a000800 	beq	beec <__module_entries_end+0x3e0c>
    9ee8:	00002ad1 	ldrdeq	r2, [r0], -r1
    9eec:	102d0738 	eorne	r0, sp, r8, lsr r7
    9ef0:	07000005 	streq	r0, [r0, -r5]
    9ef4:	00005a28 	andeq	r5, r0, r8, lsr #20
    9ef8:	053c2f07 	ldreq	r2, [ip, #-3847]!	; 0xfffff0f9
    9efc:	07000000 	streq	r0, [r0, -r0]
    9f00:	00002443 	andeq	r2, r0, r3, asr #8
    9f04:	05473107 	strbeq	r3, [r7, #-263]	; 0xfffffef9
    9f08:	07040000 	streq	r0, [r4, -r0]
    9f0c:	0000207c 	andeq	r2, r0, ip, ror r0
    9f10:	03443307 	movteq	r3, #17159	; 0x4307
    9f14:	07080000 	streq	r0, [r8, -r0]
    9f18:	0000243b 	andeq	r2, r0, fp, lsr r4
    9f1c:	006c3407 	rsbeq	r3, ip, r7, lsl #8
    9f20:	07090000 	streq	r0, [r9, -r0]
    9f24:	00002293 	muleq	r0, r3, r2
    9f28:	05ae3507 	streq	r3, [lr, #1287]!	; 0x507
    9f2c:	070c0000 	streq	r0, [ip, -r0]
    9f30:	00001f7a 	andeq	r1, r0, sl, ror pc
    9f34:	03443707 	movteq	r3, #18183	; 0x4707
    9f38:	07100000 	ldreq	r0, [r0, -r0]
    9f3c:	000026a9 	andeq	r2, r0, r9, lsr #13
    9f40:	03443807 	movteq	r3, #18439	; 0x4807
    9f44:	07110000 	ldreq	r0, [r1, -r0]
    9f48:	0000296f 	andeq	r2, r0, pc, ror #18
    9f4c:	05b43a07 	ldreq	r3, [r4, #2567]!	; 0xa07
    9f50:	07140000 	ldreq	r0, [r4, -r0]
    9f54:	00001fb2 			; <UNDEFINED> instruction: 0x00001fb2
    9f58:	05ba3b07 	ldreq	r3, [sl, #2823]!	; 0xb07
    9f5c:	07180000 	ldreq	r0, [r8, -r0]
    9f60:	000027fc 	strdeq	r2, [r0], -ip
    9f64:	05c03d07 	strbeq	r3, [r0, #3335]	; 0xd07
    9f68:	071c0000 	ldreq	r0, [ip, -r0]
    9f6c:	00002b34 	andeq	r2, r0, r4, lsr fp
    9f70:	05223f07 	streq	r3, [r2, #-3847]!	; 0xfffff0f9
    9f74:	07200000 	streq	r0, [r0, -r0]!
    9f78:	00002178 	andeq	r2, r0, r8, ror r1
    9f7c:	05224007 	streq	r4, [r2, #-7]!
    9f80:	002c0000 	eoreq	r0, ip, r0
    9f84:	0473040f 	ldrbteq	r0, [r3], #-1039	; 0xfffffbf1
    9f88:	040f0000 	streq	r0, [pc], #-0	; 9f90 <__module_entries_end+0x1eb0>
    9f8c:	00000339 	andeq	r0, r0, r9, lsr r3
    9f90:	0437040f 	ldrteq	r0, [r7], #-1039	; 0xfffffbf1
    9f94:	3b040000 	blcc	109f9c <mailbuffer+0xceeac>
    9f98:	06000025 	streq	r0, [r0], -r5, lsr #32
    9f9c:	00044229 	andeq	r4, r4, r9, lsr #4
    9fa0:	037c1100 	cmneq	ip, #0, 2
    9fa4:	053c0000 	ldreq	r0, [ip, #-0]!
    9fa8:	10120000 	andsne	r0, r2, r0
    9fac:	00000005 	andeq	r0, r0, r5
    9fb0:	052d040f 	streq	r0, [sp, #-1039]!	; 0xfffffbf1
    9fb4:	76130000 	ldrvc	r0, [r3], -r0
    9fb8:	0f000028 	svceq	0x00000028
    9fbc:	00054204 	andeq	r4, r5, r4, lsl #4
    9fc0:	25800a00 	strcs	r0, [r0, #2560]	; 0xa00
    9fc4:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    9fc8:	0005ae28 	andeq	sl, r5, r8, lsr #28
    9fcc:	20e00700 	rsccs	r0, r0, r0, lsl #14
    9fd0:	2a080000 	bcs	209fd8 <mailbuffer+0x1ceee8>
    9fd4:	000005fd 	strdeq	r0, [r0], -sp
    9fd8:	1fe80700 	svcne	0x00e80700
    9fdc:	2b080000 	blcs	209fe4 <mailbuffer+0x1ceef4>
    9fe0:	00000344 	andeq	r0, r0, r4, asr #6
    9fe4:	21490704 	cmpcs	r9, r4, lsl #14
    9fe8:	2c080000 	stccs	0, cr0, [r8], {-0}
    9fec:	000005f2 	strdeq	r0, [r0], -r2
    9ff0:	266b0705 	strbtcs	r0, [fp], -r5, lsl #14
    9ff4:	2d080000 	stccs	0, cr0, [r8, #-0]
    9ff8:	0000037c 	andeq	r0, r0, ip, ror r3
    9ffc:	21d40708 	bicscs	r0, r4, r8, lsl #14
    a000:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    a004:	0000034e 	andeq	r0, r0, lr, asr #6
    a008:	2857070c 	ldmdacs	r7, {r2, r3, r8, r9, sl}^
    a00c:	2f080000 	svccs	0x00080000
    a010:	00000359 	andeq	r0, r0, r9, asr r3
    a014:	22d70710 	sbcscs	r0, r7, #16, 14	; 0x400000
    a018:	30080000 	andcc	r0, r8, r0
    a01c:	00000040 	andeq	r0, r0, r0, asr #32
    a020:	040f0014 	streq	r0, [pc], #-20	; a028 <__module_entries_end+0x1f48>
    a024:	0000054d 	andeq	r0, r0, sp, asr #10
    a028:	0136040f 	teqeq	r6, pc, lsl #8
    a02c:	040f0000 	streq	r0, [pc], #-0	; a034 <__module_entries_end+0x1f54>
    a030:	000001aa 	andeq	r0, r0, sl, lsr #3
    a034:	03f5040f 	mvnseq	r0, #251658240	; 0xf000000
    a038:	d1040000 	mrsle	r0, (UNDEF: 4)
    a03c:	0700002a 	streq	r0, [r0, -sl, lsr #32]
    a040:	00047342 	andeq	r7, r4, r2, asr #6
    a044:	08010200 	stmdaeq	r1, {r9}
    a048:	0005f220 	andeq	pc, r5, r0, lsr #4
    a04c:	2a9f0300 	bcs	fe7cac54 <_estack+0xf67bac54>
    a050:	03000000 	movweq	r0, #0
    a054:	00001fc0 	andeq	r1, r0, r0, asr #31
    a058:	222e0301 	eorcs	r0, lr, #67108864	; 0x4000000
    a05c:	03020000 	movweq	r0, #8192	; 0x2000
    a060:	000025c2 	andeq	r2, r0, r2, asr #11
    a064:	fd040003 	stc2	0, cr0, [r4, #-12]
    a068:	0800002a 	stmdaeq	r0, {r1, r3, r5}
    a06c:	0005d126 	andeq	sp, r5, r6, lsr #2
    a070:	c6040f00 	strgt	r0, [r4], -r0, lsl #30
    a074:	04000005 	streq	r0, [r0], #-5
    a078:	00002580 	andeq	r2, r0, r0, lsl #11
    a07c:	054d3208 	strbeq	r3, [sp, #-520]	; 0xfffffdf8
    a080:	81140000 	tsthi	r4, r0
    a084:	01000025 	tsteq	r0, r5, lsr #32
    a088:	02086017 	andeq	r6, r8, #23
    a08c:	0000e800 	andeq	lr, r0, r0, lsl #16
    a090:	409c0100 	addsmi	r0, ip, r0, lsl #2
    a094:	15000006 	strne	r0, [r0, #-6]
    a098:	000043af 	andeq	r4, r0, pc, lsr #7
    a09c:	06401701 	strbeq	r1, [r0], -r1, lsl #14
    a0a0:	91020000 	mrsls	r0, (UNDEF: 2)
    a0a4:	20e2156c 	rsccs	r1, r2, ip, ror #10
    a0a8:	17010000 	strne	r0, [r1, -r0]
    a0ac:	000005fd 	strdeq	r0, [r0], -sp
    a0b0:	00689102 	rsbeq	r9, r8, r2, lsl #2
    a0b4:	0603040f 	streq	r0, [r3], -pc, lsl #8
    a0b8:	4a140000 	bmi	50a0c0 <mailbuffer+0x4cefd0>
    a0bc:	0100003f 	tsteq	r0, pc, lsr r0
    a0c0:	02094825 	andeq	r4, r9, #2424832	; 0x250000
    a0c4:	0002a400 	andeq	sl, r2, r0, lsl #8
    a0c8:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    a0cc:	15000006 	strne	r0, [r0, #-6]
    a0d0:	000043af 	andeq	r4, r0, pc, lsr #7
    a0d4:	06402501 	strbeq	r2, [r0], -r1, lsl #10
    a0d8:	91020000 	mrsls	r0, (UNDEF: 2)
    a0dc:	20e21564 	rsccs	r1, r2, r4, ror #10
    a0e0:	25010000 	strcs	r0, [r1, #-0]
    a0e4:	000005fd 	strdeq	r0, [r0], -sp
    a0e8:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
    a0ec:	00002415 	andeq	r2, r0, r5, lsl r4
    a0f0:	06b62501 	ldrteq	r2, [r6], r1, lsl #10
    a0f4:	91020000 	mrsls	r0, (UNDEF: 2)
    a0f8:	0b28165c 	bleq	a0fa70 <mailbuffer+0x9d4980>
    a0fc:	00a40002 	adceq	r0, r4, r2
    a100:	b5170000 	ldrlt	r0, [r7, #-0]
    a104:	01000040 	tsteq	r0, r0, asr #32
    a108:	00034448 	andeq	r4, r3, r8, asr #8
    a10c:	6f910200 	svcvs	0x00910200
    a110:	020b7416 	andeq	r7, fp, #369098752	; 0x16000000
    a114:	00005800 	andeq	r5, r0, r0, lsl #16
    a118:	2a5c1700 	bcs	170fd20 <mailbuffer+0x16d4c30>
    a11c:	5a010000 	bpl	4a124 <mailbuffer+0xf034>
    a120:	00000359 	andeq	r0, r0, r9, asr r3
    a124:	00689102 	rsbeq	r9, r8, r2, lsl #2
    a128:	040f0000 	streq	r0, [pc], #-0	; a130 <__module_entries_end+0x2050>
    a12c:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
    a130:	00028610 	andeq	r8, r2, r0, lsl r6
    a134:	3f571400 	svccc	0x00571400
    a138:	66010000 	strvs	r0, [r1], -r0
    a13c:	00020bec 	andeq	r0, r2, ip, ror #23
    a140:	00000128 	andeq	r0, r0, r8, lsr #2
    a144:	07019c01 	streq	r9, [r1, -r1, lsl #24]
    a148:	af150000 	svcge	0x00150000
    a14c:	01000043 	tsteq	r0, r3, asr #32
    a150:	00064066 	andeq	r4, r6, r6, rrx
    a154:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a158:	00297f15 	eoreq	r7, r9, r5, lsl pc
    a15c:	40660100 	rsbmi	r0, r6, r0, lsl #2
    a160:	02000006 	andeq	r0, r0, #6
    a164:	e2156891 	ands	r6, r5, #9502720	; 0x910000
    a168:	01000020 	tsteq	r0, r0, lsr #32
    a16c:	0005fd66 	andeq	pc, r5, r6, ror #26
    a170:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    a174:	3fc51400 	svccc	0x00c51400
    a178:	77010000 	strvc	r0, [r1, -r0]
    a17c:	00020d14 	andeq	r0, r2, r4, lsl sp
    a180:	00000074 	andeq	r0, r0, r4, ror r0
    a184:	07259c01 	streq	r9, [r5, -r1, lsl #24]!
    a188:	af150000 	svcge	0x00150000
    a18c:	01000043 	tsteq	r0, r3, asr #32
    a190:	00064077 	andeq	r4, r6, r7, ror r0
    a194:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a198:	3fd21800 	svccc	0x00d21800
    a19c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    a1a0:	000005fd 	strdeq	r0, [r0], -sp
    a1a4:	00020d88 	andeq	r0, r2, r8, lsl #27
    a1a8:	000000a0 	andeq	r0, r0, r0, lsr #1
    a1ac:	074d9c01 	strbeq	r9, [sp, -r1, lsl #24]
    a1b0:	af150000 	svcge	0x00150000
    a1b4:	01000043 	tsteq	r0, r3, asr #32
    a1b8:	0006407d 	andeq	r4, r6, sp, ror r0
    a1bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a1c0:	3fe71800 	svccc	0x00e71800
    a1c4:	84010000 	strhi	r0, [r1], #-0
    a1c8:	00000344 	andeq	r0, r0, r4, asr #6
    a1cc:	00020e28 	andeq	r0, r2, r8, lsr #28
    a1d0:	00000078 	andeq	r0, r0, r8, ror r0
    a1d4:	07759c01 	ldrbeq	r9, [r5, -r1, lsl #24]!
    a1d8:	af150000 	svcge	0x00150000
    a1dc:	01000043 	tsteq	r0, r3, asr #32
    a1e0:	00064084 	andeq	r4, r6, r4, lsl #1
    a1e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a1e8:	3f831800 	svccc	0x00831800
    a1ec:	8a010000 	bhi	4a1f4 <mailbuffer+0xf104>
    a1f0:	000005f2 	strdeq	r0, [r0], -r2
    a1f4:	00020ea0 	andeq	r0, r2, r0, lsr #29
    a1f8:	00000078 	andeq	r0, r0, r8, ror r0
    a1fc:	079d9c01 	ldreq	r9, [sp, r1, lsl #24]
    a200:	af150000 	svcge	0x00150000
    a204:	01000043 	tsteq	r0, r3, asr #32
    a208:	0006408a 	andeq	r4, r6, sl, lsl #1
    a20c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a210:	409c1800 	addsmi	r1, ip, r0, lsl #16
    a214:	90010000 	andls	r0, r1, r0
    a218:	0000037c 	andeq	r0, r0, ip, ror r3
    a21c:	00020f18 	andeq	r0, r2, r8, lsl pc
    a220:	00000078 	andeq	r0, r0, r8, ror r0
    a224:	07c59c01 	strbeq	r9, [r5, r1, lsl #24]
    a228:	af150000 	svcge	0x00150000
    a22c:	01000043 	tsteq	r0, r3, asr #32
    a230:	00064090 	muleq	r6, r0, r0
    a234:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a238:	3f671400 	svccc	0x00671400
    a23c:	96010000 	strls	r0, [r1], -r0
    a240:	00020f90 	muleq	r2, r0, pc	; <UNPREDICTABLE>
    a244:	00000078 	andeq	r0, r0, r8, ror r0
    a248:	07f79c01 	ldrbeq	r9, [r7, r1, lsl #24]!
    a24c:	af150000 	svcge	0x00150000
    a250:	01000043 	tsteq	r0, r3, asr #32
    a254:	00064096 	muleq	r6, r6, r0
    a258:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a25c:	0021d615 	eoreq	sp, r1, r5, lsl r6
    a260:	4e960100 	fmlmis	f0, f6, f0
    a264:	02000003 	andeq	r0, r0, #3
    a268:	18006891 	stmdane	r0, {r0, r4, r7, fp, sp, lr}
    a26c:	00003f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    a270:	034e9c01 	movteq	r9, #60417	; 0xec01
    a274:	10080000 	andne	r0, r8, r0
    a278:	00780002 	rsbseq	r0, r8, r2
    a27c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a280:	0000081f 	andeq	r0, r0, pc, lsl r8
    a284:	0043af15 	subeq	sl, r3, r5, lsl pc
    a288:	409c0100 	addsmi	r0, ip, r0, lsl #2
    a28c:	02000006 	andeq	r0, r0, #6
    a290:	18006c91 	stmdane	r0, {r0, r4, r7, sl, fp, sp, lr}
    a294:	00004085 	andeq	r4, r0, r5, lsl #1
    a298:	0359a201 	cmpeq	r9, #268435456	; 0x10000000
    a29c:	10800000 	addne	r0, r0, r0
    a2a0:	00a00002 	adceq	r0, r0, r2
    a2a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a2a8:	00000847 	andeq	r0, r0, r7, asr #16
    a2ac:	0043af15 	subeq	sl, r3, r5, lsl pc
    a2b0:	40a20100 	adcmi	r0, r2, r0, lsl #2
    a2b4:	02000006 	andeq	r0, r0, #6
    a2b8:	18006c91 	stmdane	r0, {r0, r4, r7, sl, fp, sp, lr}
    a2bc:	0000406f 	andeq	r4, r0, pc, rrx
    a2c0:	0040aa01 	subeq	sl, r0, r1, lsl #20
    a2c4:	11200000 	teqne	r0, r0
    a2c8:	00b80002 	adcseq	r0, r8, r2
    a2cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    a2d0:	0000087d 	andeq	r0, r0, sp, ror r8
    a2d4:	0043af15 	subeq	sl, r3, r5, lsl pc
    a2d8:	40aa0100 	adcmi	r0, sl, r0, lsl #2
    a2dc:	02000006 	andeq	r0, r0, #6
    a2e0:	69156c91 	ldmdbvs	r5, {r0, r4, r7, sl, fp, sp, lr}
    a2e4:	01000022 	tsteq	r0, r2, lsr #32
    a2e8:	00037caa 	andeq	r7, r3, sl, lsr #25
    a2ec:	68910200 	ldmvs	r1, {r9}
    a2f0:	3fb21400 	svccc	0x00b21400
    a2f4:	b7010000 	strlt	r0, [r1, -r0]
    a2f8:	000211d8 	ldrdeq	r1, [r2], -r8
    a2fc:	00000190 	muleq	r0, r0, r1
    a300:	08bd9c01 	popeq	{r0, sl, fp, ip, pc}
    a304:	af150000 	svcge	0x00150000
    a308:	01000043 	tsteq	r0, r3, asr #32
    a30c:	000640b7 	strheq	r4, [r6], -r7
    a310:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a314:	0021b215 	eoreq	fp, r1, r5, lsl r2
    a318:	59b70100 	ldmibpl	r7!, {r8}
    a31c:	02000003 	andeq	r0, r0, #3
    a320:	69156891 	ldmdbvs	r5, {r0, r4, r7, fp, sp, lr}
    a324:	01000022 	tsteq	r0, r2, lsr #32
    a328:	00037cb7 			; <UNDEFINED> instruction: 0x00037cb7
    a32c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    a330:	405b1900 	subsmi	r1, fp, r0, lsl #18
    a334:	e1010000 	mrs	r0, (UNDEF: 1)
    a338:	00021368 	andeq	r1, r2, r8, ror #6
    a33c:	0000009c 	muleq	r0, ip, r0
    a340:	af159c01 	svcge	0x00159c01
    a344:	01000043 	tsteq	r0, r3, asr #32
    a348:	000640e1 	andeq	r4, r6, r1, ror #1
    a34c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a350:	09610000 	stmdbeq	r1!, {}^	; <UNPREDICTABLE>
    a354:	00040000 	andeq	r0, r4, r0
    a358:	00001ad2 	ldrdeq	r1, [r0], -r2
    a35c:	00190104 	andseq	r0, r9, r4, lsl #2
    a360:	eb010000 	bl	4a368 <mailbuffer+0xf278>
    a364:	dc000040 	stcle	0, cr0, [r0], {64}	; 0x40
    a368:	0400000d 	streq	r0, [r0], #-13
    a36c:	ec000214 	sfm	f0, 4, [r0], {20}
    a370:	6c000007 	stcvs	0, cr0, [r0], {7}
    a374:	02000036 	andeq	r0, r0, #54	; 0x36
    a378:	401b0201 	andsmi	r0, fp, r1, lsl #4
    a37c:	03000000 	movweq	r0, #0
    a380:	00002546 	andeq	r2, r0, r6, asr #10
    a384:	2b280300 	blcs	a0af8c <mailbuffer+0x9cfe9c>
    a388:	03010000 	movweq	r0, #4096	; 0x1000
    a38c:	000028bb 			; <UNDEFINED> instruction: 0x000028bb
    a390:	13040002 	movwne	r0, #16386	; 0x4002
    a394:	02000022 	andeq	r0, r0, #34	; 0x22
    a398:	00002522 	andeq	r2, r0, r2, lsr #10
    a39c:	02010200 	andeq	r0, r1, #0, 4
    a3a0:	00006c2b 	andeq	r6, r0, fp, lsr #24
    a3a4:	259a0300 	ldrcs	r0, [sl, #768]	; 0x300
    a3a8:	03000000 	movweq	r0, #0
    a3ac:	00002c49 	andeq	r2, r0, r9, asr #24
    a3b0:	22210301 	eorcs	r0, r1, #67108864	; 0x4000000
    a3b4:	03020000 	movweq	r0, #8192	; 0x2000
    a3b8:	0000265b 	andeq	r2, r0, fp, asr r6
    a3bc:	21040003 	tstcs	r4, r3
    a3c0:	02000024 	andeq	r0, r0, #36	; 0x24
    a3c4:	00004b31 	andeq	r4, r0, r1, lsr fp
    a3c8:	02080500 	andeq	r0, r8, #0, 10
    a3cc:	0000bc34 	andeq	fp, r0, r4, lsr ip
    a3d0:	22760600 	rsbscs	r0, r6, #0, 12
    a3d4:	36020000 	strcc	r0, [r2], -r0
    a3d8:	000000bc 	strheq	r0, [r0], -ip
    a3dc:	27d30600 	ldrbcs	r0, [r3, r0, lsl #12]
    a3e0:	37020000 	strcc	r0, [r2, -r0]
    a3e4:	000000bc 	strheq	r0, [r0], -ip
    a3e8:	21f30601 	mvnscs	r0, r1, lsl #12
    a3ec:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    a3f0:	000000c3 	andeq	r0, r0, r3, asr #1
    a3f4:	1f0c0602 	svcne	0x000c0602
    a3f8:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    a3fc:	000000c3 	andeq	r0, r0, r3, asr #1
    a400:	2bb30604 	blcs	feccbc18 <_estack+0xf6cbbc18>
    a404:	3a020000 	bcc	8a40c <mailbuffer+0x4f31c>
    a408:	000000c3 	andeq	r0, r0, r3, asr #1
    a40c:	01070006 	tsteq	r7, r6
    a410:	00072a08 	andeq	r2, r7, r8, lsl #20
    a414:	07020700 	streq	r0, [r2, -r0, lsl #14]
    a418:	00000132 	andeq	r0, r0, r2, lsr r1
    a41c:	00220804 	eoreq	r0, r2, r4, lsl #16
    a420:	773d0200 	ldrvc	r0, [sp, -r0, lsl #4]!
    a424:	05000000 	streq	r0, [r0, #-0]
    a428:	865c0212 			; <UNDEFINED> instruction: 0x865c0212
    a42c:	06000001 	streq	r0, [r0], -r1
    a430:	000029a8 	andeq	r2, r0, r8, lsr #19
    a434:	00bc5e02 	adcseq	r5, ip, r2, lsl #28
    a438:	06000000 	streq	r0, [r0], -r0
    a43c:	0000242b 	andeq	r2, r0, fp, lsr #8
    a440:	00bc5f02 	adcseq	r5, ip, r2, lsl #30
    a444:	06010000 	streq	r0, [r1], -r0
    a448:	0000228c 	andeq	r2, r0, ip, lsl #5
    a44c:	00c36002 	sbceq	r6, r3, r2
    a450:	06020000 	streq	r0, [r2], -r0
    a454:	00002128 	andeq	r2, r0, r8, lsr #2
    a458:	00bc6102 	adcseq	r6, ip, r2, lsl #2
    a45c:	06040000 	streq	r0, [r4], -r0
    a460:	000022f6 	strdeq	r2, [r0], -r6
    a464:	00bc6202 	adcseq	r6, ip, r2, lsl #4
    a468:	06050000 	streq	r0, [r5], -r0
    a46c:	0000279f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    a470:	00bc6302 	adcseq	r6, ip, r2, lsl #6
    a474:	06060000 	streq	r0, [r6], -r0
    a478:	000025e7 	andeq	r2, r0, r7, ror #11
    a47c:	00bc6402 	adcseq	r6, ip, r2, lsl #8
    a480:	06070000 	streq	r0, [r7], -r0
    a484:	00002c56 	andeq	r2, r0, r6, asr ip
    a488:	00c36602 	sbceq	r6, r3, r2, lsl #12
    a48c:	06080000 	streq	r0, [r8], -r0
    a490:	00002244 	andeq	r2, r0, r4, asr #4
    a494:	00c36702 	sbceq	r6, r3, r2, lsl #14
    a498:	060a0000 	streq	r0, [sl], -r0
    a49c:	00002135 	andeq	r2, r0, r5, lsr r1
    a4a0:	00c36802 	sbceq	r6, r3, r2, lsl #16
    a4a4:	060c0000 	streq	r0, [ip], -r0
    a4a8:	000021fa 	strdeq	r2, [r0], -sl
    a4ac:	00bc6902 	adcseq	r6, ip, r2, lsl #18
    a4b0:	060e0000 	streq	r0, [lr], -r0
    a4b4:	0000233b 	andeq	r2, r0, fp, lsr r3
    a4b8:	00bc6a02 	adcseq	r6, ip, r2, lsl #20
    a4bc:	060f0000 	streq	r0, [pc], -r0
    a4c0:	00002322 	andeq	r2, r0, r2, lsr #6
    a4c4:	00bc6b02 	adcseq	r6, ip, r2, lsl #22
    a4c8:	06100000 	ldreq	r0, [r0], -r0
    a4cc:	000028a8 	andeq	r2, r0, r8, lsr #17
    a4d0:	00bc6c02 	adcseq	r6, ip, r2, lsl #24
    a4d4:	00110000 	andseq	r0, r1, r0
    a4d8:	0028c704 	eoreq	ip, r8, r4, lsl #14
    a4dc:	d56e0200 	strble	r0, [lr, #-512]!	; 0xfffffe00
    a4e0:	05000000 	streq	r0, [r0, #-0]
    a4e4:	fa710209 	blx	1c4ad10 <mailbuffer+0x1c0fc20>
    a4e8:	06000001 	streq	r0, [r0], -r1
    a4ec:	000029a8 	andeq	r2, r0, r8, lsr #19
    a4f0:	00bc7302 	adcseq	r7, ip, r2, lsl #6
    a4f4:	06000000 	streq	r0, [r0], -r0
    a4f8:	0000242b 	andeq	r2, r0, fp, lsr #8
    a4fc:	00bc7402 	adcseq	r7, ip, r2, lsl #8
    a500:	06010000 	streq	r0, [r1], -r0
    a504:	00002088 	andeq	r2, r0, r8, lsl #1
    a508:	00c37502 	sbceq	r7, r3, r2, lsl #10
    a50c:	06020000 	streq	r0, [r2], -r0
    a510:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
    a514:	00bc7602 	adcseq	r7, ip, r2, lsl #12
    a518:	06040000 	streq	r0, [r4], -r0
    a51c:	00002a4f 	andeq	r2, r0, pc, asr #20
    a520:	00bc7702 	adcseq	r7, ip, r2, lsl #14
    a524:	06050000 	streq	r0, [r5], -r0
    a528:	00002790 	muleq	r0, r0, r7
    a52c:	00bc7802 	adcseq	r7, ip, r2, lsl #16
    a530:	06060000 	streq	r0, [r6], -r0
    a534:	0000258d 	andeq	r2, r0, sp, lsl #11
    a538:	00bc7902 	adcseq	r7, ip, r2, lsl #18
    a53c:	06070000 	streq	r0, [r7], -r0
    a540:	00002ab3 			; <UNDEFINED> instruction: 0x00002ab3
    a544:	00bc7a02 	adcseq	r7, ip, r2, lsl #20
    a548:	00080000 	andeq	r0, r8, r0
    a54c:	00230604 	eoreq	r0, r3, r4, lsl #12
    a550:	917c0200 	cmnls	ip, r0, lsl #4
    a554:	05000001 	streq	r0, [r0, #-1]
    a558:	7a7f0209 	bvc	1fcad84 <mailbuffer+0x1f8fc94>
    a55c:	06000002 	streq	r0, [r0], -r2
    a560:	000029a8 	andeq	r2, r0, r8, lsr #19
    a564:	00bc8102 	adcseq	r8, ip, r2, lsl #2
    a568:	06000000 	streq	r0, [r0], -r0
    a56c:	0000242b 	andeq	r2, r0, fp, lsr #8
    a570:	00bc8202 	adcseq	r8, ip, r2, lsl #4
    a574:	06010000 	streq	r0, [r1], -r0
    a578:	00002017 	andeq	r2, r0, r7, lsl r0
    a57c:	00bc8302 	adcseq	r8, ip, r2, lsl #6
    a580:	06020000 	streq	r0, [r2], -r0
    a584:	00002041 	andeq	r2, r0, r1, asr #32
    a588:	00bc8402 	adcseq	r8, ip, r2, lsl #8
    a58c:	06030000 	streq	r0, [r3], -r0
    a590:	00002769 	andeq	r2, r0, r9, ror #14
    a594:	00bc8502 	adcseq	r8, ip, r2, lsl #10
    a598:	06040000 	streq	r0, [r4], -r0
    a59c:	00002721 	andeq	r2, r0, r1, lsr #14
    a5a0:	00bc8602 	adcseq	r8, ip, r2, lsl #12
    a5a4:	06050000 	streq	r0, [r5], -r0
    a5a8:	00001f29 	andeq	r1, r0, r9, lsr #30
    a5ac:	00bc8702 	adcseq	r8, ip, r2, lsl #14
    a5b0:	06060000 	streq	r0, [r6], -r0
    a5b4:	00002895 	muleq	r0, r5, r8
    a5b8:	00bc8802 	adcseq	r8, ip, r2, lsl #16
    a5bc:	06070000 	streq	r0, [r7], -r0
    a5c0:	00002716 	andeq	r2, r0, r6, lsl r7
    a5c4:	00bc8902 	adcseq	r8, ip, r2, lsl #18
    a5c8:	00080000 	andeq	r0, r8, r0
    a5cc:	0027e404 	eoreq	lr, r7, r4, lsl #8
    a5d0:	058b0200 	streq	r0, [fp, #512]	; 0x200
    a5d4:	05000002 	streq	r0, [r0, #-2]
    a5d8:	d68e0207 	strle	r0, [lr], r7, lsl #4
    a5dc:	06000002 	streq	r0, [r0], -r2
    a5e0:	000029a8 	andeq	r2, r0, r8, lsr #19
    a5e4:	00bc9002 	adcseq	r9, ip, r2
    a5e8:	06000000 	streq	r0, [r0], -r0
    a5ec:	0000242b 	andeq	r2, r0, fp, lsr #8
    a5f0:	00bc9102 	adcseq	r9, ip, r2, lsl #2
    a5f4:	06010000 	streq	r0, [r1], -r0
    a5f8:	000026c9 	andeq	r2, r0, r9, asr #13
    a5fc:	00bc9202 	adcseq	r9, ip, r2, lsl #4
    a600:	06020000 	streq	r0, [r2], -r0
    a604:	0000258d 	andeq	r2, r0, sp, lsl #11
    a608:	00bc9302 	adcseq	r9, ip, r2, lsl #6
    a60c:	06030000 	streq	r0, [r3], -r0
    a610:	00002960 	andeq	r2, r0, r0, ror #18
    a614:	00c39402 	sbceq	r9, r3, r2, lsl #8
    a618:	06040000 	streq	r0, [r4], -r0
    a61c:	00002522 	andeq	r2, r0, r2, lsr #10
    a620:	00bc9502 	adcseq	r9, ip, r2, lsl #10
    a624:	00060000 	andeq	r0, r6, r0
    a628:	002bda04 	eoreq	sp, fp, r4, lsl #20
    a62c:	85970200 	ldrhi	r0, [r7, #512]	; 0x200
    a630:	05000002 	streq	r0, [r0, #-2]
    a634:	029c0202 	addseq	r0, ip, #536870912	; 0x20000000
    a638:	06000003 	streq	r0, [r0], -r3
    a63c:	000029a8 	andeq	r2, r0, r8, lsr #19
    a640:	00bc9e02 	adcseq	r9, ip, r2, lsl #28
    a644:	06000000 	streq	r0, [r0], -r0
    a648:	0000242b 	andeq	r2, r0, fp, lsr #8
    a64c:	00bc9f02 	adcseq	r9, ip, r2, lsl #30
    a650:	00010000 	andeq	r0, r1, r0
    a654:	9a020908 	bls	8ca7c <mailbuffer+0x5198c>
    a658:	00000337 	andeq	r0, r0, r7, lsr r3
    a65c:	003c0209 	eorseq	r0, ip, r9, lsl #4
    a660:	e1a10200 			; <UNDEFINED> instruction: 0xe1a10200
    a664:	09000002 	stmdbeq	r0, {r1}
    a668:	00002791 	muleq	r0, r1, r7
    a66c:	01faa302 	mvnseq	sl, r2, lsl #6
    a670:	4c090000 	stcmi	0, cr0, [r9], {-0}
    a674:	0200003c 	andeq	r0, r0, #60	; 0x3c
    a678:	00027aa4 	andeq	r7, r2, r4, lsr #21
    a67c:	25840900 	strcs	r0, [r4, #2304]	; 0x900
    a680:	a5020000 	strge	r0, [r2, #-0]
    a684:	000002d6 	ldrdeq	r0, [r0], -r6
    a688:	26fc0400 	ldrbtcs	r0, [ip], r0, lsl #8
    a68c:	a7020000 	strge	r0, [r2, -r0]
    a690:	00000302 	andeq	r0, r0, r2, lsl #6
    a694:	0024660a 	eoreq	r6, r4, sl, lsl #12
    a698:	a9020200 	stmdbge	r2, {r9}
    a69c:	00000373 	andeq	r0, r0, r3, ror r3
    a6a0:	0029a806 	eoreq	sl, r9, r6, lsl #16
    a6a4:	bcab0200 	sfmlt	f0, 4, [fp]
    a6a8:	00000000 	andeq	r0, r0, r0
    a6ac:	00242b06 	eoreq	r2, r4, r6, lsl #22
    a6b0:	bcac0200 	sfmlt	f0, 4, [ip]
    a6b4:	01000000 	mrseq	r0, (UNDEF: 0)
    a6b8:	00207406 	eoreq	r7, r0, r6, lsl #8
    a6bc:	73ad0200 			; <UNDEFINED> instruction: 0x73ad0200
    a6c0:	02000003 	andeq	r0, r0, #3
    a6c4:	00c30b00 	sbceq	r0, r3, r0, lsl #22
    a6c8:	03820000 	orreq	r0, r2, #0
    a6cc:	820c0000 	andhi	r0, ip, #0
    a6d0:	00000003 	andeq	r0, r0, r3
    a6d4:	d4070407 	strle	r0, [r7], #-1031	; 0xfffffbf9
    a6d8:	04000001 	streq	r0, [r0], #-1
    a6dc:	00002466 	andeq	r2, r0, r6, ror #8
    a6e0:	0342af02 	movteq	sl, #12034	; 0x2f02
    a6e4:	750d0000 	strvc	r0, [sp, #-0]
    a6e8:	17030038 	smladxne	r3, r8, r0, r0
    a6ec:	000000bc 	strheq	r0, [r0], -ip
    a6f0:	3233750d 	eorscc	r7, r3, #54525952	; 0x3400000
    a6f4:	a9190300 	ldmdbge	r9, {r8, r9}
    a6f8:	07000003 	streq	r0, [r0, -r3]
    a6fc:	071d0704 	ldreq	r0, [sp, -r4, lsl #14]
    a700:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    a704:	00071307 	andeq	r1, r7, r7, lsl #6
    a708:	06010700 	streq	r0, [r1], -r0, lsl #14
    a70c:	00000733 	andeq	r0, r0, r3, lsr r7
    a710:	b8050207 	stmdalt	r5, {r0, r1, r2, r9}
    a714:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    a718:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a71c:	30040074 	andcc	r0, r4, r4, ror r0
    a720:	03000029 	movweq	r0, #41	; 0x29
    a724:	0003c520 	andeq	ip, r3, r0, lsr #10
    a728:	07040700 	streq	r0, [r4, -r0, lsl #14]
    a72c:	00000718 	andeq	r0, r0, r8, lsl r7
    a730:	98050407 	stmdals	r5, {r0, r1, r2, sl}
    a734:	0a000007 	beq	a758 <__module_entries_end+0x2678>
    a738:	00002552 	andeq	r2, r0, r2, asr r5
    a73c:	3a1e0418 	bcc	78b7a4 <mailbuffer+0x7506b4>
    a740:	06000004 	streq	r0, [r0], -r4
    a744:	00002651 	andeq	r2, r0, r1, asr r6
    a748:	043a2004 	ldrteq	r2, [sl], #-4
    a74c:	06000000 	streq	r0, [r0], -r0
    a750:	00002c0c 	andeq	r2, r0, ip, lsl #24
    a754:	03a92104 			; <UNDEFINED> instruction: 0x03a92104
    a758:	06040000 	streq	r0, [r4], -r0
    a75c:	0000268a 	andeq	r2, r0, sl, lsl #13
    a760:	03cc2204 	biceq	r2, ip, #4, 4	; 0x40000000
    a764:	06080000 	streq	r0, [r8], -r0
    a768:	00002169 	andeq	r2, r0, r9, ror #2
    a76c:	043a2304 	ldrteq	r2, [sl], #-772	; 0xfffffcfc
    a770:	060c0000 	streq	r0, [ip], -r0
    a774:	0000277d 	andeq	r2, r0, sp, ror r7
    a778:	043a2404 	ldrteq	r2, [sl], #-1028	; 0xfffffbfc
    a77c:	06100000 	ldreq	r0, [r0], -r0
    a780:	00002bbb 			; <UNDEFINED> instruction: 0x00002bbb
    a784:	043a2504 	ldrteq	r2, [sl], #-1284	; 0xfffffafc
    a788:	00140000 	andseq	r0, r4, r0
    a78c:	0440040f 	strbeq	r0, [r0], #-1039	; 0xfffffbf1
    a790:	37100000 	ldrcc	r0, [r0, -r0]
    a794:	04000003 	streq	r0, [r0], #-3
    a798:	00002552 	andeq	r2, r0, r2, asr r5
    a79c:	03e52704 	mvneq	r2, #4, 14	; 0x100000
    a7a0:	04110000 	ldreq	r0, [r1], #-0
    a7a4:	0026310a 	eoreq	r3, r6, sl, lsl #2
    a7a8:	1f050c00 	svcne	0x00050c00
    a7ac:	00000483 	andeq	r0, r0, r3, lsl #9
    a7b0:	00265106 	eoreq	r5, r6, r6, lsl #2
    a7b4:	83210500 	teqhi	r1, #0, 10
    a7b8:	00000004 	andeq	r0, r0, r4
    a7bc:	002bf106 	eoreq	pc, fp, r6, lsl #2
    a7c0:	a9220500 	stmdbge	r2!, {r8, sl}
    a7c4:	04000003 	streq	r0, [r0], #-3
    a7c8:	00248506 	eoreq	r8, r4, r6, lsl #10
    a7cc:	83230500 	teqhi	r3, #0, 10
    a7d0:	08000004 	stmdaeq	r0, {r2}
    a7d4:	b7040f00 	strlt	r0, [r4, -r0, lsl #30]
    a7d8:	04000003 	streq	r0, [r0], #-3
    a7dc:	00002631 	andeq	r2, r0, r1, lsr r6
    a7e0:	04522505 	ldrbeq	r2, [r2], #-1285	; 0xfffffafb
    a7e4:	3b0a0000 	blcc	28a7ec <mailbuffer+0x24f6fc>
    a7e8:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    a7ec:	04c52106 	strbeq	r2, [r5], #262	; 0x106
    a7f0:	e0060000 	and	r0, r6, r0
    a7f4:	06000020 	streq	r0, [r0], -r0, lsr #32
    a7f8:	00056223 	andeq	r6, r5, r3, lsr #4
    a7fc:	3c060000 	stccc	0, cr0, [r6], {-0}
    a800:	0600002c 	streq	r0, [r0], -ip, lsr #32
    a804:	00056825 	andeq	r6, r5, r5, lsr #16
    a808:	95060400 	strls	r0, [r6, #-1024]	; 0xfffffc00
    a80c:	0600002a 	streq	r0, [r0], -sl, lsr #32
    a810:	00056e27 	andeq	r6, r5, r7, lsr #28
    a814:	0a000800 	beq	c81c <__module_entries_end+0x473c>
    a818:	00002ad1 	ldrdeq	r2, [r0], -r1
    a81c:	622d0738 	eorvs	r0, sp, #56, 14	; 0xe00000
    a820:	06000005 	streq	r0, [r0], -r5
    a824:	00005a28 	andeq	r5, r0, r8, lsr #20
    a828:	058e2f07 	streq	r2, [lr, #3847]	; 0xf07
    a82c:	06000000 	streq	r0, [r0], -r0
    a830:	00002443 	andeq	r2, r0, r3, asr #8
    a834:	05993107 	ldreq	r3, [r9, #263]	; 0x107
    a838:	06040000 	streq	r0, [r4], -r0
    a83c:	0000207c 	andeq	r2, r0, ip, ror r0
    a840:	03943307 	orrseq	r3, r4, #469762048	; 0x1c000000
    a844:	06080000 	streq	r0, [r8], -r0
    a848:	0000243b 	andeq	r2, r0, fp, lsr r4
    a84c:	006c3407 	rsbeq	r3, ip, r7, lsl #8
    a850:	06090000 	streq	r0, [r9], -r0
    a854:	00002293 	muleq	r0, r3, r2
    a858:	06003507 	streq	r3, [r0], -r7, lsl #10
    a85c:	060c0000 	streq	r0, [ip], -r0
    a860:	00001f7a 	andeq	r1, r0, sl, ror pc
    a864:	03943707 	orrseq	r3, r4, #1835008	; 0x1c0000
    a868:	06100000 	ldreq	r0, [r0], -r0
    a86c:	000026a9 	andeq	r2, r0, r9, lsr #13
    a870:	03943807 	orrseq	r3, r4, #458752	; 0x70000
    a874:	06110000 	ldreq	r0, [r1], -r0
    a878:	0000296f 	andeq	r2, r0, pc, ror #18
    a87c:	06063a07 	streq	r3, [r6], -r7, lsl #20
    a880:	06140000 	ldreq	r0, [r4], -r0
    a884:	00001fb2 			; <UNDEFINED> instruction: 0x00001fb2
    a888:	060c3b07 	streq	r3, [ip], -r7, lsl #22
    a88c:	06180000 	ldreq	r0, [r8], -r0
    a890:	000027fc 	strdeq	r2, [r0], -ip
    a894:	06123d07 	ldreq	r3, [r2], -r7, lsl #26
    a898:	061c0000 	ldreq	r0, [ip], -r0
    a89c:	00002b34 	andeq	r2, r0, r4, lsr fp
    a8a0:	05743f07 	ldrbeq	r3, [r4, #-3847]!	; 0xfffff0f9
    a8a4:	06200000 	strteq	r0, [r0], -r0
    a8a8:	00002178 	andeq	r2, r0, r8, ror r1
    a8ac:	05744007 	ldrbeq	r4, [r4, #-7]!
    a8b0:	002c0000 	eoreq	r0, ip, r0
    a8b4:	04c5040f 	strbeq	r0, [r5], #1039	; 0x40f
    a8b8:	040f0000 	streq	r0, [pc], #-0	; a8c0 <__module_entries_end+0x27e0>
    a8bc:	00000389 	andeq	r0, r0, r9, lsl #7
    a8c0:	0489040f 	streq	r0, [r9], #1039	; 0x40f
    a8c4:	3b040000 	blcc	10a8cc <mailbuffer+0xcf7dc>
    a8c8:	06000025 	streq	r0, [r0], -r5, lsr #32
    a8cc:	00049429 	andeq	r9, r4, r9, lsr #8
    a8d0:	03cc1200 	biceq	r1, ip, #0, 4
    a8d4:	058e0000 	streq	r0, [lr]
    a8d8:	62130000 	andsvs	r0, r3, #0
    a8dc:	00000005 	andeq	r0, r0, r5
    a8e0:	057f040f 	ldrbeq	r0, [pc, #-1039]!	; a4d9 <__module_entries_end+0x23f9>
    a8e4:	76140000 	ldrvc	r0, [r4], -r0
    a8e8:	0f000028 	svceq	0x00000028
    a8ec:	00059404 	andeq	r9, r5, r4, lsl #8
    a8f0:	25800a00 	strcs	r0, [r0, #2560]	; 0xa00
    a8f4:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    a8f8:	00060028 	andeq	r0, r6, r8, lsr #32
    a8fc:	20e00600 	rsccs	r0, r0, r0, lsl #12
    a900:	2a080000 	bcs	20a908 <mailbuffer+0x1cf818>
    a904:	0000064f 	andeq	r0, r0, pc, asr #12
    a908:	1fe80600 	svcne	0x00e80600
    a90c:	2b080000 	blcs	20a914 <mailbuffer+0x1cf824>
    a910:	00000394 	muleq	r0, r4, r3
    a914:	21490604 	cmpcs	r9, r4, lsl #12
    a918:	2c080000 	stccs	0, cr0, [r8], {-0}
    a91c:	00000644 	andeq	r0, r0, r4, asr #12
    a920:	266b0605 	strbtcs	r0, [fp], -r5, lsl #12
    a924:	2d080000 	stccs	0, cr0, [r8, #-0]
    a928:	000003cc 	andeq	r0, r0, ip, asr #7
    a92c:	21d40608 	bicscs	r0, r4, r8, lsl #12
    a930:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    a934:	0000039e 	muleq	r0, lr, r3
    a938:	2857060c 	ldmdacs	r7, {r2, r3, r9, sl}^
    a93c:	2f080000 	svccs	0x00080000
    a940:	000003a9 	andeq	r0, r0, r9, lsr #7
    a944:	22d70610 	sbcscs	r0, r7, #16, 12	; 0x1000000
    a948:	30080000 	andcc	r0, r8, r0
    a94c:	00000040 	andeq	r0, r0, r0, asr #32
    a950:	040f0014 	streq	r0, [pc], #-20	; a958 <__module_entries_end+0x2878>
    a954:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    a958:	0186040f 	orreq	r0, r6, pc, lsl #8
    a95c:	040f0000 	streq	r0, [pc], #-0	; a964 <__module_entries_end+0x2884>
    a960:	000001fa 	strdeq	r0, [r0], -sl
    a964:	0445040f 	strbeq	r0, [r5], #-1039	; 0xfffffbf1
    a968:	d1040000 	mrsle	r0, (UNDEF: 4)
    a96c:	0700002a 	streq	r0, [r0, -sl, lsr #32]
    a970:	0004c542 	andeq	ip, r4, r2, asr #10
    a974:	08010200 	stmdaeq	r1, {r9}
    a978:	00064420 	andeq	r4, r6, r0, lsr #8
    a97c:	2a9f0300 	bcs	fe7cb584 <_estack+0xf67bb584>
    a980:	03000000 	movweq	r0, #0
    a984:	00001fc0 	andeq	r1, r0, r0, asr #31
    a988:	222e0301 	eorcs	r0, lr, #67108864	; 0x4000000
    a98c:	03020000 	movweq	r0, #8192	; 0x2000
    a990:	000025c2 	andeq	r2, r0, r2, asr #11
    a994:	fd040003 	stc2	0, cr0, [r4, #-12]
    a998:	0800002a 	stmdaeq	r0, {r1, r3, r5}
    a99c:	00062326 	andeq	r2, r6, r6, lsr #6
    a9a0:	18040f00 	stmdane	r4, {r8, r9, sl, fp}
    a9a4:	04000006 	streq	r0, [r0], #-6
    a9a8:	00002580 	andeq	r2, r0, r0, lsl #11
    a9ac:	059f3208 	ldreq	r3, [pc, #520]	; abbc <__module_entries_end+0x2adc>
    a9b0:	93040000 	movwls	r0, #16384	; 0x4000
    a9b4:	09000026 	stmdbeq	r0, {r1, r2, r5}
    a9b8:	00066b21 	andeq	r6, r6, r1, lsr #22
    a9bc:	06801500 	streq	r1, [r0], r0, lsl #10
    a9c0:	80130000 	andshi	r0, r3, r0
    a9c4:	13000006 	movwne	r0, #6
    a9c8:	00000450 	andeq	r0, r0, r0, asr r4
    a9cc:	00045013 	andeq	r5, r4, r3, lsl r0
    a9d0:	040f0000 	streq	r0, [pc], #-0	; a9d8 <__module_entries_end+0x28f8>
    a9d4:	00000686 	andeq	r0, r0, r6, lsl #13
    a9d8:	0029070a 	eoreq	r0, r9, sl, lsl #14
    a9dc:	23092400 	movwcs	r2, #37888	; 0x9400
    a9e0:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a9e4:	00297d06 	eoreq	r7, r9, r6, lsl #26
    a9e8:	ff250900 			; <UNDEFINED> instruction: 0xff250900
    a9ec:	00000006 	andeq	r0, r0, r6
    a9f0:	00284406 	eoreq	r4, r8, r6, lsl #8
    a9f4:	05270900 	streq	r0, [r7, #-2304]!	; 0xfffff700
    a9f8:	04000007 	streq	r0, [r0], #-7
    a9fc:	00265106 	eoreq	r5, r6, r6, lsl #2
    aa00:	50280900 	eorpl	r0, r8, r0, lsl #18
    aa04:	08000004 	stmdaeq	r0, {r2}
    aa08:	002c0c06 	eoreq	r0, ip, r6, lsl #24
    aa0c:	9e290900 	cdpls	9, 2, cr0, cr9, cr0, {0}
    aa10:	0c000003 	stceq	0, cr0, [r0], {3}
    aa14:	00213f06 	eoreq	r3, r1, r6, lsl #30
    aa18:	c52b0900 	strgt	r0, [fp, #-2304]!	; 0xfffff700
    aa1c:	10000003 	andne	r0, r0, r3
    aa20:	0029eb06 	eoreq	lr, r9, r6, lsl #22
    aa24:	9e2c0900 	cdpls	9, 2, cr0, cr12, cr0, {0}
    aa28:	14000003 	strne	r0, [r0], #-3
    aa2c:	0023ba06 	eoreq	fp, r3, r6, lsl #20
    aa30:	0b2e0900 	bleq	b8ce38 <mailbuffer+0xb51d48>
    aa34:	18000007 	stmdane	r0, {r0, r1, r2}
    aa38:	00235906 	eoreq	r5, r3, r6, lsl #18
    aa3c:	502f0900 	eorpl	r0, pc, r0, lsl #18
    aa40:	1c000004 	stcne	0, cr0, [r0], {4}
    aa44:	002b1306 	eoreq	r1, fp, r6, lsl #6
    aa48:	50300900 	eorspl	r0, r0, r0, lsl #18
    aa4c:	20000004 	andcs	r0, r0, r4
    aa50:	55040f00 	strpl	r0, [r4, #-3840]	; 0xfffff100
    aa54:	0f000006 	svceq	0x00000006
    aa58:	0000ca04 	andeq	ip, r0, r4, lsl #20
    aa5c:	60040f00 	andvs	r0, r4, r0, lsl #30
    aa60:	04000006 	streq	r0, [r0], #-6
    aa64:	00002907 	andeq	r2, r0, r7, lsl #18
    aa68:	06863209 	streq	r3, [r6], r9, lsl #4
    aa6c:	08160000 	ldmdaeq	r6, {}	; <UNPREDICTABLE>
    aa70:	01000029 	tsteq	r0, r9, lsr #32
    aa74:	02140417 	andseq	r0, r4, #385875968	; 0x17000000
    aa78:	00014000 	andeq	r4, r1, r0
    aa7c:	789c0100 	ldmvc	ip, {r8}
    aa80:	17000007 	strne	r0, [r0, -r7]
    aa84:	000043af 	andeq	r4, r0, pc, lsr #7
    aa88:	07781701 	ldrbeq	r1, [r8, -r1, lsl #14]!
    aa8c:	91020000 	mrsls	r0, (UNDEF: 2)
    aa90:	297f176c 	ldmdbcs	pc!, {r2, r3, r5, r6, r8, r9, sl, ip}^	; <UNPREDICTABLE>
    aa94:	17010000 	strne	r0, [r1, -r0]
    aa98:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    aa9c:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
    aaa0:	00002653 	andeq	r2, r0, r3, asr r6
    aaa4:	04501701 	ldrbeq	r1, [r0], #-1793	; 0xfffff8ff
    aaa8:	91020000 	mrsls	r0, (UNDEF: 2)
    aaac:	2c0e1764 	stccs	7, cr1, [lr], {100}	; 0x64
    aab0:	17010000 	strne	r0, [r1, -r0]
    aab4:	0000039e 	muleq	r0, lr, r3
    aab8:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
    aabc:	00002846 	andeq	r2, r0, r6, asr #16
    aac0:	07051701 	streq	r1, [r5, -r1, lsl #14]
    aac4:	91020000 	mrsls	r0, (UNDEF: 2)
    aac8:	040f0000 	streq	r0, [pc], #-0	; aad0 <__module_entries_end+0x29f0>
    aacc:	00000711 	andeq	r0, r0, r1, lsl r7
    aad0:	00421416 	subeq	r1, r2, r6, lsl r4
    aad4:	44290100 	strtmi	r0, [r9], #-256	; 0xffffff00
    aad8:	98000215 	stmdals	r0, {r0, r2, r4, r9}
    aadc:	01000000 	mrseq	r0, (UNDEF: 0)
    aae0:	0007a29c 	muleq	r7, ip, r2
    aae4:	43af1700 			; <UNDEFINED> instruction: 0x43af1700
    aae8:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    aaec:	00000778 	andeq	r0, r0, r8, ror r7
    aaf0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    aaf4:	0041d018 	subeq	sp, r1, r8, lsl r0
    aaf8:	ff320100 			; <UNDEFINED> instruction: 0xff320100
    aafc:	dc000006 	stcle	0, cr0, [r0], {6}
    ab00:	a0000215 	andge	r0, r0, r5, lsl r2
    ab04:	01000000 	mrseq	r0, (UNDEF: 0)
    ab08:	0007ca9c 	muleq	r7, ip, sl
    ab0c:	43af1700 			; <UNDEFINED> instruction: 0x43af1700
    ab10:	32010000 	andcc	r0, r1, #0
    ab14:	00000778 	andeq	r0, r0, r8, ror r7
    ab18:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    ab1c:	0041e616 	subeq	lr, r1, r6, lsl r6
    ab20:	7c390100 	ldfvcs	f0, [r9], #-0
    ab24:	78000216 	stmdavc	r0, {r1, r2, r4, r9}
    ab28:	01000000 	mrseq	r0, (UNDEF: 0)
    ab2c:	0007fc9c 	muleq	r7, ip, ip
    ab30:	43af1700 			; <UNDEFINED> instruction: 0x43af1700
    ab34:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    ab38:	00000778 	andeq	r0, r0, r8, ror r7
    ab3c:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    ab40:	00002141 	andeq	r2, r0, r1, asr #2
    ab44:	03c53901 	biceq	r3, r5, #16384	; 0x4000
    ab48:	91020000 	mrsls	r0, (UNDEF: 2)
    ab4c:	9c160068 	ldcls	0, cr0, [r6], {104}	; 0x68
    ab50:	01000041 	tsteq	r0, r1, asr #32
    ab54:	0216f43f 	andseq	pc, r6, #1056964608	; 0x3f000000
    ab58:	00007800 	andeq	r7, r0, r0, lsl #16
    ab5c:	2e9c0100 	fmlcse	f0, f4, f0
    ab60:	17000008 	strne	r0, [r0, -r8]
    ab64:	000043af 	andeq	r4, r0, pc, lsr #7
    ab68:	07783f01 	ldrbeq	r3, [r8, -r1, lsl #30]!
    ab6c:	91020000 	mrsls	r0, (UNDEF: 2)
    ab70:	4c0e176c 	stcmi	7, cr1, [lr], {108}	; 0x6c
    ab74:	3f010000 	svccc	0x00010000
    ab78:	0000039e 	muleq	r0, lr, r3
    ab7c:	00689102 	rsbeq	r9, r8, r2, lsl #2
    ab80:	00414918 	subeq	r4, r1, r8, lsl r9
    ab84:	c5450100 	strbgt	r0, [r5, #-256]	; 0xffffff00
    ab88:	6c000003 	stcvs	0, cr0, [r0], {3}
    ab8c:	78000217 	stmdavc	r0, {r0, r1, r2, r4, r9}
    ab90:	01000000 	mrseq	r0, (UNDEF: 0)
    ab94:	0008569c 	muleq	r8, ip, r6
    ab98:	43af1700 			; <UNDEFINED> instruction: 0x43af1700
    ab9c:	45010000 	strmi	r0, [r1, #-0]
    aba0:	00000778 	andeq	r0, r0, r8, ror r7
    aba4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    aba8:	0041fa18 	subeq	pc, r1, r8, lsl sl	; <UNPREDICTABLE>
    abac:	9e4b0100 	dvflse	f0, f3, f0
    abb0:	e4000003 	str	r0, [r0], #-3
    abb4:	a0000217 	andge	r0, r0, r7, lsl r2
    abb8:	01000000 	mrseq	r0, (UNDEF: 0)
    abbc:	00087e9c 	muleq	r8, ip, lr
    abc0:	43af1700 			; <UNDEFINED> instruction: 0x43af1700
    abc4:	4b010000 	blmi	4abcc <mailbuffer+0xfadc>
    abc8:	00000778 	andeq	r0, r0, r8, ror r7
    abcc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    abd0:	0040d418 	subeq	sp, r0, r8, lsl r4
    abd4:	05530100 	ldrbeq	r0, [r3, #-256]	; 0xffffff00
    abd8:	84000007 	strhi	r0, [r0], #-7
    abdc:	d4000218 	strle	r0, [r0], #-536	; 0xfffffde8
    abe0:	01000000 	mrseq	r0, (UNDEF: 0)
    abe4:	0008a69c 	muleq	r8, ip, r6
    abe8:	43af1700 			; <UNDEFINED> instruction: 0x43af1700
    abec:	53010000 	movwpl	r0, #4096	; 0x1000
    abf0:	00000778 	andeq	r0, r0, r8, ror r7
    abf4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    abf8:	0041b318 	subeq	fp, r1, r8, lsl r3
    abfc:	505c0100 	subspl	r0, ip, r0, lsl #2
    ac00:	58000004 	stmdapl	r0, {r2}
    ac04:	b0000219 	andlt	r0, r0, r9, lsl r2
    ac08:	01000000 	mrseq	r0, (UNDEF: 0)
    ac0c:	0008ce9c 	muleq	r8, ip, lr
    ac10:	43af1700 			; <UNDEFINED> instruction: 0x43af1700
    ac14:	5c010000 	stcpl	0, cr0, [r1], {-0}
    ac18:	00000778 	andeq	r0, r0, r8, ror r7
    ac1c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    ac20:	0040c018 	subeq	ip, r0, r8, lsl r0
    ac24:	9e650100 	powlss	f0, f5, f0
    ac28:	08000003 	stmdaeq	r0, {r0, r1}
    ac2c:	7800021a 	stmdavc	r0, {r1, r3, r4, r9}
    ac30:	01000000 	mrseq	r0, (UNDEF: 0)
    ac34:	0008f69c 	muleq	r8, ip, r6
    ac38:	43af1700 			; <UNDEFINED> instruction: 0x43af1700
    ac3c:	65010000 	strvs	r0, [r1, #-0]
    ac40:	00000778 	andeq	r0, r0, r8, ror r7
    ac44:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    ac48:	00415d16 	subeq	r5, r1, r6, lsl sp
    ac4c:	806b0100 	rsbhi	r0, fp, r0, lsl #2
    ac50:	c000021a 	andgt	r0, r0, sl, lsl r2
    ac54:	01000000 	mrseq	r0, (UNDEF: 0)
    ac58:	0009449c 	muleq	r9, ip, r4
    ac5c:	43af1700 			; <UNDEFINED> instruction: 0x43af1700
    ac60:	6b010000 	blvs	4ac68 <mailbuffer+0xfb78>
    ac64:	00000778 	andeq	r0, r0, r8, ror r7
    ac68:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    ac6c:	000041c7 	andeq	r4, r0, r7, asr #3
    ac70:	070b6b01 	streq	r6, [fp, -r1, lsl #22]
    ac74:	91020000 	mrsls	r0, (UNDEF: 2)
    ac78:	011d1768 	tsteq	sp, r8, ror #14
    ac7c:	6b010000 	blvs	4ac84 <mailbuffer+0xfb94>
    ac80:	00000450 	andeq	r0, r0, r0, asr r4
    ac84:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
    ac88:	00001b48 	andeq	r1, r0, r8, asr #22
    ac8c:	04506b01 	ldrbeq	r6, [r0], #-2817	; 0xfffff4ff
    ac90:	91020000 	mrsls	r0, (UNDEF: 2)
    ac94:	7c190060 	ldcvc	0, cr0, [r9], {96}	; 0x60
    ac98:	01000041 	tsteq	r0, r1, asr #32
    ac9c:	021b4075 	andseq	r4, fp, #117	; 0x75
    aca0:	0000b000 	andeq	fp, r0, r0
    aca4:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    aca8:	000043af 	andeq	r4, r0, pc, lsr #7
    acac:	07787501 	ldrbeq	r7, [r8, -r1, lsl #10]!
    acb0:	91020000 	mrsls	r0, (UNDEF: 2)
    acb4:	4600006c 	strmi	r0, [r0], -ip, rrx
    acb8:	0400000e 	streq	r0, [r0], #-14
    acbc:	001c1900 	andseq	r1, ip, r0, lsl #18
    acc0:	19010400 	stmdbne	r1, {sl}
    acc4:	01000000 	mrseq	r0, (UNDEF: 0)
    acc8:	000042cd 	andeq	r4, r0, sp, asr #5
    accc:	00000ddc 	ldrdeq	r0, [r0], -ip
    acd0:	00021bf0 	strdeq	r1, [r2], -r0
    acd4:	000014a4 	andeq	r1, r0, r4, lsr #9
    acd8:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
    acdc:	1b020102 	blne	8b0ec <mailbuffer+0x4fffc>
    ace0:	00000040 	andeq	r0, r0, r0, asr #32
    ace4:	00254603 	eoreq	r4, r5, r3, lsl #12
    ace8:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    acec:	0100002b 	tsteq	r0, fp, lsr #32
    acf0:	0028bb03 	eoreq	fp, r8, r3, lsl #22
    acf4:	04000200 	streq	r0, [r0], #-512	; 0xfffffe00
    acf8:	00002213 	andeq	r2, r0, r3, lsl r2
    acfc:	00252202 	eoreq	r2, r5, r2, lsl #4
    ad00:	01020000 	mrseq	r0, (UNDEF: 2)
    ad04:	006c2b02 	rsbeq	r2, ip, r2, lsl #22
    ad08:	9a030000 	bls	cad10 <mailbuffer+0x8fc20>
    ad0c:	00000025 	andeq	r0, r0, r5, lsr #32
    ad10:	002c4903 	eoreq	r4, ip, r3, lsl #18
    ad14:	21030100 	mrscs	r0, (UNDEF: 19)
    ad18:	02000022 	andeq	r0, r0, #34	; 0x22
    ad1c:	00265b03 	eoreq	r5, r6, r3, lsl #22
    ad20:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    ad24:	00002421 	andeq	r2, r0, r1, lsr #8
    ad28:	004b3102 	subeq	r3, fp, r2, lsl #2
    ad2c:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    ad30:	00bc3402 	adcseq	r3, ip, r2, lsl #8
    ad34:	76060000 	strvc	r0, [r6], -r0
    ad38:	02000022 	andeq	r0, r0, #34	; 0x22
    ad3c:	0000bc36 	andeq	fp, r0, r6, lsr ip
    ad40:	d3060000 	movwle	r0, #24576	; 0x6000
    ad44:	02000027 	andeq	r0, r0, #39	; 0x27
    ad48:	0000bc37 	andeq	fp, r0, r7, lsr ip
    ad4c:	f3060100 	vrhadd.u8	d0, d6, d0
    ad50:	02000021 	andeq	r0, r0, #33	; 0x21
    ad54:	0000c338 	andeq	ip, r0, r8, lsr r3
    ad58:	0c060200 	sfmeq	f0, 4, [r6], {-0}
    ad5c:	0200001f 	andeq	r0, r0, #31
    ad60:	0000c339 	andeq	ip, r0, r9, lsr r3
    ad64:	b3060400 	movwlt	r0, #25600	; 0x6400
    ad68:	0200002b 	andeq	r0, r0, #43	; 0x2b
    ad6c:	0000c33a 	andeq	ip, r0, sl, lsr r3
    ad70:	07000600 	streq	r0, [r0, -r0, lsl #12]
    ad74:	072a0801 	streq	r0, [sl, -r1, lsl #16]!
    ad78:	02070000 	andeq	r0, r7, #0
    ad7c:	00013207 	andeq	r3, r1, r7, lsl #4
    ad80:	22080400 	andcs	r0, r8, #0, 8
    ad84:	3d020000 	stccc	0, cr0, [r2, #-0]
    ad88:	00000077 	andeq	r0, r0, r7, ror r0
    ad8c:	5c021205 	sfmpl	f1, 4, [r2], {5}
    ad90:	00000186 	andeq	r0, r0, r6, lsl #3
    ad94:	0029a806 	eoreq	sl, r9, r6, lsl #16
    ad98:	bc5e0200 	lfmlt	f0, 2, [lr], {-0}
    ad9c:	00000000 	andeq	r0, r0, r0
    ada0:	00242b06 	eoreq	r2, r4, r6, lsl #22
    ada4:	bc5f0200 	lfmlt	f0, 2, [pc], {-0}
    ada8:	01000000 	mrseq	r0, (UNDEF: 0)
    adac:	00228c06 	eoreq	r8, r2, r6, lsl #24
    adb0:	c3600200 	cmngt	r0, #0, 4
    adb4:	02000000 	andeq	r0, r0, #0
    adb8:	00212806 	eoreq	r2, r1, r6, lsl #16
    adbc:	bc610200 	sfmlt	f0, 2, [r1], #-0
    adc0:	04000000 	streq	r0, [r0], #-0
    adc4:	0022f606 	eoreq	pc, r2, r6, lsl #12
    adc8:	bc620200 	sfmlt	f0, 2, [r2], #-0
    adcc:	05000000 	streq	r0, [r0, #-0]
    add0:	00279f06 	eoreq	r9, r7, r6, lsl #30
    add4:	bc630200 	sfmlt	f0, 2, [r3], #-0
    add8:	06000000 	streq	r0, [r0], -r0
    addc:	0025e706 	eoreq	lr, r5, r6, lsl #14
    ade0:	bc640200 	sfmlt	f0, 2, [r4], #-0
    ade4:	07000000 	streq	r0, [r0, -r0]
    ade8:	002c5606 	eoreq	r5, ip, r6, lsl #12
    adec:	c3660200 	cmngt	r6, #0, 4
    adf0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    adf4:	00224406 	eoreq	r4, r2, r6, lsl #8
    adf8:	c3670200 	cmngt	r7, #0, 4
    adfc:	0a000000 	beq	ae04 <__module_entries_end+0x2d24>
    ae00:	00213506 	eoreq	r3, r1, r6, lsl #10
    ae04:	c3680200 	cmngt	r8, #0, 4
    ae08:	0c000000 	stceq	0, cr0, [r0], {-0}
    ae0c:	0021fa06 	eoreq	pc, r1, r6, lsl #20
    ae10:	bc690200 	sfmlt	f0, 2, [r9], #-0
    ae14:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ae18:	00233b06 	eoreq	r3, r3, r6, lsl #22
    ae1c:	bc6a0200 	sfmlt	f0, 2, [sl], #-0
    ae20:	0f000000 	svceq	0x00000000
    ae24:	00232206 	eoreq	r2, r3, r6, lsl #4
    ae28:	bc6b0200 	sfmlt	f0, 2, [fp], #-0
    ae2c:	10000000 	andne	r0, r0, r0
    ae30:	0028a806 	eoreq	sl, r8, r6, lsl #16
    ae34:	bc6c0200 	sfmlt	f0, 2, [ip], #-0
    ae38:	11000000 	mrsne	r0, (UNDEF: 0)
    ae3c:	28c70400 	stmiacs	r7, {sl}^
    ae40:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
    ae44:	000000d5 	ldrdeq	r0, [r0], -r5
    ae48:	71020905 	tstvc	r2, r5, lsl #18
    ae4c:	000001fa 	strdeq	r0, [r0], -sl
    ae50:	0029a806 	eoreq	sl, r9, r6, lsl #16
    ae54:	bc730200 	lfmlt	f0, 2, [r3], #-0
    ae58:	00000000 	andeq	r0, r0, r0
    ae5c:	00242b06 	eoreq	r2, r4, r6, lsl #22
    ae60:	bc740200 	lfmlt	f0, 2, [r4], #-0
    ae64:	01000000 	mrseq	r0, (UNDEF: 0)
    ae68:	00208806 	eoreq	r8, r0, r6, lsl #16
    ae6c:	c3750200 	cmngt	r5, #0, 4
    ae70:	02000000 	andeq	r0, r0, #0
    ae74:	0029b006 	eoreq	fp, r9, r6
    ae78:	bc760200 	lfmlt	f0, 2, [r6], #-0
    ae7c:	04000000 	streq	r0, [r0], #-0
    ae80:	002a4f06 	eoreq	r4, sl, r6, lsl #30
    ae84:	bc770200 	lfmlt	f0, 2, [r7], #-0
    ae88:	05000000 	streq	r0, [r0, #-0]
    ae8c:	00279006 	eoreq	r9, r7, r6
    ae90:	bc780200 	lfmlt	f0, 2, [r8], #-0
    ae94:	06000000 	streq	r0, [r0], -r0
    ae98:	00258d06 	eoreq	r8, r5, r6, lsl #26
    ae9c:	bc790200 	lfmlt	f0, 2, [r9], #-0
    aea0:	07000000 	streq	r0, [r0, -r0]
    aea4:	002ab306 	eoreq	fp, sl, r6, lsl #6
    aea8:	bc7a0200 	lfmlt	f0, 2, [sl], #-0
    aeac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    aeb0:	23060400 	movwcs	r0, #25600	; 0x6400
    aeb4:	7c020000 	stcvc	0, cr0, [r2], {-0}
    aeb8:	00000191 	muleq	r0, r1, r1
    aebc:	7f020905 	svcvc	0x00020905
    aec0:	0000027a 	andeq	r0, r0, sl, ror r2
    aec4:	0029a806 	eoreq	sl, r9, r6, lsl #16
    aec8:	bc810200 	sfmlt	f0, 4, [r1], {0}
    aecc:	00000000 	andeq	r0, r0, r0
    aed0:	00242b06 	eoreq	r2, r4, r6, lsl #22
    aed4:	bc820200 	sfmlt	f0, 4, [r2], {0}
    aed8:	01000000 	mrseq	r0, (UNDEF: 0)
    aedc:	00201706 	eoreq	r1, r0, r6, lsl #14
    aee0:	bc830200 	sfmlt	f0, 4, [r3], {0}
    aee4:	02000000 	andeq	r0, r0, #0
    aee8:	00204106 	eoreq	r4, r0, r6, lsl #2
    aeec:	bc840200 	sfmlt	f0, 4, [r4], {0}
    aef0:	03000000 	movweq	r0, #0
    aef4:	00276906 	eoreq	r6, r7, r6, lsl #18
    aef8:	bc850200 	sfmlt	f0, 4, [r5], {0}
    aefc:	04000000 	streq	r0, [r0], #-0
    af00:	00272106 	eoreq	r2, r7, r6, lsl #2
    af04:	bc860200 	sfmlt	f0, 4, [r6], {0}
    af08:	05000000 	streq	r0, [r0, #-0]
    af0c:	001f2906 	andseq	r2, pc, r6, lsl #18
    af10:	bc870200 	sfmlt	f0, 4, [r7], {0}
    af14:	06000000 	streq	r0, [r0], -r0
    af18:	00289506 	eoreq	r9, r8, r6, lsl #10
    af1c:	bc880200 	sfmlt	f0, 4, [r8], {0}
    af20:	07000000 	streq	r0, [r0, -r0]
    af24:	00271606 	eoreq	r1, r7, r6, lsl #12
    af28:	bc890200 	sfmlt	f0, 4, [r9], {0}
    af2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    af30:	27e40400 	strbcs	r0, [r4, r0, lsl #8]!
    af34:	8b020000 	blhi	8af3c <mailbuffer+0x4fe4c>
    af38:	00000205 	andeq	r0, r0, r5, lsl #4
    af3c:	8e020705 	cdphi	7, 0, cr0, cr2, cr5, {0}
    af40:	000002d6 	ldrdeq	r0, [r0], -r6
    af44:	0029a806 	eoreq	sl, r9, r6, lsl #16
    af48:	bc900200 	lfmlt	f0, 4, [r0], {0}
    af4c:	00000000 	andeq	r0, r0, r0
    af50:	00242b06 	eoreq	r2, r4, r6, lsl #22
    af54:	bc910200 	lfmlt	f0, 4, [r1], {0}
    af58:	01000000 	mrseq	r0, (UNDEF: 0)
    af5c:	0026c906 	eoreq	ip, r6, r6, lsl #18
    af60:	bc920200 	lfmlt	f0, 4, [r2], {0}
    af64:	02000000 	andeq	r0, r0, #0
    af68:	00258d06 	eoreq	r8, r5, r6, lsl #26
    af6c:	bc930200 	lfmlt	f0, 4, [r3], {0}
    af70:	03000000 	movweq	r0, #0
    af74:	00296006 	eoreq	r6, r9, r6
    af78:	c3940200 	orrsgt	r0, r4, #0, 4
    af7c:	04000000 	streq	r0, [r0], #-0
    af80:	00252206 	eoreq	r2, r5, r6, lsl #4
    af84:	bc950200 	lfmlt	f0, 4, [r5], {0}
    af88:	06000000 	streq	r0, [r0], -r0
    af8c:	2bda0400 	blcs	ff68bf94 <_estack+0xf767bf94>
    af90:	97020000 	strls	r0, [r2, -r0]
    af94:	00000285 	andeq	r0, r0, r5, lsl #5
    af98:	9c020205 	sfmls	f0, 4, [r2], {5}
    af9c:	00000302 	andeq	r0, r0, r2, lsl #6
    afa0:	0029a806 	eoreq	sl, r9, r6, lsl #16
    afa4:	bc9e0200 	lfmlt	f0, 4, [lr], {0}
    afa8:	00000000 	andeq	r0, r0, r0
    afac:	00242b06 	eoreq	r2, r4, r6, lsl #22
    afb0:	bc9f0200 	lfmlt	f0, 4, [pc], {0}
    afb4:	01000000 	mrseq	r0, (UNDEF: 0)
    afb8:	02090800 	andeq	r0, r9, #0, 16
    afbc:	0003379a 	muleq	r3, sl, r7
    afc0:	3c020900 	stccc	9, cr0, [r2], {-0}
    afc4:	a1020000 	mrsge	r0, (UNDEF: 2)
    afc8:	000002e1 	andeq	r0, r0, r1, ror #5
    afcc:	00279109 	eoreq	r9, r7, r9, lsl #2
    afd0:	faa30200 	blx	fe8cb7d8 <_estack+0xf68bb7d8>
    afd4:	09000001 	stmdbeq	r0, {r0}
    afd8:	00003c4c 	andeq	r3, r0, ip, asr #24
    afdc:	027aa402 	rsbseq	sl, sl, #33554432	; 0x2000000
    afe0:	84090000 	strhi	r0, [r9], #-0
    afe4:	02000025 	andeq	r0, r0, #37	; 0x25
    afe8:	0002d6a5 	andeq	sp, r2, r5, lsr #13
    afec:	fc040000 	stc2	0, cr0, [r4], {-0}
    aff0:	02000026 	andeq	r0, r0, #38	; 0x26
    aff4:	000302a7 	andeq	r0, r3, r7, lsr #5
    aff8:	24660a00 	strbtcs	r0, [r6], #-2560	; 0xfffff600
    affc:	02020000 	andeq	r0, r2, #0
    b000:	000373a9 	andeq	r7, r3, r9, lsr #7
    b004:	29a80600 	stmibcs	r8!, {r9, sl}
    b008:	ab020000 	blge	8b010 <mailbuffer+0x4ff20>
    b00c:	000000bc 	strheq	r0, [r0], -ip
    b010:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    b014:	ac020000 	stcge	0, cr0, [r2], {-0}
    b018:	000000bc 	strheq	r0, [r0], -ip
    b01c:	20740601 	rsbscs	r0, r4, r1, lsl #12
    b020:	ad020000 	stcge	0, cr0, [r2, #-0]
    b024:	00000373 	andeq	r0, r0, r3, ror r3
    b028:	c30b0002 	movwgt	r0, #45058	; 0xb002
    b02c:	82000000 	andhi	r0, r0, #0
    b030:	0c000003 	stceq	0, cr0, [r0], {3}
    b034:	00000382 	andeq	r0, r0, r2, lsl #7
    b038:	07040700 	streq	r0, [r4, -r0, lsl #14]
    b03c:	000001d4 	ldrdeq	r0, [r0], -r4
    b040:	00246604 	eoreq	r6, r4, r4, lsl #12
    b044:	42af0200 	adcmi	r0, pc, #0, 4
    b048:	0a000003 	beq	b05c <__module_entries_end+0x2f7c>
    b04c:	00003e63 	andeq	r3, r0, r3, ror #28
    b050:	012c0309 	teqeq	ip, r9, lsl #6
    b054:	06000004 	streq	r0, [r0], -r4
    b058:	00003e47 	andeq	r3, r0, r7, asr #28
    b05c:	00bc2e03 	adcseq	r2, ip, r3, lsl #28
    b060:	06000000 	streq	r0, [r0], -r0
    b064:	0000242b 	andeq	r2, r0, fp, lsr #8
    b068:	00bc2f03 	adcseq	r2, ip, r3, lsl #30
    b06c:	06010000 	streq	r0, [r1], -r0
    b070:	00003ed0 	ldrdeq	r3, [r0], -r0
    b074:	00bc3003 	adcseq	r3, ip, r3
    b078:	06020000 	streq	r0, [r2], -r0
    b07c:	00003e00 	andeq	r3, r0, r0, lsl #28
    b080:	00c33103 	sbceq	r3, r3, r3, lsl #2
    b084:	06030000 	streq	r0, [r3], -r0
    b088:	00003e96 	muleq	r0, r6, lr
    b08c:	00bc3603 	adcseq	r3, ip, r3, lsl #12
    b090:	06050000 	streq	r0, [r5], -r0
    b094:	00003ea5 	andeq	r3, r0, r5, lsr #29
    b098:	00bc3703 	adcseq	r3, ip, r3, lsl #14
    b09c:	06060000 	streq	r0, [r6], -r0
    b0a0:	00003e14 	andeq	r3, r0, r4, lsl lr
    b0a4:	04013803 	streq	r3, [r1], #-2051	; 0xfffff7fd
    b0a8:	06070000 	streq	r0, [r7], -r0
    b0ac:	00003df0 	strdeq	r3, [r0], -r0
    b0b0:	04013903 	streq	r3, [r1], #-2307	; 0xfffff6fd
    b0b4:	00080000 	andeq	r0, r8, r0
    b0b8:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    b0bc:	00041100 	andeq	r1, r4, r0, lsl #2
    b0c0:	03820d00 	orreq	r0, r2, #0, 26
    b0c4:	00000000 	andeq	r0, r0, r0
    b0c8:	003e6304 	eorseq	r6, lr, r4, lsl #6
    b0cc:	943b0300 	ldrtls	r0, [fp], #-768	; 0xfffffd00
    b0d0:	0a000003 	beq	b0e4 <__module_entries_end+0x3004>
    b0d4:	00004363 	andeq	r4, r0, r3, ror #6
    b0d8:	413d0304 	teqmi	sp, r4, lsl #6
    b0dc:	06000004 	streq	r0, [r0], -r4
    b0e0:	0000434d 	andeq	r4, r0, sp, asr #6
    b0e4:	00c33f03 	sbceq	r3, r3, r3, lsl #30
    b0e8:	06000000 	streq	r0, [r0], -r0
    b0ec:	00004358 	andeq	r4, r0, r8, asr r3
    b0f0:	00c34203 	sbceq	r4, r3, r3, lsl #4
    b0f4:	00020000 	andeq	r0, r2, r0
    b0f8:	00436304 	subeq	r6, r3, r4, lsl #6
    b0fc:	1c460300 	mcrrne	3, 0, r0, r6, cr0
    b100:	0a000004 	beq	b118 <__module_entries_end+0x3038>
    b104:	00003e75 	andeq	r3, r0, r5, ror lr
    b108:	71480304 	cmpvc	r8, r4, lsl #6
    b10c:	06000004 	streq	r0, [r0], -r4
    b110:	00003f3e 	andeq	r3, r0, lr, lsr pc
    b114:	00c34a03 	sbceq	r4, r3, r3, lsl #20
    b118:	06000000 	streq	r0, [r0], -r0
    b11c:	00003e30 	andeq	r3, r0, r0, lsr lr
    b120:	00c35203 	sbceq	r5, r3, r3, lsl #4
    b124:	00020000 	andeq	r0, r2, r0
    b128:	003e7504 	eorseq	r7, lr, r4, lsl #10
    b12c:	4c540300 	mrrcmi	3, 0, r0, r4, cr0
    b130:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    b134:	04003875 	streq	r3, [r0], #-2165	; 0xfffff78b
    b138:	0000bc17 	andeq	fp, r0, r7, lsl ip
    b13c:	33750e00 	cmncc	r5, #0, 28
    b140:	19040032 	stmdbne	r4, {r1, r4, r5}
    b144:	00000491 	muleq	r0, r1, r4
    b148:	1d070407 	cfstrsne	mvf0, [r7, #-28]	; 0xffffffe4
    b14c:	07000007 	streq	r0, [r0, -r7]
    b150:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
    b154:	01070000 	mrseq	r0, (UNDEF: 7)
    b158:	00073306 	andeq	r3, r7, r6, lsl #6
    b15c:	05020700 	streq	r0, [r2, #-1792]	; 0xfffff900
    b160:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    b164:	6905040f 	stmdbvs	r5, {r0, r1, r2, r3, sl}
    b168:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    b16c:	00002930 	andeq	r2, r0, r0, lsr r9
    b170:	04ad2004 	strteq	r2, [sp], #4
    b174:	04070000 	streq	r0, [r7], #-0
    b178:	00071807 	andeq	r1, r7, r7, lsl #16
    b17c:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
    b180:	00000798 	muleq	r0, r8, r7
    b184:	0025520a 	eoreq	r5, r5, sl, lsl #4
    b188:	1e051800 	cdpne	8, 0, cr1, cr5, cr0, {0}
    b18c:	00000522 	andeq	r0, r0, r2, lsr #10
    b190:	00265106 	eoreq	r5, r6, r6, lsl #2
    b194:	22200500 	eorcs	r0, r0, #0, 10
    b198:	00000005 	andeq	r0, r0, r5
    b19c:	002c0c06 	eoreq	r0, ip, r6, lsl #24
    b1a0:	91210500 	teqls	r1, r0, lsl #10
    b1a4:	04000004 	streq	r0, [r0], #-4
    b1a8:	00268a06 	eoreq	r8, r6, r6, lsl #20
    b1ac:	b4220500 	strtlt	r0, [r2], #-1280	; 0xfffffb00
    b1b0:	08000004 	stmdaeq	r0, {r2}
    b1b4:	00216906 	eoreq	r6, r1, r6, lsl #18
    b1b8:	22230500 	eorcs	r0, r3, #0, 10
    b1bc:	0c000005 	stceq	0, cr0, [r0], {5}
    b1c0:	00277d06 	eoreq	r7, r7, r6, lsl #26
    b1c4:	22240500 	eorcs	r0, r4, #0, 10
    b1c8:	10000005 	andne	r0, r0, r5
    b1cc:	002bbb06 	eoreq	fp, fp, r6, lsl #22
    b1d0:	22250500 	eorcs	r0, r5, #0, 10
    b1d4:	14000005 	strne	r0, [r0], #-5
    b1d8:	28041000 	stmdacs	r4, {ip}
    b1dc:	11000005 	tstne	r0, r5
    b1e0:	00000337 	andeq	r0, r0, r7, lsr r3
    b1e4:	00255204 	eoreq	r5, r5, r4, lsl #4
    b1e8:	cd270500 	cfstr32gt	mvfx0, [r7, #-0]
    b1ec:	12000004 	andne	r0, r0, #4
    b1f0:	26310a04 	ldrtcs	r0, [r1], -r4, lsl #20
    b1f4:	060c0000 	streq	r0, [ip], -r0
    b1f8:	00056b1f 	andeq	r6, r5, pc, lsl fp
    b1fc:	26510600 	ldrbcs	r0, [r1], -r0, lsl #12
    b200:	21060000 	mrscs	r0, (UNDEF: 6)
    b204:	0000056b 	andeq	r0, r0, fp, ror #10
    b208:	2bf10600 	blcs	ffc4ca10 <_estack+0xf7c3ca10>
    b20c:	22060000 	andcs	r0, r6, #0
    b210:	00000491 	muleq	r0, r1, r4
    b214:	24850604 	strcs	r0, [r5], #1540	; 0x604
    b218:	23060000 	movwcs	r0, #24576	; 0x6000
    b21c:	0000056b 	andeq	r0, r0, fp, ror #10
    b220:	04100008 	ldreq	r0, [r0], #-8
    b224:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    b228:	00263104 	eoreq	r3, r6, r4, lsl #2
    b22c:	3a250600 	bcc	94ca34 <mailbuffer+0x911944>
    b230:	0a000005 	beq	b24c <__module_entries_end+0x316c>
    b234:	0000253b 	andeq	r2, r0, fp, lsr r5
    b238:	ad21070c 	stcge	7, cr0, [r1, #-48]!	; 0xffffffd0
    b23c:	06000005 	streq	r0, [r0], -r5
    b240:	000020e0 	andeq	r2, r0, r0, ror #1
    b244:	064a2307 	strbeq	r2, [sl], -r7, lsl #6
    b248:	06000000 	streq	r0, [r0], -r0
    b24c:	00002c3c 	andeq	r2, r0, ip, lsr ip
    b250:	06502507 	ldrbeq	r2, [r0], -r7, lsl #10
    b254:	06040000 	streq	r0, [r4], -r0
    b258:	00002a95 	muleq	r0, r5, sl
    b25c:	06562707 	ldrbeq	r2, [r6], -r7, lsl #14
    b260:	00080000 	andeq	r0, r8, r0
    b264:	002ad10a 	eoreq	sp, sl, sl, lsl #2
    b268:	2d083800 	stccs	8, cr3, [r8, #-0]
    b26c:	0000064a 	andeq	r0, r0, sl, asr #12
    b270:	005a2806 	subseq	r2, sl, r6, lsl #16
    b274:	a22f0800 	eorge	r0, pc, #0, 16
    b278:	00000006 	andeq	r0, r0, r6
    b27c:	00244306 	eoreq	r4, r4, r6, lsl #6
    b280:	f1310800 			; <UNDEFINED> instruction: 0xf1310800
    b284:	04000006 	streq	r0, [r0], #-6
    b288:	00207c06 	eoreq	r7, r0, r6, lsl #24
    b28c:	7c330800 	ldcvc	8, cr0, [r3], #-0
    b290:	08000004 	stmdaeq	r0, {r2}
    b294:	00243b06 	eoreq	r3, r4, r6, lsl #22
    b298:	6c340800 	ldcvs	8, cr0, [r4], #-0
    b29c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b2a0:	00229306 	eoreq	r9, r2, r6, lsl #6
    b2a4:	58350800 	ldmdapl	r5!, {fp}
    b2a8:	0c000007 	stceq	0, cr0, [r0], {7}
    b2ac:	001f7a06 	andseq	r7, pc, r6, lsl #20
    b2b0:	7c370800 	ldcvc	8, cr0, [r7], #-0
    b2b4:	10000004 	andne	r0, r0, r4
    b2b8:	0026a906 	eoreq	sl, r6, r6, lsl #18
    b2bc:	7c380800 	ldcvc	8, cr0, [r8], #-0
    b2c0:	11000004 	tstne	r0, r4
    b2c4:	00296f06 	eoreq	r6, r9, r6, lsl #30
    b2c8:	5e3a0800 	cdppl	8, 3, cr0, cr10, cr0, {0}
    b2cc:	14000007 	strne	r0, [r0], #-7
    b2d0:	001fb206 	andseq	fp, pc, r6, lsl #4
    b2d4:	643b0800 	ldrtvs	r0, [fp], #-2048	; 0xfffff800
    b2d8:	18000007 	stmdane	r0, {r0, r1, r2}
    b2dc:	0027fc06 	eoreq	pc, r7, r6, lsl #24
    b2e0:	6a3d0800 	bvs	f4d2e8 <mailbuffer+0xf121f8>
    b2e4:	1c000007 	stcne	0, cr0, [r0], {7}
    b2e8:	002b3406 	eoreq	r3, fp, r6, lsl #8
    b2ec:	5c3f0800 	ldcpl	8, cr0, [pc], #-0	; b2f4 <__module_entries_end+0x3214>
    b2f0:	20000006 	andcs	r0, r0, r6
    b2f4:	00217806 	eoreq	r7, r1, r6, lsl #16
    b2f8:	5c400800 	mcrrpl	8, 0, r0, r0, cr0
    b2fc:	2c000006 	stccs	0, cr0, [r0], {6}
    b300:	ad041000 	stcge	0, cr1, [r4, #-0]
    b304:	10000005 	andne	r0, r0, r5
    b308:	00038904 	andeq	r8, r3, r4, lsl #18
    b30c:	71041000 	mrsvc	r1, (UNDEF: 4)
    b310:	04000005 	streq	r0, [r0], #-5
    b314:	0000253b 	andeq	r2, r0, fp, lsr r5
    b318:	057c2907 	ldrbeq	r2, [ip, #-2311]!	; 0xfffff6f9
    b31c:	01020000 	mrseq	r0, (UNDEF: 2)
    b320:	06882208 	streq	r2, [r8], r8, lsl #4
    b324:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    b328:	0000003c 	andeq	r0, r0, ip, lsr r0
    b32c:	003d7003 	eorseq	r7, sp, r3
    b330:	42030100 	andmi	r0, r3, #0, 2
    b334:	0200003c 	andeq	r0, r0, #60	; 0x3c
    b338:	003b9103 	eorseq	r9, fp, r3, lsl #2
    b33c:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    b340:	00003be0 	andeq	r3, r0, r0, ror #23
    b344:	06672808 	strbteq	r2, [r7], -r8, lsl #16
    b348:	b4130000 	ldrlt	r0, [r3], #-0
    b34c:	a2000004 	andge	r0, r0, #4
    b350:	14000006 	strne	r0, [r0], #-6
    b354:	0000064a 	andeq	r0, r0, sl, asr #12
    b358:	93041000 	movwls	r1, #16384	; 0x4000
    b35c:	0a000006 	beq	b37c <__module_entries_end+0x329c>
    b360:	00002876 	andeq	r2, r0, r6, ror r8
    b364:	f1260954 			; <UNDEFINED> instruction: 0xf1260954
    b368:	06000006 	streq	r0, [r0], -r6
    b36c:	0000273d 	andeq	r2, r0, sp, lsr r7
    b370:	04912809 	ldreq	r2, [r1], #2057	; 0x809
    b374:	06000000 	streq	r0, [r0], -r0
    b378:	00001f3c 	andeq	r1, r0, ip, lsr pc
    b37c:	0a6c2909 	beq	1b157a8 <mailbuffer+0x1ada6b8>
    b380:	06040000 	streq	r0, [r4], -r0
    b384:	000025da 	ldrdeq	r2, [r0], -sl
    b388:	0a712b09 	beq	1c55fb4 <mailbuffer+0x1c1aec4>
    b38c:	06080000 	streq	r0, [r8], -r0
    b390:	0000270b 	andeq	r2, r0, fp, lsl #14
    b394:	0a872d09 	beq	fe1d67c0 <_estack+0xf61c67c0>
    b398:	06480000 	strbeq	r0, [r8], -r0
    b39c:	00002b49 	andeq	r2, r0, r9, asr #22
    b3a0:	08992f09 	ldmeq	r9, {r0, r3, r8, r9, sl, fp, sp}
    b3a4:	004c0000 	subeq	r0, ip, r0
    b3a8:	06a80410 	ssateq	r0, #9, r0, lsl #8
    b3ac:	800a0000 	andhi	r0, sl, r0
    b3b0:	18000025 	stmdane	r0, {r0, r2, r5}
    b3b4:	0758280a 	ldrbeq	r2, [r8, -sl, lsl #16]
    b3b8:	e0060000 	and	r0, r6, r0
    b3bc:	0a000020 	beq	b444 <__module_entries_end+0x3364>
    b3c0:	0007a72a 	andeq	sl, r7, sl, lsr #14
    b3c4:	e8060000 	stmda	r6, {}	; <UNPREDICTABLE>
    b3c8:	0a00001f 	beq	b44c <__module_entries_end+0x336c>
    b3cc:	00047c2b 	andeq	r7, r4, fp, lsr #24
    b3d0:	49060400 	stmdbmi	r6, {sl}
    b3d4:	0a000021 	beq	b460 <__module_entries_end+0x3380>
    b3d8:	00079c2c 	andeq	r9, r7, ip, lsr #24
    b3dc:	6b060500 	blvs	18c7e4 <mailbuffer+0x1516f4>
    b3e0:	0a000026 	beq	b480 <__module_entries_end+0x33a0>
    b3e4:	0004b42d 	andeq	fp, r4, sp, lsr #8
    b3e8:	d4060800 	strle	r0, [r6], #-2048	; 0xfffff800
    b3ec:	0a000021 	beq	b478 <__module_entries_end+0x3398>
    b3f0:	0004862e 	andeq	r8, r4, lr, lsr #12
    b3f4:	57060c00 	strpl	r0, [r6, -r0, lsl #24]
    b3f8:	0a000028 	beq	b4a0 <__module_entries_end+0x33c0>
    b3fc:	0004912f 	andeq	r9, r4, pc, lsr #2
    b400:	d7061000 	strle	r1, [r6, -r0]
    b404:	0a000022 	beq	b494 <__module_entries_end+0x33b4>
    b408:	00004030 	andeq	r4, r0, r0, lsr r0
    b40c:	10001400 	andne	r1, r0, r0, lsl #8
    b410:	0006f704 	andeq	pc, r6, r4, lsl #14
    b414:	86041000 	strhi	r1, [r4], -r0
    b418:	10000001 	andne	r0, r0, r1
    b41c:	0001fa04 	andeq	pc, r1, r4, lsl #20
    b420:	2d041000 	stccs	0, cr1, [r4, #-0]
    b424:	04000005 	streq	r0, [r0], #-5
    b428:	00002ad1 	ldrdeq	r2, [r0], -r1
    b42c:	05ad4208 	streq	r4, [sp, #520]!	; 0x208
    b430:	01020000 	mrseq	r0, (UNDEF: 2)
    b434:	079c200a 	ldreq	r2, [ip, sl]
    b438:	9f030000 	svcls	0x00030000
    b43c:	0000002a 	andeq	r0, r0, sl, lsr #32
    b440:	001fc003 	andseq	ip, pc, r3
    b444:	2e030100 	adfcss	f0, f3, f0
    b448:	02000022 	andeq	r0, r0, #34	; 0x22
    b44c:	0025c203 	eoreq	ip, r5, r3, lsl #4
    b450:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    b454:	00002afd 	strdeq	r2, [r0], -sp
    b458:	077b260a 	ldrbeq	r2, [fp, -sl, lsl #12]!
    b45c:	04100000 	ldreq	r0, [r0], #-0
    b460:	00000770 	andeq	r0, r0, r0, ror r7
    b464:	00258004 	eoreq	r8, r5, r4
    b468:	f7320a00 			; <UNDEFINED> instruction: 0xf7320a00
    b46c:	04000006 	streq	r0, [r0], #-6
    b470:	00002693 	muleq	r0, r3, r6
    b474:	07c3210b 	strbeq	r2, [r3, fp, lsl #2]
    b478:	d8150000 	ldmdale	r5, {}	; <UNPREDICTABLE>
    b47c:	14000007 	strne	r0, [r0], #-7
    b480:	000007d8 	ldrdeq	r0, [r0], -r8
    b484:	00053814 	andeq	r3, r5, r4, lsl r8
    b488:	05381400 	ldreq	r1, [r8, #-1024]!	; 0xfffffc00
    b48c:	10000000 	andne	r0, r0, r0
    b490:	0007de04 	andeq	sp, r7, r4, lsl #28
    b494:	29070a00 	stmdbcs	r7, {r9, fp}
    b498:	0b240000 	bleq	90b4a0 <mailbuffer+0x8d03b0>
    b49c:	00085723 	andeq	r5, r8, r3, lsr #14
    b4a0:	297d0600 	ldmdbcs	sp!, {r9, sl}^
    b4a4:	250b0000 	strcs	r0, [fp, #-0]
    b4a8:	00000857 	andeq	r0, r0, r7, asr r8
    b4ac:	28440600 	stmdacs	r4, {r9, sl}^
    b4b0:	270b0000 	strcs	r0, [fp, -r0]
    b4b4:	0000085d 	andeq	r0, r0, sp, asr r8
    b4b8:	26510604 	ldrbcs	r0, [r1], -r4, lsl #12
    b4bc:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
    b4c0:	00000538 	andeq	r0, r0, r8, lsr r5
    b4c4:	2c0c0608 	stccs	6, cr0, [ip], {8}
    b4c8:	290b0000 	stmdbcs	fp, {}	; <UNPREDICTABLE>
    b4cc:	00000486 	andeq	r0, r0, r6, lsl #9
    b4d0:	213f060c 	teqcs	pc, ip, lsl #12
    b4d4:	2b0b0000 	blcs	2cb4dc <mailbuffer+0x2903ec>
    b4d8:	000004ad 	andeq	r0, r0, sp, lsr #9
    b4dc:	29eb0610 	stmibcs	fp!, {r4, r9, sl}^
    b4e0:	2c0b0000 	stccs	0, cr0, [fp], {-0}
    b4e4:	00000486 	andeq	r0, r0, r6, lsl #9
    b4e8:	23ba0614 			; <UNDEFINED> instruction: 0x23ba0614
    b4ec:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    b4f0:	00000863 	andeq	r0, r0, r3, ror #16
    b4f4:	23590618 	cmpcs	r9, #24, 12	; 0x1800000
    b4f8:	2f0b0000 	svccs	0x000b0000
    b4fc:	00000538 	andeq	r0, r0, r8, lsr r5
    b500:	2b13061c 	blcs	4ccd78 <mailbuffer+0x491c88>
    b504:	300b0000 	andcc	r0, fp, r0
    b508:	00000538 	andeq	r0, r0, r8, lsr r5
    b50c:	04100020 	ldreq	r0, [r0], #-32	; 0xffffffe0
    b510:	000007ad 	andeq	r0, r0, sp, lsr #15
    b514:	00ca0410 	sbceq	r0, sl, r0, lsl r4
    b518:	04100000 	ldreq	r0, [r0], #-0
    b51c:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    b520:	00290704 	eoreq	r0, r9, r4, lsl #14
    b524:	de320b00 	vaddle.f64	d0, d2, d0
    b528:	0a000007 	beq	b54c <__module_entries_end+0x346c>
    b52c:	00002749 	andeq	r2, r0, r9, asr #14
    b530:	99200c08 	stmdbls	r0!, {r3, sl, fp}
    b534:	06000008 	streq	r0, [r0], -r8
    b538:	00002443 	andeq	r2, r0, r3, asr #8
    b53c:	06f1220c 	ldrbteq	r2, [r1], ip, lsl #4
    b540:	06000000 	streq	r0, [r0], -r0
    b544:	000020e0 	andeq	r2, r0, r0, ror #1
    b548:	07a7240c 	streq	r2, [r7, ip, lsl #8]!
    b54c:	00040000 	andeq	r0, r4, r0
    b550:	00274904 	eoreq	r4, r7, r4, lsl #18
    b554:	74260c00 	strtvc	r0, [r6], #-3072	; 0xfffff400
    b558:	0a000008 	beq	b580 <__module_entries_end+0x34a0>
    b55c:	0000250d 	andeq	r2, r0, sp, lsl #10
    b560:	f91d0d18 			; <UNDEFINED> instruction: 0xf91d0d18
    b564:	06000008 	streq	r0, [r0], -r8
    b568:	000039ce 	andeq	r3, r0, lr, asr #19
    b56c:	090a1f0d 	stmdbeq	sl, {r0, r2, r3, r8, r9, sl, fp, ip}
    b570:	06000000 	streq	r0, [r0], -r0
    b574:	00005086 	andeq	r5, r0, r6, lsl #1
    b578:	090a210d 	stmdbeq	sl, {r0, r2, r3, r8, sp}
    b57c:	06040000 	streq	r0, [r4], -r0
    b580:	00005047 	andeq	r5, r0, r7, asr #32
    b584:	091f220d 	ldmdbeq	pc, {r0, r2, r3, r9, sp}	; <UNPREDICTABLE>
    b588:	06080000 	streq	r0, [r8], -r0
    b58c:	000036f4 	strdeq	r3, [r0], -r4
    b590:	0935230d 	ldmdbeq	r5!, {r0, r2, r3, r8, r9, sp}
    b594:	060c0000 	streq	r0, [ip], -r0
    b598:	00004fe9 	andeq	r4, r0, r9, ror #31
    b59c:	090a250d 	stmdbeq	sl, {r0, r2, r3, r8, sl, sp}
    b5a0:	06100000 	ldreq	r0, [r0], -r0
    b5a4:	00004fc0 	andeq	r4, r0, r0, asr #31
    b5a8:	091f270d 	ldmdbeq	pc, {r0, r2, r3, r8, r9, sl, sp}	; <UNPREDICTABLE>
    b5ac:	00140000 	andseq	r0, r4, r0
    b5b0:	00090415 	andeq	r0, r9, r5, lsl r4
    b5b4:	09041400 	stmdbeq	r4, {sl, ip}
    b5b8:	10000000 	andne	r0, r0, r0
    b5bc:	0008a404 	andeq	sl, r8, r4, lsl #8
    b5c0:	f9041000 			; <UNDEFINED> instruction: 0xf9041000
    b5c4:	13000008 	movwne	r0, #8
    b5c8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    b5cc:	0000091f 	andeq	r0, r0, pc, lsl r9
    b5d0:	00090414 	andeq	r0, r9, r4, lsl r4
    b5d4:	04100000 	ldreq	r0, [r0], #-0
    b5d8:	00000910 	andeq	r0, r0, r0, lsl r9
    b5dc:	00093515 	andeq	r3, r9, r5, lsl r5
    b5e0:	09041400 	stmdbeq	r4, {sl, ip}
    b5e4:	86140000 	ldrhi	r0, [r4], -r0
    b5e8:	00000004 	andeq	r0, r0, r4
    b5ec:	09250410 	stmdbeq	r5!, {r4, sl}
    b5f0:	0d040000 	stceq	0, cr0, [r4, #-0]
    b5f4:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    b5f8:	0008a429 	andeq	sl, r8, r9, lsr #8
    b5fc:	22a00a00 	adccs	r0, r0, #0, 20
    b600:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    b604:	000a4f22 	andeq	r4, sl, r2, lsr #30
    b608:	2a290600 	bcs	a4ce10 <mailbuffer+0xa11d20>
    b60c:	240e0000 	strcs	r0, [lr], #-0
    b610:	00000491 	muleq	r0, r1, r4
    b614:	262a0600 	strtcs	r0, [sl], -r0, lsl #12
    b618:	250e0000 	strcs	r0, [lr, #-0]
    b61c:	00000a4f 	andeq	r0, r0, pc, asr #20
    b620:	21bb0604 			; <UNDEFINED> instruction: 0x21bb0604
    b624:	260e0000 	strcs	r0, [lr], -r0
    b628:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    b62c:	22670608 	rsbcs	r0, r7, #8, 12	; 0x800000
    b630:	270e0000 	strcs	r0, [lr, -r0]
    b634:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    b638:	2abd060c 	bcs	fef4ce70 <_estack+0xf6f3ce70>
    b63c:	290e0000 	stmdbcs	lr, {}	; <UNPREDICTABLE>
    b640:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    b644:	21170610 	tstcs	r7, r0, lsl r6
    b648:	2a0e0000 	bcs	38b650 <mailbuffer+0x350560>
    b64c:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    b650:	20e00614 	rsccs	r0, r0, r4, lsl r6
    b654:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    b658:	000007a7 	andeq	r0, r0, r7, lsr #15
    b65c:	297d0618 	ldmdbcs	sp!, {r3, r4, r9, sl}^
    b660:	2d0e0000 	stccs	0, cr0, [lr, #-0]
    b664:	00000857 	andeq	r0, r0, r7, asr r8
    b668:	243b061c 	ldrtcs	r0, [fp], #-1564	; 0xfffff9e4
    b66c:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    b670:	0000006c 	andeq	r0, r0, ip, rrx
    b674:	21d40620 	bicscs	r0, r4, r0, lsr #12
    b678:	2f0e0000 	svccs	0x000e0000
    b67c:	00000486 	andeq	r0, r0, r6, lsl #9
    b680:	239c0624 	orrscs	r0, ip, #36, 12	; 0x2400000
    b684:	310e0000 	mrscc	r0, (UNDEF: 14)
    b688:	00000486 	andeq	r0, r0, r6, lsl #9
    b68c:	21b00628 	lsrscs	r0, r8, #12
    b690:	320e0000 	andcc	r0, lr, #0
    b694:	00000491 	muleq	r0, r1, r4
    b698:	2095062c 	addscs	r0, r5, ip, lsr #12
    b69c:	330e0000 	movwcc	r0, #57344	; 0xe000
    b6a0:	00000486 	andeq	r0, r0, r6, lsl #9
    b6a4:	20ea0630 	rsccs	r0, sl, r0, lsr r6
    b6a8:	340e0000 	strcc	r0, [lr], #-0
    b6ac:	00000491 	muleq	r0, r1, r4
    b6b0:	26390634 			; <UNDEFINED> instruction: 0x26390634
    b6b4:	350e0000 	strcc	r0, [lr, #-0]
    b6b8:	00000486 	andeq	r0, r0, r6, lsl #9
    b6bc:	288c0638 	stmcs	ip, {r3, r4, r5, r9, sl}
    b6c0:	370e0000 	strcc	r0, [lr, -r0]
    b6c4:	00000491 	muleq	r0, r1, r4
    b6c8:	2731063c 			; <UNDEFINED> instruction: 0x2731063c
    b6cc:	380e0000 	stmdacc	lr, {}	; <UNPREDICTABLE>
    b6d0:	00000491 	muleq	r0, r1, r4
    b6d4:	282f0640 	stmdacs	pc!, {r6, r9, sl}	; <UNPREDICTABLE>
    b6d8:	390e0000 	stmdbcc	lr, {}	; <UNPREDICTABLE>
    b6dc:	00000486 	andeq	r0, r0, r6, lsl #9
    b6e0:	2adc0644 	bcs	ff70cff8 <_estack+0xf76fcff8>
    b6e4:	3b0e0000 	blcc	38b6ec <mailbuffer+0x3505fc>
    b6e8:	00000a55 	andeq	r0, r0, r5, asr sl
    b6ec:	24a70648 	strtcs	r0, [r7], #1608	; 0x648
    b6f0:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    b6f4:	00000538 	andeq	r0, r0, r8, lsr r5
    b6f8:	1fa0064c 	svcne	0x00a0064c
    b6fc:	3e0e0000 	cdpcc	0, 0, cr0, cr14, cr0, {0}
    b700:	00000a5b 	andeq	r0, r0, fp, asr sl
    b704:	04100050 	ldreq	r0, [r0], #-80	; 0xffffffb0
    b708:	00000869 	andeq	r0, r0, r9, ror #16
    b70c:	04860410 	streq	r0, [r6], #1040	; 0x410
    b710:	04100000 	ldreq	r0, [r0], #-0
    b714:	0000093b 	andeq	r0, r0, fp, lsr r9
    b718:	0022a004 	eoreq	sl, r2, r4
    b71c:	46400e00 	strbmi	r0, [r0], -r0, lsl #28
    b720:	16000009 	strne	r0, [r0], -r9
    b724:	00000491 	muleq	r0, r1, r4
    b728:	000a810b 	andeq	r8, sl, fp, lsl #2
    b72c:	000a8100 	andeq	r8, sl, r0, lsl #2
    b730:	03820d00 	orreq	r0, r2, #0, 26
    b734:	000f0000 	andeq	r0, pc, r0
    b738:	0a610410 	beq	184c780 <mailbuffer+0x1811690>
    b73c:	b4160000 	ldrlt	r0, [r6], #-0
    b740:	04000004 	streq	r0, [r0], #-4
    b744:	00002876 	andeq	r2, r0, r6, ror r8
    b748:	06a83109 	strteq	r3, [r8], r9, lsl #2
    b74c:	530a0000 	movwpl	r0, #40960	; 0xa000
    b750:	8000003e 	andhi	r0, r0, lr, lsr r0
    b754:	0ae0220f 	beq	ff813f98 <_estack+0xf7803f98>
    b758:	01060000 	mrseq	r0, (UNDEF: 6)
    b75c:	0f000025 	svceq	0x00000025
    b760:	00077024 	andeq	r7, r7, r4, lsr #32
    b764:	25060000 	strcs	r0, [r6, #-0]
    b768:	0f00003e 	svceq	0x0000003e
    b76c:	000ae026 	andeq	lr, sl, r6, lsr #32
    b770:	3e063800 	cdpcc	8, 0, cr3, cr6, cr0, {0}
    b774:	0f00003e 	svceq	0x0000003e
    b778:	00049128 	andeq	r9, r4, r8, lsr #2
    b77c:	e0063c00 	and	r3, r6, r0, lsl #24
    b780:	0f000020 	svceq	0x00000020
    b784:	000ae629 	andeq	lr, sl, r9, lsr #12
    b788:	84064000 	strhi	r4, [r6], #-0
    b78c:	0f00003e 	svceq	0x0000003e
    b790:	000af62a 	andeq	pc, sl, sl, lsr #12
    b794:	10006000 	andne	r6, r0, r0
    b798:	00041104 	andeq	r1, r4, r4, lsl #2
    b79c:	07a70b00 	streq	r0, [r7, r0, lsl #22]!
    b7a0:	0af60000 	beq	ffd8b7a8 <_estack+0xf7d7b7a8>
    b7a4:	820d0000 	andhi	r0, sp, #0
    b7a8:	07000003 	streq	r0, [r0, -r3]
    b7ac:	0b060b00 	bleq	18e3b4 <mailbuffer+0x1532c4>
    b7b0:	0b060000 	bleq	18b7b8 <mailbuffer+0x1506c8>
    b7b4:	820d0000 	andhi	r0, sp, #0
    b7b8:	07000003 	streq	r0, [r0, -r3]
    b7bc:	71041000 	mrsvc	r1, (UNDEF: 4)
    b7c0:	04000004 	streq	r0, [r0], #-4
    b7c4:	00003e53 	andeq	r3, r0, r3, asr lr
    b7c8:	0a972c0f 	beq	fe5d680c <_estack+0xf65c680c>
    b7cc:	54170000 	ldrpl	r0, [r7], #-0
    b7d0:	0100003e 	tsteq	r0, lr, lsr r0
    b7d4:	021bf01e 	andseq	pc, fp, #30
    b7d8:	0000f000 	andeq	pc, r0, r0
    b7dc:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    b7e0:	1800000b 	stmdane	r0, {r0, r1, r3}
    b7e4:	000043af 	andeq	r4, r0, pc, lsr #7
    b7e8:	0b611e01 	bleq	1852ff4 <mailbuffer+0x1817f04>
    b7ec:	91020000 	mrsls	r0, (UNDEF: 2)
    b7f0:	20e21864 	rsccs	r1, r2, r4, ror #16
    b7f4:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    b7f8:	000007a7 	andeq	r0, r0, r7, lsr #15
    b7fc:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    b800:	00021c78 	andeq	r1, r2, r8, ror ip
    b804:	0000004c 	andeq	r0, r0, ip, asr #32
    b808:	0043711a 	subeq	r7, r3, sl, lsl r1
    b80c:	91280100 	teqls	r8, r0, lsl #2
    b810:	02000004 	andeq	r0, r0, #4
    b814:	00006c91 	muleq	r0, r1, ip
    b818:	0b0c0410 	bleq	30c860 <mailbuffer+0x2d1770>
    b81c:	36170000 	ldrcc	r0, [r7], -r0
    b820:	01000043 	tsteq	r0, r3, asr #32
    b824:	021ce02f 	andseq	lr, ip, #47	; 0x2f
    b828:	00017800 	andeq	r7, r1, r0, lsl #16
    b82c:	a39c0100 	orrsge	r0, ip, #0, 2
    b830:	1800000b 	stmdane	r0, {r0, r1, r3}
    b834:	000043af 	andeq	r4, r0, pc, lsr #7
    b838:	0b612f01 	bleq	1857444 <mailbuffer+0x181c354>
    b83c:	91020000 	mrsls	r0, (UNDEF: 2)
    b840:	1d2c1964 	stcne	9, cr1, [ip, #-400]!	; 0xfffffe70
    b844:	00cc0002 	sbceq	r0, ip, r2
    b848:	711a0000 	tstvc	sl, r0
    b84c:	01000043 	tsteq	r0, r3, asr #32
    b850:	00049133 	andeq	r9, r4, r3, lsr r1
    b854:	6c910200 	lfmvs	f0, 4, [r1], {0}
    b858:	7f1b0000 	svcvc	0x001b0000
    b85c:	01000042 	tsteq	r0, r2, asr #32
    b860:	0004b44e 	andeq	fp, r4, lr, asr #8
    b864:	021e5800 	andseq	r5, lr, #0, 16
    b868:	00008000 	andeq	r8, r0, r0
    b86c:	cb9c0100 	blgt	fe70bc74 <_estack+0xf66fbc74>
    b870:	1800000b 	stmdane	r0, {r0, r1, r3}
    b874:	000043af 	andeq	r4, r0, pc, lsr #7
    b878:	0b614e01 	bleq	185f084 <mailbuffer+0x1823f94>
    b87c:	91020000 	mrsls	r0, (UNDEF: 2)
    b880:	981b006c 	ldmdals	fp, {r2, r3, r5, r6}
    b884:	01000042 	tsteq	r0, r2, asr #32
    b888:	0004b454 	andeq	fp, r4, r4, asr r4
    b88c:	021ed800 	andseq	sp, lr, #0, 16
    b890:	00050400 	andeq	r0, r5, r0, lsl #8
    b894:	519c0100 	orrspl	r0, ip, r0, lsl #2
    b898:	1800000c 	stmdane	r0, {r2, r3}
    b89c:	00002330 	andeq	r2, r0, r0, lsr r3
    b8a0:	07a75401 	streq	r5, [r7, r1, lsl #8]!
    b8a4:	91020000 	mrsls	r0, (UNDEF: 2)
    b8a8:	43af1a54 			; <UNDEFINED> instruction: 0x43af1a54
    b8ac:	56010000 	strpl	r0, [r1], -r0
    b8b0:	00000b61 	andeq	r0, r0, r1, ror #22
    b8b4:	1a6c9102 	bne	1b2fcc4 <mailbuffer+0x1af4bd4>
    b8b8:	00002971 	andeq	r2, r0, r1, ror r9
    b8bc:	0c515901 	mrrceq	9, 0, r5, r1, cr1
    b8c0:	91020000 	mrsls	r0, (UNDEF: 2)
    b8c4:	1fb41a68 	svcne	0x00b41a68
    b8c8:	67010000 	strvs	r0, [r1, -r0]
    b8cc:	00000c5c 	andeq	r0, r0, ip, asr ip
    b8d0:	1a649102 	bne	192fce0 <mailbuffer+0x18f4bf0>
    b8d4:	00004228 	andeq	r4, r0, r8, lsr #4
    b8d8:	0c677101 	stfeqe	f7, [r7], #-4
    b8dc:	91020000 	mrsls	r0, (UNDEF: 2)
    b8e0:	24451a60 	strbcs	r1, [r5], #-2656	; 0xfffff5a0
    b8e4:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    b8e8:	00000c72 	andeq	r0, r0, r2, ror ip
    b8ec:	19589102 	ldmdbne	r8, {r1, r8, ip, pc}^
    b8f0:	00022018 	andeq	r2, r2, r8, lsl r0
    b8f4:	000000cc 	andeq	r0, r0, ip, asr #1
    b8f8:	0042541a 	subeq	r5, r2, sl, lsl r4
    b8fc:	78820100 	stmvc	r2, {r8}
    b900:	0200000c 	andeq	r0, r0, #12
    b904:	00005c91 	muleq	r0, r1, ip
    b908:	0c570410 	cfldrdeq	mvd0, [r7], {16}
    b90c:	86110000 	ldrhi	r0, [r1], -r0
    b910:	10000001 	andne	r0, r0, r1
    b914:	000c6204 	andeq	r6, ip, r4, lsl #4
    b918:	01fa1100 	mvnseq	r1, r0, lsl #2
    b91c:	04100000 	ldreq	r0, [r0], #-0
    b920:	00000c6d 	andeq	r0, r0, sp, ror #24
    b924:	00027a11 	andeq	r7, r2, r1, lsl sl
    b928:	8c041000 	stchi	0, cr1, [r4], {-0}
    b92c:	1000000a 	andne	r0, r0, sl
    b930:	000c7e04 	andeq	r7, ip, r4, lsl #28
    b934:	02d61100 	sbcseq	r1, r6, #0, 2
    b938:	371b0000 	ldrcc	r0, [fp, -r0]
    b93c:	01000042 	tsteq	r0, r2, asr #32
    b940:	0004b4d9 	ldrdeq	fp, [r4], -r9
    b944:	0223dc00 	eoreq	sp, r3, #0, 24
    b948:	000b1c00 	andeq	r1, fp, r0, lsl #24
    b94c:	b29c0100 	addslt	r0, ip, #0, 2
    b950:	1800000d 	stmdane	r0, {r0, r2, r3}
    b954:	000043af 	andeq	r4, r0, pc, lsr #7
    b958:	0b61d901 	bleq	1881d64 <mailbuffer+0x1846c74>
    b95c:	91030000 	mrsls	r0, (UNDEF: 3)
    b960:	451a7fbc 	ldrmi	r7, [sl, #-4028]	; 0xfffff044
    b964:	01000024 	tsteq	r0, r4, lsr #32
    b968:	000c72dd 	ldrdeq	r7, [ip], -sp
    b96c:	50910200 	addspl	r0, r1, r0, lsl #4
    b970:	0022951a 	eoreq	r9, r2, sl, lsl r5
    b974:	57e00100 	strbpl	r0, [r0, r0, lsl #2]!
    b978:	02000008 	andeq	r0, r0, #8
    b97c:	6a1c4c91 	bvs	71ebc8 <mailbuffer+0x6e3ad8>
    b980:	01000042 	tsteq	r0, r2, asr #32
    b984:	0db2017d 	ldfeqs	f0, [r2, #500]!	; 0x1f4
    b988:	91020000 	mrsls	r0, (UNDEF: 2)
    b98c:	42201c40 	eormi	r1, r0, #64, 24	; 0x4000
    b990:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    b994:	0004b401 	andeq	fp, r4, r1, lsl #8
    b998:	58910200 	ldmpl	r1, {r9}
    b99c:	0224b81d 	eoreq	fp, r4, #1900544	; 0x1d0000
    b9a0:	0000a000 	andeq	sl, r0, r0
    b9a4:	000d0100 	andeq	r0, sp, r0, lsl #2
    b9a8:	43711a00 	cmnmi	r1, #0, 20
    b9ac:	e6010000 	str	r0, [r1], -r0
    b9b0:	00000491 	muleq	r0, r1, r4
    b9b4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    b9b8:	0225601d 	eoreq	r6, r5, #29
    b9bc:	00056400 	andeq	r6, r5, r0, lsl #8
    b9c0:	000d4500 	andeq	r4, sp, r0, lsl #10
    b9c4:	43711a00 	cmnmi	r1, #0, 20
    b9c8:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    b9cc:	00000491 	muleq	r0, r1, r4
    b9d0:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    b9d4:	0002256c 	andeq	r2, r2, ip, ror #10
    b9d8:	00000538 	andeq	r0, r0, r8, lsr r5
    b9dc:	0024251c 	eoreq	r2, r4, ip, lsl r5
    b9e0:	01330100 	teqeq	r3, r0, lsl #2
    b9e4:	0000006c 	andeq	r0, r0, ip, rrx
    b9e8:	1c679102 	stfnep	f1, [r7], #-8
    b9ec:	00004346 	andeq	r4, r0, r6, asr #6
    b9f0:	56015001 	strpl	r5, [r1], -r1
    b9f4:	02000006 	andeq	r0, r0, #6
    b9f8:	00004891 	muleq	r0, r1, r8
    b9fc:	022ac41d 	eoreq	ip, sl, #486539264	; 0x1d000000
    ba00:	00019800 	andeq	r9, r1, r0, lsl #16
    ba04:	000d7b00 	andeq	r7, sp, r0, lsl #22
    ba08:	43711c00 	cmnmi	r1, #0, 24
    ba0c:	5a010000 	bpl	4ba14 <mailbuffer+0x10924>
    ba10:	00049101 	andeq	r9, r4, r1, lsl #2
    ba14:	60910200 	addsvs	r0, r1, r0, lsl #4
    ba18:	022ad019 	eoreq	sp, sl, #25
    ba1c:	00016c00 	andeq	r6, r1, r0, lsl #24
    ba20:	432f1c00 	teqmi	pc, #0, 24
    ba24:	62010000 	andvs	r0, r1, #0
    ba28:	0007a701 	andeq	sl, r7, r1, lsl #14
    ba2c:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    ba30:	101d0000 	andsne	r0, sp, r0
    ba34:	6c00022d 	sfmvs	f0, 4, [r0], {45}	; 0x2d
    ba38:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    ba3c:	1c00000d 	stcne	0, cr0, [r0], {13}
    ba40:	00004371 	andeq	r4, r0, r1, ror r3
    ba44:	91018d01 	tstls	r1, r1, lsl #26
    ba48:	02000004 	andeq	r0, r0, #4
    ba4c:	19005c91 	stmdbne	r0, {r0, r4, r7, sl, fp, ip, lr}
    ba50:	00022dbc 			; <UNDEFINED> instruction: 0x00022dbc
    ba54:	00000114 	andeq	r0, r0, r4, lsl r1
    ba58:	0043711c 	subeq	r7, r3, ip, lsl r1
    ba5c:	01a00100 	lsleq	r0, r0, #2
    ba60:	00000491 	muleq	r0, r1, r4
    ba64:	00549102 	subseq	r9, r4, r2, lsl #2
    ba68:	41041000 	mrsmi	r1, (UNDEF: 4)
    ba6c:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    ba70:	000042b0 			; <UNDEFINED> instruction: 0x000042b0
    ba74:	5601b801 	strpl	fp, [r1], -r1, lsl #16
    ba78:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
    ba7c:	9c00022e 	sfmls	f0, 4, [r0], {46}	; 0x2e
    ba80:	01000001 	tsteq	r0, r1
    ba84:	000e239c 	muleq	lr, ip, r3
    ba88:	20e21f00 	rsccs	r1, r2, r0, lsl #30
    ba8c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    ba90:	0007a701 	andeq	sl, r7, r1, lsl #14
    ba94:	5c910200 	lfmpl	f0, 4, [r1], {0}
    ba98:	003b3a1c 	eorseq	r3, fp, ip, lsl sl
    ba9c:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    baa0:	00000656 	andeq	r0, r0, r6, asr r6
    baa4:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    baa8:	00022f80 	andeq	r2, r2, r0, lsl #31
    baac:	000000c8 	andeq	r0, r0, r8, asr #1
    bab0:	0042751c 	subeq	r7, r2, ip, lsl r5
    bab4:	01c00100 	biceq	r0, r0, r0, lsl #2
    bab8:	00000491 	muleq	r0, r1, r4
    babc:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    bac0:	00022f8c 	andeq	r2, r2, ip, lsl #31
    bac4:	000000a4 	andeq	r0, r0, r4, lsr #1
    bac8:	00221b1c 	eoreq	r1, r2, ip, lsl fp
    bacc:	01c20100 	biceq	r0, r2, r0, lsl #2
    bad0:	00000656 	andeq	r0, r0, r6, asr r6
    bad4:	00649102 	rsbeq	r9, r4, r2, lsl #2
    bad8:	9f0b0000 	svcls	0x000b0000
    badc:	33000004 	movwcc	r0, #4
    bae0:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    bae4:	00000382 	andeq	r0, r0, r2, lsl #7
    bae8:	621a0006 	andsvs	r0, sl, #6
    baec:	01000042 	tsteq	r0, r2, asr #32
    baf0:	000e441c 	andeq	r4, lr, ip, lsl r4
    baf4:	30030500 	andcc	r0, r3, r0, lsl #10
    baf8:	110002f2 	strdne	r0, [r0, -r2]
    bafc:	00000e23 	andeq	r0, r0, r3, lsr #28
    bb00:	00022d00 	andeq	r2, r2, r0, lsl #26
    bb04:	ac000400 	cfstrsge	mvf0, [r0], {-0}
    bb08:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    bb0c:	00001901 	andeq	r1, r0, r1, lsl #18
    bb10:	43dd0100 	bicsmi	r0, sp, #0, 2
    bb14:	30940000 	addscc	r0, r4, r0
    bb18:	05200002 	streq	r0, [r0, #-2]!
    bb1c:	3cb50000 	ldccc	0, cr0, [r5]
    bb20:	01020000 	mrseq	r0, (UNDEF: 2)
    bb24:	00072a08 	andeq	r2, r7, r8, lsl #20
    bb28:	07020200 	streq	r0, [r2, -r0, lsl #4]
    bb2c:	00000132 	andeq	r0, r0, r2, lsr r1
    bb30:	1d070402 	cfstrsne	mvf0, [r7, #-8]
    bb34:	02000007 	andeq	r0, r0, #7
    bb38:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
    bb3c:	01020000 	mrseq	r0, (UNDEF: 2)
    bb40:	00073306 	andeq	r3, r7, r6, lsl #6
    bb44:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    bb48:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    bb4c:	69050403 	stmdbvs	r5, {r0, r1, sl}
    bb50:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    bb54:	00002930 	andeq	r2, r0, r0, lsr r9
    bb58:	004b2003 	subeq	r2, fp, r3
    bb5c:	04020000 	streq	r0, [r2], #-0
    bb60:	00071807 	andeq	r1, r7, r7, lsl #16
    bb64:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    bb68:	00000798 	muleq	r0, r8, r7
    bb6c:	0026f005 	eoreq	pc, r6, r5
    bb70:	19021000 	stmdbne	r2, {ip}
    bb74:	000000a8 	andeq	r0, r0, r8, lsr #1
    bb78:	001f2306 	andseq	r2, pc, r6, lsl #6
    bb7c:	a81b0200 	ldmdage	fp, {r9}
    bb80:	00000000 	andeq	r0, r0, r0
    bb84:	00221b06 	eoreq	r1, r2, r6, lsl #22
    bb88:	ae1c0200 	cdpge	2, 1, cr0, cr12, cr0, {0}
    bb8c:	04000000 	streq	r0, [r0], #-0
    bb90:	0020e206 	eoreq	lr, r0, r6, lsl #4
    bb94:	b41d0200 	ldrlt	r0, [sp], #-512	; 0xfffffe00
    bb98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bb9c:	0029f806 	eoreq	pc, r9, r6, lsl #16
    bba0:	521e0200 	andspl	r0, lr, #0, 4
    bba4:	0c000000 	stceq	0, cr0, [r0], {-0}
    bba8:	6b040700 	blvs	10d7b0 <mailbuffer+0xd26c0>
    bbac:	07000000 	streq	r0, [r0, -r0]
    bbb0:	00003d04 	andeq	r3, r0, r4, lsl #26
    bbb4:	04040800 	streq	r0, [r4], #-2048	; 0xfffff800
    bbb8:	000026f0 	strdeq	r2, [r0], -r0
    bbbc:	006b2002 	rsbeq	r2, fp, r2
    bbc0:	c1050000 	mrsgt	r0, (UNDEF: 5)
    bbc4:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    bbc8:	00da2202 	sbcseq	r2, sl, r2, lsl #4
    bbcc:	0b060000 	bleq	18bbd4 <mailbuffer+0x150ae4>
    bbd0:	0200002b 	andeq	r0, r0, #43	; 0x2b
    bbd4:	0000da24 	andeq	sp, r0, r4, lsr #20
    bbd8:	07000000 	streq	r0, [r0, -r0]
    bbdc:	0000b604 	andeq	fp, r0, r4, lsl #12
    bbe0:	21c10400 	biccs	r0, r1, r0, lsl #8
    bbe4:	26020000 	strcs	r0, [r2], -r0
    bbe8:	000000c1 	andeq	r0, r0, r1, asr #1
    bbec:	0021c209 	eoreq	ip, r1, r9, lsl #4
    bbf0:	941b0100 	ldrls	r0, [fp], #-256	; 0xffffff00
    bbf4:	b0000230 	andlt	r0, r0, r0, lsr r2
    bbf8:	01000000 	mrseq	r0, (UNDEF: 0)
    bbfc:	00010f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    bc00:	43af0a00 			; <UNDEFINED> instruction: 0x43af0a00
    bc04:	1b010000 	blne	4bc0c <mailbuffer+0x10b1c>
    bc08:	0000010f 	andeq	r0, r0, pc, lsl #2
    bc0c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    bc10:	00e00407 	rsceq	r0, r0, r7, lsl #8
    bc14:	b5090000 	strlt	r0, [r9, #-0]
    bc18:	01000043 	tsteq	r0, r3, asr #32
    bc1c:	02314425 	eorseq	r4, r1, #620756992	; 0x25000000
    bc20:	00011800 	andeq	r1, r1, r0, lsl #16
    bc24:	519c0100 	orrspl	r0, ip, r0, lsl #2
    bc28:	0a000001 	beq	bc34 <__module_entries_end+0x3b54>
    bc2c:	000043af 	andeq	r4, r0, pc, lsr #7
    bc30:	010f2501 	tsteq	pc, r1, lsl #10
    bc34:	91020000 	mrsls	r0, (UNDEF: 2)
    bc38:	31940b64 	orrscc	r0, r4, r4, ror #22
    bc3c:	008c0002 	addeq	r0, ip, r2
    bc40:	230c0000 	movwcs	r0, #49152	; 0xc000
    bc44:	0100001f 	tsteq	r0, pc, lsl r0
    bc48:	0000da2b 	andeq	sp, r0, fp, lsr #20
    bc4c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    bc50:	77090000 	strvc	r0, [r9, -r0]
    bc54:	01000043 	tsteq	r0, r3, asr #32
    bc58:	02325c3b 	eorseq	r5, r2, #15104	; 0x3b00
    bc5c:	00018800 	andeq	r8, r1, r0, lsl #16
    bc60:	ad9c0100 	ldfges	f0, [ip]
    bc64:	0a000001 	beq	bc70 <__module_entries_end+0x3b90>
    bc68:	000043af 	andeq	r4, r0, pc, lsr #7
    bc6c:	010f3b01 	tsteq	pc, r1, lsl #22
    bc70:	91020000 	mrsls	r0, (UNDEF: 2)
    bc74:	221b0a64 	andscs	r0, fp, #100, 20	; 0x64000
    bc78:	3b010000 	blcc	4bc80 <mailbuffer+0x10b90>
    bc7c:	000001ad 	andeq	r0, r0, sp, lsr #3
    bc80:	0a609102 	beq	1830090 <mailbuffer+0x17f4fa0>
    bc84:	000020e2 	andeq	r2, r0, r2, ror #1
    bc88:	00b43b01 	adcseq	r3, r4, r1, lsl #22
    bc8c:	91020000 	mrsls	r0, (UNDEF: 2)
    bc90:	29f80a5c 	ldmibcs	r8!, {r2, r3, r4, r6, r9, fp}^
    bc94:	3b010000 	blcc	4bc9c <mailbuffer+0x10bac>
    bc98:	00000052 	andeq	r0, r0, r2, asr r0
    bc9c:	0c589102 	ldfeqp	f1, [r8], {2}
    bca0:	000025bc 			; <UNDEFINED> instruction: 0x000025bc
    bca4:	00da3f01 	sbcseq	r3, sl, r1, lsl #30
    bca8:	91020000 	mrsls	r0, (UNDEF: 2)
    bcac:	0407006c 	streq	r0, [r7], #-108	; 0xffffff94
    bcb0:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    bcb4:	00003d0d 	andeq	r3, r0, sp, lsl #26
    bcb8:	43920e00 	orrsmi	r0, r2, #0, 28
    bcbc:	50010000 	andpl	r0, r1, r0
    bcc0:	000000b4 	strheq	r0, [r0], -r4
    bcc4:	000233e4 	andeq	r3, r2, r4, ror #7
    bcc8:	00000158 	andeq	r0, r0, r8, asr r1
    bccc:	020a9c01 	andeq	r9, sl, #256	; 0x100
    bcd0:	af0a0000 	svcge	0x000a0000
    bcd4:	01000043 	tsteq	r0, r3, asr #32
    bcd8:	00010f50 	andeq	r0, r1, r0, asr pc
    bcdc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    bce0:	00221b0a 	eoreq	r1, r2, sl, lsl #22
    bce4:	ad500100 	ldfgee	f0, [r0, #-0]
    bce8:	02000001 	andeq	r0, r0, #1
    bcec:	f80a6091 			; <UNDEFINED> instruction: 0xf80a6091
    bcf0:	01000029 	tsteq	r0, r9, lsr #32
    bcf4:	00005250 	andeq	r5, r0, r0, asr r2
    bcf8:	5c910200 	lfmpl	f0, 4, [r1], {0}
    bcfc:	0025bc0c 	eoreq	fp, r5, ip, lsl #24
    bd00:	da550100 	ble	154c108 <mailbuffer+0x1511018>
    bd04:	02000000 	andeq	r0, r0, #0
    bd08:	0f006c91 	svceq	0x00006c91
    bd0c:	000043c8 	andeq	r4, r0, r8, asr #7
    bd10:	010f6601 	tsteq	pc, r1, lsl #12
    bd14:	353c0000 	ldrcc	r0, [ip, #-0]!
    bd18:	00780002 	rsbseq	r0, r8, r2
    bd1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    bd20:	0043ad0c 	subeq	sl, r3, ip, lsl #26
    bd24:	0f190100 	svceq	0x00190100
    bd28:	05000001 	streq	r0, [r0, #-1]
    bd2c:	03b0cc03 	movseq	ip, #768	; 0x300
    bd30:	03140000 	tsteq	r4, #0
    bd34:	00040000 	andeq	r0, r4, r0
    bd38:	00001e8d 	andeq	r1, r0, sp, lsl #29
    bd3c:	00190104 	andseq	r0, r9, r4, lsl #2
    bd40:	6c010000 	stcvs	0, cr0, [r1], {-0}
    bd44:	dc000044 	stcle	0, cr0, [r0], {68}	; 0x44
    bd48:	b400000d 	strlt	r0, [r0], #-13
    bd4c:	3c000235 	sfmcc	f0, 4, [r0], {53}	; 0x35
    bd50:	69000007 	stmdbvs	r0, {r0, r1, r2}
    bd54:	0200003e 	andeq	r0, r0, #62	; 0x3e
    bd58:	03003875 	movweq	r3, #2165	; 0x875
    bd5c:	00002f17 	andeq	r2, r0, r7, lsl pc
    bd60:	08010300 	stmdaeq	r1, {r8, r9}
    bd64:	0000072a 	andeq	r0, r0, sl, lsr #14
    bd68:	32070203 	andcc	r0, r7, #805306368	; 0x30000000
    bd6c:	03000001 	movweq	r0, #1
    bd70:	071d0704 	ldreq	r0, [sp, -r4, lsl #14]
    bd74:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    bd78:	00071307 	andeq	r1, r7, r7, lsl #6
    bd7c:	06010300 	streq	r0, [r1], -r0, lsl #6
    bd80:	00000733 	andeq	r0, r0, r3, lsr r7
    bd84:	b8050203 	stmdalt	r5, {r0, r1, r9}
    bd88:	04000007 	streq	r0, [r0], #-7
    bd8c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    bd90:	30050074 	andcc	r0, r5, r4, ror r0
    bd94:	03000029 	movweq	r0, #41	; 0x29
    bd98:	00005920 	andeq	r5, r0, r0, lsr #18
    bd9c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    bda0:	00000718 	andeq	r0, r0, r8, lsl r7
    bda4:	98050403 	stmdals	r5, {r0, r1, sl}
    bda8:	06000007 	streq	r0, [r0], -r7
    bdac:	00002631 	andeq	r2, r0, r1, lsr r6
    bdb0:	aa1f020c 	bge	7cc5e8 <mailbuffer+0x7914f8>
    bdb4:	07000000 	streq	r0, [r0, -r0]
    bdb8:	00002651 	andeq	r2, r0, r1, asr r6
    bdbc:	00aa2102 	adceq	r2, sl, r2, lsl #2
    bdc0:	07000000 	streq	r0, [r0, -r0]
    bdc4:	00002bf1 	strdeq	r2, [r0], -r1
    bdc8:	003d2202 	eorseq	r2, sp, r2, lsl #4
    bdcc:	07040000 	streq	r0, [r4, -r0]
    bdd0:	00002485 	andeq	r2, r0, r5, lsl #9
    bdd4:	00aa2302 	adceq	r2, sl, r2, lsl #6
    bdd8:	00080000 	andeq	r0, r8, r0
    bddc:	004b0408 	subeq	r0, fp, r8, lsl #8
    bde0:	31050000 	mrscc	r0, (UNDEF: 5)
    bde4:	02000026 	andeq	r0, r0, #38	; 0x26
    bde8:	00007925 	andeq	r7, r0, r5, lsr #18
    bdec:	1f500600 	svcne	0x00500600
    bdf0:	040c0000 	streq	r0, [ip], #-0
    bdf4:	0000e01c 	andeq	lr, r0, ip, lsl r0
    bdf8:	268a0700 	strcs	r0, [sl], r0, lsl #14
    bdfc:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    be00:	00000060 	andeq	r0, r0, r0, rrx
    be04:	247b0700 	ldrbtcs	r0, [fp], #-1792	; 0xfffff900
    be08:	20040000 	andcs	r0, r4, r0
    be0c:	000000e0 	andeq	r0, r0, r0, ror #1
    be10:	25090004 	strcs	r0, [r9, #-4]
    be14:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    be18:	0a000000 	beq	be20 <__module_entries_end+0x3d40>
    be1c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    be20:	04030005 	streq	r0, [r3], #-5
    be24:	0001d407 	andeq	sp, r1, r7, lsl #8
    be28:	1f500500 	svcne	0x00500500
    be2c:	22040000 	andcs	r0, r4, #0
    be30:	000000bb 	strheq	r0, [r0], -fp
    be34:	001f510b 	andseq	r5, pc, fp, lsl #2
    be38:	b4180100 	ldrlt	r0, [r8], #-256	; 0xffffff00
    be3c:	74000235 	strvc	r0, [r0], #-565	; 0xfffffdcb
    be40:	01000000 	mrseq	r0, (UNDEF: 0)
    be44:	0001269c 	muleq	r1, ip, r6
    be48:	43af0c00 			; <UNDEFINED> instruction: 0x43af0c00
    be4c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    be50:	00000126 	andeq	r0, r0, r6, lsr #2
    be54:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    be58:	00f70408 	rscseq	r0, r7, r8, lsl #8
    be5c:	040b0000 	streq	r0, [fp], #-0
    be60:	01000045 	tsteq	r0, r5, asr #32
    be64:	0236281f 	eorseq	r2, r6, #2031616	; 0x1f0000
    be68:	00007800 	andeq	r7, r0, r0, lsl #16
    be6c:	5e9c0100 	fmlple	f0, f4, f0
    be70:	0c000001 	stceq	0, cr0, [r0], {1}
    be74:	000043af 	andeq	r4, r0, pc, lsr #7
    be78:	01261f01 	teqeq	r6, r1, lsl #30
    be7c:	91020000 	mrsls	r0, (UNDEF: 2)
    be80:	45450c6c 	strbmi	r0, [r5, #-3180]	; 0xfffff394
    be84:	1f010000 	svcne	0x00010000
    be88:	0000015e 	andeq	r0, r0, lr, asr r1
    be8c:	00689102 	rsbeq	r9, r8, r2, lsl #2
    be90:	01640408 	cmneq	r4, r8, lsl #8
    be94:	250d0000 	strcs	r0, [sp, #-0]
    be98:	0b000000 	bleq	bea0 <__module_entries_end+0x3dc0>
    be9c:	000023df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    bea0:	36a02601 	strtcc	r2, [r0], r1, lsl #12
    bea4:	00740002 	rsbseq	r0, r4, r2
    bea8:	9c010000 	stcls	0, cr0, [r1], {-0}
    beac:	0000018d 	andeq	r0, r0, sp, lsl #3
    beb0:	0043af0c 	subeq	sl, r3, ip, lsl #30
    beb4:	26260100 	strtcs	r0, [r6], -r0, lsl #2
    beb8:	02000001 	andeq	r0, r0, #1
    bebc:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
    bec0:	000044ca 	andeq	r4, r0, sl, asr #9
    bec4:	00602d01 	rsbeq	r2, r0, r1, lsl #26
    bec8:	37140000 	ldrcc	r0, [r4, -r0]
    becc:	00d80002 	sbcseq	r0, r8, r2
    bed0:	9c010000 	stcls	0, cr0, [r1], {-0}
    bed4:	000001c3 	andeq	r0, r0, r3, asr #3
    bed8:	0043af0c 	subeq	sl, r3, ip, lsl #30
    bedc:	262d0100 	strtcs	r0, [sp], -r0, lsl #2
    bee0:	02000001 	andeq	r0, r0, #1
    bee4:	620c6c91 	andvs	r6, ip, #37120	; 0x9100
    bee8:	01000044 	tsteq	r0, r4, asr #32
    beec:	0001262d 	andeq	r2, r1, sp, lsr #12
    bef0:	68910200 	ldmvs	r1, {r9}
    bef4:	44420b00 	strbmi	r0, [r2], #-2816	; 0xfffff500
    bef8:	35010000 	strcc	r0, [r1, #-0]
    befc:	000237ec 	andeq	r3, r2, ip, ror #15
    bf00:	000000b4 	strheq	r0, [r0], -r4
    bf04:	01f59c01 	mvnseq	r9, r1, lsl #24
    bf08:	af0c0000 	svcge	0x000c0000
    bf0c:	01000043 	tsteq	r0, r3, asr #32
    bf10:	00012635 	andeq	r2, r1, r5, lsr r6
    bf14:	6c910200 	lfmvs	f0, 4, [r1], {0}
    bf18:	0045450c 	subeq	r4, r5, ip, lsl #10
    bf1c:	5e350100 	rsfpls	f0, f5, f0
    bf20:	02000001 	andeq	r0, r0, #1
    bf24:	0b006891 	bleq	26170 <uspi_memcpy+0x94>
    bf28:	000044dc 	ldrdeq	r4, [r0], -ip
    bf2c:	38a03e01 	stmiacc	r0!, {r0, r9, sl, fp, ip, sp}
    bf30:	008c0002 	addeq	r0, ip, r2
    bf34:	9c010000 	stcls	0, cr0, [r1], {-0}
    bf38:	00000219 	andeq	r0, r0, r9, lsl r2
    bf3c:	0043af0c 	subeq	sl, r3, ip, lsl #30
    bf40:	263e0100 	ldrtcs	r0, [lr], -r0, lsl #2
    bf44:	02000001 	andeq	r0, r0, #1
    bf48:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
    bf4c:	00004521 	andeq	r4, r0, r1, lsr #10
    bf50:	015e4601 	cmpeq	lr, r1, lsl #12
    bf54:	392c0000 	stmdbcc	ip!, {}	; <UNPREDICTABLE>
    bf58:	00a00002 	adceq	r0, r0, r2
    bf5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    bf60:	00000241 	andeq	r0, r0, r1, asr #4
    bf64:	0043af0c 	subeq	sl, r3, ip, lsl #30
    bf68:	26460100 	strbcs	r0, [r6], -r0, lsl #2
    bf6c:	02000001 	andeq	r0, r0, #1
    bf70:	0b006c91 	bleq	271bc <USBBulkOnlyMassStorageDeviceWrite+0x4c>
    bf74:	000044f3 	strdeq	r4, [r0], -r3
    bf78:	39cc4e01 	stmibcc	ip, {r0, r9, sl, fp, lr}^
    bf7c:	00d00002 	sbcseq	r0, r0, r2
    bf80:	9c010000 	stcls	0, cr0, [r1], {-0}
    bf84:	00000273 	andeq	r0, r0, r3, ror r2
    bf88:	0043af0c 	subeq	sl, r3, ip, lsl #30
    bf8c:	264e0100 	strbcs	r0, [lr], -r0, lsl #2
    bf90:	02000001 	andeq	r0, r0, #1
    bf94:	530c6c91 	movwpl	r6, #52369	; 0xcc91
    bf98:	01000026 	tsteq	r0, r6, lsr #32
    bf9c:	0002734e 	andeq	r7, r2, lr, asr #6
    bfa0:	68910200 	ldmvs	r1, {r9}
    bfa4:	25040800 	strcs	r0, [r4, #-2048]	; 0xfffff800
    bfa8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    bfac:	0000452f 	andeq	r4, r0, pc, lsr #10
    bfb0:	00605701 	rsbeq	r5, r0, r1, lsl #14
    bfb4:	3a9c0000 	bcc	fe70bfbc <_estack+0xf66fbfbc>
    bfb8:	00e00002 	rsceq	r0, r0, r2
    bfbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    bfc0:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    bfc4:	0043af0c 	subeq	sl, r3, ip, lsl #30
    bfc8:	26570100 	ldrbcs	r0, [r7], -r0, lsl #2
    bfcc:	02000001 	andeq	r0, r0, #1
    bfd0:	100f6491 	mulne	pc, r1, r4	; <UNPREDICTABLE>
    bfd4:	4400023b 	strmi	r0, [r0], #-571	; 0xfffffdc5
    bfd8:	10000000 	andne	r0, r0, r0
    bfdc:	5c010069 	stcpl	0, cr0, [r1], {105}	; 0x69
    bfe0:	0000003d 	andeq	r0, r0, sp, lsr r0
    bfe4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    bfe8:	44500e00 	ldrbmi	r0, [r0], #-3584	; 0xfffff200
    bfec:	67010000 	strvs	r0, [r1, -r0]
    bff0:	0000003d 	andeq	r0, r0, sp, lsr r0
    bff4:	00023b7c 	andeq	r3, r2, ip, ror fp
    bff8:	00000050 	andeq	r0, r0, r0, asr r0
    bffc:	02df9c01 	sbcseq	r9, pc, #256	; 0x100
    c000:	af0c0000 	svcge	0x000c0000
    c004:	01000043 	tsteq	r0, r3, asr #32
    c008:	00012667 	andeq	r2, r1, r7, ror #12
    c00c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    c010:	45100b00 	ldrmi	r0, [r0, #-2816]	; 0xfffff500
    c014:	6c010000 	stcvs	0, cr0, [r1], {-0}
    c018:	00023bcc 	andeq	r3, r2, ip, asr #23
    c01c:	00000124 	andeq	r0, r0, r4, lsr #2
    c020:	03119c01 	tsteq	r1, #256	; 0x100
    c024:	af0c0000 	svcge	0x000c0000
    c028:	01000043 	tsteq	r0, r3, asr #32
    c02c:	0001266c 	andeq	r2, r1, ip, ror #12
    c030:	6c910200 	lfmvs	f0, 4, [r1], {0}
    c034:	002a970c 	eoreq	r9, sl, ip, lsl #14
    c038:	116c0100 	cmnne	ip, r0, lsl #2
    c03c:	02000003 	andeq	r0, r0, #3
    c040:	08006891 	stmdaeq	r0, {r0, r4, r7, fp, sp, lr}
    c044:	0000b004 	andeq	fp, r0, r4
    c048:	0da90000 	stceq	0, cr0, [r9]
    c04c:	00040000 	andeq	r0, r4, r0
    c050:	00001f6e 	andeq	r1, r0, lr, ror #30
    c054:	00190104 	andseq	r0, r9, r4, lsl #2
    c058:	74010000 	strvc	r0, [r1], #-0
    c05c:	dc000045 	stcle	0, cr0, [r0], {69}	; 0x45
    c060:	f000000d 			; <UNDEFINED> instruction: 0xf000000d
    c064:	d800023c 	stmdale	r0, {r2, r3, r4, r5, r9}
    c068:	52000010 	andpl	r0, r0, #16
    c06c:	02000040 	andeq	r0, r0, #64	; 0x40
    c070:	401b0201 	andsmi	r0, fp, r1, lsl #4
    c074:	03000000 	movweq	r0, #0
    c078:	00002546 	andeq	r2, r0, r6, asr #10
    c07c:	2b280300 	blcs	a0cc84 <mailbuffer+0x9d1b94>
    c080:	03010000 	movweq	r0, #4096	; 0x1000
    c084:	000028bb 			; <UNDEFINED> instruction: 0x000028bb
    c088:	13040002 	movwne	r0, #16386	; 0x4002
    c08c:	02000022 	andeq	r0, r0, #34	; 0x22
    c090:	00002522 	andeq	r2, r0, r2, lsr #10
    c094:	02010200 	andeq	r0, r1, #0, 4
    c098:	00006c2b 	andeq	r6, r0, fp, lsr #24
    c09c:	259a0300 	ldrcs	r0, [sl, #768]	; 0x300
    c0a0:	03000000 	movweq	r0, #0
    c0a4:	00002c49 	andeq	r2, r0, r9, asr #24
    c0a8:	22210301 	eorcs	r0, r1, #67108864	; 0x4000000
    c0ac:	03020000 	movweq	r0, #8192	; 0x2000
    c0b0:	0000265b 	andeq	r2, r0, fp, asr r6
    c0b4:	21040003 	tstcs	r4, r3
    c0b8:	02000024 	andeq	r0, r0, #36	; 0x24
    c0bc:	00004b31 	andeq	r4, r0, r1, lsr fp
    c0c0:	02080500 	andeq	r0, r8, #0, 10
    c0c4:	0000bc34 	andeq	fp, r0, r4, lsr ip
    c0c8:	22760600 	rsbscs	r0, r6, #0, 12
    c0cc:	36020000 	strcc	r0, [r2], -r0
    c0d0:	000000bc 	strheq	r0, [r0], -ip
    c0d4:	27d30600 	ldrbcs	r0, [r3, r0, lsl #12]
    c0d8:	37020000 	strcc	r0, [r2, -r0]
    c0dc:	000000bc 	strheq	r0, [r0], -ip
    c0e0:	21f30601 	mvnscs	r0, r1, lsl #12
    c0e4:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    c0e8:	000000c3 	andeq	r0, r0, r3, asr #1
    c0ec:	1f0c0602 	svcne	0x000c0602
    c0f0:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    c0f4:	000000c3 	andeq	r0, r0, r3, asr #1
    c0f8:	2bb30604 	blcs	feccd910 <_estack+0xf6cbd910>
    c0fc:	3a020000 	bcc	8c104 <mailbuffer+0x51014>
    c100:	000000c3 	andeq	r0, r0, r3, asr #1
    c104:	01070006 	tsteq	r7, r6
    c108:	00072a08 	andeq	r2, r7, r8, lsl #20
    c10c:	07020700 	streq	r0, [r2, -r0, lsl #14]
    c110:	00000132 	andeq	r0, r0, r2, lsr r1
    c114:	00220804 	eoreq	r0, r2, r4, lsl #16
    c118:	773d0200 	ldrvc	r0, [sp, -r0, lsl #4]!
    c11c:	05000000 	streq	r0, [r0, #-0]
    c120:	865c0212 			; <UNDEFINED> instruction: 0x865c0212
    c124:	06000001 	streq	r0, [r0], -r1
    c128:	000029a8 	andeq	r2, r0, r8, lsr #19
    c12c:	00bc5e02 	adcseq	r5, ip, r2, lsl #28
    c130:	06000000 	streq	r0, [r0], -r0
    c134:	0000242b 	andeq	r2, r0, fp, lsr #8
    c138:	00bc5f02 	adcseq	r5, ip, r2, lsl #30
    c13c:	06010000 	streq	r0, [r1], -r0
    c140:	0000228c 	andeq	r2, r0, ip, lsl #5
    c144:	00c36002 	sbceq	r6, r3, r2
    c148:	06020000 	streq	r0, [r2], -r0
    c14c:	00002128 	andeq	r2, r0, r8, lsr #2
    c150:	00bc6102 	adcseq	r6, ip, r2, lsl #2
    c154:	06040000 	streq	r0, [r4], -r0
    c158:	000022f6 	strdeq	r2, [r0], -r6
    c15c:	00bc6202 	adcseq	r6, ip, r2, lsl #4
    c160:	06050000 	streq	r0, [r5], -r0
    c164:	0000279f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    c168:	00bc6302 	adcseq	r6, ip, r2, lsl #6
    c16c:	06060000 	streq	r0, [r6], -r0
    c170:	000025e7 	andeq	r2, r0, r7, ror #11
    c174:	00bc6402 	adcseq	r6, ip, r2, lsl #8
    c178:	06070000 	streq	r0, [r7], -r0
    c17c:	00002c56 	andeq	r2, r0, r6, asr ip
    c180:	00c36602 	sbceq	r6, r3, r2, lsl #12
    c184:	06080000 	streq	r0, [r8], -r0
    c188:	00002244 	andeq	r2, r0, r4, asr #4
    c18c:	00c36702 	sbceq	r6, r3, r2, lsl #14
    c190:	060a0000 	streq	r0, [sl], -r0
    c194:	00002135 	andeq	r2, r0, r5, lsr r1
    c198:	00c36802 	sbceq	r6, r3, r2, lsl #16
    c19c:	060c0000 	streq	r0, [ip], -r0
    c1a0:	000021fa 	strdeq	r2, [r0], -sl
    c1a4:	00bc6902 	adcseq	r6, ip, r2, lsl #18
    c1a8:	060e0000 	streq	r0, [lr], -r0
    c1ac:	0000233b 	andeq	r2, r0, fp, lsr r3
    c1b0:	00bc6a02 	adcseq	r6, ip, r2, lsl #20
    c1b4:	060f0000 	streq	r0, [pc], -r0
    c1b8:	00002322 	andeq	r2, r0, r2, lsr #6
    c1bc:	00bc6b02 	adcseq	r6, ip, r2, lsl #22
    c1c0:	06100000 	ldreq	r0, [r0], -r0
    c1c4:	000028a8 	andeq	r2, r0, r8, lsr #17
    c1c8:	00bc6c02 	adcseq	r6, ip, r2, lsl #24
    c1cc:	00110000 	andseq	r0, r1, r0
    c1d0:	0028c704 	eoreq	ip, r8, r4, lsl #14
    c1d4:	d56e0200 	strble	r0, [lr, #-512]!	; 0xfffffe00
    c1d8:	05000000 	streq	r0, [r0, #-0]
    c1dc:	fa710209 	blx	1c4ca08 <mailbuffer+0x1c11918>
    c1e0:	06000001 	streq	r0, [r0], -r1
    c1e4:	000029a8 	andeq	r2, r0, r8, lsr #19
    c1e8:	00bc7302 	adcseq	r7, ip, r2, lsl #6
    c1ec:	06000000 	streq	r0, [r0], -r0
    c1f0:	0000242b 	andeq	r2, r0, fp, lsr #8
    c1f4:	00bc7402 	adcseq	r7, ip, r2, lsl #8
    c1f8:	06010000 	streq	r0, [r1], -r0
    c1fc:	00002088 	andeq	r2, r0, r8, lsl #1
    c200:	00c37502 	sbceq	r7, r3, r2, lsl #10
    c204:	06020000 	streq	r0, [r2], -r0
    c208:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
    c20c:	00bc7602 	adcseq	r7, ip, r2, lsl #12
    c210:	06040000 	streq	r0, [r4], -r0
    c214:	00002a4f 	andeq	r2, r0, pc, asr #20
    c218:	00bc7702 	adcseq	r7, ip, r2, lsl #14
    c21c:	06050000 	streq	r0, [r5], -r0
    c220:	00002790 	muleq	r0, r0, r7
    c224:	00bc7802 	adcseq	r7, ip, r2, lsl #16
    c228:	06060000 	streq	r0, [r6], -r0
    c22c:	0000258d 	andeq	r2, r0, sp, lsl #11
    c230:	00bc7902 	adcseq	r7, ip, r2, lsl #18
    c234:	06070000 	streq	r0, [r7], -r0
    c238:	00002ab3 			; <UNDEFINED> instruction: 0x00002ab3
    c23c:	00bc7a02 	adcseq	r7, ip, r2, lsl #20
    c240:	00080000 	andeq	r0, r8, r0
    c244:	00230604 	eoreq	r0, r3, r4, lsl #12
    c248:	917c0200 	cmnls	ip, r0, lsl #4
    c24c:	05000001 	streq	r0, [r0, #-1]
    c250:	7a7f0209 	bvc	1fcca7c <mailbuffer+0x1f9198c>
    c254:	06000002 	streq	r0, [r0], -r2
    c258:	000029a8 	andeq	r2, r0, r8, lsr #19
    c25c:	00bc8102 	adcseq	r8, ip, r2, lsl #2
    c260:	06000000 	streq	r0, [r0], -r0
    c264:	0000242b 	andeq	r2, r0, fp, lsr #8
    c268:	00bc8202 	adcseq	r8, ip, r2, lsl #4
    c26c:	06010000 	streq	r0, [r1], -r0
    c270:	00002017 	andeq	r2, r0, r7, lsl r0
    c274:	00bc8302 	adcseq	r8, ip, r2, lsl #6
    c278:	06020000 	streq	r0, [r2], -r0
    c27c:	00002041 	andeq	r2, r0, r1, asr #32
    c280:	00bc8402 	adcseq	r8, ip, r2, lsl #8
    c284:	06030000 	streq	r0, [r3], -r0
    c288:	00002769 	andeq	r2, r0, r9, ror #14
    c28c:	00bc8502 	adcseq	r8, ip, r2, lsl #10
    c290:	06040000 	streq	r0, [r4], -r0
    c294:	00002721 	andeq	r2, r0, r1, lsr #14
    c298:	00bc8602 	adcseq	r8, ip, r2, lsl #12
    c29c:	06050000 	streq	r0, [r5], -r0
    c2a0:	00001f29 	andeq	r1, r0, r9, lsr #30
    c2a4:	00bc8702 	adcseq	r8, ip, r2, lsl #14
    c2a8:	06060000 	streq	r0, [r6], -r0
    c2ac:	00002895 	muleq	r0, r5, r8
    c2b0:	00bc8802 	adcseq	r8, ip, r2, lsl #16
    c2b4:	06070000 	streq	r0, [r7], -r0
    c2b8:	00002716 	andeq	r2, r0, r6, lsl r7
    c2bc:	00bc8902 	adcseq	r8, ip, r2, lsl #18
    c2c0:	00080000 	andeq	r0, r8, r0
    c2c4:	0027e404 	eoreq	lr, r7, r4, lsl #8
    c2c8:	058b0200 	streq	r0, [fp, #512]	; 0x200
    c2cc:	05000002 	streq	r0, [r0, #-2]
    c2d0:	d68e0207 	strle	r0, [lr], r7, lsl #4
    c2d4:	06000002 	streq	r0, [r0], -r2
    c2d8:	000029a8 	andeq	r2, r0, r8, lsr #19
    c2dc:	00bc9002 	adcseq	r9, ip, r2
    c2e0:	06000000 	streq	r0, [r0], -r0
    c2e4:	0000242b 	andeq	r2, r0, fp, lsr #8
    c2e8:	00bc9102 	adcseq	r9, ip, r2, lsl #2
    c2ec:	06010000 	streq	r0, [r1], -r0
    c2f0:	000026c9 	andeq	r2, r0, r9, asr #13
    c2f4:	00bc9202 	adcseq	r9, ip, r2, lsl #4
    c2f8:	06020000 	streq	r0, [r2], -r0
    c2fc:	0000258d 	andeq	r2, r0, sp, lsl #11
    c300:	00bc9302 	adcseq	r9, ip, r2, lsl #6
    c304:	06030000 	streq	r0, [r3], -r0
    c308:	00002960 	andeq	r2, r0, r0, ror #18
    c30c:	00c39402 	sbceq	r9, r3, r2, lsl #8
    c310:	06040000 	streq	r0, [r4], -r0
    c314:	00002522 	andeq	r2, r0, r2, lsr #10
    c318:	00bc9502 	adcseq	r9, ip, r2, lsl #10
    c31c:	00060000 	andeq	r0, r6, r0
    c320:	002bda04 	eoreq	sp, fp, r4, lsl #20
    c324:	85970200 	ldrhi	r0, [r7, #512]	; 0x200
    c328:	05000002 	streq	r0, [r0, #-2]
    c32c:	029c0202 	addseq	r0, ip, #536870912	; 0x20000000
    c330:	06000003 	streq	r0, [r0], -r3
    c334:	000029a8 	andeq	r2, r0, r8, lsr #19
    c338:	00bc9e02 	adcseq	r9, ip, r2, lsl #28
    c33c:	06000000 	streq	r0, [r0], -r0
    c340:	0000242b 	andeq	r2, r0, fp, lsr #8
    c344:	00bc9f02 	adcseq	r9, ip, r2, lsl #30
    c348:	00010000 	andeq	r0, r1, r0
    c34c:	9a020908 	bls	8e774 <mailbuffer+0x53684>
    c350:	00000337 	andeq	r0, r0, r7, lsr r3
    c354:	003c0209 	eorseq	r0, ip, r9, lsl #4
    c358:	e1a10200 			; <UNDEFINED> instruction: 0xe1a10200
    c35c:	09000002 	stmdbeq	r0, {r1}
    c360:	00002791 	muleq	r0, r1, r7
    c364:	01faa302 	mvnseq	sl, r2, lsl #6
    c368:	4c090000 	stcmi	0, cr0, [r9], {-0}
    c36c:	0200003c 	andeq	r0, r0, #60	; 0x3c
    c370:	00027aa4 	andeq	r7, r2, r4, lsr #21
    c374:	25840900 	strcs	r0, [r4, #2304]	; 0x900
    c378:	a5020000 	strge	r0, [r2, #-0]
    c37c:	000002d6 	ldrdeq	r0, [r0], -r6
    c380:	26fc0400 	ldrbtcs	r0, [ip], r0, lsl #8
    c384:	a7020000 	strge	r0, [r2, -r0]
    c388:	00000302 	andeq	r0, r0, r2, lsl #6
    c38c:	0024660a 	eoreq	r6, r4, sl, lsl #12
    c390:	a9020200 	stmdbge	r2, {r9}
    c394:	00000373 	andeq	r0, r0, r3, ror r3
    c398:	0029a806 	eoreq	sl, r9, r6, lsl #16
    c39c:	bcab0200 	sfmlt	f0, 4, [fp]
    c3a0:	00000000 	andeq	r0, r0, r0
    c3a4:	00242b06 	eoreq	r2, r4, r6, lsl #22
    c3a8:	bcac0200 	sfmlt	f0, 4, [ip]
    c3ac:	01000000 	mrseq	r0, (UNDEF: 0)
    c3b0:	00207406 	eoreq	r7, r0, r6, lsl #8
    c3b4:	73ad0200 			; <UNDEFINED> instruction: 0x73ad0200
    c3b8:	02000003 	andeq	r0, r0, #3
    c3bc:	00c30b00 	sbceq	r0, r3, r0, lsl #22
    c3c0:	03820000 	orreq	r0, r2, #0
    c3c4:	820c0000 	andhi	r0, ip, #0
    c3c8:	00000003 	andeq	r0, r0, r3
    c3cc:	d4070407 	strle	r0, [r7], #-1031	; 0xfffffbf9
    c3d0:	04000001 	streq	r0, [r0], #-1
    c3d4:	00002466 	andeq	r2, r0, r6, ror #8
    c3d8:	0342af02 	movteq	sl, #12034	; 0x2f02
    c3dc:	750d0000 	strvc	r0, [sp, #-0]
    c3e0:	17030038 	smladxne	r3, r8, r0, r0
    c3e4:	000000bc 	strheq	r0, [r0], -ip
    c3e8:	3631750d 	ldrtcc	r7, [r1], -sp, lsl #10
    c3ec:	c3180300 	tstgt	r8, #0, 6
    c3f0:	0d000000 	stceq	0, cr0, [r0, #-0]
    c3f4:	00323375 	eorseq	r3, r2, r5, ror r3
    c3f8:	03b41903 			; <UNDEFINED> instruction: 0x03b41903
    c3fc:	04070000 	streq	r0, [r7], #-0
    c400:	00071d07 	andeq	r1, r7, r7, lsl #26
    c404:	07080700 	streq	r0, [r8, -r0, lsl #14]
    c408:	00000713 	andeq	r0, r0, r3, lsl r7
    c40c:	33060107 	movwcc	r0, #24839	; 0x6107
    c410:	07000007 	streq	r0, [r0, -r7]
    c414:	07b80502 	ldreq	r0, [r8, r2, lsl #10]!
    c418:	040e0000 	streq	r0, [lr], #-0
    c41c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    c420:	29300400 	ldmdbcs	r0!, {sl}
    c424:	20030000 	andcs	r0, r3, r0
    c428:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    c42c:	18070407 	stmdane	r7, {r0, r1, r2, sl}
    c430:	07000007 	streq	r0, [r0, -r7]
    c434:	07980504 	ldreq	r0, [r8, r4, lsl #10]
    c438:	520a0000 	andpl	r0, sl, #0
    c43c:	18000025 	stmdane	r0, {r0, r2, r5}
    c440:	04451e04 	strbeq	r1, [r5], #-3588	; 0xfffff1fc
    c444:	51060000 	mrspl	r0, (UNDEF: 6)
    c448:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    c44c:	00044520 	andeq	r4, r4, r0, lsr #10
    c450:	0c060000 	stceq	0, cr0, [r6], {-0}
    c454:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    c458:	0003b421 	andeq	fp, r3, r1, lsr #8
    c45c:	8a060400 	bhi	18d464 <mailbuffer+0x152374>
    c460:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    c464:	0003d722 	andeq	sp, r3, r2, lsr #14
    c468:	69060800 	stmdbvs	r6, {fp}
    c46c:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    c470:	00044523 	andeq	r4, r4, r3, lsr #10
    c474:	7d060c00 	stcvc	12, cr0, [r6, #-0]
    c478:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    c47c:	00044524 	andeq	r4, r4, r4, lsr #10
    c480:	bb061000 	bllt	190488 <mailbuffer+0x155398>
    c484:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    c488:	00044525 	andeq	r4, r4, r5, lsr #10
    c48c:	0f001400 	svceq	0x00001400
    c490:	00044b04 	andeq	r4, r4, r4, lsl #22
    c494:	03371000 	teqeq	r7, #0
    c498:	52040000 	andpl	r0, r4, #0
    c49c:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    c4a0:	0003f027 	andeq	pc, r3, r7, lsr #32
    c4a4:	0a041100 	beq	1108ac <mailbuffer+0xd57bc>
    c4a8:	00002631 	andeq	r2, r0, r1, lsr r6
    c4ac:	8e1f050c 	cfmul32hi	mvfx0, mvfx15, mvfx12
    c4b0:	06000004 	streq	r0, [r0], -r4
    c4b4:	00002651 	andeq	r2, r0, r1, asr r6
    c4b8:	048e2105 	streq	r2, [lr], #261	; 0x105
    c4bc:	06000000 	streq	r0, [r0], -r0
    c4c0:	00002bf1 	strdeq	r2, [r0], -r1
    c4c4:	03b42205 			; <UNDEFINED> instruction: 0x03b42205
    c4c8:	06040000 	streq	r0, [r4], -r0
    c4cc:	00002485 	andeq	r2, r0, r5, lsl #9
    c4d0:	048e2305 	streq	r2, [lr], #773	; 0x305
    c4d4:	00080000 	andeq	r0, r8, r0
    c4d8:	03c2040f 	biceq	r0, r2, #251658240	; 0xf000000
    c4dc:	31040000 	mrscc	r0, (UNDEF: 4)
    c4e0:	05000026 	streq	r0, [r0, #-38]	; 0xffffffda
    c4e4:	00045d25 	andeq	r5, r4, r5, lsr #26
    c4e8:	253b0a00 	ldrcs	r0, [fp, #-2560]!	; 0xfffff600
    c4ec:	060c0000 	streq	r0, [ip], -r0
    c4f0:	0004d021 	andeq	sp, r4, r1, lsr #32
    c4f4:	20e00600 	rsccs	r0, r0, r0, lsl #12
    c4f8:	23060000 	movwcs	r0, #24576	; 0x6000
    c4fc:	0000056d 	andeq	r0, r0, sp, ror #10
    c500:	2c3c0600 	ldccs	6, cr0, [ip], #-0
    c504:	25060000 	strcs	r0, [r6, #-0]
    c508:	00000573 	andeq	r0, r0, r3, ror r5
    c50c:	2a950604 	bcs	fe54dd24 <_estack+0xf653dd24>
    c510:	27060000 	strcs	r0, [r6, -r0]
    c514:	00000579 	andeq	r0, r0, r9, ror r5
    c518:	d10a0008 	tstle	sl, r8
    c51c:	3800002a 	stmdacc	r0, {r1, r3, r5}
    c520:	056d2d07 	strbeq	r2, [sp, #-3335]!	; 0xfffff2f9
    c524:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    c528:	0700005a 	smlsdeq	r0, sl, r0, r0
    c52c:	0005992f 	andeq	r9, r5, pc, lsr #18
    c530:	43060000 	movwmi	r0, #24576	; 0x6000
    c534:	07000024 	streq	r0, [r0, -r4, lsr #32]
    c538:	0005e831 	andeq	lr, r5, r1, lsr r8
    c53c:	7c060400 	cfstrsvc	mvf0, [r6], {-0}
    c540:	07000020 	streq	r0, [r0, -r0, lsr #32]
    c544:	00039433 	andeq	r9, r3, r3, lsr r4
    c548:	3b060800 	blcc	18e550 <mailbuffer+0x153460>
    c54c:	07000024 	streq	r0, [r0, -r4, lsr #32]
    c550:	00006c34 	andeq	r6, r0, r4, lsr ip
    c554:	93060900 	movwls	r0, #26880	; 0x6900
    c558:	07000022 	streq	r0, [r0, -r2, lsr #32]
    c55c:	00064f35 	andeq	r4, r6, r5, lsr pc
    c560:	7a060c00 	bvc	18f568 <mailbuffer+0x154478>
    c564:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    c568:	00039437 	andeq	r9, r3, r7, lsr r4
    c56c:	a9061000 	stmdbge	r6, {ip}
    c570:	07000026 	streq	r0, [r0, -r6, lsr #32]
    c574:	00039438 	andeq	r9, r3, r8, lsr r4
    c578:	6f061100 	svcvs	0x00061100
    c57c:	07000029 	streq	r0, [r0, -r9, lsr #32]
    c580:	0006553a 	andeq	r5, r6, sl, lsr r5
    c584:	b2061400 	andlt	r1, r6, #0, 8
    c588:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    c58c:	00065b3b 	andeq	r5, r6, fp, lsr fp
    c590:	fc061800 	stc2	8, cr1, [r6], {-0}
    c594:	07000027 	streq	r0, [r0, -r7, lsr #32]
    c598:	0006613d 	andeq	r6, r6, sp, lsr r1
    c59c:	34061c00 	strcc	r1, [r6], #-3072	; 0xfffff400
    c5a0:	0700002b 	streq	r0, [r0, -fp, lsr #32]
    c5a4:	00057f3f 	andeq	r7, r5, pc, lsr pc
    c5a8:	78062000 	stmdavc	r6, {sp}
    c5ac:	07000021 	streq	r0, [r0, -r1, lsr #32]
    c5b0:	00057f40 	andeq	r7, r5, r0, asr #30
    c5b4:	0f002c00 	svceq	0x00002c00
    c5b8:	0004d004 	andeq	sp, r4, r4
    c5bc:	89040f00 	stmdbhi	r4, {r8, r9, sl, fp}
    c5c0:	0f000003 	svceq	0x00000003
    c5c4:	00049404 	andeq	r9, r4, r4, lsl #8
    c5c8:	253b0400 	ldrcs	r0, [fp, #-1024]!	; 0xfffffc00
    c5cc:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
    c5d0:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    c5d4:	0003d712 	andeq	sp, r3, r2, lsl r7
    c5d8:	00059900 	andeq	r9, r5, r0, lsl #18
    c5dc:	056d1300 	strbeq	r1, [sp, #-768]!	; 0xfffffd00
    c5e0:	0f000000 	svceq	0x00000000
    c5e4:	00058a04 	andeq	r8, r5, r4, lsl #20
    c5e8:	28760a00 	ldmdacs	r6!, {r9, fp}^
    c5ec:	08540000 	ldmdaeq	r4, {}^	; <UNPREDICTABLE>
    c5f0:	0005e826 	andeq	lr, r5, r6, lsr #16
    c5f4:	273d0600 	ldrcs	r0, [sp, -r0, lsl #12]!
    c5f8:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    c5fc:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    c600:	1f3c0600 	svcne	0x003c0600
    c604:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    c608:	000009fd 	strdeq	r0, [r0], -sp
    c60c:	25da0604 	ldrbcs	r0, [sl, #1540]	; 0x604
    c610:	2b080000 	blcs	20c618 <mailbuffer+0x1d1528>
    c614:	00000a02 	andeq	r0, r0, r2, lsl #20
    c618:	270b0608 	strcs	r0, [fp, -r8, lsl #12]
    c61c:	2d080000 	stccs	0, cr0, [r8, #-0]
    c620:	00000a18 	andeq	r0, r0, r8, lsl sl
    c624:	2b490648 	blcs	124df4c <mailbuffer+0x1212e5c>
    c628:	2f080000 	svccs	0x00080000
    c62c:	0000082a 	andeq	r0, r0, sl, lsr #16
    c630:	040f004c 	streq	r0, [pc], #-76	; c638 <__module_entries_end+0x4558>
    c634:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    c638:	0025800a 	eoreq	r8, r5, sl
    c63c:	28091800 	stmdacs	r9, {fp, ip}
    c640:	0000064f 	andeq	r0, r0, pc, asr #12
    c644:	0020e006 	eoreq	lr, r0, r6
    c648:	9e2a0900 	cdpls	9, 2, cr0, cr10, cr0, {0}
    c64c:	00000006 	andeq	r0, r0, r6
    c650:	001fe806 	andseq	lr, pc, r6, lsl #16
    c654:	942b0900 	strtls	r0, [fp], #-2304	; 0xfffff700
    c658:	04000003 	streq	r0, [r0], #-3
    c65c:	00214906 	eoreq	r4, r1, r6, lsl #18
    c660:	932c0900 	teqls	ip, #0, 18
    c664:	05000006 	streq	r0, [r0, #-6]
    c668:	00266b06 	eoreq	r6, r6, r6, lsl #22
    c66c:	d72d0900 	strle	r0, [sp, -r0, lsl #18]!
    c670:	08000003 	stmdaeq	r0, {r0, r1}
    c674:	0021d406 	eoreq	sp, r1, r6, lsl #8
    c678:	a92e0900 	stmdbge	lr!, {r8, fp}
    c67c:	0c000003 	stceq	0, cr0, [r0], {3}
    c680:	00285706 	eoreq	r5, r8, r6, lsl #14
    c684:	b42f0900 	strtlt	r0, [pc], #-2304	; c68c <__module_entries_end+0x45ac>
    c688:	10000003 	andne	r0, r0, r3
    c68c:	0022d706 	eoreq	sp, r2, r6, lsl #14
    c690:	40300900 	eorsmi	r0, r0, r0, lsl #18
    c694:	14000000 	strne	r0, [r0], #-0
    c698:	ee040f00 	cdp	15, 0, cr0, cr4, cr0, {0}
    c69c:	0f000005 	svceq	0x00000005
    c6a0:	00018604 	andeq	r8, r1, r4, lsl #12
    c6a4:	fa040f00 	blx	1102ac <mailbuffer+0xd51bc>
    c6a8:	0f000001 	svceq	0x00000001
    c6ac:	00045004 	andeq	r5, r4, r4
    c6b0:	2ad10400 	bcs	ff44d6b8 <_estack+0xf743d6b8>
    c6b4:	42070000 	andmi	r0, r7, #0
    c6b8:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    c6bc:	20090102 	andcs	r0, r9, r2, lsl #2
    c6c0:	00000693 	muleq	r0, r3, r6
    c6c4:	002a9f03 	eoreq	r9, sl, r3, lsl #30
    c6c8:	c0030000 	andgt	r0, r3, r0
    c6cc:	0100001f 	tsteq	r0, pc, lsl r0
    c6d0:	00222e03 	eoreq	r2, r2, r3, lsl #28
    c6d4:	c2030200 	andgt	r0, r3, #0, 4
    c6d8:	03000025 	movweq	r0, #37	; 0x25
    c6dc:	2afd0400 	bcs	fff4d6e4 <_estack+0xf7f3d6e4>
    c6e0:	26090000 	strcs	r0, [r9], -r0
    c6e4:	00000672 	andeq	r0, r0, r2, ror r6
    c6e8:	0667040f 	strbteq	r0, [r7], -pc, lsl #8
    c6ec:	80040000 	andhi	r0, r4, r0
    c6f0:	09000025 	stmdbeq	r0, {r0, r2, r5}
    c6f4:	0005ee32 	andeq	lr, r5, r2, lsr lr
    c6f8:	26930400 	ldrcs	r0, [r3], r0, lsl #8
    c6fc:	210a0000 	mrscs	r0, (UNDEF: 10)
    c700:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    c704:	0006cf14 	andeq	ip, r6, r4, lsl pc
    c708:	06cf1300 	strbeq	r1, [pc], r0, lsl #6
    c70c:	5b130000 	blpl	4cc714 <mailbuffer+0x491624>
    c710:	13000004 	movwne	r0, #4
    c714:	0000045b 	andeq	r0, r0, fp, asr r4
    c718:	d5040f00 	strle	r0, [r4, #-3840]	; 0xfffff100
    c71c:	0a000006 	beq	c73c <__module_entries_end+0x465c>
    c720:	00002907 	andeq	r2, r0, r7, lsl #18
    c724:	4e230a24 	vmulmi.f32	s0, s6, s9
    c728:	06000007 	streq	r0, [r0], -r7
    c72c:	0000297d 	andeq	r2, r0, sp, ror r9
    c730:	074e250a 	strbeq	r2, [lr, -sl, lsl #10]
    c734:	06000000 	streq	r0, [r0], -r0
    c738:	00002844 	andeq	r2, r0, r4, asr #16
    c73c:	0754270a 	ldrbeq	r2, [r4, -sl, lsl #14]
    c740:	06040000 	streq	r0, [r4], -r0
    c744:	00002651 	andeq	r2, r0, r1, asr r6
    c748:	045b280a 	ldrbeq	r2, [fp], #-2058	; 0xfffff7f6
    c74c:	06080000 	streq	r0, [r8], -r0
    c750:	00002c0c 	andeq	r2, r0, ip, lsl #24
    c754:	03a9290a 			; <UNDEFINED> instruction: 0x03a9290a
    c758:	060c0000 	streq	r0, [ip], -r0
    c75c:	0000213f 	andeq	r2, r0, pc, lsr r1
    c760:	03d02b0a 	bicseq	r2, r0, #10240	; 0x2800
    c764:	06100000 	ldreq	r0, [r0], -r0
    c768:	000029eb 	andeq	r2, r0, fp, ror #19
    c76c:	03a92c0a 			; <UNDEFINED> instruction: 0x03a92c0a
    c770:	06140000 	ldreq	r0, [r4], -r0
    c774:	000023ba 			; <UNDEFINED> instruction: 0x000023ba
    c778:	075a2e0a 	ldrbeq	r2, [sl, -sl, lsl #28]
    c77c:	06180000 	ldreq	r0, [r8], -r0
    c780:	00002359 	andeq	r2, r0, r9, asr r3
    c784:	045b2f0a 	ldrbeq	r2, [fp], #-3850	; 0xfffff0f6
    c788:	061c0000 	ldreq	r0, [ip], -r0
    c78c:	00002b13 	andeq	r2, r0, r3, lsl fp
    c790:	045b300a 	ldrbeq	r3, [fp], #-10
    c794:	00200000 	eoreq	r0, r0, r0
    c798:	06a4040f 	strteq	r0, [r4], pc, lsl #8
    c79c:	040f0000 	streq	r0, [pc], #-0	; c7a4 <__module_entries_end+0x46c4>
    c7a0:	000000ca 	andeq	r0, r0, sl, asr #1
    c7a4:	06af040f 	strteq	r0, [pc], pc, lsl #8
    c7a8:	07040000 	streq	r0, [r4, -r0]
    c7ac:	0a000029 	beq	c858 <__module_entries_end+0x4778>
    c7b0:	0006d532 	andeq	sp, r6, r2, lsr r5
    c7b4:	1f500a00 	svcne	0x00500a00
    c7b8:	0b0c0000 	bleq	30c7c0 <mailbuffer+0x2d16d0>
    c7bc:	0007901c 	andeq	r9, r7, ip, lsl r0
    c7c0:	268a0600 	strcs	r0, [sl], r0, lsl #12
    c7c4:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
    c7c8:	000003d7 	ldrdeq	r0, [r0], -r7
    c7cc:	247b0600 	ldrbtcs	r0, [fp], #-1536	; 0xfffffa00
    c7d0:	200b0000 	andcs	r0, fp, r0
    c7d4:	00000790 	muleq	r0, r0, r7
    c7d8:	940b0004 	strls	r0, [fp], #-4
    c7dc:	a0000003 	andge	r0, r0, r3
    c7e0:	15000007 	strne	r0, [r0, #-7]
    c7e4:	00000382 	andeq	r0, r0, r2, lsl #7
    c7e8:	50040005 	andpl	r0, r4, r5
    c7ec:	0b00001f 	bleq	c870 <__module_entries_end+0x4790>
    c7f0:	00076b22 	andeq	r6, r7, r2, lsr #22
    c7f4:	29bf0a00 	ldmibcs	pc!, {r9, fp}	; <UNPREDICTABLE>
    c7f8:	0c500000 	mraeq	r0, r0, acc0
    c7fc:	0007f41f 	andeq	pc, r7, pc, lsl r4	; <UNPREDICTABLE>
    c800:	25010600 	strcs	r0, [r1, #-1536]	; 0xfffffa00
    c804:	210c0000 	mrscs	r0, (UNDEF: 12)
    c808:	00000667 	andeq	r0, r0, r7, ror #12
    c80c:	280c0600 	stmdacs	ip, {r9, sl}
    c810:	230c0000 	movwcs	r0, #49152	; 0xc000
    c814:	0000074e 	andeq	r0, r0, lr, asr #14
    c818:	2aea0638 	bcs	ffa8e100 <_estack+0xf7a7e100>
    c81c:	240c0000 	strcs	r0, [ip], #-0
    c820:	0000074e 	andeq	r0, r0, lr, asr #14
    c824:	23de063c 	bicscs	r0, lr, #60, 12	; 0x3c00000
    c828:	260c0000 	strcs	r0, [ip], -r0
    c82c:	000007a0 	andeq	r0, r0, r0, lsr #15
    c830:	2a890640 	bcs	fe24e138 <_estack+0xf623e138>
    c834:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    c838:	000007f4 	strdeq	r0, [r0], -r4
    c83c:	040f004c 	streq	r0, [pc], #-76	; c844 <__module_entries_end+0x4764>
    c840:	00000394 	muleq	r0, r4, r3
    c844:	0029bf04 	eoreq	fp, r9, r4, lsl #30
    c848:	ab2a0c00 	blge	a8f850 <mailbuffer+0xa54760>
    c84c:	0a000007 	beq	c870 <__module_entries_end+0x4790>
    c850:	00002749 	andeq	r2, r0, r9, asr #14
    c854:	2a200d08 	bcs	80fc7c <mailbuffer+0x7d4b8c>
    c858:	06000008 	streq	r0, [r0], -r8
    c85c:	00002443 	andeq	r2, r0, r3, asr #8
    c860:	05e8220d 	strbeq	r2, [r8, #525]!	; 0x20d
    c864:	06000000 	streq	r0, [r0], -r0
    c868:	000020e0 	andeq	r2, r0, r0, ror #1
    c86c:	069e240d 	ldreq	r2, [lr], sp, lsl #8
    c870:	00040000 	andeq	r0, r4, r0
    c874:	00274904 	eoreq	r4, r7, r4, lsl #18
    c878:	05260d00 	streq	r0, [r6, #-3328]!	; 0xfffff300
    c87c:	0a000008 	beq	c8a4 <__module_entries_end+0x47c4>
    c880:	0000250d 	andeq	r2, r0, sp, lsl #10
    c884:	8a1d0e18 	bhi	7500ec <mailbuffer+0x714ffc>
    c888:	06000008 	streq	r0, [r0], -r8
    c88c:	000039ce 	andeq	r3, r0, lr, asr #19
    c890:	089b1f0e 	ldmeq	fp, {r1, r2, r3, r8, r9, sl, fp, ip}
    c894:	06000000 	streq	r0, [r0], -r0
    c898:	00005086 	andeq	r5, r0, r6, lsl #1
    c89c:	089b210e 	ldmeq	fp, {r1, r2, r3, r8, sp}
    c8a0:	06040000 	streq	r0, [r4], -r0
    c8a4:	00005047 	andeq	r5, r0, r7, asr #32
    c8a8:	08b0220e 	ldmeq	r0!, {r1, r2, r3, r9, sp}
    c8ac:	06080000 	streq	r0, [r8], -r0
    c8b0:	000036f4 	strdeq	r3, [r0], -r4
    c8b4:	08c6230e 	stmiaeq	r6, {r1, r2, r3, r8, r9, sp}^
    c8b8:	060c0000 	streq	r0, [ip], -r0
    c8bc:	00004fe9 	andeq	r4, r0, r9, ror #31
    c8c0:	089b250e 	ldmeq	fp, {r1, r2, r3, r8, sl, sp}
    c8c4:	06100000 	ldreq	r0, [r0], -r0
    c8c8:	00004fc0 	andeq	r4, r0, r0, asr #31
    c8cc:	08b0270e 	ldmeq	r0!, {r1, r2, r3, r8, r9, sl, sp}
    c8d0:	00140000 	andseq	r0, r4, r0
    c8d4:	00089514 	andeq	r9, r8, r4, lsl r5
    c8d8:	08951300 	ldmeq	r5, {r8, r9, ip}
    c8dc:	0f000000 	svceq	0x00000000
    c8e0:	00083504 	andeq	r3, r8, r4, lsl #10
    c8e4:	8a040f00 	bhi	1104ec <mailbuffer+0xd53fc>
    c8e8:	12000008 	andne	r0, r0, #8
    c8ec:	000003d7 	ldrdeq	r0, [r0], -r7
    c8f0:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
    c8f4:	00089513 	andeq	r9, r8, r3, lsl r5
    c8f8:	040f0000 	streq	r0, [pc], #-0	; c900 <__module_entries_end+0x4820>
    c8fc:	000008a1 	andeq	r0, r0, r1, lsr #17
    c900:	0008c614 	andeq	ip, r8, r4, lsl r6
    c904:	08951300 	ldmeq	r5, {r8, r9, ip}
    c908:	a9130000 	ldmdbge	r3, {}	; <UNPREDICTABLE>
    c90c:	00000003 	andeq	r0, r0, r3
    c910:	08b6040f 	ldmeq	r6!, {r0, r1, r2, r3, sl}
    c914:	0d040000 	stceq	0, cr0, [r4, #-0]
    c918:	0e000025 	cdpeq	0, 0, cr0, cr0, cr5, {1}
    c91c:	00083529 	andeq	r3, r8, r9, lsr #10
    c920:	22a00a00 	adccs	r0, r0, #0, 20
    c924:	0f540000 	svceq	0x00540000
    c928:	0009e022 	andeq	lr, r9, r2, lsr #32
    c92c:	2a290600 	bcs	a4e134 <mailbuffer+0xa13044>
    c930:	240f0000 	strcs	r0, [pc], #-0	; c938 <__module_entries_end+0x4858>
    c934:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    c938:	262a0600 	strtcs	r0, [sl], -r0, lsl #12
    c93c:	250f0000 	strcs	r0, [pc, #-0]	; c944 <__module_entries_end+0x4864>
    c940:	000009e0 	andeq	r0, r0, r0, ror #19
    c944:	21bb0604 			; <UNDEFINED> instruction: 0x21bb0604
    c948:	260f0000 	strcs	r0, [pc], -r0
    c94c:	000003d7 	ldrdeq	r0, [r0], -r7
    c950:	22670608 	rsbcs	r0, r7, #8, 12	; 0x800000
    c954:	270f0000 	strcs	r0, [pc, -r0]
    c958:	000003d7 	ldrdeq	r0, [r0], -r7
    c95c:	2abd060c 	bcs	fef4e194 <_estack+0xf6f3e194>
    c960:	290f0000 	stmdbcs	pc, {}	; <UNPREDICTABLE>
    c964:	000003d7 	ldrdeq	r0, [r0], -r7
    c968:	21170610 	tstcs	r7, r0, lsl r6
    c96c:	2a0f0000 	bcs	3cc974 <mailbuffer+0x391884>
    c970:	000003d7 	ldrdeq	r0, [r0], -r7
    c974:	20e00614 	rsccs	r0, r0, r4, lsl r6
    c978:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    c97c:	0000069e 	muleq	r0, lr, r6
    c980:	297d0618 	ldmdbcs	sp!, {r3, r4, r9, sl}^
    c984:	2d0f0000 	stccs	0, cr0, [pc, #-0]	; c98c <__module_entries_end+0x48ac>
    c988:	0000074e 	andeq	r0, r0, lr, asr #14
    c98c:	243b061c 	ldrtcs	r0, [fp], #-1564	; 0xfffff9e4
    c990:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    c994:	0000006c 	andeq	r0, r0, ip, rrx
    c998:	21d40620 	bicscs	r0, r4, r0, lsr #12
    c99c:	2f0f0000 	svccs	0x000f0000
    c9a0:	000003a9 	andeq	r0, r0, r9, lsr #7
    c9a4:	239c0624 	orrscs	r0, ip, #36, 12	; 0x2400000
    c9a8:	310f0000 	mrscc	r0, CPSR
    c9ac:	000003a9 	andeq	r0, r0, r9, lsr #7
    c9b0:	21b00628 	lsrscs	r0, r8, #12
    c9b4:	320f0000 	andcc	r0, pc, #0
    c9b8:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    c9bc:	2095062c 	addscs	r0, r5, ip, lsr #12
    c9c0:	330f0000 	movwcc	r0, #61440	; 0xf000
    c9c4:	000003a9 	andeq	r0, r0, r9, lsr #7
    c9c8:	20ea0630 	rsccs	r0, sl, r0, lsr r6
    c9cc:	340f0000 	strcc	r0, [pc], #-0	; c9d4 <__module_entries_end+0x48f4>
    c9d0:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    c9d4:	26390634 			; <UNDEFINED> instruction: 0x26390634
    c9d8:	350f0000 	strcc	r0, [pc, #-0]	; c9e0 <__module_entries_end+0x4900>
    c9dc:	000003a9 	andeq	r0, r0, r9, lsr #7
    c9e0:	288c0638 	stmcs	ip, {r3, r4, r5, r9, sl}
    c9e4:	370f0000 	strcc	r0, [pc, -r0]
    c9e8:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    c9ec:	2731063c 			; <UNDEFINED> instruction: 0x2731063c
    c9f0:	380f0000 	stmdacc	pc, {}	; <UNPREDICTABLE>
    c9f4:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    c9f8:	282f0640 	stmdacs	pc!, {r6, r9, sl}	; <UNPREDICTABLE>
    c9fc:	390f0000 	stmdbcc	pc, {}	; <UNPREDICTABLE>
    ca00:	000003a9 	andeq	r0, r0, r9, lsr #7
    ca04:	2adc0644 	bcs	ff70e31c <_estack+0xf76fe31c>
    ca08:	3b0f0000 	blcc	3cca10 <mailbuffer+0x391920>
    ca0c:	000009e6 	andeq	r0, r0, r6, ror #19
    ca10:	24a70648 	strtcs	r0, [r7], #1608	; 0x648
    ca14:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    ca18:	0000045b 	andeq	r0, r0, fp, asr r4
    ca1c:	1fa0064c 	svcne	0x00a0064c
    ca20:	3e0f0000 	cdpcc	0, 0, cr0, cr15, cr0, {0}
    ca24:	000009ec 	andeq	r0, r0, ip, ror #19
    ca28:	040f0050 	streq	r0, [pc], #-80	; ca30 <__module_entries_end+0x4950>
    ca2c:	00000760 	andeq	r0, r0, r0, ror #14
    ca30:	03a9040f 			; <UNDEFINED> instruction: 0x03a9040f
    ca34:	040f0000 	streq	r0, [pc], #-0	; ca3c <__module_entries_end+0x495c>
    ca38:	000008cc 	andeq	r0, r0, ip, asr #17
    ca3c:	0022a004 	eoreq	sl, r2, r4
    ca40:	d7400f00 	strble	r0, [r0, -r0, lsl #30]
    ca44:	16000008 	strne	r0, [r0], -r8
    ca48:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    ca4c:	000a120b 	andeq	r1, sl, fp, lsl #4
    ca50:	000a1200 	andeq	r1, sl, r0, lsl #4
    ca54:	03821500 	orreq	r1, r2, #0, 10
    ca58:	000f0000 	andeq	r0, pc, r0
    ca5c:	09f2040f 	ldmibeq	r2!, {r0, r1, r2, r3, sl}^
    ca60:	d7160000 	ldrle	r0, [r6, -r0]
    ca64:	17000003 	strne	r0, [r0, -r3]
    ca68:	000029c0 	andeq	r2, r0, r0, asr #19
    ca6c:	3cf08601 	ldclcc	6, cr8, [r0], #4
    ca70:	00f00002 	rscseq	r0, r0, r2
    ca74:	9c010000 	stcls	0, cr0, [r1], {-0}
    ca78:	00000a4f 	andeq	r0, r0, pc, asr #20
    ca7c:	0043af18 	subeq	sl, r3, r8, lsl pc
    ca80:	4f860100 	svcmi	0x00860100
    ca84:	0200000a 	andeq	r0, r0, #10
    ca88:	e2186c91 	ands	r6, r8, #37120	; 0x9100
    ca8c:	01000020 	tsteq	r0, r0, lsr #32
    ca90:	00069e86 	andeq	r9, r6, r6, lsl #29
    ca94:	68910200 	ldmvs	r1, {r9}
    ca98:	fa040f00 	blx	1106a0 <mailbuffer+0xd55b0>
    ca9c:	17000007 	strne	r0, [r0, -r7]
    caa0:	000046cb 	andeq	r4, r0, fp, asr #13
    caa4:	3de09501 	cfstr64cc	mvdx9, [r0, #4]!
    caa8:	01180002 	tsteq	r8, r2
    caac:	9c010000 	stcls	0, cr0, [r1], {-0}
    cab0:	00000a79 	andeq	r0, r0, r9, ror sl
    cab4:	0043af18 	subeq	sl, r3, r8, lsl pc
    cab8:	4f950100 	svcmi	0x00950100
    cabc:	0200000a 	andeq	r0, r0, #10
    cac0:	19006c91 	stmdbne	r0, {r0, r4, r7, sl, fp, sp, lr}
    cac4:	0000469b 	muleq	r0, fp, r6
    cac8:	03d7b001 	bicseq	fp, r7, #1
    cacc:	3ef80000 	cdpcc	0, 15, cr0, cr8, cr0, {0}
    cad0:	05980002 	ldreq	r0, [r8, #2]
    cad4:	9c010000 	stcls	0, cr0, [r1], {-0}
    cad8:	00000b34 	andeq	r0, r0, r4, lsr fp
    cadc:	00233018 	eoreq	r3, r3, r8, lsl r0
    cae0:	9eb00100 	frdlss	f0, f0, f0
    cae4:	03000006 	movweq	r0, #6
    cae8:	1a7fac91 	bne	1ff7d34 <mailbuffer+0x1fbcc44>
    caec:	000043af 	andeq	r4, r0, pc, lsr #7
    caf0:	0a4fb201 	beq	13f92fc <mailbuffer+0x13be20c>
    caf4:	91020000 	mrsls	r0, (UNDEF: 2)
    caf8:	1f511a6c 	svcne	0x00511a6c
    cafc:	b5010000 	strlt	r0, [r1, #-0]
    cb00:	00000790 	muleq	r0, r0, r7
    cb04:	1a509102 	bne	1430f14 <mailbuffer+0x13f5e24>
    cb08:	0000456a 	andeq	r4, r0, sl, ror #10
    cb0c:	0494c001 	ldreq	ip, [r4], #1
    cb10:	91020000 	mrsls	r0, (UNDEF: 2)
    cb14:	1fb41a44 	svcne	0x00b41a44
    cb18:	c5010000 	strgt	r0, [r1, #-0]
    cb1c:	00000b34 	andeq	r0, r0, r4, lsr fp
    cb20:	1a689102 	bne	1a30f30 <mailbuffer+0x19f5e40>
    cb24:	00004228 	andeq	r4, r0, r8, lsr #4
    cb28:	0b3fd101 	bleq	1000f34 <mailbuffer+0xfc5e44>
    cb2c:	91020000 	mrsls	r0, (UNDEF: 2)
    cb30:	42541a64 	subsmi	r1, r4, #100, 20	; 0x64000
    cb34:	df010000 	svcle	0x00010000
    cb38:	00000b4a 	andeq	r0, r0, sl, asr #22
    cb3c:	1b609102 	blne	1830f4c <mailbuffer+0x17f5e5c>
    cb40:	0000468a 	andeq	r4, r0, sl, lsl #13
    cb44:	90011801 	andls	r1, r1, r1, lsl #16
    cb48:	03000007 	movweq	r0, #7
    cb4c:	1b7fbc91 	blne	1ffbd98 <mailbuffer+0x1fc0ca8>
    cb50:	0000466c 	andeq	r4, r0, ip, ror #12
    cb54:	9e011a01 	vmlals.f32	s2, s2, s2
    cb58:	02000003 	andeq	r0, r0, #3
    cb5c:	d01b5e91 	mulsle	fp, r1, lr
    cb60:	01000045 	tsteq	r0, r5, asr #32
    cb64:	03a9011b 			; <UNDEFINED> instruction: 0x03a9011b
    cb68:	91020000 	mrsls	r0, (UNDEF: 2)
    cb6c:	2a441b58 	bcs	11138d4 <mailbuffer+0x10d87e4>
    cb70:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    cb74:	00049401 	andeq	r9, r4, r1, lsl #8
    cb78:	b0910300 	addslt	r0, r1, r0, lsl #6
    cb7c:	040f007f 	streq	r0, [pc], #-127	; cb84 <__module_entries_end+0x4aa4>
    cb80:	00000b3a 	andeq	r0, r0, sl, lsr fp
    cb84:	0001fa10 	andeq	pc, r1, r0, lsl sl	; <UNPREDICTABLE>
    cb88:	45040f00 	strmi	r0, [r4, #-3840]	; 0xfffff100
    cb8c:	1000000b 	andne	r0, r0, fp
    cb90:	0000027a 	andeq	r0, r0, sl, ror r2
    cb94:	0b50040f 	bleq	140dbd8 <mailbuffer+0x13d2ae8>
    cb98:	d6100000 	ldrle	r0, [r0], -r0
    cb9c:	1c000002 	stcne	0, cr0, [r0], {2}
    cba0:	0000454e 	andeq	r4, r0, lr, asr #10
    cba4:	7f014301 	svcvc	0x00014301
    cba8:	9000000b 	andls	r0, r0, fp
    cbac:	78000244 	stmdavc	r0, {r2, r6, r9}
    cbb0:	01000000 	mrseq	r0, (UNDEF: 0)
    cbb4:	000b7f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    cbb8:	43af1d00 			; <UNDEFINED> instruction: 0x43af1d00
    cbbc:	43010000 	movwmi	r0, #4096	; 0x1000
    cbc0:	000a4f01 	andeq	r4, sl, r1, lsl #30
    cbc4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    cbc8:	a0040f00 	andge	r0, r4, r0, lsl #30
    cbcc:	1c000007 	stcne	0, cr0, [r0], {7}
    cbd0:	000046b3 			; <UNDEFINED> instruction: 0x000046b3
    cbd4:	d7014a01 	strle	r4, [r1, -r1, lsl #20]
    cbd8:	08000003 	stmdaeq	r0, {r0, r1}
    cbdc:	84000245 	strhi	r0, [r0], #-581	; 0xfffffdbb
    cbe0:	01000001 	tsteq	r0, r1
    cbe4:	000bcd9c 	muleq	fp, ip, sp
    cbe8:	43af1d00 			; <UNDEFINED> instruction: 0x43af1d00
    cbec:	4a010000 	bmi	4cbf4 <mailbuffer+0x11b04>
    cbf0:	000a4f01 	andeq	r4, sl, r1, lsl #30
    cbf4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    cbf8:	0026531d 	eoreq	r5, r6, sp, lsl r3
    cbfc:	014a0100 	mrseq	r0, (UNDEF: 90)
    cc00:	00000bcd 	andeq	r0, r0, sp, asr #23
    cc04:	1d689102 	stfnep	f1, [r8, #-8]!
    cc08:	00004c0e 	andeq	r4, r0, lr, lsl #24
    cc0c:	b4014a01 	strlt	r4, [r1], #-2561	; 0xfffff5ff
    cc10:	02000003 	andeq	r0, r0, #3
    cc14:	0f006491 	svceq	0x00006491
    cc18:	000bd304 	andeq	sp, fp, r4, lsl #6
    cc1c:	f61c1e00 			; <UNDEFINED> instruction: 0xf61c1e00
    cc20:	01000045 	tsteq	r0, r5, asr #32
    cc24:	03d7015e 	bicseq	r0, r7, #-2147483625	; 0x80000017
    cc28:	468c0000 	strmi	r0, [ip], r0
    cc2c:	029c0002 	addseq	r0, ip, #2
    cc30:	9c010000 	stcls	0, cr0, [r1], {-0}
    cc34:	00000c5b 	andeq	r0, r0, fp, asr ip
    cc38:	0043af1d 	subeq	sl, r3, sp, lsl pc
    cc3c:	015e0100 	cmpeq	lr, r0, lsl #2
    cc40:	00000a4f 	andeq	r0, r0, pc, asr #20
    cc44:	7fbc9103 	svcvc	0x00bc9103
    cc48:	0026531d 	eoreq	r5, r6, sp, lsl r3
    cc4c:	015e0100 	cmpeq	lr, r0, lsl #2
    cc50:	0000045b 	andeq	r0, r0, fp, asr r4
    cc54:	7fb89103 	svcvc	0x00b89103
    cc58:	002a631d 	eoreq	r6, sl, sp, lsl r3
    cc5c:	015e0100 	cmpeq	lr, r0, lsl #2
    cc60:	00000c5b 	andeq	r0, r0, fp, asr ip
    cc64:	7fb49103 	svcvc	0x00b49103
    cc68:	4252551f 	subsmi	r5, r2, #130023424	; 0x7c00000
    cc6c:	01640100 	cmneq	r4, r0, lsl #2
    cc70:	00000760 	andeq	r0, r0, r0, ror #14
    cc74:	1b409102 	blne	1031084 <mailbuffer+0xff5f94>
    cc78:	0000461b 	andeq	r4, r0, fp, lsl r6
    cc7c:	a9016e01 	stmdbge	r1, {r0, r9, sl, fp, sp, lr}
    cc80:	02000003 	andeq	r0, r0, #3
    cc84:	111b6c91 			; <UNDEFINED> instruction: 0x111b6c91
    cc88:	01000046 	tsteq	r0, r6, asr #32
    cc8c:	03a90176 			; <UNDEFINED> instruction: 0x03a90176
    cc90:	91020000 	mrsls	r0, (UNDEF: 2)
    cc94:	1e961b68 	vfnmane.f64	d1, d6, d24
    cc98:	80010000 	andhi	r0, r1, r0
    cc9c:	0003a901 	andeq	sl, r3, r1, lsl #18
    cca0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    cca4:	b4040f00 	strlt	r0, [r4], #-3840	; 0xfffff100
    cca8:	1c000003 	stcne	0, cr0, [r0], {3}
    ccac:	00004629 	andeq	r4, r0, r9, lsr #12
    ccb0:	d7019701 	strle	r9, [r1, -r1, lsl #14]
    ccb4:	28000003 	stmdacs	r0, {r0, r1}
    ccb8:	e0000249 	and	r0, r0, r9, asr #4
    ccbc:	01000000 	mrseq	r0, (UNDEF: 0)
    ccc0:	000ca99c 	muleq	ip, ip, r9
    ccc4:	43af1d00 			; <UNDEFINED> instruction: 0x43af1d00
    ccc8:	97010000 	strls	r0, [r1, -r0]
    cccc:	000a4f01 	andeq	r4, sl, r1, lsl #30
    ccd0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    ccd4:	0046f21d 	subeq	pc, r6, sp, lsl r2	; <UNPREDICTABLE>
    ccd8:	01970100 	orrseq	r0, r7, r0, lsl #2
    ccdc:	000003a9 	andeq	r0, r0, r9, lsr #7
    cce0:	1d689102 	stfnep	f1, [r8, #-8]!
    cce4:	00002a5c 	andeq	r2, r0, ip, asr sl
    cce8:	a9019701 	stmdbge	r1, {r0, r8, r9, sl, ip, pc}
    ccec:	02000003 	andeq	r0, r0, #3
    ccf0:	1c006491 	cfstrsne	mvf6, [r0], {145}	; 0x91
    ccf4:	00004640 	andeq	r4, r0, r0, asr #12
    ccf8:	d701a101 	strle	sl, [r1, -r1, lsl #2]
    ccfc:	08000003 	stmdaeq	r0, {r0, r1}
    cd00:	e400024a 	str	r0, [r0], #-586	; 0xfffffdb6
    cd04:	01000000 	mrseq	r0, (UNDEF: 0)
    cd08:	000cf19c 	muleq	ip, ip, r1
    cd0c:	43af1d00 			; <UNDEFINED> instruction: 0x43af1d00
    cd10:	a1010000 	mrsge	r0, (UNDEF: 1)
    cd14:	000a4f01 	andeq	r4, sl, r1, lsl #30
    cd18:	6c910200 	lfmvs	f0, 4, [r1], {0}
    cd1c:	0046f21d 	subeq	pc, r6, sp, lsl r2	; <UNPREDICTABLE>
    cd20:	01a10100 			; <UNDEFINED> instruction: 0x01a10100
    cd24:	000003a9 	andeq	r0, r0, r9, lsr #7
    cd28:	1d689102 	stfnep	f1, [r8, #-8]!
    cd2c:	000046db 	ldrdeq	r4, [r0], -fp
    cd30:	e601a101 	str	sl, [r1], -r1, lsl #2
    cd34:	02000009 	andeq	r0, r0, #9
    cd38:	20006491 	mulcs	r0, r1, r4
    cd3c:	00004656 	andeq	r4, r0, r6, asr r6
    cd40:	ec01ad01 	stc	13, cr10, [r1], {1}
    cd44:	e400024a 	str	r0, [r0], #-586	; 0xfffffdb6
    cd48:	01000000 	mrseq	r0, (UNDEF: 0)
    cd4c:	000d449c 	muleq	sp, ip, r4
    cd50:	43af1d00 			; <UNDEFINED> instruction: 0x43af1d00
    cd54:	ad010000 	stcge	0, cr0, [r1, #-0]
    cd58:	000a4f01 	andeq	r4, sl, r1, lsl #30
    cd5c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    cd60:	00221b1d 	eoreq	r1, r2, sp, lsl fp
    cd64:	01ad0100 			; <UNDEFINED> instruction: 0x01ad0100
    cd68:	00000d44 	andeq	r0, r0, r4, asr #26
    cd6c:	1d609102 	stfnep	f1, [r0, #-8]!
    cd70:	000046f2 	strdeq	r4, [r0], -r2
    cd74:	a901ad01 	stmdbge	r1, {r0, r8, sl, fp, sp, pc}
    cd78:	02000003 	andeq	r0, r0, #3
    cd7c:	5c1b5c91 	ldcpl	12, cr5, [fp], {145}	; 0x91
    cd80:	0100002a 	tsteq	r0, sl, lsr #32
    cd84:	03a901b1 			; <UNDEFINED> instruction: 0x03a901b1
    cd88:	91020000 	mrsls	r0, (UNDEF: 2)
    cd8c:	040f006c 	streq	r0, [pc], #-108	; cd94 <__module_entries_end+0x4cb4>
    cd90:	00000d4a 	andeq	r0, r0, sl, asr #26
    cd94:	0003c210 	andeq	ip, r3, r0, lsl r2
    cd98:	45df2000 	ldrbmi	r2, [pc]	; cda0 <__module_entries_end+0x4cc0>
    cd9c:	bc010000 	stclt	0, cr0, [r1], {-0}
    cda0:	024bd001 	subeq	sp, fp, #1
    cda4:	0001f800 	andeq	pc, r1, r0, lsl #16
    cda8:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
    cdac:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    cdb0:	000043af 	andeq	r4, r0, pc, lsr #7
    cdb4:	4f01bc01 	svcmi	0x0001bc01
    cdb8:	0200000a 	andeq	r0, r0, #10
    cdbc:	0b006c91 	bleq	28008 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x9c>
    cdc0:	000003c2 	andeq	r0, r0, r2, asr #7
    cdc4:	00000d85 	andeq	r0, r0, r5, lsl #27
    cdc8:	00038215 	andeq	r8, r3, r5, lsl r2
    cdcc:	1a000800 	bne	edd4 <__module_entries_end+0x6cf4>
    cdd0:	0000467d 	andeq	r4, r0, sp, ror r6
    cdd4:	0d967b01 	vldreq	d7, [r6, #4]
    cdd8:	03050000 	movweq	r0, #20480	; 0x5000
    cddc:	0002f7cc 	andeq	pc, r2, ip, asr #15
    cde0:	000d7510 	andeq	r7, sp, r0, lsl r5
    cde4:	46e21a00 	strbtmi	r1, [r2], r0, lsl #20
    cde8:	7d010000 	stcvc	0, cr0, [r1, #-0]
    cdec:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    cdf0:	b0d00305 	sbcslt	r0, r0, r5, lsl #6
    cdf4:	76000003 	strvc	r0, [r0], -r3
    cdf8:	04000005 	streq	r0, [r0], #-5
    cdfc:	00211b00 	eoreq	r1, r1, r0, lsl #22
    ce00:	19010400 	stmdbne	r1, {sl}
    ce04:	01000000 	mrseq	r0, (UNDEF: 0)
    ce08:	00004811 	andeq	r4, r0, r1, lsl r8
    ce0c:	00000ddc 	ldrdeq	r0, [r0], -ip
    ce10:	00024dc8 	andeq	r4, r2, r8, asr #27
    ce14:	00001284 	andeq	r1, r0, r4, lsl #5
    ce18:	00004391 	muleq	r0, r1, r3
    ce1c:	0047fa02 	subeq	pc, r7, r2, lsl #20
    ce20:	30170200 	andscc	r0, r7, r0, lsl #4
    ce24:	03000000 	movweq	r0, #0
    ce28:	000047f8 	strdeq	r4, [r0], -r8
    ce2c:	47000404 	strmi	r0, [r0, -r4, lsl #8]
    ce30:	04000000 	streq	r0, [r0], #-0
    ce34:	000047e1 	andeq	r4, r0, r1, ror #15
    ce38:	00000047 	andeq	r0, r0, r7, asr #32
    ce3c:	04050000 	streq	r0, [r5], #-0
    ce40:	2a080106 	bcs	20d260 <mailbuffer+0x1d2170>
    ce44:	06000007 	streq	r0, [r0], -r7
    ce48:	01320702 	teqeq	r2, r2, lsl #14
    ce4c:	04060000 	streq	r0, [r6], #-0
    ce50:	00071d07 	andeq	r1, r7, r7, lsl #26
    ce54:	07080600 	streq	r0, [r8, -r0, lsl #12]
    ce58:	00000713 	andeq	r0, r0, r3, lsl r7
    ce5c:	33060106 	movwcc	r0, #24838	; 0x6106
    ce60:	06000007 	streq	r0, [r0], -r7
    ce64:	07b80502 	ldreq	r0, [r8, r2, lsl #10]!
    ce68:	04070000 	streq	r0, [r7], #-0
    ce6c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    ce70:	29300200 	ldmdbcs	r0!, {r9}
    ce74:	20030000 	andcs	r0, r3, r0
    ce78:	00000073 	andeq	r0, r0, r3, ror r0
    ce7c:	00081f02 	andeq	r1, r8, r2, lsl #30
    ce80:	90240300 	eorls	r0, r4, r0, lsl #6
    ce84:	06000000 	streq	r0, [r0], -r0
    ce88:	07180704 	ldreq	r0, [r8, -r4, lsl #14]
    ce8c:	04060000 	streq	r0, [r6], #-0
    ce90:	00079805 	andeq	r9, r7, r5, lsl #16
    ce94:	26310300 	ldrtcs	r0, [r1], -r0, lsl #6
    ce98:	050c0000 	streq	r0, [ip, #-0]
    ce9c:	0000cf1f 	andeq	ip, r0, pc, lsl pc
    cea0:	26510800 	ldrbcs	r0, [r1], -r0, lsl #16
    cea4:	21050000 	mrscs	r0, (UNDEF: 5)
    cea8:	000000cf 	andeq	r0, r0, pc, asr #1
    ceac:	2bf10800 	blcs	ffc4eeb4 <_estack+0xf7c3eeb4>
    ceb0:	22050000 	andcs	r0, r5, #0
    ceb4:	00000057 	andeq	r0, r0, r7, asr r0
    ceb8:	24850804 	strcs	r0, [r5], #2052	; 0x804
    cebc:	23050000 	movwcs	r0, #20480	; 0x5000
    cec0:	000000cf 	andeq	r0, r0, pc, asr #1
    cec4:	04090008 	streq	r0, [r9], #-8
    cec8:	00000065 	andeq	r0, r0, r5, rrx
    cecc:	00263102 	eoreq	r3, r6, r2, lsl #2
    ced0:	9e250500 	cfsh64ls	mvdx0, mvdx5, #0
    ced4:	0a000000 	beq	cedc <__module_entries_end+0x4dfc>
    ced8:	0000253f 	andeq	r2, r0, pc, lsr r5
    cedc:	4dc82101 	stfmie	f2, [r8, #4]
    cee0:	00800002 	addeq	r0, r0, r2
    cee4:	9c010000 	stcls	0, cr0, [r1], {-0}
    cee8:	00000104 	andeq	r0, r0, r4, lsl #2
    ceec:	0043af0b 	subeq	sl, r3, fp, lsl #30
    cef0:	04210100 	strteq	r0, [r1], #-256	; 0xffffff00
    cef4:	02000001 	andeq	r0, r0, #1
    cef8:	09006c91 	stmdbeq	r0, {r0, r4, r7, sl, fp, sp, lr}
    cefc:	0000d504 	andeq	sp, r0, r4, lsl #10
    cf00:	48f90a00 	ldmmi	r9!, {r9, fp}^
    cf04:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    cf08:	00024e48 	andeq	r4, r2, r8, asr #28
    cf0c:	000000b8 	strheq	r0, [r0], -r8
    cf10:	013c9c01 	teqeq	ip, r1, lsl #24
    cf14:	af0b0000 	svcge	0x000b0000
    cf18:	01000043 	tsteq	r0, r3, asr #32
    cf1c:	00010428 	andeq	r0, r1, r8, lsr #8
    cf20:	6c910200 	lfmvs	f0, 4, [r1], {0}
    cf24:	002a970b 	eoreq	r9, sl, fp, lsl #14
    cf28:	3c280100 	stfccs	f0, [r8], #-0
    cf2c:	02000001 	andeq	r0, r0, #1
    cf30:	09006891 	stmdbeq	r0, {r0, r4, r7, fp, sp, lr}
    cf34:	00014204 	andeq	r4, r1, r4, lsl #4
    cf38:	00650c00 	rsbeq	r0, r5, r0, lsl #24
    cf3c:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    cf40:	01000048 	tsteq	r0, r8, asr #32
    cf44:	024f0033 	subeq	r0, pc, #51	; 0x33
    cf48:	00009400 	andeq	r9, r0, r0, lsl #8
    cf4c:	6b9c0100 	blvs	fe70d354 <_estack+0xf66fd354>
    cf50:	0b000001 	bleq	cf5c <__module_entries_end+0x4e7c>
    cf54:	000043af 	andeq	r4, r0, pc, lsr #7
    cf58:	01043301 	tsteq	r4, r1, lsl #6
    cf5c:	91020000 	mrsls	r0, (UNDEF: 2)
    cf60:	e70d006c 	str	r0, [sp, -ip, rrx]
    cf64:	0100005d 	qaddeq	r0, sp, r0
    cf68:	00013c3e 	andeq	r3, r1, lr, lsr ip
    cf6c:	024f9400 	subeq	r9, pc, #0, 8
    cf70:	00009400 	andeq	r9, r0, r0, lsl #8
    cf74:	939c0100 	orrsls	r0, ip, #0, 2
    cf78:	0b000001 	bleq	cf84 <__module_entries_end+0x4ea4>
    cf7c:	000043af 	andeq	r4, r0, pc, lsr #7
    cf80:	01043e01 	tsteq	r4, r1, lsl #28
    cf84:	91020000 	mrsls	r0, (UNDEF: 2)
    cf88:	9f0d006c 	svcls	0x000d006c
    cf8c:	01000048 	tsteq	r0, r8, asr #32
    cf90:	00013c4a 	andeq	r3, r1, sl, asr #24
    cf94:	02502800 	subseq	r2, r0, #0, 16
    cf98:	0000e800 	andeq	lr, r0, r0, lsl #16
    cf9c:	c99c0100 	ldmibgt	ip, {r8}
    cfa0:	0b000001 	bleq	cfac <__module_entries_end+0x4ecc>
    cfa4:	000043af 	andeq	r4, r0, pc, lsr #7
    cfa8:	01044a01 	tsteq	r4, r1, lsl #20
    cfac:	91020000 	mrsls	r0, (UNDEF: 2)
    cfb0:	2a970b6c 	bcs	fe5cfd68 <_estack+0xf65bfd68>
    cfb4:	4a010000 	bmi	4cfbc <mailbuffer+0x11ecc>
    cfb8:	0000013c 	andeq	r0, r0, ip, lsr r1
    cfbc:	00689102 	rsbeq	r9, r8, r2, lsl #2
    cfc0:	0047240d 	subeq	r2, r7, sp, lsl #8
    cfc4:	855c0100 	ldrbhi	r0, [ip, #-256]	; 0xffffff00
    cfc8:	10000000 	andne	r0, r0, r0
    cfcc:	9c000251 	sfmls	f0, 4, [r0], {81}	; 0x51
    cfd0:	01000000 	mrseq	r0, (UNDEF: 0)
    cfd4:	0001f19c 	muleq	r1, ip, r1
    cfd8:	43af0b00 			; <UNDEFINED> instruction: 0x43af0b00
    cfdc:	5c010000 	stcpl	0, cr0, [r1], {-0}
    cfe0:	00000104 	andeq	r0, r0, r4, lsl #2
    cfe4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    cfe8:	0048920a 	subeq	r9, r8, sl, lsl #4
    cfec:	ac680100 	stfgee	f0, [r8], #-0
    cff0:	44000251 	strmi	r0, [r0], #-593	; 0xfffffdaf
    cff4:	01000001 	tsteq	r0, r1
    cff8:	0002319c 	muleq	r2, ip, r1
    cffc:	43af0b00 			; <UNDEFINED> instruction: 0x43af0b00
    d000:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    d004:	00000104 	andeq	r0, r0, r4, lsl #2
    d008:	0b649102 	bleq	1931418 <mailbuffer+0x18f6328>
    d00c:	00002a97 	muleq	r0, r7, sl
    d010:	013c6801 	teqeq	ip, r1, lsl #16
    d014:	91020000 	mrsls	r0, (UNDEF: 2)
    d018:	26530e60 	ldrbcs	r0, [r3], -r0, ror #28
    d01c:	73010000 	movwvc	r0, #4096	; 0x1000
    d020:	000000cf 	andeq	r0, r0, pc, asr #1
    d024:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    d028:	0047d30d 	subeq	sp, r7, sp, lsl #6
    d02c:	73840100 	orrvc	r0, r4, #0, 2
    d030:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    d034:	8c000252 	sfmhi	f0, 4, [r0], {82}	; 0x52
    d038:	01000000 	mrseq	r0, (UNDEF: 0)
    d03c:	0002679c 	muleq	r2, ip, r7
    d040:	43af0b00 			; <UNDEFINED> instruction: 0x43af0b00
    d044:	84010000 	strhi	r0, [r1], #-0
    d048:	00000104 	andeq	r0, r0, r4, lsl #2
    d04c:	0b6c9102 	bleq	1b3145c <mailbuffer+0x1af636c>
    d050:	00002a97 	muleq	r0, r7, sl
    d054:	013c8401 	teqeq	ip, r1, lsl #8
    d058:	91020000 	mrsls	r0, (UNDEF: 2)
    d05c:	b60d0068 	strlt	r0, [sp], -r8, rrx
    d060:	01000047 	tsteq	r0, r7, asr #32
    d064:	0000738b 	andeq	r7, r0, fp, lsl #7
    d068:	02537c00 	subseq	r7, r3, #0, 24
    d06c:	0000dc00 	andeq	sp, r0, r0, lsl #24
    d070:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    d074:	0b000002 	bleq	d084 <__module_entries_end+0x4fa4>
    d078:	000043af 	andeq	r4, r0, pc, lsr #7
    d07c:	01048b01 	tsteq	r4, r1, lsl #22
    d080:	91020000 	mrsls	r0, (UNDEF: 2)
    d084:	48020b64 	stmdami	r2, {r2, r5, r6, r8, r9, fp}
    d088:	8b010000 	blhi	4d090 <mailbuffer+0x11fa0>
    d08c:	00000065 	andeq	r0, r0, r5, rrx
    d090:	0e639102 	lgneqs	f1, f2
    d094:	000046fe 	strdeq	r4, [r0], -lr
    d098:	00738f01 	rsbseq	r8, r3, r1, lsl #30
    d09c:	91020000 	mrsls	r0, (UNDEF: 2)
    d0a0:	00700f6c 	rsbseq	r0, r0, ip, ror #30
    d0a4:	00cf9101 	sbceq	r9, pc, r1, lsl #2
    d0a8:	91020000 	mrsls	r0, (UNDEF: 2)
    d0ac:	400a0068 	andmi	r0, sl, r8, rrx
    d0b0:	01000047 	tsteq	r0, r7, asr #32
    d0b4:	0254589f 	subseq	r5, r4, #10420224	; 0x9f0000
    d0b8:	00008c00 	andeq	r8, r0, r0, lsl #24
    d0bc:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
    d0c0:	0b000002 	bleq	d0d0 <__module_entries_end+0x4ff0>
    d0c4:	000043af 	andeq	r4, r0, pc, lsr #7
    d0c8:	01049f01 	tsteq	r4, r1, lsl #30
    d0cc:	91020000 	mrsls	r0, (UNDEF: 2)
    d0d0:	47950b5c 			; <UNDEFINED> instruction: 0x47950b5c
    d0d4:	9f010000 	svcls	0x00010000
    d0d8:	0000013c 	andeq	r0, r0, ip, lsr r1
    d0dc:	10749102 	rsbsne	r9, r4, r2, lsl #2
    d0e0:	7261760f 	rsbvc	r7, r1, #15728640	; 0xf00000
    d0e4:	25a30100 	strcs	r0, [r3, #256]!	; 0x100
    d0e8:	02000000 	andeq	r0, r0, #0
    d0ec:	0a006491 	beq	26338 <uspi_strcmp+0x64>
    d0f0:	0000477e 	andeq	r4, r0, lr, ror r7
    d0f4:	54e4ab01 	strbtpl	sl, [r4], #2817	; 0xb01
    d0f8:	073c0002 	ldreq	r0, [ip, -r2]!
    d0fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    d100:	000003fa 	strdeq	r0, [r0], -sl
    d104:	0043af0b 	subeq	sl, r3, fp, lsl #30
    d108:	04ab0100 	strteq	r0, [fp], #256	; 0x100
    d10c:	03000001 	movweq	r0, #1
    d110:	0b7fb491 	bleq	1ffa35c <mailbuffer+0x1fbf26c>
    d114:	00004795 	muleq	r0, r5, r7
    d118:	013cab01 	teqeq	ip, r1, lsl #22
    d11c:	91030000 	mrsls	r0, (UNDEF: 3)
    d120:	f90b7fb0 			; <UNDEFINED> instruction: 0xf90b7fb0
    d124:	01000046 	tsteq	r0, r6, asr #32
    d128:	000025ab 	andeq	r2, r0, fp, lsr #11
    d12c:	ac910300 	ldcge	3, cr0, [r1], {0}
    d130:	486b117f 	stmdami	fp!, {r0, r1, r2, r3, r4, r5, r6, r8, ip}^
    d134:	50010000 	andpl	r0, r1, r0
    d138:	025a5c01 	subseq	r5, sl, #256	; 0x100
    d13c:	55ac1200 	strpl	r1, [ip, #512]!	; 0x200
    d140:	060c0002 	streq	r0, [ip], -r2
    d144:	ed0e0000 	stc	0, cr0, [lr, #-0]
    d148:	01000047 	tsteq	r0, r7, asr #32
    d14c:	00007ac5 	andeq	r7, r0, r5, asr #21
    d150:	6c910200 	lfmvs	f0, 4, [r1], {0}
    d154:	0047340e 	subeq	r3, r7, lr, lsl #8
    d158:	7acd0100 	bvc	ff34d560 <_estack+0xf733d560>
    d15c:	02000000 	andeq	r0, r0, #0
    d160:	a90e6891 	stmdbge	lr, {r0, r4, r7, fp, sp, lr}
    d164:	01000048 	tsteq	r0, r8, asr #32
    d168:	000085d5 	ldrdeq	r8, [r0], -r5
    d16c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    d170:	0047630e 	subeq	r6, r7, lr, lsl #6
    d174:	7add0100 	bvc	ff74d57c <_estack+0xf773d57c>
    d178:	02000000 	andeq	r0, r0, #0
    d17c:	3a0e6091 	bcc	3a53c8 <mailbuffer+0x36a2d8>
    d180:	01000047 	tsteq	r0, r7, asr #32
    d184:	000065e5 	andeq	r6, r0, r5, ror #11
    d188:	4f910200 	svcmi	0x00910200
    d18c:	0047f30e 	subeq	pc, r7, lr, lsl #6
    d190:	3ce60100 	stfcce	f0, [r6]
    d194:	02000001 	andeq	r0, r0, #1
    d198:	780e4491 	stmdavc	lr, {r0, r4, r7, sl, lr}
    d19c:	01000048 	tsteq	r0, r8, asr #32
    d1a0:	000090e7 	andeq	r9, r0, r7, ror #1
    d1a4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    d1a8:	0047740e 	subeq	r7, r7, lr, lsl #8
    d1ac:	85e80100 	strbhi	r0, [r8, #256]!	; 0x100
    d1b0:	02000000 	andeq	r0, r0, #0
    d1b4:	7e0e4891 	mcrvc	8, 0, r4, cr14, cr1, {4}
    d1b8:	01000048 	tsteq	r0, r8, asr #32
    d1bc:	000057e9 	andeq	r5, r0, r9, ror #15
    d1c0:	58910200 	ldmpl	r1, {r9}
    d1c4:	0048840e 	subeq	r8, r8, lr, lsl #8
    d1c8:	faea0100 	blx	ffa8d5d0 <_estack+0xf7a7d5d0>
    d1cc:	03000003 	movweq	r0, #3
    d1d0:	0e7fb891 	mrceq	8, 3, fp, cr15, cr1, {4}
    d1d4:	0000488b 	andeq	r4, r0, fp, lsl #17
    d1d8:	007aeb01 	rsbseq	lr, sl, r1, lsl #22
    d1dc:	91020000 	mrsls	r0, (UNDEF: 2)
    d1e0:	48790e54 	ldmdami	r9!, {r2, r4, r6, r9, sl, fp}^
    d1e4:	ec010000 	stc	0, cr0, [r1], {-0}
    d1e8:	00000097 	muleq	r0, r7, r0
    d1ec:	00509102 	subseq	r9, r0, r2, lsl #2
    d1f0:	00651300 	rsbeq	r1, r5, r0, lsl #6
    d1f4:	040a0000 	streq	r0, [sl], #-0
    d1f8:	0a140000 	beq	50d200 <mailbuffer+0x4d2110>
    d1fc:	0b000004 	bleq	d214 <__module_entries_end+0x5134>
    d200:	07040600 	streq	r0, [r4, -r0, lsl #12]
    d204:	000001d4 	ldrdeq	r0, [r0], -r4
    d208:	00470315 	subeq	r0, r7, r5, lsl r3
    d20c:	017e0100 	cmneq	lr, r0, lsl #2
    d210:	00025c20 	andeq	r5, r2, r0, lsr #24
    d214:	000000b4 	strheq	r0, [r0], -r4
    d218:	04559c01 	ldrbeq	r9, [r5], #-3073	; 0xfffff3ff
    d21c:	af160000 	svcge	0x00160000
    d220:	01000043 	tsteq	r0, r3, asr #32
    d224:	0104017e 	tsteq	r4, lr, ror r1
    d228:	91020000 	mrsls	r0, (UNDEF: 2)
    d22c:	4802166c 	stmdami	r2, {r2, r3, r5, r6, r9, sl, ip}
    d230:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    d234:	00006501 	andeq	r6, r0, r1, lsl #10
    d238:	6b910200 	blvs	fe44da40 <_estack+0xf643da40>
    d23c:	0021e516 	eoreq	lr, r1, r6, lsl r5
    d240:	017e0100 	cmneq	lr, r0, lsl #2
    d244:	00000085 	andeq	r0, r0, r5, lsl #1
    d248:	00649102 	rsbeq	r9, r4, r2, lsl #2
    d24c:	00474d15 	subeq	r4, r7, r5, lsl sp
    d250:	018a0100 	orreq	r0, sl, r0, lsl #2
    d254:	00025cd4 	ldrdeq	r5, [r2], -r4
    d258:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    d25c:	04999c01 	ldreq	r9, [r9], #3073	; 0xc01
    d260:	af160000 	svcge	0x00160000
    d264:	01000043 	tsteq	r0, r3, asr #32
    d268:	0104018a 	smlabbeq	r4, sl, r1, r0
    d26c:	91020000 	mrsls	r0, (UNDEF: 2)
    d270:	2a971664 	bcs	fe5d2c08 <_estack+0xf65c2c08>
    d274:	8a010000 	bhi	4d27c <mailbuffer+0x1218c>
    d278:	00013c01 	andeq	r3, r1, r1, lsl #24
    d27c:	60910200 	addsvs	r0, r1, r0, lsl #4
    d280:	00477417 	subeq	r7, r7, r7, lsl r4
    d284:	018e0100 	orreq	r0, lr, r0, lsl #2
    d288:	00000085 	andeq	r0, r0, r5, lsl #1
    d28c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    d290:	00471115 	subeq	r1, r7, r5, lsl r1
    d294:	01970100 	orrseq	r0, r7, r0, lsl #2
    d298:	00025d84 	andeq	r5, r2, r4, lsl #27
    d29c:	00000154 	andeq	r0, r0, r4, asr r1
    d2a0:	04fb9c01 	ldrbteq	r9, [fp], #3073	; 0xc01
    d2a4:	af160000 	svcge	0x00160000
    d2a8:	01000043 	tsteq	r0, r3, asr #32
    d2ac:	01040197 			; <UNDEFINED> instruction: 0x01040197
    d2b0:	91020000 	mrsls	r0, (UNDEF: 2)
    d2b4:	47e6165c 	ubfxmi	r1, ip, #12, #7
    d2b8:	97010000 	strls	r0, [r1, -r0]
    d2bc:	00008501 	andeq	r8, r0, r1, lsl #10
    d2c0:	58910200 	ldmpl	r1, {r9}
    d2c4:	00479d17 	subeq	r9, r7, r7, lsl sp
    d2c8:	01a00100 	lsleq	r0, r0, #2
    d2cc:	00000085 	andeq	r0, r0, r5, lsl #1
    d2d0:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    d2d4:	0000478c 	andeq	r4, r0, ip, lsl #15
    d2d8:	8501a101 	strhi	sl, [r1, #-257]	; 0xfffffeff
    d2dc:	02000000 	andeq	r0, r0, #0
    d2e0:	69176891 	ldmdbvs	r7, {r0, r4, r7, fp, sp, lr}
    d2e4:	01000047 	tsteq	r0, r7, asr #32
    d2e8:	00cf01a8 	sbceq	r0, pc, r8, lsr #3
    d2ec:	91020000 	mrsls	r0, (UNDEF: 2)
    d2f0:	79180064 	ldmdbvc	r8, {r2, r5, r6}
    d2f4:	01000047 	tsteq	r0, r7, asr #32
    d2f8:	00cf01b5 	strheq	r0, [pc], #21	; <UNPREDICTABLE>
    d2fc:	5ed80000 	cdppl	0, 13, cr0, cr8, cr0, {0}
    d300:	01740002 	cmneq	r4, r2
    d304:	9c010000 	stcls	0, cr0, [r1], {-0}
    d308:	00475d16 	subeq	r5, r7, r6, lsl sp
    d30c:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    d310:	000000cf 	andeq	r0, r0, pc, asr #1
    d314:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
    d318:	000047a5 	andeq	r4, r0, r5, lsr #15
    d31c:	9001b501 	andls	fp, r1, r1, lsl #10
    d320:	02000000 	andeq	r0, r0, #0
    d324:	7e165891 	mrcvc	8, 0, r5, cr6, cr1, {4}
    d328:	01000048 	tsteq	r0, r8, asr #32
    d32c:	005701b5 	ldrheq	r0, [r7], #-21	; 0xffffffeb
    d330:	91020000 	mrsls	r0, (UNDEF: 2)
    d334:	47ae1654 	sbfxmi	r1, r4, #12, #15
    d338:	b5010000 	strlt	r0, [r1, #-0]
    d33c:	00007a01 	andeq	r7, r0, r1, lsl #20
    d340:	50910200 	addspl	r0, r1, r0, lsl #4
    d344:	0047c117 	subeq	ip, r7, r7, lsl r1
    d348:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
    d34c:	00000090 	muleq	r0, r0, r0
    d350:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    d354:	000047c9 	andeq	r4, r0, r9, asr #15
    d358:	9001b901 	andls	fp, r1, r1, lsl #18
    d35c:	02000000 	andeq	r0, r0, #0
    d360:	70196891 	mulsvc	r9, r1, r8
    d364:	01c50100 	biceq	r0, r5, r0, lsl #2
    d368:	000000cf 	andeq	r0, r0, pc, asr #1
    d36c:	00649102 	rsbeq	r9, r4, r2, lsl #2
    d370:	00037300 	andeq	r7, r3, r0, lsl #6
    d374:	85000400 	strhi	r0, [r0, #-1024]	; 0xfffffc00
    d378:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    d37c:	00001901 	andeq	r1, r0, r1, lsl #18
    d380:	490d0100 	stmdbmi	sp, {r8}
    d384:	604c0000 	subvs	r0, ip, r0
    d388:	07480002 	strbeq	r0, [r8, -r2]
    d38c:	469b0000 	ldrmi	r0, [fp], r0
    d390:	04020000 	streq	r0, [r2], #-0
    d394:	00071d07 	andeq	r1, r7, r7, lsl #26
    d398:	02040300 	andeq	r0, r4, #0, 6
    d39c:	072a0801 	streq	r0, [sl, -r1, lsl #16]!
    d3a0:	75040000 	strvc	r0, [r4, #-0]
    d3a4:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    d3a8:	00003c18 	andeq	r3, r0, r8, lsl ip
    d3ac:	07020200 	streq	r0, [r2, -r0, lsl #4]
    d3b0:	00000132 	andeq	r0, r0, r2, lsr r1
    d3b4:	32337504 	eorscc	r7, r3, #4, 10	; 0x1000000
    d3b8:	21190200 	tstcs	r9, r0, lsl #4
    d3bc:	02000000 	andeq	r0, r0, #0
    d3c0:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
    d3c4:	01020000 	mrseq	r0, (UNDEF: 2)
    d3c8:	00073306 	andeq	r3, r7, r6, lsl #6
    d3cc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    d3d0:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    d3d4:	69050405 	stmdbvs	r5, {r0, r2, sl}
    d3d8:	0600746e 	streq	r7, [r0], -lr, ror #8
    d3dc:	0000081f 	andeq	r0, r0, pc, lsl r8
    d3e0:	00752402 	rsbseq	r2, r5, r2, lsl #8
    d3e4:	04020000 	streq	r0, [r2], #-0
    d3e8:	00071807 	andeq	r1, r7, r7, lsl #16
    d3ec:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    d3f0:	00000798 	muleq	r0, r8, r7
    d3f4:	00497f07 	subeq	r7, r9, r7, lsl #30
    d3f8:	28180100 	ldmdacs	r8, {r8}
    d3fc:	4c000000 	stcmi	0, cr0, [r0], {-0}
    d400:	90000260 	andls	r0, r0, r0, ror #4
    d404:	01000000 	mrseq	r0, (UNDEF: 0)
    d408:	0000d39c 	muleq	r0, ip, r3
    d40c:	26530800 	ldrbcs	r0, [r3], -r0, lsl #16
    d410:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    d414:	00000028 	andeq	r0, r0, r8, lsr #32
    d418:	08649102 	stmdaeq	r4!, {r1, r8, ip, pc}^
    d41c:	00002a5c 	andeq	r2, r0, ip, asr sl
    d420:	00631801 	rsbeq	r1, r3, r1, lsl #16
    d424:	91020000 	mrsls	r0, (UNDEF: 2)
    d428:	4c0e0860 	stcmi	8, cr0, [lr], {96}	; 0x60
    d42c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    d430:	0000006a 	andeq	r0, r0, sl, rrx
    d434:	095c9102 	ldmdbeq	ip, {r1, r8, ip, pc}^
    d438:	1a010070 	bne	4d600 <mailbuffer+0x12510>
    d43c:	000000d3 	ldrdeq	r0, [r0], -r3
    d440:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    d444:	0055040a 	subseq	r0, r5, sl, lsl #8
    d448:	b1070000 	mrslt	r0, (UNDEF: 7)
    d44c:	01000049 	tsteq	r0, r9, asr #32
    d450:	00002824 	andeq	r2, r0, r4, lsr #16
    d454:	0260dc00 	rsbeq	sp, r0, #0, 24
    d458:	0000a000 	andeq	sl, r0, r0
    d45c:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    d460:	08000001 	stmdaeq	r0, {r0}
    d464:	0000475d 	andeq	r4, r0, sp, asr r7
    d468:	00282401 	eoreq	r2, r8, r1, lsl #8
    d46c:	91020000 	mrsls	r0, (UNDEF: 2)
    d470:	49cd0864 	stmibmi	sp, {r2, r5, r6, fp}^
    d474:	24010000 	strcs	r0, [r1], #-0
    d478:	00000137 	andeq	r0, r0, r7, lsr r1
    d47c:	08609102 	stmdaeq	r0!, {r1, r8, ip, pc}^
    d480:	00004c0e 	andeq	r4, r0, lr, lsl #24
    d484:	006a2401 	rsbeq	r2, sl, r1, lsl #8
    d488:	91020000 	mrsls	r0, (UNDEF: 2)
    d48c:	6470095c 	ldrbtvs	r0, [r0], #-2396	; 0xfffff6a4
    d490:	d3260100 	teqle	r6, #0, 2
    d494:	02000000 	andeq	r0, r0, #0
    d498:	70096c91 	mulvc	r9, r1, ip
    d49c:	27010073 	smlsdxcs	r1, r3, r0, r0
    d4a0:	000000d3 	ldrdeq	r0, [r0], -r3
    d4a4:	00689102 	rsbeq	r9, r8, r2, lsl #2
    d4a8:	013d040a 	teqeq	sp, sl, lsl #8
    d4ac:	070b0000 	streq	r0, [fp, -r0]
    d4b0:	000048c9 	andeq	r4, r0, r9, asr #17
    d4b4:	00633101 	rsbeq	r3, r3, r1, lsl #2
    d4b8:	617c0000 	cmnvs	ip, r0
    d4bc:	00d80002 	sbcseq	r0, r8, r2
    d4c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    d4c4:	0000019c 	muleq	r0, ip, r1
    d4c8:	0048d508 	subeq	sp, r8, r8, lsl #10
    d4cc:	37310100 	ldrcc	r0, [r1, -r0, lsl #2]!
    d4d0:	02000001 	andeq	r0, r0, #1
    d4d4:	de086491 	mcrle	4, 0, r6, cr8, cr1, {4}
    d4d8:	01000048 	tsteq	r0, r8, asr #32
    d4dc:	00013731 	andeq	r3, r1, r1, lsr r7
    d4e0:	60910200 	addsvs	r0, r1, r0, lsl #4
    d4e4:	004c0e08 	subeq	r0, ip, r8, lsl #28
    d4e8:	6a310100 	bvs	c4d8f0 <mailbuffer+0xc12800>
    d4ec:	02000000 	andeq	r0, r0, #0
    d4f0:	70095c91 	mulvc	r9, r1, ip
    d4f4:	33010031 	movwcc	r0, #4145	; 0x1031
    d4f8:	0000019c 	muleq	r0, ip, r1
    d4fc:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    d500:	01003270 	tsteq	r0, r0, ror r2
    d504:	00019c34 	andeq	r9, r1, r4, lsr ip
    d508:	68910200 	ldmvs	r1, {r9}
    d50c:	a2040a00 	andge	r0, r4, #0, 20
    d510:	0c000001 	stceq	0, cr0, [r0], {1}
    d514:	0000002a 	andeq	r0, r0, sl, lsr #32
    d518:	0049a507 	subeq	sl, r9, r7, lsl #10
    d51c:	6a4c0100 	bvs	130d924 <mailbuffer+0x12d2834>
    d520:	54000000 	strpl	r0, [r0], #-0
    d524:	80000262 	andhi	r0, r0, r2, ror #4
    d528:	01000000 	mrseq	r0, (UNDEF: 0)
    d52c:	0001dd9c 	muleq	r1, ip, sp
    d530:	2a970800 	bcs	fe5cf538 <_estack+0xf65bf538>
    d534:	4c010000 	stcmi	0, cr0, [r1], {-0}
    d538:	000001dd 	ldrdeq	r0, [r0], -sp
    d53c:	0d649102 	stfeqp	f1, [r4, #-8]!
    d540:	000030de 	ldrdeq	r3, [r0], -lr
    d544:	006a4e01 	rsbeq	r4, sl, r1, lsl #28
    d548:	91020000 	mrsls	r0, (UNDEF: 2)
    d54c:	040a006c 	streq	r0, [sl], #-108	; 0xffffff94
    d550:	000001e3 	andeq	r0, r0, r3, ror #3
    d554:	0000550c 	andeq	r5, r0, ip, lsl #10
    d558:	48b00700 	ldmmi	r0!, {r8, r9, sl}
    d55c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    d560:	00000063 	andeq	r0, r0, r3, rrx
    d564:	000262d4 	ldrdeq	r6, [r2], -r4
    d568:	00000130 	andeq	r0, r0, r0, lsr r1
    d56c:	021e9c01 	andseq	r9, lr, #256	; 0x100
    d570:	ef080000 	svc	0x00080000
    d574:	01000048 	tsteq	r0, r8, asr #32
    d578:	0001dd58 	andeq	sp, r1, r8, asr sp
    d57c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    d580:	0048f808 	subeq	pc, r8, r8, lsl #16
    d584:	dd580100 	ldflee	f0, [r8, #-0]
    d588:	02000001 	andeq	r0, r0, #1
    d58c:	07006891 			; <UNDEFINED> instruction: 0x07006891
    d590:	00004901 	andeq	r4, r0, r1, lsl #18
    d594:	00d37601 	sbcseq	r7, r3, r1, lsl #12
    d598:	64040000 	strvs	r0, [r4], #-0
    d59c:	009c0002 	addseq	r0, ip, r2
    d5a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    d5a4:	00000260 	andeq	r0, r0, r0, ror #4
    d5a8:	00475d08 	subeq	r5, r7, r8, lsl #26
    d5ac:	d3760100 	cmnle	r6, #0, 2
    d5b0:	02000000 	andeq	r0, r0, #0
    d5b4:	cd086491 	cfstrsgt	mvf6, [r8, #-580]	; 0xfffffdbc
    d5b8:	01000049 	tsteq	r0, r9, asr #32
    d5bc:	0001dd76 	andeq	sp, r1, r6, ror sp
    d5c0:	60910200 	addsvs	r0, r1, r0, lsl #4
    d5c4:	01007009 	tsteq	r0, r9
    d5c8:	0000d378 	andeq	sp, r0, r8, ror r3
    d5cc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    d5d0:	48bc0700 	ldmmi	ip!, {r8, r9, sl}
    d5d4:	84010000 	strhi	r0, [r1], #-0
    d5d8:	000000d3 	ldrdeq	r0, [r0], -r3
    d5dc:	000264a0 	andeq	r6, r2, r0, lsr #9
    d5e0:	000000c8 	andeq	r0, r0, r8, asr #1
    d5e4:	02b29c01 	adcseq	r9, r2, #256	; 0x100
    d5e8:	5d080000 	stcpl	0, cr0, [r8, #-0]
    d5ec:	01000047 	tsteq	r0, r7, asr #32
    d5f0:	0000d384 	andeq	sp, r0, r4, lsl #7
    d5f4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    d5f8:	0049cd08 	subeq	ip, r9, r8, lsl #26
    d5fc:	dd840100 	stfles	f0, [r4]
    d600:	02000001 	andeq	r0, r0, #1
    d604:	c5086091 	strgt	r6, [r8, #-145]	; 0xffffff6f
    d608:	01000049 	tsteq	r0, r9, asr #32
    d60c:	00006a84 	andeq	r6, r0, r4, lsl #21
    d610:	5c910200 	lfmpl	f0, 4, [r1], {0}
    d614:	003b3a0d 	eorseq	r3, fp, sp, lsl #20
    d618:	d3860100 	orrle	r0, r6, #0, 2
    d61c:	02000000 	andeq	r0, r0, #0
    d620:	07006c91 			; <UNDEFINED> instruction: 0x07006c91
    d624:	00004973 	andeq	r4, r0, r3, ror r9
    d628:	00d39b01 	sbcseq	r9, r3, r1, lsl #22
    d62c:	65680000 	strbvs	r0, [r8, #-0]!
    d630:	00bc0002 	adcseq	r0, ip, r2
    d634:	9c010000 	stcls	0, cr0, [r1], {-0}
    d638:	000002f4 	strdeq	r0, [r0], -r4
    d63c:	00475d08 	subeq	r5, r7, r8, lsl #26
    d640:	d39b0100 	orrsle	r0, fp, #0, 2
    d644:	02000000 	andeq	r0, r0, #0
    d648:	cd086491 	cfstrsgt	mvf6, [r8, #-580]	; 0xfffffdbc
    d64c:	01000049 	tsteq	r0, r9, asr #32
    d650:	0001dd9b 	muleq	r1, fp, sp
    d654:	60910200 	addsvs	r0, r1, r0, lsl #4
    d658:	01007009 	tsteq	r0, r9
    d65c:	0000d39d 	muleq	r0, sp, r3
    d660:	6c910200 	lfmvs	f0, 4, [r1], {0}
    d664:	49650700 	stmdbmi	r5!, {r8, r9, sl}^
    d668:	b0010000 	andlt	r0, r1, r0
    d66c:	00000063 	andeq	r0, r0, r3, rrx
    d670:	00026624 	andeq	r6, r2, r4, lsr #12
    d674:	00000078 	andeq	r0, r0, r8, ror r0
    d678:	032a9c01 	teqeq	sl, #256	; 0x100
    d67c:	e7080000 	str	r0, [r8, -r0]
    d680:	01000048 	tsteq	r0, r8, asr #32
    d684:	000055b0 			; <UNDEFINED> instruction: 0x000055b0
    d688:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    d68c:	0030de0d 	eorseq	sp, r0, sp, lsl #28
    d690:	63b20100 			; <UNDEFINED> instruction: 0x63b20100
    d694:	02000000 	andeq	r0, r0, #0
    d698:	07006c91 			; <UNDEFINED> instruction: 0x07006c91
    d69c:	0000498b 	andeq	r4, r0, fp, lsl #19
    d6a0:	0031bc01 	eorseq	fp, r1, r1, lsl #24
    d6a4:	669c0000 	ldrvs	r0, [ip], r0
    d6a8:	00780002 	rsbseq	r0, r8, r2
    d6ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    d6b0:	00000352 	andeq	r0, r0, r2, asr r3
    d6b4:	002d6408 	eoreq	r6, sp, r8, lsl #8
    d6b8:	31bc0100 			; <UNDEFINED> instruction: 0x31bc0100
    d6bc:	02000000 	andeq	r0, r0, #0
    d6c0:	0e006e91 	mcreq	14, 0, r6, cr0, cr1, {4}
    d6c4:	00004998 	muleq	r0, r8, r9
    d6c8:	0043c201 	subeq	ip, r3, r1, lsl #4
    d6cc:	67140000 	ldrvs	r0, [r4, -r0]
    d6d0:	00800002 	addeq	r0, r0, r2
    d6d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    d6d8:	0049bd08 	subeq	fp, r9, r8, lsl #26
    d6dc:	43c20100 	bicmi	r0, r2, #0, 2
    d6e0:	02000000 	andeq	r0, r0, #0
    d6e4:	00006c91 	muleq	r0, r1, ip
    d6e8:	0000142a 	andeq	r1, r0, sl, lsr #8
    d6ec:	23460004 	movtcs	r0, #24580	; 0x6004
    d6f0:	01040000 	mrseq	r0, (UNDEF: 4)
    d6f4:	00000019 	andeq	r0, r0, r9, lsl r0
    d6f8:	004e7301 	subeq	r7, lr, r1, lsl #6
    d6fc:	000ddc00 	andeq	sp, sp, r0, lsl #24
    d700:	02679400 	rsbeq	r9, r7, #0, 8
    d704:	0014fc00 	andseq	pc, r4, r0, lsl #24
    d708:	00480200 	subeq	r0, r8, r0, lsl #4
    d70c:	02010200 	andeq	r0, r1, #0, 4
    d710:	0000401b 	andeq	r4, r0, fp, lsl r0
    d714:	25460300 	strbcs	r0, [r6, #-768]	; 0xfffffd00
    d718:	03000000 	movweq	r0, #0
    d71c:	00002b28 	andeq	r2, r0, r8, lsr #22
    d720:	28bb0301 	ldmcs	fp!, {r0, r8, r9}
    d724:	00020000 	andeq	r0, r2, r0
    d728:	00221304 	eoreq	r1, r2, r4, lsl #6
    d72c:	25220200 	strcs	r0, [r2, #-512]!	; 0xfffffe00
    d730:	02000000 	andeq	r0, r0, #0
    d734:	6c2b0201 	sfmvs	f0, 4, [fp], #-4
    d738:	03000000 	movweq	r0, #0
    d73c:	0000259a 	muleq	r0, sl, r5
    d740:	2c490300 	mcrrcs	3, 0, r0, r9, cr0
    d744:	03010000 	movweq	r0, #4096	; 0x1000
    d748:	00002221 	andeq	r2, r0, r1, lsr #4
    d74c:	265b0302 	ldrbcs	r0, [fp], -r2, lsl #6
    d750:	00030000 	andeq	r0, r3, r0
    d754:	00242104 	eoreq	r2, r4, r4, lsl #2
    d758:	4b310200 	blmi	c4df60 <mailbuffer+0xc12e70>
    d75c:	05000000 	streq	r0, [r0, #-0]
    d760:	bc340208 	lfmlt	f0, 4, [r4], #-32	; 0xffffffe0
    d764:	06000000 	streq	r0, [r0], -r0
    d768:	00002276 	andeq	r2, r0, r6, ror r2
    d76c:	00bc3602 	adcseq	r3, ip, r2, lsl #12
    d770:	06000000 	streq	r0, [r0], -r0
    d774:	000027d3 	ldrdeq	r2, [r0], -r3
    d778:	00bc3702 	adcseq	r3, ip, r2, lsl #14
    d77c:	06010000 	streq	r0, [r1], -r0
    d780:	000021f3 	strdeq	r2, [r0], -r3
    d784:	00c33802 	sbceq	r3, r3, r2, lsl #16
    d788:	06020000 	streq	r0, [r2], -r0
    d78c:	00001f0c 	andeq	r1, r0, ip, lsl #30
    d790:	00c33902 	sbceq	r3, r3, r2, lsl #18
    d794:	06040000 	streq	r0, [r4], -r0
    d798:	00002bb3 			; <UNDEFINED> instruction: 0x00002bb3
    d79c:	00c33a02 	sbceq	r3, r3, r2, lsl #20
    d7a0:	00060000 	andeq	r0, r6, r0
    d7a4:	2a080107 	bcs	20dbc8 <mailbuffer+0x1d2ad8>
    d7a8:	07000007 	streq	r0, [r0, -r7]
    d7ac:	01320702 	teqeq	r2, r2, lsl #14
    d7b0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    d7b4:	02000022 	andeq	r0, r0, #34	; 0x22
    d7b8:	0000773d 	andeq	r7, r0, sp, lsr r7
    d7bc:	02120500 	andseq	r0, r2, #0, 10
    d7c0:	0001865c 	andeq	r8, r1, ip, asr r6
    d7c4:	29a80600 	stmibcs	r8!, {r9, sl}
    d7c8:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    d7cc:	000000bc 	strheq	r0, [r0], -ip
    d7d0:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    d7d4:	5f020000 	svcpl	0x00020000
    d7d8:	000000bc 	strheq	r0, [r0], -ip
    d7dc:	228c0601 	addcs	r0, ip, #1048576	; 0x100000
    d7e0:	60020000 	andvs	r0, r2, r0
    d7e4:	000000c3 	andeq	r0, r0, r3, asr #1
    d7e8:	21280602 	teqcs	r8, r2, lsl #12
    d7ec:	61020000 	mrsvs	r0, (UNDEF: 2)
    d7f0:	000000bc 	strheq	r0, [r0], -ip
    d7f4:	22f60604 	rscscs	r0, r6, #4, 12	; 0x400000
    d7f8:	62020000 	andvs	r0, r2, #0
    d7fc:	000000bc 	strheq	r0, [r0], -ip
    d800:	279f0605 	ldrcs	r0, [pc, r5, lsl #12]
    d804:	63020000 	movwvs	r0, #8192	; 0x2000
    d808:	000000bc 	strheq	r0, [r0], -ip
    d80c:	25e70606 	strbcs	r0, [r7, #1542]!	; 0x606
    d810:	64020000 	strvs	r0, [r2], #-0
    d814:	000000bc 	strheq	r0, [r0], -ip
    d818:	2c560607 	mrrccs	6, 0, r0, r6, cr7
    d81c:	66020000 	strvs	r0, [r2], -r0
    d820:	000000c3 	andeq	r0, r0, r3, asr #1
    d824:	22440608 	subcs	r0, r4, #8, 12	; 0x800000
    d828:	67020000 	strvs	r0, [r2, -r0]
    d82c:	000000c3 	andeq	r0, r0, r3, asr #1
    d830:	2135060a 	teqcs	r5, sl, lsl #12
    d834:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
    d838:	000000c3 	andeq	r0, r0, r3, asr #1
    d83c:	21fa060c 	mvnscs	r0, ip, lsl #12
    d840:	69020000 	stmdbvs	r2, {}	; <UNPREDICTABLE>
    d844:	000000bc 	strheq	r0, [r0], -ip
    d848:	233b060e 	teqcs	fp, #14680064	; 0xe00000
    d84c:	6a020000 	bvs	8d854 <mailbuffer+0x52764>
    d850:	000000bc 	strheq	r0, [r0], -ip
    d854:	2322060f 	teqcs	r2, #15728640	; 0xf00000
    d858:	6b020000 	blvs	8d860 <mailbuffer+0x52770>
    d85c:	000000bc 	strheq	r0, [r0], -ip
    d860:	28a80610 	stmiacs	r8!, {r4, r9, sl}
    d864:	6c020000 	stcvs	0, cr0, [r2], {-0}
    d868:	000000bc 	strheq	r0, [r0], -ip
    d86c:	c7040011 	smladgt	r4, r1, r0, r0
    d870:	02000028 	andeq	r0, r0, #40	; 0x28
    d874:	0000d56e 	andeq	sp, r0, lr, ror #10
    d878:	02090500 	andeq	r0, r9, #0, 10
    d87c:	0001fa71 	andeq	pc, r1, r1, ror sl	; <UNPREDICTABLE>
    d880:	29a80600 	stmibcs	r8!, {r9, sl}
    d884:	73020000 	movwvc	r0, #8192	; 0x2000
    d888:	000000bc 	strheq	r0, [r0], -ip
    d88c:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    d890:	74020000 	strvc	r0, [r2], #-0
    d894:	000000bc 	strheq	r0, [r0], -ip
    d898:	20880601 	addcs	r0, r8, r1, lsl #12
    d89c:	75020000 	strvc	r0, [r2, #-0]
    d8a0:	000000c3 	andeq	r0, r0, r3, asr #1
    d8a4:	29b00602 	ldmibcs	r0!, {r1, r9, sl}
    d8a8:	76020000 	strvc	r0, [r2], -r0
    d8ac:	000000bc 	strheq	r0, [r0], -ip
    d8b0:	2a4f0604 	bcs	13cf0c8 <mailbuffer+0x1393fd8>
    d8b4:	77020000 	strvc	r0, [r2, -r0]
    d8b8:	000000bc 	strheq	r0, [r0], -ip
    d8bc:	27900605 	ldrcs	r0, [r0, r5, lsl #12]
    d8c0:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
    d8c4:	000000bc 	strheq	r0, [r0], -ip
    d8c8:	258d0606 	strcs	r0, [sp, #1542]	; 0x606
    d8cc:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
    d8d0:	000000bc 	strheq	r0, [r0], -ip
    d8d4:	2ab30607 	bcs	feccf0f8 <_estack+0xf6cbf0f8>
    d8d8:	7a020000 	bvc	8d8e0 <mailbuffer+0x527f0>
    d8dc:	000000bc 	strheq	r0, [r0], -ip
    d8e0:	06040008 	streq	r0, [r4], -r8
    d8e4:	02000023 	andeq	r0, r0, #35	; 0x23
    d8e8:	0001917c 	andeq	r9, r1, ip, ror r1
    d8ec:	02090500 	andeq	r0, r9, #0, 10
    d8f0:	00027a7f 	andeq	r7, r2, pc, ror sl
    d8f4:	29a80600 	stmibcs	r8!, {r9, sl}
    d8f8:	81020000 	mrshi	r0, (UNDEF: 2)
    d8fc:	000000bc 	strheq	r0, [r0], -ip
    d900:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    d904:	82020000 	andhi	r0, r2, #0
    d908:	000000bc 	strheq	r0, [r0], -ip
    d90c:	20170601 	andscs	r0, r7, r1, lsl #12
    d910:	83020000 	movwhi	r0, #8192	; 0x2000
    d914:	000000bc 	strheq	r0, [r0], -ip
    d918:	20410602 	subcs	r0, r1, r2, lsl #12
    d91c:	84020000 	strhi	r0, [r2], #-0
    d920:	000000bc 	strheq	r0, [r0], -ip
    d924:	27690603 	strbcs	r0, [r9, -r3, lsl #12]!
    d928:	85020000 	strhi	r0, [r2, #-0]
    d92c:	000000bc 	strheq	r0, [r0], -ip
    d930:	27210604 	strcs	r0, [r1, -r4, lsl #12]!
    d934:	86020000 	strhi	r0, [r2], -r0
    d938:	000000bc 	strheq	r0, [r0], -ip
    d93c:	1f290605 	svcne	0x00290605
    d940:	87020000 	strhi	r0, [r2, -r0]
    d944:	000000bc 	strheq	r0, [r0], -ip
    d948:	28950606 	ldmcs	r5, {r1, r2, r9, sl}
    d94c:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    d950:	000000bc 	strheq	r0, [r0], -ip
    d954:	27160607 	ldrcs	r0, [r6, -r7, lsl #12]
    d958:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    d95c:	000000bc 	strheq	r0, [r0], -ip
    d960:	e4040008 	str	r0, [r4], #-8
    d964:	02000027 	andeq	r0, r0, #39	; 0x27
    d968:	0002058b 	andeq	r0, r2, fp, lsl #11
    d96c:	02070500 	andeq	r0, r7, #0, 10
    d970:	0002d68e 	andeq	sp, r2, lr, lsl #13
    d974:	29a80600 	stmibcs	r8!, {r9, sl}
    d978:	90020000 	andls	r0, r2, r0
    d97c:	000000bc 	strheq	r0, [r0], -ip
    d980:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    d984:	91020000 	mrsls	r0, (UNDEF: 2)
    d988:	000000bc 	strheq	r0, [r0], -ip
    d98c:	26c90601 	strbcs	r0, [r9], r1, lsl #12
    d990:	92020000 	andls	r0, r2, #0
    d994:	000000bc 	strheq	r0, [r0], -ip
    d998:	258d0602 	strcs	r0, [sp, #1538]	; 0x602
    d99c:	93020000 	movwls	r0, #8192	; 0x2000
    d9a0:	000000bc 	strheq	r0, [r0], -ip
    d9a4:	29600603 	stmdbcs	r0!, {r0, r1, r9, sl}^
    d9a8:	94020000 	strls	r0, [r2], #-0
    d9ac:	000000c3 	andeq	r0, r0, r3, asr #1
    d9b0:	25220604 	strcs	r0, [r2, #-1540]!	; 0xfffff9fc
    d9b4:	95020000 	strls	r0, [r2, #-0]
    d9b8:	000000bc 	strheq	r0, [r0], -ip
    d9bc:	da040006 	ble	10d9dc <mailbuffer+0xd28ec>
    d9c0:	0200002b 	andeq	r0, r0, #43	; 0x2b
    d9c4:	00028597 	muleq	r2, r7, r5
    d9c8:	02020500 	andeq	r0, r2, #0, 10
    d9cc:	0003029c 	muleq	r3, ip, r2
    d9d0:	29a80600 	stmibcs	r8!, {r9, sl}
    d9d4:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    d9d8:	000000bc 	strheq	r0, [r0], -ip
    d9dc:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    d9e0:	9f020000 	svcls	0x00020000
    d9e4:	000000bc 	strheq	r0, [r0], -ip
    d9e8:	09080001 	stmdbeq	r8, {r0}
    d9ec:	03379a02 	teqeq	r7, #8192	; 0x2000
    d9f0:	02090000 	andeq	r0, r9, #0
    d9f4:	0200003c 	andeq	r0, r0, #60	; 0x3c
    d9f8:	0002e1a1 	andeq	lr, r2, r1, lsr #3
    d9fc:	27910900 	ldrcs	r0, [r1, r0, lsl #18]
    da00:	a3020000 	movwge	r0, #8192	; 0x2000
    da04:	000001fa 	strdeq	r0, [r0], -sl
    da08:	003c4c09 	eorseq	r4, ip, r9, lsl #24
    da0c:	7aa40200 	bvc	fe90e214 <_estack+0xf68fe214>
    da10:	09000002 	stmdbeq	r0, {r1}
    da14:	00002584 	andeq	r2, r0, r4, lsl #11
    da18:	02d6a502 	sbcseq	sl, r6, #8388608	; 0x800000
    da1c:	04000000 	streq	r0, [r0], #-0
    da20:	000026fc 	strdeq	r2, [r0], -ip
    da24:	0302a702 	movweq	sl, #9986	; 0x2702
    da28:	660a0000 	strvs	r0, [sl], -r0
    da2c:	02000024 	andeq	r0, r0, #36	; 0x24
    da30:	0373a902 	cmneq	r3, #32768	; 0x8000
    da34:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    da38:	02000029 	andeq	r0, r0, #41	; 0x29
    da3c:	0000bcab 	andeq	fp, r0, fp, lsr #25
    da40:	2b060000 	blcs	18da48 <mailbuffer+0x152958>
    da44:	02000024 	andeq	r0, r0, #36	; 0x24
    da48:	0000bcac 	andeq	fp, r0, ip, lsr #25
    da4c:	74060100 	strvc	r0, [r6], #-256	; 0xffffff00
    da50:	02000020 	andeq	r0, r0, #32
    da54:	000373ad 	andeq	r7, r3, sp, lsr #7
    da58:	0b000200 	bleq	e260 <__module_entries_end+0x6180>
    da5c:	000000c3 	andeq	r0, r0, r3, asr #1
    da60:	00000382 	andeq	r0, r0, r2, lsl #7
    da64:	0003820c 	andeq	r8, r3, ip, lsl #4
    da68:	04070000 	streq	r0, [r7], #-0
    da6c:	0001d407 	andeq	sp, r1, r7, lsl #8
    da70:	24660400 	strbtcs	r0, [r6], #-1024	; 0xfffffc00
    da74:	af020000 	svcge	0x00020000
    da78:	00000342 	andeq	r0, r0, r2, asr #6
    da7c:	0038750d 	eorseq	r7, r8, sp, lsl #10
    da80:	00bc1703 	adcseq	r1, ip, r3, lsl #14
    da84:	750d0000 	strvc	r0, [sp, #-0]
    da88:	03003233 	movweq	r3, #563	; 0x233
    da8c:	0003a919 	andeq	sl, r3, r9, lsl r9
    da90:	07040700 	streq	r0, [r4, -r0, lsl #14]
    da94:	0000071d 	andeq	r0, r0, sp, lsl r7
    da98:	13070807 	movwne	r0, #30727	; 0x7807
    da9c:	07000007 	streq	r0, [r0, -r7]
    daa0:	07330601 	ldreq	r0, [r3, -r1, lsl #12]!
    daa4:	02070000 	andeq	r0, r7, #0
    daa8:	0007b805 	andeq	fp, r7, r5, lsl #16
    daac:	05040e00 	streq	r0, [r4, #-3584]	; 0xfffff200
    dab0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    dab4:	00293004 	eoreq	r3, r9, r4
    dab8:	c5200300 	strgt	r0, [r0, #-768]!	; 0xfffffd00
    dabc:	07000003 	streq	r0, [r0, -r3]
    dac0:	07180704 	ldreq	r0, [r8, -r4, lsl #14]
    dac4:	04070000 	streq	r0, [r7], #-0
    dac8:	00079805 	andeq	r9, r7, r5, lsl #16
    dacc:	25520a00 	ldrbcs	r0, [r2, #-2560]	; 0xfffff600
    dad0:	04180000 	ldreq	r0, [r8], #-0
    dad4:	00043a1e 	andeq	r3, r4, lr, lsl sl
    dad8:	26510600 	ldrbcs	r0, [r1], -r0, lsl #12
    dadc:	20040000 	andcs	r0, r4, r0
    dae0:	0000043a 	andeq	r0, r0, sl, lsr r4
    dae4:	2c0c0600 	stccs	6, cr0, [ip], {-0}
    dae8:	21040000 	mrscs	r0, (UNDEF: 4)
    daec:	000003a9 	andeq	r0, r0, r9, lsr #7
    daf0:	268a0604 	strcs	r0, [sl], r4, lsl #12
    daf4:	22040000 	andcs	r0, r4, #0
    daf8:	000003cc 	andeq	r0, r0, ip, asr #7
    dafc:	21690608 	cmncs	r9, r8, lsl #12
    db00:	23040000 	movwcs	r0, #16384	; 0x4000
    db04:	0000043a 	andeq	r0, r0, sl, lsr r4
    db08:	277d060c 	ldrbcs	r0, [sp, -ip, lsl #12]!
    db0c:	24040000 	strcs	r0, [r4], #-0
    db10:	0000043a 	andeq	r0, r0, sl, lsr r4
    db14:	2bbb0610 	blcs	feecf35c <_estack+0xf6ebf35c>
    db18:	25040000 	strcs	r0, [r4, #-0]
    db1c:	0000043a 	andeq	r0, r0, sl, lsr r4
    db20:	040f0014 	streq	r0, [pc], #-20	; db28 <__module_entries_end+0x5a48>
    db24:	00000440 	andeq	r0, r0, r0, asr #8
    db28:	00033710 	andeq	r3, r3, r0, lsl r7
    db2c:	25520400 	ldrbcs	r0, [r2, #-1024]	; 0xfffffc00
    db30:	27040000 	strcs	r0, [r4, -r0]
    db34:	000003e5 	andeq	r0, r0, r5, ror #7
    db38:	310a0411 	tstcc	sl, r1, lsl r4
    db3c:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
    db40:	04831f05 	streq	r1, [r3], #3845	; 0xf05
    db44:	51060000 	mrspl	r0, (UNDEF: 6)
    db48:	05000026 	streq	r0, [r0, #-38]	; 0xffffffda
    db4c:	00048321 	andeq	r8, r4, r1, lsr #6
    db50:	f1060000 	cps	#0
    db54:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    db58:	0003a922 	andeq	sl, r3, r2, lsr #18
    db5c:	85060400 	strhi	r0, [r6, #-1024]	; 0xfffffc00
    db60:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
    db64:	00048323 	andeq	r8, r4, r3, lsr #6
    db68:	0f000800 	svceq	0x00000800
    db6c:	0003b704 	andeq	fp, r3, r4, lsl #14
    db70:	26310400 	ldrtcs	r0, [r1], -r0, lsl #8
    db74:	25050000 	strcs	r0, [r5, #-0]
    db78:	00000452 	andeq	r0, r0, r2, asr r4
    db7c:	00253b0a 	eoreq	r3, r5, sl, lsl #22
    db80:	21060c00 	tstcs	r6, r0, lsl #24
    db84:	000004c5 	andeq	r0, r0, r5, asr #9
    db88:	0020e006 	eoreq	lr, r0, r6
    db8c:	62230600 	eorvs	r0, r3, #0, 12
    db90:	00000005 	andeq	r0, r0, r5
    db94:	002c3c06 	eoreq	r3, ip, r6, lsl #24
    db98:	68250600 	stmdavs	r5!, {r9, sl}
    db9c:	04000005 	streq	r0, [r0], #-5
    dba0:	002a9506 	eoreq	r9, sl, r6, lsl #10
    dba4:	6e270600 	cfmadda32vs	mvax0, mvax0, mvfx7, mvfx0
    dba8:	08000005 	stmdaeq	r0, {r0, r2}
    dbac:	2ad10a00 	bcs	ff4503b4 <_estack+0xf74403b4>
    dbb0:	07380000 	ldreq	r0, [r8, -r0]!
    dbb4:	0005622d 	andeq	r6, r5, sp, lsr #4
    dbb8:	5a280600 	bpl	a0f3c0 <mailbuffer+0x9d42d0>
    dbbc:	2f070000 	svccs	0x00070000
    dbc0:	0000058e 	andeq	r0, r0, lr, lsl #11
    dbc4:	24430600 	strbcs	r0, [r3], #-1536	; 0xfffffa00
    dbc8:	31070000 	mrscc	r0, (UNDEF: 7)
    dbcc:	000005dd 	ldrdeq	r0, [r0], -sp
    dbd0:	207c0604 	rsbscs	r0, ip, r4, lsl #12
    dbd4:	33070000 	movwcc	r0, #28672	; 0x7000
    dbd8:	00000394 	muleq	r0, r4, r3
    dbdc:	243b0608 	ldrtcs	r0, [fp], #-1544	; 0xfffff9f8
    dbe0:	34070000 	strcc	r0, [r7], #-0
    dbe4:	0000006c 	andeq	r0, r0, ip, rrx
    dbe8:	22930609 	addscs	r0, r3, #9437184	; 0x900000
    dbec:	35070000 	strcc	r0, [r7, #-0]
    dbf0:	00000644 	andeq	r0, r0, r4, asr #12
    dbf4:	1f7a060c 	svcne	0x007a060c
    dbf8:	37070000 	strcc	r0, [r7, -r0]
    dbfc:	00000394 	muleq	r0, r4, r3
    dc00:	26a90610 	ssatcs	r0, #10, r0, lsl #12
    dc04:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    dc08:	00000394 	muleq	r0, r4, r3
    dc0c:	296f0611 	stmdbcs	pc!, {r0, r4, r9, sl}^	; <UNPREDICTABLE>
    dc10:	3a070000 	bcc	1cdc18 <mailbuffer+0x192b28>
    dc14:	0000064a 	andeq	r0, r0, sl, asr #12
    dc18:	1fb20614 	svcne	0x00b20614
    dc1c:	3b070000 	blcc	1cdc24 <mailbuffer+0x192b34>
    dc20:	00000650 	andeq	r0, r0, r0, asr r6
    dc24:	27fc0618 			; <UNDEFINED> instruction: 0x27fc0618
    dc28:	3d070000 	stccc	0, cr0, [r7, #-0]
    dc2c:	00000656 	andeq	r0, r0, r6, asr r6
    dc30:	2b34061c 	blcs	d0f4a8 <mailbuffer+0xcd43b8>
    dc34:	3f070000 	svccc	0x00070000
    dc38:	00000574 	andeq	r0, r0, r4, ror r5
    dc3c:	21780620 	cmncs	r8, r0, lsr #12
    dc40:	40070000 	andmi	r0, r7, r0
    dc44:	00000574 	andeq	r0, r0, r4, ror r5
    dc48:	040f002c 	streq	r0, [pc], #-44	; dc50 <__module_entries_end+0x5b70>
    dc4c:	000004c5 	andeq	r0, r0, r5, asr #9
    dc50:	0389040f 	orreq	r0, r9, #251658240	; 0xf000000
    dc54:	040f0000 	streq	r0, [pc], #-0	; dc5c <__module_entries_end+0x5b7c>
    dc58:	00000489 	andeq	r0, r0, r9, lsl #9
    dc5c:	00253b04 	eoreq	r3, r5, r4, lsl #22
    dc60:	94290600 	strtls	r0, [r9], #-1536	; 0xfffffa00
    dc64:	12000004 	andne	r0, r0, #4
    dc68:	000003cc 	andeq	r0, r0, ip, asr #7
    dc6c:	0000058e 	andeq	r0, r0, lr, lsl #11
    dc70:	00056213 	andeq	r6, r5, r3, lsl r2
    dc74:	040f0000 	streq	r0, [pc], #-0	; dc7c <__module_entries_end+0x5b9c>
    dc78:	0000057f 	andeq	r0, r0, pc, ror r5
    dc7c:	0028760a 	eoreq	r7, r8, sl, lsl #12
    dc80:	26085400 	strcs	r5, [r8], -r0, lsl #8
    dc84:	000005dd 	ldrdeq	r0, [r0], -sp
    dc88:	00273d06 	eoreq	r3, r7, r6, lsl #26
    dc8c:	a9280800 	stmdbge	r8!, {fp}
    dc90:	00000003 	andeq	r0, r0, r3
    dc94:	001f3c06 	andseq	r3, pc, r6, lsl #24
    dc98:	b8290800 	stmdalt	r9!, {fp}
    dc9c:	04000009 	streq	r0, [r0], #-9
    dca0:	0025da06 	eoreq	sp, r5, r6, lsl #20
    dca4:	bd2b0800 	stclt	8, cr0, [fp, #-0]
    dca8:	08000009 	stmdaeq	r0, {r0, r3}
    dcac:	00270b06 	eoreq	r0, r7, r6, lsl #22
    dcb0:	d32d0800 	teqle	sp, #0, 16
    dcb4:	48000009 	stmdami	r0, {r0, r3}
    dcb8:	002b4906 	eoreq	r4, fp, r6, lsl #18
    dcbc:	e52f0800 	str	r0, [pc, #-2048]!	; d4c4 <__module_entries_end+0x53e4>
    dcc0:	4c000007 	stcmi	0, cr0, [r0], {7}
    dcc4:	94040f00 	strls	r0, [r4], #-3840	; 0xfffff100
    dcc8:	0a000005 	beq	dce4 <__module_entries_end+0x5c04>
    dccc:	00002580 	andeq	r2, r0, r0, lsl #11
    dcd0:	44280918 	strtmi	r0, [r8], #-2328	; 0xfffff6e8
    dcd4:	06000006 	streq	r0, [r0], -r6
    dcd8:	000020e0 	andeq	r2, r0, r0, ror #1
    dcdc:	06932a09 	ldreq	r2, [r3], r9, lsl #20
    dce0:	06000000 	streq	r0, [r0], -r0
    dce4:	00001fe8 	andeq	r1, r0, r8, ror #31
    dce8:	03942b09 	orrseq	r2, r4, #9216	; 0x2400
    dcec:	06040000 	streq	r0, [r4], -r0
    dcf0:	00002149 	andeq	r2, r0, r9, asr #2
    dcf4:	06882c09 	streq	r2, [r8], r9, lsl #24
    dcf8:	06050000 	streq	r0, [r5], -r0
    dcfc:	0000266b 	andeq	r2, r0, fp, ror #12
    dd00:	03cc2d09 	biceq	r2, ip, #576	; 0x240
    dd04:	06080000 	streq	r0, [r8], -r0
    dd08:	000021d4 	ldrdeq	r2, [r0], -r4
    dd0c:	039e2e09 	orrseq	r2, lr, #9, 28	; 0x90
    dd10:	060c0000 	streq	r0, [ip], -r0
    dd14:	00002857 	andeq	r2, r0, r7, asr r8
    dd18:	03a92f09 			; <UNDEFINED> instruction: 0x03a92f09
    dd1c:	06100000 	ldreq	r0, [r0], -r0
    dd20:	000022d7 	ldrdeq	r2, [r0], -r7
    dd24:	00403009 	subeq	r3, r0, r9
    dd28:	00140000 	andseq	r0, r4, r0
    dd2c:	05e3040f 	strbeq	r0, [r3, #1039]!	; 0x40f
    dd30:	040f0000 	streq	r0, [pc], #-0	; dd38 <__module_entries_end+0x5c58>
    dd34:	00000186 	andeq	r0, r0, r6, lsl #3
    dd38:	01fa040f 	mvnseq	r0, pc, lsl #8
    dd3c:	040f0000 	streq	r0, [pc], #-0	; dd44 <__module_entries_end+0x5c64>
    dd40:	00000445 	andeq	r0, r0, r5, asr #8
    dd44:	002ad104 	eoreq	sp, sl, r4, lsl #2
    dd48:	c5420700 	strbgt	r0, [r2, #-1792]	; 0xfffff900
    dd4c:	02000004 	andeq	r0, r0, #4
    dd50:	88200901 	stmdahi	r0!, {r0, r8, fp}
    dd54:	03000006 	movweq	r0, #6
    dd58:	00002a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    dd5c:	1fc00300 	svcne	0x00c00300
    dd60:	03010000 	movweq	r0, #4096	; 0x1000
    dd64:	0000222e 	andeq	r2, r0, lr, lsr #4
    dd68:	25c20302 	strbcs	r0, [r2, #770]	; 0x302
    dd6c:	00030000 	andeq	r0, r3, r0
    dd70:	002afd04 	eoreq	pc, sl, r4, lsl #26
    dd74:	67260900 	strvs	r0, [r6, -r0, lsl #18]!
    dd78:	0f000006 	svceq	0x00000006
    dd7c:	00065c04 	andeq	r5, r6, r4, lsl #24
    dd80:	25800400 	strcs	r0, [r0, #1024]	; 0x400
    dd84:	32090000 	andcc	r0, r9, #0
    dd88:	000005e3 	andeq	r0, r0, r3, ror #11
    dd8c:	001f5c0a 	andseq	r5, pc, sl, lsl #24
    dd90:	250a5000 	strcs	r5, [sl, #-0]
    dd94:	000006f9 	strdeq	r0, [r0], -r9
    dd98:	00250106 	eoreq	r0, r5, r6, lsl #2
    dd9c:	5c270a00 	stcpl	10, cr0, [r7], #-0
    dda0:	00000006 	andeq	r0, r0, r6
    dda4:	002bcc06 	eoreq	ip, fp, r6, lsl #24
    dda8:	f9290a00 			; <UNDEFINED> instruction: 0xf9290a00
    ddac:	38000006 	stmdacc	r0, {r1, r2}
    ddb0:	00252c06 	eoreq	r2, r5, r6, lsl #24
    ddb4:	f92a0a00 			; <UNDEFINED> instruction: 0xf92a0a00
    ddb8:	3c000006 	stccc	0, cr0, [r0], {6}
    ddbc:	0028dc06 	eoreq	sp, r8, r6, lsl #24
    ddc0:	a92c0a00 	stmdbge	ip!, {r9, fp}
    ddc4:	40000003 	andmi	r0, r0, r3
    ddc8:	0026bb06 	eoreq	fp, r6, r6, lsl #22
    ddcc:	a92d0a00 	pushge	{r9, fp}
    ddd0:	44000003 	strmi	r0, [r0], #-3
    ddd4:	00292406 	eoreq	r2, r9, r6, lsl #8
    ddd8:	b02e0a00 	eorlt	r0, lr, r0, lsl #20
    dddc:	48000003 	stmdami	r0, {r0, r1}
    dde0:	99040f00 	stmdbls	r4, {r8, r9, sl, fp}
    dde4:	04000006 	streq	r0, [r0], #-6
    dde8:	00001f5c 	andeq	r1, r0, ip, asr pc
    ddec:	06a4300a 	strteq	r3, [r4], sl
    ddf0:	93040000 	movwls	r0, #16384	; 0x4000
    ddf4:	0b000026 	bleq	de94 <__module_entries_end+0x5db4>
    ddf8:	00071521 	andeq	r1, r7, r1, lsr #10
    ddfc:	072a1400 	streq	r1, [sl, -r0, lsl #8]!
    de00:	2a130000 	bcs	4cde08 <mailbuffer+0x492d18>
    de04:	13000007 	movwne	r0, #7
    de08:	00000450 	andeq	r0, r0, r0, asr r4
    de0c:	00045013 	andeq	r5, r4, r3, lsl r0
    de10:	040f0000 	streq	r0, [pc], #-0	; de18 <__module_entries_end+0x5d38>
    de14:	00000730 	andeq	r0, r0, r0, lsr r7
    de18:	0029070a 	eoreq	r0, r9, sl, lsl #14
    de1c:	230b2400 	movwcs	r2, #46080	; 0xb400
    de20:	000007a9 	andeq	r0, r0, r9, lsr #15
    de24:	00297d06 	eoreq	r7, r9, r6, lsl #26
    de28:	f9250b00 			; <UNDEFINED> instruction: 0xf9250b00
    de2c:	00000006 	andeq	r0, r0, r6
    de30:	00284406 	eoreq	r4, r8, r6, lsl #8
    de34:	a9270b00 	stmdbge	r7!, {r8, r9, fp}
    de38:	04000007 	streq	r0, [r0], #-7
    de3c:	00265106 	eoreq	r5, r6, r6, lsl #2
    de40:	50280b00 	eorpl	r0, r8, r0, lsl #22
    de44:	08000004 	stmdaeq	r0, {r2}
    de48:	002c0c06 	eoreq	r0, ip, r6, lsl #24
    de4c:	9e290b00 	vmulls.f64	d0, d9, d0
    de50:	0c000003 	stceq	0, cr0, [r0], {3}
    de54:	00213f06 	eoreq	r3, r1, r6, lsl #30
    de58:	c52b0b00 	strgt	r0, [fp, #-2816]!	; 0xfffff500
    de5c:	10000003 	andne	r0, r0, r3
    de60:	0029eb06 	eoreq	lr, r9, r6, lsl #22
    de64:	9e2c0b00 	vmulls.f64	d0, d12, d0
    de68:	14000003 	strne	r0, [r0], #-3
    de6c:	0023ba06 	eoreq	fp, r3, r6, lsl #20
    de70:	af2e0b00 	svcge	0x002e0b00
    de74:	18000007 	stmdane	r0, {r0, r1, r2}
    de78:	00235906 	eoreq	r5, r3, r6, lsl #18
    de7c:	502f0b00 	eorpl	r0, pc, r0, lsl #22
    de80:	1c000004 	stcne	0, cr0, [r0], {4}
    de84:	002b1306 	eoreq	r1, fp, r6, lsl #6
    de88:	50300b00 	eorspl	r0, r0, r0, lsl #22
    de8c:	20000004 	andcs	r0, r0, r4
    de90:	ca040f00 	bgt	111a98 <mailbuffer+0xd69a8>
    de94:	0f000000 	svceq	0x00000000
    de98:	00070a04 	andeq	r0, r7, r4, lsl #20
    de9c:	29070400 	stmdbcs	r7, {sl}
    dea0:	320b0000 	andcc	r0, fp, #0
    dea4:	00000730 	andeq	r0, r0, r0, lsr r7
    dea8:	0027490a 	eoreq	r4, r7, sl, lsl #18
    deac:	200c0800 	andcs	r0, ip, r0, lsl #16
    deb0:	000007e5 	andeq	r0, r0, r5, ror #15
    deb4:	00244306 	eoreq	r4, r4, r6, lsl #6
    deb8:	dd220c00 	stcle	12, cr0, [r2, #-0]
    debc:	00000005 	andeq	r0, r0, r5
    dec0:	0020e006 	eoreq	lr, r0, r6
    dec4:	93240c00 	teqls	r4, #0, 24
    dec8:	04000006 	streq	r0, [r0], #-6
    decc:	27490400 	strbcs	r0, [r9, -r0, lsl #8]
    ded0:	260c0000 	strcs	r0, [ip], -r0
    ded4:	000007c0 	andeq	r0, r0, r0, asr #15
    ded8:	00250d0a 	eoreq	r0, r5, sl, lsl #26
    dedc:	1d0d1800 	stcne	8, cr1, [sp, #-0]
    dee0:	00000845 	andeq	r0, r0, r5, asr #16
    dee4:	0039ce06 	eorseq	ip, r9, r6, lsl #28
    dee8:	561f0d00 	ldrpl	r0, [pc], -r0, lsl #26
    deec:	00000008 	andeq	r0, r0, r8
    def0:	00508606 	subseq	r8, r0, r6, lsl #12
    def4:	56210d00 	strtpl	r0, [r1], -r0, lsl #26
    def8:	04000008 	streq	r0, [r0], #-8
    defc:	00504706 	subseq	r4, r0, r6, lsl #14
    df00:	6b220d00 	blvs	891308 <mailbuffer+0x856218>
    df04:	08000008 	stmdaeq	r0, {r3}
    df08:	0036f406 	eorseq	pc, r6, r6, lsl #8
    df0c:	81230d00 	teqhi	r3, r0, lsl #26
    df10:	0c000008 	stceq	0, cr0, [r0], {8}
    df14:	004fe906 	subeq	lr, pc, r6, lsl #18
    df18:	56250d00 	strtpl	r0, [r5], -r0, lsl #26
    df1c:	10000008 	andne	r0, r0, r8
    df20:	004fc006 	subeq	ip, pc, r6
    df24:	6b270d00 	blvs	9d132c <mailbuffer+0x99623c>
    df28:	14000008 	strne	r0, [r0], #-8
    df2c:	08501400 	ldmdaeq	r0, {sl, ip}^
    df30:	50130000 	andspl	r0, r3, r0
    df34:	00000008 	andeq	r0, r0, r8
    df38:	07f0040f 	ldrbeq	r0, [r0, pc, lsl #8]!
    df3c:	040f0000 	streq	r0, [pc], #-0	; df44 <__module_entries_end+0x5e64>
    df40:	00000845 	andeq	r0, r0, r5, asr #16
    df44:	0003cc12 	andeq	ip, r3, r2, lsl ip
    df48:	00086b00 	andeq	r6, r8, r0, lsl #22
    df4c:	08501300 	ldmdaeq	r0, {r8, r9, ip}^
    df50:	0f000000 	svceq	0x00000000
    df54:	00085c04 	andeq	r5, r8, r4, lsl #24
    df58:	08811400 	stmeq	r1, {sl, ip}
    df5c:	50130000 	andspl	r0, r3, r0
    df60:	13000008 	movwne	r0, #8
    df64:	0000039e 	muleq	r0, lr, r3
    df68:	71040f00 	tstvc	r4, r0, lsl #30
    df6c:	04000008 	streq	r0, [r0], #-8
    df70:	0000250d 	andeq	r2, r0, sp, lsl #10
    df74:	07f0290d 	ldrbeq	r2, [r0, sp, lsl #18]!
    df78:	a00a0000 	andge	r0, sl, r0
    df7c:	54000022 	strpl	r0, [r0], #-34	; 0xffffffde
    df80:	099b220e 	ldmibeq	fp, {r1, r2, r3, r9, sp}
    df84:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
    df88:	0e00002a 	cdpeq	0, 0, cr0, cr0, cr10, {1}
    df8c:	0003a924 	andeq	sl, r3, r4, lsr #18
    df90:	2a060000 	bcs	18df98 <mailbuffer+0x152ea8>
    df94:	0e000026 	cdpeq	0, 0, cr0, cr0, cr6, {1}
    df98:	00099b25 	andeq	r9, r9, r5, lsr #22
    df9c:	bb060400 	bllt	18efa4 <mailbuffer+0x153eb4>
    dfa0:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    dfa4:	0003cc26 	andeq	ip, r3, r6, lsr #24
    dfa8:	67060800 	strvs	r0, [r6, -r0, lsl #16]
    dfac:	0e000022 	cdpeq	0, 0, cr0, cr0, cr2, {1}
    dfb0:	0003cc27 	andeq	ip, r3, r7, lsr #24
    dfb4:	bd060c00 	stclt	12, cr0, [r6, #-0]
    dfb8:	0e00002a 	cdpeq	0, 0, cr0, cr0, cr10, {1}
    dfbc:	0003cc29 	andeq	ip, r3, r9, lsr #24
    dfc0:	17061000 	strne	r1, [r6, -r0]
    dfc4:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    dfc8:	0003cc2a 	andeq	ip, r3, sl, lsr #24
    dfcc:	e0061400 	and	r1, r6, r0, lsl #8
    dfd0:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    dfd4:	0006932c 	andeq	r9, r6, ip, lsr #6
    dfd8:	7d061800 	stcvc	8, cr1, [r6, #-0]
    dfdc:	0e000029 	cdpeq	0, 0, cr0, cr0, cr9, {1}
    dfe0:	0006f92d 	andeq	pc, r6, sp, lsr #18
    dfe4:	3b061c00 	blcc	194fec <mailbuffer+0x159efc>
    dfe8:	0e000024 	cdpeq	0, 0, cr0, cr0, cr4, {1}
    dfec:	00006c2e 	andeq	r6, r0, lr, lsr #24
    dff0:	d4062000 	strle	r2, [r6], #-0
    dff4:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    dff8:	00039e2f 	andeq	r9, r3, pc, lsr #28
    dffc:	9c062400 	cfstrsls	mvf2, [r6], {-0}
    e000:	0e000023 	cdpeq	0, 0, cr0, cr0, cr3, {1}
    e004:	00039e31 	andeq	r9, r3, r1, lsr lr
    e008:	b0062800 	andlt	r2, r6, r0, lsl #16
    e00c:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
    e010:	0003a932 	andeq	sl, r3, r2, lsr r9
    e014:	95062c00 	strls	r2, [r6, #-3072]	; 0xfffff400
    e018:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    e01c:	00039e33 	andeq	r9, r3, r3, lsr lr
    e020:	ea063000 	b	19a028 <mailbuffer+0x15ef38>
    e024:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    e028:	0003a934 	andeq	sl, r3, r4, lsr r9
    e02c:	39063400 	stmdbcc	r6, {sl, ip, sp}
    e030:	0e000026 	cdpeq	0, 0, cr0, cr0, cr6, {1}
    e034:	00039e35 	andeq	r9, r3, r5, lsr lr
    e038:	8c063800 	stchi	8, cr3, [r6], {-0}
    e03c:	0e000028 	cdpeq	0, 0, cr0, cr0, cr8, {1}
    e040:	0003a937 	andeq	sl, r3, r7, lsr r9
    e044:	31063c00 	tstcc	r6, r0, lsl #24
    e048:	0e000027 	cdpeq	0, 0, cr0, cr0, cr7, {1}
    e04c:	0003a938 	andeq	sl, r3, r8, lsr r9
    e050:	2f064000 	svccs	0x00064000
    e054:	0e000028 	cdpeq	0, 0, cr0, cr0, cr8, {1}
    e058:	00039e39 	andeq	r9, r3, r9, lsr lr
    e05c:	dc064400 	cfstrsle	mvf4, [r6], {-0}
    e060:	0e00002a 	cdpeq	0, 0, cr0, cr0, cr10, {1}
    e064:	0009a13b 	andeq	sl, r9, fp, lsr r1
    e068:	a7064800 	strge	r4, [r6, -r0, lsl #16]
    e06c:	0e000024 	cdpeq	0, 0, cr0, cr0, cr4, {1}
    e070:	0004503c 	andeq	r5, r4, ip, lsr r0
    e074:	a0064c00 	andge	r4, r6, r0, lsl #24
    e078:	0e00001f 	mcreq	0, 0, r0, cr0, cr15, {0}
    e07c:	0009a73e 	andeq	sl, r9, lr, lsr r7
    e080:	0f005000 	svceq	0x00005000
    e084:	0007b504 	andeq	fp, r7, r4, lsl #10
    e088:	9e040f00 	cdpls	15, 0, cr0, cr4, cr0, {0}
    e08c:	0f000003 	svceq	0x00000003
    e090:	00088704 	andeq	r8, r8, r4, lsl #14
    e094:	22a00400 	adccs	r0, r0, #0, 8
    e098:	400e0000 	andmi	r0, lr, r0
    e09c:	00000892 	muleq	r0, r2, r8
    e0a0:	0003a915 	andeq	sl, r3, r5, lsl r9
    e0a4:	09cd0b00 	stmibeq	sp, {r8, r9, fp}^
    e0a8:	09cd0000 	stmibeq	sp, {}^	; <UNPREDICTABLE>
    e0ac:	82160000 	andshi	r0, r6, #0
    e0b0:	0f000003 	svceq	0x00000003
    e0b4:	ad040f00 	stcge	15, cr0, [r4, #-0]
    e0b8:	15000009 	strne	r0, [r0, #-9]
    e0bc:	000003cc 	andeq	r0, r0, ip, asr #7
    e0c0:	00287604 	eoreq	r7, r8, r4, lsl #12
    e0c4:	94310800 	ldrtls	r0, [r1], #-2048	; 0xfffff800
    e0c8:	0a000005 	beq	e0e4 <__module_entries_end+0x6004>
    e0cc:	00004f36 	andeq	r4, r0, r6, lsr pc
    e0d0:	681f011f 	ldmdavs	pc, {r0, r1, r2, r3, r4, r8}	; <UNPREDICTABLE>
    e0d4:	0600000a 	streq	r0, [r0], -sl
    e0d8:	00004c67 	andeq	r4, r0, r7, ror #24
    e0dc:	03a92101 			; <UNDEFINED> instruction: 0x03a92101
    e0e0:	06000000 	streq	r0, [r0], -r0
    e0e4:	00004dc6 	andeq	r4, r0, r6, asr #27
    e0e8:	03a92301 			; <UNDEFINED> instruction: 0x03a92301
    e0ec:	06040000 	streq	r0, [r4], -r0
    e0f0:	00004a94 	muleq	r0, r4, sl
    e0f4:	03a92401 			; <UNDEFINED> instruction: 0x03a92401
    e0f8:	06080000 	streq	r0, [r8], -r0
    e0fc:	00004a1b 	andeq	r4, r0, fp, lsl sl
    e100:	00bc2501 	adcseq	r2, ip, r1, lsl #10
    e104:	170c0000 	strne	r0, [ip, -r0]
    e108:	00004d3c 	andeq	r4, r0, ip, lsr sp
    e10c:	00bc2701 	adcseq	r2, ip, r1, lsl #14
    e110:	04010000 	streq	r0, [r1], #-0
    e114:	8e170d04 	cdphi	13, 1, cr0, cr7, cr4, {0}
    e118:	0100004b 	tsteq	r0, fp, asr #32
    e11c:	0000bc29 	andeq	fp, r0, r9, lsr #24
    e120:	00040100 	andeq	r0, r4, r0, lsl #2
    e124:	4c75170d 	ldclmi	7, cr1, [r5], #-52	; 0xffffffcc
    e128:	2a010000 	bcs	4e130 <mailbuffer+0x13040>
    e12c:	000000bc 	strheq	r0, [r0], -ip
    e130:	0e030501 	cfsh32eq	mvfx0, mvfx3, #1
    e134:	004a3a17 	subeq	r3, sl, r7, lsl sl
    e138:	bc2b0100 	stflts	f0, [fp], #-0
    e13c:	01000000 	mrseq	r0, (UNDEF: 0)
    e140:	060e0003 	streq	r0, [lr], -r3
    e144:	00004c82 	andeq	r4, r0, r2, lsl #25
    e148:	0a682c01 	beq	1a19154 <mailbuffer+0x19de064>
    e14c:	000f0000 	andeq	r0, pc, r0
    e150:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    e154:	000a7800 	andeq	r7, sl, r0, lsl #16
    e158:	03821600 	orreq	r1, r2, #0, 12
    e15c:	000f0000 	andeq	r0, pc, r0
    e160:	004f3604 	subeq	r3, pc, r4, lsl #12
    e164:	e32e0100 	teq	lr, #0, 2
    e168:	0a000009 	beq	e194 <__module_entries_end+0x60b4>
    e16c:	00004a8f 	andeq	r4, r0, pc, lsl #21
    e170:	c031010d 	eorsgt	r0, r1, sp, lsl #2
    e174:	0600000a 	streq	r0, [r0], -sl
    e178:	00004b5a 	andeq	r4, r0, sl, asr fp
    e17c:	03a93301 			; <UNDEFINED> instruction: 0x03a93301
    e180:	06000000 	streq	r0, [r0], -r0
    e184:	00004f6a 	andeq	r4, r0, sl, ror #30
    e188:	03a93501 			; <UNDEFINED> instruction: 0x03a93501
    e18c:	06040000 	streq	r0, [r4], -r0
    e190:	00004e1e 	andeq	r4, r0, lr, lsl lr
    e194:	03a93601 			; <UNDEFINED> instruction: 0x03a93601
    e198:	06080000 	streq	r0, [r8], -r0
    e19c:	00004c88 	andeq	r4, r0, r8, lsl #25
    e1a0:	00bc3701 	adcseq	r3, ip, r1, lsl #14
    e1a4:	000c0000 	andeq	r0, ip, r0
    e1a8:	004a8f04 	subeq	r8, sl, r4, lsl #30
    e1ac:	833c0100 	teqhi	ip, #0, 2
    e1b0:	0a00000a 	beq	e1e0 <__module_entries_end+0x6100>
    e1b4:	00004a6c 	andeq	r4, r0, ip, ror #20
    e1b8:	20420106 	subcs	r0, r2, r6, lsl #2
    e1bc:	0600000b 	streq	r0, [r0], -fp
    e1c0:	00004de2 	andeq	r4, r0, r2, ror #27
    e1c4:	00bc4401 	adcseq	r4, ip, r1, lsl #8
    e1c8:	06000000 	streq	r0, [r0], -r0
    e1cc:	00004c9e 	muleq	r0, lr, ip
    e1d0:	00bc4601 	adcseq	r4, ip, r1, lsl #12
    e1d4:	06010000 	streq	r0, [r1], -r0
    e1d8:	00004f2d 	andeq	r4, r0, sp, lsr #30
    e1dc:	00bc4701 	adcseq	r4, ip, r1, lsl #14
    e1e0:	06020000 	streq	r0, [r2], -r0
    e1e4:	000049e6 	andeq	r4, r0, r6, ror #19
    e1e8:	00bc4801 	adcseq	r4, ip, r1, lsl #16
    e1ec:	06030000 	streq	r0, [r3], -r0
    e1f0:	00004c05 	andeq	r4, r0, r5, lsl #24
    e1f4:	00bc4901 	adcseq	r4, ip, r1, lsl #18
    e1f8:	06040000 	streq	r0, [r4], -r0
    e1fc:	00002aab 	andeq	r2, r0, fp, lsr #21
    e200:	00bc4a01 	adcseq	r4, ip, r1, lsl #20
    e204:	00050000 	andeq	r0, r5, r0
    e208:	004a6c04 	subeq	r6, sl, r4, lsl #24
    e20c:	cb4c0100 	blgt	130e614 <mailbuffer+0x12d3524>
    e210:	0a00000a 	beq	e240 <__module_entries_end+0x6160>
    e214:	00004e04 	andeq	r4, r0, r4, lsl #28
    e218:	e94e0124 	stmdb	lr, {r2, r5, r8}^
    e21c:	1700000b 	strne	r0, [r0, -fp]
    e220:	00004d44 	andeq	r4, r0, r4, asr #26
    e224:	00bc5001 	adcseq	r5, ip, r1
    e228:	05010000 	streq	r0, [r1, #-0]
    e22c:	f0170003 			; <UNDEFINED> instruction: 0xf0170003
    e230:	0100004d 	tsteq	r0, sp, asr #32
    e234:	0000bc53 	andeq	fp, r0, r3, asr ip
    e238:	00030100 	andeq	r0, r3, r0, lsl #2
    e23c:	4bb81700 	blmi	fee13e44 <_estack+0xf6e03e44>
    e240:	54010000 	strpl	r0, [r1], #-0
    e244:	000000bc 	strheq	r0, [r0], -ip
    e248:	01010701 	tsteq	r1, r1, lsl #14
    e24c:	424d5218 	submi	r5, sp, #24, 4	; 0x80000001
    e250:	bc550100 	ldflte	f0, [r5], {-0}
    e254:	01000000 	mrseq	r0, (UNDEF: 0)
    e258:	17010001 	strne	r0, [r1, -r1]
    e25c:	00004a26 	andeq	r4, r0, r6, lsr #20
    e260:	00bc5601 	adcseq	r5, ip, r1, lsl #12
    e264:	03010000 	movweq	r0, #4096	; 0x1000
    e268:	4e170205 	cdpmi	2, 1, cr0, cr7, cr5, {0}
    e26c:	0100004b 	tsteq	r0, fp, asr #32
    e270:	0000bc57 	andeq	fp, r0, r7, asr ip
    e274:	02030100 	andeq	r0, r3, #0, 2
    e278:	4ade1702 	bmi	ff793e88 <_estack+0xf7783e88>
    e27c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    e280:	000000bc 	strheq	r0, [r0], -ip
    e284:	02000201 	andeq	r0, r0, #268435456	; 0x10000000
    e288:	004b8e06 	subeq	r8, fp, r6, lsl #28
    e28c:	bc590100 	ldflte	f0, [r9], {-0}
    e290:	03000000 	movweq	r0, #0
    e294:	004a0a06 	subeq	r0, sl, r6, lsl #20
    e298:	bc5a0100 	ldflte	f0, [sl], {-0}
    e29c:	04000000 	streq	r0, [r0], #-0
    e2a0:	004a3a06 	subeq	r3, sl, r6, lsl #20
    e2a4:	e95b0100 	ldmdb	fp, {r8}^
    e2a8:	0500000b 	streq	r0, [r0, #-11]
    e2ac:	004f3b06 	subeq	r3, pc, r6, lsl #22
    e2b0:	f95c0100 			; <UNDEFINED> instruction: 0xf95c0100
    e2b4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    e2b8:	004ae906 	subeq	lr, sl, r6, lsl #18
    e2bc:	685d0100 	ldmdavs	sp, {r8}^
    e2c0:	1000000a 	andne	r0, r0, sl
    e2c4:	004bf006 	subeq	pc, fp, r6
    e2c8:	095e0100 	ldmdbeq	lr, {r8}^
    e2cc:	2000000c 	andcs	r0, r0, ip
    e2d0:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    e2d4:	0bf90000 	bleq	ffe4e2dc <_estack+0xf7e3e2dc>
    e2d8:	82160000 	andshi	r0, r6, #0
    e2dc:	02000003 	andeq	r0, r0, #3
    e2e0:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    e2e4:	0c090000 	stceq	0, cr0, [r9], {-0}
    e2e8:	82160000 	andshi	r0, r6, #0
    e2ec:	07000003 	streq	r0, [r0, -r3]
    e2f0:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    e2f4:	0c190000 	ldceq	0, cr0, [r9], {-0}
    e2f8:	82160000 	andshi	r0, r6, #0
    e2fc:	03000003 	movweq	r0, #3
    e300:	4e040400 	cfcpysmi	mvf0, mvf4
    e304:	60010000 	andvs	r0, r1, r0
    e308:	00000b2b 	andeq	r0, r0, fp, lsr #22
    e30c:	004f1a0a 	subeq	r1, pc, sl, lsl #20
    e310:	62010600 	andvs	r0, r1, #0, 12
    e314:	00000c55 	andeq	r0, r0, r5, asr ip
    e318:	004de206 	subeq	lr, sp, r6, lsl #4
    e31c:	bc640100 	stflte	f0, [r4], #-0
    e320:	00000000 	andeq	r0, r0, r0
    e324:	0049e606 	subeq	lr, r9, r6, lsl #12
    e328:	a9660100 	stmdbge	r6!, {r8}^
    e32c:	01000003 	tsteq	r0, r3
    e330:	002aab06 	eoreq	sl, sl, r6, lsl #22
    e334:	bc670100 	stflte	f0, [r7], #-0
    e338:	05000000 	streq	r0, [r0, #-0]
    e33c:	4f1a0400 	svcmi	0x001a0400
    e340:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    e344:	00000c24 	andeq	r0, r0, r4, lsr #24
    e348:	004acc0a 	subeq	ip, sl, sl, lsl #24
    e34c:	6b010600 	blvs	4fb54 <mailbuffer+0x14a64>
    e350:	00000cbb 			; <UNDEFINED> instruction: 0x00000cbb
    e354:	004de206 	subeq	lr, sp, r6, lsl #4
    e358:	bc6d0100 	stflte	f0, [sp], #-0
    e35c:	00000000 	andeq	r0, r0, r0
    e360:	004e2e17 	subeq	r2, lr, r7, lsl lr
    e364:	bc6f0100 	stflte	f0, [pc], #-0	; e36c <__module_entries_end+0x628c>
    e368:	01000000 	mrseq	r0, (UNDEF: 0)
    e36c:	17010701 	strne	r0, [r1, -r1, lsl #14]
    e370:	00004b8e 	andeq	r4, r0, lr, lsl #23
    e374:	00bc7001 	adcseq	r7, ip, r1
    e378:	07010000 	streq	r0, [r1, -r0]
    e37c:	3a060100 	bcc	18e784 <mailbuffer+0x153694>
    e380:	0100004a 	tsteq	r0, sl, asr #32
    e384:	0000c371 	andeq	ip, r0, r1, ror r3
    e388:	05060200 	streq	r0, [r6, #-512]	; 0xfffffe00
    e38c:	0100004c 	tsteq	r0, ip, asr #32
    e390:	0000bc72 	andeq	fp, r0, r2, ror ip
    e394:	ab060400 	blge	18f39c <mailbuffer+0x1542ac>
    e398:	0100002a 	tsteq	r0, sl, lsr #32
    e39c:	0000bc73 	andeq	fp, r0, r3, ror ip
    e3a0:	04000500 	streq	r0, [r0], #-1280	; 0xfffffb00
    e3a4:	00004acc 	andeq	r4, r0, ip, asr #21
    e3a8:	0c607501 	cfstr64eq	mvdx7, [r0], #-4
    e3ac:	4b0a0000 	blmi	28e3b4 <mailbuffer+0x2532c4>
    e3b0:	1200004c 	andne	r0, r0, #76	; 0x4c
    e3b4:	0dba7701 	ldceq	7, cr7, [sl, #4]!
    e3b8:	87170000 	ldrhi	r0, [r7, -r0]
    e3bc:	0100004d 	tsteq	r0, sp, asr #32
    e3c0:	0000bc79 	andeq	fp, r0, r9, ror ip
    e3c4:	01070100 	mrseq	r0, (UNDEF: 23)
    e3c8:	268d1700 	strcs	r1, [sp], r0, lsl #14
    e3cc:	7a010000 	bvc	4e3d4 <mailbuffer+0x132e4>
    e3d0:	000000bc 	strheq	r0, [r0], -ip
    e3d4:	00000101 	andeq	r0, r0, r1, lsl #2
    e3d8:	004e5306 	subeq	r5, lr, r6, lsl #6
    e3dc:	bc7b0100 	ldflte	f0, [fp], #-0
    e3e0:	01000000 	mrseq	r0, (UNDEF: 0)
    e3e4:	004c3117 	subeq	r3, ip, r7, lsl r1
    e3e8:	bc7c0100 	ldflte	f0, [ip], #-0
    e3ec:	01000000 	mrseq	r0, (UNDEF: 0)
    e3f0:	17020404 	strne	r0, [r2, -r4, lsl #8]
    e3f4:	000049e6 	andeq	r4, r0, r6, ror #19
    e3f8:	00bc7d01 	adcseq	r7, ip, r1, lsl #26
    e3fc:	01010000 	mrseq	r0, (UNDEF: 1)
    e400:	49180203 	ldmdbmi	r8, {r0, r1, r9}
    e404:	0100494c 	tsteq	r0, ip, asr #18
    e408:	0000bc7e 	andeq	fp, r0, lr, ror ip
    e40c:	02010100 	andeq	r0, r1, #0, 2
    e410:	4f451802 	svcmi	0x00451802
    e414:	7f01004d 	svcvc	0x0001004d
    e418:	000000bc 	strheq	r0, [r0], -ip
    e41c:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
    e420:	004bcb17 	subeq	ip, fp, r7, lsl fp
    e424:	bc800100 	stflts	f0, [r0], {0}
    e428:	01000000 	mrseq	r0, (UNDEF: 0)
    e42c:	06020001 	streq	r0, [r2], -r1
    e430:	00004c25 	andeq	r4, r0, r5, lsr #24
    e434:	03a98101 			; <UNDEFINED> instruction: 0x03a98101
    e438:	06030000 	streq	r0, [r3], -r0
    e43c:	00004a79 	andeq	r4, r0, r9, ror sl
    e440:	00bc8201 	adcseq	r8, ip, r1, lsl #4
    e444:	06070000 	streq	r0, [r7], -r0
    e448:	00004c16 	andeq	r4, r0, r6, lsl ip
    e44c:	03a98301 			; <UNDEFINED> instruction: 0x03a98301
    e450:	06080000 	streq	r0, [r8], -r0
    e454:	00004e3f 	andeq	r4, r0, pc, lsr lr
    e458:	00bc8401 	adcseq	r8, ip, r1, lsl #8
    e45c:	060c0000 	streq	r0, [ip], -r0
    e460:	00004d9d 	muleq	r0, sp, sp
    e464:	00bc8501 	adcseq	r8, ip, r1, lsl #10
    e468:	060d0000 	streq	r0, [sp], -r0
    e46c:	00004d23 	andeq	r4, r0, r3, lsr #26
    e470:	00bc8601 	adcseq	r8, ip, r1, lsl #12
    e474:	170e0000 	strne	r0, [lr, -r0]
    e478:	00004b98 	muleq	r0, r8, fp
    e47c:	00bc8701 	adcseq	r8, ip, r1, lsl #14
    e480:	07010000 	streq	r0, [r1, -r0]
    e484:	19170f01 	ldmdbne	r7, {r0, r8, r9, sl, fp}
    e488:	0100004e 	tsteq	r0, lr, asr #32
    e48c:	0000bc88 	andeq	fp, r0, r8, lsl #25
    e490:	00010100 	andeq	r0, r1, r0, lsl #2
    e494:	4dce060f 	stclmi	6, cr0, [lr, #60]	; 0x3c
    e498:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    e49c:	000000c3 	andeq	r0, r0, r3, asr #1
    e4a0:	4b040010 	blmi	10e4e8 <mailbuffer+0xd33f8>
    e4a4:	0100004c 	tsteq	r0, ip, asr #32
    e4a8:	000cc68b 	andeq	ip, ip, fp, lsl #13
    e4ac:	49d20a00 	ldmibmi	r2, {r9, fp}^
    e4b0:	010a0000 	mrseq	r0, (UNDEF: 10)
    e4b4:	000e3e8d 	andeq	r3, lr, sp, lsl #29
    e4b8:	4de20600 	stclmi	6, cr0, [r2]
    e4bc:	8f010000 	svchi	0x00010000
    e4c0:	000000bc 	strheq	r0, [r0], -ip
    e4c4:	4e531700 	cdpmi	7, 5, cr1, cr3, cr0, {0}
    e4c8:	91010000 	mrsls	r0, (UNDEF: 1)
    e4cc:	000000bc 	strheq	r0, [r0], -ip
    e4d0:	01070101 	tsteq	r7, r1, lsl #2
    e4d4:	004b8e17 	subeq	r8, fp, r7, lsl lr
    e4d8:	bc920100 	ldflts	f0, [r2], {0}
    e4dc:	01000000 	mrseq	r0, (UNDEF: 0)
    e4e0:	06010007 	streq	r0, [r1], -r7
    e4e4:	00004bdc 	ldrdeq	r4, [r0], -ip
    e4e8:	03a99301 			; <UNDEFINED> instruction: 0x03a99301
    e4ec:	06020000 	streq	r0, [r2], -r0
    e4f0:	00004a3a 	andeq	r4, r0, sl, lsr sl
    e4f4:	00c39401 	sbceq	r9, r3, r1, lsl #8
    e4f8:	17060000 	strne	r0, [r6, -r0]
    e4fc:	00004e5c 	andeq	r4, r0, ip, asr lr
    e500:	00bc9501 	adcseq	r9, ip, r1, lsl #10
    e504:	01010000 	mrseq	r0, (UNDEF: 1)
    e508:	44170807 	ldrmi	r0, [r7], #-2055	; 0xfffff7f9
    e50c:	0100004a 	tsteq	r0, sl, asr #32
    e510:	0000bc96 	muleq	r0, r6, ip
    e514:	00070100 	andeq	r0, r7, r0, lsl #2
    e518:	2aab0608 	bcs	feacfd40 <_estack+0xf6abfd40>
    e51c:	97010000 	strls	r0, [r1, -r0]
    e520:	000000bc 	strheq	r0, [r0], -ip
    e524:	d2040009 	andle	r0, r4, #9
    e528:	01000049 	tsteq	r0, r9, asr #32
    e52c:	000dc599 	muleq	sp, r9, r5
    e530:	4f500a00 	svcmi	0x00500a00
    e534:	01080000 	mrseq	r0, (UNDEF: 8)
    e538:	000e6e9b 	muleq	lr, fp, lr
    e53c:	4bd40600 	blmi	ff50fd44 <_estack+0xf74ffd44>
    e540:	9d010000 	stcls	0, cr0, [r1, #-0]
    e544:	000003a9 	andeq	r0, r0, r9, lsr #7
    e548:	49f70600 	ldmibmi	r7!, {r9, sl}^
    e54c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    e550:	000003a9 	andeq	r0, r0, r9, lsr #7
    e554:	50040004 	andpl	r0, r4, r4
    e558:	0100004f 	tsteq	r0, pc, asr #32
    e55c:	000e49a0 	andeq	r4, lr, r0, lsr #19
    e560:	4dba0a00 	ldcmi	10, cr0, [sl]
    e564:	010a0000 	mrseq	r0, (UNDEF: 10)
    e568:	000ecea2 	andeq	ip, lr, r2, lsr #29
    e56c:	4de20600 	stclmi	6, cr0, [r2]
    e570:	a4010000 	strge	r0, [r1], #-0
    e574:	000000bc 	strheq	r0, [r0], -ip
    e578:	4b8e0600 	blmi	fe38fd80 <_estack+0xf637fd80>
    e57c:	a6010000 	strge	r0, [r1], -r0
    e580:	000000bc 	strheq	r0, [r0], -ip
    e584:	4bdc0601 	blmi	ff70fd90 <_estack+0xf76ffd90>
    e588:	a7010000 	strge	r0, [r1, -r0]
    e58c:	000003a9 	andeq	r0, r0, r9, lsr #7
    e590:	4a3a0602 	bmi	e8fda0 <mailbuffer+0xe54cb0>
    e594:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    e598:	000000bc 	strheq	r0, [r0], -ip
    e59c:	4a9c0606 	bmi	fe70fdbc <_estack+0xf66ffdbc>
    e5a0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    e5a4:	000000c3 	andeq	r0, r0, r3, asr #1
    e5a8:	2aab0607 	bcs	feacfdcc <_estack+0xf6abfdcc>
    e5ac:	aa010000 	bge	4e5b4 <mailbuffer+0x134c4>
    e5b0:	000000bc 	strheq	r0, [r0], -ip
    e5b4:	ba040009 	blt	10e5e0 <mailbuffer+0xd34f0>
    e5b8:	0100004d 	tsteq	r0, sp, asr #32
    e5bc:	000e79ac 	andeq	r7, lr, ip, lsr #19
    e5c0:	4cfe0a00 	vldmiami	lr!, {s1-s0}
    e5c4:	010a0000 	mrseq	r0, (UNDEF: 10)
    e5c8:	000f2eae 	andeq	r2, pc, lr, lsr #29
    e5cc:	4de20600 	stclmi	6, cr0, [r2]
    e5d0:	b0010000 	andlt	r0, r1, r0
    e5d4:	000000bc 	strheq	r0, [r0], -ip
    e5d8:	4a200600 	bmi	80fde0 <mailbuffer+0x7d4cf0>
    e5dc:	b2010000 	andlt	r0, r1, #0
    e5e0:	000000bc 	strheq	r0, [r0], -ip
    e5e4:	4bdc0601 	blmi	ff70fdf0 <_estack+0xf76ffdf0>
    e5e8:	b4010000 	strlt	r0, [r1], #-0
    e5ec:	000003a9 	andeq	r0, r0, r9, lsr #7
    e5f0:	49e60602 	stmibmi	r6!, {r1, r9, sl}^
    e5f4:	b5010000 	strlt	r0, [r1, #-0]
    e5f8:	000000bc 	strheq	r0, [r0], -ip
    e5fc:	4a9c0606 	bmi	fe70fe1c <_estack+0xf66ffe1c>
    e600:	b6010000 	strlt	r0, [r1], -r0
    e604:	000000c3 	andeq	r0, r0, r3, asr #1
    e608:	2aab0607 	bcs	feacfe2c <_estack+0xf6abfe2c>
    e60c:	b7010000 	strlt	r0, [r1, -r0]
    e610:	000000bc 	strheq	r0, [r0], -ip
    e614:	fe040009 	cdp2	0, 0, cr0, cr4, cr9, {0}
    e618:	0100004c 	tsteq	r0, ip, asr #32
    e61c:	000ed9b9 			; <UNDEFINED> instruction: 0x000ed9b9
    e620:	1f5d1900 	svcne	0x005d1900
    e624:	c6010000 	strgt	r0, [r1], -r0
    e628:	00026794 	muleq	r2, r4, r7
    e62c:	000000cc 	andeq	r0, r0, ip, asr #1
    e630:	0f6b9c01 	svceq	0x006b9c01
    e634:	af1a0000 	svcge	0x001a0000
    e638:	01000043 	tsteq	r0, r3, asr #32
    e63c:	000f6bc6 	andeq	r6, pc, r6, asr #23
    e640:	6c910200 	lfmvs	f0, 4, [r1], {0}
    e644:	0020e21a 	eoreq	lr, r0, sl, lsl r2
    e648:	93c60100 	bicls	r0, r6, #0, 2
    e64c:	02000006 	andeq	r0, r0, #6
    e650:	0f006891 	svceq	0x00006891
    e654:	0006ff04 	andeq	pc, r6, r4, lsl #30
    e658:	4a4e1900 	bmi	1394a60 <mailbuffer+0x1359970>
    e65c:	d4010000 	strle	r0, [r1], #-0
    e660:	00026860 	andeq	r6, r2, r0, ror #16
    e664:	000000ec 	andeq	r0, r0, ip, ror #1
    e668:	0f959c01 	svceq	0x00959c01
    e66c:	af1a0000 	svcge	0x001a0000
    e670:	01000043 	tsteq	r0, r3, asr #32
    e674:	000f6bd4 	ldrdeq	r6, [pc], -r4
    e678:	6c910200 	lfmvs	f0, 4, [r1], {0}
    e67c:	4b681b00 	blmi	1a15284 <mailbuffer+0x19da194>
    e680:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    e684:	000003cc 	andeq	r0, r0, ip, asr #7
    e688:	0002694c 	andeq	r6, r2, ip, asr #18
    e68c:	00000734 	andeq	r0, r0, r4, lsr r7
    e690:	109e9c01 	addsne	r9, lr, r1, lsl #24
    e694:	301a0000 	andscc	r0, sl, r0
    e698:	01000023 	tsteq	r0, r3, lsr #32
    e69c:	000693e9 	andeq	r9, r6, r9, ror #7
    e6a0:	e4910300 	ldr	r0, [r1], #768	; 0x300
    e6a4:	43af1c7e 			; <UNDEFINED> instruction: 0x43af1c7e
    e6a8:	eb010000 	bl	4e6b0 <mailbuffer+0x135c0>
    e6ac:	00000f6b 	andeq	r0, r0, fp, ror #30
    e6b0:	1c689102 	stfnep	f1, [r8], #-8
    e6b4:	00004d7d 	andeq	r4, r0, sp, ror sp
    e6b8:	0650ee01 	ldrbeq	lr, [r0], -r1, lsl #28
    e6bc:	91020000 	mrsls	r0, (UNDEF: 2)
    e6c0:	42281c64 	eormi	r1, r8, #100, 24	; 0x6400
    e6c4:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    e6c8:	0000109e 	muleq	r0, lr, r0
    e6cc:	1d609102 	stfnep	f1, [r0, #-8]!
    e6d0:	00004254 	andeq	r4, r0, r4, asr r2
    e6d4:	a4010701 	strge	r0, [r1], #-1793	; 0xfffff8ff
    e6d8:	02000010 	andeq	r0, r0, #16
    e6dc:	6d1d5c91 	ldcvs	12, cr5, [sp, #-580]	; 0xfffffdbc
    e6e0:	0100004a 	tsteq	r0, sl, asr #32
    e6e4:	0b200138 	bleq	80ebcc <mailbuffer+0x7d3adc>
    e6e8:	91020000 	mrsls	r0, (UNDEF: 2)
    e6ec:	4e051d50 	mcrmi	13, 0, r1, cr5, cr0, {2}
    e6f0:	40010000 	andmi	r0, r1, r0
    e6f4:	000c1901 	andeq	r1, ip, r1, lsl #18
    e6f8:	ac910300 	ldcge	3, cr0, [r1], {0}
    e6fc:	36a61d7f 			; <UNDEFINED> instruction: 0x36a61d7f
    e700:	51010000 	mrspl	r0, (UNDEF: 1)
    e704:	0003a901 	andeq	sl, r3, r1, lsl #18
    e708:	6c910200 	lfmvs	f0, 4, [r1], {0}
    e70c:	004f721d 	subeq	r7, pc, sp, lsl r2	; <UNPREDICTABLE>
    e710:	017b0100 	cmneq	fp, r0, lsl #2
    e714:	00000e3e 	andeq	r0, r0, lr, lsr lr
    e718:	7fa09103 	svcvc	0x00a09103
    e71c:	004f511d 	subeq	r5, pc, sp, lsl r1	; <UNPREDICTABLE>
    e720:	01850100 	orreq	r0, r5, r0, lsl #2
    e724:	00000e6e 	andeq	r0, r0, lr, ror #28
    e728:	7f989103 	svcvc	0x00989103
    e72c:	004bad1d 	subeq	sl, fp, sp, lsl sp
    e730:	018f0100 	orreq	r0, pc, r0, lsl #2
    e734:	000003a9 	andeq	r0, r0, r9, lsr #7
    e738:	1d589102 	ldfnep	f1, [r8, #-8]
    e73c:	00002a44 	andeq	r2, r0, r4, asr #20
    e740:	8901a301 	stmdbhi	r1, {r0, r8, r9, sp, pc}
    e744:	03000004 	movweq	r0, #4
    e748:	1e7f8c91 	mrcne	12, 3, r8, cr15, cr1, {4}
    e74c:	00026d34 	andeq	r6, r2, r4, lsr sp
    e750:	000000fc 	strdeq	r0, [r0], -ip
    e754:	004f1b1d 	subeq	r1, pc, sp, lsl fp	; <UNPREDICTABLE>
    e758:	01540100 	cmpeq	r4, r0, lsl #2
    e75c:	00000c55 	andeq	r0, r0, r5, asr ip
    e760:	7f849103 	svcvc	0x00849103
    e764:	004acd1d 	subeq	ip, sl, sp, lsl sp
    e768:	015f0100 	cmpeq	pc, r0, lsl #2
    e76c:	00000cbb 			; <UNDEFINED> instruction: 0x00000cbb
    e770:	7efc9103 	nrmvce	f1, f3
    e774:	004c4c1d 	subeq	r4, ip, sp, lsl ip
    e778:	01670100 	cmneq	r7, r0, lsl #2
    e77c:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
    e780:	7ee89103 	urdvce	f1, f3
    e784:	040f0000 	streq	r0, [pc], #-0	; e78c <__module_entries_end+0x66ac>
    e788:	0000027a 	andeq	r0, r0, sl, ror r2
    e78c:	10aa040f 	adcne	r0, sl, pc, lsl #8
    e790:	d6100000 	ldrle	r0, [r0], -r0
    e794:	1f000002 	svcne	0x00000002
    e798:	00004ed4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    e79c:	c501ad01 	strgt	sl, [r1, #-3329]	; 0xfffff2ff
    e7a0:	80000003 	andhi	r0, r0, r3
    e7a4:	f0000270 			; <UNDEFINED> instruction: 0xf0000270
    e7a8:	01000000 	mrseq	r0, (UNDEF: 0)
    e7ac:	00112e9c 	mulseq	r1, ip, lr
    e7b0:	43af2000 			; <UNDEFINED> instruction: 0x43af2000
    e7b4:	ad010000 	stcge	0, cr0, [r1, #-0]
    e7b8:	000f6b01 	andeq	r6, pc, r1, lsl #22
    e7bc:	5c910200 	lfmpl	f0, 4, [r1], {0}
    e7c0:	00265320 	eoreq	r5, r6, r0, lsr #6
    e7c4:	01ad0100 			; <UNDEFINED> instruction: 0x01ad0100
    e7c8:	00000450 	andeq	r0, r0, r0, asr r4
    e7cc:	20589102 	subscs	r9, r8, r2, lsl #2
    e7d0:	000021e5 	andeq	r2, r0, r5, ror #3
    e7d4:	a901ad01 	stmdbge	r1, {r0, r8, sl, fp, sp, pc}
    e7d8:	02000003 	andeq	r0, r0, #3
    e7dc:	a61d5491 			; <UNDEFINED> instruction: 0xa61d5491
    e7e0:	01000036 	tsteq	r0, r6, lsr r0
    e7e4:	03a901b1 			; <UNDEFINED> instruction: 0x03a901b1
    e7e8:	91020000 	mrsls	r0, (UNDEF: 2)
    e7ec:	30de1d6c 	sbcscc	r1, lr, ip, ror #26
    e7f0:	b3010000 	movwlt	r0, #4096	; 0x1000
    e7f4:	0003c501 	andeq	ip, r3, r1, lsl #10
    e7f8:	68910200 	ldmvs	r1, {r9}
    e7fc:	0271001e 	rsbseq	r0, r1, #30
    e800:	00002000 	andeq	r2, r0, r0
    e804:	283c1d00 	ldmdacs	ip!, {r8, sl, fp, ip}
    e808:	bb010000 	bllt	4e810 <mailbuffer+0x13720>
    e80c:	0003c501 	andeq	ip, r3, r1, lsl #10
    e810:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    e814:	ff1f0000 			; <UNDEFINED> instruction: 0xff1f0000
    e818:	0100004a 	tsteq	r0, sl, asr #32
    e81c:	03c501c8 	biceq	r0, r5, #200, 2	; 0x32
    e820:	71700000 	cmnvc	r0, r0
    e824:	00f00002 	rscseq	r0, r0, r2
    e828:	9c010000 	stcls	0, cr0, [r1], {-0}
    e82c:	000011ad 	andeq	r1, r0, sp, lsr #3
    e830:	0043af20 	subeq	sl, r3, r0, lsr #30
    e834:	01c80100 	biceq	r0, r8, r0, lsl #2
    e838:	00000f6b 	andeq	r0, r0, fp, ror #30
    e83c:	205c9102 	subscs	r9, ip, r2, lsl #2
    e840:	00002653 	andeq	r2, r0, r3, asr r6
    e844:	ad01c801 	stcge	8, cr12, [r1, #-4]
    e848:	02000011 	andeq	r0, r0, #17
    e84c:	e5205891 	str	r5, [r0, #-2193]!	; 0xfffff76f
    e850:	01000021 	tsteq	r0, r1, lsr #32
    e854:	03a901c8 			; <UNDEFINED> instruction: 0x03a901c8
    e858:	91020000 	mrsls	r0, (UNDEF: 2)
    e85c:	36a61d54 	ssatcc	r1, #7, r4, asr #26
    e860:	cc010000 	stcgt	0, cr0, [r1], {-0}
    e864:	0003a901 	andeq	sl, r3, r1, lsl #18
    e868:	6c910200 	lfmvs	f0, 4, [r1], {0}
    e86c:	0030de1d 	eorseq	sp, r0, sp, lsl lr
    e870:	01ce0100 	biceq	r0, lr, r0, lsl #2
    e874:	000003c5 	andeq	r0, r0, r5, asr #7
    e878:	1e689102 	lgnnee	f1, f2
    e87c:	000271f0 	strdeq	r7, [r2], -r0
    e880:	00000020 	andeq	r0, r0, r0, lsr #32
    e884:	00283c1d 	eoreq	r3, r8, sp, lsl ip
    e888:	01d60100 	bicseq	r0, r6, r0, lsl #2
    e88c:	000003c5 	andeq	r0, r0, r5, asr #7
    e890:	00649102 	rsbeq	r9, r4, r2, lsl #2
    e894:	b3040f00 	movwlt	r0, #20224	; 0x4f00
    e898:	21000011 	tstcs	r0, r1, lsl r0
    e89c:	004aab1f 	subeq	sl, sl, pc, lsl fp
    e8a0:	01e30100 	mvneq	r0, r0, lsl #2
    e8a4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    e8a8:	00027260 	andeq	r7, r2, r0, ror #4
    e8ac:	00000090 	muleq	r0, r0, r0
    e8b0:	11ed9c01 	mvnne	r9, r1, lsl #24
    e8b4:	af200000 	svcge	0x00200000
    e8b8:	01000043 	tsteq	r0, r3, asr #32
    e8bc:	0f6b01e3 	svceq	0x006b01e3
    e8c0:	91020000 	mrsls	r0, (UNDEF: 2)
    e8c4:	29262064 	stmdbcs	r6!, {r2, r5, r6, sp}
    e8c8:	e3010000 	movw	r0, #4096	; 0x1000
    e8cc:	0003b001 	andeq	fp, r3, r1
    e8d0:	58910200 	ldmpl	r1, {r9}
    e8d4:	4cb41f00 	ldcmi	15, cr1, [r4]
    e8d8:	ec010000 	stc	0, cr0, [r1], {-0}
    e8dc:	0003a901 	andeq	sl, r3, r1, lsl #18
    e8e0:	0272f000 	rsbseq	pc, r2, #0
    e8e4:	00007800 	andeq	r7, r0, r0, lsl #16
    e8e8:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    e8ec:	20000012 	andcs	r0, r0, r2, lsl r0
    e8f0:	000043af 	andeq	r4, r0, pc, lsr #7
    e8f4:	6b01ec01 	blvs	89900 <mailbuffer+0x4e810>
    e8f8:	0200000f 	andeq	r0, r0, #15
    e8fc:	1f006c91 	svcne	0x00006c91
    e900:	00004d59 	andeq	r4, r0, r9, asr sp
    e904:	c501f301 	strgt	pc, [r1, #-769]	; 0xfffffcff
    e908:	68000003 	stmdavs	r0, {r0, r1}
    e90c:	c0000273 	andgt	r0, r0, r3, ror r2
    e910:	01000001 	tsteq	r0, r1
    e914:	00128c9c 	mulseq	r2, ip, ip
    e918:	43af2000 			; <UNDEFINED> instruction: 0x43af2000
    e91c:	f3010000 	vhadd.u8	d0, d1, d0
    e920:	000f6b01 	andeq	r6, pc, r1, lsl #22
    e924:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    e928:	00265320 	eoreq	r5, r6, r0, lsr #6
    e92c:	01f30100 	mvnseq	r0, r0, lsl #2
    e930:	00000450 	andeq	r0, r0, r0, asr r4
    e934:	20509102 	subscs	r9, r0, r2, lsl #2
    e938:	000021e5 	andeq	r2, r0, r5, ror #3
    e93c:	a901f301 	stmdbge	r1, {r0, r8, r9, ip, sp, lr, pc}
    e940:	02000003 	andeq	r0, r0, #3
    e944:	0b1d4c91 	bleq	761b90 <mailbuffer+0x726aa0>
    e948:	0100004d 	tsteq	r0, sp, asr #32
    e94c:	03a901fe 			; <UNDEFINED> instruction: 0x03a901fe
    e950:	91020000 	mrsls	r0, (UNDEF: 2)
    e954:	4c3a1d64 	ldcmi	13, cr1, [sl], #-400	; 0xfffffe70
    e958:	04010000 	streq	r0, [r1], #-0
    e95c:	0000c302 	andeq	ip, r0, r2, lsl #6
    e960:	62910200 	addsvs	r0, r1, #0, 4
    e964:	004b211d 	subeq	r2, fp, sp, lsl r1
    e968:	02080100 	andeq	r0, r8, #0, 2
    e96c:	00000ece 	andeq	r0, r0, lr, asr #29
    e970:	00589102 	subseq	r9, r8, r2, lsl #2
    e974:	004ef51f 	subeq	pc, lr, pc, lsl r5	; <UNPREDICTABLE>
    e978:	021c0100 	andseq	r0, ip, #0, 2
    e97c:	000003c5 	andeq	r0, r0, r5, asr #7
    e980:	00027528 	andeq	r7, r2, r8, lsr #10
    e984:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    e988:	13019c01 	movwne	r9, #7169	; 0x1c01
    e98c:	af200000 	svcge	0x00200000
    e990:	01000043 	tsteq	r0, r3, asr #32
    e994:	0f6b021c 	svceq	0x006b021c
    e998:	91020000 	mrsls	r0, (UNDEF: 2)
    e99c:	26532054 			; <UNDEFINED> instruction: 0x26532054
    e9a0:	1c010000 	stcne	0, cr0, [r1], {-0}
    e9a4:	0011ad02 	andseq	sl, r1, r2, lsl #26
    e9a8:	50910200 	addspl	r0, r1, r0, lsl #4
    e9ac:	0021e520 	eoreq	lr, r1, r0, lsr #10
    e9b0:	021c0100 	andseq	r0, ip, #0, 2
    e9b4:	000003a9 	andeq	r0, r0, r9, lsr #7
    e9b8:	1d4c9102 	stfnep	f1, [ip, #-8]
    e9bc:	00004d0b 	andeq	r4, r0, fp, lsl #26
    e9c0:	a9022701 	stmdbge	r2, {r0, r8, r9, sl, sp}
    e9c4:	02000003 	andeq	r0, r0, #3
    e9c8:	3a1d6491 	bcc	767c14 <mailbuffer+0x72cb24>
    e9cc:	0100004c 	tsteq	r0, ip, asr #32
    e9d0:	00c3022d 	sbceq	r0, r3, sp, lsr #4
    e9d4:	91020000 	mrsls	r0, (UNDEF: 2)
    e9d8:	4d191d62 	ldcmi	13, cr1, [r9, #-392]	; 0xfffffe78
    e9dc:	31010000 	mrscc	r0, (UNDEF: 1)
    e9e0:	000f2e02 	andeq	r2, pc, r2, lsl #28
    e9e4:	58910200 	ldmpl	r1, {r9}
    e9e8:	4b2a1f00 	blmi	a965f0 <mailbuffer+0xa5b500>
    e9ec:	45010000 	strmi	r0, [r1, #-0]
    e9f0:	0003c502 	andeq	ip, r3, r2, lsl #10
    e9f4:	0276e400 	rsbseq	lr, r6, #0, 8
    e9f8:	00039400 	andeq	r9, r3, r0, lsl #8
    e9fc:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    ea00:	20000013 	andcs	r0, r0, r3, lsl r0
    ea04:	000043af 	andeq	r4, r0, pc, lsr #7
    ea08:	6b024501 	blvs	9fe14 <mailbuffer+0x64d24>
    ea0c:	0300000f 	movweq	r0, #15
    ea10:	207fb491 			; <UNDEFINED> instruction: 0x207fb491
    ea14:	000049ef 	andeq	r4, r0, pc, ror #19
    ea18:	50024601 	andpl	r4, r2, r1, lsl #12
    ea1c:	03000004 	movweq	r0, #4
    ea20:	207fb091 			; <UNDEFINED> instruction: 0x207fb091
    ea24:	00004c93 	muleq	r0, r3, ip
    ea28:	a9024601 	stmdbge	r2, {r0, r9, sl, lr}
    ea2c:	03000003 	movweq	r0, #3
    ea30:	207fac91 			; <UNDEFINED> instruction: 0x207fac91
    ea34:	00002653 	andeq	r2, r0, r3, asr r6
    ea38:	50024701 	andpl	r4, r2, r1, lsl #14
    ea3c:	03000004 	movweq	r0, #4
    ea40:	207fa891 			; <UNDEFINED> instruction: 0x207fa891
    ea44:	00002c0e 	andeq	r2, r0, lr, lsl #24
    ea48:	a9024701 	stmdbge	r2, {r0, r8, r9, sl, lr}
    ea4c:	02000003 	andeq	r0, r0, #3
    ea50:	62220091 	eorvs	r0, r2, #145	; 0x91
    ea54:	01006e49 	tsteq	r0, r9, asr #28
    ea58:	03cc0247 	biceq	r0, ip, #1879048196	; 0x70000004
    ea5c:	91020000 	mrsls	r0, (UNDEF: 2)
    ea60:	42432304 	submi	r2, r3, #4, 6	; 0x10000000
    ea64:	4f010057 	svcmi	0x00010057
    ea68:	000a7802 	andeq	r7, sl, r2, lsl #16
    ea6c:	48910200 	ldmmi	r1, {r9}
    ea70:	0024451d 	eoreq	r4, r4, sp, lsl r5
    ea74:	025b0100 	subseq	r0, fp, #0, 2
    ea78:	000013b7 			; <UNDEFINED> instruction: 0x000013b7
    ea7c:	1d689102 	stfnep	f1, [r8, #-8]!
    ea80:	000030de 	ldrdeq	r3, [r0], -lr
    ea84:	c5026501 	strgt	r6, [r2, #-1281]	; 0xfffffaff
    ea88:	02000003 	andeq	r0, r0, #3
    ea8c:	43236c91 	teqmi	r3, #37120	; 0x9100
    ea90:	01005753 	tsteq	r0, r3, asr r7
    ea94:	0ac00272 	beq	ff00f464 <_estack+0xf6fff464>
    ea98:	91030000 	mrsls	r0, (UNDEF: 3)
    ea9c:	0f007fb8 	svceq	0x00007fb8
    eaa0:	0009d804 	andeq	sp, r9, r4, lsl #16
    eaa4:	4cdc1f00 	ldclmi	15, cr1, [ip], {0}
    eaa8:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    eaac:	0003c502 	andeq	ip, r3, r2, lsl #10
    eab0:	027a7800 	rsbseq	r7, sl, #0, 16
    eab4:	00021800 	andeq	r1, r2, r0, lsl #16
    eab8:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    eabc:	20000013 	andcs	r0, r0, r3, lsl r0
    eac0:	000043af 	andeq	r4, r0, pc, lsr #7
    eac4:	6b029801 	blvs	b4ad0 <mailbuffer+0x799e0>
    eac8:	0200000f 	andeq	r0, r0, #15
    eacc:	451d6491 	ldrmi	r6, [sp, #-1169]	; 0xfffffb6f
    ead0:	01000024 	tsteq	r0, r4, lsr #32
    ead4:	13b7029c 			; <UNDEFINED> instruction: 0x13b7029c
    ead8:	91020000 	mrsls	r0, (UNDEF: 2)
    eadc:	e21c006c 	ands	r0, ip, #108	; 0x6c
    eae0:	01000046 	tsteq	r0, r6, asr #32
    eae4:	0003a9bb 			; <UNDEFINED> instruction: 0x0003a9bb
    eae8:	80030500 	andhi	r0, r3, r0, lsl #10
    eaec:	0b00030b 	bleq	f720 <__module_entries_end+0x7640>
    eaf0:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    eaf4:	00001417 	andeq	r1, r0, r7, lsl r4
    eaf8:	00038216 	andeq	r8, r3, r6, lsl r2
    eafc:	1c000400 	cfstrsne	mvf0, [r0], {-0}
    eb00:	00004d94 	muleq	r0, r4, sp
    eb04:	1428bd01 	strtne	fp, [r8], #-3329	; 0xfffff2ff
    eb08:	03050000 	movweq	r0, #20480	; 0x5000
    eb0c:	0002fb08 	andeq	pc, r2, r8, lsl #22
    eb10:	00140710 	andseq	r0, r4, r0, lsl r7
    eb14:	02f20000 	rscseq	r0, r2, #0
    eb18:	00040000 	andeq	r0, r4, r0
    eb1c:	0000251b 	andeq	r2, r0, fp, lsl r5
    eb20:	00190104 	andseq	r0, r9, r4, lsl #2
    eb24:	e3010000 	movw	r0, #4096	; 0x1000
    eb28:	90000050 	andls	r0, r0, r0, asr r0
    eb2c:	5400027c 	strpl	r0, [r0], #-636	; 0xfffffd84
    eb30:	cf000005 	svcgt	0x00000005
    eb34:	0200004b 	andeq	r0, r0, #75	; 0x4b
    eb38:	072a0801 	streq	r0, [sl, -r1, lsl #16]!
    eb3c:	02020000 	andeq	r0, r2, #0
    eb40:	00013207 	andeq	r3, r1, r7, lsl #4
    eb44:	33750300 	cmncc	r5, #0, 6
    eb48:	19030032 	stmdbne	r3, {r1, r4, r5}
    eb4c:	0000003a 	andeq	r0, r0, sl, lsr r0
    eb50:	1d070402 	cfstrsne	mvf0, [r7, #-8]
    eb54:	02000007 	andeq	r0, r0, #7
    eb58:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
    eb5c:	01020000 	mrseq	r0, (UNDEF: 2)
    eb60:	00073306 	andeq	r3, r7, r6, lsl #6
    eb64:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    eb68:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    eb6c:	69050404 	stmdbvs	r5, {r2, sl}
    eb70:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
    eb74:	00002930 	andeq	r2, r0, r0, lsr r9
    eb78:	00562003 	subseq	r2, r6, r3
    eb7c:	04020000 	streq	r0, [r2], #-0
    eb80:	00071807 	andeq	r1, r7, r7, lsl #16
    eb84:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    eb88:	00000798 	muleq	r0, r8, r7
    eb8c:	00250d06 	eoreq	r0, r5, r6, lsl #26
    eb90:	1d021800 	stcne	8, cr1, [r2, #-0]
    eb94:	000000cb 	andeq	r0, r0, fp, asr #1
    eb98:	0039ce07 	eorseq	ip, r9, r7, lsl #28
    eb9c:	dc1f0200 	lfmle	f0, 4, [pc], {-0}
    eba0:	00000000 	andeq	r0, r0, r0
    eba4:	00508607 	subseq	r8, r0, r7, lsl #12
    eba8:	dc210200 	sfmle	f0, 4, [r1], #-0
    ebac:	04000000 	streq	r0, [r0], #-0
    ebb0:	00504707 	subseq	r4, r0, r7, lsl #14
    ebb4:	f1220200 			; <UNDEFINED> instruction: 0xf1220200
    ebb8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ebbc:	0036f407 	eorseq	pc, r6, r7, lsl #8
    ebc0:	07230200 	streq	r0, [r3, -r0, lsl #4]!
    ebc4:	0c000001 	stceq	0, cr0, [r0], {1}
    ebc8:	004fe907 	subeq	lr, pc, r7, lsl #18
    ebcc:	dc250200 	sfmle	f0, 4, [r5], #-0
    ebd0:	10000000 	andne	r0, r0, r0
    ebd4:	004fc007 	subeq	ip, pc, r7
    ebd8:	f1270200 			; <UNDEFINED> instruction: 0xf1270200
    ebdc:	14000000 	strne	r0, [r0], #-0
    ebe0:	00d60800 	sbcseq	r0, r6, r0, lsl #16
    ebe4:	d6090000 	strle	r0, [r9], -r0
    ebe8:	00000000 	andeq	r0, r0, r0
    ebec:	0076040a 	rsbseq	r0, r6, sl, lsl #8
    ebf0:	040a0000 	streq	r0, [sl], #-0
    ebf4:	000000cb 	andeq	r0, r0, fp, asr #1
    ebf8:	00005d0b 	andeq	r5, r0, fp, lsl #26
    ebfc:	0000f100 	andeq	pc, r0, r0, lsl #2
    ec00:	00d60900 	sbcseq	r0, r6, r0, lsl #18
    ec04:	0a000000 	beq	ec0c <__module_entries_end+0x6b2c>
    ec08:	0000e204 	andeq	lr, r0, r4, lsl #4
    ec0c:	01070800 	tsteq	r7, r0, lsl #16
    ec10:	d6090000 	strle	r0, [r9], -r0
    ec14:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ec18:	0000002f 	andeq	r0, r0, pc, lsr #32
    ec1c:	f7040a00 			; <UNDEFINED> instruction: 0xf7040a00
    ec20:	05000000 	streq	r0, [r0, #-0]
    ec24:	0000250d 	andeq	r2, r0, sp, lsl #10
    ec28:	00762902 	rsbseq	r2, r6, r2, lsl #18
    ec2c:	6c060000 	stcvs	0, cr0, [r6], {-0}
    ec30:	20000035 	andcs	r0, r0, r5, lsr r0
    ec34:	01491a04 	cmpeq	r9, r4, lsl #20
    ec38:	cd070000 	stcgt	0, cr0, [r7, #-0]
    ec3c:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    ec40:	00010d1c 	andeq	r0, r1, ip, lsl sp
    ec44:	8c070000 	stchi	0, cr0, [r7], {-0}
    ec48:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    ec4c:	00003a1e 	andeq	r3, r0, lr, lsl sl
    ec50:	a4071800 	strge	r1, [r7], #-2048	; 0xfffff800
    ec54:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    ec58:	00003a1f 	andeq	r3, r0, pc, lsl sl
    ec5c:	05001c00 	streq	r1, [r0, #-3072]	; 0xfffff400
    ec60:	0000356c 	andeq	r3, r0, ip, ror #10
    ec64:	01182104 	tsteq	r8, r4, lsl #2
    ec68:	010c0000 	mrseq	r0, (UNDEF: 12)
    ec6c:	01871c01 	orreq	r1, r7, r1, lsl #24
    ec70:	f90d0000 			; <UNDEFINED> instruction: 0xf90d0000
    ec74:	0000002e 	andeq	r0, r0, lr, lsr #32
    ec78:	004ff60d 	subeq	pc, pc, sp, lsl #12
    ec7c:	b70d0100 	strlt	r0, [sp, -r0, lsl #2]
    ec80:	0200002c 	andeq	r0, r0, #44	; 0x2c
    ec84:	0050550d 	subseq	r5, r0, sp, lsl #10
    ec88:	0e0d0300 	cdpeq	3, 0, cr0, cr13, cr0, {0}
    ec8c:	04000050 	streq	r0, [r0], #-80	; 0xffffffb0
    ec90:	004f830d 	subeq	r8, pc, sp, lsl #6
    ec94:	200d0500 	andcs	r0, sp, r0, lsl #10
    ec98:	0600002d 	streq	r0, [r0], -sp, lsr #32
    ec9c:	356d0e00 	strbcc	r0, [sp, #-3584]!	; 0xfffff200
    eca0:	27010000 	strcs	r0, [r1, -r0]
    eca4:	00027c90 	muleq	r2, r0, ip
    eca8:	000000dc 	ldrdeq	r0, [r0], -ip
    ecac:	01b99c01 			; <UNDEFINED> instruction: 0x01b99c01
    ecb0:	af0f0000 	svcge	0x000f0000
    ecb4:	01000043 	tsteq	r0, r3, asr #32
    ecb8:	0001b927 	andeq	fp, r1, r7, lsr #18
    ecbc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    ecc0:	004f9c10 	subeq	r9, pc, r0, lsl ip	; <UNPREDICTABLE>
    ecc4:	bf2b0100 	svclt	0x002b0100
    ecc8:	02000001 	andeq	r0, r0, #1
    eccc:	0a006c91 	beq	29f18 <USBKeyboardDeviceGetKeyCode+0x24>
    ecd0:	00014904 	andeq	r4, r1, r4, lsl #18
    ecd4:	0d040a00 	vstreq	s0, [r4, #-0]
    ecd8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    ecdc:	00005091 	muleq	r0, r1, r0
    ece0:	7d6c3701 	stclvc	7, cr3, [ip, #-4]!
    ece4:	007c0002 	rsbseq	r0, ip, r2
    ece8:	9c010000 	stcls	0, cr0, [r1], {-0}
    ecec:	000001f7 	strdeq	r0, [r0], -r7
    ecf0:	004f9c0f 	subeq	r9, pc, pc, lsl #24
    ecf4:	bf370100 	svclt	0x00370100
    ecf8:	02000001 	andeq	r0, r0, #1
    ecfc:	af106491 	svcge	0x00106491
    ed00:	01000043 	tsteq	r0, r3, asr #32
    ed04:	0001b939 	andeq	fp, r1, r9, lsr r9
    ed08:	6c910200 	lfmvs	f0, 4, [r1], {0}
    ed0c:	50680e00 	rsbpl	r0, r8, r0, lsl #28
    ed10:	3f010000 	svccc	0x00010000
    ed14:	00027de8 	andeq	r7, r2, r8, ror #27
    ed18:	0000007c 	andeq	r0, r0, ip, ror r0
    ed1c:	02299c01 	eoreq	r9, r9, #256	; 0x100
    ed20:	9c0f0000 	stcls	0, cr0, [pc], {-0}
    ed24:	0100004f 	tsteq	r0, pc, asr #32
    ed28:	0001bf3f 	andeq	fp, r1, pc, lsr pc
    ed2c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    ed30:	0043af10 	subeq	sl, r3, r0, lsl pc
    ed34:	b9410100 	stmdblt	r1, {r8}^
    ed38:	02000001 	andeq	r0, r0, #1
    ed3c:	11006c91 			; <UNDEFINED> instruction: 0x11006c91
    ed40:	00005029 	andeq	r5, r0, r9, lsr #32
    ed44:	005d4701 	subseq	r4, sp, r1, lsl #14
    ed48:	7e640000 	cdpvc	0, 6, cr0, cr4, cr0, {0}
    ed4c:	01080002 	tsteq	r8, r2
    ed50:	9c010000 	stcls	0, cr0, [r1], {-0}
    ed54:	0000026d 	andeq	r0, r0, sp, ror #4
    ed58:	004f9c0f 	subeq	r9, pc, pc, lsl #24
    ed5c:	bf470100 	svclt	0x00470100
    ed60:	02000001 	andeq	r0, r0, #1
    ed64:	af106491 	svcge	0x00106491
    ed68:	01000043 	tsteq	r0, r3, asr #32
    ed6c:	0001b949 	andeq	fp, r1, r9, asr #18
    ed70:	68910200 	ldmvs	r1, {r9}
    ed74:	00422010 	subeq	r2, r2, r0, lsl r0
    ed78:	5d4c0100 	stfple	f0, [ip, #-0]
    ed7c:	02000000 	andeq	r0, r0, #0
    ed80:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
    ed84:	000050b1 	strheq	r5, [r0], -r1
    ed88:	7f6c6801 	svcvc	0x006c6801
    ed8c:	01e40002 	mvneq	r0, r2
    ed90:	9c010000 	stcls	0, cr0, [r1], {-0}
    ed94:	000002ad 	andeq	r0, r0, sp, lsr #5
    ed98:	004f9c0f 	subeq	r9, pc, pc, lsl #24
    ed9c:	bf680100 	svclt	0x00680100
    eda0:	02000001 	andeq	r0, r0, #1
    eda4:	3c0f6491 	cfstrscc	mvf6, [pc], {145}	; 0x91
    eda8:	01000028 	tsteq	r0, r8, lsr #32
    edac:	00002f68 	andeq	r2, r0, r8, ror #30
    edb0:	60910200 	addsvs	r0, r1, r0, lsl #4
    edb4:	0043af10 	subeq	sl, r3, r0, lsl pc
    edb8:	b96a0100 	stmdblt	sl!, {r8}^
    edbc:	02000001 	andeq	r0, r0, #1
    edc0:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
    edc4:	00004fcb 	andeq	r4, r0, fp, asr #31
    edc8:	81509e01 	cmphi	r0, r1, lsl #28
    edcc:	00440002 	subeq	r0, r4, r2
    edd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    edd4:	000002d1 	ldrdeq	r0, [r0], -r1
    edd8:	004f9c0f 	subeq	r9, pc, pc, lsl #24
    eddc:	bf9e0100 	svclt	0x009e0100
    ede0:	02000001 	andeq	r0, r0, #1
    ede4:	12006c91 	andne	r6, r0, #37120	; 0x9100
    ede8:	00004fa2 	andeq	r4, r0, r2, lsr #31
    edec:	005da201 	subseq	sl, sp, r1, lsl #4
    edf0:	81940000 	orrshi	r0, r4, r0
    edf4:	00500002 	subseq	r0, r0, r2
    edf8:	9c010000 	stcls	0, cr0, [r1], {-0}
    edfc:	004f9c0f 	subeq	r9, pc, pc, lsl #24
    ee00:	bfa20100 	svclt	0x00a20100
    ee04:	02000001 	andeq	r0, r0, #1
    ee08:	00006c91 	muleq	r0, r1, ip
    ee0c:	00000364 	andeq	r0, r0, r4, ror #6
    ee10:	26230004 	strtcs	r0, [r3], -r4
    ee14:	01040000 	mrseq	r0, (UNDEF: 4)
    ee18:	00000019 	andeq	r0, r0, r9, lsl r0
    ee1c:	0051f101 	subseq	pc, r1, r1, lsl #2
    ee20:	0281e400 	addeq	lr, r1, #0, 8
    ee24:	00069800 	andeq	r9, r6, r0, lsl #16
    ee28:	004d8100 	subeq	r8, sp, r0, lsl #2
    ee2c:	08010200 	stmdaeq	r1, {r9}
    ee30:	0000072a 	andeq	r0, r0, sl, lsr #14
    ee34:	32070202 	andcc	r0, r7, #536870912	; 0x20000000
    ee38:	03000001 	movweq	r0, #1
    ee3c:	00323375 	eorseq	r3, r2, r5, ror r3
    ee40:	003a1903 	eorseq	r1, sl, r3, lsl #18
    ee44:	04020000 	streq	r0, [r2], #-0
    ee48:	00071d07 	andeq	r1, r7, r7, lsl #26
    ee4c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    ee50:	00000713 	andeq	r0, r0, r3, lsl r7
    ee54:	33060102 	movwcc	r0, #24834	; 0x6102
    ee58:	02000007 	andeq	r0, r0, #7
    ee5c:	07b80502 	ldreq	r0, [r8, r2, lsl #10]!
    ee60:	04040000 	streq	r0, [r4], #-0
    ee64:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    ee68:	29300500 	ldmdbcs	r0!, {r8, sl}
    ee6c:	20030000 	andcs	r0, r3, r0
    ee70:	00000056 	andeq	r0, r0, r6, asr r0
    ee74:	18070402 	stmdane	r7, {r1, sl}
    ee78:	02000007 	andeq	r0, r0, #7
    ee7c:	07980504 	ldreq	r0, [r8, r4, lsl #10]
    ee80:	0d060000 	stceq	0, cr0, [r6, #-0]
    ee84:	18000025 	stmdane	r0, {r0, r2, r5}
    ee88:	00cb1d02 	sbceq	r1, fp, r2, lsl #26
    ee8c:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    ee90:	02000039 	andeq	r0, r0, #57	; 0x39
    ee94:	0000dc1f 	andeq	sp, r0, pc, lsl ip
    ee98:	86070000 	strhi	r0, [r7], -r0
    ee9c:	02000050 	andeq	r0, r0, #80	; 0x50
    eea0:	0000dc21 	andeq	sp, r0, r1, lsr #24
    eea4:	47070400 	strmi	r0, [r7, -r0, lsl #8]
    eea8:	02000050 	andeq	r0, r0, #80	; 0x50
    eeac:	0000f122 	andeq	pc, r0, r2, lsr #2
    eeb0:	f4070800 	vst2.8	{d0-d1}, [r7], r0
    eeb4:	02000036 	andeq	r0, r0, #54	; 0x36
    eeb8:	00010723 	andeq	r0, r1, r3, lsr #14
    eebc:	e9070c00 	stmdb	r7, {sl, fp}
    eec0:	0200004f 	andeq	r0, r0, #79	; 0x4f
    eec4:	0000dc25 	andeq	sp, r0, r5, lsr #24
    eec8:	c0071000 	andgt	r1, r7, r0
    eecc:	0200004f 	andeq	r0, r0, #79	; 0x4f
    eed0:	0000f127 	andeq	pc, r0, r7, lsr #2
    eed4:	08001400 	stmdaeq	r0, {sl, ip}
    eed8:	000000d6 	ldrdeq	r0, [r0], -r6
    eedc:	0000d609 	andeq	sp, r0, r9, lsl #12
    eee0:	040a0000 	streq	r0, [sl], #-0
    eee4:	00000076 	andeq	r0, r0, r6, ror r0
    eee8:	00cb040a 	sbceq	r0, fp, sl, lsl #8
    eeec:	5d0b0000 	stcpl	0, cr0, [fp, #-0]
    eef0:	f1000000 	cps	#0
    eef4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    eef8:	000000d6 	ldrdeq	r0, [r0], -r6
    eefc:	e2040a00 	and	r0, r4, #0, 20
    ef00:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ef04:	00000107 	andeq	r0, r0, r7, lsl #2
    ef08:	0000d609 	andeq	sp, r0, r9, lsl #12
    ef0c:	002f0900 	eoreq	r0, pc, r0, lsl #18
    ef10:	0a000000 	beq	ef18 <__module_entries_end+0x6e38>
    ef14:	0000f704 	andeq	pc, r0, r4, lsl #14
    ef18:	250d0500 	strcs	r0, [sp, #-1280]	; 0xfffffb00
    ef1c:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    ef20:	00000076 	andeq	r0, r0, r6, ror r0
    ef24:	00372506 	eorseq	r2, r7, r6, lsl #10
    ef28:	1a042400 	bne	117f30 <mailbuffer+0xdce40>
    ef2c:	00000155 	andeq	r0, r0, r5, asr r1
    ef30:	0039cd07 	eorseq	ip, r9, r7, lsl #26
    ef34:	0d1c0400 	cfldrseq	mvf0, [ip, #-0]
    ef38:	00000001 	andeq	r0, r0, r1
    ef3c:	00288c07 	eoreq	r8, r8, r7, lsl #24
    ef40:	3a1e0400 	bcc	78ff48 <mailbuffer+0x754e58>
    ef44:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    ef48:	0036a407 	eorseq	sl, r6, r7, lsl #8
    ef4c:	3a1f0400 	bcc	7cff54 <mailbuffer+0x794e64>
    ef50:	1c000000 	stcne	0, cr0, [r0], {-0}
    ef54:	00383507 	eorseq	r3, r8, r7, lsl #10
    ef58:	3a210400 	bcc	84ff60 <mailbuffer+0x814e70>
    ef5c:	20000000 	andcs	r0, r0, r0
    ef60:	37250500 	strcc	r0, [r5, -r0, lsl #10]!
    ef64:	23040000 	movwcs	r0, #16384	; 0x4000
    ef68:	00000118 	andeq	r0, r0, r8, lsl r1
    ef6c:	002e9f06 	eoreq	r9, lr, r6, lsl #30
    ef70:	1e050c00 	cdpne	12, 0, cr0, cr5, cr0, {0}
    ef74:	00000191 	muleq	r0, r1, r1
    ef78:	00268a07 	eoreq	r8, r6, r7, lsl #20
    ef7c:	5d200500 	cfstr32pl	mvfx0, [r0, #-0]
    ef80:	00000000 	andeq	r0, r0, r0
    ef84:	0030f807 	eorseq	pc, r0, r7, lsl #16
    ef88:	2f210500 	svccs	0x00210500
    ef8c:	04000000 	streq	r0, [r0], #-0
    ef90:	002ec407 	eoreq	ip, lr, r7, lsl #8
    ef94:	2f220500 	svccs	0x00220500
    ef98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ef9c:	2e9f0500 	cdpcs	5, 9, cr0, cr15, cr0, {0}
    efa0:	24050000 	strcs	r0, [r5], #-0
    efa4:	00000160 	andeq	r0, r0, r0, ror #2
    efa8:	1f01010c 	svcne	0x0001010c
    efac:	000001cf 	andeq	r0, r0, pc, asr #3
    efb0:	002ef90d 	eoreq	pc, lr, sp, lsl #18
    efb4:	f60d0000 			; <UNDEFINED> instruction: 0xf60d0000
    efb8:	0100004f 	tsteq	r0, pc, asr #32
    efbc:	002cb70d 	eoreq	fp, ip, sp, lsl #14
    efc0:	550d0200 	strpl	r0, [sp, #-512]	; 0xfffffe00
    efc4:	03000050 	movweq	r0, #80	; 0x50
    efc8:	00500e0d 	subseq	r0, r0, sp, lsl #28
    efcc:	830d0400 	movwhi	r0, #54272	; 0xd400
    efd0:	0500004f 	streq	r0, [r0, #-79]	; 0xffffffb1
    efd4:	002d200d 	eoreq	r2, sp, sp
    efd8:	0e000600 	cfmadd32eq	mvax0, mvfx0, mvfx0, mvfx0
    efdc:	00003726 	andeq	r3, r0, r6, lsr #14
    efe0:	81e42a01 	mvnhi	r2, r1, lsl #20
    efe4:	00e80002 	rsceq	r0, r8, r2
    efe8:	9c010000 	stcls	0, cr0, [r1], {-0}
    efec:	00000201 	andeq	r0, r0, r1, lsl #4
    eff0:	0043af0f 	subeq	sl, r3, pc, lsl #30
    eff4:	012a0100 	teqeq	sl, r0, lsl #2
    eff8:	02000002 	andeq	r0, r0, #2
    effc:	9c106491 	cfldrsls	mvf6, [r0], {145}	; 0x91
    f000:	0100004f 	tsteq	r0, pc, asr #32
    f004:	0002072e 	andeq	r0, r2, lr, lsr #14
    f008:	6c910200 	lfmvs	f0, 4, [r1], {0}
    f00c:	55040a00 	strpl	r0, [r4, #-2560]	; 0xfffff600
    f010:	0a000001 	beq	f01c <__module_entries_end+0x6f3c>
    f014:	00010d04 	andeq	r0, r1, r4, lsl #26
    f018:	51d40e00 	bicspl	r0, r4, r0, lsl #28
    f01c:	3b010000 	blcc	4f024 <mailbuffer+0x13f34>
    f020:	000282cc 	andeq	r8, r2, ip, asr #5
    f024:	0000007c 	andeq	r0, r0, ip, ror r0
    f028:	023f9c01 	eorseq	r9, pc, #256	; 0x100
    f02c:	9c0f0000 	stcls	0, cr0, [pc], {-0}
    f030:	0100004f 	tsteq	r0, pc, asr #32
    f034:	0002073b 	andeq	r0, r2, fp, lsr r7
    f038:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    f03c:	0043af10 	subeq	sl, r3, r0, lsl pc
    f040:	013d0100 	teqeq	sp, r0, lsl #2
    f044:	02000002 	andeq	r0, r0, #2
    f048:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
    f04c:	00005156 	andeq	r5, r0, r6, asr r1
    f050:	83484301 	movthi	r4, #33537	; 0x8301
    f054:	00880002 	addeq	r0, r8, r2
    f058:	9c010000 	stcls	0, cr0, [r1], {-0}
    f05c:	00000271 	andeq	r0, r0, r1, ror r2
    f060:	004f9c0f 	subeq	r9, pc, pc, lsl #24
    f064:	07430100 	strbeq	r0, [r3, -r0, lsl #2]
    f068:	02000002 	andeq	r0, r0, #2
    f06c:	af106491 	svcge	0x00106491
    f070:	01000043 	tsteq	r0, r3, asr #32
    f074:	00020145 	andeq	r0, r2, r5, asr #2
    f078:	6c910200 	lfmvs	f0, 4, [r1], {0}
    f07c:	51ab1100 			; <UNDEFINED> instruction: 0x51ab1100
    f080:	4c010000 	stcmi	0, cr0, [r1], {-0}
    f084:	0000005d 	andeq	r0, r0, sp, asr r0
    f088:	000283d0 	ldrdeq	r8, [r2], -r0
    f08c:	00000148 	andeq	r0, r0, r8, asr #2
    f090:	02b59c01 	adcseq	r9, r5, #256	; 0x100
    f094:	9c0f0000 	stcls	0, cr0, [pc], {-0}
    f098:	0100004f 	tsteq	r0, pc, asr #32
    f09c:	0002074c 	andeq	r0, r2, ip, asr #14
    f0a0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    f0a4:	0043af10 	subeq	sl, r3, r0, lsl pc
    f0a8:	014e0100 	mrseq	r0, (UNDEF: 94)
    f0ac:	02000002 	andeq	r0, r0, #2
    f0b0:	20106891 	mulscs	r0, r1, r8
    f0b4:	01000042 	tsteq	r0, r2, asr #32
    f0b8:	00005d51 	andeq	r5, r0, r1, asr sp
    f0bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    f0c0:	517c0e00 	cmnpl	ip, r0, lsl #28
    f0c4:	6d010000 	stcvs	0, cr0, [r1, #-0]
    f0c8:	00028518 	andeq	r8, r2, r8, lsl r5
    f0cc:	000001c0 	andeq	r0, r0, r0, asr #3
    f0d0:	02f59c01 	rscseq	r9, r5, #256	; 0x100
    f0d4:	9c0f0000 	stcls	0, cr0, [pc], {-0}
    f0d8:	0100004f 	tsteq	r0, pc, asr #32
    f0dc:	0002076d 	andeq	r0, r2, sp, ror #14
    f0e0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    f0e4:	00283c0f 	eoreq	r3, r8, pc, lsl #24
    f0e8:	2f6d0100 	svccs	0x006d0100
    f0ec:	02000000 	andeq	r0, r0, #0
    f0f0:	af106091 	svcge	0x00106091
    f0f4:	01000043 	tsteq	r0, r3, asr #32
    f0f8:	0002016f 	andeq	r0, r2, pc, ror #2
    f0fc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    f100:	527d0e00 	rsbspl	r0, sp, #0, 28
    f104:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    f108:	000286d8 	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
    f10c:	0000010c 	andeq	r0, r0, ip, lsl #2
    f110:	03359c01 	teqeq	r5, #256	; 0x100
    f114:	9c0f0000 	stcls	0, cr0, [pc], {-0}
    f118:	0100004f 	tsteq	r0, pc, asr #32
    f11c:	0002079e 	muleq	r2, lr, r7
    f120:	5c910200 	lfmpl	f0, 4, [r1], {0}
    f124:	0043af10 	subeq	sl, r3, r0, lsl pc
    f128:	01a00100 	lsleq	r0, r0, #2
    f12c:	02000002 	andeq	r0, r0, #2
    f130:	4a106c91 	bmi	42a37c <mailbuffer+0x3ef28c>
    f134:	01000051 	qaddeq	r0, r1, r0
    f138:	000191a3 	andeq	r9, r1, r3, lsr #3
    f13c:	60910200 	addsvs	r0, r1, r0, lsl #4
    f140:	52571200 	subspl	r1, r7, #0, 4
    f144:	b7010000 	strlt	r0, [r1, -r0]
    f148:	0000005d 	andeq	r0, r0, sp, asr r0
    f14c:	000287e4 	andeq	r8, r2, r4, ror #15
    f150:	00000098 	muleq	r0, r8, r0
    f154:	9c0f9c01 	stcls	12, cr9, [pc], {1}
    f158:	0100004f 	tsteq	r0, pc, asr #32
    f15c:	000207b7 			; <UNDEFINED> instruction: 0x000207b7
    f160:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    f164:	0043af10 	subeq	sl, r3, r0, lsl pc
    f168:	01b90100 			; <UNDEFINED> instruction: 0x01b90100
    f16c:	02000002 	andeq	r0, r0, #2
    f170:	00006c91 	muleq	r0, r1, ip
    f174:	00000513 	andeq	r0, r0, r3, lsl r5
    f178:	272b0004 	strcs	r0, [fp, -r4]!
    f17c:	01040000 	mrseq	r0, (UNDEF: 4)
    f180:	00000019 	andeq	r0, r0, r9, lsl r0
    f184:	00548e01 	subseq	r8, r4, r1, lsl #28
    f188:	02887c00 	addeq	r7, r8, #0, 24
    f18c:	0007dc00 	andeq	sp, r7, r0, lsl #24
    f190:	004f8400 	subeq	r8, pc, r0, lsl #8
    f194:	38750200 	ldmdacc	r5!, {r9}^
    f198:	2b170300 	blcs	5cfda0 <mailbuffer+0x594cb0>
    f19c:	03000000 	movweq	r0, #0
    f1a0:	072a0801 	streq	r0, [sl, -r1, lsl #16]!
    f1a4:	02030000 	andeq	r0, r3, #0
    f1a8:	00013207 	andeq	r3, r1, r7, lsl #4
    f1ac:	07040300 	streq	r0, [r4, -r0, lsl #6]
    f1b0:	0000071d 	andeq	r0, r0, sp, lsl r7
    f1b4:	13070803 	movwne	r0, #30723	; 0x7803
    f1b8:	03000007 	movweq	r0, #7
    f1bc:	07330601 	ldreq	r0, [r3, -r1, lsl #12]!
    f1c0:	02030000 	andeq	r0, r3, #0
    f1c4:	0007b805 	andeq	fp, r7, r5, lsl #16
    f1c8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    f1cc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    f1d0:	00293005 	eoreq	r3, r9, r5
    f1d4:	55200300 	strpl	r0, [r0, #-768]!	; 0xfffffd00
    f1d8:	03000000 	movweq	r0, #0
    f1dc:	07180704 	ldreq	r0, [r8, -r4, lsl #14]
    f1e0:	04030000 	streq	r0, [r3], #-0
    f1e4:	00079805 	andeq	r9, r7, r5, lsl #16
    f1e8:	02010600 	andeq	r0, r1, #0, 12
    f1ec:	0001f020 	andeq	pc, r1, r0, lsr #32
    f1f0:	1dfc0700 	ldclne	7, cr0, [ip]
    f1f4:	07000000 	streq	r0, [r0, -r0]
    f1f8:	00001df3 	strdeq	r1, [r0], -r3
    f1fc:	16070180 	strne	r0, [r7], -r0, lsl #3
    f200:	8100001e 	tsthi	r0, lr, lsl r0
    f204:	1cd00701 	ldclne	7, cr0, [r0], {1}
    f208:	01820000 	orreq	r0, r2, r0
    f20c:	001c2407 	andseq	r2, ip, r7, lsl #8
    f210:	07018300 	streq	r8, [r1, -r0, lsl #6]
    f214:	00001ce9 	andeq	r1, r0, r9, ror #25
    f218:	31070184 	smlabbcc	r7, r4, r1, r0
    f21c:	8500001c 	strhi	r0, [r0, #-28]	; 0xffffffe4
    f220:	1c4b0701 	mcrrne	7, 0, r0, fp, cr1
    f224:	01860000 	orreq	r0, r6, r0
    f228:	001eea07 	andseq	lr, lr, r7, lsl #20
    f22c:	07018700 	streq	r8, [r1, -r0, lsl #14]
    f230:	00001c68 	andeq	r1, r0, r8, ror #24
    f234:	3f070188 	svccc	0x00070188
    f238:	8900001d 	stmdbhi	r0, {r0, r2, r3, r4}
    f23c:	1cdd0701 	ldclne	7, cr0, [sp], {1}
    f240:	018a0000 	orreq	r0, sl, r0
    f244:	001efc07 	andseq	pc, lr, r7, lsl #24
    f248:	07018b00 	streq	r8, [r1, -r0, lsl #22]
    f24c:	00001ef4 	strdeq	r1, [r0], -r4
    f250:	0e07018c 	adfeqd	f0, f7, #4.0
    f254:	8d00001e 	stchi	0, cr0, [r0, #-120]	; 0xffffff88
    f258:	1cc70701 	stclne	7, cr0, [r7], {1}
    f25c:	018e0000 	orreq	r0, lr, r0
    f260:	001ea307 	andseq	sl, lr, r7, lsl #6
    f264:	07018f00 	streq	r8, [r1, -r0, lsl #30]
    f268:	00001ea9 	andeq	r1, r0, r9, lsr #29
    f26c:	af070190 	svcge	0x00070190
    f270:	9100001e 	tstls	r0, lr, lsl r0
    f274:	1eb50701 	cdpne	7, 11, cr0, cr5, cr1, {0}
    f278:	01920000 	orrseq	r0, r2, r0
    f27c:	001ebb07 	andseq	fp, lr, r7, lsl #22
    f280:	07019300 	streq	r9, [r1, -r0, lsl #6]
    f284:	00001ec1 	andeq	r1, r0, r1, asr #29
    f288:	c7070194 			; <UNDEFINED> instruction: 0xc7070194
    f28c:	9500001e 	strls	r0, [r0, #-30]	; 0xffffffe2
    f290:	1ecd0701 	cdpne	7, 12, cr0, cr13, cr1, {0}
    f294:	01960000 	orrseq	r0, r6, r0
    f298:	001ed307 	andseq	sp, lr, r7, lsl #6
    f29c:	07019700 	streq	r9, [r1, -r0, lsl #14]
    f2a0:	00001c53 	andeq	r1, r0, r3, asr ip
    f2a4:	5a070198 	bpl	1cf90c <mailbuffer+0x19481c>
    f2a8:	9900001c 	stmdbls	r0, {r2, r3, r4}
    f2ac:	1c610701 	stclne	7, cr0, [r1], #-4
    f2b0:	019a0000 	orrseq	r0, sl, r0
    f2b4:	001e7f07 	andseq	r7, lr, r7, lsl #30
    f2b8:	07019b00 	streq	r9, [r1, -r0, lsl #22]
    f2bc:	00001bf6 	strdeq	r1, [r0], -r6
    f2c0:	1007019c 	mulne	r7, ip, r1
    f2c4:	9d00001d 	stcls	0, cr0, [r0, #-116]	; 0xffffff8c
    f2c8:	1dd70701 	ldclne	7, cr0, [r7, #4]
    f2cc:	019e0000 	orrseq	r0, lr, r0
    f2d0:	001ed907 	andseq	sp, lr, r7, lsl #18
    f2d4:	07019f00 	streq	r9, [r1, -r0, lsl #30]
    f2d8:	00001c02 	andeq	r1, r0, r2, lsl #24
    f2dc:	8d0701a0 	stfhis	f0, [r7, #-640]	; 0xfffffd80
    f2e0:	a100001d 	tstge	r0, sp, lsl r0
    f2e4:	1dbf0701 	ldcne	7, cr0, [pc, #4]!	; f2f0 <__module_entries_end+0x7210>
    f2e8:	01a20000 			; <UNDEFINED> instruction: 0x01a20000
    f2ec:	001d6e07 	andseq	r6, sp, r7, lsl #28
    f2f0:	0701a300 	streq	sl, [r1, -r0, lsl #6]
    f2f4:	00001e04 	andeq	r1, r0, r4, lsl #28
    f2f8:	200701a4 	andcs	r0, r7, r4, lsr #3
    f2fc:	a500001e 	strge	r0, [r0, #-30]	; 0xffffffe2
    f300:	1d270701 	stcne	7, cr0, [r7, #-4]!
    f304:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
    f308:	001d2f07 	andseq	r2, sp, r7, lsl #30
    f30c:	0701a700 	streq	sl, [r1, -r0, lsl #14]
    f310:	00001d37 	andeq	r1, r0, r7, lsr sp
    f314:	e20701a8 	and	r0, r7, #168, 2	; 0x2a
    f318:	a900001e 	stmdbge	r0, {r1, r2, r3, r4}
    f31c:	1d460701 	stclne	7, cr0, [r6, #-4]
    f320:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    f324:	001d4e07 	andseq	r4, sp, r7, lsl #28
    f328:	0701ab00 	streq	sl, [r1, -r0, lsl #22]
    f32c:	00001d56 	andeq	r1, r0, r6, asr sp
    f330:	5e0701ac 	adfpldp	f0, f7, #4.0
    f334:	ad00001d 	stcge	0, cr0, [r0, #-116]	; 0xffffff8c
    f338:	1d660701 	stclne	7, cr0, [r6, #-4]!
    f33c:	01ae0000 			; <UNDEFINED> instruction: 0x01ae0000
    f340:	001d1f07 	andseq	r1, sp, r7, lsl #30
    f344:	0701af00 	streq	sl, [r1, -r0, lsl #30]
    f348:	00001e2c 	andeq	r1, r0, ip, lsr #28
    f34c:	b30701b0 	movwlt	r0, #29104	; 0x71b0
    f350:	b100001d 	tstlt	r0, sp, lsl r0
    f354:	1caa0701 	stcne	7, cr0, [sl], #4
    f358:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    f35c:	001b9807 	andseq	r9, fp, r7, lsl #16
    f360:	0001b300 	andeq	fp, r1, r0, lsl #6
    f364:	5a020106 	bpl	8f784 <mailbuffer+0x54694>
    f368:	00000270 	andeq	r0, r0, r0, ror r2
    f36c:	00542d07 	subseq	r2, r4, r7, lsl #26
    f370:	0701b300 	streq	fp, [r1, -r0, lsl #6]
    f374:	00005459 	andeq	r5, r0, r9, asr r4
    f378:	e80701b4 	stmda	r7, {r2, r4, r5, r7, r8}
    f37c:	b5000054 	strlt	r0, [r0, #-84]	; 0xffffffac
    f380:	532d0701 	teqpl	sp, #262144	; 0x40000
    f384:	01b60000 			; <UNDEFINED> instruction: 0x01b60000
    f388:	00534207 	subseq	r4, r3, r7, lsl #4
    f38c:	0701b700 	streq	fp, [r1, -r0, lsl #14]
    f390:	00005357 	andeq	r5, r0, r7, asr r3
    f394:	6c0701b8 	stfvss	f0, [r7], {184}	; 0xb8
    f398:	b9000053 	stmdblt	r0, {r0, r1, r4, r6}
    f39c:	52e20701 	rscpl	r0, r2, #262144	; 0x40000
    f3a0:	01ba0000 			; <UNDEFINED> instruction: 0x01ba0000
    f3a4:	0053ad07 	subseq	sl, r3, r7, lsl #26
    f3a8:	0701bb00 	streq	fp, [r1, -r0, lsl #22]
    f3ac:	000053c2 	andeq	r5, r0, r2, asr #7
    f3b0:	d70701bc 			; <UNDEFINED> instruction: 0xd70701bc
    f3b4:	bd000053 	stclt	0, cr0, [r0, #-332]	; 0xfffffeb4
    f3b8:	53ec0701 	mvnpl	r0, #262144	; 0x40000
    f3bc:	01be0000 			; <UNDEFINED> instruction: 0x01be0000
    f3c0:	00538107 	subseq	r8, r3, r7, lsl #2
    f3c4:	0701bf00 	streq	fp, [r1, -r0, lsl #30]
    f3c8:	00005304 	andeq	r5, r0, r4, lsl #6
    f3cc:	970701c0 	strls	r0, [r7, -r0, asr #3]
    f3d0:	c1000053 	qaddgt	r0, r3, r0
    f3d4:	52c10701 	sbcpl	r0, r1, #262144	; 0x40000
    f3d8:	01c20000 	biceq	r0, r2, r0
    f3dc:	00541507 	subseq	r1, r4, r7, lsl #10
    f3e0:	0001c300 	andeq	ip, r1, r0, lsl #6
    f3e4:	00215008 	eoreq	r5, r1, r8
    f3e8:	02018c00 	andeq	r8, r1, #0, 24
    f3ec:	0002b16f 	andeq	fp, r2, pc, ror #2
    f3f0:	28830900 	stmcs	r3, {r8, fp}
    f3f4:	71020000 	mrsvc	r0, (UNDEF: 2)
    f3f8:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
    f3fc:	2c9c0a00 	vldmiacs	ip, {s0-s-1}
    f400:	73020000 	movwvc	r0, #8192	; 0x2000
    f404:	0000005c 	andeq	r0, r0, ip, asr r0
    f408:	8e0a0180 	adfhi<illegal precision>	f0, f2, f0
    f40c:	02000024 	andeq	r0, r0, #36	; 0x24
    f410:	00005c74 	andeq	r5, r0, r4, ror ip
    f414:	0a018400 	beq	7041c <mailbuffer+0x3532c>
    f418:	000023ac 	andeq	r2, r0, ip, lsr #7
    f41c:	005c7502 	subseq	r7, ip, r2, lsl #10
    f420:	01880000 	orreq	r0, r8, r0
    f424:	00210b00 	eoreq	r0, r1, r0, lsl #22
    f428:	02c70000 	sbceq	r0, r7, #0
    f42c:	c70c0000 	strgt	r0, [ip, -r0]
    f430:	7f000002 	svcvc	0x00000002
    f434:	0002c70c 	andeq	ip, r2, ip, lsl #14
    f438:	03000200 	movweq	r0, #512	; 0x200
    f43c:	01d40704 	bicseq	r0, r4, r4, lsl #14
    f440:	50050000 	andpl	r0, r5, r0
    f444:	02000021 	andeq	r0, r0, #33	; 0x21
    f448:	00027077 	andeq	r7, r2, r7, ror r0
    f44c:	21510d00 	cmpcs	r1, r0, lsl #26
    f450:	60010000 	andvs	r0, r1, r0
    f454:	0002887c 	andeq	r8, r2, ip, ror r8
    f458:	000000a4 	andeq	r0, r0, r4, lsr #1
    f45c:	02fd9c01 	rscseq	r9, sp, #256	; 0x100
    f460:	af0e0000 	svcge	0x000e0000
    f464:	01000043 	tsteq	r0, r3, asr #32
    f468:	0002fd60 	andeq	pc, r2, r0, ror #26
    f46c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    f470:	ce040f00 	cdpgt	15, 0, cr0, cr4, cr0, {0}
    f474:	0d000002 	stceq	0, cr0, [r0, #-8]
    f478:	00002884 	andeq	r2, r0, r4, lsl #17
    f47c:	89206c01 	stmdbhi	r0!, {r0, sl, fp, sp, lr}
    f480:	00440002 	subeq	r0, r4, r2
    f484:	9c010000 	stcls	0, cr0, [r1], {-0}
    f488:	00000327 	andeq	r0, r0, r7, lsr #6
    f48c:	0043af0e 	subeq	sl, r3, lr, lsl #30
    f490:	fd6c0100 	stc2l	1, cr0, [ip, #-0]
    f494:	02000002 	andeq	r0, r0, #2
    f498:	10006c91 	mulne	r0, r1, ip
    f49c:	0000547d 	andeq	r5, r0, sp, ror r4
    f4a0:	005c7001 	subseq	r7, ip, r1
    f4a4:	89640000 	stmdbhi	r4!, {}^	; <UNPREDICTABLE>
    f4a8:	00d80002 	sbcseq	r0, r8, r2
    f4ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    f4b0:	00000375 	andeq	r0, r0, r5, ror r3
    f4b4:	0043af0e 	subeq	sl, r3, lr, lsl #30
    f4b8:	fd700100 	ldc2l	1, cr0, [r0, #-0]
    f4bc:	02000002 	andeq	r0, r0, #2
    f4c0:	520e6491 	andpl	r6, lr, #-1862270976	; 0x91000000
    f4c4:	01000054 	qaddeq	r0, r4, r0
    f4c8:	00002170 	andeq	r2, r0, r0, ror r1
    f4cc:	63910200 	orrsvs	r0, r1, #0, 4
    f4d0:	0289cc11 	addeq	ip, r9, #4352	; 0x1100
    f4d4:	00004800 	andeq	r4, r0, r0, lsl #16
    f4d8:	52d91200 	sbcspl	r1, r9, #0, 4
    f4dc:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    f4e0:	00000039 	andeq	r0, r0, r9, lsr r0
    f4e4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    f4e8:	52a51000 	adcpl	r1, r5, #0
    f4ec:	81010000 	mrshi	r0, (UNDEF: 1)
    f4f0:	0000005c 	andeq	r0, r0, ip, asr r0
    f4f4:	00028a3c 	andeq	r8, r2, ip, lsr sl
    f4f8:	000000f8 	strdeq	r0, [r0], -r8
    f4fc:	03c79c01 	biceq	r9, r7, #256	; 0x100
    f500:	af0e0000 	svcge	0x000e0000
    f504:	01000043 	tsteq	r0, r3, asr #32
    f508:	0002fd81 	andeq	pc, r2, r1, lsl #27
    f50c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    f510:	0054520e 	subseq	r5, r4, lr, lsl #4
    f514:	21810100 	orrcs	r0, r1, r0, lsl #2
    f518:	02000000 	andeq	r0, r0, #0
    f51c:	d90e6b91 	stmdble	lr, {r0, r4, r7, r8, r9, fp, sp, lr}
    f520:	01000052 	qaddeq	r0, r2, r0
    f524:	00002181 	andeq	r2, r0, r1, lsl #3
    f528:	6a910200 	bvs	fe44fd30 <_estack+0xf643fd30>
    f52c:	002a5c0e 	eoreq	r5, sl, lr, lsl #24
    f530:	21810100 	orrcs	r0, r1, r0, lsl #2
    f534:	02000000 	andeq	r0, r0, #0
    f538:	10006991 	mulne	r0, r1, r9
    f53c:	0000546d 	andeq	r5, r0, sp, ror #8
    f540:	00219201 	eoreq	r9, r1, r1, lsl #4
    f544:	8b340000 	blhi	d0f54c <mailbuffer+0xcd445c>
    f548:	02800002 	addeq	r0, r0, #2
    f54c:	9c010000 	stcls	0, cr0, [r1], {-0}
    f550:	00000435 	andeq	r0, r0, r5, lsr r4
    f554:	0043af0e 	subeq	sl, r3, lr, lsl #30
    f558:	fd920100 	ldc2	1, cr0, [r2]
    f55c:	02000002 	andeq	r0, r0, #2
    f560:	d90e6491 	stmdble	lr, {r0, r4, r7, sl, sp, lr}
    f564:	01000052 	qaddeq	r0, r2, r0
    f568:	00002192 	muleq	r0, r2, r1
    f56c:	63910200 	orrsvs	r0, r1, #0, 4
    f570:	00540a0e 	subseq	r0, r4, lr, lsl #20
    f574:	21920100 	orrscs	r0, r2, r0, lsl #2
    f578:	02000000 	andeq	r0, r0, #0
    f57c:	b4126291 	ldrlt	r6, [r2], #-657	; 0xfffffd6f
    f580:	01000052 	qaddeq	r0, r2, r0
    f584:	0000219c 	muleq	r0, ip, r1
    f588:	6b910200 	blvs	fe44fd90 <_estack+0xf643fd90>
    f58c:	00545212 	subseq	r5, r4, r2, lsl r2
    f590:	39b00100 	ldmibcc	r0!, {r8}
    f594:	02000000 	andeq	r0, r0, #0
    f598:	d0126c91 	mulsle	r2, r1, ip
    f59c:	01000052 	qaddeq	r0, r2, r0
    f5a0:	000021c3 	andeq	r2, r0, r3, asr #3
    f5a4:	6a910200 	bvs	fe44fdac <_estack+0xf643fdac>
    f5a8:	54421000 	strbpl	r1, [r2], #-0
    f5ac:	d7010000 	strle	r0, [r1, -r0]
    f5b0:	00000495 	muleq	r0, r5, r4
    f5b4:	00028db4 			; <UNDEFINED> instruction: 0x00028db4
    f5b8:	000001d4 	ldrdeq	r0, [r0], -r4
    f5bc:	04959c01 	ldreq	r9, [r5], #3073	; 0xc01
    f5c0:	af0e0000 	svcge	0x000e0000
    f5c4:	01000043 	tsteq	r0, r3, asr #32
    f5c8:	0002fdd7 	ldrdeq	pc, [r2], -r7
    f5cc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    f5d0:	0054010e 	subseq	r0, r4, lr, lsl #2
    f5d4:	21d70100 	bicscs	r0, r7, r0, lsl #2
    f5d8:	02000000 	andeq	r0, r0, #0
    f5dc:	0a0e6391 	beq	3a8428 <mailbuffer+0x36d338>
    f5e0:	01000054 	qaddeq	r0, r4, r0
    f5e4:	000021d7 	ldrdeq	r2, [r0], -r7
    f5e8:	62910200 	addsvs	r0, r1, #0, 4
    f5ec:	000c910e 	andeq	r9, ip, lr, lsl #2
    f5f0:	a0d70100 	sbcsge	r0, r7, r0, lsl #2
    f5f4:	02000004 	andeq	r0, r0, #4
    f5f8:	02125c91 	andseq	r5, r2, #37120	; 0x9100
    f5fc:	01000048 	tsteq	r0, r8, asr #32
    f600:	000047e6 	andeq	r4, r0, r6, ror #15
    f604:	6f910200 	svcvs	0x00910200
    f608:	9b040f00 	blls	113210 <mailbuffer+0xd8120>
    f60c:	13000004 	movwne	r0, #4
    f610:	00000047 	andeq	r0, r0, r7, asr #32
    f614:	0047040f 	subeq	r0, r7, pc, lsl #8
    f618:	1a140000 	bne	50f620 <mailbuffer+0x4d4530>
    f61c:	01000053 	qaddeq	r0, r3, r0
    f620:	00210108 	eoreq	r0, r1, r8, lsl #2
    f624:	8f880000 	svchi	0x00880000
    f628:	00d00002 	sbcseq	r0, r0, r2
    f62c:	9c010000 	stcls	0, cr0, [r1], {-0}
    f630:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    f634:	0043af15 	subeq	sl, r3, r5, lsl pc
    f638:	01080100 	mrseq	r0, (UNDEF: 24)
    f63c:	000002fd 	strdeq	r0, [r0], -sp
    f640:	16649102 	strbtne	r9, [r4], -r2, lsl #2
    f644:	000030de 	ldrdeq	r3, [r0], -lr
    f648:	21010c01 	tstcs	r1, r1, lsl #24
    f64c:	02000000 	andeq	r0, r0, #0
    f650:	0b006f91 	bleq	2b49c <USBGamePadDevice+0x1ec>
    f654:	00000495 	muleq	r0, r5, r4
    f658:	000004ef 	andeq	r0, r0, pc, ror #9
    f65c:	0002c70c 	andeq	ip, r2, ip, lsl #14
    f660:	12003200 	andne	r3, r0, #0, 4
    f664:	00005420 	andeq	r5, r0, r0, lsr #8
    f668:	04df1e01 	ldrbeq	r1, [pc], #3585	; f670 <__module_entries_end+0x7590>
    f66c:	03050000 	movweq	r0, #20480	; 0x5000
    f670:	00030b84 	andeq	r0, r3, r4, lsl #23
    f674:	0052f712 	subseq	pc, r2, r2, lsl r7	; <UNPREDICTABLE>
    f678:	11550100 	cmpne	r5, r0, lsl #2
    f67c:	05000005 	streq	r0, [r0, #-5]
    f680:	03006003 	movweq	r6, #3
    f684:	02b11300 	adcseq	r1, r1, #0, 6
    f688:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    f68c:	04000010 	streq	r0, [r0], #-16
    f690:	00286900 	eoreq	r6, r8, r0, lsl #18
    f694:	19010400 	stmdbne	r1, {sl}
    f698:	01000000 	mrseq	r0, (UNDEF: 0)
    f69c:	000056a0 	andeq	r5, r0, r0, lsr #13
    f6a0:	00000ddc 	ldrdeq	r0, [r0], -ip
    f6a4:	00029058 	andeq	r9, r2, r8, asr r0
    f6a8:	00000f60 	andeq	r0, r0, r0, ror #30
    f6ac:	00005151 	andeq	r5, r0, r1, asr r1
    f6b0:	1b020102 	blne	8fac0 <mailbuffer+0x549d0>
    f6b4:	00000040 	andeq	r0, r0, r0, asr #32
    f6b8:	00254603 	eoreq	r4, r5, r3, lsl #12
    f6bc:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    f6c0:	0100002b 	tsteq	r0, fp, lsr #32
    f6c4:	0028bb03 	eoreq	fp, r8, r3, lsl #22
    f6c8:	04000200 	streq	r0, [r0], #-512	; 0xfffffe00
    f6cc:	00002213 	andeq	r2, r0, r3, lsl r2
    f6d0:	00252202 	eoreq	r2, r5, r2, lsl #4
    f6d4:	01020000 	mrseq	r0, (UNDEF: 2)
    f6d8:	006c2b02 	rsbeq	r2, ip, r2, lsl #22
    f6dc:	9a030000 	bls	cf6e4 <mailbuffer+0x945f4>
    f6e0:	00000025 	andeq	r0, r0, r5, lsr #32
    f6e4:	002c4903 	eoreq	r4, ip, r3, lsl #18
    f6e8:	21030100 	mrscs	r0, (UNDEF: 19)
    f6ec:	02000022 	andeq	r0, r0, #34	; 0x22
    f6f0:	00265b03 	eoreq	r5, r6, r3, lsl #22
    f6f4:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    f6f8:	00002421 	andeq	r2, r0, r1, lsr #8
    f6fc:	004b3102 	subeq	r3, fp, r2, lsl #2
    f700:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    f704:	00bc3402 	adcseq	r3, ip, r2, lsl #8
    f708:	76060000 	strvc	r0, [r6], -r0
    f70c:	02000022 	andeq	r0, r0, #34	; 0x22
    f710:	0000bc36 	andeq	fp, r0, r6, lsr ip
    f714:	d3060000 	movwle	r0, #24576	; 0x6000
    f718:	02000027 	andeq	r0, r0, #39	; 0x27
    f71c:	0000bc37 	andeq	fp, r0, r7, lsr ip
    f720:	f3060100 	vrhadd.u8	d0, d6, d0
    f724:	02000021 	andeq	r0, r0, #33	; 0x21
    f728:	0000c338 	andeq	ip, r0, r8, lsr r3
    f72c:	0c060200 	sfmeq	f0, 4, [r6], {-0}
    f730:	0200001f 	andeq	r0, r0, #31
    f734:	0000c339 	andeq	ip, r0, r9, lsr r3
    f738:	b3060400 	movwlt	r0, #25600	; 0x6400
    f73c:	0200002b 	andeq	r0, r0, #43	; 0x2b
    f740:	0000c33a 	andeq	ip, r0, sl, lsr r3
    f744:	07000600 	streq	r0, [r0, -r0, lsl #12]
    f748:	072a0801 	streq	r0, [sl, -r1, lsl #16]!
    f74c:	02070000 	andeq	r0, r7, #0
    f750:	00013207 	andeq	r3, r1, r7, lsl #4
    f754:	22080400 	andcs	r0, r8, #0, 8
    f758:	3d020000 	stccc	0, cr0, [r2, #-0]
    f75c:	00000077 	andeq	r0, r0, r7, ror r0
    f760:	5c021205 	sfmpl	f1, 4, [r2], {5}
    f764:	00000186 	andeq	r0, r0, r6, lsl #3
    f768:	0029a806 	eoreq	sl, r9, r6, lsl #16
    f76c:	bc5e0200 	lfmlt	f0, 2, [lr], {-0}
    f770:	00000000 	andeq	r0, r0, r0
    f774:	00242b06 	eoreq	r2, r4, r6, lsl #22
    f778:	bc5f0200 	lfmlt	f0, 2, [pc], {-0}
    f77c:	01000000 	mrseq	r0, (UNDEF: 0)
    f780:	00228c06 	eoreq	r8, r2, r6, lsl #24
    f784:	c3600200 	cmngt	r0, #0, 4
    f788:	02000000 	andeq	r0, r0, #0
    f78c:	00212806 	eoreq	r2, r1, r6, lsl #16
    f790:	bc610200 	sfmlt	f0, 2, [r1], #-0
    f794:	04000000 	streq	r0, [r0], #-0
    f798:	0022f606 	eoreq	pc, r2, r6, lsl #12
    f79c:	bc620200 	sfmlt	f0, 2, [r2], #-0
    f7a0:	05000000 	streq	r0, [r0, #-0]
    f7a4:	00279f06 	eoreq	r9, r7, r6, lsl #30
    f7a8:	bc630200 	sfmlt	f0, 2, [r3], #-0
    f7ac:	06000000 	streq	r0, [r0], -r0
    f7b0:	0025e706 	eoreq	lr, r5, r6, lsl #14
    f7b4:	bc640200 	sfmlt	f0, 2, [r4], #-0
    f7b8:	07000000 	streq	r0, [r0, -r0]
    f7bc:	002c5606 	eoreq	r5, ip, r6, lsl #12
    f7c0:	c3660200 	cmngt	r6, #0, 4
    f7c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f7c8:	00224406 	eoreq	r4, r2, r6, lsl #8
    f7cc:	c3670200 	cmngt	r7, #0, 4
    f7d0:	0a000000 	beq	f7d8 <__module_entries_end+0x76f8>
    f7d4:	00213506 	eoreq	r3, r1, r6, lsl #10
    f7d8:	c3680200 	cmngt	r8, #0, 4
    f7dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    f7e0:	0021fa06 	eoreq	pc, r1, r6, lsl #20
    f7e4:	bc690200 	sfmlt	f0, 2, [r9], #-0
    f7e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    f7ec:	00233b06 	eoreq	r3, r3, r6, lsl #22
    f7f0:	bc6a0200 	sfmlt	f0, 2, [sl], #-0
    f7f4:	0f000000 	svceq	0x00000000
    f7f8:	00232206 	eoreq	r2, r3, r6, lsl #4
    f7fc:	bc6b0200 	sfmlt	f0, 2, [fp], #-0
    f800:	10000000 	andne	r0, r0, r0
    f804:	0028a806 	eoreq	sl, r8, r6, lsl #16
    f808:	bc6c0200 	sfmlt	f0, 2, [ip], #-0
    f80c:	11000000 	mrsne	r0, (UNDEF: 0)
    f810:	28c70400 	stmiacs	r7, {sl}^
    f814:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
    f818:	000000d5 	ldrdeq	r0, [r0], -r5
    f81c:	71020905 	tstvc	r2, r5, lsl #18
    f820:	000001fa 	strdeq	r0, [r0], -sl
    f824:	0029a806 	eoreq	sl, r9, r6, lsl #16
    f828:	bc730200 	lfmlt	f0, 2, [r3], #-0
    f82c:	00000000 	andeq	r0, r0, r0
    f830:	00242b06 	eoreq	r2, r4, r6, lsl #22
    f834:	bc740200 	lfmlt	f0, 2, [r4], #-0
    f838:	01000000 	mrseq	r0, (UNDEF: 0)
    f83c:	00208806 	eoreq	r8, r0, r6, lsl #16
    f840:	c3750200 	cmngt	r5, #0, 4
    f844:	02000000 	andeq	r0, r0, #0
    f848:	0029b006 	eoreq	fp, r9, r6
    f84c:	bc760200 	lfmlt	f0, 2, [r6], #-0
    f850:	04000000 	streq	r0, [r0], #-0
    f854:	002a4f06 	eoreq	r4, sl, r6, lsl #30
    f858:	bc770200 	lfmlt	f0, 2, [r7], #-0
    f85c:	05000000 	streq	r0, [r0, #-0]
    f860:	00279006 	eoreq	r9, r7, r6
    f864:	bc780200 	lfmlt	f0, 2, [r8], #-0
    f868:	06000000 	streq	r0, [r0], -r0
    f86c:	00258d06 	eoreq	r8, r5, r6, lsl #26
    f870:	bc790200 	lfmlt	f0, 2, [r9], #-0
    f874:	07000000 	streq	r0, [r0, -r0]
    f878:	002ab306 	eoreq	fp, sl, r6, lsl #6
    f87c:	bc7a0200 	lfmlt	f0, 2, [sl], #-0
    f880:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f884:	23060400 	movwcs	r0, #25600	; 0x6400
    f888:	7c020000 	stcvc	0, cr0, [r2], {-0}
    f88c:	00000191 	muleq	r0, r1, r1
    f890:	7f020905 	svcvc	0x00020905
    f894:	0000027a 	andeq	r0, r0, sl, ror r2
    f898:	0029a806 	eoreq	sl, r9, r6, lsl #16
    f89c:	bc810200 	sfmlt	f0, 4, [r1], {0}
    f8a0:	00000000 	andeq	r0, r0, r0
    f8a4:	00242b06 	eoreq	r2, r4, r6, lsl #22
    f8a8:	bc820200 	sfmlt	f0, 4, [r2], {0}
    f8ac:	01000000 	mrseq	r0, (UNDEF: 0)
    f8b0:	00201706 	eoreq	r1, r0, r6, lsl #14
    f8b4:	bc830200 	sfmlt	f0, 4, [r3], {0}
    f8b8:	02000000 	andeq	r0, r0, #0
    f8bc:	00204106 	eoreq	r4, r0, r6, lsl #2
    f8c0:	bc840200 	sfmlt	f0, 4, [r4], {0}
    f8c4:	03000000 	movweq	r0, #0
    f8c8:	00276906 	eoreq	r6, r7, r6, lsl #18
    f8cc:	bc850200 	sfmlt	f0, 4, [r5], {0}
    f8d0:	04000000 	streq	r0, [r0], #-0
    f8d4:	00272106 	eoreq	r2, r7, r6, lsl #2
    f8d8:	bc860200 	sfmlt	f0, 4, [r6], {0}
    f8dc:	05000000 	streq	r0, [r0, #-0]
    f8e0:	001f2906 	andseq	r2, pc, r6, lsl #18
    f8e4:	bc870200 	sfmlt	f0, 4, [r7], {0}
    f8e8:	06000000 	streq	r0, [r0], -r0
    f8ec:	00289506 	eoreq	r9, r8, r6, lsl #10
    f8f0:	bc880200 	sfmlt	f0, 4, [r8], {0}
    f8f4:	07000000 	streq	r0, [r0, -r0]
    f8f8:	00271606 	eoreq	r1, r7, r6, lsl #12
    f8fc:	bc890200 	sfmlt	f0, 4, [r9], {0}
    f900:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f904:	27e40400 	strbcs	r0, [r4, r0, lsl #8]!
    f908:	8b020000 	blhi	8f910 <mailbuffer+0x54820>
    f90c:	00000205 	andeq	r0, r0, r5, lsl #4
    f910:	8e020705 	cdphi	7, 0, cr0, cr2, cr5, {0}
    f914:	000002d6 	ldrdeq	r0, [r0], -r6
    f918:	0029a806 	eoreq	sl, r9, r6, lsl #16
    f91c:	bc900200 	lfmlt	f0, 4, [r0], {0}
    f920:	00000000 	andeq	r0, r0, r0
    f924:	00242b06 	eoreq	r2, r4, r6, lsl #22
    f928:	bc910200 	lfmlt	f0, 4, [r1], {0}
    f92c:	01000000 	mrseq	r0, (UNDEF: 0)
    f930:	0026c906 	eoreq	ip, r6, r6, lsl #18
    f934:	bc920200 	lfmlt	f0, 4, [r2], {0}
    f938:	02000000 	andeq	r0, r0, #0
    f93c:	00258d06 	eoreq	r8, r5, r6, lsl #26
    f940:	bc930200 	lfmlt	f0, 4, [r3], {0}
    f944:	03000000 	movweq	r0, #0
    f948:	00296006 	eoreq	r6, r9, r6
    f94c:	c3940200 	orrsgt	r0, r4, #0, 4
    f950:	04000000 	streq	r0, [r0], #-0
    f954:	00252206 	eoreq	r2, r5, r6, lsl #4
    f958:	bc950200 	lfmlt	f0, 4, [r5], {0}
    f95c:	06000000 	streq	r0, [r0], -r0
    f960:	2bda0400 	blcs	ff690968 <_estack+0xf7680968>
    f964:	97020000 	strls	r0, [r2, -r0]
    f968:	00000285 	andeq	r0, r0, r5, lsl #5
    f96c:	9c020205 	sfmls	f0, 4, [r2], {5}
    f970:	00000302 	andeq	r0, r0, r2, lsl #6
    f974:	0029a806 	eoreq	sl, r9, r6, lsl #16
    f978:	bc9e0200 	lfmlt	f0, 4, [lr], {0}
    f97c:	00000000 	andeq	r0, r0, r0
    f980:	00242b06 	eoreq	r2, r4, r6, lsl #22
    f984:	bc9f0200 	lfmlt	f0, 4, [pc], {0}
    f988:	01000000 	mrseq	r0, (UNDEF: 0)
    f98c:	02090800 	andeq	r0, r9, #0, 16
    f990:	0003379a 	muleq	r3, sl, r7
    f994:	3c020900 	stccc	9, cr0, [r2], {-0}
    f998:	a1020000 	mrsge	r0, (UNDEF: 2)
    f99c:	000002e1 	andeq	r0, r0, r1, ror #5
    f9a0:	00279109 	eoreq	r9, r7, r9, lsl #2
    f9a4:	faa30200 	blx	fe8d01ac <_estack+0xf68c01ac>
    f9a8:	09000001 	stmdbeq	r0, {r0}
    f9ac:	00003c4c 	andeq	r3, r0, ip, asr #24
    f9b0:	027aa402 	rsbseq	sl, sl, #33554432	; 0x2000000
    f9b4:	84090000 	strhi	r0, [r9], #-0
    f9b8:	02000025 	andeq	r0, r0, #37	; 0x25
    f9bc:	0002d6a5 	andeq	sp, r2, r5, lsr #13
    f9c0:	fc040000 	stc2	0, cr0, [r4], {-0}
    f9c4:	02000026 	andeq	r0, r0, #38	; 0x26
    f9c8:	000302a7 	andeq	r0, r3, r7, lsr #5
    f9cc:	24660a00 	strbtcs	r0, [r6], #-2560	; 0xfffff600
    f9d0:	02020000 	andeq	r0, r2, #0
    f9d4:	000373a9 	andeq	r7, r3, r9, lsr #7
    f9d8:	29a80600 	stmibcs	r8!, {r9, sl}
    f9dc:	ab020000 	blge	8f9e4 <mailbuffer+0x548f4>
    f9e0:	000000bc 	strheq	r0, [r0], -ip
    f9e4:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
    f9e8:	ac020000 	stcge	0, cr0, [r2], {-0}
    f9ec:	000000bc 	strheq	r0, [r0], -ip
    f9f0:	20740601 	rsbscs	r0, r4, r1, lsl #12
    f9f4:	ad020000 	stcge	0, cr0, [r2, #-0]
    f9f8:	00000373 	andeq	r0, r0, r3, ror r3
    f9fc:	c30b0002 	movwgt	r0, #45058	; 0xb002
    fa00:	82000000 	andhi	r0, r0, #0
    fa04:	0c000003 	stceq	0, cr0, [r0], {3}
    fa08:	00000382 	andeq	r0, r0, r2, lsl #7
    fa0c:	07040700 	streq	r0, [r4, -r0, lsl #14]
    fa10:	000001d4 	ldrdeq	r0, [r0], -r4
    fa14:	00246604 	eoreq	r6, r4, r4, lsl #12
    fa18:	42af0200 	adcmi	r0, pc, #0, 4
    fa1c:	0d000003 	stceq	0, cr0, [r0, #-12]
    fa20:	03003875 	movweq	r3, #2165	; 0x875
    fa24:	0000bc17 	andeq	fp, r0, r7, lsl ip
    fa28:	33750d00 	cmncc	r5, #0, 26
    fa2c:	19030032 	stmdbne	r3, {r1, r4, r5}
    fa30:	000003a9 	andeq	r0, r0, r9, lsr #7
    fa34:	1d070407 	cfstrsne	mvf0, [r7, #-28]	; 0xffffffe4
    fa38:	07000007 	streq	r0, [r0, -r7]
    fa3c:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
    fa40:	01070000 	mrseq	r0, (UNDEF: 7)
    fa44:	00073306 	andeq	r3, r7, r6, lsl #6
    fa48:	05020700 	streq	r0, [r2, #-1792]	; 0xfffff900
    fa4c:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    fa50:	6905040e 	stmdbvs	r5, {r1, r2, r3, sl}
    fa54:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    fa58:	00002930 	andeq	r2, r0, r0, lsr r9
    fa5c:	03c52003 	biceq	r2, r5, #3
    fa60:	04070000 	streq	r0, [r7], #-0
    fa64:	00071807 	andeq	r1, r7, r7, lsl #16
    fa68:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
    fa6c:	00000798 	muleq	r0, r8, r7
    fa70:	0025520a 	eoreq	r5, r5, sl, lsl #4
    fa74:	1e041800 	cdpne	8, 0, cr1, cr4, cr0, {0}
    fa78:	0000043a 	andeq	r0, r0, sl, lsr r4
    fa7c:	00265106 	eoreq	r5, r6, r6, lsl #2
    fa80:	3a200400 	bcc	810a88 <mailbuffer+0x7d5998>
    fa84:	00000004 	andeq	r0, r0, r4
    fa88:	002c0c06 	eoreq	r0, ip, r6, lsl #24
    fa8c:	a9210400 	stmdbge	r1!, {sl}
    fa90:	04000003 	streq	r0, [r0], #-3
    fa94:	00268a06 	eoreq	r8, r6, r6, lsl #20
    fa98:	cc220400 	cfstrsgt	mvf0, [r2], #-0
    fa9c:	08000003 	stmdaeq	r0, {r0, r1}
    faa0:	00216906 	eoreq	r6, r1, r6, lsl #18
    faa4:	3a230400 	bcc	8d0aac <mailbuffer+0x8959bc>
    faa8:	0c000004 	stceq	0, cr0, [r0], {4}
    faac:	00277d06 	eoreq	r7, r7, r6, lsl #26
    fab0:	3a240400 	bcc	910ab8 <mailbuffer+0x8d59c8>
    fab4:	10000004 	andne	r0, r0, r4
    fab8:	002bbb06 	eoreq	fp, fp, r6, lsl #22
    fabc:	3a250400 	bcc	950ac4 <mailbuffer+0x9159d4>
    fac0:	14000004 	strne	r0, [r0], #-4
    fac4:	40040f00 	andmi	r0, r4, r0, lsl #30
    fac8:	10000004 	andne	r0, r0, r4
    facc:	00000337 	andeq	r0, r0, r7, lsr r3
    fad0:	00255204 	eoreq	r5, r5, r4, lsl #4
    fad4:	e5270400 	str	r0, [r7, #-1024]!	; 0xfffffc00
    fad8:	11000003 	tstne	r0, r3
    fadc:	26310a04 	ldrtcs	r0, [r1], -r4, lsl #20
    fae0:	050c0000 	streq	r0, [ip, #-0]
    fae4:	0004831f 	andeq	r8, r4, pc, lsl r3
    fae8:	26510600 	ldrbcs	r0, [r1], -r0, lsl #12
    faec:	21050000 	mrscs	r0, (UNDEF: 5)
    faf0:	00000483 	andeq	r0, r0, r3, lsl #9
    faf4:	2bf10600 	blcs	ffc512fc <_estack+0xf7c412fc>
    faf8:	22050000 	andcs	r0, r5, #0
    fafc:	000003a9 	andeq	r0, r0, r9, lsr #7
    fb00:	24850604 	strcs	r0, [r5], #1540	; 0x604
    fb04:	23050000 	movwcs	r0, #20480	; 0x5000
    fb08:	00000483 	andeq	r0, r0, r3, lsl #9
    fb0c:	040f0008 	streq	r0, [pc], #-8	; fb14 <__module_entries_end+0x7a34>
    fb10:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    fb14:	00263104 	eoreq	r3, r6, r4, lsl #2
    fb18:	52250500 	eorpl	r0, r5, #0, 10
    fb1c:	0a000004 	beq	fb34 <__module_entries_end+0x7a54>
    fb20:	0000253b 	andeq	r2, r0, fp, lsr r5
    fb24:	c521060c 	strgt	r0, [r1, #-1548]!	; 0xfffff9f4
    fb28:	06000004 	streq	r0, [r0], -r4
    fb2c:	000020e0 	andeq	r2, r0, r0, ror #1
    fb30:	05622306 	strbeq	r2, [r2, #-774]!	; 0xfffffcfa
    fb34:	06000000 	streq	r0, [r0], -r0
    fb38:	00002c3c 	andeq	r2, r0, ip, lsr ip
    fb3c:	05682506 	strbeq	r2, [r8, #-1286]!	; 0xfffffafa
    fb40:	06040000 	streq	r0, [r4], -r0
    fb44:	00002a95 	muleq	r0, r5, sl
    fb48:	056e2706 	strbeq	r2, [lr, #-1798]!	; 0xfffff8fa
    fb4c:	00080000 	andeq	r0, r8, r0
    fb50:	002ad10a 	eoreq	sp, sl, sl, lsl #2
    fb54:	2d073800 	stccs	8, cr3, [r7, #-0]
    fb58:	00000562 	andeq	r0, r0, r2, ror #10
    fb5c:	005a2806 	subseq	r2, sl, r6, lsl #16
    fb60:	8e2f0700 	cdphi	7, 2, cr0, cr15, cr0, {0}
    fb64:	00000005 	andeq	r0, r0, r5
    fb68:	00244306 	eoreq	r4, r4, r6, lsl #6
    fb6c:	dd310700 	ldcle	7, cr0, [r1, #-0]
    fb70:	04000005 	streq	r0, [r0], #-5
    fb74:	00207c06 	eoreq	r7, r0, r6, lsl #24
    fb78:	94330700 	ldrtls	r0, [r3], #-1792	; 0xfffff900
    fb7c:	08000003 	stmdaeq	r0, {r0, r1}
    fb80:	00243b06 	eoreq	r3, r4, r6, lsl #22
    fb84:	6c340700 	ldcvs	7, cr0, [r4], #-0
    fb88:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    fb8c:	00229306 	eoreq	r9, r2, r6, lsl #6
    fb90:	44350700 	ldrtmi	r0, [r5], #-1792	; 0xfffff900
    fb94:	0c000006 	stceq	0, cr0, [r0], {6}
    fb98:	001f7a06 	andseq	r7, pc, r6, lsl #20
    fb9c:	94370700 	ldrtls	r0, [r7], #-1792	; 0xfffff900
    fba0:	10000003 	andne	r0, r0, r3
    fba4:	0026a906 	eoreq	sl, r6, r6, lsl #18
    fba8:	94380700 	ldrtls	r0, [r8], #-1792	; 0xfffff900
    fbac:	11000003 	tstne	r0, r3
    fbb0:	00296f06 	eoreq	r6, r9, r6, lsl #30
    fbb4:	4a3a0700 	bmi	e917bc <mailbuffer+0xe566cc>
    fbb8:	14000006 	strne	r0, [r0], #-6
    fbbc:	001fb206 	andseq	fp, pc, r6, lsl #4
    fbc0:	503b0700 	eorspl	r0, fp, r0, lsl #14
    fbc4:	18000006 	stmdane	r0, {r1, r2}
    fbc8:	0027fc06 	eoreq	pc, r7, r6, lsl #24
    fbcc:	563d0700 	ldrtpl	r0, [sp], -r0, lsl #14
    fbd0:	1c000006 	stcne	0, cr0, [r0], {6}
    fbd4:	002b3406 	eoreq	r3, fp, r6, lsl #8
    fbd8:	743f0700 	ldrtvc	r0, [pc], #-1792	; fbe0 <__module_entries_end+0x7b00>
    fbdc:	20000005 	andcs	r0, r0, r5
    fbe0:	00217806 	eoreq	r7, r1, r6, lsl #16
    fbe4:	74400700 	strbvc	r0, [r0], #-1792	; 0xfffff900
    fbe8:	2c000005 	stccs	0, cr0, [r0], {5}
    fbec:	c5040f00 	strgt	r0, [r4, #-3840]	; 0xfffff100
    fbf0:	0f000004 	svceq	0x00000004
    fbf4:	00038904 	andeq	r8, r3, r4, lsl #18
    fbf8:	89040f00 	stmdbhi	r4, {r8, r9, sl, fp}
    fbfc:	04000004 	streq	r0, [r0], #-4
    fc00:	0000253b 	andeq	r2, r0, fp, lsr r5
    fc04:	04942906 	ldreq	r2, [r4], #2310	; 0x906
    fc08:	cc120000 	ldcgt	0, cr0, [r2], {-0}
    fc0c:	8e000003 	cdphi	0, 0, cr0, cr0, cr3, {0}
    fc10:	13000005 	movwne	r0, #5
    fc14:	00000562 	andeq	r0, r0, r2, ror #10
    fc18:	7f040f00 	svcvc	0x00040f00
    fc1c:	0a000005 	beq	fc38 <__module_entries_end+0x7b58>
    fc20:	00002876 	andeq	r2, r0, r6, ror r8
    fc24:	dd260854 	stcle	8, cr0, [r6, #-336]!	; 0xfffffeb0
    fc28:	06000005 	streq	r0, [r0], -r5
    fc2c:	0000273d 	andeq	r2, r0, sp, lsr r7
    fc30:	03a92808 			; <UNDEFINED> instruction: 0x03a92808
    fc34:	06000000 	streq	r0, [r0], -r0
    fc38:	00001f3c 	andeq	r1, r0, ip, lsr pc
    fc3c:	0cf12908 	ldcleq	9, cr2, [r1], #32
    fc40:	06040000 	streq	r0, [r4], -r0
    fc44:	000025da 	ldrdeq	r2, [r0], -sl
    fc48:	0cf62b08 	vldmiaeq	r6!, {d18-d21}
    fc4c:	06080000 	streq	r0, [r8], -r0
    fc50:	0000270b 	andeq	r2, r0, fp, lsl #14
    fc54:	0d0c2d08 	stceq	13, cr2, [ip, #-32]	; 0xffffffe0
    fc58:	06480000 	strbeq	r0, [r8], -r0
    fc5c:	00002b49 	andeq	r2, r0, r9, asr #22
    fc60:	0b242f08 	bleq	91b888 <mailbuffer+0x8e0798>
    fc64:	004c0000 	subeq	r0, ip, r0
    fc68:	0594040f 	ldreq	r0, [r4, #1039]	; 0x40f
    fc6c:	800a0000 	andhi	r0, sl, r0
    fc70:	18000025 	stmdane	r0, {r0, r2, r5}
    fc74:	06442809 	strbeq	r2, [r4], -r9, lsl #16
    fc78:	e0060000 	and	r0, r6, r0
    fc7c:	09000020 	stmdbeq	r0, {r5}
    fc80:	0006932a 	andeq	r9, r6, sl, lsr #6
    fc84:	e8060000 	stmda	r6, {}	; <UNPREDICTABLE>
    fc88:	0900001f 	stmdbeq	r0, {r0, r1, r2, r3, r4}
    fc8c:	0003942b 	andeq	r9, r3, fp, lsr #8
    fc90:	49060400 	stmdbmi	r6, {sl}
    fc94:	09000021 	stmdbeq	r0, {r0, r5}
    fc98:	0006882c 	andeq	r8, r6, ip, lsr #16
    fc9c:	6b060500 	blvs	1910a4 <mailbuffer+0x155fb4>
    fca0:	09000026 	stmdbeq	r0, {r1, r2, r5}
    fca4:	0003cc2d 	andeq	ip, r3, sp, lsr #24
    fca8:	d4060800 	strle	r0, [r6], #-2048	; 0xfffff800
    fcac:	09000021 	stmdbeq	r0, {r0, r5}
    fcb0:	00039e2e 	andeq	r9, r3, lr, lsr #28
    fcb4:	57060c00 	strpl	r0, [r6, -r0, lsl #24]
    fcb8:	09000028 	stmdbeq	r0, {r3, r5}
    fcbc:	0003a92f 	andeq	sl, r3, pc, lsr #18
    fcc0:	d7061000 	strle	r1, [r6, -r0]
    fcc4:	09000022 	stmdbeq	r0, {r1, r5}
    fcc8:	00004030 	andeq	r4, r0, r0, lsr r0
    fccc:	0f001400 	svceq	0x00001400
    fcd0:	0005e304 	andeq	lr, r5, r4, lsl #6
    fcd4:	86040f00 	strhi	r0, [r4], -r0, lsl #30
    fcd8:	0f000001 	svceq	0x00000001
    fcdc:	0001fa04 	andeq	pc, r1, r4, lsl #20
    fce0:	45040f00 	strmi	r0, [r4, #-3840]	; 0xfffff100
    fce4:	04000004 	streq	r0, [r0], #-4
    fce8:	00002ad1 	ldrdeq	r2, [r0], -r1
    fcec:	04c54207 	strbeq	r4, [r5], #519	; 0x207
    fcf0:	01020000 	mrseq	r0, (UNDEF: 2)
    fcf4:	06882009 	streq	r2, [r8], r9
    fcf8:	9f030000 	svcls	0x00030000
    fcfc:	0000002a 	andeq	r0, r0, sl, lsr #32
    fd00:	001fc003 	andseq	ip, pc, r3
    fd04:	2e030100 	adfcss	f0, f3, f0
    fd08:	02000022 	andeq	r0, r0, #34	; 0x22
    fd0c:	0025c203 	eoreq	ip, r5, r3, lsl #4
    fd10:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    fd14:	00002afd 	strdeq	r2, [r0], -sp
    fd18:	06672609 	strbteq	r2, [r7], -r9, lsl #12
    fd1c:	040f0000 	streq	r0, [pc], #-0	; fd24 <__module_entries_end+0x7c44>
    fd20:	0000065c 	andeq	r0, r0, ip, asr r6
    fd24:	00258004 	eoreq	r8, r5, r4
    fd28:	e3320900 	teq	r2, #0, 18
    fd2c:	04000005 	streq	r0, [r0], #-5
    fd30:	00002693 	muleq	r0, r3, r6
    fd34:	06af210a 	strteq	r2, [pc], sl, lsl #2
    fd38:	c4140000 	ldrgt	r0, [r4], #-0
    fd3c:	13000006 	movwne	r0, #6
    fd40:	000006c4 	andeq	r0, r0, r4, asr #13
    fd44:	00045013 	andeq	r5, r4, r3, lsl r0
    fd48:	04501300 	ldrbeq	r1, [r0], #-768	; 0xfffffd00
    fd4c:	0f000000 	svceq	0x00000000
    fd50:	0006ca04 	andeq	ip, r6, r4, lsl #20
    fd54:	29070a00 	stmdbcs	r7, {r9, fp}
    fd58:	0a240000 	beq	90fd60 <mailbuffer+0x8d4c70>
    fd5c:	00074323 	andeq	r4, r7, r3, lsr #6
    fd60:	297d0600 	ldmdbcs	sp!, {r9, sl}^
    fd64:	250a0000 	strcs	r0, [sl, #-0]
    fd68:	00000743 	andeq	r0, r0, r3, asr #14
    fd6c:	28440600 	stmdacs	r4, {r9, sl}^
    fd70:	270a0000 	strcs	r0, [sl, -r0]
    fd74:	00000749 	andeq	r0, r0, r9, asr #14
    fd78:	26510604 	ldrbcs	r0, [r1], -r4, lsl #12
    fd7c:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    fd80:	00000450 	andeq	r0, r0, r0, asr r4
    fd84:	2c0c0608 	stccs	6, cr0, [ip], {8}
    fd88:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
    fd8c:	0000039e 	muleq	r0, lr, r3
    fd90:	213f060c 	teqcs	pc, ip, lsl #12
    fd94:	2b0a0000 	blcs	28fd9c <mailbuffer+0x254cac>
    fd98:	000003c5 	andeq	r0, r0, r5, asr #7
    fd9c:	29eb0610 	stmibcs	fp!, {r4, r9, sl}^
    fda0:	2c0a0000 	stccs	0, cr0, [sl], {-0}
    fda4:	0000039e 	muleq	r0, lr, r3
    fda8:	23ba0614 			; <UNDEFINED> instruction: 0x23ba0614
    fdac:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    fdb0:	0000074f 	andeq	r0, r0, pc, asr #14
    fdb4:	23590618 	cmpcs	r9, #24, 12	; 0x1800000
    fdb8:	2f0a0000 	svccs	0x000a0000
    fdbc:	00000450 	andeq	r0, r0, r0, asr r4
    fdc0:	2b13061c 	blcs	4d1638 <mailbuffer+0x496548>
    fdc4:	300a0000 	andcc	r0, sl, r0
    fdc8:	00000450 	andeq	r0, r0, r0, asr r4
    fdcc:	040f0020 	streq	r0, [pc], #-32	; fdd4 <__module_entries_end+0x7cf4>
    fdd0:	00000699 	muleq	r0, r9, r6
    fdd4:	00ca040f 	sbceq	r0, sl, pc, lsl #8
    fdd8:	040f0000 	streq	r0, [pc], #-0	; fde0 <__module_entries_end+0x7d00>
    fddc:	000006a4 	andeq	r0, r0, r4, lsr #13
    fde0:	00290704 	eoreq	r0, r9, r4, lsl #14
    fde4:	ca320a00 	bgt	c925ec <mailbuffer+0xc574fc>
    fde8:	02000006 	andeq	r0, r0, #6
    fdec:	db200b01 	blle	8129f8 <mailbuffer+0x7d7908>
    fdf0:	03000008 	movweq	r0, #8
    fdf4:	00001dfc 	strdeq	r1, [r0], -ip
    fdf8:	1df30300 	ldclne	3, cr0, [r3]
    fdfc:	01800000 	orreq	r0, r0, r0
    fe00:	001e1603 	andseq	r1, lr, r3, lsl #12
    fe04:	03018100 	movweq	r8, #4352	; 0x1100
    fe08:	00001cd0 	ldrdeq	r1, [r0], -r0
    fe0c:	24030182 	strcs	r0, [r3], #-386	; 0xfffffe7e
    fe10:	8300001c 	movwhi	r0, #28
    fe14:	1ce90301 	stclne	3, cr0, [r9], #4
    fe18:	01840000 	orreq	r0, r4, r0
    fe1c:	001c3103 	andseq	r3, ip, r3, lsl #2
    fe20:	03018500 	movweq	r8, #5376	; 0x1500
    fe24:	00001c4b 	andeq	r1, r0, fp, asr #24
    fe28:	ea030186 	b	d0448 <mailbuffer+0x95358>
    fe2c:	8700001e 	smladhi	r0, lr, r0, r0
    fe30:	1c680301 	stclne	3, cr0, [r8], #-4
    fe34:	01880000 	orreq	r0, r8, r0
    fe38:	001d3f03 	andseq	r3, sp, r3, lsl #30
    fe3c:	03018900 	movweq	r8, #6400	; 0x1900
    fe40:	00001cdd 	ldrdeq	r1, [r0], -sp
    fe44:	fc03018a 	stc2	1, cr0, [r3], {138}	; 0x8a
    fe48:	8b00001e 	blhi	fec8 <__module_entries_end+0x7de8>
    fe4c:	1ef40301 	cdpne	3, 15, cr0, cr4, cr1, {0}
    fe50:	018c0000 	orreq	r0, ip, r0
    fe54:	001e0e03 	andseq	r0, lr, r3, lsl #28
    fe58:	03018d00 	movweq	r8, #7424	; 0x1d00
    fe5c:	00001cc7 	andeq	r1, r0, r7, asr #25
    fe60:	a303018e 	movwge	r0, #12686	; 0x318e
    fe64:	8f00001e 	svchi	0x0000001e
    fe68:	1ea90301 	cdpne	3, 10, cr0, cr9, cr1, {0}
    fe6c:	01900000 	orrseq	r0, r0, r0
    fe70:	001eaf03 	andseq	sl, lr, r3, lsl #30
    fe74:	03019100 	movweq	r9, #4352	; 0x1100
    fe78:	00001eb5 			; <UNDEFINED> instruction: 0x00001eb5
    fe7c:	bb030192 	bllt	d04cc <mailbuffer+0x953dc>
    fe80:	9300001e 	movwls	r0, #30
    fe84:	1ec10301 	cdpne	3, 12, cr0, cr1, cr1, {0}
    fe88:	01940000 	orrseq	r0, r4, r0
    fe8c:	001ec703 	andseq	ip, lr, r3, lsl #14
    fe90:	03019500 	movweq	r9, #5376	; 0x1500
    fe94:	00001ecd 	andeq	r1, r0, sp, asr #29
    fe98:	d3030196 	movwle	r0, #12694	; 0x3196
    fe9c:	9700001e 	smladls	r0, lr, r0, r0
    fea0:	1c530301 	mrrcne	3, 0, r0, r3, cr1
    fea4:	01980000 	orrseq	r0, r8, r0
    fea8:	001c5a03 	andseq	r5, ip, r3, lsl #20
    feac:	03019900 	movweq	r9, #6400	; 0x1900
    feb0:	00001c61 	andeq	r1, r0, r1, ror #24
    feb4:	7f03019a 	svcvc	0x0003019a
    feb8:	9b00001e 	blls	ff38 <__module_entries_end+0x7e58>
    febc:	1bf60301 	blne	ffd90ac8 <_estack+0xf7d80ac8>
    fec0:	019c0000 	orrseq	r0, ip, r0
    fec4:	001d1003 	andseq	r1, sp, r3
    fec8:	03019d00 	movweq	r9, #7424	; 0x1d00
    fecc:	00001dd7 	ldrdeq	r1, [r0], -r7
    fed0:	d903019e 	stmdble	r3, {r1, r2, r3, r4, r7, r8}
    fed4:	9f00001e 	svcls	0x0000001e
    fed8:	1c020301 	stcne	3, cr0, [r2], {1}
    fedc:	01a00000 	moveq	r0, r0
    fee0:	001d8d03 	andseq	r8, sp, r3, lsl #26
    fee4:	0301a100 	movweq	sl, #4352	; 0x1100
    fee8:	00001dbf 			; <UNDEFINED> instruction: 0x00001dbf
    feec:	6e0301a2 	adfvsdp	f0, f3, f2
    fef0:	a300001d 	movwge	r0, #29
    fef4:	1e040301 	cdpne	3, 0, cr0, cr4, cr1, {0}
    fef8:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
    fefc:	001e2003 	andseq	r2, lr, r3
    ff00:	0301a500 	movweq	sl, #5376	; 0x1500
    ff04:	00001d27 	andeq	r1, r0, r7, lsr #26
    ff08:	2f0301a6 	svccs	0x000301a6
    ff0c:	a700001d 	smladge	r0, sp, r0, r0
    ff10:	1d370301 	ldcne	3, cr0, [r7, #-4]!
    ff14:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    ff18:	001ee203 	andseq	lr, lr, r3, lsl #4
    ff1c:	0301a900 	movweq	sl, #6400	; 0x1900
    ff20:	00001d46 	andeq	r1, r0, r6, asr #26
    ff24:	4e0301aa 	adfmidp	f0, f3, #2.0
    ff28:	ab00001d 	blge	ffa4 <__module_entries_end+0x7ec4>
    ff2c:	1d560301 	ldclne	3, cr0, [r6, #-4]
    ff30:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    ff34:	001d5e03 	andseq	r5, sp, r3, lsl #28
    ff38:	0301ad00 	movweq	sl, #7424	; 0x1d00
    ff3c:	00001d66 	andeq	r1, r0, r6, ror #26
    ff40:	1f0301ae 	svcne	0x000301ae
    ff44:	af00001d 	svcge	0x0000001d
    ff48:	1e2c0301 	cdpne	3, 2, cr0, cr12, cr1, {0}
    ff4c:	01b00000 	movseq	r0, r0
    ff50:	001db303 	andseq	fp, sp, r3, lsl #6
    ff54:	0301b100 	movweq	fp, #4352	; 0x1100
    ff58:	00001caa 	andeq	r1, r0, sl, lsr #25
    ff5c:	980301b2 	stmdals	r3, {r1, r4, r5, r7, r8}
    ff60:	b300001b 	movwlt	r0, #27
    ff64:	01020001 	tsteq	r2, r1
    ff68:	095b5a0b 	ldmdbeq	fp, {r0, r1, r3, r9, fp, ip, lr}^
    ff6c:	2d030000 	stccs	0, cr0, [r3, #-0]
    ff70:	b3000054 	movwlt	r0, #84	; 0x54
    ff74:	54590301 	ldrbpl	r0, [r9], #-769	; 0xfffffcff
    ff78:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    ff7c:	0054e803 	subseq	lr, r4, r3, lsl #16
    ff80:	0301b500 	movweq	fp, #5376	; 0x1500
    ff84:	0000532d 	andeq	r5, r0, sp, lsr #6
    ff88:	420301b6 	andmi	r0, r3, #-2147483603	; 0x8000002d
    ff8c:	b7000053 	smlsdlt	r0, r3, r0, r0
    ff90:	53570301 	cmppl	r7, #67108864	; 0x4000000
    ff94:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    ff98:	00536c03 	subseq	r6, r3, r3, lsl #24
    ff9c:	0301b900 	movweq	fp, #6400	; 0x1900
    ffa0:	000052e2 	andeq	r5, r0, r2, ror #5
    ffa4:	ad0301ba 	stfges	f0, [r3, #-744]	; 0xfffffd18
    ffa8:	bb000053 	bllt	100fc <pxPortInitialiseStack+0xfc>
    ffac:	53c20301 	bicpl	r0, r2, #67108864	; 0x4000000
    ffb0:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
    ffb4:	0053d703 	subseq	sp, r3, r3, lsl #14
    ffb8:	0301bd00 	movweq	fp, #7424	; 0x1d00
    ffbc:	000053ec 	andeq	r5, r0, ip, ror #7
    ffc0:	810301be 			; <UNDEFINED> instruction: 0x810301be
    ffc4:	bf000053 	svclt	0x00000053
    ffc8:	53040301 	movwpl	r0, #17153	; 0x4301
    ffcc:	01c00000 	biceq	r0, r0, r0
    ffd0:	00539703 	subseq	r9, r3, r3, lsl #14
    ffd4:	0301c100 	movweq	ip, #4352	; 0x1100
    ffd8:	000052c1 	andeq	r5, r0, r1, asr #5
    ffdc:	150301c2 	strne	r0, [r3, #-450]	; 0xfffffe3e
    ffe0:	c3000054 	movwgt	r0, #84	; 0x54
    ffe4:	50150001 	andspl	r0, r5, r1
    ffe8:	8c000021 	stchi	0, cr0, [r0], {33}	; 0x21
    ffec:	9c6f0b01 	stclls	11, cr0, [pc], #-4	; fff0 <__module_entries_end+0x7f10>
    fff0:	06000009 	streq	r0, [r0], -r9
    fff4:	00002883 	andeq	r2, r0, r3, lsl #17
    fff8:	099c710b 	ldmibeq	ip, {r0, r1, r3, r8, ip, sp, lr}
    fffc:	16000000 	strne	r0, [r0], -r0
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   10000:	00002c9c 	muleq	r0, ip, ip
   10004:	03cc730b 	biceq	r7, ip, #738197504	; 0x2c000000
   10008:	01800000 	orreq	r0, r0, r0
   1000c:	00248e16 	eoreq	r8, r4, r6, lsl lr
   10010:	cc740b00 	ldclgt	11, cr0, [r4], #-0
   10014:	84000003 	strhi	r0, [r0], #-3
   10018:	23ac1601 			; <UNDEFINED> instruction: 0x23ac1601
   1001c:	750b0000 	strvc	r0, [fp, #-0]
   10020:	000003cc 	andeq	r0, r0, ip, asr #7
   10024:	0b000188 	bleq	1064c <vPortEnterCritical+0x4>
   10028:	00000394 	muleq	r0, r4, r3
   1002c:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   10030:	00038217 	andeq	r8, r3, r7, lsl r2
   10034:	82177f00 	andshi	r7, r7, #0, 30

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   10038:	02000003 	andeq	r0, r0, #3
   1003c:	21500400 	cmpcs	r0, r0, lsl #8
   10040:	770b0000 	strvc	r0, [fp, -r0]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   10044:	0000095b 	andeq	r0, r0, fp, asr r9
   10048:	0024d604 	eoreq	sp, r4, r4, lsl #12
   1004c:	c81f0c00 	ldmdagt	pc, {sl, fp}	; <UNPREDICTABLE>
   10050:	14000009 	strne	r0, [r0], #-9
	pxTopOfStack--;
   10054:	000009d3 	ldrdeq	r0, [r0], -r3
   10058:	0009d313 	andeq	sp, r9, r3, lsl r3
   1005c:	040f0000 	streq	r0, [pc], #-0	; 10064 <pxPortInitialiseStack+0x64>

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   10060:	000009d9 	ldrdeq	r0, [r0], -r9
   10064:	0003b710 	andeq	fp, r3, r0, lsl r7
   10068:	26da0400 	ldrbcs	r0, [sl], r0, lsl #8
   1006c:	200c0000 	andcs	r0, ip, r0
	pxTopOfStack--;	
   10070:	000009e9 	andeq	r0, r0, r9, ror #19
   10074:	0009f414 	andeq	pc, r9, r4, lsl r4	; <UNPREDICTABLE>
   10078:	03a91300 			; <UNDEFINED> instruction: 0x03a91300
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   1007c:	04000000 	streq	r0, [r0], #-0
   10080:	00002913 	andeq	r2, r0, r3, lsl r9
   10084:	09ff210c 	ldmibeq	pc!, {r2, r3, r8, sp}^	; <UNPREDICTABLE>
	pxTopOfStack--;
   10088:	04180000 	ldreq	r0, [r8], #-0
   1008c:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
   10090:	0a0b240c 	beq	2d90c8 <mailbuffer+0x29dfd8>
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   10094:	1b140000 	blne	51009c <mailbuffer+0x4d4fac>
   10098:	1300000a 	movwne	r0, #10
   1009c:	000000bc 	strheq	r0, [r0], -ip
   100a0:	000a1b13 	andeq	r1, sl, r3, lsl fp
	pxTopOfStack--;	
   100a4:	040f0000 	streq	r0, [pc], #-0	; 100ac <pxPortInitialiseStack+0xac>
   100a8:	00000a21 	andeq	r0, r0, r1, lsr #20
   100ac:	0000bc10 	andeq	fp, r0, r0, lsl ip
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   100b0:	28631500 	stmdacs	r3!, {r8, sl, ip}^
   100b4:	01ec0000 	mvneq	r0, r0
   100b8:	0ad0270c 	beq	ff419cf0 <_estack+0xf7409cf0>
   100bc:	01060000 	mrseq	r0, (UNDEF: 6)
	pxTopOfStack--;	
   100c0:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
   100c4:	00065c29 	andeq	r5, r6, r9, lsr #24
   100c8:	03060000 	movweq	r0, #24576	; 0x6000
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   100cc:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
   100d0:	0003942b 	andeq	r9, r3, fp, lsr #8
   100d4:	d6063800 	strle	r3, [r6], -r0, lsl #16
   100d8:	0c000029 	stceq	0, cr0, [r0], {41}	; 0x29
	pxTopOfStack--;	
   100dc:	0003942c 	andeq	r9, r3, ip, lsr #8
   100e0:	62063900 	andvs	r3, r6, #0, 18
   100e4:	0c000020 	stceq	0, cr0, [r0], {32}
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   100e8:	0007432e 	andeq	r4, r7, lr, lsr #6
   100ec:	ac063c00 	stcge	12, cr3, [r6], {-0}
   100f0:	0c000020 	stceq	0, cr0, [r0], {32}
   100f4:	000ad030 	andeq	sp, sl, r0, lsr r0
	pxTopOfStack--;	
   100f8:	71064000 	mrsvc	r4, (UNDEF: 6)
   100fc:	0c00002a 	stceq	0, cr0, [r0], {42}	; 0x2a
   10100:	000ad631 	andeq	sp, sl, r1, lsr r6
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   10104:	c4064400 	strgt	r4, [r6], #-1024	; 0xfffffc00
   10108:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
   1010c:	000adc32 	andeq	sp, sl, r2, lsr ip
   10110:	13064800 	movwne	r4, #26624	; 0x6800
	pxTopOfStack--;	
   10114:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
   10118:	000ae233 	andeq	lr, sl, r3, lsr r2
   1011c:	2a064c00 	bcs	1a3124 <mailbuffer+0x168034>
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   10120:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
   10124:	000ae835 	andeq	lr, sl, r5, lsr r8
   10128:	34065000 	strcc	r5, [r6], #-0
   1012c:	0c00002a 	stceq	0, cr0, [r0], {42}	; 0x2a
	pxTopOfStack--;	
   10130:	000aee36 	andeq	lr, sl, r6, lsr lr
   10134:	7a065400 	bvc	1a513c <mailbuffer+0x16a04c>
   10138:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   1013c:	00039438 	andeq	r9, r3, r8, lsr r4
   10140:	57065800 	strpl	r5, [r6, -r0, lsl #16]
   10144:	0c000029 	stceq	0, cr0, [r0], {41}	; 0x29
   10148:	0003a939 	andeq	sl, r3, r9, lsr r9
	pxTopOfStack--;	
   1014c:	83065c00 	movwhi	r5, #27648	; 0x6c00
   10150:	0c000028 	stceq	0, cr0, [r0], {40}	; 0x28
   10154:	0009b23b 	andeq	fp, r9, fp, lsr r2
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   10158:	0f006000 	svceq	0x00006000
   1015c:	0009bd04 	andeq	fp, r9, r4, lsl #26
   10160:	de040f00 	cdple	15, 0, cr0, cr4, cr0, {0}
   10164:	0f000009 	svceq	0x00000009
	pxTopOfStack--;	
   10168:	0009f404 	andeq	pc, r9, r4, lsl #8
   1016c:	00040f00 	andeq	r0, r4, r0, lsl #30
   10170:	0f00000a 	svceq	0x0000000a
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   10174:	00075504 	andeq	r5, r7, r4, lsl #10
   10178:	94040f00 	strls	r0, [r4], #-3840	; 0xfffff100
   1017c:	04000003 	streq	r0, [r0], #-3
   10180:	00002863 	andeq	r2, r0, r3, ror #16
	pxTopOfStack--;	
   10184:	0a263d0c 	beq	99f5bc <mailbuffer+0x9644cc>
   10188:	490a0000 	stmdbmi	sl, {}	; <UNPREDICTABLE>
   1018c:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   10190:	0b24200d 	bleq	9181cc <mailbuffer+0x8dd0dc>
   10194:	43060000 	movwmi	r0, #24576	; 0x6000
   10198:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
   1019c:	0005dd22 	andeq	sp, r5, r2, lsr #26
	pxTopOfStack--;	
   101a0:	e0060000 	and	r0, r6, r0
   101a4:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
   101a8:	00069324 	andeq	r9, r6, r4, lsr #6
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   101ac:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
   101b0:	00002749 	andeq	r2, r0, r9, asr #14
   101b4:	0aff260d 	beq	fffd99f0 <_estack+0xf7fc99f0>
   101b8:	0d0a0000 	stceq	0, cr0, [sl, #-0]
	pxTopOfStack--;	
   101bc:	18000025 	stmdane	r0, {r0, r2, r5}
   101c0:	0b841d0e 	bleq	fe117600 <_estack+0xf6107600>
   101c4:	ce060000 	cdpgt	0, 0, cr0, cr6, cr0, {0}
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   101c8:	0e000039 	mcreq	0, 0, r0, cr0, cr9, {1}
   101cc:	000b951f 	andeq	r9, fp, pc, lsl r5
   101d0:	86060000 	strhi	r0, [r6], -r0
   101d4:	0e000050 	mcreq	0, 0, r0, cr0, cr0, {2}
	pxTopOfStack--;	
   101d8:	000b9521 	andeq	r9, fp, r1, lsr #10
   101dc:	47060400 	strmi	r0, [r6, -r0, lsl #8]
   101e0:	0e000050 	mcreq	0, 0, r0, cr0, cr0, {2}

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   101e4:	000baa22 	andeq	sl, fp, r2, lsr #20
   101e8:	f4060800 	vst2.8	{d0-d1}, [r6], r0
   101ec:	0e000036 	mcreq	0, 0, r0, cr0, cr6, {1}
	pxTopOfStack--;
   101f0:	000bc023 	andeq	ip, fp, r3, lsr #32
   101f4:	e9060c00 	stmdb	r6, {sl, fp}
   101f8:	0e00004f 	cdpeq	0, 0, cr0, cr0, cr15, {2}

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   101fc:	000b9525 	andeq	r9, fp, r5, lsr #10
   10200:	c0061000 	andgt	r1, r6, r0
   10204:	0e00004f 	cdpeq	0, 0, cr0, cr0, cr15, {2}

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   10208:	000baa27 	andeq	sl, fp, r7, lsr #20
   1020c:	14001400 	strne	r1, [r0], #-1024	; 0xfffffc00
   10210:	00000b8f 	andeq	r0, r0, pc, lsl #23
   10214:	000b8f13 	andeq	r8, fp, r3, lsl pc
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   10218:	040f0000 	streq	r0, [pc], #-0	; 10220 <pxPortInitialiseStack+0x220>
   1021c:	00000b2f 	andeq	r0, r0, pc, lsr #22
   10220:	0b84040f 	bleq	fe111264 <_estack+0xf6101264>
   10224:	cc120000 	ldcgt	0, cr0, [r2], {-0}
   10228:	aa000003 	bge	1023c <pxPortInitialiseStack+0x23c>
	}

	pxTopOfStack--;
   1022c:	1300000b 	movwne	r0, #11
   10230:	00000b8f 	andeq	r0, r0, pc, lsl #23
   10234:	9b040f00 	blls	113e3c <mailbuffer+0xd8d4c>

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   10238:	1400000b 	strne	r0, [r0], #-11
   1023c:	00000bc0 	andeq	r0, r0, r0, asr #23
   10240:	000b8f13 	andeq	r8, fp, r3, lsl pc

	return pxTopOfStack;
   10244:	039e1300 	orrseq	r1, lr, #0, 6
   10248:	0f000000 	svceq	0x00000000
   1024c:	000bb004 	andeq	fp, fp, r4
   10250:	250d0400 	strcs	r0, [sp, #-1024]	; 0xfffffc00
   10254:	290e0000 	stmdbcs	lr, {}	; <UNPREDICTABLE>
   10258:	00000b2f 	andeq	r0, r0, pc, lsr #22
   1025c:	0022a00a 	eoreq	sl, r2, sl
}
   10260:	220f5400 	andcs	r5, pc, #0, 8
   10264:	00000cda 	ldrdeq	r0, [r0], -sl
   10268:	002a2906 	eoreq	r2, sl, r6, lsl #18
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   1026c:	a9240f00 	stmdbge	r4!, {r8, r9, sl, fp}
   10270:	00000003 	andeq	r0, r0, r3
   10274:	00262a06 	eoreq	r2, r6, r6, lsl #20
   10278:	e8250f00 	stmda	r5!, {r8, r9, sl, fp}
   1027c:	0400000a 	streq	r0, [r0], #-10
   10280:	0021bb06 	eoreq	fp, r1, r6, lsl #22
   10284:	cc260f00 	stcgt	15, cr0, [r6], #-0
   10288:	08000003 	stmdaeq	r0, {r0, r1}
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1028c:	00226706 	eoreq	r6, r2, r6, lsl #14

	/* Start the first task. */
	vPortISRStartFirstTask();	
   10290:	cc270f00 	stcgt	15, cr0, [r7], #-0

	/* Should not get here! */
	return 0;
   10294:	0c000003 	stceq	0, cr0, [r0], {3}
   10298:	002abd06 	eoreq	fp, sl, r6, lsl #26
   1029c:	cc290f00 	stcgt	15, cr0, [r9], #-0
   102a0:	10000003 	andne	r0, r0, r3
   102a4:	00211706 	eoreq	r1, r1, r6, lsl #14
   102a8:	cc2a0f00 	stcgt	15, cr0, [sl], #-0
   102ac:	14000003 	strne	r0, [r0], #-3
}
   102b0:	0020e006 	eoreq	lr, r0, r6
   102b4:	932c0f00 	teqls	ip, #0, 30
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   102b8:	18000006 	stmdane	r0, {r1, r2}
   102bc:	00297d06 	eoreq	r7, r9, r6, lsl #26
   102c0:	432d0f00 	teqmi	sp, #0, 30
   102c4:	1c000007 	stcne	0, cr0, [r0], {7}
   102c8:	00243b06 	eoreq	r3, r4, r6, lsl #22
   102cc:	6c2e0f00 	stcvs	15, cr0, [lr], #-0
   102d0:	20000000 	andcs	r0, r0, r0
   102d4:	0021d406 	eoreq	sp, r1, r6, lsl #8
   102d8:	9e2f0f00 	cdpls	15, 2, cr0, cr15, cr0, {0}
   102dc:	24000003 	strcs	r0, [r0], #-3
   102e0:	00239c06 	eoreq	r9, r3, r6, lsl #24
   102e4:	9e310f00 	cdpls	15, 3, cr0, cr1, cr0, {0}
   102e8:	28000003 	stmdacs	r0, {r0, r1}
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   102ec:	0021b006 	eoreq	fp, r1, r6
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR(int nIRQ, void *pParam )
{
   102f0:	a9320f00 	ldmdbge	r2!, {r8, r9, sl, fp}
   102f4:	2c000003 	stccs	0, cr0, [r0], {3}
   102f8:	00209506 	eoreq	r9, r0, r6, lsl #10
   102fc:	9e330f00 	cdpls	15, 3, cr0, cr3, cr0, {0}
   10300:	30000003 	andcc	r0, r0, r3
   10304:	0020ea06 	eoreq	lr, r0, r6, lsl #20
   10308:	a9340f00 	ldmdbge	r4!, {r8, r9, sl, fp}
   1030c:	34000003 	strcc	r0, [r0], #-3
   10310:	00263906 	eoreq	r3, r6, r6, lsl #18
   10314:	9e350f00 	cdpls	15, 3, cr0, cr5, cr0, {0}
   10318:	38000003 	stmdacc	r0, {r0, r1}
	vTaskIncrementTick();
   1031c:	00288c06 	eoreq	r8, r8, r6, lsl #24

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   10320:	a9370f00 	ldmdbge	r7!, {r8, r9, sl, fp}
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   10324:	3c000003 	stccc	0, cr0, [r0], {3}
   10328:	00273106 	eoreq	r3, r7, r6, lsl #2
   1032c:	a9380f00 	ldmdbge	r8!, {r8, r9, sl, fp}
   10330:	40000003 	andmi	r0, r0, r3
   10334:	00282f06 	eoreq	r2, r8, r6, lsl #30
   10338:	9e390f00 	cdpls	15, 3, cr0, cr9, cr0, {0}
   1033c:	44000003 	strmi	r0, [r0], #-3
   10340:	002adc06 	eoreq	sp, sl, r6, lsl #24
   10344:	da3b0f00 	ble	ed3f4c <mailbuffer+0xe98e5c>
}
   10348:	4800000c 	stmdami	r0, {r2, r3}
   1034c:	0024a706 	eoreq	sl, r4, r6, lsl #14

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   10350:	503c0f00 	eorspl	r0, ip, r0, lsl #30
   10354:	4c000004 	stcmi	0, cr0, [r0], {4}
   10358:	001fa006 	andseq	sl, pc, r6
   1035c:	e03e0f00 	eors	r0, lr, r0, lsl #30
   10360:	5000000c 	andpl	r0, r0, ip
   10364:	9e040f00 	cdpls	15, 0, cr0, cr4, cr0, {0}
   10368:	0f000003 	svceq	0x00000003
   1036c:	000bc604 	andeq	ip, fp, r4, lsl #12
   10370:	22a00400 	adccs	r0, r0, #0, 8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   10374:	400f0000 	andmi	r0, pc, r0
   10378:	00000bd1 	ldrdeq	r0, [r0], -r1
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	DisableInterrupts();
   1037c:	0003a919 	andeq	sl, r3, r9, lsl r9

	pRegs->CTL = 0x003E0000;
   10380:	0d060b00 	vstreq	d0, [r6, #-0]
   10384:	0d060000 	stceq	0, cr0, [r6, #-0]
   10388:	82170000 	andshi	r0, r7, #0
   1038c:	0f000003 	svceq	0x00000003
	pRegs->LOD = 1000 - 1;
   10390:	e6040f00 	str	r0, [r4], -r0, lsl #30
   10394:	1900000c 	stmdbne	r0, {r2, r3}
   10398:	000003cc 	andeq	r0, r0, ip, asr #7
   1039c:	0055011a 	subseq	r0, r5, sl, lsl r1
	pRegs->RLD = 1000 - 1;
   103a0:	582f0100 	stmdapl	pc!, {r8}	; <UNPREDICTABLE>
   103a4:	48000290 	stmdami	r0, {r4, r7, r9}
   103a8:	01000001 	tsteq	r0, r1
   103ac:	000d439c 	muleq	sp, ip, r3
	pRegs->DIV = portTIMER_PRESCALE;
   103b0:	43af1b00 			; <UNDEFINED> instruction: 0x43af1b00
   103b4:	2f010000 	svccs	0x00010000
   103b8:	00000d43 	andeq	r0, r0, r3, asr #26
   103bc:	1b6c9102 	blne	1b347cc <mailbuffer+0x1af96dc>
	pRegs->CLI = 0;
   103c0:	000020e2 	andeq	r2, r0, r2, ror #1
   103c4:	06932f01 	ldreq	r2, [r3], r1, lsl #30
   103c8:	91020000 	mrsls	r0, (UNDEF: 2)
   103cc:	040f0068 	streq	r0, [pc], #-104	; 103d4 <prvSetupTimerInterrupt+0x84>
	pRegs->CTL = 0x003E00A2;
   103d0:	00000af4 	strdeq	r0, [r0], -r4
   103d4:	0054ff1a 	subseq	pc, r4, sl, lsl pc	; <UNPREDICTABLE>
   103d8:	a0460100 	subge	r0, r6, r0, lsl #2
   103dc:	ec000291 	sfm	f0, 4, [r0], {145}	; 0x91
   103e0:	01000000 	mrseq	r0, (UNDEF: 0)

	RegisterInterrupt(64, vTickISR, NULL);
   103e4:	000d6d9c 	muleq	sp, ip, sp
   103e8:	43af1b00 			; <UNDEFINED> instruction: 0x43af1b00
   103ec:	46010000 	strmi	r0, [r1], -r0
   103f0:	00000d43 	andeq	r0, r0, r3, asr #26
   103f4:	006c9102 	rsbeq	r9, ip, r2, lsl #2

	EnableInterrupt(64);
   103f8:	0055cd1c 	subseq	ip, r5, ip, lsl sp
   103fc:	cc5b0100 	ldfgte	f0, [fp], {-0}

	EnableInterrupts();
   10400:	8c000003 	stchi	0, cr0, [r0], {3}
   10404:	28000292 	stmdacs	r0, {r1, r4, r7, r9}
   10408:	01000004 	tsteq	r0, r4
   1040c:	000de59c 	muleq	sp, ip, r5
   10410:	23301b00 	teqcs	r0, #0, 22
   10414:	5b010000 	blpl	5041c <mailbuffer+0x1532c>
}
   10418:	00000693 	muleq	r0, r3, r6
   1041c:	1d4c9102 	stfnep	f1, [ip, #-8]
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   10420:	000043af 	andeq	r4, r0, pc, lsr #7
   10424:	0d435d01 	stcleq	13, cr5, [r3, #-4]
   10428:	91020000 	mrsls	r0, (UNDEF: 2)
   1042c:	4d7d1d6c 	ldclmi	13, cr1, [sp, #-432]!	; 0xfffffe50
   10430:	60010000 	andvs	r0, r1, r0
   10434:	00000650 	andeq	r0, r0, r0, asr r6
   10438:	1d689102 	stfnep	f1, [r8, #-8]!
   1043c:	00004228 	andeq	r4, r0, r8, lsr #4
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   10440:	0de56a01 	stcleq	10, cr6, [r5, #4]!
   10444:	91020000 	mrsls	r0, (UNDEF: 2)
   10448:	2a441d64 	bcs	11179e0 <mailbuffer+0x10dc8f0>
   1044c:	b0010000 	andlt	r0, r1, r0
   10450:	00000489 	andeq	r0, r0, r9, lsl #9
   10454:	1e549102 	lognes	f1, f2
   10458:	00029330 	andeq	r9, r2, r0, lsr r3

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   1045c:	0000013c 	andeq	r0, r0, ip, lsr r1
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   10460:	0042541d 	subeq	r5, r2, sp, lsl r4
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   10464:	eb780100 	bl	1e1086c <mailbuffer+0x1dd577c>
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   10468:	0200000d 	andeq	r0, r0, #13
   1046c:	00006091 	muleq	r0, r1, r0
   10470:	027a040f 	rsbseq	r0, sl, #251658240	; 0xf000000
   10474:	040f0000 	streq	r0, [pc], #-0	; 1047c <vPortISRStartFirstTask+0x5c>
   10478:	000002d6 	ldrdeq	r0, [r0], -r6
   1047c:	0056201a 	subseq	r2, r6, sl, lsl r0
   10480:	b4ba0100 	ldrtlt	r0, [sl], #256	; 0x100
   10484:	9c000296 	sfmls	f0, 4, [r0], {150}	; 0x96
   10488:	01000000 	mrseq	r0, (UNDEF: 0)
   1048c:	000e239c 	muleq	lr, ip, r3
   10490:	43af1b00 			; <UNDEFINED> instruction: 0x43af1b00
   10494:	ba010000 	blt	5049c <mailbuffer+0x153ac>
   10498:	00000d43 	andeq	r0, r0, r3, asr #26
   1049c:	1b6c9102 	blne	1b348ac <mailbuffer+0x1af97bc>
   104a0:	000020ae 	andeq	r2, r0, lr, lsr #1
   104a4:	0ad0ba01 	beq	ff43ecb0 <_estack+0xf742ecb0>
   104a8:	91020000 	mrsls	r0, (UNDEF: 2)
   104ac:	e81a0068 	ldmda	sl, {r3, r5, r6}
   104b0:	01000055 	qaddeq	r0, r5, r0
   104b4:	029750c1 	addseq	r5, r7, #193	; 0xc1
	__asm volatile (
   104b8:	00009c00 	andeq	r9, r0, r0, lsl #24
   104bc:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
   104c0:	1b00000e 	blne	10500 <vPortYieldProcessor+0x24>
   104c4:	000043af 	andeq	r4, r0, pc, lsr #7
   104c8:	0d43c101 	stfeqp	f4, [r3, #-4]
   104cc:	91020000 	mrsls	r0, (UNDEF: 2)
   104d0:	2a731b6c 	bcs	1cd7288 <mailbuffer+0x1c9c198>
   104d4:	c1010000 	mrsgt	r0, (UNDEF: 1)
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   104d8:	00000ad6 	ldrdeq	r0, [r0], -r6
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   104dc:	00689102 	rsbeq	r9, r8, r2, lsl #2

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   104e0:	0055611a 	subseq	r6, r5, sl, lsl r1
   104e4:	ecc80100 	stfe	f0, [r8], {0}
   104e8:	9c000297 	sfmls	f0, 4, [r0], {151}	; 0x97
   104ec:	01000000 	mrseq	r0, (UNDEF: 0)
   104f0:	000e879c 	muleq	lr, ip, r7
   104f4:	43af1b00 			; <UNDEFINED> instruction: 0x43af1b00
   104f8:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
   104fc:	00000d43 	andeq	r0, r0, r3, asr #26
   10500:	1b6c9102 	blne	1b34910 <mailbuffer+0x1af9820>
   10504:	000022c6 	andeq	r2, r0, r6, asr #5
   10508:	0adcc801 	beq	ff742514 <_estack+0xf7732514>
   1050c:	91020000 	mrsls	r0, (UNDEF: 2)
   10510:	951a0068 	ldrls	r0, [sl, #-104]	; 0xffffff98
   10514:	01000055 	qaddeq	r0, r5, r0
   10518:	029888cf 	addseq	r8, r8, #13565952	; 0xcf0000
   1051c:	00009c00 	andeq	r9, r0, r0, lsl #24
   10520:	b99c0100 	ldmiblt	ip, {r8}
   10524:	1b00000e 	blne	10564 <vPortYieldProcessor+0x88>
   10528:	000043af 	andeq	r4, r0, pc, lsr #7
   1052c:	0d43cf01 	stcleq	15, cr12, [r3, #-4]
   10530:	91020000 	mrsls	r0, (UNDEF: 2)
   10534:	26151b6c 	ldrcs	r1, [r5], -ip, ror #22
   10538:	cf010000 	svcgt	0x00010000
   1053c:	00000ae2 	andeq	r0, r0, r2, ror #21

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   10540:	00689102 	rsbeq	r9, r8, r2, lsl #2

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   10544:	00567e1f 	subseq	r7, r6, pc, lsl lr
   10548:	24d60100 	ldrbcs	r0, [r6], #256	; 0x100
   1054c:	cc000299 	sfmgt	f0, 4, [r0], {153}	; 0x99
   10550:	01000001 	tsteq	r0, r1
   10554:	000f3b9c 	muleq	pc, ip, fp	; <UNPREDICTABLE>
   10558:	43af1b00 			; <UNDEFINED> instruction: 0x43af1b00
   1055c:	d6010000 	strle	r0, [r1], -r0
   10560:	00000d43 	andeq	r0, r0, r3, asr #26
   10564:	1b5c9102 	blne	1734974 <mailbuffer+0x16f9884>
   10568:	00005616 	andeq	r5, r0, r6, lsl r6
   1056c:	0394d601 	orrseq	sp, r4, #1048576	; 0x100000
   10570:	91020000 	mrsls	r0, (UNDEF: 2)
   10574:	55c21d5b 	strbpl	r1, [r2, #3419]	; 0xd5b
   10578:	da010000 	ble	50580 <mailbuffer+0x15490>
   1057c:	000009d3 	ldrdeq	r0, [r0], -r3
   10580:	1d649102 	stfnep	f1, [r4, #-8]!
   10584:	00000c91 	muleq	r0, r1, ip
   10588:	0f3bdb01 	svceq	0x003bdb01
   1058c:	91020000 	mrsls	r0, (UNDEF: 2)
   10590:	56721d60 	ldrbtpl	r1, [r2], -r0, ror #26

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked, no_instrument_function));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   10594:	dd010000 	stcle	0, cr0, [r1, #-0]
   10598:	00000394 	muleq	r0, r4, r3
   1059c:	1d6f9102 	stfnep	f1, [pc, #-8]!	; 1059c <vFreeRTOS_ISR+0x8>
   105a0:	00005557 	andeq	r5, r0, r7, asr r5
   105a4:	0394de01 	orrseq	sp, r4, #1, 28
   105a8:	91020000 	mrsls	r0, (UNDEF: 2)
   105ac:	9a141e6e 	bls	517f6c <mailbuffer+0x4dce7c>
   105b0:	00400002 	subeq	r0, r0, r2
   105b4:	4b1d0000 	blmi	7505bc <mailbuffer+0x7154cc>
   105b8:	01000056 	qaddeq	r0, r6, r0
   105bc:	0003a9f5 	strdeq	sl, [r3], -r5
   105c0:	68910200 	ldmvs	r1, {r9}
   105c4:	b70b0000 	strlt	r0, [fp, -r0]
   105c8:	4b000003 	blmi	105dc <vFreeRTOS_ISR+0x48>
   105cc:	1700000f 	strne	r0, [r0, -pc]
   105d0:	00000382 	andeq	r0, r0, r2, lsl #7
   105d4:	1d200001 	stcne	0, cr0, [r0, #-4]!
   105d8:	01000055 	qaddeq	r0, r5, r0
   105dc:	03cc0110 	biceq	r0, ip, #16, 2
   105e0:	9af00000 	bls	ffc105e8 <_estack+0xf7c005e8>
   105e4:	01980002 	orrseq	r0, r8, r2
   105e8:	9c010000 	stcls	0, cr0, [r1], {-0}
   105ec:	00000f75 	andeq	r0, r0, r5, ror pc
   105f0:	0043af21 	subeq	sl, r3, r1, lsr #30
	irqHandler();
   105f4:	01100100 	tsteq	r0, r0, lsl #2
	portRESTORE_CONTEXT();	
   105f8:	00000d43 	andeq	r0, r0, r3, asr #26
   105fc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
   10600:	0056ff22 	subseq	pc, r6, r2, lsr #30
   10604:	01200100 	teqeq	r0, r0, lsl #2
   10608:	00029c88 	andeq	r9, r2, r8, lsl #25
   1060c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10610:	0fe19c01 	svceq	0x00e19c01
   10614:	2c210000 	stccs	0, cr0, [r1], #-0
   10618:	01000026 	tsteq	r0, r6, lsr #32
   1061c:	0ae80120 	beq	ffa10aa4 <_estack+0xf7a00aa4>
   10620:	91020000 	mrsls	r0, (UNDEF: 2)
   10624:	011d2164 	tsteq	sp, r4, ror #2
   10628:	20010000 	andcs	r0, r1, r0
   1062c:	00045001 	andeq	r5, r4, r1
   10630:	60910200 	addsvs	r0, r1, r0, lsl #4
   10634:	001b4821 	andseq	r4, fp, r1, lsr #16
   10638:	01200100 	teqeq	r0, r0, lsl #2
   1063c:	00000450 	andeq	r0, r0, r0, asr r4
   10640:	235c9102 	cmpcs	ip, #-2147483648	; 0x80000000
   10644:	000043af 	andeq	r4, r0, pc, lsr #7
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   10648:	43012201 	movwmi	r2, #4609	; 0x1201
   1064c:	0200000d 	andeq	r0, r0, #13
   10650:	a01e6891 	mulsge	lr, r1, r8
   10654:	8800029d 	stmdahi	r0, {r0, r2, r3, r4, r7, r9}
   10658:	23000000 	movwcs	r0, #0
   1065c:	00005616 	andeq	r5, r0, r6, lsl r6
   10660:	94013101 	strls	r3, [r1], #-257	; 0xfffffeff
   10664:	02000003 	andeq	r0, r0, #3
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   10668:	00006f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
   1066c:	00565420 	subseq	r5, r6, r0, lsr #8
   10670:	01580100 	cmpeq	r8, r0, lsl #2
   10674:	00000394 	muleq	r0, r4, r3
   10678:	00029e78 	andeq	r9, r2, r8, ror lr
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   1067c:	0000007c 	andeq	r0, r0, ip, ror r0
   10680:	100b9c01 	andne	r9, fp, r1, lsl #24
   10684:	af210000 	svcge	0x00210000
   10688:	01000043 	tsteq	r0, r3, asr #32
   1068c:	0d430158 	stfeqe	f0, [r3, #-352]	; 0xfffffea0
   10690:	91020000 	mrsls	r0, (UNDEF: 2)
   10694:	3b20006c 	blcc	81084c <mailbuffer+0x7d575c>
   10698:	01000055 	qaddeq	r0, r5, r0
   1069c:	0394015e 	orrseq	r0, r4, #-2147483625	; 0x80000017
   106a0:	9ef40000 	cdpls	0, 15, cr0, cr4, cr0, {0}
   106a4:	00c40002 	sbceq	r0, r4, r2
   106a8:	9c010000 	stcls	0, cr0, [r1], {-0}
}
   106ac:	00001065 	andeq	r1, r0, r5, rrx

void vPortExitCritical( void )
{
   106b0:	0043af21 	subeq	sl, r3, r1, lsr #30
   106b4:	015e0100 	cmpeq	lr, r0, lsl #2
   106b8:	00000d43 	andeq	r0, r0, r3, asr #26
   106bc:	1e649102 	lgnnes	f1, f2
   106c0:	00029f40 	andeq	r9, r2, r0, asr #30
   106c4:	00000050 	andeq	r0, r0, r0, asr r0
   106c8:	01006924 	tsteq	r0, r4, lsr #18
   106cc:	03a90162 			; <UNDEFINED> instruction: 0x03a90162
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   106d0:	91020000 	mrsls	r0, (UNDEF: 2)
   106d4:	9f4c1e6c 	svcls	0x004c1e6c
   106d8:	002c0002 	eoreq	r0, ip, r2
   106dc:	13230000 	teqne	r3, #0
   106e0:	01000055 	qaddeq	r0, r5, r0
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   106e4:	03940164 	orrseq	r0, r4, #100, 2
   106e8:	91020000 	mrsls	r0, (UNDEF: 2)
   106ec:	0000006b 	andeq	r0, r0, fp, rrx
   106f0:	0046e21d 	subeq	lr, r6, sp, lsl r2
   106f4:	a9220100 	stmdbge	r2!, {r8}
   106f8:	05000003 	streq	r0, [r0, #-3]
   106fc:	030c5003 	movweq	r5, #49155	; 0xc003

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   10700:	03b70b00 			; <UNDEFINED> instruction: 0x03b70b00
   10704:	10860000 	addne	r0, r6, r0
   10708:	82170000 	andshi	r0, r7, #0
   1070c:	06000003 	streq	r0, [r0], -r3
   10710:	558a1d00 	strpl	r1, [sl, #3328]	; 0xd00
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   10714:	24010000 	strcs	r0, [r1], #-0
   10718:	00001097 	muleq	r0, r7, r0
   1071c:	02480305 	subeq	r0, r8, #335544320	; 0x14000000
   10720:	76100003 	ldrvc	r0, [r0], -r3
   10724:	00000010 	andeq	r0, r0, r0, lsl r0
   10728:	00000a49 	andeq	r0, r0, r9, asr #20
   1072c:	2a530004 	bcs	14d0744 <mailbuffer+0x1495654>
   10730:	01040000 	mrseq	r0, (UNDEF: 4)
   10734:	00000019 	andeq	r0, r0, r9, lsl r0
   10738:	00574901 	subseq	r4, r7, r1, lsl #18
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   1073c:	000ddc00 	andeq	sp, sp, r0, lsl #24
   10740:	029fb800 	addseq	fp, pc, #0, 16
   10744:	00052400 	andeq	r2, r5, r0, lsl #8
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   10748:	0054cb00 	subseq	ip, r4, r0, lsl #22
   1074c:	02010200 	andeq	r0, r1, #0, 4
   10750:	0000401b 	andeq	r4, r0, fp, lsl r0
   10754:	25460300 	strbcs	r0, [r6, #-768]	; 0xfffffd00
   10758:	03000000 	movweq	r0, #0
   1075c:	00002b28 	andeq	r2, r0, r8, lsr #22
   10760:	28bb0301 	ldmcs	fp!, {r0, r8, r9}
   10764:	00020000 	andeq	r0, r2, r0
   10768:	00221304 	eoreq	r1, r2, r4, lsl #6
   1076c:	25220200 	strcs	r0, [r2, #-512]!	; 0xfffffe00
   10770:	02000000 	andeq	r0, r0, #0
   10774:	6c2b0201 	sfmvs	f0, 4, [fp], #-4
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   10778:	03000000 	movweq	r0, #0
   1077c:	0000259a 	muleq	r0, sl, r5
   10780:	2c490300 	mcrrcs	3, 0, r0, r9, cr0
	if( pxCoRoutine )
   10784:	03010000 	movweq	r0, #4096	; 0x1000
   10788:	00002221 	andeq	r2, r0, r1, lsr #4
   1078c:	265b0302 	ldrbcs	r0, [fp], -r2, lsl #6
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   10790:	00030000 	andeq	r0, r3, r0
   10794:	00242104 	eoreq	r2, r4, r4, lsl #2
   10798:	4b310200 	blmi	c50fa0 <mailbuffer+0xc15eb0>
   1079c:	05000000 	streq	r0, [r0, #-0]
   107a0:	bc340208 	lfmlt	f0, 4, [r4], #-32	; 0xffffffe0
		{
			pxCurrentCoRoutine = pxCoRoutine;
   107a4:	06000000 	streq	r0, [r0], -r0
   107a8:	00002276 	andeq	r2, r0, r6, ror r2
   107ac:	00bc3602 	adcseq	r3, ip, r2, lsl #12
   107b0:	06000000 	streq	r0, [r0], -r0
			prvInitialiseCoRoutineLists();
   107b4:	000027d3 	ldrdeq	r2, [r0], -r3
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   107b8:	00bc3702 	adcseq	r3, ip, r2, lsl #14
   107bc:	06010000 	streq	r0, [r1], -r0
   107c0:	000021f3 	strdeq	r2, [r0], -r3
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   107c4:	00c33802 	sbceq	r3, r3, r2, lsl #16
   107c8:	06020000 	streq	r0, [r2], -r0
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   107cc:	00001f0c 	andeq	r1, r0, ip, lsl #30
   107d0:	00c33902 	sbceq	r3, r3, r2, lsl #18
   107d4:	06040000 	streq	r0, [r4], -r0
		pxCoRoutine->uxPriority = uxPriority;
   107d8:	00002bb3 			; <UNDEFINED> instruction: 0x00002bb3
   107dc:	00c33a02 	sbceq	r3, r3, r2, lsl #20
   107e0:	00060000 	andeq	r0, r6, r0
		pxCoRoutine->uxIndex = uxIndex;
   107e4:	2a080107 	bcs	210c08 <mailbuffer+0x1d5b18>
   107e8:	07000007 	streq	r0, [r0, -r7]
   107ec:	01320702 	teqeq	r2, r2, lsl #14
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   107f0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   107f4:	02000022 	andeq	r0, r0, #34	; 0x22
   107f8:	0000773d 	andeq	r7, r0, sp, lsr r7

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   107fc:	02120500 	andseq	r0, r2, #0, 10
   10800:	0001865c 	andeq	r8, r1, ip, asr r6
   10804:	29a80600 	stmibcs	r8!, {r9, sl}
   10808:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   1080c:	000000bc 	strheq	r0, [r0], -ip
   10810:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
   10814:	5f020000 	svcpl	0x00020000
   10818:	000000bc 	strheq	r0, [r0], -ip

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   1081c:	228c0601 	addcs	r0, ip, #1048576	; 0x100000
   10820:	60020000 	andvs	r0, r2, r0
   10824:	000000c3 	andeq	r0, r0, r3, asr #1
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   10828:	21280602 	teqcs	r8, r2, lsl #12
   1082c:	61020000 	mrsvs	r0, (UNDEF: 2)
   10830:	000000bc 	strheq	r0, [r0], -ip
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   10834:	22f60604 	rscscs	r0, r6, #4, 12	; 0x400000
   10838:	62020000 	andvs	r0, r2, #0
   1083c:	000000bc 	strheq	r0, [r0], -ip
   10840:	279f0605 	ldrcs	r0, [pc, r5, lsl #12]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   10844:	63020000 	movwvs	r0, #8192	; 0x2000
   10848:	000000bc 	strheq	r0, [r0], -ip
   1084c:	25e70606 	strbcs	r0, [r7, #1542]!	; 0x606
   10850:	64020000 	strvs	r0, [r2], #-0
   10854:	000000bc 	strheq	r0, [r0], -ip
   10858:	2c560607 	mrrccs	6, 0, r0, r6, cr7
   1085c:	66020000 	strvs	r0, [r2], -r0
   10860:	000000c3 	andeq	r0, r0, r3, asr #1
   10864:	22440608 	subcs	r0, r4, #8, 12	; 0x800000
   10868:	67020000 	strvs	r0, [r2, -r0]
   1086c:	000000c3 	andeq	r0, r0, r3, asr #1
   10870:	2135060a 	teqcs	r5, sl, lsl #12
   10874:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
   10878:	000000c3 	andeq	r0, r0, r3, asr #1
   1087c:	21fa060c 	mvnscs	r0, ip, lsl #12
   10880:	69020000 	stmdbvs	r2, {}	; <UNPREDICTABLE>
   10884:	000000bc 	strheq	r0, [r0], -ip
   10888:	233b060e 	teqcs	fp, #14680064	; 0xe00000
   1088c:	6a020000 	bvs	90894 <mailbuffer+0x557a4>
   10890:	000000bc 	strheq	r0, [r0], -ip
   10894:	2322060f 	teqcs	r2, #15728640	; 0xf00000
   10898:	6b020000 	blvs	908a0 <mailbuffer+0x557b0>
   1089c:	000000bc 	strheq	r0, [r0], -ip
   108a0:	28a80610 	stmiacs	r8!, {r4, r9, sl}

		xReturn = pdPASS;
   108a4:	6c020000 	stcvs	0, cr0, [r2], {-0}
   108a8:	000000bc 	strheq	r0, [r0], -ip
   108ac:	c7040011 	smladgt	r4, r1, r0, r0
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   108b0:	02000028 	andeq	r0, r0, #40	; 0x28
   108b4:	0000d56e 	andeq	sp, r0, lr, ror #10
	}
	
	return xReturn;	
   108b8:	02090500 	andeq	r0, r9, #0, 10
   108bc:	0001fa71 	andeq	pc, r1, r1, ror sl	; <UNPREDICTABLE>
   108c0:	29a80600 	stmibcs	r8!, {r9, sl}
   108c4:	73020000 	movwvc	r0, #8192	; 0x2000
   108c8:	000000bc 	strheq	r0, [r0], -ip
   108cc:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
   108d0:	74020000 	strvc	r0, [r2], #-0
}
   108d4:	000000bc 	strheq	r0, [r0], -ip
   108d8:	20880601 	addcs	r0, r8, r1, lsl #12
   108dc:	75020000 	strvc	r0, [r2, #-0]
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   108e0:	000000c3 	andeq	r0, r0, r3, asr #1
   108e4:	29b00602 	ldmibcs	r0!, {r1, r9, sl}
   108e8:	76020000 	strvc	r0, [r2], -r0
   108ec:	000000bc 	strheq	r0, [r0], -ip
   108f0:	2a4f0604 	bcs	13d2108 <mailbuffer+0x1397018>
   108f4:	77020000 	strvc	r0, [r2, -r0]
   108f8:	000000bc 	strheq	r0, [r0], -ip
   108fc:	27900605 	ldrcs	r0, [r0, r5, lsl #12]
   10900:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
   10904:	000000bc 	strheq	r0, [r0], -ip
   10908:	258d0606 	strcs	r0, [sp, #1542]	; 0x606
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   1090c:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
   10910:	000000bc 	strheq	r0, [r0], -ip
   10914:	2ab30607 	bcs	fecd2138 <_estack+0xf6cc2138>
   10918:	7a020000 	bvc	90920 <mailbuffer+0x55830>
   1091c:	000000bc 	strheq	r0, [r0], -ip
   10920:	06040008 	streq	r0, [r4], -r8

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10924:	02000023 	andeq	r0, r0, #35	; 0x23
   10928:	0001917c 	andeq	r9, r1, ip, ror r1
   1092c:	02090500 	andeq	r0, r9, #0, 10
   10930:	00027a7f 	andeq	r7, r2, pc, ror sl
   10934:	29a80600 	stmibcs	r8!, {r9, sl}
   10938:	81020000 	mrshi	r0, (UNDEF: 2)

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   1093c:	000000bc 	strheq	r0, [r0], -ip
   10940:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
   10944:	82020000 	andhi	r0, r2, #0
   10948:	000000bc 	strheq	r0, [r0], -ip
   1094c:	20170601 	andscs	r0, r7, r1, lsl #12

	if( xTimeToWake < xCoRoutineTickCount )
   10950:	83020000 	movwhi	r0, #8192	; 0x2000
   10954:	000000bc 	strheq	r0, [r0], -ip
   10958:	20410602 	subcs	r0, r1, r2, lsl #12
   1095c:	84020000 	strhi	r0, [r2], #-0
   10960:	000000bc 	strheq	r0, [r0], -ip
   10964:	27690603 	strbcs	r0, [r9, -r3, lsl #12]!
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10968:	85020000 	strhi	r0, [r2, #-0]
   1096c:	000000bc 	strheq	r0, [r0], -ip
   10970:	27210604 	strcs	r0, [r1, -r4, lsl #12]!
   10974:	86020000 	strhi	r0, [r2], -r0
   10978:	000000bc 	strheq	r0, [r0], -ip
   1097c:	1f290605 	svcne	0x00290605
   10980:	87020000 	strhi	r0, [r2, -r0]
   10984:	000000bc 	strheq	r0, [r0], -ip
   10988:	28950606 	ldmcs	r5, {r1, r2, r9, sl}
   1098c:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
   10990:	000000bc 	strheq	r0, [r0], -ip
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10994:	27160607 	ldrcs	r0, [r6, -r7, lsl #12]
   10998:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
   1099c:	000000bc 	strheq	r0, [r0], -ip
   109a0:	e4040008 	str	r0, [r4], #-8
   109a4:	02000027 	andeq	r0, r0, #39	; 0x27
   109a8:	0002058b 	andeq	r0, r2, fp, lsl #11
   109ac:	02070500 	andeq	r0, r7, #0, 10
   109b0:	0002d68e 	andeq	sp, r2, lr, lsl #13
   109b4:	29a80600 	stmibcs	r8!, {r9, sl}
   109b8:	90020000 	andls	r0, r2, r0
	}

	if( pxEventList )
   109bc:	000000bc 	strheq	r0, [r0], -ip
   109c0:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
   109c4:	91020000 	mrsls	r0, (UNDEF: 2)
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   109c8:	000000bc 	strheq	r0, [r0], -ip
   109cc:	26c90601 	strbcs	r0, [r9], r1, lsl #12
   109d0:	92020000 	andls	r0, r2, #0
   109d4:	000000bc 	strheq	r0, [r0], -ip
   109d8:	258d0602 	strcs	r0, [sp, #1538]	; 0x602
   109dc:	93020000 	movwls	r0, #8192	; 0x2000
   109e0:	000000bc 	strheq	r0, [r0], -ip
   109e4:	29600603 	stmdbcs	r0!, {r0, r1, r9, sl}^
   109e8:	94020000 	strls	r0, [r2], #-0
   109ec:	000000c3 	andeq	r0, r0, r3, asr #1
   109f0:	25220604 	strcs	r0, [r2, #-1540]!	; 0xfffff9fc
   109f4:	95020000 	strls	r0, [r2, #-0]
	}
}
   109f8:	000000bc 	strheq	r0, [r0], -ip
   109fc:	da040006 	ble	110a1c <mailbuffer+0xd592c>
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   10a00:	0200002b 	andeq	r0, r0, #43	; 0x2b
   10a04:	00028597 	muleq	r2, r7, r5
   10a08:	02020500 	andeq	r0, r2, #0, 10
   10a0c:	0003029c 	muleq	r3, ip, r2
   10a10:	29a80600 	stmibcs	r8!, {r9, sl}
   10a14:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
   10a18:	000000bc 	strheq	r0, [r0], -ip
   10a1c:	242b0600 	strtcs	r0, [fp], #-1536	; 0xfffffa00
   10a20:	9f020000 	svcls	0x00020000
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10a24:	000000bc 	strheq	r0, [r0], -ip
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   10a28:	09080001 	stmdbeq	r8, {r0}
   10a2c:	03379a02 	teqeq	r7, #8192	; 0x2000
   10a30:	02090000 	andeq	r0, r9, #0
   10a34:	0200003c 	andeq	r0, r0, #60	; 0x3c
   10a38:	0002e1a1 	andeq	lr, r2, r1, lsr #3
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   10a3c:	27910900 	ldrcs	r0, [r1, r0, lsl #18]
   10a40:	a3020000 	movwge	r0, #8192	; 0x2000
   10a44:	000001fa 	strdeq	r0, [r0], -sl
   10a48:	003c4c09 	eorseq	r4, ip, r9, lsl #24
   10a4c:	7aa40200 	bvc	fe911254 <_estack+0xf6901254>
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10a50:	09000002 	stmdbeq	r0, {r1}
   10a54:	00002584 	andeq	r2, r0, r4, lsl #11
   10a58:	02d6a502 	sbcseq	sl, r6, #8388608	; 0x800000
   10a5c:	04000000 	streq	r0, [r0], #-0
		}
		portENABLE_INTERRUPTS();
   10a60:	000026fc 	strdeq	r2, [r0], -ip
   10a64:	0302a702 	movweq	sl, #9986	; 0x2702
   10a68:	660a0000 	strvs	r0, [sl], -r0
   10a6c:	02000024 	andeq	r0, r0, #36	; 0x24
   10a70:	0373a902 	cmneq	r3, #32768	; 0x8000

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   10a74:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
   10a78:	02000029 	andeq	r0, r0, #41	; 0x29
   10a7c:	0000bcab 	andeq	fp, r0, fp, lsr #25
   10a80:	2b060000 	blcs	190a88 <mailbuffer+0x155998>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   10a84:	02000024 	andeq	r0, r0, #36	; 0x24
   10a88:	0000bcac 	andeq	fp, r0, ip, lsr #25
   10a8c:	74060100 	strvc	r0, [r6], #-256	; 0xffffff00
   10a90:	02000020 	andeq	r0, r0, #32
   10a94:	000373ad 	andeq	r7, r3, sp, lsr #7
   10a98:	0b000200 	bleq	112a0 <vListInsert+0xe0>
   10a9c:	000000c3 	andeq	r0, r0, r3, asr #1
   10aa0:	00000382 	andeq	r0, r0, r2, lsl #7
   10aa4:	0003820c 	andeq	r8, r3, ip, lsl #4
   10aa8:	04070000 	streq	r0, [r7], #-0
   10aac:	0001d407 	andeq	sp, r1, r7, lsl #8
   10ab0:	24660400 	strbtcs	r0, [r6], #-1024	; 0xfffffc00
   10ab4:	af020000 	svcge	0x00020000
   10ab8:	00000342 	andeq	r0, r0, r2, asr #6
   10abc:	0038750d 	eorseq	r7, r8, sp, lsl #10
   10ac0:	00bc1703 	adcseq	r1, ip, r3, lsl #14
   10ac4:	750d0000 	strvc	r0, [sp, #-0]
   10ac8:	03003233 	movweq	r3, #563	; 0x233
   10acc:	0003a919 	andeq	sl, r3, r9, lsl r9
   10ad0:	07040700 	streq	r0, [r4, -r0, lsl #14]
   10ad4:	0000071d 	andeq	r0, r0, sp, lsl r7
   10ad8:	13070807 	movwne	r0, #30727	; 0x7807
   10adc:	07000007 	streq	r0, [r0, -r7]
   10ae0:	07330601 	ldreq	r0, [r3, -r1, lsl #12]!
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10ae4:	02070000 	andeq	r0, r7, #0
   10ae8:	0007b805 	andeq	fp, r7, r5, lsl #16
   10aec:	05040e00 	streq	r0, [r4, #-3584]	; 0xfffff200
   10af0:	00746e69 	rsbseq	r6, r4, r9, ror #28
   10af4:	00293004 	eoreq	r3, r9, r4
   10af8:	c5200300 	strgt	r0, [r0, #-768]!	; 0xfffffd00
   10afc:	07000003 	streq	r0, [r0, -r3]
   10b00:	07180704 	ldreq	r0, [r8, -r4, lsl #14]
   10b04:	04070000 	streq	r0, [r7], #-0
   10b08:	00079805 	andeq	r9, r7, r5, lsl #16
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
   10b0c:	25520a00 	ldrbcs	r0, [r2, #-2560]	; 0xfffff600
   10b10:	04180000 	ldreq	r0, [r8], #-0
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   10b14:	00043a1e 	andeq	r3, r4, lr, lsl sl
   10b18:	26510600 	ldrbcs	r0, [r1], -r0, lsl #12
   10b1c:	20040000 	andcs	r0, r4, r0
   10b20:	0000043a 	andeq	r0, r0, sl, lsr r4
   10b24:	2c0c0600 	stccs	6, cr0, [ip], {-0}
   10b28:	21040000 	mrscs	r0, (UNDEF: 4)
   10b2c:	000003a9 	andeq	r0, r0, r9, lsr #7
   10b30:	268a0604 	strcs	r0, [sl], r4, lsl #12
   10b34:	22040000 	andcs	r0, r4, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   10b38:	000003cc 	andeq	r0, r0, ip, asr #7
   10b3c:	21690608 	cmncs	r9, r8, lsl #12
   10b40:	23040000 	movwcs	r0, #16384	; 0x4000
   10b44:	0000043a 	andeq	r0, r0, sl, lsr r4
   10b48:	277d060c 	ldrbcs	r0, [sp, -ip, lsl #12]!
   10b4c:	24040000 	strcs	r0, [r4], #-0
   10b50:	0000043a 	andeq	r0, r0, sl, lsr r4
   10b54:	2bbb0610 	blcs	feed239c <_estack+0xf6ec239c>
   10b58:	25040000 	strcs	r0, [r4, #-0]
	while( xPassedTicks )
   10b5c:	0000043a 	andeq	r0, r0, sl, lsr r4
	{
		xCoRoutineTickCount++;
   10b60:	040f0014 	streq	r0, [pc], #-20	; 10b68 <prvCheckDelayedList+0x54>
   10b64:	00000440 	andeq	r0, r0, r0, asr #8
   10b68:	00033710 	andeq	r3, r3, r0, lsl r7
   10b6c:	25520400 	ldrbcs	r0, [r2, #-1024]	; 0xfffffc00
   10b70:	27040000 	strcs	r0, [r4, -r0]
   10b74:	000003e5 	andeq	r0, r0, r5, ror #7
   10b78:	310a0411 	tstcc	sl, r1, lsl r4
		xPassedTicks--;
   10b7c:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
   10b80:	04831f05 	streq	r1, [r3], #3845	; 0xf05
   10b84:	51060000 	mrspl	r0, (UNDEF: 6)
   10b88:	05000026 	streq	r0, [r0, #-38]	; 0xffffffda
   10b8c:	00048321 	andeq	r8, r4, r1, lsr #6
   10b90:	f1060000 	cps	#0
   10b94:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   10b98:	0003a922 	andeq	sl, r3, r2, lsr #18
   10b9c:	85060400 	strhi	r0, [r6, #-1024]	; 0xfffffc00
   10ba0:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
   10ba4:	00048323 	andeq	r8, r4, r3, lsr #6
   10ba8:	0f000800 	svceq	0x00000800
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   10bac:	0003b704 	andeq	fp, r3, r4, lsl #14
   10bb0:	26310400 	ldrtcs	r0, [r1], -r0, lsl #8
   10bb4:	25050000 	strcs	r0, [r5, #-0]
   10bb8:	00000452 	andeq	r0, r0, r2, asr r4
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   10bbc:	00253b0a 	eoreq	r3, r5, sl, lsl #22
   10bc0:	21060c00 	tstcs	r6, r0, lsl #24
   10bc4:	000004c5 	andeq	r0, r0, r5, asr #9
   10bc8:	0020e006 	eoreq	lr, r0, r6
   10bcc:	62230600 	eorvs	r0, r3, #0, 12
   10bd0:	00000005 	andeq	r0, r0, r5
			pxOverflowDelayedCoRoutineList = pxTemp;
   10bd4:	002c3c06 	eoreq	r3, ip, r6, lsl #24
   10bd8:	68250600 	stmdavs	r5!, {r9, sl}
   10bdc:	04000005 	streq	r0, [r0], #-5
   10be0:	002a9506 	eoreq	r9, sl, r6, lsl #10
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   10be4:	6e270600 	cfmadda32vs	mvax0, mvax0, mvfx7, mvfx0
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   10be8:	08000005 	stmdaeq	r0, {r0, r2}
   10bec:	2ad10a00 	bcs	ff4533f4 <_estack+0xf74433f4>
   10bf0:	07380000 	ldreq	r0, [r8, -r0]!
   10bf4:	0005622d 	andeq	r6, r5, sp, lsr #4
   10bf8:	5a280600 	bpl	a12400 <mailbuffer+0x9d7310>
   10bfc:	2f070000 	svccs	0x00070000

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   10c00:	0000058e 	andeq	r0, r0, lr, lsl #11
   10c04:	24430600 	strbcs	r0, [r3], #-1536	; 0xfffffa00
   10c08:	31070000 	mrscc	r0, (UNDEF: 7)
   10c0c:	000005dd 	ldrdeq	r0, [r0], -sp
   10c10:	207c0604 	rsbscs	r0, ip, r4, lsl #12
   10c14:	33070000 	movwcc	r0, #28672	; 0x7000
   10c18:	00000394 	muleq	r0, r4, r3
			{			
				/* Timeout not yet expired. */																			
				break;																				
   10c1c:	243b0608 	ldrtcs	r0, [fp], #-1544	; 0xfffff9f8
			}																						

			portDISABLE_INTERRUPTS();
   10c20:	34070000 	strcc	r0, [r7], #-0
   10c24:	0000006c 	andeq	r0, r0, ip, rrx
   10c28:	22930609 	addscs	r0, r3, #9437184	; 0x900000
   10c2c:	35070000 	strcc	r0, [r7, #-0]
   10c30:	00000644 	andeq	r0, r0, r4, asr #12
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   10c34:	1f7a060c 	svcne	0x007a060c
   10c38:	37070000 	strcc	r0, [r7, -r0]
   10c3c:	00000394 	muleq	r0, r4, r3
   10c40:	26a90610 	ssatcs	r0, #10, r0, lsl #12

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   10c44:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
   10c48:	00000394 	muleq	r0, r4, r3
   10c4c:	296f0611 	stmdbcs	pc!, {r0, r4, r9, sl}^	; <UNPREDICTABLE>
   10c50:	3a070000 	bcc	1d0c58 <mailbuffer+0x195b68>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   10c54:	0000064a 	andeq	r0, r0, sl, asr #12
   10c58:	1fb20614 	svcne	0x00b20614
   10c5c:	3b070000 	blcc	1d0c64 <mailbuffer+0x195b74>
   10c60:	00000650 	andeq	r0, r0, r0, asr r6
				}
			}
			portENABLE_INTERRUPTS();
   10c64:	27fc0618 			; <UNDEFINED> instruction: 0x27fc0618
   10c68:	3d070000 	stccc	0, cr0, [r7, #-0]
   10c6c:	00000656 	andeq	r0, r0, r6, asr r6
   10c70:	2b34061c 	blcs	d124e8 <mailbuffer+0xcd73f8>
   10c74:	3f070000 	svccc	0x00070000

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   10c78:	00000574 	andeq	r0, r0, r4, ror r5
   10c7c:	21780620 	cmncs	r8, r0, lsr #12
   10c80:	40070000 	andmi	r0, r7, r0
   10c84:	00000574 	andeq	r0, r0, r4, ror r5
   10c88:	040f002c 	streq	r0, [pc], #-44	; 10c90 <prvCheckDelayedList+0x17c>
   10c8c:	000004c5 	andeq	r0, r0, r5, asr #9
   10c90:	0389040f 	orreq	r0, r9, #251658240	; 0xf000000
   10c94:	040f0000 	streq	r0, [pc], #-0	; 10c9c <prvCheckDelayedList+0x188>
   10c98:	00000489 	andeq	r0, r0, r9, lsl #9
   10c9c:	00253b04 	eoreq	r3, r5, r4, lsl #22
   10ca0:	94290600 	strtls	r0, [r9], #-1536	; 0xfffffa00
   10ca4:	12000004 	andne	r0, r0, #4
   10ca8:	000003cc 	andeq	r0, r0, ip, asr #7
   10cac:	0000058e 	andeq	r0, r0, lr, lsl #11
   10cb0:	00056213 	andeq	r6, r5, r3, lsl r2
   10cb4:	040f0000 	streq	r0, [pc], #-0	; 10cbc <prvCheckDelayedList+0x1a8>
   10cb8:	0000057f 	andeq	r0, r0, pc, ror r5
   10cbc:	0028760a 	eoreq	r7, r8, sl, lsl #12
   10cc0:	26085400 	strcs	r5, [r8], -r0, lsl #8
   10cc4:	000005dd 	ldrdeq	r0, [r0], -sp
   10cc8:	00273d06 	eoreq	r3, r7, r6, lsl #26
   10ccc:	a9280800 	stmdbge	r8!, {fp}
   10cd0:	00000003 	andeq	r0, r0, r3
   10cd4:	001f3c06 	andseq	r3, pc, r6, lsl #24
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   10cd8:	58290800 	stmdapl	r9!, {fp}
   10cdc:	04000009 	streq	r0, [r0], #-9
   10ce0:	0025da06 	eoreq	sp, r5, r6, lsl #20
   10ce4:	5d2b0800 	stcpl	8, cr0, [fp, #-0]
   10ce8:	08000009 	stmdaeq	r0, {r0, r3}
   10cec:	00270b06 	eoreq	r0, r7, r6, lsl #22
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
   10cf0:	732d0800 	teqvc	sp, #0, 16
   10cf4:	48000009 	stmdami	r0, {r0, r3}
   10cf8:	002b4906 	eoreq	r4, fp, r6, lsl #18
   10cfc:	922f0800 	eorls	r0, pc, #0, 16
   10d00:	4c000006 	stcmi	0, cr0, [r0], {6}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   10d04:	94040f00 	strls	r0, [r4], #-3840	; 0xfffff100
   10d08:	0a000005 	beq	10d24 <prvCheckDelayedList+0x210>
   10d0c:	00002580 	andeq	r2, r0, r0, lsl #11
   10d10:	44280918 	strtmi	r0, [r8], #-2328	; 0xfffff6e8
   10d14:	06000006 	streq	r0, [r0], -r6
   10d18:	000020e0 	andeq	r2, r0, r0, ror #1
   10d1c:	068c2a09 	streq	r2, [ip], r9, lsl #20
   10d20:	06000000 	streq	r0, [r0], -r0
   10d24:	00001fe8 	andeq	r1, r0, r8, ror #31
   10d28:	03942b09 	orrseq	r2, r4, #9216	; 0x2400
   10d2c:	06040000 	streq	r0, [r4], -r0
}
   10d30:	00002149 	andeq	r2, r0, r9, asr #2
   10d34:	06be2c09 	ldrteq	r2, [lr], r9, lsl #24
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   10d38:	06050000 	streq	r0, [r5], -r0
   10d3c:	0000266b 	andeq	r2, r0, fp, ror #12
   10d40:	03cc2d09 	biceq	r2, ip, #576	; 0x240
   10d44:	06080000 	streq	r0, [r8], -r0
   10d48:	000021d4 	ldrdeq	r2, [r0], -r4
   10d4c:	039e2e09 	orrseq	r2, lr, #9, 28	; 0x90
   10d50:	060c0000 	streq	r0, [ip], -r0
   10d54:	00002857 	andeq	r2, r0, r7, asr r8
   10d58:	03a92f09 			; <UNDEFINED> instruction: 0x03a92f09
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   10d5c:	06100000 	ldreq	r0, [r0], -r0

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   10d60:	000022d7 	ldrdeq	r2, [r0], -r7

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10d64:	00403009 	subeq	r3, r0, r9
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   10d68:	00140000 	andseq	r0, r4, r0
   10d6c:	05e3040f 	strbeq	r0, [r3, #1039]!	; 0x40f
   10d70:	040f0000 	streq	r0, [pc], #-0	; 10d78 <vCoRoutineSchedule+0x40>
   10d74:	00000186 	andeq	r0, r0, r6, lsl #3
   10d78:	01fa040f 	mvnseq	r0, pc, lsl #8
		{
			/* No more co-routines to check. */
			return;
   10d7c:	040f0000 	streq	r0, [pc], #-0	; 10d84 <vCoRoutineSchedule+0x4c>
		}
		--uxTopCoRoutineReadyPriority;
   10d80:	00000445 	andeq	r0, r0, r5, asr #8
   10d84:	002ad104 	eoreq	sp, sl, r4, lsl #2
   10d88:	c5420700 	strbgt	r0, [r2, #-1792]	; 0xfffff900
   10d8c:	0a000004 	beq	10da4 <vCoRoutineSchedule+0x6c>
   10d90:	00002749 	andeq	r2, r0, r9, asr #14
   10d94:	8c200a08 	stchi	10, cr0, [r0], #-32	; 0xffffffe0
   10d98:	06000006 	streq	r0, [r0], -r6

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10d9c:	00002443 	andeq	r2, r0, r3, asr #8
   10da0:	05dd220a 	ldrbeq	r2, [sp, #522]	; 0x20a
   10da4:	06000000 	streq	r0, [r0], -r0
   10da8:	000020e0 	andeq	r2, r0, r0, ror #1
   10dac:	068c240a 	streq	r2, [ip], sl, lsl #8
   10db0:	00040000 	andeq	r0, r4, r0
   10db4:	065c040f 	ldrbeq	r0, [ip], -pc, lsl #8
   10db8:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
   10dbc:	0a000027 	beq	10e60 <vCoRoutineSchedule+0x128>
   10dc0:	00066726 	andeq	r6, r6, r6, lsr #14
   10dc4:	09010200 	stmdbeq	r1, {r9}
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   10dc8:	0006be20 	andeq	fp, r6, r0, lsr #28
   10dcc:	2a9f0300 	bcs	fe7d19d4 <_estack+0xf67c19d4>
   10dd0:	03000000 	movweq	r0, #0
   10dd4:	00001fc0 	andeq	r1, r0, r0, asr #31
   10dd8:	222e0301 	eorcs	r0, lr, #67108864	; 0x4000000
   10ddc:	03020000 	movweq	r0, #8192	; 0x2000
   10de0:	000025c2 	andeq	r2, r0, r2, asr #11
   10de4:	fd040003 	stc2	0, cr0, [r4, #-12]
   10de8:	0900002a 	stmdbeq	r0, {r1, r3, r5}
   10dec:	00069d26 	andeq	r9, r6, r6, lsr #26
   10df0:	25800400 	strcs	r0, [r0, #1024]	; 0x400
   10df4:	32090000 	andcc	r0, r9, #0
   10df8:	000005e3 	andeq	r0, r0, r3, ror #11
   10dfc:	00269304 	eoreq	r9, r6, r4, lsl #6
   10e00:	df210b00 	svcle	0x00210b00
   10e04:	14000006 	strne	r0, [r0], #-6
   10e08:	000006f4 	strdeq	r0, [r0], -r4
   10e0c:	0006f413 	andeq	pc, r6, r3, lsl r4	; <UNPREDICTABLE>
   10e10:	04501300 	ldrbeq	r1, [r0], #-768	; 0xfffffd00
   10e14:	50130000 	andspl	r0, r3, r0
   10e18:	00000004 	andeq	r0, r0, r4
   10e1c:	06fa040f 	ldrbteq	r0, [sl], pc, lsl #8
   10e20:	070a0000 	streq	r0, [sl, -r0]
   10e24:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
   10e28:	0773230b 	ldrbeq	r2, [r3, -fp, lsl #6]!
   10e2c:	7d060000 	stcvc	0, cr0, [r6, #-0]
   10e30:	0b000029 	bleq	10edc <prvInitialiseCoRoutineLists+0x40>
   10e34:	00077325 	andeq	r7, r7, r5, lsr #6
   10e38:	44060000 	strmi	r0, [r6], #-0
   10e3c:	0b000028 	bleq	10ee4 <prvInitialiseCoRoutineLists+0x48>
   10e40:	00077927 	andeq	r7, r7, r7, lsr #18

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   10e44:	51060400 	tstpl	r6, r0, lsl #8
   10e48:	0b000026 	bleq	10ee8 <prvInitialiseCoRoutineLists+0x4c>
   10e4c:	00045028 	andeq	r5, r4, r8, lsr #32
   10e50:	0c060800 	stceq	8, cr0, [r6], {-0}
   10e54:	0b00002c 	bleq	10f0c <prvInitialiseCoRoutineLists+0x70>
   10e58:	00039e29 	andeq	r9, r3, r9, lsr #28
   10e5c:	3f060c00 	svccc	0x00060c00
   10e60:	0b000021 	bleq	10eec <prvInitialiseCoRoutineLists+0x50>
   10e64:	0003c52b 	andeq	ip, r3, fp, lsr #10
   10e68:	eb061000 	bl	194e70 <mailbuffer+0x159d80>
   10e6c:	0b000029 	bleq	10f18 <prvInitialiseCoRoutineLists+0x7c>
   10e70:	00039e2c 	andeq	r9, r3, ip, lsr #28
   10e74:	ba061400 	blt	195e7c <mailbuffer+0x15ad8c>
   10e78:	0b000023 	bleq	10f0c <prvInitialiseCoRoutineLists+0x70>

	return;
   10e7c:	00077f2e 	andeq	r7, r7, lr, lsr #30
   10e80:	59061800 	stmdbpl	r6, {fp, ip}
   10e84:	0b000023 	bleq	10f18 <prvInitialiseCoRoutineLists+0x7c>
   10e88:	0004502f 	andeq	r5, r4, pc, lsr #32
   10e8c:	13061c00 	movwne	r1, #27648	; 0x6c00
   10e90:	0b00002b 	bleq	10f44 <prvInitialiseCoRoutineLists+0xa8>
}
   10e94:	00045030 	andeq	r5, r4, r0, lsr r0
   10e98:	0f002000 	svceq	0x00002000
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   10e9c:	0006c904 	andeq	ip, r6, r4, lsl #18
   10ea0:	ca040f00 	bgt	114aa8 <mailbuffer+0xd99b8>
   10ea4:	0f000000 	svceq	0x00000000
   10ea8:	0006d404 	andeq	sp, r6, r4, lsl #8
   10eac:	29070400 	stmdbcs	r7, {sl}
   10eb0:	320b0000 	andcc	r0, fp, #0
   10eb4:	000006fa 	strdeq	r0, [r0], -sl
   10eb8:	00250d0a 	eoreq	r0, r5, sl, lsl #26
   10ebc:	1d0c1800 	stcne	8, cr1, [ip, #-0]
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10ec0:	000007e5 	andeq	r0, r0, r5, ror #15
   10ec4:	0039ce06 	eorseq	ip, r9, r6, lsl #28
   10ec8:	f61f0c00 			; <UNDEFINED> instruction: 0xf61f0c00
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   10ecc:	00000007 	andeq	r0, r0, r7
   10ed0:	00508606 	subseq	r8, r0, r6, lsl #12
   10ed4:	f6210c00 			; <UNDEFINED> instruction: 0xf6210c00
   10ed8:	04000007 	streq	r0, [r0], #-7
   10edc:	00504706 	subseq	r4, r0, r6, lsl #14
   10ee0:	0b220c00 	bleq	893ee8 <mailbuffer+0x858df8>
   10ee4:	08000008 	stmdaeq	r0, {r3}
   10ee8:	0036f406 	eorseq	pc, r6, r6, lsl #8

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10eec:	21230c00 	teqcs	r3, r0, lsl #24
   10ef0:	0c000008 	stceq	0, cr0, [r0], {8}
   10ef4:	004fe906 	subeq	lr, pc, r6, lsl #18
   10ef8:	f6250c00 			; <UNDEFINED> instruction: 0xf6250c00
   10efc:	10000007 	andne	r0, r0, r7
   10f00:	004fc006 	subeq	ip, pc, r6
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   10f04:	0b270c00 	bleq	9d3f0c <mailbuffer+0x998e1c>
   10f08:	14000008 	strne	r0, [r0], #-8
   10f0c:	07f01400 	ldrbeq	r1, [r0, r0, lsl #8]!
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   10f10:	f0130000 			; <UNDEFINED> instruction: 0xf0130000
   10f14:	00000007 	andeq	r0, r0, r7
   10f18:	0790040f 	ldreq	r0, [r0, pc, lsl #8]
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   10f1c:	040f0000 	streq	r0, [pc], #-0	; 10f24 <prvInitialiseCoRoutineLists+0x88>
   10f20:	000007e5 	andeq	r0, r0, r5, ror #15
   10f24:	0003cc12 	andeq	ip, r3, r2, lsl ip

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   10f28:	00080b00 	andeq	r0, r8, r0, lsl #22
   10f2c:	07f01300 	ldrbeq	r1, [r0, r0, lsl #6]!
   10f30:	0f000000 	svceq	0x00000000
   10f34:	0007fc04 	andeq	pc, r7, r4, lsl #24
   10f38:	08211400 	stmdaeq	r1!, {sl, ip}
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   10f3c:	f0130000 			; <UNDEFINED> instruction: 0xf0130000
   10f40:	13000007 	movwne	r0, #7
   10f44:	0000039e 	muleq	r0, lr, r3
   10f48:	11040f00 	tstne	r4, r0, lsl #30
   10f4c:	04000008 	streq	r0, [r0], #-8
   10f50:	0000250d 	andeq	r2, r0, sp, lsl #10
   10f54:	0790290c 	ldreq	r2, [r0, ip, lsl #18]
   10f58:	a00a0000 	andge	r0, sl, r0
   10f5c:	54000022 	strpl	r0, [r0], #-34	; 0xffffffde
   10f60:	093b220d 	ldmdbeq	fp!, {r0, r2, r3, r9, sp}
}
   10f64:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
   10f68:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   10f6c:	0003a924 	andeq	sl, r3, r4, lsr #18
   10f70:	2a060000 	bcs	190f78 <mailbuffer+0x155e88>
   10f74:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
   10f78:	00093b25 	andeq	r3, r9, r5, lsr #22
   10f7c:	bb060400 	bllt	191f84 <mailbuffer+0x156e94>
   10f80:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
   10f84:	0003cc26 	andeq	ip, r3, r6, lsr #24
   10f88:	67060800 	strvs	r0, [r6, -r0, lsl #16]
   10f8c:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
   10f90:	0003cc27 	andeq	ip, r3, r7, lsr #24
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   10f94:	bd060c00 	stclt	12, cr0, [r6, #-0]
   10f98:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
   10f9c:	0003cc29 	andeq	ip, r3, r9, lsr #24
   10fa0:	17061000 	strne	r1, [r6, -r0]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10fa4:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
   10fa8:	0003cc2a 	andeq	ip, r3, sl, lsr #24
   10fac:	e0061400 	and	r1, r6, r0, lsl #8
   10fb0:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   10fb4:	00068c2c 	andeq	r8, r6, ip, lsr #24
   10fb8:	7d061800 	stcvc	8, cr1, [r6, #-0]
   10fbc:	0d000029 	stceq	0, cr0, [r0, #-164]	; 0xffffff5c
   10fc0:	0007732d 	andeq	r7, r7, sp, lsr #6
   10fc4:	3b061c00 	blcc	197fcc <mailbuffer+0x15cedc>
   10fc8:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   10fcc:	00006c2e 	andeq	r6, r0, lr, lsr #24
   10fd0:	d4062000 	strle	r2, [r6], #-0
   10fd4:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
   10fd8:	00039e2f 	andeq	r9, r3, pc, lsr #28
   10fdc:	9c062400 	cfstrsls	mvf2, [r6], {-0}
   10fe0:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
   10fe4:	00039e31 	andeq	r9, r3, r1, lsr lr
   10fe8:	b0062800 	andlt	r2, r6, r0, lsl #16
	{
		xReturn = pdTRUE;
   10fec:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
   10ff0:	0003a932 	andeq	sl, r3, r2, lsr r9
   10ff4:	95062c00 	strls	r2, [r6, #-3072]	; 0xfffff400
	}
	else
	{
		xReturn = pdFALSE;
   10ff8:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
   10ffc:	00039e33 	andeq	r9, r3, r3, lsr lr
	}

	return xReturn;
   11000:	ea063000 	b	19d008 <mailbuffer+0x161f18>
   11004:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
   11008:	0003a934 	andeq	sl, r3, r4, lsr r9
   1100c:	39063400 	stmdbcc	r6, {sl, ip, sp}
   11010:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
   11014:	00039e35 	andeq	r9, r3, r5, lsr lr
   11018:	8c063800 	stchi	8, cr3, [r6], {-0}
}
   1101c:	0d000028 	stceq	0, cr0, [r0, #-160]	; 0xffffff60
   11020:	0003a937 	andeq	sl, r3, r7, lsr r9
   11024:	31063c00 	tstcc	r6, r0, lsl #24
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   11028:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
   1102c:	0003a938 	andeq	sl, r3, r8, lsr r9
   11030:	2f064000 	svccs	0x00064000
   11034:	0d000028 	stceq	0, cr0, [r0, #-160]	; 0xffffff60
   11038:	00039e39 	andeq	r9, r3, r9, lsr lr
   1103c:	dc064400 	cfstrsle	mvf4, [r6], {-0}
   11040:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
   11044:	0009413b 	andeq	r4, r9, fp, lsr r1
   11048:	a7064800 	strge	r4, [r6, -r0, lsl #16]
   1104c:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   11050:	0004503c 	andeq	r5, r4, ip, lsr r0
   11054:	a0064c00 	andge	r4, r6, r0, lsl #24
   11058:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
   1105c:	0009473e 	andeq	r4, r9, lr, lsr r7

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   11060:	0f005000 	svceq	0x00005000
   11064:	00078504 	andeq	r8, r7, r4, lsl #10
   11068:	9e040f00 	cdpls	15, 0, cr0, cr4, cr0, {0}

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   1106c:	0f000003 	svceq	0x00000003
   11070:	00082704 	andeq	r2, r8, r4, lsl #14
   11074:	22a00400 	adccs	r0, r0, #0, 8
   11078:	400d0000 	andmi	r0, sp, r0
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   1107c:	00000832 	andeq	r0, r0, r2, lsr r8
   11080:	0003a915 	andeq	sl, r3, r5, lsl r9
   11084:	096d0b00 	stmdbeq	sp!, {r8, r9, fp}^
   11088:	096d0000 	stmdbeq	sp!, {}^	; <UNPREDICTABLE>

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   1108c:	82160000 	andshi	r0, r6, #0
   11090:	0f000003 	svceq	0x00000003
   11094:	4d040f00 	stcmi	15, cr0, [r4, #-0]
   11098:	15000009 	strne	r0, [r0, #-9]
   1109c:	000003cc 	andeq	r0, r0, ip, asr #7
   110a0:	00274a17 	eoreq	r4, r7, r7, lsl sl
   110a4:	b81d0100 	ldmdalt	sp, {r8}
   110a8:	ac00029f 	sfmge	f0, 4, [r0], {159}	; 0x9f
}
   110ac:	01000000 	mrseq	r0, (UNDEF: 0)
   110b0:	0009aa9c 	muleq	r9, ip, sl
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   110b4:	43af1800 			; <UNDEFINED> instruction: 0x43af1800
   110b8:	1d010000 	stcne	0, cr0, [r1, #-0]
   110bc:	000009aa 	andeq	r0, r0, sl, lsr #19
   110c0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
   110c4:	00002445 	andeq	r2, r0, r5, asr #8
   110c8:	05dd1d01 	ldrbeq	r1, [sp, #3329]	; 0xd01
   110cc:	91020000 	mrsls	r0, (UNDEF: 2)
   110d0:	040f0068 	streq	r0, [pc], #-104	; 110d8 <vListInitialiseItem+0x24>
   110d4:	00000692 	muleq	r0, r2, r6
   110d8:	00573a17 	subseq	r3, r7, r7, lsl sl
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   110dc:	64270100 	strtvs	r0, [r7], #-256	; 0xffffff00
   110e0:	b00002a0 	andlt	r0, r0, r0, lsr #5
   110e4:	01000000 	mrseq	r0, (UNDEF: 0)
   110e8:	0009d49c 	muleq	r9, ip, r4
   110ec:	43af1800 			; <UNDEFINED> instruction: 0x43af1800
   110f0:	27010000 	strcs	r0, [r1, -r0]
   110f4:	000009aa 	andeq	r0, r0, sl, lsr #19
   110f8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
}
   110fc:	00572219 	subseq	r2, r7, r9, lsl r2
   11100:	cc350100 	ldfgts	f0, [r5], #-0
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   11104:	14000003 	strne	r0, [r0], #-3
   11108:	c80002a1 	stmdagt	r0, {r0, r5, r7, r9}
   1110c:	01000003 	tsteq	r0, r3
   11110:	000a269c 	muleq	sl, ip, r6
   11114:	43af1800 			; <UNDEFINED> instruction: 0x43af1800
   11118:	35010000 	strcc	r0, [r1, #-0]
   1111c:	000009aa 	andeq	r0, r0, sl, lsr #19
   11120:	1a5c9102 	bne	1735530 <mailbuffer+0x16fa440>
   11124:	00002425 	andeq	r2, r0, r5, lsr #8
   11128:	006c3a01 	rsbeq	r3, ip, r1, lsl #20
   1112c:	91020000 	mrsls	r0, (UNDEF: 2)

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   11130:	43461a6f 	movtmi	r1, #27247	; 0x6a6f
   11134:	51010000 	mrspl	r0, (UNDEF: 1)
   11138:	0000056e 	andeq	r0, r0, lr, ror #10

	pxNewListItem->pxNext = pxIndex->pxNext;
   1113c:	1a689102 	bne	1a3554c <mailbuffer+0x19fa45c>
   11140:	0000432f 	andeq	r4, r0, pc, lsr #6
   11144:	068c5a01 	streq	r5, [ip], r1, lsl #20
   11148:	91020000 	mrsls	r0, (UNDEF: 2)
	pxNewListItem->pxPrevious = pxList->pxIndex;
   1114c:	b70b0064 	strlt	r0, [fp, -r4, rrx]
   11150:	36000003 	strcc	r0, [r0], -r3
   11154:	1600000a 	strne	r0, [r0], -sl
   11158:	00000382 	andeq	r0, r0, r2, lsl #7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   1115c:	aa1a0006 	bge	69117c <mailbuffer+0x65608c>
   11160:	01000057 	qaddeq	r0, r7, r0
   11164:	000a471b 	andeq	r4, sl, fp, lsl r7
   11168:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   1116c:	10000304 	andne	r0, r0, r4, lsl #6
   11170:	00000a26 	andeq	r0, r0, r6, lsr #20
   11174:	000bcc00 	andeq	ip, fp, r0, lsl #24
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   11178:	98000400 	stmdals	r0, {sl}
   1117c:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
   11180:	00001901 	andeq	r1, r0, r1, lsl #18

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   11184:	57e10100 	strbpl	r0, [r1, r0, lsl #2]!
   11188:	0ddc0000 	ldcleq	0, cr0, [ip]
   1118c:	a4dc0000 	ldrbge	r0, [ip], #0

	( pxList->uxNumberOfItems )++;
   11190:	0a000002 	beq	111a0 <vListInsertEnd+0x9c>
   11194:	56fd0000 	ldrbtpl	r0, [sp], r0
   11198:	01020000 	mrseq	r0, (UNDEF: 2)
   1119c:	00401b02 	subeq	r1, r0, r2, lsl #22
   111a0:	46030000 	strmi	r0, [r3], -r0
   111a4:	00000025 	andeq	r0, r0, r5, lsr #32
   111a8:	002b2803 	eoreq	r2, fp, r3, lsl #16
   111ac:	bb030100 	bllt	d15b4 <mailbuffer+0x964c4>
   111b0:	02000028 	andeq	r0, r0, #40	; 0x28
   111b4:	22130400 	andscs	r0, r3, #0, 8
}
   111b8:	22020000 	andcs	r0, r2, #0
   111bc:	00000025 	andeq	r0, r0, r5, lsr #32
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   111c0:	2b020102 	blcs	915d0 <mailbuffer+0x564e0>
   111c4:	0000006c 	andeq	r0, r0, ip, rrx
   111c8:	00259a03 	eoreq	r9, r5, r3, lsl #20
   111cc:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
   111d0:	0100002c 	tsteq	r0, ip, lsr #32
   111d4:	00222103 	eoreq	r2, r2, r3, lsl #2
   111d8:	5b030200 	blpl	d19e0 <mailbuffer+0x968f0>
   111dc:	03000026 	movweq	r0, #38	; 0x26
   111e0:	24210400 	strtcs	r0, [r1], #-1024	; 0xfffffc00
   111e4:	31020000 	mrscc	r0, (UNDEF: 2)
   111e8:	0000004b 	andeq	r0, r0, fp, asr #32
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   111ec:	34020805 	strcc	r0, [r2], #-2053	; 0xfffff7fb
   111f0:	000000bc 	strheq	r0, [r0], -ip
   111f4:	00227606 	eoreq	r7, r2, r6, lsl #12
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   111f8:	bc360200 	lfmlt	f0, 4, [r6], #-0
   111fc:	00000000 	andeq	r0, r0, r0
   11200:	0027d306 	eoreq	sp, r7, r6, lsl #6
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   11204:	bc370200 	lfmlt	f0, 4, [r7], #-0
   11208:	01000000 	mrseq	r0, (UNDEF: 0)
   1120c:	0021f306 	eoreq	pc, r1, r6, lsl #6
   11210:	c3380200 	teqgt	r8, #0, 4
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   11214:	02000000 	andeq	r0, r0, #0
   11218:	001f0c06 	andseq	r0, pc, r6, lsl #24
   1121c:	c3390200 	teqgt	r9, #0, 4
   11220:	04000000 	streq	r0, [r0], #-0
   11224:	002bb306 	eoreq	fp, fp, r6, lsl #6
   11228:	c33a0200 	teqgt	sl, #0, 4
   1122c:	06000000 	streq	r0, [r0], -r0
   11230:	08010700 	stmdaeq	r1, {r8, r9, sl}
   11234:	0000072a 	andeq	r0, r0, sl, lsr #14
   11238:	32070207 	andcc	r0, r7, #1879048192	; 0x70000000
   1123c:	04000001 	streq	r0, [r0], #-1
   11240:	00002208 	andeq	r2, r0, r8, lsl #4
   11244:	00773d02 	rsbseq	r3, r7, r2, lsl #26
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   11248:	12050000 	andne	r0, r5, #0
   1124c:	01865c02 	orreq	r5, r6, r2, lsl #24
   11250:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
   11254:	02000029 	andeq	r0, r0, #41	; 0x29
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   11258:	0000bc5e 	andeq	fp, r0, lr, asr ip
   1125c:	2b060000 	blcs	191264 <mailbuffer+0x156174>
   11260:	02000024 	andeq	r0, r0, #36	; 0x24
   11264:	0000bc5f 	andeq	fp, r0, pc, asr ip
	pxNewListItem->pxPrevious = pxIterator;
   11268:	8c060100 	stfhis	f0, [r6], {-0}
   1126c:	02000022 	andeq	r0, r0, #34	; 0x22
   11270:	0000c360 	andeq	ip, r0, r0, ror #6
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   11274:	28060200 	stmdacs	r6, {r9}
   11278:	02000021 	andeq	r0, r0, #33	; 0x21
   1127c:	0000bc61 	andeq	fp, r0, r1, ror #24

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   11280:	f6060400 			; <UNDEFINED> instruction: 0xf6060400
   11284:	02000022 	andeq	r0, r0, #34	; 0x22
   11288:	0000bc62 	andeq	fp, r0, r2, ror #24

	( pxList->uxNumberOfItems )++;
   1128c:	9f060500 	svcls	0x00060500
   11290:	02000027 	andeq	r0, r0, #39	; 0x27
   11294:	0000bc63 	andeq	fp, r0, r3, ror #24
   11298:	e7060600 	str	r0, [r6, -r0, lsl #12]
   1129c:	02000025 	andeq	r0, r0, #37	; 0x25
   112a0:	0000bc64 	andeq	fp, r0, r4, ror #24
   112a4:	56060700 	strpl	r0, [r6], -r0, lsl #14
   112a8:	0200002c 	andeq	r0, r0, #44	; 0x2c
   112ac:	0000c366 	andeq	ip, r0, r6, ror #6
   112b0:	44060800 	strmi	r0, [r6], #-2048	; 0xfffff800
}
   112b4:	02000022 	andeq	r0, r0, #34	; 0x22
   112b8:	0000c367 	andeq	ip, r0, r7, ror #6
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   112bc:	35060a00 	strcc	r0, [r6, #-2560]	; 0xfffff600
   112c0:	02000021 	andeq	r0, r0, #33	; 0x21
   112c4:	0000c368 	andeq	ip, r0, r8, ror #6
   112c8:	fa060c00 	blx	1942d0 <mailbuffer+0x1591e0>
   112cc:	02000021 	andeq	r0, r0, #33	; 0x21
   112d0:	0000bc69 	andeq	fp, r0, r9, ror #24
   112d4:	3b060e00 	blcc	194adc <mailbuffer+0x1599ec>
   112d8:	02000023 	andeq	r0, r0, #35	; 0x23
   112dc:	0000bc6a 	andeq	fp, r0, sl, ror #24
   112e0:	22060f00 	andcs	r0, r6, #0, 30
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   112e4:	02000023 	andeq	r0, r0, #35	; 0x23
   112e8:	0000bc6b 	andeq	fp, r0, fp, ror #24
   112ec:	a8061000 	stmdage	r6, {ip}
   112f0:	02000028 	andeq	r0, r0, #40	; 0x28
   112f4:	0000bc6c 	andeq	fp, r0, ip, ror #24
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   112f8:	04001100 	streq	r1, [r0], #-256	; 0xffffff00
   112fc:	000028c7 	andeq	r2, r0, r7, asr #17
   11300:	00d56e02 	sbcseq	r6, r5, r2, lsl #28
   11304:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
   11308:	01fa7102 	mvnseq	r7, r2, lsl #2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   1130c:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
   11310:	02000029 	andeq	r0, r0, #41	; 0x29
   11314:	0000bc73 	andeq	fp, r0, r3, ror ip

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   11318:	2b060000 	blcs	191320 <mailbuffer+0x156230>
   1131c:	02000024 	andeq	r0, r0, #36	; 0x24
   11320:	0000bc74 	andeq	fp, r0, r4, ror ip
   11324:	88060100 	stmdahi	r6, {r8}
   11328:	02000020 	andeq	r0, r0, #32
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1132c:	0000c375 	andeq	ip, r0, r5, ror r3
   11330:	b0060200 	andlt	r0, r6, r0, lsl #4
   11334:	02000029 	andeq	r0, r0, #41	; 0x29
   11338:	0000bc76 	andeq	fp, r0, r6, ror ip
	}

	pxItemToRemove->pvContainer = NULL;
   1133c:	4f060400 	svcmi	0x00060400
   11340:	0200002a 	andeq	r0, r0, #42	; 0x2a
   11344:	0000bc77 	andeq	fp, r0, r7, ror ip
	( pxList->uxNumberOfItems )--;
   11348:	90060500 	andls	r0, r6, r0, lsl #10
   1134c:	02000027 	andeq	r0, r0, #39	; 0x27
   11350:	0000bc78 	andeq	fp, r0, r8, ror ip
   11354:	8d060600 	stchi	6, cr0, [r6, #-0]
   11358:	02000025 	andeq	r0, r0, #37	; 0x25
   1135c:	0000bc79 	andeq	fp, r0, r9, ror ip
   11360:	b3060700 	movwlt	r0, #26368	; 0x6700
   11364:	0200002a 	andeq	r0, r0, #42	; 0x2a
   11368:	0000bc7a 	andeq	fp, r0, sl, ror ip
   1136c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
}
   11370:	00002306 	andeq	r2, r0, r6, lsl #6
   11374:	01917c02 	orrseq	r7, r1, r2, lsl #24
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   11378:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
   1137c:	027a7f02 	rsbseq	r7, sl, #2, 30
   11380:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
   11384:	02000029 	andeq	r0, r0, #41	; 0x29
   11388:	0000bc81 	andeq	fp, r0, r1, lsl #25
   1138c:	2b060000 	blcs	191394 <mailbuffer+0x1562a4>
   11390:	02000024 	andeq	r0, r0, #36	; 0x24
   11394:	0000bc82 	andeq	fp, r0, r2, lsl #25
   11398:	17060100 	strne	r0, [r6, -r0, lsl #2]
   1139c:	02000020 	andeq	r0, r0, #32
   113a0:	0000bc83 	andeq	fp, r0, r3, lsl #25
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   113a4:	41060200 	mrsmi	r0, LR_usr
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   113a8:	02000020 	andeq	r0, r0, #32
   113ac:	0000bc84 	andeq	fp, r0, r4, lsl #25
   113b0:	69060300 	stmdbvs	r6, {r8, r9}
   113b4:	02000027 	andeq	r0, r0, #39	; 0x27
   113b8:	0000bc85 	andeq	fp, r0, r5, lsl #25
   113bc:	21060400 	tstcs	r6, r0, lsl #8
   113c0:	02000027 	andeq	r0, r0, #39	; 0x27
   113c4:	0000bc86 	andeq	fp, r0, r6, lsl #25
   113c8:	29060500 	stmdbcs	r6, {r8, sl}
   113cc:	0200001f 	andeq	r0, r0, #31
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   113d0:	0000bc87 	andeq	fp, r0, r7, lsl #25
   113d4:	95060600 	strls	r0, [r6, #-1536]	; 0xfffffa00
   113d8:	02000028 	andeq	r0, r0, #40	; 0x28
		pxQueue->pcWriteTo = pxQueue->pcHead;
   113dc:	0000bc88 	andeq	fp, r0, r8, lsl #25
   113e0:	16060700 	strne	r0, [r6], -r0, lsl #14
   113e4:	02000027 	andeq	r0, r0, #39	; 0x27
   113e8:	0000bc89 	andeq	fp, r0, r9, lsl #25
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   113ec:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
   113f0:	000027e4 	andeq	r2, r0, r4, ror #15
   113f4:	02058b02 	andeq	r8, r5, #2048	; 0x800
   113f8:	07050000 	streq	r0, [r5, -r0]
   113fc:	02d68e02 	sbcseq	r8, r6, #2, 28
   11400:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
   11404:	02000029 	andeq	r0, r0, #41	; 0x29
   11408:	0000bc90 	muleq	r0, r0, ip
   1140c:	2b060000 	blcs	191414 <mailbuffer+0x156324>
   11410:	02000024 	andeq	r0, r0, #36	; 0x24
   11414:	0000bc91 	muleq	r0, r1, ip
		pxQueue->xRxLock = queueUNLOCKED;
   11418:	c9060100 	stmdbgt	r6, {r8}
   1141c:	02000026 	andeq	r0, r0, #38	; 0x26
   11420:	0000bc92 	muleq	r0, r2, ip
		pxQueue->xTxLock = queueUNLOCKED;
   11424:	8d060200 	sfmhi	f0, 4, [r6, #-0]
   11428:	02000025 	andeq	r0, r0, #37	; 0x25
   1142c:	0000bc93 	muleq	r0, r3, ip

		if( xNewQueue == pdFALSE )
   11430:	60060300 	andvs	r0, r6, r0, lsl #6
   11434:	02000029 	andeq	r0, r0, #41	; 0x29
   11438:	0000c394 	muleq	r0, r4, r3
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1143c:	22060400 	andcs	r0, r6, #0, 8
   11440:	02000025 	andeq	r0, r0, #37	; 0x25
   11444:	0000bc95 	muleq	r0, r5, ip
   11448:	04000600 	streq	r0, [r0], #-1536	; 0xfffffa00
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   1144c:	00002bda 	ldrdeq	r2, [r0], -sl
   11450:	02859702 	addeq	r9, r5, #524288	; 0x80000
   11454:	02050000 	andeq	r0, r5, #0
   11458:	03029c02 	movweq	r9, #11266	; 0x2c02
   1145c:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
   11460:	02000029 	andeq	r0, r0, #41	; 0x29
   11464:	0000bc9e 	muleq	r0, lr, ip
				{
					portYIELD_WITHIN_API();
   11468:	2b060000 	blcs	191470 <mailbuffer+0x156380>
   1146c:	02000024 	andeq	r0, r0, #36	; 0x24
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   11470:	0000bc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
   11474:	08000100 	stmdaeq	r0, {r8}
   11478:	379a0209 	ldrcc	r0, [sl, r9, lsl #4]
   1147c:	09000003 	stmdbeq	r0, {r0, r1}
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   11480:	00003c02 	andeq	r3, r0, r2, lsl #24
   11484:	02e1a102 	rsceq	sl, r1, #-2147483648	; 0x80000000
   11488:	91090000 	mrsls	r0, (UNDEF: 9)
   1148c:	02000027 	andeq	r0, r0, #39	; 0x27
		}
	}
	taskEXIT_CRITICAL();
   11490:	0001faa3 	andeq	pc, r1, r3, lsr #21

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   11494:	3c4c0900 	mcrrcc	9, 0, r0, ip, cr0
   11498:	a4020000 	strge	r0, [r2], #-0
   1149c:	0000027a 	andeq	r0, r0, sl, ror r2
   114a0:	00258409 	eoreq	r8, r5, r9, lsl #8
   114a4:	d6a50200 	strtle	r0, [r5], r0, lsl #4
   114a8:	00000002 	andeq	r0, r0, r2
   114ac:	0026fc04 	eoreq	pc, r6, r4, lsl #24
}
   114b0:	02a70200 	adceq	r0, r7, #0, 4
   114b4:	0a000003 	beq	114c8 <xQueueGenericCreate+0xc>
   114b8:	00002466 	andeq	r2, r0, r6, ror #8
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   114bc:	73a90202 			; <UNDEFINED> instruction: 0x73a90202
   114c0:	06000003 	streq	r0, [r0], -r3
   114c4:	000029a8 	andeq	r2, r0, r8, lsr #19
   114c8:	00bcab02 	adcseq	sl, ip, r2, lsl #22
   114cc:	06000000 	streq	r0, [r0], -r0
   114d0:	0000242b 	andeq	r2, r0, fp, lsr #8
   114d4:	00bcac02 	adcseq	sl, ip, r2, lsl #24
   114d8:	06010000 	streq	r0, [r1], -r0
   114dc:	00002074 	andeq	r2, r0, r4, ror r0
   114e0:	0373ad02 	cmneq	r3, #2, 26	; 0x80
   114e4:	00020000 	andeq	r0, r2, r0
   114e8:	0000c30b 	andeq	ip, r0, fp, lsl #6
   114ec:	00038200 	andeq	r8, r3, r0, lsl #4
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   114f0:	03820c00 	orreq	r0, r2, #0, 24
   114f4:	07000000 	streq	r0, [r0, -r0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   114f8:	01d40704 	bicseq	r0, r4, r4, lsl #14
   114fc:	66040000 	strvs	r0, [r4], -r0
   11500:	02000024 	andeq	r0, r0, #36	; 0x24
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   11504:	000342af 	andeq	r4, r3, pc, lsr #5
   11508:	38750d00 	ldmdacc	r5!, {r8, sl, fp}^
   1150c:	bc170300 	ldclt	3, cr0, [r7], {-0}
		if( pxNewQueue != NULL )
   11510:	0d000000 	stceq	0, cr0, [r0, #-0]
   11514:	00323375 	eorseq	r3, r2, r5, ror r3
   11518:	03a91903 			; <UNDEFINED> instruction: 0x03a91903
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   1151c:	04070000 	streq	r0, [r7], #-0
   11520:	00071d07 	andeq	r1, r7, r7, lsl #26
   11524:	07080700 	streq	r0, [r8, -r0, lsl #14]
   11528:	00000713 	andeq	r0, r0, r3, lsl r7
   1152c:	33060107 	movwcc	r0, #24839	; 0x6107

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   11530:	07000007 	streq	r0, [r0, -r7]
   11534:	07b80502 	ldreq	r0, [r8, r2, lsl #10]!
   11538:	040e0000 	streq	r0, [lr], #-0
   1153c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   11540:	29300400 	ldmdbcs	r0!, {sl}
			if( pxNewQueue->pcHead != NULL )
   11544:	20030000 	andcs	r0, r3, r0
   11548:	000003c5 	andeq	r0, r0, r5, asr #7
   1154c:	18070407 	stmdane	r7, {r0, r1, r2, sl}
   11550:	07000007 	streq	r0, [r0, -r7]
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   11554:	07980504 	ldreq	r0, [r8, r4, lsl #10]
   11558:	520a0000 	andpl	r0, sl, #0
   1155c:	18000025 	stmdane	r0, {r0, r2, r5}
				pxNewQueue->uxItemSize = uxItemSize;
   11560:	043a1e04 	ldrteq	r1, [sl], #-3588	; 0xfffff1fc
   11564:	51060000 	mrspl	r0, (UNDEF: 6)
   11568:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
				xQueueGenericReset( pxNewQueue, pdTRUE );
   1156c:	00043a20 	andeq	r3, r4, r0, lsr #20
   11570:	0c060000 	stceq	0, cr0, [r6], {-0}
   11574:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   11578:	0003a921 	andeq	sl, r3, r1, lsr #18
   1157c:	8a060400 	bhi	192584 <mailbuffer+0x157494>
   11580:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   11584:	0003cc22 	andeq	ip, r3, r2, lsr #24
   11588:	69060800 	stmdbvs	r6, {fp}
		}
	}

	configASSERT( xReturn );

	return xReturn;
   1158c:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
   11590:	00043a23 	andeq	r3, r4, r3, lsr #20
   11594:	7d060c00 	stcvc	12, cr0, [r6, #-0]
   11598:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
   1159c:	00043a24 	andeq	r3, r4, r4, lsr #20
   115a0:	bb061000 	bllt	1955a8 <mailbuffer+0x15a4b8>
   115a4:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
}
   115a8:	00043a25 	andeq	r3, r4, r5, lsr #20
   115ac:	0f001400 	svceq	0x00001400
   115b0:	00044004 	andeq	r4, r4, r4

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   115b4:	03371000 	teqeq	r7, #0
   115b8:	52040000 	andpl	r0, r4, #0
   115bc:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
   115c0:	0003e527 	andeq	lr, r3, r7, lsr #10
   115c4:	0a041100 	beq	1159cc <mailbuffer+0xda8dc>
   115c8:	00002631 	andeq	r2, r0, r1, lsr r6
   115cc:	831f050c 	tsthi	pc, #12, 10	; 0x3000000
   115d0:	06000004 	streq	r0, [r0], -r4
   115d4:	00002651 	andeq	r2, r0, r1, asr r6
   115d8:	04832105 	streq	r2, [r3], #261	; 0x105
   115dc:	06000000 	streq	r0, [r0], -r0
   115e0:	00002bf1 	strdeq	r2, [r0], -r1
   115e4:	03a92205 			; <UNDEFINED> instruction: 0x03a92205
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   115e8:	06040000 	streq	r0, [r4], -r0
   115ec:	00002485 	andeq	r2, r0, r5, lsl #9
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   115f0:	04832305 	streq	r2, [r3], #773	; 0x305
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   115f4:	00080000 	andeq	r0, r8, r0
   115f8:	03b7040f 			; <UNDEFINED> instruction: 0x03b7040f
   115fc:	31040000 	mrscc	r0, (UNDEF: 4)
   11600:	05000026 	streq	r0, [r0, #-38]	; 0xffffffda
   11604:	00045225 	andeq	r5, r4, r5, lsr #4
   11608:	253b0a00 	ldrcs	r0, [fp, #-2560]!	; 0xfffff600
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1160c:	060c0000 	streq	r0, [ip], -r0
   11610:	0004c521 	andeq	ip, r4, r1, lsr #10
   11614:	20e00600 	rsccs	r0, r0, r0, lsl #12
   11618:	23060000 	movwcs	r0, #24576	; 0x6000

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1161c:	00000562 	andeq	r0, r0, r2, ror #10
   11620:	2c3c0600 	ldccs	6, cr0, [ip], #-0
   11624:	25060000 	strcs	r0, [r6, #-0]
   11628:	00000568 	andeq	r0, r0, r8, ror #10
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   1162c:	2a950604 	bcs	fe552e44 <_estack+0xf6542e44>
   11630:	27060000 	strcs	r0, [r6, -r0]
   11634:	0000056e 	andeq	r0, r0, lr, ror #10
   11638:	d10a0008 	tstle	sl, r8
   1163c:	3800002a 	stmdacc	r0, {r1, r3, r5}
   11640:	05622d07 	strbeq	r2, [r2, #-3335]!	; 0xfffff2f9
   11644:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   11648:	0700005a 	smlsdeq	r0, sl, r0, r0
					}
				}

				taskEXIT_CRITICAL();
   1164c:	00058e2f 	andeq	r8, r5, pc, lsr #28

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   11650:	43060000 	movwmi	r0, #24576	; 0x6000
   11654:	07000024 	streq	r0, [r0, -r4, lsr #32]
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11658:	0005dd31 	andeq	sp, r5, r1, lsr sp
   1165c:	7c060400 	cfstrsvc	mvf0, [r6], {-0}
   11660:	07000020 	streq	r0, [r0, -r0, lsr #32]
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11664:	00039433 	andeq	r9, r3, r3, lsr r4

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   11668:	3b060800 	blcc	193670 <mailbuffer+0x158580>
   1166c:	07000024 	streq	r0, [r0, -r4, lsr #32]
				}
				else if( xEntryTimeSet == pdFALSE )
   11670:	00006c34 	andeq	r6, r0, r4, lsr ip
   11674:	93060900 	movwls	r0, #26880	; 0x6900
   11678:	07000022 	streq	r0, [r0, -r2, lsr #32]
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1167c:	00064435 	andeq	r4, r6, r5, lsr r4
   11680:	7a060c00 	bvc	194688 <mailbuffer+0x159598>
   11684:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
					xEntryTimeSet = pdTRUE;
   11688:	00039437 	andeq	r9, r3, r7, lsr r4
   1168c:	a9061000 	stmdbge	r6, {ip}
				}
			}
		}
		taskEXIT_CRITICAL();
   11690:	07000026 	streq	r0, [r0, -r6, lsr #32]

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11694:	00039438 	andeq	r9, r3, r8, lsr r4
		prvLockQueue( pxQueue );
   11698:	6f061100 	svcvs	0x00061100
   1169c:	07000029 	streq	r0, [r0, -r9, lsr #32]
   116a0:	00064a3a 	andeq	r4, r6, sl, lsr sl
   116a4:	b2061400 	andlt	r1, r6, #0, 8
   116a8:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
   116ac:	0006503b 	andeq	r5, r6, fp, lsr r0
   116b0:	fc061800 	stc2	8, cr1, [r6], {-0}
   116b4:	07000027 	streq	r0, [r0, -r7, lsr #32]
   116b8:	0006563d 	andeq	r5, r6, sp, lsr r6
   116bc:	34061c00 	strcc	r1, [r6], #-3072	; 0xfffff400
   116c0:	0700002b 	streq	r0, [r0, -fp, lsr #32]
   116c4:	0005743f 	andeq	r7, r5, pc, lsr r4
   116c8:	78062000 	stmdavc	r6, {sp}
   116cc:	07000021 	streq	r0, [r0, -r1, lsr #32]
   116d0:	00057440 	andeq	r7, r5, r0, asr #8
   116d4:	0f002c00 	svceq	0x00002c00

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   116d8:	0004c504 	andeq	ip, r4, r4, lsl #10
   116dc:	89040f00 	stmdbhi	r4, {r8, r9, sl, fp}
   116e0:	0f000003 	svceq	0x00000003
   116e4:	00048904 	andeq	r8, r4, r4, lsl #18
   116e8:	253b0400 	ldrcs	r0, [fp, #-1024]!	; 0xfffffc00
   116ec:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
   116f0:	00000494 	muleq	r0, r4, r4
   116f4:	0003cc12 	andeq	ip, r3, r2, lsl ip
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   116f8:	00058e00 	andeq	r8, r5, r0, lsl #28
   116fc:	05621300 	strbeq	r1, [r2, #-768]!	; 0xfffffd00
   11700:	0f000000 	svceq	0x00000000
   11704:	00057f04 	andeq	r7, r5, r4, lsl #30
   11708:	28760a00 	ldmdacs	r6!, {r9, fp}^
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1170c:	08540000 	ldmdaeq	r4, {}^	; <UNPREDICTABLE>
   11710:	0005dd26 	andeq	sp, r5, r6, lsr #26
   11714:	273d0600 	ldrcs	r0, [sp, -r0, lsl #12]!
   11718:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
   1171c:	000003a9 	andeq	r0, r0, r9, lsr #7
   11720:	1f3c0600 	svcne	0x003c0600
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   11724:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
   11728:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1172c:	25da0604 	ldrbcs	r0, [sl, #1540]	; 0x604
   11730:	2b080000 	blcs	211738 <mailbuffer+0x1d6648>
   11734:	000009f5 	strdeq	r0, [r0], -r5
   11738:	270b0608 	strcs	r0, [fp, -r8, lsl #12]
				{
					portYIELD_WITHIN_API();
   1173c:	2d080000 	stccs	0, cr0, [r8, #-0]
   11740:	00000a0b 	andeq	r0, r0, fp, lsl #20
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11744:	2b490648 	blcs	125306c <mailbuffer+0x1217f7c>
   11748:	2f080000 	svccs	0x00080000
				( void ) xTaskResumeAll();
   1174c:	00000823 	andeq	r0, r0, r3, lsr #16
   11750:	040f004c 	streq	r0, [pc], #-76	; 11758 <xQueueGenericSend+0x1a4>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   11754:	00000594 	muleq	r0, r4, r5
   11758:	0025800a 	eoreq	r8, r5, sl
			( void ) xTaskResumeAll();
   1175c:	28091800 	stmdacs	r9, {fp, ip}

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   11760:	00000644 	andeq	r0, r0, r4, asr #12
   11764:	0020e006 	eoreq	lr, r0, r6
		}
	}
   11768:	932a0900 	teqls	sl, #0, 18
   1176c:	00000006 	andeq	r0, r0, r6
   11770:	001fe806 	andseq	lr, pc, r6, lsl #16
   11774:	942b0900 	strtls	r0, [fp], #-2304	; 0xfffff700
   11778:	04000003 	streq	r0, [r0], #-3
   1177c:	00214906 	eoreq	r4, r1, r6, lsl #18
   11780:	882c0900 	stmdahi	ip!, {r8, fp}
}
   11784:	05000006 	streq	r0, [r0, #-6]
   11788:	00266b06 	eoreq	r6, r6, r6, lsl #22
   1178c:	cc2d0900 	stcgt	9, cr0, [sp], #-0

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   11790:	08000003 	stmdaeq	r0, {r0, r1}
   11794:	0021d406 	eoreq	sp, r1, r6, lsl #8
   11798:	9e2e0900 	cdpls	9, 2, cr0, cr14, cr0, {0}
   1179c:	0c000003 	stceq	0, cr0, [r0], {3}
   117a0:	00285706 	eoreq	r5, r8, r6, lsl #14
   117a4:	a92f0900 	stmdbge	pc!, {r8, fp}	; <UNPREDICTABLE>
   117a8:	10000003 	andne	r0, r0, r3
   117ac:	0022d706 	eoreq	sp, r2, r6, lsl #14
   117b0:	40300900 	eorsmi	r0, r0, r0, lsl #18
   117b4:	14000000 	strne	r0, [r0], #-0
   117b8:	e3040f00 	movw	r0, #20224	; 0x4f00
   117bc:	0f000005 	svceq	0x00000005
   117c0:	00018604 	andeq	r8, r1, r4, lsl #12
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   117c4:	fa040f00 	blx	1153cc <mailbuffer+0xda2dc>
   117c8:	0f000001 	svceq	0x00000001
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   117cc:	00044504 	andeq	r4, r4, r4, lsl #10
   117d0:	2ad10400 	bcs	ff4527d8 <_estack+0xf74427d8>
   117d4:	42070000 	andmi	r0, r7, #0
   117d8:	000004c5 	andeq	r0, r0, r5, asr #9
   117dc:	20090102 	andcs	r0, r9, r2, lsl #2
   117e0:	00000688 	andeq	r0, r0, r8, lsl #13
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   117e4:	002a9f03 	eoreq	r9, sl, r3, lsl #30
   117e8:	c0030000 	andgt	r0, r3, r0
   117ec:	0100001f 	tsteq	r0, pc, lsl r0
   117f0:	00222e03 	eoreq	r2, r2, r3, lsl #28

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   117f4:	c2030200 	andgt	r0, r3, #0, 4
   117f8:	03000025 	movweq	r0, #37	; 0x25
   117fc:	2afd0400 	bcs	fff52804 <_estack+0xf7f42804>
   11800:	26090000 	strcs	r0, [r9], -r0
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   11804:	00000667 	andeq	r0, r0, r7, ror #12
   11808:	065c040f 	ldrbeq	r0, [ip], -pc, lsl #8
   1180c:	80040000 	andhi	r0, r4, r0
   11810:	09000025 	stmdbeq	r0, {r0, r2, r5}
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   11814:	0005e332 	andeq	lr, r5, r2, lsr r3
   11818:	26930400 	ldrcs	r0, [r3], r0, lsl #8
   1181c:	210a0000 	mrscs	r0, (UNDEF: 10)
   11820:	000006af 	andeq	r0, r0, pc, lsr #13
   11824:	0006c414 	andeq	ip, r6, r4, lsl r4
   11828:	06c41300 	strbeq	r1, [r4], r0, lsl #6
   1182c:	50130000 	andspl	r0, r3, r0
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   11830:	13000004 	movwne	r0, #4
   11834:	00000450 	andeq	r0, r0, r0, asr r4
   11838:	ca040f00 	bgt	115440 <mailbuffer+0xda350>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   1183c:	0a000006 	beq	1185c <xQueueGenericSendFromISR+0xcc>
   11840:	00002907 	andeq	r2, r0, r7, lsl #18
   11844:	43230a24 	teqmi	r3, #36, 20	; 0x24000
   11848:	06000007 	streq	r0, [r0], -r7
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   1184c:	0000297d 	andeq	r2, r0, sp, ror r9
   11850:	0743250a 	strbeq	r2, [r3, -sl, lsl #10]
   11854:	06000000 	streq	r0, [r0], -r0
   11858:	00002844 	andeq	r2, r0, r4, asr #16
   1185c:	0749270a 	strbeq	r2, [r9, -sl, lsl #14]
			}

			xReturn = pdPASS;
   11860:	06040000 	streq	r0, [r4], -r0
   11864:	00002651 	andeq	r2, r0, r1, asr r6
   11868:	0450280a 	ldrbeq	r2, [r0], #-2058	; 0xfffff7f6
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1186c:	06080000 	streq	r0, [r8], -r0
   11870:	00002c0c 	andeq	r2, r0, ip, lsl #24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11874:	039e290a 	orrseq	r2, lr, #163840	; 0x28000
   11878:	060c0000 	streq	r0, [ip], -r0
   1187c:	0000213f 	andeq	r2, r0, pc, lsr r1
   11880:	03c52b0a 	biceq	r2, r5, #10240	; 0x2800
   11884:	06100000 	ldreq	r0, [r0], -r0
   11888:	000029eb 	andeq	r2, r0, fp, ror #19
   1188c:	039e2c0a 	orrseq	r2, lr, #2560	; 0xa00
}
   11890:	06140000 	ldreq	r0, [r4], -r0
   11894:	000023ba 			; <UNDEFINED> instruction: 0x000023ba
   11898:	074f2e0a 	strbeq	r2, [pc, -sl, lsl #28]
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   1189c:	06180000 	ldreq	r0, [r8], -r0
   118a0:	00002359 	andeq	r2, r0, r9, asr r3
   118a4:	04502f0a 	ldrbeq	r2, [r0], #-3850	; 0xfffff0f6
   118a8:	061c0000 	ldreq	r0, [ip], -r0
   118ac:	00002b13 	andeq	r2, r0, r3, lsl fp
   118b0:	0450300a 	ldrbeq	r3, [r0], #-10
   118b4:	00200000 	eoreq	r0, r0, r0
   118b8:	0699040f 	ldreq	r0, [r9], pc, lsl #8
   118bc:	040f0000 	streq	r0, [pc], #-0	; 118c4 <xQueueGenericReceive+0x28>
   118c0:	000000ca 	andeq	r0, r0, sl, asr #1
   118c4:	06a4040f 	strteq	r0, [r4], pc, lsl #8
   118c8:	07040000 	streq	r0, [r4, -r0]
   118cc:	0a000029 	beq	11978 <xQueueGenericReceive+0xdc>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   118d0:	0006ca32 	andeq	ip, r6, r2, lsr sl
   118d4:	2c280400 	cfstrscs	mvf0, [r8], #-0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   118d8:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   118dc:	0000076b 	andeq	r0, r0, fp, ror #14
   118e0:	00078014 	andeq	r8, r7, r4, lsl r0
   118e4:	03a91300 			; <UNDEFINED> instruction: 0x03a91300
   118e8:	c5130000 	ldrgt	r0, [r3, #-0]
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   118ec:	13000003 	movwne	r0, #3
   118f0:	000003c5 	andeq	r0, r0, r5, asr #7
   118f4:	1f130a00 	svcne	0x00130a00

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   118f8:	0b4c0000 	bleq	1311900 <mailbuffer+0x12d6810>
   118fc:	0007e120 	andeq	lr, r7, r0, lsr #2
   11900:	25010600 	strcs	r0, [r1, #-1536]	; 0xfffffa00

				if( xJustPeeking == pdFALSE )
   11904:	220b0000 	andcs	r0, fp, #0
   11908:	0000065c 	andeq	r0, r0, ip, asr r6
   1190c:	21030600 	tstcs	r3, r0, lsl #12
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   11910:	240b0000 	strcs	r0, [fp], #-0
   11914:	00000394 	muleq	r0, r4, r3
   11918:	29d60638 	ldmibcs	r6, {r3, r4, r5, r9, sl}^
   1191c:	250b0000 	strcs	r0, [fp, #-0]
   11920:	00000394 	muleq	r0, r4, r3
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11924:	20620639 	rsbcs	r0, r2, r9, lsr r6
   11928:	270b0000 	strcs	r0, [fp, -r0]
   1192c:	00000743 	andeq	r0, r0, r3, asr #14
   11930:	2758063c 	smmlarcs	r8, ip, r6, r0
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   11934:	290b0000 	stmdbcs	fp, {}	; <UNPREDICTABLE>
   11938:	000007e1 	andeq	r0, r0, r1, ror #15
   1193c:	262a0640 	strtcs	r0, [sl], -r0, asr #12
   11940:	2b0b0000 	blcs	2d1948 <mailbuffer+0x296858>
   11944:	000007e7 	andeq	r0, r0, r7, ror #15
   11948:	2a340644 	bcs	d13260 <mailbuffer+0xcd8170>
   1194c:	2c0b0000 	stccs	0, cr0, [fp], {-0}
						{
							portYIELD_WITHIN_API();
   11950:	000007ed 	andeq	r0, r0, sp, ror #15
   11954:	040f0048 	streq	r0, [pc], #-72	; 1195c <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   11958:	00000760 	andeq	r0, r0, r0, ror #14
   1195c:	0755040f 	ldrbeq	r0, [r5, -pc, lsl #8]
   11960:	040f0000 	streq	r0, [pc], #-0	; 11968 <xQueueGenericReceive+0xcc>

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   11964:	00000394 	muleq	r0, r4, r3
   11968:	001f1304 	andseq	r1, pc, r4, lsl #6
   1196c:	802e0b00 	eorhi	r0, lr, r0, lsl #22
   11970:	0a000007 	beq	11994 <xQueueGenericReceive+0xf8>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   11974:	00002749 	andeq	r2, r0, r9, asr #14
   11978:	23200c08 	teqcs	r0, #8, 24	; 0x800
   1197c:	06000008 	streq	r0, [r0], -r8
   11980:	00002443 	andeq	r2, r0, r3, asr #8
   11984:	05dd220c 	ldrbeq	r2, [sp, #524]	; 0x20c
   11988:	06000000 	streq	r0, [r0], -r0
   1198c:	000020e0 	andeq	r2, r0, r0, ror #1
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   11990:	0693240c 	ldreq	r2, [r3], ip, lsl #8
						}
					}
				}

				taskEXIT_CRITICAL();
   11994:	00040000 	andeq	r0, r4, r0
				return pdPASS;
   11998:	00274904 	eoreq	r4, r7, r4, lsl #18
   1199c:	fe260c00 	cdp2	12, 2, cr0, cr6, cr0, {0}
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   119a0:	0a000007 	beq	119c4 <xQueueGenericReceive+0x128>
   119a4:	0000250d 	andeq	r2, r0, sp, lsl #10
   119a8:	831d0d18 	tsthi	sp, #24, 26	; 0x600
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   119ac:	06000008 	streq	r0, [r0], -r8
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   119b0:	000039ce 	andeq	r3, r0, lr, asr #19
   119b4:	08941f0d 	ldmeq	r4, {r0, r2, r3, r8, r9, sl, fp, ip}
				}
				else if( xEntryTimeSet == pdFALSE )
   119b8:	06000000 	streq	r0, [r0], -r0
   119bc:	00005086 	andeq	r5, r0, r6, lsl #1
   119c0:	0894210d 	ldmeq	r4, {r0, r2, r3, r8, sp}
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   119c4:	06040000 	streq	r0, [r4], -r0
   119c8:	00005047 	andeq	r5, r0, r7, asr #32
   119cc:	08a9220d 	stmiaeq	r9!, {r0, r2, r3, r9, sp}
					xEntryTimeSet = pdTRUE;
   119d0:	06080000 	streq	r0, [r8], -r0
   119d4:	000036f4 	strdeq	r3, [r0], -r4
				}
			}
		}
		taskEXIT_CRITICAL();
   119d8:	08bf230d 	ldmeq	pc!, {r0, r2, r3, r8, r9, sp}	; <UNPREDICTABLE>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   119dc:	060c0000 	streq	r0, [ip], -r0
		prvLockQueue( pxQueue );
   119e0:	00004fe9 	andeq	r4, r0, r9, ror #31
   119e4:	0894250d 	ldmeq	r4, {r0, r2, r3, r8, sl, sp}
   119e8:	06100000 	ldreq	r0, [r0], -r0
   119ec:	00004fc0 	andeq	r4, r0, r0, asr #31
   119f0:	08a9270d 	stmiaeq	r9!, {r0, r2, r3, r8, r9, sl, sp}
   119f4:	00140000 	andseq	r0, r4, r0
   119f8:	00088e14 	andeq	r8, r8, r4, lsl lr
   119fc:	088e1300 	stmeq	lr, {r8, r9, ip}
   11a00:	0f000000 	svceq	0x00000000
   11a04:	00082e04 	andeq	r2, r8, r4, lsl #28
   11a08:	83040f00 	movwhi	r0, #20224	; 0x4f00
   11a0c:	12000008 	andne	r0, r0, #8
   11a10:	000003cc 	andeq	r0, r0, ip, asr #7
   11a14:	000008a9 	andeq	r0, r0, r9, lsr #17
   11a18:	00088e13 	andeq	r8, r8, r3, lsl lr
   11a1c:	040f0000 	streq	r0, [pc], #-0	; 11a24 <xQueueGenericReceive+0x188>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   11a20:	0000089a 	muleq	r0, sl, r8
   11a24:	0008bf14 	andeq	fp, r8, r4, lsl pc
   11a28:	088e1300 	stmeq	lr, {r8, r9, ip}
   11a2c:	9e130000 	cdpls	0, 1, cr0, cr3, cr0, {0}
   11a30:	00000003 	andeq	r0, r0, r3
   11a34:	08af040f 	stmiaeq	pc!, {r0, r1, r2, r3, sl}	; <UNPREDICTABLE>
   11a38:	0d040000 	stceq	0, cr0, [r4, #-0]
   11a3c:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   11a40:	00082e29 	andeq	r2, r8, r9, lsr #28
   11a44:	22a00a00 	adccs	r0, r0, #0, 20
   11a48:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
   11a4c:	0009d922 	andeq	sp, r9, r2, lsr #18
   11a50:	2a290600 	bcs	a53258 <mailbuffer+0xa18168>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   11a54:	240e0000 	strcs	r0, [lr], #-0
   11a58:	000003a9 	andeq	r0, r0, r9, lsr #7
   11a5c:	262a0600 	strtcs	r0, [sl], -r0, lsl #12
   11a60:	250e0000 	strcs	r0, [lr, #-0]
   11a64:	000007e7 	andeq	r0, r0, r7, ror #15
   11a68:	21bb0604 			; <UNDEFINED> instruction: 0x21bb0604
				prvUnlockQueue( pxQueue );
   11a6c:	260e0000 	strcs	r0, [lr], -r0
   11a70:	000003cc 	andeq	r0, r0, ip, asr #7
				if( xTaskResumeAll() == pdFALSE )
   11a74:	22670608 	rsbcs	r0, r7, #8, 12	; 0x800000
   11a78:	270e0000 	strcs	r0, [lr, -r0]
   11a7c:	000003cc 	andeq	r0, r0, ip, asr #7
   11a80:	2abd060c 	bcs	fef532b8 <_estack+0xf6f432b8>
				{
					portYIELD_WITHIN_API();
   11a84:	290e0000 	stmdbcs	lr, {}	; <UNPREDICTABLE>
   11a88:	000003cc 	andeq	r0, r0, ip, asr #7
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11a8c:	21170610 	tstcs	r7, r0, lsl r6
   11a90:	2a0e0000 	bcs	391a98 <mailbuffer+0x3569a8>
				( void ) xTaskResumeAll();
   11a94:	000003cc 	andeq	r0, r0, ip, asr #7
   11a98:	20e00614 	rsccs	r0, r0, r4, lsl r6
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   11a9c:	2c0e0000 	stccs	0, cr0, [lr], {-0}
   11aa0:	00000693 	muleq	r0, r3, r6
			( void ) xTaskResumeAll();
   11aa4:	297d0618 	ldmdbcs	sp!, {r3, r4, r9, sl}^
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   11aa8:	2d0e0000 	stccs	0, cr0, [lr, #-0]
   11aac:	00000743 	andeq	r0, r0, r3, asr #14
		}
	}
   11ab0:	243b061c 	ldrtcs	r0, [fp], #-1564	; 0xfffff9e4
   11ab4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
   11ab8:	0000006c 	andeq	r0, r0, ip, rrx
   11abc:	21d40620 	bicscs	r0, r4, r0, lsr #12
   11ac0:	2f0e0000 	svccs	0x000e0000
   11ac4:	0000039e 	muleq	r0, lr, r3
   11ac8:	239c0624 	orrscs	r0, ip, #36, 12	; 0x2400000
}
   11acc:	310e0000 	mrscc	r0, (UNDEF: 14)
   11ad0:	0000039e 	muleq	r0, lr, r3
   11ad4:	21b00628 	lsrscs	r0, r8, #12
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   11ad8:	320e0000 	andcc	r0, lr, #0
   11adc:	000003a9 	andeq	r0, r0, r9, lsr #7
   11ae0:	2095062c 	addscs	r0, r5, ip, lsr #12
   11ae4:	330e0000 	movwcc	r0, #57344	; 0xe000
   11ae8:	0000039e 	muleq	r0, lr, r3
   11aec:	20ea0630 	rsccs	r0, sl, r0, lsr r6
   11af0:	340e0000 	strcc	r0, [lr], #-0
   11af4:	000003a9 	andeq	r0, r0, r9, lsr #7
   11af8:	26390634 			; <UNDEFINED> instruction: 0x26390634
   11afc:	350e0000 	strcc	r0, [lr, #-0]
   11b00:	0000039e 	muleq	r0, lr, r3
   11b04:	288c0638 	stmcs	ip, {r3, r4, r5, r9, sl}
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11b08:	370e0000 	strcc	r0, [lr, -r0]
   11b0c:	000003a9 	andeq	r0, r0, r9, lsr #7
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11b10:	2731063c 			; <UNDEFINED> instruction: 0x2731063c
   11b14:	380e0000 	stmdacc	lr, {}	; <UNPREDICTABLE>
   11b18:	000003a9 	andeq	r0, r0, r9, lsr #7
   11b1c:	282f0640 	stmdacs	pc!, {r6, r9, sl}	; <UNPREDICTABLE>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   11b20:	390e0000 	stmdbcc	lr, {}	; <UNPREDICTABLE>
   11b24:	0000039e 	muleq	r0, lr, r3
   11b28:	2adc0644 	bcs	ff713440 <_estack+0xf7703440>
			--( pxQueue->uxMessagesWaiting );
   11b2c:	3b0e0000 	blcc	391b34 <mailbuffer+0x356a44>
   11b30:	000009d9 	ldrdeq	r0, [r0], -r9
   11b34:	24a70648 	strtcs	r0, [r7], #1608	; 0x648
   11b38:	3c0e0000 	stccc	0, cr0, [lr], {-0}
   11b3c:	00000450 	andeq	r0, r0, r0, asr r4

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   11b40:	1fa0064c 	svcne	0x00a0064c
   11b44:	3e0e0000 	cdpcc	0, 0, cr0, cr14, cr0, {0}
   11b48:	000009df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11b4c:	040f0050 	streq	r0, [pc], #-80	; 11b54 <xQueueReceiveFromISR+0x7c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11b50:	0000039e 	muleq	r0, lr, r3
   11b54:	08c5040f 	stmiaeq	r5, {r0, r1, r2, r3, sl}^
   11b58:	a0040000 	andge	r0, r4, r0
   11b5c:	0e000022 	cdpeq	0, 0, cr0, cr0, cr2, {1}
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11b60:	0008d040 	andeq	sp, r8, r0, asr #32
   11b64:	03a91500 			; <UNDEFINED> instruction: 0x03a91500
   11b68:	050b0000 	streq	r0, [fp, #-0]
   11b6c:	0500000a 	streq	r0, [r0, #-10]
   11b70:	1600000a 	strne	r0, [r0], -sl
   11b74:	00000382 	andeq	r0, r0, r2, lsl #7
   11b78:	040f000f 	streq	r0, [pc], #-15	; 11b80 <xQueueReceiveFromISR+0xa8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   11b7c:	000009e5 	andeq	r0, r0, r5, ror #19
   11b80:	0003cc15 	andeq	ip, r3, r5, lsl ip
   11b84:	57d21700 	ldrbpl	r1, [r2, r0, lsl #14]
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   11b88:	23010000 	movwcs	r0, #4096	; 0x1000
   11b8c:	0002a4dc 	ldrdeq	sl, [r2], -ip
   11b90:	000000fc 	strdeq	r0, [r0], -ip
   11b94:	0a429c01 	beq	10b8ba0 <mailbuffer+0x107dab0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   11b98:	af180000 	svcge	0x00180000
   11b9c:	01000043 	tsteq	r0, r3, asr #32
   11ba0:	000a4223 	andeq	r4, sl, r3, lsr #4
   11ba4:	6c910200 	lfmvs	f0, 4, [r1], {0}
   11ba8:	0020e218 	eoreq	lr, r0, r8, lsl r2
			}

			xReturn = pdPASS;
   11bac:	93230100 	teqls	r3, #0, 2
   11bb0:	02000006 	andeq	r0, r0, #6
   11bb4:	0f006891 	svceq	0x00006891
		}
		else
		{
			xReturn = pdFAIL;
   11bb8:	0007f304 	andeq	pc, r7, r4, lsl #6
   11bbc:	57d01700 	ldrbpl	r1, [r0, r0, lsl #14]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11bc0:	33010000 	movwcc	r0, #4096	; 0x1000
   11bc4:	0002a5d8 	ldrdeq	sl, [r2], -r8
   11bc8:	000000dc 	ldrdeq	r0, [r0], -ip
   11bcc:	0a6c9c01 	beq	1b38bd8 <mailbuffer+0x1afdae8>
   11bd0:	af180000 	svcge	0x00180000
   11bd4:	01000043 	tsteq	r0, r3, asr #32
   11bd8:	000a4233 	andeq	r4, sl, r3, lsr r2
}
   11bdc:	6c910200 	lfmvs	f0, 4, [r1], {0}
   11be0:	57b81900 	ldrpl	r1, [r8, r0, lsl #18]!
   11be4:	47010000 	strmi	r0, [r1, -r0]
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   11be8:	000003cc 	andeq	r0, r0, ip, asr #7
   11bec:	0002a6b4 			; <UNDEFINED> instruction: 0x0002a6b4
   11bf0:	00000428 	andeq	r0, r0, r8, lsr #8
   11bf4:	0ae49c01 	beq	ff938c00 <_estack+0xf7928c00>
   11bf8:	30180000 	andscc	r0, r8, r0
   11bfc:	01000023 	tsteq	r0, r3, lsr #32
   11c00:	00069347 	andeq	r9, r6, r7, asr #6
   11c04:	4c910200 	lfmmi	f0, 4, [r1], {0}
   11c08:	0043af1a 	subeq	sl, r3, sl, lsl pc
   11c0c:	42490100 	submi	r0, r9, #0, 2
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11c10:	0200000a 	andeq	r0, r0, #10
		uxReturn = pxQueue->uxMessagesWaiting;
   11c14:	7d1a6c91 	ldcvc	12, cr6, [sl, #-580]	; 0xfffffdbc
   11c18:	0100004d 	tsteq	r0, sp, asr #32
   11c1c:	0006504c 	andeq	r5, r6, ip, asr #32
	taskEXIT_CRITICAL();
   11c20:	68910200 	ldmvs	r1, {r9}

	return uxReturn;
   11c24:	0042281a 	subeq	r2, r2, sl, lsl r8
   11c28:	e4560100 	ldrb	r0, [r6], #-256	; 0xffffff00
   11c2c:	0200000a 	andeq	r0, r0, #10
   11c30:	441a6491 	ldrmi	r6, [sl], #-1169	; 0xfffffb6f
   11c34:	0100002a 	tsteq	r0, sl, lsr #32
   11c38:	0004899c 	muleq	r4, ip, r9
   11c3c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
}
   11c40:	02a7581b 	adceq	r5, r7, #1769472	; 0x1b0000
   11c44:	00013c00 	andeq	r3, r1, r0, lsl #24
   11c48:	42541a00 	subsmi	r1, r4, #0, 20
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   11c4c:	64010000 	strvs	r0, [r1], #-0
   11c50:	00000aea 	andeq	r0, r0, sl, ror #21
   11c54:	00609102 	rsbeq	r9, r0, r2, lsl #2
   11c58:	7a040f00 	bvc	115860 <mailbuffer+0xda770>
   11c5c:	0f000002 	svceq	0x00000002
   11c60:	0002d604 	andeq	sp, r2, r4, lsl #12
   11c64:	583d1700 	ldmdapl	sp!, {r8, r9, sl, ip}
   11c68:	a6010000 	strge	r0, [r1], -r0
   11c6c:	0002aadc 	ldrdeq	sl, [r2], -ip
   11c70:	0000009c 	muleq	r0, ip, r0
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   11c74:	0b229c01 	bleq	8b8c80 <mailbuffer+0x87db90>
   11c78:	af180000 	svcge	0x00180000
   11c7c:	01000043 	tsteq	r0, r3, asr #32

	return uxReturn;
   11c80:	000a42a6 	andeq	r4, sl, r6, lsr #5
   11c84:	6c910200 	lfmvs	f0, 4, [r1], {0}
   11c88:	00275a18 	eoreq	r5, r7, r8, lsl sl
   11c8c:	e1a60100 			; <UNDEFINED> instruction: 0xe1a60100
   11c90:	02000007 	andeq	r0, r0, #7
   11c94:	1c006891 	stcne	8, cr6, [r0], {145}	; 0x91
   11c98:	00005881 	andeq	r5, r0, r1, lsl #17
}
   11c9c:	03ccad01 	biceq	sl, ip, #1, 26	; 0x40
   11ca0:	ab780000 	blge	1e11ca8 <mailbuffer+0x1dd6bb8>
   11ca4:	01980002 	orrseq	r0, r8, r2
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   11ca8:	9c010000 	stcls	0, cr0, [r1], {-0}
   11cac:	00000b4a 	andeq	r0, r0, sl, asr #22
   11cb0:	0043af18 	subeq	sl, r3, r8, lsl pc
   11cb4:	42ad0100 	adcmi	r0, sp, #0, 2
   11cb8:	0200000a 	andeq	r0, r0, #10
   11cbc:	1d006c91 	stcne	12, cr6, [r0, #-580]	; 0xfffffdbc
   11cc0:	00005861 	andeq	r5, r0, r1, ror #16
   11cc4:	ad10bd01 	ldcge	13, cr11, [r0, #-4]
   11cc8:	01cc0002 	biceq	r0, ip, r2
   11ccc:	9c010000 	stcls	0, cr0, [r1], {-0}
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   11cd0:	00000b98 	muleq	r0, r8, fp
   11cd4:	00262c18 	eoreq	r2, r6, r8, lsl ip
   11cd8:	e7bd0100 	ldr	r0, [sp, r0, lsl #2]!
   11cdc:	02000007 	andeq	r0, r0, #7
	vPortFree( pxQueue );
   11ce0:	1d185c91 	ldcne	12, cr5, [r8, #-580]	; 0xfffffdbc
   11ce4:	01000001 	tsteq	r0, r1
   11ce8:	000450bd 	strheq	r5, [r4], -sp
   11cec:	58910200 	ldmpl	r1, {r9}
   11cf0:	001b4818 	andseq	r4, fp, r8, lsl r8
   11cf4:	50bd0100 	adcspl	r0, sp, r0, lsl #2
   11cf8:	02000004 	andeq	r0, r0, #4
}
   11cfc:	af1a5491 	svcge	0x001a5491
   11d00:	01000043 	tsteq	r0, r3, asr #32

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   11d04:	000a42bf 			; <UNDEFINED> instruction: 0x000a42bf
   11d08:	64910200 	ldrvs	r0, [r1], #512	; 0x200
   11d0c:	46e21a00 	strbtmi	r1, [r2], r0, lsl #20
   11d10:	1c010000 	stcne	0, cr0, [r1], {-0}
   11d14:	000003a9 	andeq	r0, r0, r9, lsr #7
   11d18:	0c540305 	mrrceq	3, 0, r0, r4, cr5
   11d1c:	b70b0003 	strlt	r0, [fp, -r3]
   11d20:	b9000003 	stmdblt	r0, {r0, r1}
   11d24:	1600000b 	strne	r0, [r0], -fp
   11d28:	00000382 	andeq	r0, r0, r2, lsl #7
   11d2c:	8a1a0006 	bhi	691d4c <mailbuffer+0x656c5c>
   11d30:	01000055 	qaddeq	r0, r5, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   11d34:	000bca1e 	andeq	ip, fp, lr, lsl sl
   11d38:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
   11d3c:	10000305 	andne	r0, r0, r5, lsl #6
   11d40:	00000ba9 	andeq	r0, r0, r9, lsr #23
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   11d44:	0002ed00 	andeq	lr, r2, r0, lsl #26
   11d48:	18000400 	stmdane	r0, {sl}
   11d4c:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   11d50:	00001901 	andeq	r1, r0, r1, lsl #18
   11d54:	58c10100 	stmiapl	r1, {r8}^
   11d58:	aedc0000 	cdpge	0, 13, cr0, cr12, cr0, {0}
   11d5c:	03d40002 	bicseq	r0, r4, #2
   11d60:	59b30000 	ldmibpl	r3!, {}	; <UNPREDICTABLE>
   11d64:	01020000 	mrseq	r0, (UNDEF: 2)
   11d68:	00072a08 	andeq	r2, r7, r8, lsl #20
   11d6c:	07020200 	streq	r0, [r2, -r0, lsl #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   11d70:	00000132 	andeq	r0, r0, r2, lsr r1
   11d74:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
   11d78:	3a190300 	bcc	652980 <mailbuffer+0x617890>
   11d7c:	02000000 	andeq	r0, r0, #0
   11d80:	071d0704 	ldreq	r0, [sp, -r4, lsl #14]
   11d84:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   11d88:	00071307 	andeq	r1, r7, r7, lsl #6
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   11d8c:	06010200 	streq	r0, [r1], -r0, lsl #4
   11d90:	00000733 	andeq	r0, r0, r3, lsr r7
   11d94:	b8050202 	stmdalt	r5, {r1, r9}
   11d98:	04000007 	streq	r0, [r0], #-7
   11d9c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   11da0:	30050074 	andcc	r0, r5, r4, ror r0
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   11da4:	03000029 	movweq	r0, #41	; 0x29
   11da8:	00005620 	andeq	r5, r0, r0, lsr #12
   11dac:	07040200 	streq	r0, [r4, -r0, lsl #4]
   11db0:	00000718 	andeq	r0, r0, r8, lsl r7
   11db4:	98050402 	stmdals	r5, {r1, sl}
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   11db8:	06000007 	streq	r0, [r0], -r7
   11dbc:	0000250d 	andeq	r2, r0, sp, lsl #10
   11dc0:	cb1d0218 	blgt	752628 <mailbuffer+0x717538>
   11dc4:	07000000 	streq	r0, [r0, -r0]
   11dc8:	000039ce 	andeq	r3, r0, lr, asr #19
   11dcc:	00dc1f02 	sbcseq	r1, ip, r2, lsl #30
   11dd0:	07000000 	streq	r0, [r0, -r0]
   11dd4:	00005086 	andeq	r5, r0, r6, lsl #1
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   11dd8:	00dc2102 	sbcseq	r2, ip, r2, lsl #2
   11ddc:	07040000 	streq	r0, [r4, -r0]
   11de0:	00005047 	andeq	r5, r0, r7, asr #32
   11de4:	00f12202 	rscseq	r2, r1, r2, lsl #4
   11de8:	07080000 	streq	r0, [r8, -r0]
   11dec:	000036f4 	strdeq	r3, [r0], -r4
   11df0:	01072302 	tsteq	r7, r2, lsl #6
   11df4:	070c0000 	streq	r0, [ip, -r0]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   11df8:	00004fe9 	andeq	r4, r0, r9, ror #31
   11dfc:	00dc2502 	sbcseq	r2, ip, r2, lsl #10
   11e00:	07100000 	ldreq	r0, [r0, -r0]
   11e04:	00004fc0 	andeq	r4, r0, r0, asr #31
   11e08:	00f12702 	rscseq	r2, r1, r2, lsl #14
   11e0c:	00140000 	andseq	r0, r4, r0
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   11e10:	0000d608 	andeq	sp, r0, r8, lsl #12
   11e14:	00d60900 	sbcseq	r0, r6, r0, lsl #18
   11e18:	0a000000 	beq	11e20 <prvCopyDataToQueue+0x11c>
   11e1c:	00007604 	andeq	r7, r0, r4, lsl #12
   11e20:	cb040a00 	blgt	114628 <mailbuffer+0xd9538>
   11e24:	0b000000 	bleq	11e2c <prvCopyDataToQueue+0x128>
   11e28:	0000005d 	andeq	r0, r0, sp, asr r0
   11e2c:	000000f1 	strdeq	r0, [r0], -r1
		}
	}

	++( pxQueue->uxMessagesWaiting );
   11e30:	0000d609 	andeq	sp, r0, r9, lsl #12
   11e34:	040a0000 	streq	r0, [sl], #-0
   11e38:	000000e2 	andeq	r0, r0, r2, ror #1
   11e3c:	00010708 	andeq	r0, r1, r8, lsl #14
   11e40:	00d60900 	sbcseq	r0, r6, r0, lsl #18
   11e44:	2f090000 	svccs	0x00090000
   11e48:	00000000 	andeq	r0, r0, r0
   11e4c:	00f7040a 	rscseq	r0, r7, sl, lsl #8
   11e50:	0d050000 	stceq	0, cr0, [r5, #-0]
   11e54:	02000025 	andeq	r0, r0, #37	; 0x25
}
   11e58:	00007629 	andeq	r7, r0, r9, lsr #12
   11e5c:	38b20600 	ldmcc	r2!, {r9, sl}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   11e60:	04200000 	strteq	r0, [r0], #-0
   11e64:	0001491a 	andeq	r4, r1, sl, lsl r9
   11e68:	39cd0700 	stmibcc	sp, {r8, r9, sl}^
   11e6c:	1c040000 	stcne	0, cr0, [r4], {-0}
   11e70:	0000010d 	andeq	r0, r0, sp, lsl #2
   11e74:	35030700 	strcc	r0, [r3, #-1792]	; 0xfffff900
   11e78:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
   11e7c:	0000005d 	andeq	r0, r0, sp, asr r0
   11e80:	38350718 	ldmdacc	r5!, {r3, r4, r8, r9, sl}
   11e84:	1f040000 	svcne	0x00040000
   11e88:	0000003a 	andeq	r0, r0, sl, lsr r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   11e8c:	b205001c 	andlt	r0, r5, #28
   11e90:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
   11e94:	00011821 	andeq	r1, r1, r1, lsr #16
   11e98:	2e9f0600 	cdpcs	6, 9, cr0, cr15, cr0, {0}
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   11e9c:	050c0000 	streq	r0, [ip, #-0]
   11ea0:	0001851e 	andeq	r8, r1, lr, lsl r5
   11ea4:	268a0700 	strcs	r0, [sl], r0, lsl #14
   11ea8:	20050000 	andcs	r0, r5, r0
   11eac:	0000005d 	andeq	r0, r0, sp, asr r0
   11eb0:	30f80700 	rscscc	r0, r8, r0, lsl #14
   11eb4:	21050000 	mrscs	r0, (UNDEF: 5)
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   11eb8:	0000002f 	andeq	r0, r0, pc, lsr #32
   11ebc:	2ec40704 	cdpcs	7, 12, cr0, cr4, cr4, {0}
   11ec0:	22050000 	andcs	r0, r5, #0
   11ec4:	0000002f 	andeq	r0, r0, pc, lsr #32
   11ec8:	9f050008 	svcls	0x00050008
   11ecc:	0500002e 	streq	r0, [r0, #-46]	; 0xffffffd2
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   11ed0:	00015424 	andeq	r5, r1, r4, lsr #8
   11ed4:	38b30c00 	ldmcc	r3!, {sl, fp}
   11ed8:	1a010000 	bne	51ee0 <mailbuffer+0x16df0>
   11edc:	0002aedc 	ldrdeq	sl, [r2], -ip
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   11ee0:	000000ec 	andeq	r0, r0, ip, ror #1
   11ee4:	01d09c01 	bicseq	r9, r0, r1, lsl #24
   11ee8:	af0d0000 	svcge	0x000d0000
   11eec:	01000043 	tsteq	r0, r3, asr #32
   11ef0:	0001d01a 	andeq	sp, r1, sl, lsl r0
   11ef4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
   11ef8:	0035050d 	eorseq	r0, r5, sp, lsl #10
   11efc:	5d1a0100 	ldfpls	f0, [sl, #-0]
   11f00:	02000000 	andeq	r0, r0, #0
   11f04:	9c0e6091 	stcls	0, cr6, [lr], {145}	; 0x91
   11f08:	0100004f 	tsteq	r0, pc, asr #32
   11f0c:	0001d61e 	andeq	sp, r1, lr, lsl r6
   11f10:	6c910200 	lfmvs	f0, 4, [r1], {0}
	}
}
   11f14:	49040a00 	stmdbmi	r4, {r9, fp}
   11f18:	0a000001 	beq	11f24 <prvUnlockQueue+0x8>
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   11f1c:	00010d04 	andeq	r0, r1, r4, lsl #26
   11f20:	592a0c00 	stmdbpl	sl!, {sl, fp}
   11f24:	2c010000 	stccs	0, cr0, [r1], {-0}
   11f28:	0002afc8 	andeq	sl, r2, r8, asr #31
   11f2c:	00000044 	andeq	r0, r0, r4, asr #32
   11f30:	02009c01 	andeq	r9, r0, #256	; 0x100
   11f34:	9c0d0000 	stcls	0, cr0, [sp], {-0}
   11f38:	0100004f 	tsteq	r0, pc, asr #32
   11f3c:	0001d62c 	andeq	sp, r1, ip, lsr #12
   11f40:	6c910200 	lfmvs	f0, 4, [r1], {0}

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   11f44:	589c0c00 	ldmpl	ip, {sl, fp}
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   11f48:	30010000 	andcc	r0, r1, r0
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   11f4c:	0002b00c 	andeq	fp, r2, ip
   11f50:	0000005c 	andeq	r0, r0, ip, asr r0
   11f54:	02249c01 	eoreq	r9, r4, #256	; 0x100
   11f58:	9c0d0000 	stcls	0, cr0, [sp], {-0}
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   11f5c:	0100004f 	tsteq	r0, pc, asr #32
   11f60:	0001d630 	andeq	sp, r1, r0, lsr r6
   11f64:	6c910200 	lfmvs	f0, 4, [r1], {0}
   11f68:	596b0f00 	stmdbpl	fp!, {r8, r9, sl, fp}^
   11f6c:	35010000 	strcc	r0, [r1, #-0]
   11f70:	0000005d 	andeq	r0, r0, sp, asr r0
   11f74:	0002b068 	andeq	fp, r2, r8, rrx
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   11f78:	00000068 	andeq	r0, r0, r8, rrx
				}

				--( pxQueue->xTxLock );
   11f7c:	024c9c01 	subeq	r9, ip, #256	; 0x100
   11f80:	9c0d0000 	stcls	0, cr0, [sp], {-0}
   11f84:	0100004f 	tsteq	r0, pc, asr #32
   11f88:	0001d635 	andeq	sp, r1, r5, lsr r6
   11f8c:	6c910200 	lfmvs	f0, 4, [r1], {0}
   11f90:	59930c00 	ldmibpl	r3, {sl, fp}
			}
			else
			{
				break;
   11f94:	3b010000 	blcc	51f9c <mailbuffer+0x16eac>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   11f98:	0002b0d0 	ldrdeq	fp, [r2], -r0
   11f9c:	00000060 	andeq	r0, r0, r0, rrx
   11fa0:	027e9c01 	rsbseq	r9, lr, #256	; 0x100
   11fa4:	9c0d0000 	stcls	0, cr0, [sp], {-0}
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   11fa8:	0100004f 	tsteq	r0, pc, asr #32
   11fac:	0001d63b 	andeq	sp, r1, fp, lsr r6
   11fb0:	6c910200 	lfmvs	f0, 4, [r1], {0}
	}
	taskEXIT_CRITICAL();
   11fb4:	00283c0d 	eoreq	r3, r8, sp, lsl #24

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   11fb8:	2f3b0100 	svccs	0x003b0100
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11fbc:	02000000 	andeq	r0, r0, #0
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11fc0:	0c006891 	stceq	8, cr6, [r0], {145}	; 0x91
   11fc4:	000059c1 	andeq	r5, r0, r1, asr #19
   11fc8:	b1304001 	teqlt	r0, r1
   11fcc:	00e80002 	rsceq	r0, r8, r2
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11fd0:	9c010000 	stcls	0, cr0, [r1], {-0}
   11fd4:	000002be 			; <UNDEFINED> instruction: 0x000002be
   11fd8:	004f9c0d 	subeq	r9, pc, sp, lsl #24
   11fdc:	d6400100 	strble	r0, [r0], -r0, lsl #2
   11fe0:	02000001 	andeq	r0, r0, #1
   11fe4:	af0e5c91 	svcge	0x000e5c91
   11fe8:	01000043 	tsteq	r0, r3, asr #32
				{
					vTaskMissedYield();
   11fec:	0001d042 	andeq	sp, r1, r2, asr #32
				}

				--( pxQueue->xRxLock );
   11ff0:	6c910200 	lfmvs	f0, 4, [r1], {0}
   11ff4:	00514a0e 	subseq	r4, r1, lr, lsl #20
   11ff8:	85450100 	strbhi	r0, [r5, #-256]	; 0xffffff00
   11ffc:	02000001 	andeq	r0, r0, #1
   12000:	10006091 	mulne	r0, r1, r0
   12004:	00005946 	andeq	r5, r0, r6, asr #18
			}
			else
			{
				break;
   12008:	005d5501 	subseq	r5, sp, r1, lsl #10
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   1200c:	b2180000 	andslt	r0, r8, #0
   12010:	00980002 	addseq	r0, r8, r2
   12014:	9c010000 	stcls	0, cr0, [r1], {-0}
   12018:	004f9c0d 	subeq	r9, pc, sp, lsl #24
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   1201c:	d6550100 	ldrble	r0, [r5], -r0, lsl #2
   12020:	02000001 	andeq	r0, r0, #1
   12024:	af0e6491 	svcge	0x000e6491
	}
	taskEXIT_CRITICAL();
   12028:	01000043 	tsteq	r0, r3, asr #32
   1202c:	0001d057 	andeq	sp, r1, r7, asr r0
   12030:	6c910200 	lfmvs	f0, 4, [r1], {0}
   12034:	10c80000 	sbcne	r0, r8, r0
   12038:	00040000 	andeq	r0, r4, r0
   1203c:	00002e0a 	andeq	r2, r0, sl, lsl #28
}
   12040:	00190104 	andseq	r0, r9, r4, lsl #2
   12044:	5a010000 	bpl	5204c <mailbuffer+0x16f5c>
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   12048:	dc00005b 	stcle	0, cr0, [r0], {91}	; 0x5b
   1204c:	b000000d 	andlt	r0, r0, sp
   12050:	2c0002b2 	sfmcs	f0, 4, [r0], {178}	; 0xb2
   12054:	43000019 	movwmi	r0, #25
   12058:	0200005b 	andeq	r0, r0, #91	; 0x5b
   1205c:	401b0201 	andsmi	r0, fp, r1, lsl #4
   12060:	03000000 	movweq	r0, #0
   12064:	00002546 	andeq	r2, r0, r6, asr #10
   12068:	2b280300 	blcs	a12c70 <mailbuffer+0x9d7b80>
   1206c:	03010000 	movweq	r0, #4096	; 0x1000
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   12070:	000028bb 			; <UNDEFINED> instruction: 0x000028bb
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   12074:	13040002 	movwne	r0, #16386	; 0x4002
   12078:	02000022 	andeq	r0, r0, #34	; 0x22
   1207c:	00002522 	andeq	r2, r0, r2, lsr #10
   12080:	02010200 	andeq	r0, r1, #0, 4
   12084:	00006c2b 	andeq	r6, r0, fp, lsr #24
   12088:	259a0300 	ldrcs	r0, [sl, #768]	; 0x300
   1208c:	03000000 	movweq	r0, #0
	taskEXIT_CRITICAL();
   12090:	00002c49 	andeq	r2, r0, r9, asr #24

	return xReturn;
   12094:	22210301 	eorcs	r0, r1, #67108864	; 0x4000000
   12098:	03020000 	movweq	r0, #8192	; 0x2000
   1209c:	0000265b 	andeq	r2, r0, fp, asr r6
   120a0:	21040003 	tstcs	r4, r3
   120a4:	02000024 	andeq	r0, r0, #36	; 0x24
   120a8:	00004b31 	andeq	r4, r0, r1, lsr fp
   120ac:	02080500 	andeq	r0, r8, #0, 10
}
   120b0:	0000bc34 	andeq	fp, r0, r4, lsr ip
   120b4:	22760600 	rsbscs	r0, r6, #0, 12
   120b8:	36020000 	strcc	r0, [r2], -r0
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   120bc:	000000bc 	strheq	r0, [r0], -ip
   120c0:	27d30600 	ldrbcs	r0, [r3, r0, lsl #12]
   120c4:	37020000 	strcc	r0, [r2, -r0]
   120c8:	000000bc 	strheq	r0, [r0], -ip
   120cc:	21f30601 	mvnscs	r0, r1, lsl #12
   120d0:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
   120d4:	000000c3 	andeq	r0, r0, r3, asr #1
   120d8:	1f0c0602 	svcne	0x000c0602
   120dc:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
   120e0:	000000c3 	andeq	r0, r0, r3, asr #1
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   120e4:	2bb30604 	blcs	fecd38fc <_estack+0xf6cc38fc>
   120e8:	3a020000 	bcc	920f0 <mailbuffer+0x57000>
   120ec:	000000c3 	andeq	r0, r0, r3, asr #1
   120f0:	01070006 	tsteq	r7, r6
   120f4:	00072a08 	andeq	r2, r7, r8, lsl #20
   120f8:	07020700 	streq	r0, [r2, -r0, lsl #14]
   120fc:	00000132 	andeq	r0, r0, r2, lsr r1

	return xReturn;
   12100:	00220804 	eoreq	r0, r2, r4, lsl #16
   12104:	773d0200 	ldrvc	r0, [sp, -r0, lsl #4]!
   12108:	05000000 	streq	r0, [r0, #-0]
   1210c:	865c0212 			; <UNDEFINED> instruction: 0x865c0212
   12110:	06000001 	streq	r0, [r0], -r1
   12114:	000029a8 	andeq	r2, r0, r8, lsr #19
   12118:	00bc5e02 	adcseq	r5, ip, r2, lsl #28
}
   1211c:	06000000 	streq	r0, [r0], -r0
   12120:	0000242b 	andeq	r2, r0, fp, lsr #8
   12124:	00bc5f02 	adcseq	r5, ip, r2, lsl #30
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   12128:	06010000 	streq	r0, [r1], -r0
   1212c:	0000228c 	andeq	r2, r0, ip, lsl #5
   12130:	00c36002 	sbceq	r6, r3, r2
   12134:	06020000 	streq	r0, [r2], -r0
   12138:	00002128 	andeq	r2, r0, r8, lsr #2
   1213c:	00bc6102 	adcseq	r6, ip, r2, lsl #2
   12140:	06040000 	streq	r0, [r4], -r0
   12144:	000022f6 	strdeq	r2, [r0], -r6
   12148:	00bc6202 	adcseq	r6, ip, r2, lsl #4
   1214c:	06050000 	streq	r0, [r5], -r0
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   12150:	0000279f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   12154:	00bc6302 	adcseq	r6, ip, r2, lsl #6
   12158:	06060000 	streq	r0, [r6], -r0
   1215c:	000025e7 	andeq	r2, r0, r7, ror #11
   12160:	00bc6402 	adcseq	r6, ip, r2, lsl #8
   12164:	06070000 	streq	r0, [r7], -r0
   12168:	00002c56 	andeq	r2, r0, r6, asr ip
   1216c:	00c36602 	sbceq	r6, r3, r2, lsl #12
   12170:	06080000 	streq	r0, [r8], -r0
   12174:	00002244 	andeq	r2, r0, r4, asr #4
	taskEXIT_CRITICAL();
   12178:	00c36702 	sbceq	r6, r3, r2, lsl #14

	return xReturn;
   1217c:	060a0000 	streq	r0, [sl], -r0
   12180:	00002135 	andeq	r2, r0, r5, lsr r1
   12184:	00c36802 	sbceq	r6, r3, r2, lsl #16
   12188:	060c0000 	streq	r0, [ip], -r0
   1218c:	000021fa 	strdeq	r2, [r0], -sl
   12190:	00bc6902 	adcseq	r6, ip, r2, lsl #18
   12194:	060e0000 	streq	r0, [lr], -r0
}
   12198:	0000233b 	andeq	r2, r0, fp, lsr r3
   1219c:	00bc6a02 	adcseq	r6, ip, r2, lsl #20
   121a0:	060f0000 	streq	r0, [pc], -r0
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   121a4:	00002322 	andeq	r2, r0, r2, lsr #6
   121a8:	00bc6b02 	adcseq	r6, ip, r2, lsl #22
   121ac:	06100000 	ldreq	r0, [r0], -r0
   121b0:	000028a8 	andeq	r2, r0, r8, lsr #17
   121b4:	00bc6c02 	adcseq	r6, ip, r2, lsl #24
   121b8:	00110000 	andseq	r0, r1, r0
   121bc:	0028c704 	eoreq	ip, r8, r4, lsl #14
   121c0:	d56e0200 	strble	r0, [lr, #-512]!	; 0xfffffe00
   121c4:	05000000 	streq	r0, [r0, #-0]
   121c8:	fa710209 	blx	1c529f4 <mailbuffer+0x1c17904>
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   121cc:	06000001 	streq	r0, [r0], -r1
   121d0:	000029a8 	andeq	r2, r0, r8, lsr #19
   121d4:	00bc7302 	adcseq	r7, ip, r2, lsl #6
   121d8:	06000000 	streq	r0, [r0], -r0
   121dc:	0000242b 	andeq	r2, r0, fp, lsr #8
   121e0:	00bc7402 	adcseq	r7, ip, r2, lsl #8
   121e4:	06010000 	streq	r0, [r1], -r0
   121e8:	00002088 	andeq	r2, r0, r8, lsl #1
   121ec:	00c37502 	sbceq	r7, r3, r2, lsl #10

	return xReturn;
   121f0:	06020000 	streq	r0, [r2], -r0
   121f4:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
   121f8:	00bc7602 	adcseq	r7, ip, r2, lsl #12
   121fc:	06040000 	streq	r0, [r4], -r0
   12200:	00002a4f 	andeq	r2, r0, pc, asr #20
   12204:	00bc7702 	adcseq	r7, ip, r2, lsl #14
   12208:	06050000 	streq	r0, [r5], -r0
}
   1220c:	00002790 	muleq	r0, r0, r7
   12210:	00bc7802 	adcseq	r7, ip, r2, lsl #16
   12214:	06060000 	streq	r0, [r6], -r0
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   12218:	0000258d 	andeq	r2, r0, sp, lsl #11
   1221c:	00bc7902 	adcseq	r7, ip, r2, lsl #18
   12220:	06070000 	streq	r0, [r7], -r0
   12224:	00002ab3 			; <UNDEFINED> instruction: 0x00002ab3
   12228:	00bc7a02 	adcseq	r7, ip, r2, lsl #20
   1222c:	00080000 	andeq	r0, r8, r0
   12230:	00230604 	eoreq	r0, r3, r4, lsl #12
   12234:	917c0200 	cmnls	ip, r0, lsl #4
   12238:	05000001 	streq	r0, [r0, #-1]
   1223c:	7a7f0209 	bvc	1fd2a68 <mailbuffer+0x1f97978>
   12240:	06000002 	streq	r0, [r0], -r2
   12244:	000029a8 	andeq	r2, r0, r8, lsr #19
   12248:	00bc8102 	adcseq	r8, ip, r2, lsl #2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   1224c:	06000000 	streq	r0, [r0], -r0
   12250:	0000242b 	andeq	r2, r0, fp, lsr #8
   12254:	00bc8202 	adcseq	r8, ip, r2, lsl #4
   12258:	06010000 	streq	r0, [r1], -r0
   1225c:	00002017 	andeq	r2, r0, r7, lsl r0

	if( pxNewTCB != NULL )
   12260:	00bc8302 	adcseq	r8, ip, r2, lsl #6
   12264:	06020000 	streq	r0, [r2], -r0
   12268:	00002041 	andeq	r2, r0, r1, asr #32
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   1226c:	00bc8402 	adcseq	r8, ip, r2, lsl #8
   12270:	06030000 	streq	r0, [r3], -r0
   12274:	00002769 	andeq	r2, r0, r9, ror #14
   12278:	00bc8502 	adcseq	r8, ip, r2, lsl #10
   1227c:	06040000 	streq	r0, [r4], -r0
   12280:	00002721 	andeq	r2, r0, r1, lsr #14
   12284:	00bc8602 	adcseq	r8, ip, r2, lsl #12
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   12288:	06050000 	streq	r0, [r5], -r0
   1228c:	00001f29 	andeq	r1, r0, r9, lsr #30
   12290:	00bc8702 	adcseq	r8, ip, r2, lsl #14
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   12294:	06060000 	streq	r0, [r6], -r0
   12298:	00002895 	muleq	r0, r5, r8
   1229c:	00bc8802 	adcseq	r8, ip, r2, lsl #16
   122a0:	06070000 	streq	r0, [r7], -r0
   122a4:	00002716 	andeq	r2, r0, r6, lsl r7
   122a8:	00bc8902 	adcseq	r8, ip, r2, lsl #18
   122ac:	00080000 	andeq	r0, r8, r0
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   122b0:	0027e404 	eoreq	lr, r7, r4, lsl #8
   122b4:	058b0200 	streq	r0, [fp, #512]	; 0x200
   122b8:	05000002 	streq	r0, [r0, #-2]
   122bc:	d68e0207 	strle	r0, [lr], r7, lsl #4
   122c0:	06000002 	streq	r0, [r0], -r2
   122c4:	000029a8 	andeq	r2, r0, r8, lsr #19
   122c8:	00bc9002 	adcseq	r9, ip, r2
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   122cc:	06000000 	streq	r0, [r0], -r0
   122d0:	0000242b 	andeq	r2, r0, fp, lsr #8
   122d4:	00bc9102 	adcseq	r9, ip, r2, lsl #2
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   122d8:	06010000 	streq	r0, [r1], -r0
   122dc:	000026c9 	andeq	r2, r0, r9, asr #13
   122e0:	00bc9202 	adcseq	r9, ip, r2, lsl #4
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   122e4:	06020000 	streq	r0, [r2], -r0
		{
			uxCurrentNumberOfTasks++;
   122e8:	0000258d 	andeq	r2, r0, sp, lsl #11
   122ec:	00bc9302 	adcseq	r9, ip, r2, lsl #6
   122f0:	06030000 	streq	r0, [r3], -r0
   122f4:	00002960 	andeq	r2, r0, r0, ror #18
   122f8:	00c39402 	sbceq	r9, r3, r2, lsl #8
   122fc:	06040000 	streq	r0, [r4], -r0
   12300:	00002522 	andeq	r2, r0, r2, lsr #10
			if( pxCurrentTCB == NULL )
   12304:	00bc9502 	adcseq	r9, ip, r2, lsl #10
   12308:	00060000 	andeq	r0, r6, r0
   1230c:	002bda04 	eoreq	sp, fp, r4, lsl #20
   12310:	85970200 	ldrhi	r0, [r7, #512]	; 0x200
   12314:	05000002 	streq	r0, [r0, #-2]
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   12318:	029c0202 	addseq	r0, ip, #536870912	; 0x20000000
   1231c:	06000003 	streq	r0, [r0], -r3
   12320:	000029a8 	andeq	r2, r0, r8, lsr #19
   12324:	00bc9e02 	adcseq	r9, ip, r2, lsl #28

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   12328:	06000000 	streq	r0, [r0], -r0
   1232c:	0000242b 	andeq	r2, r0, fp, lsr #8
   12330:	00bc9f02 	adcseq	r9, ip, r2, lsl #30
   12334:	00010000 	andeq	r0, r1, r0
   12338:	9a020908 	bls	94760 <mailbuffer+0x59670>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   1233c:	00000337 	andeq	r0, r0, r7, lsr r3
   12340:	003c0209 	eorseq	r0, ip, r9, lsl #4
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   12344:	e1a10200 			; <UNDEFINED> instruction: 0xe1a10200
   12348:	09000002 	stmdbeq	r0, {r1}
   1234c:	00002791 	muleq	r0, r1, r7
   12350:	01faa302 	mvnseq	sl, r2, lsl #6
   12354:	4c090000 	stcmi	0, cr0, [r9], {-0}
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   12358:	0200003c 	andeq	r0, r0, #60	; 0x3c
   1235c:	00027aa4 	andeq	r7, r2, r4, lsr #21
   12360:	25840900 	strcs	r0, [r4, #2304]	; 0x900
   12364:	a5020000 	strge	r0, [r2, #-0]
   12368:	000002d6 	ldrdeq	r0, [r0], -r6
   1236c:	26fc0400 	ldrbtcs	r0, [ip], r0, lsl #8
   12370:	a7020000 	strge	r0, [r2, -r0]
					{
						pxCurrentTCB = pxNewTCB;
   12374:	00000302 	andeq	r0, r0, r2, lsl #6
   12378:	0024660a 	eoreq	r6, r4, sl, lsl #12
   1237c:	a9020200 	stmdbge	r2, {r9}
   12380:	00000373 	andeq	r0, r0, r3, ror r3
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   12384:	0029a806 	eoreq	sl, r9, r6, lsl #16
   12388:	bcab0200 	sfmlt	f0, 4, [fp]
   1238c:	00000000 	andeq	r0, r0, r0
   12390:	00242b06 	eoreq	r2, r4, r6, lsl #22
   12394:	bcac0200 	sfmlt	f0, 4, [ip]
   12398:	01000000 	mrseq	r0, (UNDEF: 0)
   1239c:	00207406 	eoreq	r7, r0, r6, lsl #8
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   123a0:	73ad0200 			; <UNDEFINED> instruction: 0x73ad0200
   123a4:	02000003 	andeq	r0, r0, #3
   123a8:	00c30b00 	sbceq	r0, r3, r0, lsl #22
   123ac:	03820000 	orreq	r0, r2, #0
   123b0:	820c0000 	andhi	r0, ip, #0
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   123b4:	00000003 	andeq	r0, r0, r3
   123b8:	d4070407 	strle	r0, [r7], #-1031	; 0xfffffbf9
   123bc:	04000001 	streq	r0, [r0], #-1
   123c0:	00002466 	andeq	r2, r0, r6, ror #8
   123c4:	0342af02 	movteq	sl, #12034	; 0x2f02
   123c8:	750d0000 	strvc	r0, [sp, #-0]
   123cc:	17030038 	smladxne	r3, r8, r0, r0

			prvAddTaskToReadyQueue( pxNewTCB );
   123d0:	000000bc 	strheq	r0, [r0], -ip
   123d4:	3631750d 	ldrtcc	r7, [r1], -sp, lsl #10
   123d8:	c3180300 	tstgt	r8, #0, 6
   123dc:	0d000000 	stceq	0, cr0, [r0, #-0]
   123e0:	00323375 	eorseq	r3, r2, r5, ror r3
   123e4:	03b41903 			; <UNDEFINED> instruction: 0x03b41903
   123e8:	04070000 	streq	r0, [r7], #-0
   123ec:	00071d07 	andeq	r1, r7, r7, lsl #26
   123f0:	07080700 	streq	r0, [r8, -r0, lsl #14]
   123f4:	00000713 	andeq	r0, r0, r3, lsl r7
   123f8:	0038730d 	eorseq	r7, r8, sp, lsl #6
   123fc:	03cc1c03 	biceq	r1, ip, #768	; 0x300
   12400:	01070000 	mrseq	r0, (UNDEF: 7)
   12404:	00073306 	andeq	r3, r7, r6, lsl #6
   12408:	05020700 	streq	r0, [r2, #-1792]	; 0xfffff900
   1240c:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
   12410:	3233730d 	eorscc	r7, r3, #872415232	; 0x34000000
   12414:	e51e0300 	ldr	r0, [lr, #-768]	; 0xfffffd00
   12418:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   1241c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   12420:	30040074 	andcc	r0, r4, r4, ror r0
   12424:	03000029 	movweq	r0, #41	; 0x29
   12428:	0003e520 	andeq	lr, r3, r0, lsr #10
   1242c:	07040700 	streq	r0, [r4, -r0, lsl #14]

			xReturn = pdPASS;
   12430:	00000718 	andeq	r0, r0, r8, lsl r7
   12434:	98050407 	stmdals	r5, {r0, r1, r2, sl}
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   12438:	0a000007 	beq	1245c <xTaskGenericCreate+0x244>
   1243c:	00002552 	andeq	r2, r0, r2, asr r5
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   12440:	5a1e0418 	bpl	7934a8 <mailbuffer+0x7583b8>
   12444:	06000004 	streq	r0, [r0], -r4
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   12448:	00002651 	andeq	r2, r0, r1, asr r6
   1244c:	045a2004 	ldrbeq	r2, [sl], #-4
   12450:	06000000 	streq	r0, [r0], -r0
	{
		if( xSchedulerRunning != pdFALSE )
   12454:	00002c0c 	andeq	r2, r0, ip, lsl #24
   12458:	03b42104 			; <UNDEFINED> instruction: 0x03b42104
   1245c:	06040000 	streq	r0, [r4], -r0
   12460:	0000268a 	andeq	r2, r0, sl, lsl #13
   12464:	03ec2204 	mvneq	r2, #4, 4	; 0x40000000
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   12468:	06080000 	streq	r0, [r8], -r0
   1246c:	00002169 	andeq	r2, r0, r9, ror #2
   12470:	045a2304 	ldrbeq	r2, [sl], #-772	; 0xfffffcfc
   12474:	060c0000 	streq	r0, [ip], -r0
   12478:	0000277d 	andeq	r2, r0, sp, ror r7
   1247c:	045a2404 	ldrbeq	r2, [sl], #-1028	; 0xfffffbfc
   12480:	06100000 	ldreq	r0, [r0], -r0
			{
				portYIELD_WITHIN_API();
   12484:	00002bbb 			; <UNDEFINED> instruction: 0x00002bbb
			}
		}
	}

	return xReturn;
   12488:	045a2504 	ldrbeq	r2, [sl], #-1284	; 0xfffffafc
   1248c:	00140000 	andseq	r0, r4, r0
   12490:	0460040f 	strbteq	r0, [r0], #-1039	; 0xfffffbf1
   12494:	37100000 	ldrcc	r0, [r0, -r0]
   12498:	04000003 	streq	r0, [r0], #-3
   1249c:	00002552 	andeq	r2, r0, r2, asr r5
   124a0:	04052704 	streq	r2, [r5], #-1796	; 0xfffff8fc
}
   124a4:	04110000 	ldreq	r0, [r1], #-0
   124a8:	0026310a 	eoreq	r3, r6, sl, lsl #2
   124ac:	1f050c00 	svcne	0x00050c00
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   124b0:	000004a3 	andeq	r0, r0, r3, lsr #9
   124b4:	00265106 	eoreq	r5, r6, r6, lsl #2
   124b8:	a3210500 	teqge	r1, #0, 10
   124bc:	00000004 	andeq	r0, r0, r4
   124c0:	002bf106 	eoreq	pc, fp, r6, lsl #2
   124c4:	b4220500 	strtlt	r0, [r2], #-1280	; 0xfffffb00
   124c8:	04000003 	streq	r0, [r0], #-3
   124cc:	00248506 	eoreq	r8, r4, r6, lsl #10
   124d0:	a3230500 	teqge	r3, #0, 10
   124d4:	08000004 	stmdaeq	r0, {r2}
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   124d8:	cc040f00 	stcgt	15, cr0, [r4], {-0}
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   124dc:	04000003 	streq	r0, [r0], #-3
   124e0:	00002631 	andeq	r2, r0, r1, lsr r6
   124e4:	04722505 	ldrbteq	r2, [r2], #-1285	; 0xfffffafb
   124e8:	3b0a0000 	blcc	2924f0 <mailbuffer+0x257400>
   124ec:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
   124f0:	04e52106 	strbteq	r2, [r5], #262	; 0x106
			{
				pxTaskToDelete = NULL;
   124f4:	e0060000 	and	r0, r6, r0
   124f8:	06000020 	streq	r0, [r0], -r0, lsr #32
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   124fc:	00058223 	andeq	r8, r5, r3, lsr #4
   12500:	3c060000 	stccc	0, cr0, [r6], {-0}
   12504:	0600002c 	streq	r0, [r0], -ip, lsr #32
   12508:	00058825 	andeq	r8, r5, r5, lsr #16
   1250c:	95060400 	strls	r0, [r6, #-1024]	; 0xfffffc00
   12510:	0600002a 	streq	r0, [r0], -sl, lsr #32
   12514:	00058e27 	andeq	r8, r5, r7, lsr #28
   12518:	0a000800 	beq	14520 <EnableInterrupt+0x98>
   1251c:	00002ad1 	ldrdeq	r2, [r0], -r1

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   12520:	822d0738 	eorhi	r0, sp, #56, 14	; 0xe00000
   12524:	06000005 	streq	r0, [r0], -r5
   12528:	00005a28 	andeq	r5, r0, r8, lsr #20
   1252c:	05ae2f07 	streq	r2, [lr, #3847]!	; 0xf07

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   12530:	06000000 	streq	r0, [r0], -r0
   12534:	00002443 	andeq	r2, r0, r3, asr #8
   12538:	05fd3107 	ldrbeq	r3, [sp, #263]!	; 0x107
   1253c:	06040000 	streq	r0, [r4], -r0
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   12540:	0000207c 	andeq	r2, r0, ip, ror r0
   12544:	03943307 	orrseq	r3, r4, #469762048	; 0x1c000000
   12548:	06080000 	streq	r0, [r8], -r0
   1254c:	0000243b 	andeq	r2, r0, fp, lsr r4
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   12550:	006c3407 	rsbeq	r3, ip, r7, lsl #8
   12554:	06090000 	streq	r0, [r9], -r0
   12558:	00002293 	muleq	r0, r3, r2
   1255c:	06643507 	strbteq	r3, [r4], -r7, lsl #10
   12560:	060c0000 	streq	r0, [ip], -r0
   12564:	00001f7a 	andeq	r1, r0, sl, ror pc

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   12568:	03943707 	orrseq	r3, r4, #1835008	; 0x1c0000
   1256c:	06100000 	ldreq	r0, [r0], -r0
   12570:	000026a9 	andeq	r2, r0, r9, lsr #13
   12574:	03943807 	orrseq	r3, r4, #458752	; 0x70000
   12578:	06110000 	ldreq	r0, [r1], -r0
   1257c:	0000296f 	andeq	r2, r0, pc, ror #18
   12580:	066a3a07 	strbteq	r3, [sl], -r7, lsl #20

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   12584:	06140000 	ldreq	r0, [r4], -r0
   12588:	00001fb2 			; <UNDEFINED> instruction: 0x00001fb2
   1258c:	06703b07 	ldrbteq	r3, [r0], -r7, lsl #22
   12590:	06180000 	ldreq	r0, [r8], -r0
   12594:	000027fc 	strdeq	r2, [r0], -ip
   12598:	06763d07 	ldrbteq	r3, [r6], -r7, lsl #26
   1259c:	061c0000 	ldreq	r0, [ip], -r0

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   125a0:	00002b34 	andeq	r2, r0, r4, lsr fp

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   125a4:	05943f07 	ldreq	r3, [r4, #3847]	; 0xf07
   125a8:	06200000 	strteq	r0, [r0], -r0
   125ac:	00002178 	andeq	r2, r0, r8, ror r1
   125b0:	05944007 	ldreq	r4, [r4, #7]
   125b4:	002c0000 	eoreq	r0, ip, r0
		{
			if( ( void * ) pxTaskToDelete == NULL )
   125b8:	04e5040f 	strbteq	r0, [r5], #1039	; 0x40f
   125bc:	040f0000 	streq	r0, [pc], #-0	; 125c4 <vTaskDelete+0x114>
   125c0:	00000389 	andeq	r0, r0, r9, lsl #7
			{
				portYIELD_WITHIN_API();
   125c4:	04a9040f 	strteq	r0, [r9], #1039	; 0x40f
   125c8:	3b040000 	blcc	1125d0 <mailbuffer+0xd74e0>
   125cc:	06000025 	streq	r0, [r0], -r5, lsr #32
   125d0:	0004b429 	andeq	fp, r4, r9, lsr #8
   125d4:	03ec1200 	mvneq	r1, #0, 4
   125d8:	05ae0000 	streq	r0, [lr, #0]!
			}
		}
	}
   125dc:	82130000 	andshi	r0, r3, #0
   125e0:	00000005 	andeq	r0, r0, r5
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   125e4:	059f040f 	ldreq	r0, [pc, #1039]	; 129fb <vTaskPrioritySet+0x1a3>
   125e8:	760a0000 	strvc	r0, [sl], -r0
   125ec:	54000028 	strpl	r0, [r0], #-40	; 0xffffffd8
   125f0:	05fd2608 	ldrbeq	r2, [sp, #1544]!	; 0x608
   125f4:	3d060000 	stccc	0, cr0, [r6, #-0]
   125f8:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
   125fc:	0003b428 	andeq	fp, r3, r8, lsr #8
   12600:	3c060000 	stccc	0, cr0, [r6], {-0}
   12604:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
   12608:	000b7729 	andeq	r7, fp, r9, lsr #14
   1260c:	da060400 	ble	193614 <mailbuffer+0x158524>
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   12610:	08000025 	stmdaeq	r0, {r0, r2, r5}
   12614:	000b7c2b 	andeq	r7, fp, fp, lsr #24

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   12618:	0b060800 	bleq	194620 <mailbuffer+0x159530>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   1261c:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
   12620:	000b922d 	andeq	r9, fp, sp, lsr #4
   12624:	49064800 	stmdbmi	r6, {fp, lr}
   12628:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
   1262c:	0009aa2f 	andeq	sl, r9, pc, lsr #20

			if( xTickCount < *pxPreviousWakeTime )
   12630:	0f004c00 	svceq	0x00004c00
   12634:	0005b404 	andeq	fp, r5, r4, lsl #8
   12638:	25800a00 	strcs	r0, [r0, #2560]	; 0xa00
   1263c:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
   12640:	00066428 	andeq	r6, r6, r8, lsr #8
   12644:	20e00600 	rsccs	r0, r0, r0, lsl #12
   12648:	2a090000 	bcs	252650 <mailbuffer+0x217560>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   1264c:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
   12650:	1fe80600 	svcne	0x00e80600
   12654:	2b090000 	blcs	25265c <mailbuffer+0x21756c>
   12658:	00000394 	muleq	r0, r4, r3
   1265c:	21490604 	cmpcs	r9, r4, lsl #12
   12660:	2c090000 	stccs	0, cr0, [r9], {-0}
   12664:	000006a8 	andeq	r0, r0, r8, lsr #13
   12668:	266b0605 	strbtcs	r0, [fp], -r5, lsl #12
   1266c:	2d090000 	stccs	0, cr0, [r9, #-0]
   12670:	000003ec 	andeq	r0, r0, ip, ror #7
   12674:	21d40608 	bicscs	r0, r4, r8, lsl #12
				{
					xShouldDelay = pdTRUE;
   12678:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
   1267c:	000003a9 	andeq	r0, r0, r9, lsr #7
   12680:	2857060c 	ldmdacs	r7, {r2, r3, r9, sl}^
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   12684:	2f090000 	svccs	0x00090000
   12688:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
   1268c:	22d70610 	sbcscs	r0, r7, #16, 12	; 0x1000000
   12690:	30090000 	andcc	r0, r9, r0
   12694:	00000040 	andeq	r0, r0, r0, asr #32
   12698:	040f0014 	streq	r0, [pc], #-20	; 126a0 <vTaskDelayUntil+0xbc>
   1269c:	00000603 	andeq	r0, r0, r3, lsl #12
   126a0:	0186040f 	orreq	r0, r6, pc, lsl #8
   126a4:	040f0000 	streq	r0, [pc], #-0	; 126ac <vTaskDelayUntil+0xc8>
   126a8:	000001fa 	strdeq	r0, [r0], -sl
   126ac:	0465040f 	strbteq	r0, [r5], #-1039	; 0xfffffbf1
				{
					xShouldDelay = pdTRUE;
   126b0:	d1040000 	mrsle	r0, (UNDEF: 4)
   126b4:	0700002a 	streq	r0, [r0, -sl, lsr #32]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   126b8:	0004e542 	andeq	lr, r4, r2, asr #10
   126bc:	09010200 	stmdbeq	r1, {r9}
   126c0:	0006a820 	andeq	sl, r6, r0, lsr #16

			if( xShouldDelay != pdFALSE )
   126c4:	2a9f0300 	bcs	fe7d32cc <_estack+0xf67c32cc>
   126c8:	03000000 	movweq	r0, #0
   126cc:	00001fc0 	andeq	r1, r0, r0, asr #31
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   126d0:	222e0301 	eorcs	r0, lr, #67108864	; 0x4000000
   126d4:	03020000 	movweq	r0, #8192	; 0x2000
   126d8:	000025c2 	andeq	r2, r0, r2, asr #11
   126dc:	fd040003 	stc2	0, cr0, [r4, #-12]
   126e0:	0900002a 	stmdbeq	r0, {r1, r3, r5}
   126e4:	00068726 	andeq	r8, r6, r6, lsr #14
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   126e8:	7c040f00 	stcvc	15, cr0, [r4], {-0}
   126ec:	04000006 	streq	r0, [r0], #-6
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   126f0:	00002580 	andeq	r2, r0, r0, lsl #11
   126f4:	06033209 	streq	r3, [r3], -r9, lsl #4

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   126f8:	93040000 	movwls	r0, #16384	; 0x4000
   126fc:	0a000026 	beq	1279c <vTaskDelay+0x78>
   12700:	0006cf21 	andeq	ip, r6, r1, lsr #30
		{
			portYIELD_WITHIN_API();
   12704:	06e41400 	strbteq	r1, [r4], r0, lsl #8
   12708:	e4130000 	ldr	r0, [r3], #-0
   1270c:	13000006 	movwne	r0, #6
   12710:	00000470 	andeq	r0, r0, r0, ror r4
   12714:	00047013 	andeq	r7, r4, r3, lsl r0
   12718:	040f0000 	streq	r0, [pc], #-0	; 12720 <vTaskDelayUntil+0x13c>
		}
	}
   1271c:	000006ea 	andeq	r0, r0, sl, ror #13
   12720:	0029070a 	eoreq	r0, r9, sl, lsl #14
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   12724:	230a2400 	movwcs	r2, #41984	; 0xa400
   12728:	00000763 	andeq	r0, r0, r3, ror #14
   1272c:	00297d06 	eoreq	r7, r9, r6, lsl #26
   12730:	63250a00 	teqvs	r5, #0, 20
   12734:	00000007 	andeq	r0, r0, r7
   12738:	00284406 	eoreq	r4, r8, r6, lsl #8
   1273c:	69270a00 	stmdbvs	r7!, {r9, fp}
   12740:	04000007 	streq	r0, [r0], #-7
   12744:	00265106 	eoreq	r5, r6, r6, lsl #2
   12748:	70280a00 	eorvc	r0, r8, r0, lsl #20
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   1274c:	08000004 	stmdaeq	r0, {r2}
   12750:	002c0c06 	eoreq	r0, ip, r6, lsl #24

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   12754:	a9290a00 	stmdbge	r9!, {r9, fp}
   12758:	0c000003 	stceq	0, cr0, [r0], {3}
   1275c:	00213f06 	eoreq	r3, r1, r6, lsl #30
		{
			vTaskSuspendAll();
   12760:	e52b0a00 	str	r0, [fp, #-2560]!	; 0xfffff600
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   12764:	10000003 	andne	r0, r0, r3
   12768:	0029eb06 	eoreq	lr, r9, r6, lsl #22
   1276c:	a92c0a00 	stmdbge	ip!, {r9, fp}
   12770:	14000003 	strne	r0, [r0], #-3
   12774:	0023ba06 	eoreq	fp, r3, r6, lsl #20
   12778:	6f2e0a00 	svcvs	0x002e0a00

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   1277c:	18000007 	stmdane	r0, {r0, r1, r2}
   12780:	00235906 	eoreq	r5, r3, r6, lsl #18
   12784:	702f0a00 	eorvc	r0, pc, r0, lsl #20
   12788:	1c000004 	stcne	0, cr0, [r0], {4}
   1278c:	002b1306 	eoreq	r1, fp, r6, lsl #6
   12790:	70300a00 	eorsvc	r0, r0, r0, lsl #20
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   12794:	20000004 	andcs	r0, r0, r4
   12798:	b9040f00 	stmdblt	r4, {r8, r9, sl, fp}
			}
			xAlreadyYielded = xTaskResumeAll();
   1279c:	0f000006 	svceq	0x00000006
   127a0:	0000ca04 	andeq	ip, r0, r4, lsl #20
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   127a4:	c4040f00 	strgt	r0, [r4], #-3840	; 0xfffff100
   127a8:	04000006 	streq	r0, [r0], #-6
   127ac:	00002907 	andeq	r2, r0, r7, lsl #18
		{
			portYIELD_WITHIN_API();
   127b0:	06ea320a 	strbteq	r3, [sl], sl, lsl #4
   127b4:	130a0000 	movwne	r0, #40960	; 0xa000
   127b8:	0900005c 	stmdbeq	r0, {r2, r3, r4, r6}
   127bc:	07e12e0b 	strbeq	r2, [r1, fp, lsl #28]!
   127c0:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
   127c4:	0b000029 	bleq	12870 <vTaskPrioritySet+0x18>
		}
	}
   127c8:	0000bc30 	andeq	fp, r0, r0, lsr ip
   127cc:	2b060000 	blcs	1927d4 <mailbuffer+0x1576e4>
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   127d0:	0b000024 	bleq	12868 <vTaskPrioritySet+0x10>
   127d4:	0000bc31 	andeq	fp, r0, r1, lsr ip
   127d8:	1c060100 	stfnes	f0, [r6], {-0}
   127dc:	0b00005b 	bleq	12950 <vTaskPrioritySet+0xf8>
   127e0:	0000c332 	andeq	ip, r0, r2, lsr r3
   127e4:	ed060200 	sfm	f0, 4, [r6, #-0]
   127e8:	0b00005a 	bleq	12958 <vTaskPrioritySet+0x100>
   127ec:	0000bc33 	andeq	fp, r0, r3, lsr ip
   127f0:	32060400 	andcc	r0, r6, #0, 8
   127f4:	0b00005b 	bleq	12968 <vTaskPrioritySet+0x110>
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   127f8:	0000bc34 	andeq	fp, r0, r4, lsr ip
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   127fc:	fa060500 	blx	193c04 <mailbuffer+0x158b14>
   12800:	0b000059 	bleq	1296c <vTaskPrioritySet+0x114>
   12804:	0000bc35 	andeq	fp, r0, r5, lsr ip
   12808:	42060600 	andmi	r0, r6, #0, 12
   1280c:	0b00005b 	bleq	12980 <vTaskPrioritySet+0x128>
   12810:	0000c336 	andeq	ip, r0, r6, lsr r3
   12814:	04000700 	streq	r0, [r0], #-1792	; 0xfffff900
   12818:	00005c13 	andeq	r5, r0, r3, lsl ip
   1281c:	0780380b 	streq	r3, [r0, fp, lsl #16]
			uxReturn = pxTCB->uxPriority;
   12820:	0c050000 	stceq	0, cr0, [r5], {-0}
   12824:	0819960c 	ldmdaeq	r9, {r2, r3, r9, sl, ip, pc}
   12828:	cf060000 	svcgt	0x00060000
		}
		taskEXIT_CRITICAL();
   1282c:	0c000012 	stceq	0, cr0, [r0], {18}

		return uxReturn;
   12830:	0003e598 	muleq	r3, r8, r5
   12834:	84060000 	strhi	r0, [r6], #-0
   12838:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
   1283c:	0003e599 	muleq	r3, r9, r5
   12840:	dc060400 	cfstrsle	mvf0, [r6], {-0}
   12844:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
   12848:	0003e59a 	muleq	r3, sl, r5
	}
   1284c:	0a000800 	beq	14854 <SetGpioDirection+0x3c>
   12850:	0000281e 	andeq	r2, r0, lr, lsl r8
   12854:	6e930c70 	mrcvs	12, 4, r0, cr3, cr0, {3}
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   12858:	06000008 	streq	r0, [r0], -r8
   1285c:	0000241b 	andeq	r2, r0, fp, lsl r4
   12860:	03e5950c 	mvneq	r9, #12, 10	; 0x3000000
   12864:	06000000 	streq	r0, [r0], -r0
   12868:	0000241c 	andeq	r2, r0, ip, lsl r4
   1286c:	086e9b0c 	stmdaeq	lr!, {r2, r3, r8, r9, fp, ip, pc}^
   12870:	06040000 	streq	r0, [r4], -r0
   12874:	00002053 	andeq	r2, r0, r3, asr r0
   12878:	03e59d0c 	mvneq	r9, #12, 26	; 0x300
   1287c:	064c0000 	strbeq	r0, [ip], -r0
   12880:	00002054 	andeq	r2, r0, r4, asr r0
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   12884:	087e9e0c 	ldmdaeq	lr!, {r2, r3, r9, sl, fp, ip, pc}^
   12888:	06500000 	ldrbeq	r0, [r0], -r0

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   1288c:	000027af 	andeq	r2, r0, pc, lsr #15
   12890:	03e5a00c 	mvneq	sl, #12
   12894:	06680000 	strbteq	r0, [r8], -r0
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   12898:	000027b0 			; <UNDEFINED> instruction: 0x000027b0
   1289c:	03b4a10c 			; <UNDEFINED> instruction: 0x03b4a10c
		}

		taskENTER_CRITICAL();
   128a0:	006c0000 	rsbeq	r0, ip, r0
		{
			if( pxTask == pxCurrentTCB )
   128a4:	0007ec0b 	andeq	lr, r7, fp, lsl #24
   128a8:	00087e00 	andeq	r7, r8, r0, lsl #28
   128ac:	03821500 	orreq	r1, r2, #0, 10
   128b0:	00050000 	andeq	r0, r5, r0
   128b4:	0003e50b 	andeq	lr, r3, fp, lsl #10
   128b8:	00088e00 	andeq	r8, r8, r0, lsl #28
			{
				pxTask = NULL;
   128bc:	03821500 	orreq	r1, r2, #0, 10
   128c0:	00050000 	andeq	r0, r5, r0
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   128c4:	00281e04 	eoreq	r1, r8, r4, lsl #28
   128c8:	19a30c00 	stmibne	r3!, {sl, fp}
   128cc:	04000008 	streq	r0, [r0], #-8
   128d0:	0000256a 	andeq	r2, r0, sl, ror #10
   128d4:	08a4a80c 	stmiaeq	r4!, {r2, r3, fp, sp, pc}
   128d8:	b4140000 	ldrlt	r0, [r4], #-0
   128dc:	13000008 	movwne	r0, #8
   128e0:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
   128e4:	0008b413 	andeq	fp, r8, r3, lsl r4
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   128e8:	040f0000 	streq	r0, [pc], #-0	; 128f0 <vTaskPrioritySet+0x98>
   128ec:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
   128f0:	00088e10 	andeq	r8, r8, r0, lsl lr
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   128f4:	29890a00 	stmibcs	r9, {r9, fp}
   128f8:	0dd00000 	ldcleq	0, cr0, [r0]
   128fc:	0009681f 	andeq	r6, r9, pc, lsl r8
   12900:	25010600 	strcs	r0, [r1, #-1536]	; 0xfffffa00
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   12904:	210d0000 	mrscs	r0, (UNDEF: 13)
   12908:	0000067c 	andeq	r0, r0, ip, ror r6
   1290c:	20080600 	andcs	r0, r8, r0, lsl #12
   12910:	220d0000 	andcs	r0, sp, #0
				{
					if( pxTask != NULL )
   12914:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
   12918:	21030638 	tstcs	r3, r8, lsr r6
   1291c:	240d0000 	strcs	r0, [sp], #-0
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   12920:	00000394 	muleq	r0, r4, r3
   12924:	29d6063c 	ldmibcs	r6, {r2, r3, r4, r5, r9, sl}^
   12928:	250d0000 	strcs	r0, [sp, #-0]
					}
				}
				else if( pxTask == NULL )
   1292c:	00000394 	muleq	r0, r4, r3
   12930:	2bcc063d 	blcs	ff31422c <_estack+0xf730422c>
   12934:	270d0000 	strcs	r0, [sp, -r0]
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   12938:	00000763 	andeq	r0, r0, r3, ror #14
   1293c:	252c0640 	strcs	r0, [ip, #-1600]!	; 0xfffff9c0
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   12940:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
   12944:	00000763 	andeq	r0, r0, r3, ror #14
   12948:	224e0644 	subcs	r0, lr, #68, 12	; 0x4400000
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   1294c:	2a0d0000 	bcs	352954 <mailbuffer+0x317864>
   12950:	0000088e 	andeq	r0, r0, lr, lsl #17
   12954:	27580648 	ldrbcs	r0, [r8, -r8, asr #12]
   12958:	2b0d0000 	blcs	352960 <mailbuffer+0x317870>

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   1295c:	00000968 	andeq	r0, r0, r8, ror #18
   12960:	27b806b8 			; <UNDEFINED> instruction: 0x27b806b8
   12964:	2d0d0000 	stccs	0, cr0, [sp, #-0]
   12968:	0000039e 	muleq	r0, lr, r3
   1296c:	1fd106bc 	svcne	0x00d106bc
   12970:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
   12974:	0000096e 	andeq	r0, r0, lr, ror #18
   12978:	262a06c0 	strtcs	r0, [sl], -r0, asr #13
   1297c:	300d0000 	andcc	r0, sp, r0
   12980:	00000974 	andeq	r0, r0, r4, ror r9
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   12984:	2a3406c4 	bcs	d1449c <mailbuffer+0xcd93ac>
   12988:	310d0000 	mrscc	r0, (UNDEF: 13)
   1298c:	0000096e 	andeq	r0, r0, lr, ror #18
   12990:	25f706c8 	ldrbcs	r0, [r7, #1736]!	; 0x6c8
					prvAddTaskToReadyQueue( pxTCB );
   12994:	320d0000 	andcc	r0, sp, #0
   12998:	0000039e 	muleq	r0, lr, r3
   1299c:	040f00cc 	streq	r0, [pc], #-204	; 129a4 <vTaskPrioritySet+0x14c>
   129a0:	00000899 	muleq	r0, r9, r8
   129a4:	0394040f 	orrseq	r0, r4, #251658240	; 0xf000000
   129a8:	040f0000 	streq	r0, [pc], #-0	; 129b0 <vTaskPrioritySet+0x158>
   129ac:	00000775 	andeq	r0, r0, r5, ror r7
   129b0:	00298904 	eoreq	r8, r9, r4, lsl #18
   129b4:	bf340d00 	svclt	0x00340d00
   129b8:	0a000008 	beq	129e0 <vTaskPrioritySet+0x188>
   129bc:	00002749 	andeq	r2, r0, r9, asr #14
   129c0:	aa200e08 	bge	8161e8 <mailbuffer+0x7db0f8>
   129c4:	06000009 	streq	r0, [r0], -r9
   129c8:	00002443 	andeq	r2, r0, r3, asr #8
   129cc:	05fd220e 	ldrbeq	r2, [sp, #526]!	; 0x20e
   129d0:	06000000 	streq	r0, [r0], -r0
   129d4:	000020e0 	andeq	r2, r0, r0, ror #1
   129d8:	06b3240e 	ldrteq	r2, [r3], lr, lsl #8
   129dc:	00040000 	andeq	r0, r4, r0
   129e0:	00274904 	eoreq	r4, r7, r4, lsl #18
   129e4:	85260e00 	strhi	r0, [r6, #-3584]!	; 0xfffff200
   129e8:	0a000009 	beq	12a14 <vTaskPrioritySet+0x1bc>
   129ec:	0000250d 	andeq	r2, r0, sp, lsl #10
   129f0:	0a1d0f18 	beq	756658 <mailbuffer+0x71b568>
				}

				if( xYieldRequired == pdTRUE )
   129f4:	0600000a 	streq	r0, [r0], -sl
   129f8:	000039ce 	andeq	r3, r0, lr, asr #19
   129fc:	0a1b1f0f 	beq	6da640 <mailbuffer+0x69f550>
				{
					portYIELD_WITHIN_API();
   12a00:	06000000 	streq	r0, [r0], -r0
				}
			}
		}
		taskEXIT_CRITICAL();
   12a04:	00005086 	andeq	r5, r0, r6, lsl #1
   12a08:	0a1b210f 	beq	6dae4c <mailbuffer+0x69fd5c>
   12a0c:	06040000 	streq	r0, [r4], -r0
   12a10:	00005047 	andeq	r5, r0, r7, asr #32
   12a14:	0a30220f 	beq	c1b258 <mailbuffer+0xbe0168>
   12a18:	06080000 	streq	r0, [r8], -r0
	}
   12a1c:	000036f4 	strdeq	r3, [r0], -r4
   12a20:	0a46230f 	beq	119b664 <mailbuffer+0x1160574>
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   12a24:	060c0000 	streq	r0, [ip], -r0
   12a28:	00004fe9 	andeq	r4, r0, r9, ror #31
   12a2c:	0a1b250f 	beq	6dbe70 <mailbuffer+0x6a0d80>
   12a30:	06100000 	ldreq	r0, [r0], -r0
   12a34:	00004fc0 	andeq	r4, r0, r0, asr #31
   12a38:	0a30270f 	beq	c1c67c <mailbuffer+0xbe158c>
   12a3c:	00140000 	andseq	r0, r4, r0
   12a40:	000a1514 	andeq	r1, sl, r4, lsl r5
   12a44:	0a151300 	beq	55764c <mailbuffer+0x51c55c>
   12a48:	0f000000 	svceq	0x00000000
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   12a4c:	0009b504 	andeq	fp, r9, r4, lsl #10
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   12a50:	0a040f00 	beq	116658 <mailbuffer+0xdb568>
   12a54:	1200000a 	andne	r0, r0, #10
   12a58:	000003ec 	andeq	r0, r0, ip, ror #7
   12a5c:	00000a30 	andeq	r0, r0, r0, lsr sl
   12a60:	000a1513 	andeq	r1, sl, r3, lsl r5
   12a64:	040f0000 	streq	r0, [pc], #-0	; 12a6c <vTaskSuspend+0x48>
			{
				pxTaskToSuspend = NULL;
   12a68:	00000a21 	andeq	r0, r0, r1, lsr #20
   12a6c:	000a4614 	andeq	r4, sl, r4, lsl r6
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   12a70:	0a151300 	beq	557678 <mailbuffer+0x51c588>
   12a74:	a9130000 	ldmdbge	r3, {}	; <UNPREDICTABLE>
   12a78:	00000003 	andeq	r0, r0, r3
   12a7c:	0a36040f 	beq	d93ac0 <mailbuffer+0xd589d0>
   12a80:	0d040000 	stceq	0, cr0, [r4, #-0]
   12a84:	0f000025 	svceq	0x00000025
   12a88:	0009b529 	andeq	fp, r9, r9, lsr #10
   12a8c:	22a00a00 	adccs	r0, r0, #0, 20
   12a90:	10540000 	subsne	r0, r4, r0

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   12a94:	000b6022 	andeq	r6, fp, r2, lsr #32
   12a98:	2a290600 	bcs	a542a0 <mailbuffer+0xa191b0>
   12a9c:	24100000 	ldrcs	r0, [r0], #-0
   12aa0:	000003b4 			; <UNDEFINED> instruction: 0x000003b4

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   12aa4:	262a0600 	strtcs	r0, [sl], -r0, lsl #12
   12aa8:	25100000 	ldrcs	r0, [r0, #-0]
   12aac:	00000974 	andeq	r0, r0, r4, ror r9
   12ab0:	21bb0604 			; <UNDEFINED> instruction: 0x21bb0604
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   12ab4:	26100000 	ldrcs	r0, [r0], -r0
   12ab8:	000003ec 	andeq	r0, r0, ip, ror #7
   12abc:	22670608 	rsbcs	r0, r7, #8, 12	; 0x800000
   12ac0:	27100000 	ldrcs	r0, [r0, -r0]
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   12ac4:	000003ec 	andeq	r0, r0, ip, ror #7
   12ac8:	2abd060c 	bcs	fef54300 <_estack+0xf6f44300>
   12acc:	29100000 	ldmdbcs	r0, {}	; <UNPREDICTABLE>
   12ad0:	000003ec 	andeq	r0, r0, ip, ror #7
   12ad4:	21170610 	tstcs	r7, r0, lsl r6
   12ad8:	2a100000 	bcs	412ae0 <mailbuffer+0x3d79f0>
		}
		taskEXIT_CRITICAL();
   12adc:	000003ec 	andeq	r0, r0, ip, ror #7

		if( ( void * ) pxTaskToSuspend == NULL )
   12ae0:	20e00614 	rsccs	r0, r0, r4, lsl r6
   12ae4:	2c100000 	ldccs	0, cr0, [r0], {-0}
   12ae8:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
		{
			if( xSchedulerRunning != pdFALSE )
   12aec:	297d0618 	ldmdbcs	sp!, {r3, r4, r9, sl}^
   12af0:	2d100000 	ldccs	0, cr0, [r0, #-0]
   12af4:	00000763 	andeq	r0, r0, r3, ror #14
   12af8:	243b061c 	ldrtcs	r0, [fp], #-1564	; 0xfffff9e4
   12afc:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   12b00:	0000006c 	andeq	r0, r0, ip, rrx
   12b04:	21d40620 	bicscs	r0, r4, r0, lsr #12
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   12b08:	2f100000 	svccs	0x00100000
   12b0c:	000003a9 	andeq	r0, r0, r9, lsr #7
   12b10:	239c0624 	orrscs	r0, ip, #36, 12	; 0x2400000
   12b14:	31100000 	tstcc	r0, r0
   12b18:	000003a9 	andeq	r0, r0, r9, lsr #7
   12b1c:	21b00628 	lsrscs	r0, r8, #12
   12b20:	32100000 	andscc	r0, r0, #0
   12b24:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
   12b28:	2095062c 	addscs	r0, r5, ip, lsr #12
   12b2c:	33100000 	tstcc	r0, #0
   12b30:	000003a9 	andeq	r0, r0, r9, lsr #7
   12b34:	20ea0630 	rsccs	r0, sl, r0, lsr r6
   12b38:	34100000 	ldrcc	r0, [r0], #-0
				}
				else
				{
					vTaskSwitchContext();
   12b3c:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
   12b40:	26390634 			; <UNDEFINED> instruction: 0x26390634
   12b44:	35100000 	ldrcc	r0, [r0, #-0]
   12b48:	000003a9 	andeq	r0, r0, r9, lsr #7
   12b4c:	288c0638 	stmcs	ip, {r3, r4, r5, r9, sl}
   12b50:	37100000 	ldrcc	r0, [r0, -r0]
				}
			}
		}
	}
   12b54:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
   12b58:	2731063c 			; <UNDEFINED> instruction: 0x2731063c
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   12b5c:	38100000 	ldmdacc	r0, {}	; <UNPREDICTABLE>
   12b60:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
   12b64:	282f0640 	stmdacs	pc!, {r6, r9, sl}	; <UNPREDICTABLE>
   12b68:	39100000 	ldmdbcc	r0, {}	; <UNPREDICTABLE>
   12b6c:	000003a9 	andeq	r0, r0, r9, lsr #7
   12b70:	2adc0644 	bcs	ff714488 <_estack+0xf7704488>
   12b74:	3b100000 	blcc	412b7c <mailbuffer+0x3d7a8c>
   12b78:	00000b60 	andeq	r0, r0, r0, ror #22
   12b7c:	24a70648 	strtcs	r0, [r7], #1608	; 0x648
   12b80:	3c100000 	ldccc	0, cr0, [r0], {-0}
	portBASE_TYPE xReturn = pdFALSE;
   12b84:	00000470 	andeq	r0, r0, r0, ror r4
   12b88:	1fa0064c 	svcne	0x00a0064c
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   12b8c:	3e100000 	cdpcc	0, 1, cr0, cr0, cr0, {0}
   12b90:	00000b66 	andeq	r0, r0, r6, ror #22
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   12b94:	040f0050 	streq	r0, [pc], #-80	; 12b9c <xTaskIsTaskSuspended+0x40>
   12b98:	000003a9 	andeq	r0, r0, r9, lsr #7
   12b9c:	0a4c040f 	beq	1313be0 <mailbuffer+0x12d8af0>
   12ba0:	a0040000 	andge	r0, r4, r0
   12ba4:	10000022 	andne	r0, r0, r2, lsr #32
   12ba8:	000a5740 	andeq	r5, sl, r0, asr #14
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   12bac:	03b41600 			; <UNDEFINED> instruction: 0x03b41600
   12bb0:	8c0b0000 	stchi	0, cr0, [fp], {-0}
   12bb4:	8c00000b 	stchi	0, cr0, [r0], {11}
   12bb8:	1500000b 	strne	r0, [r0, #-11]
   12bbc:	00000382 	andeq	r0, r0, r2, lsl #7
   12bc0:	040f000f 	streq	r0, [pc], #-15	; 12bc8 <xTaskIsTaskSuspended+0x6c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   12bc4:	00000b6c 	andeq	r0, r0, ip, ror #22
   12bc8:	0003ec16 	andeq	lr, r3, r6, lsl ip
   12bcc:	01010200 	mrseq	r0, R9_usr
   12bd0:	000bbebb 			; <UNDEFINED> instruction: 0x000bbebb
				{
					xReturn = pdTRUE;
   12bd4:	541b0300 	ldrpl	r0, [fp], #-768	; 0xfffffd00
   12bd8:	03000000 	movweq	r0, #0
				}
			}
		}

		return xReturn;
   12bdc:	00005abe 			; <UNDEFINED> instruction: 0x00005abe
   12be0:	5bc40301 	blpl	ff1137ec <_estack+0xf71037ec>
   12be4:	03020000 	movweq	r0, #8192	; 0x2000
   12be8:	00005bb8 			; <UNDEFINED> instruction: 0x00005bb8
   12bec:	5ab30303 	bpl	fecd3800 <_estack+0xf6cc3800>
   12bf0:	00040000 	andeq	r0, r4, r0
   12bf4:	005c0217 	subseq	r0, ip, r7, lsl r2
	}
   12bf8:	b0540100 	subslt	r0, r4, r0, lsl #2
   12bfc:	0c0002b2 	sfmeq	f0, 4, [r0], {178}	; 0xb2
   12c00:	01000002 	tsteq	r0, r2
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   12c04:	000c209c 	muleq	ip, ip, r0
   12c08:	43af1800 			; <UNDEFINED> instruction: 0x43af1800
   12c0c:	54010000 	strpl	r0, [r1], #-0
   12c10:	00000c20 	andeq	r0, r0, r0, lsr #24
   12c14:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
   12c18:	000020e2 	andeq	r2, r0, r2, ror #1
   12c1c:	06b35401 	ldrteq	r5, [r3], r1, lsl #8
   12c20:	91020000 	mrsls	r0, (UNDEF: 2)
   12c24:	b3801960 	orrlt	r1, r0, #96, 18	; 0x180000
   12c28:	00840002 	addeq	r0, r4, r2
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   12c2c:	0c090000 	stceq	0, cr0, [r9], {-0}
   12c30:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   12c34:	e5640100 	strb	r0, [r4, #-256]!	; 0xffffff00
   12c38:	02000003 	andeq	r0, r0, #3
   12c3c:	1b006c91 	blne	2de88 <OwnIPAddress>
   12c40:	0002b410 	andeq	fp, r2, r0, lsl r4
   12c44:	00000038 	andeq	r0, r0, r8, lsr r0
   12c48:	0100691a 	tsteq	r0, sl, lsl r9
   12c4c:	0003e56b 	andeq	lr, r3, fp, ror #10
   12c50:	68910200 	ldmvs	r1, {r9}
   12c54:	040f0000 	streq	r0, [pc], #-0	; 12c5c <vTaskResume+0x58>
		{
			taskENTER_CRITICAL();
   12c58:	0000097a 	andeq	r0, r0, sl, ror r9
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   12c5c:	005c0017 	subseq	r0, ip, r7, lsl r0
   12c60:	bc750100 	ldflte	f0, [r5], #-0
   12c64:	440002b4 	strmi	r0, [r0], #-692	; 0xfffffd4c
   12c68:	01000001 	tsteq	r0, r1
   12c6c:	000c4a9c 	muleq	ip, ip, sl
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   12c70:	43af1800 			; <UNDEFINED> instruction: 0x43af1800
   12c74:	75010000 	strvc	r0, [r1, #-0]
   12c78:	00000c20 	andeq	r0, r0, r0, lsr #24
   12c7c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
					prvAddTaskToReadyQueue( pxTCB );
   12c80:	005a9f1c 	subseq	r9, sl, ip, lsl pc
   12c84:	a9960100 	ldmibge	r6, {r8}
   12c88:	00000003 	andeq	r0, r0, r3
   12c8c:	840002b6 	strhi	r0, [r0], #-694	; 0xfffffd4a
   12c90:	01000002 	tsteq	r0, r2
   12c94:	000cda9c 	muleq	ip, ip, sl
   12c98:	19411800 	stmdbne	r1, {fp, ip}^
   12c9c:	96010000 	strls	r0, [r1], -r0
   12ca0:	00000470 	andeq	r0, r0, r0, ror r4
   12ca4:	18549102 	ldmdane	r4, {r1, r8, ip, pc}^
   12ca8:	00001521 	andeq	r1, r0, r1, lsr #10
   12cac:	03a99601 			; <UNDEFINED> instruction: 0x03a99601
   12cb0:	91020000 	mrsls	r0, (UNDEF: 2)
   12cb4:	59e81850 	stmibpl	r8!, {r4, r6, fp, ip}^
   12cb8:	96010000 	strls	r0, [r1], -r0
   12cbc:	000003a9 	andeq	r0, r0, r9, lsr #7
   12cc0:	1d4c9102 	stfnep	f1, [ip, #-8]
   12cc4:	00005bdc 	ldrdeq	r5, [r0], -ip
   12cc8:	096e9801 	stmdbeq	lr!, {r0, fp, ip, pc}^
   12ccc:	91020000 	mrsls	r0, (UNDEF: 2)
   12cd0:	122f1d60 	eorne	r1, pc, #96, 26	; 0x1800
   12cd4:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
   12cd8:	00000394 	muleq	r0, r4, r3
   12cdc:	1d5f9102 	ldfnep	f1, [pc, #-8]	; 12cdc <vTaskResume+0xd8>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12ce0:	00005a41 	andeq	r5, r0, r1, asr #20
   12ce4:	03a99a01 			; <UNDEFINED> instruction: 0x03a99a01
   12ce8:	91020000 	mrsls	r0, (UNDEF: 2)
   12cec:	b6401b6c 	strblt	r1, [r0], -ip, ror #22
   12cf0:	021c0002 	andseq	r0, ip, #2
   12cf4:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
   12cf8:	a99e0100 	ldmibge	lr, {r8}
   12cfc:	02000003 	andeq	r0, r0, #3
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   12d00:	6a1a6891 	bvs	6acf4c <mailbuffer+0x671e5c>
					}
				}
			}
			taskEXIT_CRITICAL();
   12d04:	a99e0100 	ldmibge	lr, {r8}
   12d08:	02000003 	andeq	r0, r0, #3
   12d0c:	00006491 	muleq	r0, r1, r4
   12d10:	005a921c 	subseq	r9, sl, ip, lsl r2
   12d14:	dab20100 	ble	fec9311c <_estack+0xf6c8311c>
   12d18:	84000003 	strhi	r0, [r0], #-3
		}
	}
   12d1c:	b40002b8 	strlt	r0, [r0], #-696	; 0xfffffd48
   12d20:	01000000 	mrseq	r0, (UNDEF: 0)
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   12d24:	000d2c9c 	muleq	sp, ip, ip
   12d28:	19411800 	stmdbne	r1, {fp, ip}^
   12d2c:	b2010000 	andlt	r0, r1, #0
   12d30:	00000470 	andeq	r0, r0, r0, ror r4
   12d34:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
   12d38:	00001521 	andeq	r1, r0, r1, lsr #10
   12d3c:	03a9b201 			; <UNDEFINED> instruction: 0x03a9b201
   12d40:	91020000 	mrsls	r0, (UNDEF: 2)
   12d44:	59e81860 	stmibpl	r8!, {r5, r6, fp, ip}^
   12d48:	b2010000 	andlt	r0, r1, #0
	portBASE_TYPE xYieldRequired = pdFALSE;
   12d4c:	000003a9 	andeq	r0, r0, r9, lsr #7
   12d50:	1d5c9102 	ldfnep	f1, [ip, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   12d54:	00005a41 	andeq	r5, r0, r1, asr #20
   12d58:	03a9b301 			; <UNDEFINED> instruction: 0x03a9b301

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   12d5c:	91020000 	mrsls	r0, (UNDEF: 2)
   12d60:	4f1e006c 	svcmi	0x001e006c
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   12d64:	0100005a 	qaddeq	r0, sl, r0
   12d68:	02b938c5 	adcseq	r3, r9, #12910592	; 0xc50000
   12d6c:	0006bc00 	andeq	fp, r6, r0, lsl #24
   12d70:	ab9c0100 	blge	fe713178 <_estack+0xf6703178>
   12d74:	1800000e 	stmdane	r0, {r1, r2, r3}
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12d78:	000043af 	andeq	r4, r0, pc, lsr #7
   12d7c:	0c20c501 	cfstr32eq	mvfx12, [r0], #-4
   12d80:	91030000 	mrsls	r0, (UNDEF: 3)
   12d84:	041d7f94 	ldreq	r7, [sp], #-3988	; 0xfffff06c
   12d88:	01000014 	tsteq	r0, r4, lsl r0
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   12d8c:	0003dac7 	andeq	sp, r3, r7, asr #21
   12d90:	a4910300 	ldrge	r0, [r1], #768	; 0x300
   12d94:	72611a7f 	rsbvc	r1, r1, #520192	; 0x7f000
   12d98:	c7010067 	strgt	r0, [r1, -r7, rrx]
   12d9c:	000003da 	ldrdeq	r0, [r0], -sl
   12da0:	1d6c9102 	stfnep	f1, [ip, #-8]!
   12da4:	00001521 	andeq	r1, r0, r1, lsr #10
   12da8:	03a9c801 			; <UNDEFINED> instruction: 0x03a9c801
   12dac:	91020000 	mrsls	r0, (UNDEF: 2)
   12db0:	5aae1d68 	bpl	feb9a358 <_estack+0xf6b8a358>
   12db4:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
					vListRemove(  &( pxTCB->xGenericListItem ) );
   12db8:	000003a9 	andeq	r0, r0, r9, lsr #7
   12dbc:	1d649102 	stfnep	f1, [r4, #-8]!
   12dc0:	00005b23 	andeq	r5, r0, r3, lsr #22
   12dc4:	03a9c801 			; <UNDEFINED> instruction: 0x03a9c801
					prvAddTaskToReadyQueue( pxTCB );
   12dc8:	91020000 	mrsls	r0, (UNDEF: 2)
   12dcc:	5bd21d60 	blpl	ff49a354 <_estack+0xf748a354>
   12dd0:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
   12dd4:	000003da 	ldrdeq	r0, [r0], -sl
   12dd8:	1d5c9102 	ldfnep	f1, [ip, #-8]
   12ddc:	00005bd7 	ldrdeq	r5, [r0], -r7
   12de0:	03dac901 	bicseq	ip, sl, #16384	; 0x4000
   12de4:	91020000 	mrsls	r0, (UNDEF: 2)
   12de8:	5b171d58 	blpl	5da350 <mailbuffer+0x59f260>
   12dec:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
   12df0:	000003da 	ldrdeq	r0, [r0], -sl
   12df4:	1d549102 	ldfnep	f1, [r4, #-8]
   12df8:	00005ac6 	andeq	r5, r0, r6, asr #21
   12dfc:	03dac901 	bicseq	ip, sl, #16384	; 0x4000
   12e00:	91020000 	mrsls	r0, (UNDEF: 2)
   12e04:	241b1d50 	ldrcs	r1, [fp], #-3408	; 0xfffff2b0
   12e08:	ca010000 	bgt	52e10 <mailbuffer+0x17d20>
   12e0c:	000003da 	ldrdeq	r0, [r0], -sl
   12e10:	1d4c9102 	stfnep	f1, [ip, #-8]
   12e14:	00002053 	andeq	r2, r0, r3, asr r0
   12e18:	03daca01 	bicseq	ip, sl, #4096	; 0x1000
   12e1c:	91020000 	mrsls	r0, (UNDEF: 2)
   12e20:	64691a48 	strbtvs	r1, [r9], #-2632	; 0xfffff5b8
   12e24:	a9cb0100 	stmibge	fp, {r8}^
   12e28:	02000003 	andeq	r0, r0, #3
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   12e2c:	321d4491 	andscc	r4, sp, #-1862270976	; 0x91000000
   12e30:	0100005a 	qaddeq	r0, sl, r0
   12e34:	0003a9cb 	andeq	sl, r3, fp, asr #19
   12e38:	40910200 	addsmi	r0, r1, r0, lsl #4
   12e3c:	002a361d 	eoreq	r3, sl, sp, lsl r6
   12e40:	6ecd0100 	polvse	f0, f5, f0
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   12e44:	03000009 	movweq	r0, #9
   12e48:	1d7fac91 	ldclne	12, cr10, [pc, #-580]!	; 12c0c <vTaskResume+0x8>
   12e4c:	00001fd3 	ldrdeq	r1, [r0], -r3
   12e50:	0eabce01 	cdpeq	14, 10, cr12, cr11, cr1, {0}
   12e54:	91030000 	mrsls	r0, (UNDEF: 3)
   12e58:	421d7fbc 	andsmi	r7, sp, #188, 30	; 0x2f0
   12e5c:	0100005b 	qaddeq	r0, fp, r0
	}
   12e60:	00039ecf 	andeq	r9, r3, pc, asr #29
   12e64:	ba910300 	blt	fe453a6c <_estack+0xf6443a6c>
   12e68:	5a481d7f 	bpl	121a46c <mailbuffer+0x11df37c>
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   12e6c:	d0010000 	andle	r0, r1, r0
   12e70:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
   12e74:	7fa89103 	svcvc	0x00a89103
   12e78:	02bd4819 	adcseq	r4, sp, #1638400	; 0x190000
   12e7c:	00014400 	andeq	r4, r1, r0, lsl #8
   12e80:	000e7800 	andeq	r7, lr, r0, lsl #16
   12e84:	00691f00 	rsbeq	r1, r9, r0, lsl #30
   12e88:	e5012a01 	str	r2, [r1, #-2561]	; 0xfffff5ff
   12e8c:	03000003 	movweq	r0, #3
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   12e90:	1b7fb491 	blne	20000dc <mailbuffer+0x1fc4fec>
   12e94:	0002bd54 	andeq	fp, r2, r4, asr sp
   12e98:	00000110 	andeq	r0, r0, r0, lsl r1
   12e9c:	0012cf20 	andseq	ip, r2, r0, lsr #30
   12ea0:	012e0100 	teqeq	lr, r0, lsl #2
   12ea4:	000003e5 	andeq	r0, r0, r5, ror #7
   12ea8:	7fa09103 	svcvc	0x00a09103
   12eac:	a41b0000 	ldrge	r0, [fp], #-0
   12eb0:	7c0002be 	sfmvc	f0, 4, [r0], {190}	; 0xbe
   12eb4:	1f000000 	svcne	0x00000000
   12eb8:	38010069 	stmdacc	r1, {r0, r3, r5, r6}
   12ebc:	0003e501 	andeq	lr, r3, r1, lsl #10
   12ec0:	b0910300 	addslt	r0, r1, r0, lsl #6
   12ec4:	beb01b7f 	vmovlt.u16	r1, d0[3]
   12ec8:	00480002 	subeq	r0, r8, r2
   12ecc:	cf200000 	svcgt	0x00200000
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   12ed0:	01000012 	tsteq	r0, r2, lsl r0
   12ed4:	03e50139 	mvneq	r0, #1073741838	; 0x4000000e
   12ed8:	91030000 	mrsls	r0, (UNDEF: 3)
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   12edc:	00007f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
   12ee0:	c2040f00 	andgt	r0, r4, #0, 30
   12ee4:	0f000003 	svceq	0x00000003
   12ee8:	00088e04 	andeq	r8, r8, r4, lsl #28
   12eec:	5c252100 	stfpls	f2, [r5], #-0

		xSchedulerRunning = pdTRUE;
   12ef0:	51010000 	mrspl	r0, (UNDEF: 1)
   12ef4:	0003ec01 	andeq	lr, r3, r1, lsl #24
   12ef8:	02bff400 	adcseq	pc, pc, #0, 8
   12efc:	0005f000 	andeq	pc, r5, r0
		xTickCount = ( portTickType ) 0U;
   12f00:	3b9c0100 	blcc	fe713308 <_estack+0xf6703308>
   12f04:	2200000f 	andcs	r0, r0, #15
   12f08:	00002330 	andeq	r2, r0, r0, lsr r3
   12f0c:	b3015101 	movwlt	r5, #4353	; 0x1101
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   12f10:	02000006 	andeq	r0, r0, #6
   12f14:	af204c91 	svcge	0x00204c91
   12f18:	01000043 	tsteq	r0, r3, asr #32
   12f1c:	0c200153 	stfeqs	f0, [r0], #-332	; 0xfffffeb4
   12f20:	91020000 	mrsls	r0, (UNDEF: 2)
   12f24:	4d7d206c 	ldclmi	0, cr2, [sp, #-432]!	; 0xfffffe50
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   12f28:	56010000 	strpl	r0, [r1], -r0
   12f2c:	00067001 	andeq	r7, r6, r1
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   12f30:	68910200 	ldmvs	r1, {r9}
   12f34:	00422820 	subeq	r2, r2, r0, lsr #16
   12f38:	01600100 	cmneq	r0, r0, lsl #2
   12f3c:	00000f3b 	andeq	r0, r0, fp, lsr pc
   12f40:	20649102 	rsbcs	r9, r4, r2, lsl #2
   12f44:	00005b29 	andeq	r5, r0, r9, lsr #22
   12f48:	41017001 	tstmi	r1, r1
   12f4c:	0200000f 	andeq	r0, r0, #15
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   12f50:	54206091 	strtpl	r6, [r0], #-145	; 0xffffff6f
   12f54:	01000042 	tsteq	r0, r2, asr #32
   12f58:	0f470179 	svceq	0x00470179
   12f5c:	91020000 	mrsls	r0, (UNDEF: 2)
   12f60:	2a44205c 	bcs	111b0d8 <mailbuffer+0x10dffe8>
	xSchedulerRunning = pdFALSE;
   12f64:	d2010000 	andle	r0, r1, #0
   12f68:	0004a901 	andeq	sl, r4, r1, lsl #18
   12f6c:	50910200 	addspl	r0, r1, r0, lsl #4
   12f70:	7a040f00 	bvc	116b78 <mailbuffer+0xdba88>
	vPortEndScheduler();
   12f74:	0f000002 	svceq	0x00000002
   12f78:	0007e104 	andeq	lr, r7, r4, lsl #2
   12f7c:	4d040f00 	stcmi	15, cr0, [r4, #-0]
   12f80:	1000000f 	andne	r0, r0, pc
   12f84:	000002d6 	ldrdeq	r0, [r0], -r6
   12f88:	005a6c23 	subseq	r6, sl, r3, lsr #24
}
   12f8c:	01dc0100 	bicseq	r0, ip, r0, lsl #2
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   12f90:	0002c5e4 	andeq	ip, r2, r4, ror #11
   12f94:	0000009c 	muleq	r0, ip, r0
   12f98:	0f879c01 	svceq	0x00879c01
   12f9c:	af220000 	svcge	0x00220000
   12fa0:	01000043 	tsteq	r0, r3, asr #32
   12fa4:	0c2001dc 	stfeqs	f0, [r0], #-880	; 0xfffffc90
   12fa8:	91020000 	mrsls	r0, (UNDEF: 2)
   12fac:	275a226c 	ldrbcs	r2, [sl, -ip, ror #4]
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   12fb0:	dc010000 	stcle	0, cr0, [r1], {-0}
   12fb4:	00096801 	andeq	r6, r9, r1, lsl #16
   12fb8:	68910200 	ldmvs	r1, {r9}
   12fbc:	5afa2400 	bpl	ffe9bfc4 <_estack+0xf7e8bfc4>
   12fc0:	e3010000 	movw	r0, #4096	; 0x1000
   12fc4:	0003ec01 	andeq	lr, r3, r1, lsl #24
   12fc8:	02c68000 	sbceq	r8, r6, #0
   12fcc:	0001a400 	andeq	sl, r1, r0, lsl #8
   12fd0:	b19c0100 	orrslt	r0, ip, r0, lsl #2
   12fd4:	2200000f 	andcs	r0, r0, #15
   12fd8:	000043af 	andeq	r4, r0, pc, lsr #7
   12fdc:	2001e301 	andcs	lr, r1, r1, lsl #6
}
   12fe0:	0200000c 	andeq	r0, r0, #12
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   12fe4:	25006c91 	strcs	r6, [r0, #-3217]	; 0xfffff36f
   12fe8:	00005acb 	andeq	r5, r0, fp, asr #21
   12fec:	2401f301 	strcs	pc, [r1], #-769	; 0xfffffcff
   12ff0:	740002c8 	strvc	r0, [r0], #-712	; 0xfffffd38
   12ff4:	01000001 	tsteq	r0, r1
   12ff8:	0010049c 	mulseq	r0, ip, r4
   12ffc:	262c2200 	strtcs	r2, [ip], -r0, lsl #4
   13000:	f3010000 	vhadd.u8	d0, d1, d0
   13004:	00097401 	andeq	r7, r9, r1, lsl #8
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   13008:	64910200 	ldrvs	r0, [r1], #512	; 0x200
   1300c:	00011d22 	andeq	r1, r1, r2, lsr #26
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   13010:	01f30100 	mvnseq	r0, r0, lsl #2
	{
		--uxSchedulerSuspended;
   13014:	00000470 	andeq	r0, r0, r0, ror r4
   13018:	22609102 	rsbcs	r9, r0, #-2147483648	; 0x80000000
   1301c:	00001b48 	andeq	r1, r0, r8, asr #22
   13020:	7001f301 	andvc	pc, r1, r1, lsl #6
   13024:	02000004 	andeq	r0, r0, #4
   13028:	af205c91 	svcge	0x00205c91
   1302c:	01000043 	tsteq	r0, r3, asr #32

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   13030:	0c2001f5 	stfeqs	f0, [r0], #-980	; 0xfffffc2c
   13034:	91020000 	mrsls	r0, (UNDEF: 2)
   13038:	e623006c 	strt	r0, [r3], -ip, rrx
   1303c:	0100005b 	qaddeq	r0, fp, r0
   13040:	c998020d 	ldmibgt	r8, {r0, r2, r3, r9}
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   13044:	00bc0002 	adcseq	r0, ip, r2
   13048:	9c010000 	stcls	0, cr0, [r1], {-0}
   1304c:	0000102a 	andeq	r1, r0, sl, lsr #32
   13050:	0043af22 	subeq	sl, r3, r2, lsr #30
   13054:	020d0100 	andeq	r0, sp, #0, 2
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   13058:	00000c20 	andeq	r0, r0, r0, lsr #24
   1305c:	006c9102 	rsbeq	r9, ip, r2, lsl #2

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   13060:	005a1525 	subseq	r1, sl, r5, lsr #10
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   13064:	021a0100 	andseq	r0, sl, #0, 2
   13068:	0002ca54 	andeq	ip, r2, r4, asr sl
   1306c:	00000188 	andeq	r0, r0, r8, lsl #3
   13070:	10749c01 	rsbsne	r9, r4, r1, lsl #24
					vListRemove( &( pxTCB->xEventListItem ) );
   13074:	af220000 	svcge	0x00220000
   13078:	01000043 	tsteq	r0, r3, asr #32
   1307c:	0c20021a 	sfmeq	f0, 4, [r0], #-104	; 0xffffff98
					vListRemove( &( pxTCB->xGenericListItem ) );
   13080:	91020000 	mrsls	r0, (UNDEF: 2)
   13084:	5a38206c 	bpl	e1b23c <mailbuffer+0xde014c>
   13088:	1c010000 	stcne	0, cr0, [r1], {-0}
					prvAddTaskToReadyQueue( pxTCB );
   1308c:	00107402 	andseq	r7, r0, r2, lsl #8
   13090:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
   13094:	2000030c 	andcs	r0, r0, ip, lsl #6
   13098:	00005a10 	andeq	r5, r0, r0, lsl sl
   1309c:	84022a01 	strhi	r2, [r2], #-2561	; 0xfffff5ff
   130a0:	05000010 	streq	r0, [r0, #-16]
   130a4:	030c8c03 	movweq	r8, #52227	; 0xcc03
   130a8:	940b0000 	strls	r0, [fp], #-0
   130ac:	84000003 	strhi	r0, [r0], #-3
   130b0:	15000010 	strne	r0, [r0, #-16]
   130b4:	00000382 	andeq	r0, r0, r2, lsl #7
   130b8:	940b002f 	strls	r0, [fp], #-47	; 0xffffffd1
   130bc:	94000003 	strls	r0, [r0], #-3
   130c0:	15000010 	strne	r0, [r0, #-16]
   130c4:	00000382 	andeq	r0, r0, r2, lsl #7
   130c8:	e21d0004 	ands	r0, sp, #4
   130cc:	01000046 	tsteq	r0, r6, asr #32
   130d0:	0003b44c 	andeq	fp, r3, ip, asr #8
   130d4:	58030500 	stmdapl	r3, {r8, sl}
   130d8:	0b00030c 	bleq	13d10 <prvInitialiseTCBVariables+0x8c>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   130dc:	000003cc 	andeq	r0, r0, ip, asr #7
   130e0:	000010b5 	strheq	r1, [r0], -r5
   130e4:	00038215 	andeq	r8, r3, r5, lsl r2
   130e8:	1d000600 	stcne	6, cr0, [r0, #-0]
   130ec:	000059ef 	andeq	r5, r0, pc, ror #19
   130f0:	10c64e01 	sbcne	r4, r6, r1, lsl #28
   130f4:	03050000 	movweq	r0, #20480	; 0x5000
					{
						xYieldRequired = pdTRUE;
   130f8:	00030788 	andeq	r0, r3, r8, lsl #15
   130fc:	0010a510 	andseq	sl, r0, r0, lsl r5
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   13100:	01040000 	mrseq	r0, (UNDEF: 4)
   13104:	00040000 	andeq	r0, r4, r0
   13108:	0000301d 	andeq	r3, r0, sp, lsl r0
   1310c:	00190104 	andseq	r0, r9, r4, lsl #2
   13110:	9f010000 	svcls	0x00010000
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   13114:	dc00005c 	stcle	0, cr0, [r0], {92}	; 0x5c
   13118:	a00002cb 	andge	r0, r0, fp, asr #5
   1311c:	11000001 	tstne	r0, r1
   13120:	02000060 	andeq	r0, r0, #96	; 0x60
   13124:	072a0801 	streq	r0, [sl, -r1, lsl #16]!
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   13128:	02020000 	andeq	r0, r2, #0
					{
						vTaskIncrementTick();
   1312c:	00013207 	andeq	r3, r1, r7, lsl #4
						--uxMissedTicks;
   13130:	33750300 	cmncc	r5, #0, 6
   13134:	19020032 	stmdbne	r2, {r1, r4, r5}
   13138:	0000003a 	andeq	r0, r0, sl, lsr r0
   1313c:	1d070402 	cfstrsne	mvf0, [r7, #-8]
   13140:	02000007 	andeq	r0, r0, #7
   13144:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
   13148:	01020000 	mrseq	r0, (UNDEF: 2)
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   1314c:	00073306 	andeq	r3, r7, r6, lsl #6
   13150:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   13154:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
   13158:	69050404 	stmdbvs	r5, {r2, sl}
   1315c:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   13160:	00002930 	andeq	r2, r0, r0, lsr r9
   13164:	00562002 	subseq	r2, r6, r2
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   13168:	04020000 	streq	r0, [r2], #-0
   1316c:	00071807 	andeq	r1, r7, r7, lsl #16
   13170:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   13174:	00000798 	muleq	r0, r8, r7
   13178:	005c8506 	subseq	r8, ip, r6, lsl #10
   1317c:	dc1e0100 	ldfles	f0, [lr], {-0}
   13180:	9c0002cb 	sfmls	f0, 4, [r0], {203}	; 0xcb
   13184:	01000000 	mrseq	r0, (UNDEF: 0)
				{
					xAlreadyYielded = pdTRUE;
   13188:	00009a9c 	muleq	r0, ip, sl
   1318c:	5c980700 	ldcpl	7, cr0, [r8], {0}
					xMissedYield = pdFALSE;
   13190:	20010000 	andcs	r0, r1, r0
   13194:	0000002f 	andeq	r0, r0, pc, lsr #32
   13198:	006c9102 	rsbeq	r9, ip, r2, lsl #2
   1319c:	005cfe08 	subseq	pc, ip, r8, lsl #28
					portYIELD_WITHIN_API();
   131a0:	782d0100 	stmdavc	sp!, {r8}
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   131a4:	a40002cc 	strge	r0, [r0], #-716	; 0xfffffd34

	return xAlreadyYielded;
   131a8:	01000000 	mrseq	r0, (UNDEF: 0)
   131ac:	5c5f099c 	mrrcpl	9, 9, r0, pc, cr12	; <UNPREDICTABLE>
   131b0:	6d010000 	stcvs	0, cr0, [r1, #-0]
   131b4:	0002cd1c 	andeq	ip, r2, ip, lsl sp
   131b8:	00000060 	andeq	r0, r0, r0, rrx
   131bc:	00db9c01 	sbcseq	r9, fp, r1, lsl #24
   131c0:	fa0a0000 	blx	2931c8 <mailbuffer+0x2580d8>
}
   131c4:	01000030 	tsteq	r0, r0, lsr r0
   131c8:	00002f6d 	andeq	r2, r0, sp, ror #30
   131cc:	0a540100 	beq	15135d4 <mailbuffer+0x14d84e4>
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   131d0:	00004c0e 	andeq	r4, r0, lr, lsl #24
   131d4:	002f6d01 	eoreq	r6, pc, r1, lsl #26
   131d8:	55010000 	strpl	r0, [r1, #-0]
   131dc:	5c4e0700 	mcrrpl	7, 0, r0, lr, cr0
   131e0:	1b010000 	blne	531e8 <mailbuffer+0x180f8>
   131e4:	000000ec 	andeq	r0, r0, ip, ror #1
   131e8:	b0d40305 	sbcslt	r0, r4, r5, lsl #6
   131ec:	3a0b0003 	bcc	2d3200 <mailbuffer+0x298110>
   131f0:	07000000 	streq	r0, [r0, -r0]
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   131f4:	00005c3f 	andeq	r5, r0, pc, lsr ip
	{
		xTicks = xTickCount;
   131f8:	01021c01 	tsteq	r2, r1, lsl #24
   131fc:	03050000 	movweq	r0, #20480	; 0x5000
   13200:	0003b0d8 	ldrdeq	fp, [r3], -r8
   13204:	00005d0b 	andeq	r5, r0, fp, lsl #26
	}
	taskEXIT_CRITICAL();
   13208:	0b710000 	bleq	1c53210 <mailbuffer+0x1c18120>

	return xTicks;
   1320c:	00040000 	andeq	r0, r4, r0
   13210:	000030cd 	andeq	r3, r0, sp, asr #1
   13214:	00190104 	andseq	r0, r9, r4, lsl #2
   13218:	87010000 	strhi	r0, [r1, -r0]
   1321c:	dc00005d 	stcle	0, cr0, [r0], {93}	; 0x5d
   13220:	7c00000d 	stcvc	0, cr0, [r0], {13}
   13224:	1c0002cd 	sfmne	f0, 4, [r0], {205}	; 0xcd
}
   13228:	2600000d 	strcs	r0, [r0], -sp
   1322c:	02000061 	andeq	r0, r0, #97	; 0x61
   13230:	401b0201 	andsmi	r0, fp, r1, lsl #4
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   13234:	03000000 	movweq	r0, #0
   13238:	00002546 	andeq	r2, r0, r6, asr #10
   1323c:	2b280300 	blcs	a13e44 <mailbuffer+0x9d8d54>
   13240:	03010000 	movweq	r0, #4096	; 0x1000
   13244:	000028bb 			; <UNDEFINED> instruction: 0x000028bb
   13248:	13040002 	movwne	r0, #16386	; 0x4002
   1324c:	02000022 	andeq	r0, r0, #34	; 0x22
   13250:	00002522 	andeq	r2, r0, r2, lsr #10
   13254:	02010200 	andeq	r0, r1, #0, 4
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   13258:	00006c2b 	andeq	r6, r0, fp, lsr #24
   1325c:	259a0300 	ldrcs	r0, [sl, #768]	; 0x300
	xReturn = xTickCount;
   13260:	03000000 	movweq	r0, #0
   13264:	00002c49 	andeq	r2, r0, r9, asr #24
   13268:	22210301 	eorcs	r0, r1, #67108864	; 0x4000000
   1326c:	03020000 	movweq	r0, #8192	; 0x2000
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   13270:	0000265b 	andeq	r2, r0, fp, asr r6
   13274:	21040003 	tstcs	r4, r3
   13278:	02000024 	andeq	r0, r0, #36	; 0x24
   1327c:	00004b31 	andeq	r4, r0, r1, lsr fp
   13280:	02080500 	andeq	r0, r8, #0, 10
   13284:	0000bc34 	andeq	fp, r0, r4, lsr ip
   13288:	22760600 	rsbscs	r0, r6, #0, 12
}
   1328c:	36020000 	strcc	r0, [r2], -r0
   13290:	000000bc 	strheq	r0, [r0], -ip
   13294:	27d30600 	ldrbcs	r0, [r3, r0, lsl #12]
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   13298:	37020000 	strcc	r0, [r2, -r0]
   1329c:	000000bc 	strheq	r0, [r0], -ip
   132a0:	21f30601 	mvnscs	r0, r1, lsl #12
   132a4:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
   132a8:	000000c3 	andeq	r0, r0, r3, asr #1
   132ac:	1f0c0602 	svcne	0x000c0602
   132b0:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
   132b4:	000000c3 	andeq	r0, r0, r3, asr #1
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   132b8:	2bb30604 	blcs	fecd4ad0 <_estack+0xf6cc4ad0>
   132bc:	3a020000 	bcc	932c4 <mailbuffer+0x581d4>
   132c0:	000000c3 	andeq	r0, r0, r3, asr #1
   132c4:	01070006 	tsteq	r7, r6
   132c8:	00072a08 	andeq	r2, r7, r8, lsl #20
   132cc:	07020700 	streq	r0, [r2, -r0, lsl #14]
   132d0:	00000132 	andeq	r0, r0, r2, lsr r1
   132d4:	00220804 	eoreq	r0, r2, r4, lsl #16
   132d8:	773d0200 	ldrvc	r0, [sp, -r0, lsl #4]!
}
   132dc:	05000000 	streq	r0, [r0, #-0]
   132e0:	865c0212 			; <UNDEFINED> instruction: 0x865c0212
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   132e4:	06000001 	streq	r0, [r0], -r1
   132e8:	000029a8 	andeq	r2, r0, r8, lsr #19
   132ec:	00bc5e02 	adcseq	r5, ip, r2, lsl #28
   132f0:	06000000 	streq	r0, [r0], -r0
   132f4:	0000242b 	andeq	r2, r0, fp, lsr #8
   132f8:	00bc5f02 	adcseq	r5, ip, r2, lsl #30
   132fc:	06010000 	streq	r0, [r1], -r0
   13300:	0000228c 	andeq	r2, r0, ip, lsl #5
   13304:	00c36002 	sbceq	r6, r3, r2
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   13308:	06020000 	streq	r0, [r2], -r0
   1330c:	00002128 	andeq	r2, r0, r8, lsr #2
   13310:	00bc6102 	adcseq	r6, ip, r2, lsl #2
   13314:	06040000 	streq	r0, [r4], -r0
   13318:	000022f6 	strdeq	r2, [r0], -r6
	{
		++xTickCount;
   1331c:	00bc6202 	adcseq	r6, ip, r2, lsl #4
   13320:	06050000 	streq	r0, [r5], -r0
   13324:	0000279f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
   13328:	00bc6302 	adcseq	r6, ip, r2, lsl #6
   1332c:	06060000 	streq	r0, [r6], -r0
   13330:	000025e7 	andeq	r2, r0, r7, ror #11
   13334:	00bc6402 	adcseq	r6, ip, r2, lsl #8
		if( xTickCount == ( portTickType ) 0U )
   13338:	06070000 	streq	r0, [r7], -r0
   1333c:	00002c56 	andeq	r2, r0, r6, asr ip
   13340:	00c36602 	sbceq	r6, r3, r2, lsl #12
   13344:	06080000 	streq	r0, [r8], -r0
   13348:	00002244 	andeq	r2, r0, r4, asr #4
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   1334c:	00c36702 	sbceq	r6, r3, r2, lsl #14
   13350:	060a0000 	streq	r0, [sl], -r0
   13354:	00002135 	andeq	r2, r0, r5, lsr r1
   13358:	00c36802 	sbceq	r6, r3, r2, lsl #16
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   1335c:	060c0000 	streq	r0, [ip], -r0
   13360:	000021fa 	strdeq	r2, [r0], -sl
   13364:	00bc6902 	adcseq	r6, ip, r2, lsl #18
   13368:	060e0000 	streq	r0, [lr], -r0
   1336c:	0000233b 	andeq	r2, r0, fp, lsr r3
   13370:	00bc6a02 	adcseq	r6, ip, r2, lsl #20
			pxOverflowDelayedTaskList = pxTemp;
   13374:	060f0000 	streq	r0, [pc], -r0
   13378:	00002322 	andeq	r2, r0, r2, lsr #6
   1337c:	00bc6b02 	adcseq	r6, ip, r2, lsl #22
   13380:	06100000 	ldreq	r0, [r0], -r0
			xNumOfOverflows++;
   13384:	000028a8 	andeq	r2, r0, r8, lsr #17
   13388:	00bc6c02 	adcseq	r6, ip, r2, lsl #24
   1338c:	00110000 	andseq	r0, r1, r0
   13390:	0028c704 	eoreq	ip, r8, r4, lsl #14
   13394:	d56e0200 	strble	r0, [lr, #-512]!	; 0xfffffe00
   13398:	05000000 	streq	r0, [r0, #-0]
   1339c:	fa710209 	blx	1c53bc8 <mailbuffer+0x1c18ad8>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   133a0:	06000001 	streq	r0, [r0], -r1
   133a4:	000029a8 	andeq	r2, r0, r8, lsr #19
   133a8:	00bc7302 	adcseq	r7, ip, r2, lsl #6
   133ac:	06000000 	streq	r0, [r0], -r0
   133b0:	0000242b 	andeq	r2, r0, fp, lsr #8
   133b4:	00bc7402 	adcseq	r7, ip, r2, lsl #8
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   133b8:	06010000 	streq	r0, [r1], -r0
   133bc:	00002088 	andeq	r2, r0, r8, lsl #1
   133c0:	00c37502 	sbceq	r7, r3, r2, lsl #10
   133c4:	06020000 	streq	r0, [r2], -r0
   133c8:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   133cc:	00bc7602 	adcseq	r7, ip, r2, lsl #12
   133d0:	06040000 	streq	r0, [r4], -r0
   133d4:	00002a4f 	andeq	r2, r0, pc, asr #20
   133d8:	00bc7702 	adcseq	r7, ip, r2, lsl #14
   133dc:	06050000 	streq	r0, [r5], -r0
   133e0:	00002790 	muleq	r0, r0, r7
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   133e4:	00bc7802 	adcseq	r7, ip, r2, lsl #16
   133e8:	06060000 	streq	r0, [r6], -r0
   133ec:	0000258d 	andeq	r2, r0, sp, lsl #11
   133f0:	00bc7902 	adcseq	r7, ip, r2, lsl #18
   133f4:	06070000 	streq	r0, [r7], -r0
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   133f8:	00002ab3 			; <UNDEFINED> instruction: 0x00002ab3
   133fc:	00bc7a02 	adcseq	r7, ip, r2, lsl #20
   13400:	00080000 	andeq	r0, r8, r0
   13404:	00230604 	eoreq	r0, r3, r4, lsl #12
   13408:	917c0200 	cmnls	ip, r0, lsl #4
   1340c:	05000001 	streq	r0, [r0, #-1]
   13410:	7a7f0209 	bvc	1fd3c3c <mailbuffer+0x1f98b4c>
   13414:	06000002 	streq	r0, [r0], -r2
   13418:	000029a8 	andeq	r2, r0, r8, lsr #19
   1341c:	00bc8102 	adcseq	r8, ip, r2, lsl #2
   13420:	06000000 	streq	r0, [r0], -r0
   13424:	0000242b 	andeq	r2, r0, fp, lsr #8
   13428:	00bc8202 	adcseq	r8, ip, r2, lsl #4
   1342c:	06010000 	streq	r0, [r1], -r0
   13430:	00002017 	andeq	r2, r0, r7, lsl r0
   13434:	00bc8302 	adcseq	r8, ip, r2, lsl #6
   13438:	06020000 	streq	r0, [r2], -r0
   1343c:	00002041 	andeq	r2, r0, r1, asr #32
   13440:	00bc8402 	adcseq	r8, ip, r2, lsl #8
   13444:	06030000 	streq	r0, [r3], -r0
   13448:	00002769 	andeq	r2, r0, r9, ror #14
   1344c:	00bc8502 	adcseq	r8, ip, r2, lsl #10
   13450:	06040000 	streq	r0, [r4], -r0
   13454:	00002721 	andeq	r2, r0, r1, lsr #14
   13458:	00bc8602 	adcseq	r8, ip, r2, lsl #12
   1345c:	06050000 	streq	r0, [r5], -r0
   13460:	00001f29 	andeq	r1, r0, r9, lsr #30
   13464:	00bc8702 	adcseq	r8, ip, r2, lsl #14
   13468:	06060000 	streq	r0, [r6], -r0
   1346c:	00002895 	muleq	r0, r5, r8
   13470:	00bc8802 	adcseq	r8, ip, r2, lsl #16
   13474:	06070000 	streq	r0, [r7], -r0
   13478:	00002716 	andeq	r2, r0, r6, lsl r7
   1347c:	00bc8902 	adcseq	r8, ip, r2, lsl #18
   13480:	00080000 	andeq	r0, r8, r0
   13484:	0027e404 	eoreq	lr, r7, r4, lsl #8
   13488:	058b0200 	streq	r0, [fp, #512]	; 0x200
   1348c:	05000002 	streq	r0, [r0, #-2]
   13490:	d68e0207 	strle	r0, [lr], r7, lsl #4
   13494:	06000002 	streq	r0, [r0], -r2
   13498:	000029a8 	andeq	r2, r0, r8, lsr #19
   1349c:	00bc9002 	adcseq	r9, ip, r2
   134a0:	06000000 	streq	r0, [r0], -r0
   134a4:	0000242b 	andeq	r2, r0, fp, lsr #8
   134a8:	00bc9102 	adcseq	r9, ip, r2, lsl #2
   134ac:	06010000 	streq	r0, [r1], -r0
   134b0:	000026c9 	andeq	r2, r0, r9, asr #13
   134b4:	00bc9202 	adcseq	r9, ip, r2, lsl #4
   134b8:	06020000 	streq	r0, [r2], -r0
   134bc:	0000258d 	andeq	r2, r0, sp, lsl #11
   134c0:	00bc9302 	adcseq	r9, ip, r2, lsl #6
   134c4:	06030000 	streq	r0, [r3], -r0
   134c8:	00002960 	andeq	r2, r0, r0, ror #18
   134cc:	00c39402 	sbceq	r9, r3, r2, lsl #8
   134d0:	06040000 	streq	r0, [r4], -r0
   134d4:	00002522 	andeq	r2, r0, r2, lsr #10
   134d8:	00bc9502 	adcseq	r9, ip, r2, lsl #10
   134dc:	00060000 	andeq	r0, r6, r0
   134e0:	002bda04 	eoreq	sp, fp, r4, lsl #20
   134e4:	85970200 	ldrhi	r0, [r7, #512]	; 0x200
   134e8:	05000002 	streq	r0, [r0, #-2]
   134ec:	029c0202 	addseq	r0, ip, #536870912	; 0x20000000
   134f0:	06000003 	streq	r0, [r0], -r3
   134f4:	000029a8 	andeq	r2, r0, r8, lsr #19
   134f8:	00bc9e02 	adcseq	r9, ip, r2, lsl #28
   134fc:	06000000 	streq	r0, [r0], -r0
   13500:	0000242b 	andeq	r2, r0, fp, lsr #8
   13504:	00bc9f02 	adcseq	r9, ip, r2, lsl #30
   13508:	00010000 	andeq	r0, r1, r0
   1350c:	9a020908 	bls	95934 <mailbuffer+0x5a844>
   13510:	00000337 	andeq	r0, r0, r7, lsr r3
   13514:	003c0209 	eorseq	r0, ip, r9, lsl #4
   13518:	e1a10200 			; <UNDEFINED> instruction: 0xe1a10200
   1351c:	09000002 	stmdbeq	r0, {r1}
   13520:	00002791 	muleq	r0, r1, r7
   13524:	01faa302 	mvnseq	sl, r2, lsl #6
   13528:	4c090000 	stcmi	0, cr0, [r9], {-0}
	}
	else
	{
		++uxMissedTicks;
   1352c:	0200003c 	andeq	r0, r0, #60	; 0x3c
   13530:	00027aa4 	andeq	r7, r2, r4, lsr #21
   13534:	25840900 	strcs	r0, [r4, #2304]	; 0x900
   13538:	a5020000 	strge	r0, [r2, #-0]
   1353c:	000002d6 	ldrdeq	r0, [r0], -r6
   13540:	26fc0400 	ldrbtcs	r0, [ip], r0, lsl #8
   13544:	a7020000 	strge	r0, [r2, -r0]
   13548:	00000302 	andeq	r0, r0, r2, lsl #6
   1354c:	0024660a 	eoreq	r6, r4, sl, lsl #12
   13550:	a9020200 	stmdbge	r2, {r9}
   13554:	00000373 	andeq	r0, r0, r3, ror r3
   13558:	0029a806 	eoreq	sl, r9, r6, lsl #16
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   1355c:	bcab0200 	sfmlt	f0, 4, [fp]
   13560:	00000000 	andeq	r0, r0, r0
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   13564:	00242b06 	eoreq	r2, r4, r6, lsl #22
   13568:	bcac0200 	sfmlt	f0, 4, [ip]
   1356c:	01000000 	mrseq	r0, (UNDEF: 0)
   13570:	00207406 	eoreq	r7, r0, r6, lsl #8
   13574:	73ad0200 			; <UNDEFINED> instruction: 0x73ad0200
   13578:	02000003 	andeq	r0, r0, #3
   1357c:	00c30b00 	sbceq	r0, r3, r0, lsl #22
   13580:	03820000 	orreq	r0, r2, #0
   13584:	820c0000 	andhi	r0, ip, #0
   13588:	00000003 	andeq	r0, r0, r3
   1358c:	d4070407 	strle	r0, [r7], #-1031	; 0xfffffbf9
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   13590:	04000001 	streq	r0, [r0], #-1
   13594:	00002466 	andeq	r2, r0, r6, ror #8
   13598:	0342af02 	movteq	sl, #12034	; 0x2f02
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   1359c:	040d0000 	streq	r0, [sp], #-0
   135a0:	0038750e 	eorseq	r7, r8, lr, lsl #10
   135a4:	00bc1703 	adcseq	r1, ip, r3, lsl #14
   135a8:	750e0000 	strvc	r0, [lr, #-0]
   135ac:	03003631 	movweq	r3, #1585	; 0x631
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   135b0:	0000c318 	andeq	ip, r0, r8, lsl r3
   135b4:	33750e00 	cmncc	r5, #0, 28
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   135b8:	19030032 	stmdbne	r3, {r1, r4, r5}
			xTCB->pxTaskTag = pxHookFunction;
   135bc:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
   135c0:	1d070407 	cfstrsne	mvf0, [r7, #-28]	; 0xffffffe4
   135c4:	07000007 	streq	r0, [r0, -r7]
		taskEXIT_CRITICAL();
   135c8:	07130708 	ldreq	r0, [r3, -r8, lsl #14]
   135cc:	01070000 	mrseq	r0, (UNDEF: 7)
   135d0:	00073306 	andeq	r3, r7, r6, lsl #6
   135d4:	05020700 	streq	r0, [r2, #-1792]	; 0xfffff900
   135d8:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
   135dc:	6905040f 	stmdbvs	r5, {r0, r1, r2, r3, sl}
	}
   135e0:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
   135e4:	00002930 	andeq	r2, r0, r0, lsr r9
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   135e8:	03d22003 	bicseq	r2, r2, #3
   135ec:	1f040000 	svcne	0x00040000
   135f0:	03000008 	movweq	r0, #8
   135f4:	0003ef24 	andeq	lr, r3, r4, lsr #30
   135f8:	07040700 	streq	r0, [r4, -r0, lsl #14]
   135fc:	00000718 	andeq	r0, r0, r8, lsl r7
   13600:	98050407 	stmdals	r5, {r0, r1, r2, sl}
   13604:	0a000007 	beq	13628 <xTaskGetApplicationTaskTag+0x40>
   13608:	00002631 	andeq	r2, r0, r1, lsr r6
   1360c:	2e1f040c 	cfmulscs	mvf0, mvf15, mvf12
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   13610:	06000004 	streq	r0, [r0], -r4
   13614:	00002651 	andeq	r2, r0, r1, asr r6
   13618:	042e2104 	strteq	r2, [lr], #-260	; 0xfffffefc
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   1361c:	06000000 	streq	r0, [r0], -r0
   13620:	00002bf1 	strdeq	r2, [r0], -r1
   13624:	03b62204 			; <UNDEFINED> instruction: 0x03b62204
   13628:	06040000 	streq	r0, [r4], -r0
   1362c:	00002485 	andeq	r2, r0, r5, lsl #9
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   13630:	042e2304 	strteq	r2, [lr], #-772	; 0xfffffcfc
   13634:	00080000 	andeq	r0, r8, r0
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   13638:	03c40410 	biceq	r0, r4, #16, 8	; 0x10000000
			xReturn = xTCB->pxTaskTag;
   1363c:	31040000 	mrscc	r0, (UNDEF: 4)
   13640:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
   13644:	0003fd25 	andeq	pc, r3, r5, lsr #26
		taskEXIT_CRITICAL();
   13648:	253b0a00 	ldrcs	r0, [fp, #-2560]!	; 0xfffff600

		return xReturn;
   1364c:	050c0000 	streq	r0, [ip, #-0]
   13650:	00047021 	andeq	r7, r4, r1, lsr #32
   13654:	20e00600 	rsccs	r0, r0, r0, lsl #12
   13658:	23050000 	movwcs	r0, #20480	; 0x5000
   1365c:	0000050d 	andeq	r0, r0, sp, lsl #10
   13660:	2c3c0600 	ldccs	6, cr0, [ip], #-0
   13664:	25050000 	strcs	r0, [r5, #-0]
	}
   13668:	00000513 	andeq	r0, r0, r3, lsl r5
   1366c:	2a950604 	bcs	fe554e84 <_estack+0xf6544e84>
   13670:	27050000 	strcs	r0, [r5, -r0]
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   13674:	00000519 	andeq	r0, r0, r9, lsl r5
   13678:	d10a0008 	tstle	sl, r8
   1367c:	3800002a 	stmdacc	r0, {r1, r3, r5}
   13680:	050d2d06 	streq	r2, [sp, #-3334]	; 0xfffff2fa
   13684:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
   13688:	0600005a 			; <UNDEFINED> instruction: 0x0600005a
   1368c:	0005a42f 	andeq	sl, r5, pc, lsr #8
   13690:	43060000 	movwmi	r0, #24576	; 0x6000
   13694:	06000024 	streq	r0, [r0], -r4, lsr #32
   13698:	0005f331 	andeq	pc, r5, r1, lsr r3	; <UNPREDICTABLE>
   1369c:	7c060400 	cfstrsvc	mvf0, [r6], {-0}
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   136a0:	06000020 	streq	r0, [r0], -r0, lsr #32
   136a4:	00039633 	andeq	r9, r3, r3, lsr r6
   136a8:	3b060800 	blcc	1956b0 <mailbuffer+0x15a5c0>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   136ac:	06000024 	streq	r0, [r0], -r4, lsr #32
   136b0:	00006c34 	andeq	r6, r0, r4, lsr ip
   136b4:	93060900 	movwls	r0, #26880	; 0x6900
   136b8:	06000022 	streq	r0, [r0], -r2, lsr #32
   136bc:	00065a35 	andeq	r5, r6, r5, lsr sl
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   136c0:	7a060c00 	bvc	1966c8 <mailbuffer+0x15b5d8>
   136c4:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
		}

		if( xTCB->pxTaskTag != NULL )
   136c8:	00039637 	andeq	r9, r3, r7, lsr r6
   136cc:	a9061000 	stmdbge	r6, {ip}
   136d0:	06000026 	streq	r0, [r0], -r6, lsr #32
   136d4:	00039638 	andeq	r9, r3, r8, lsr r6
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   136d8:	6f061100 	svcvs	0x00061100
   136dc:	06000029 	streq	r0, [r0], -r9, lsr #32
   136e0:	0006603a 	andeq	r6, r6, sl, lsr r0
   136e4:	b2061400 	andlt	r1, r6, #0, 8
   136e8:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
   136ec:	0006663b 	andeq	r6, r6, fp, lsr r6
		}
		else
		{
			xReturn = pdFAIL;
   136f0:	fc061800 	stc2	8, cr1, [r6], {-0}
   136f4:	06000027 	streq	r0, [r0], -r7, lsr #32
		}

		return xReturn;
   136f8:	00066c3d 	andeq	r6, r6, sp, lsr ip
   136fc:	34061c00 	strcc	r1, [r6], #-3072	; 0xfffff400
   13700:	0600002b 	streq	r0, [r0], -fp, lsr #32
   13704:	00051f3f 	andeq	r1, r5, pc, lsr pc
   13708:	78062000 	stmdavc	r6, {sp}
   1370c:	06000021 	streq	r0, [r0], -r1, lsr #32
   13710:	00051f40 	andeq	r1, r5, r0, asr #30
	}
   13714:	10002c00 	andne	r2, r0, r0, lsl #24
   13718:	00047004 	andeq	r7, r4, r4
   1371c:	89041000 	stmdbhi	r4, {ip}

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   13720:	10000003 	andne	r0, r0, r3
   13724:	00043404 	andeq	r3, r4, r4, lsl #8
   13728:	253b0400 	ldrcs	r0, [fp, #-1024]!	; 0xfffffc00
   1372c:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
   13730:	0000043f 	andeq	r0, r0, pc, lsr r4
   13734:	0025520a 	eoreq	r5, r5, sl, lsl #4
   13738:	1e071800 	cdpne	8, 0, cr1, cr7, cr0, {0}
   1373c:	0000057f 	andeq	r0, r0, pc, ror r5
   13740:	00265106 	eoreq	r5, r6, r6, lsl #2
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   13744:	7f200700 	svcvc	0x00200700
   13748:	00000005 	andeq	r0, r0, r5
   1374c:	002c0c06 	eoreq	r0, ip, r6, lsl #24
   13750:	b6210700 	strtlt	r0, [r1], -r0, lsl #14
   13754:	04000003 	streq	r0, [r0], #-3
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   13758:	00268a06 	eoreq	r8, r6, r6, lsl #20
   1375c:	d9220700 	stmdble	r2!, {r8, r9, sl}
   13760:	08000003 	stmdaeq	r0, {r0, r1}
   13764:	00216906 	eoreq	r6, r1, r6, lsl #18
   13768:	7f230700 	svcvc	0x00230700

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   1376c:	0c000005 	stceq	0, cr0, [r0], {5}
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
   13770:	00277d06 	eoreq	r7, r7, r6, lsl #26
   13774:	7f240700 	svcvc	0x00240700
   13778:	10000005 	andne	r0, r0, r5
   1377c:	002bbb06 	eoreq	fp, fp, r6, lsl #22
   13780:	7f250700 	svcvc	0x00250700
   13784:	14000005 	strne	r0, [r0], #-5
   13788:	85041000 	strhi	r1, [r4, #-0]

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   1378c:	11000005 	tstne	r0, r5
   13790:	00000337 	andeq	r0, r0, r7, lsr r3
   13794:	00255204 	eoreq	r5, r5, r4, lsl #4
   13798:	2a270700 	bcs	9d53a0 <mailbuffer+0x99a2b0>
   1379c:	12000005 	andne	r0, r0, #5
   137a0:	000003d9 	ldrdeq	r0, [r0], -r9
   137a4:	000005a4 	andeq	r0, r0, r4, lsr #11
   137a8:	00050d13 	andeq	r0, r5, r3, lsl sp
   137ac:	04100000 	ldreq	r0, [r0], #-0
   137b0:	00000595 	muleq	r0, r5, r5
   137b4:	0028760a 	eoreq	r7, r8, sl, lsl #12

#if (configBLUETHUNDER == 1)
		pxCurrentTCB->pTraceEvent = pTraceEvent;	// Save Trace event pointer state to TCB.
#endif

		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   137b8:	26085400 	strcs	r5, [r8], -r0, lsl #8
   137bc:	000005f3 	strdeq	r0, [r0], -r3
   137c0:	00273d06 	eoreq	r3, r7, r6, lsl #26
   137c4:	b6280800 	strtlt	r0, [r8], -r0, lsl #16
   137c8:	00000003 	andeq	r0, r0, r3
   137cc:	001f3c06 	andseq	r3, pc, r6, lsl #24
   137d0:	6e290800 	cdpvs	8, 2, cr0, cr9, cr0, {0}
   137d4:	04000009 	streq	r0, [r0], #-9
   137d8:	0025da06 	eoreq	sp, r5, r6, lsl #20
   137dc:	732b0800 	teqvc	fp, #0, 16
   137e0:	08000009 	stmdaeq	r0, {r0, r3}
   137e4:	00270b06 	eoreq	r0, r7, r6, lsl #22
   137e8:	892d0800 	stmfdhi	sp!, {fp}
   137ec:	48000009 	stmdami	r0, {r0, r3}
   137f0:	002b4906 	eoreq	r4, fp, r6, lsl #18
   137f4:	9b2f0800 	blls	bd57fc <mailbuffer+0xb9a70c>
   137f8:	4c000007 	stcmi	0, cr0, [r0], {7}
   137fc:	aa041000 	bge	117804 <mailbuffer+0xdc714>
   13800:	0a000005 	beq	1381c <vTaskSwitchContext+0xfc>
   13804:	00002580 	andeq	r2, r0, r0, lsl #11
   13808:	5a280918 	bpl	a15c70 <mailbuffer+0x9dab80>
   1380c:	06000006 	streq	r0, [r0], -r6
   13810:	000020e0 	andeq	r2, r0, r0, ror #1
   13814:	06a92a09 	strteq	r2, [r9], r9, lsl #20
   13818:	06000000 	streq	r0, [r0], -r0
   1381c:	00001fe8 	andeq	r1, r0, r8, ror #31
   13820:	03962b09 	orrseq	r2, r6, #9216	; 0x2400
   13824:	06040000 	streq	r0, [r4], -r0
   13828:	00002149 	andeq	r2, r0, r9, asr #2
   1382c:	069e2c09 	ldreq	r2, [lr], r9, lsl #24
   13830:	06050000 	streq	r0, [r5], -r0
   13834:	0000266b 	andeq	r2, r0, fp, ror #12
   13838:	03d92d09 	bicseq	r2, r9, #576	; 0x240
   1383c:	06080000 	streq	r0, [r8], -r0
   13840:	000021d4 	ldrdeq	r2, [r0], -r4
   13844:	03ab2e09 			; <UNDEFINED> instruction: 0x03ab2e09
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   13848:	060c0000 	streq	r0, [ip], -r0
   1384c:	00002857 	andeq	r2, r0, r7, asr r8
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   13850:	03b62f09 			; <UNDEFINED> instruction: 0x03b62f09
   13854:	06100000 	ldreq	r0, [r0], -r0
   13858:	000022d7 	ldrdeq	r2, [r0], -r7
   1385c:	00403009 	subeq	r3, r0, r9
   13860:	00140000 	andseq	r0, r4, r0
   13864:	05f90410 	ldrbeq	r0, [r9, #1040]!	; 0x410
   13868:	04100000 	ldreq	r0, [r0], #-0
   1386c:	00000186 	andeq	r0, r0, r6, lsl #3
   13870:	01fa0410 	mvnseq	r0, r0, lsl r4
   13874:	04100000 	ldreq	r0, [r0], #-0
   13878:	0000058a 	andeq	r0, r0, sl, lsl #11
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   1387c:	002ad104 	eoreq	sp, sl, r4, lsl #2
   13880:	70420600 	subvc	r0, r2, r0, lsl #12
   13884:	02000004 	andeq	r0, r0, #4
   13888:	9e200901 	cdpls	9, 2, cr0, cr0, cr1, {0}
   1388c:	03000006 	movweq	r0, #6
   13890:	00002a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
   13894:	1fc00300 	svcne	0x00c00300

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   13898:	03010000 	movweq	r0, #4096	; 0x1000
   1389c:	0000222e 	andeq	r2, r0, lr, lsr #4
   138a0:	25c20302 	strbcs	r0, [r2, #770]	; 0x302
   138a4:	00030000 	andeq	r0, r3, r0
   138a8:	002afd04 	eoreq	pc, sl, r4, lsl #26
   138ac:	7d260900 	stcvc	9, cr0, [r6, #-0]


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   138b0:	10000006 	andne	r0, r0, r6
   138b4:	00067204 	andeq	r7, r6, r4, lsl #4
   138b8:	25800400 	strcs	r0, [r0, #1024]	; 0x400
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   138bc:	32090000 	andcc	r0, r9, #0
   138c0:	000005f9 	strdeq	r0, [r0], -r9
   138c4:	00269304 	eoreq	r9, r6, r4, lsl #6
   138c8:	c5210a00 	strgt	r0, [r1, #-2560]!	; 0xfffff600
   138cc:	14000006 	strne	r0, [r0], #-6
   138d0:	000006da 	ldrdeq	r0, [r0], -sl
   138d4:	0006da13 	andeq	sp, r6, r3, lsl sl
   138d8:	03941300 	orrseq	r1, r4, #0, 6
   138dc:	94130000 	ldrls	r0, [r3], #-0
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   138e0:	00000003 	andeq	r0, r0, r3
   138e4:	06e00410 	usateq	r0, #0, r0, lsl #8
   138e8:	070a0000 	streq	r0, [sl, -r0]
   138ec:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
   138f0:	0759230a 	ldrbeq	r2, [r9, -sl, lsl #6]
   138f4:	7d060000 	stcvc	0, cr0, [r6, #-0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   138f8:	0a000029 	beq	139a4 <xTaskRemoveFromEventList+0x88>
   138fc:	00075925 	andeq	r5, r7, r5, lsr #18
   13900:	44060000 	strmi	r0, [r6], #-0
   13904:	0a000028 	beq	139ac <xTaskRemoveFromEventList+0x90>
   13908:	00075f27 	andeq	r5, r7, r7, lsr #30
   1390c:	51060400 	tstpl	r6, r0, lsl #8
   13910:	0a000026 	beq	139b0 <xTaskRemoveFromEventList+0x94>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   13914:	00039428 	andeq	r9, r3, r8, lsr #8
   13918:	0c060800 	stceq	8, cr0, [r6], {-0}

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   1391c:	0a00002c 	beq	139d4 <xTaskRemoveFromEventList+0xb8>
   13920:	0003ab29 	andeq	sl, r3, r9, lsr #22
   13924:	3f060c00 	svccc	0x00060c00
   13928:	0a000021 	beq	139b4 <xTaskRemoveFromEventList+0x98>
   1392c:	0003d22b 	andeq	sp, r3, fp, lsr #4
   13930:	eb061000 	bl	197938 <mailbuffer+0x15c848>
   13934:	0a000029 	beq	139e0 <xTaskRemoveFromEventList+0xc4>
   13938:	0003ab2c 	andeq	sl, r3, ip, lsr #22
   1393c:	ba061400 	blt	198944 <mailbuffer+0x15d854>
   13940:	0a000023 	beq	139d4 <xTaskRemoveFromEventList+0xb8>
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   13944:	0007652e 	andeq	r6, r7, lr, lsr #10
   13948:	59061800 	stmdbpl	r6, {fp, ip}
   1394c:	0a000023 	beq	139e0 <xTaskRemoveFromEventList+0xc4>
   13950:	0003942f 	andeq	r9, r3, pc, lsr #8
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   13954:	13061c00 	movwne	r1, #27648	; 0x6c00
   13958:	0a00002b 	beq	13a0c <xTaskRemoveFromEventList+0xf0>
   1395c:	00039430 	andeq	r9, r3, r0, lsr r4
   13960:	10002000 	andne	r2, r0, r0

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   13964:	0006af04 	andeq	sl, r6, r4, lsl #30
   13968:	ca041000 	bgt	117970 <mailbuffer+0xdc880>
   1396c:	10000000 	andne	r0, r0, r0
   13970:	0006ba04 	andeq	fp, r6, r4, lsl #20
   13974:	29070400 	stmdbcs	r7, {sl}
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   13978:	320a0000 	andcc	r0, sl, #0
   1397c:	000006e0 	andeq	r0, r0, r0, ror #13
   13980:	0027490a 	eoreq	r4, r7, sl, lsl #18
   13984:	200b0800 	andcs	r0, fp, r0, lsl #16
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   13988:	0000079b 	muleq	r0, fp, r7
   1398c:	00244306 	eoreq	r4, r4, r6, lsl #6
   13990:	f3220b00 	vqrdmulh.s32	d0, d2, d0
   13994:	00000005 	andeq	r0, r0, r5
   13998:	0020e006 	eoreq	lr, r0, r6
   1399c:	a9240b00 	stmdbge	r4!, {r8, r9, fp}
   139a0:	04000006 	streq	r0, [r0], #-6
   139a4:	27490400 	strbcs	r0, [r9, -r0, lsl #8]
   139a8:	260b0000 	strcs	r0, [fp], -r0
   139ac:	00000776 	andeq	r0, r0, r6, ror r7
   139b0:	00250d0a 	eoreq	r0, r5, sl, lsl #26
   139b4:	1d0c1800 	stcne	8, cr1, [ip, #-0]
   139b8:	000007fb 	strdeq	r0, [r0], -fp
   139bc:	0039ce06 	eorseq	ip, r9, r6, lsl #28
   139c0:	0c1f0c00 	ldceq	12, cr0, [pc], {-0}
   139c4:	00000008 	andeq	r0, r0, r8
   139c8:	00508606 	subseq	r8, r0, r6, lsl #12
   139cc:	0c210c00 	stceq	12, cr0, [r1], #-0
   139d0:	04000008 	streq	r0, [r0], #-8
   139d4:	00504706 	subseq	r4, r0, r6, lsl #14
   139d8:	21220c00 	teqcs	r2, r0, lsl #24
   139dc:	08000008 	stmdaeq	r0, {r3}
   139e0:	0036f406 	eorseq	pc, r6, r6, lsl #8
   139e4:	37230c00 	strcc	r0, [r3, -r0, lsl #24]!
   139e8:	0c000008 	stceq	0, cr0, [r0], {8}
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   139ec:	004fe906 	subeq	lr, pc, r6, lsl #18
   139f0:	0c250c00 	stceq	12, cr0, [r5], #-0
   139f4:	10000008 	andne	r0, r0, r8
   139f8:	004fc006 	subeq	ip, pc, r6
   139fc:	21270c00 	teqcs	r7, r0, lsl #24
   13a00:	14000008 	strne	r0, [r0], #-8
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   13a04:	08061400 	stmdaeq	r6, {sl, ip}
   13a08:	06130000 	ldreq	r0, [r3], -r0
   13a0c:	00000008 	andeq	r0, r0, r8
   13a10:	07a60410 			; <UNDEFINED> instruction: 0x07a60410
   13a14:	04100000 	ldreq	r0, [r0], #-0
   13a18:	000007fb 	strdeq	r0, [r0], -fp
   13a1c:	0003d912 	andeq	sp, r3, r2, lsl r9
   13a20:	00082100 	andeq	r2, r8, r0, lsl #2
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   13a24:	08061300 	stmdaeq	r6, {r8, r9, ip}
   13a28:	10000000 	andne	r0, r0, r0
   13a2c:	00081204 	andeq	r1, r8, r4, lsl #4
	}
	else
	{
		xReturn = pdFALSE;
   13a30:	08371400 	ldmdaeq	r7!, {sl, ip}
   13a34:	06130000 	ldreq	r0, [r3], -r0
	}

	return xReturn;
   13a38:	13000008 	movwne	r0, #8
   13a3c:	000003ab 	andeq	r0, r0, fp, lsr #7
   13a40:	27041000 	strcs	r1, [r4, -r0]
   13a44:	04000008 	streq	r0, [r0], #-8
   13a48:	0000250d 	andeq	r2, r0, sp, lsl #10
   13a4c:	07a6290c 	streq	r2, [r6, ip, lsl #18]!
   13a50:	a00a0000 	andge	r0, sl, r0
}
   13a54:	54000022 	strpl	r0, [r0], #-34	; 0xffffffde
   13a58:	0951220d 	ldmdbeq	r1, {r0, r2, r3, r9, sp}^
   13a5c:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   13a60:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
   13a64:	0003b624 	andeq	fp, r3, r4, lsr #12
   13a68:	2a060000 	bcs	193a70 <mailbuffer+0x158980>
   13a6c:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
   13a70:	00095125 	andeq	r5, r9, r5, lsr #2
   13a74:	bb060400 	bllt	194a7c <mailbuffer+0x15998c>
   13a78:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
   13a7c:	0003d926 	andeq	sp, r3, r6, lsr #18
   13a80:	67060800 	strvs	r0, [r6, -r0, lsl #16]
   13a84:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   13a88:	0003d927 	andeq	sp, r3, r7, lsr #18
   13a8c:	bd060c00 	stclt	12, cr0, [r6, #-0]
   13a90:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
   13a94:	0003d929 	andeq	sp, r3, r9, lsr #18
   13a98:	17061000 	strne	r1, [r6, -r0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   13a9c:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
   13aa0:	0003d92a 	andeq	sp, r3, sl, lsr #18
   13aa4:	e0061400 	and	r1, r6, r0, lsl #8
   13aa8:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
   13aac:	0006a92c 	andeq	sl, r6, ip, lsr #18
   13ab0:	7d061800 	stcvc	8, cr1, [r6, #-0]
   13ab4:	0d000029 	stceq	0, cr0, [r0, #-164]	; 0xffffff5c
   13ab8:	0007592d 	andeq	r5, r7, sp, lsr #18
   13abc:	3b061c00 	blcc	19aac4 <mailbuffer+0x15f9d4>
   13ac0:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
}
   13ac4:	00006c2e 	andeq	r6, r0, lr, lsr #24
   13ac8:	d4062000 	strle	r2, [r6], #-0
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   13acc:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
   13ad0:	0003ab2f 	andeq	sl, r3, pc, lsr #22
   13ad4:	9c062400 	cfstrsls	mvf2, [r6], {-0}
   13ad8:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
   13adc:	0003ab31 	andeq	sl, r3, r1, lsr fp
   13ae0:	b0062800 	andlt	r2, r6, r0, lsl #16
   13ae4:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
   13ae8:	0003b632 	andeq	fp, r3, r2, lsr r6
   13aec:	95062c00 	strls	r2, [r6, #-3072]	; 0xfffff400
   13af0:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
   13af4:	0003ab33 	andeq	sl, r3, r3, lsr fp
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   13af8:	ea063000 	b	19fb00 <mailbuffer+0x164a10>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   13afc:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
   13b00:	0003b634 	andeq	fp, r3, r4, lsr r6
   13b04:	39063400 	stmdbcc	r6, {sl, ip, sp}
   13b08:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
			{
				xReturn = pdFALSE;
   13b0c:	0003ab35 	andeq	sl, r3, r5, lsr fp
   13b10:	8c063800 	stchi	8, cr3, [r6], {-0}
   13b14:	0d000028 	stceq	0, cr0, [r0, #-160]	; 0xffffff60
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   13b18:	0003b637 	andeq	fp, r3, r7, lsr r6
   13b1c:	31063c00 	tstcc	r6, r0, lsl #24
   13b20:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
   13b24:	0003b638 	andeq	fp, r3, r8, lsr r6
   13b28:	2f064000 	svccs	0x00064000
   13b2c:	0d000028 	stceq	0, cr0, [r0, #-160]	; 0xffffff60
   13b30:	0003ab39 	andeq	sl, r3, r9, lsr fp
   13b34:	dc064400 	cfstrsle	mvf4, [r6], {-0}
   13b38:	0d00002a 	stceq	0, cr0, [r0, #-168]	; 0xffffff58
   13b3c:	0009573b 	andeq	r5, r9, fp, lsr r7
   13b40:	a7064800 	strge	r4, [r6, -r0, lsl #16]
   13b44:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
   13b48:	0003943c 	andeq	r9, r3, ip, lsr r4
   13b4c:	a0064c00 	andge	r4, r6, r0, lsl #24
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   13b50:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
   13b54:	00095d3e 	andeq	r5, r9, lr, lsr sp
   13b58:	10005000 	andne	r5, r0, r0
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   13b5c:	00076b04 	andeq	r6, r7, r4, lsl #22
   13b60:	ab041000 	blge	117b68 <mailbuffer+0xdca78>
   13b64:	10000003 	andne	r0, r0, r3
   13b68:	00083d04 	andeq	r3, r8, r4, lsl #26
   13b6c:	22a00400 	adccs	r0, r0, #0, 8
   13b70:	400d0000 	andmi	r0, sp, r0
   13b74:	00000848 	andeq	r0, r0, r8, asr #16
   13b78:	0003b615 	andeq	fp, r3, r5, lsl r6
   13b7c:	09830b00 	stmibeq	r3, {r8, r9, fp}
   13b80:	09830000 	stmibeq	r3, {}	; <UNPREDICTABLE>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   13b84:	82160000 	andshi	r0, r6, #0
   13b88:	0f000003 	svceq	0x00000003
   13b8c:	63041000 	movwvs	r1, #16384	; 0x4000
   13b90:	15000009 	strne	r0, [r0, #-9]
   13b94:	000003d9 	ldrdeq	r0, [r0], -r9
   13b98:	00253c17 	eoreq	r3, r5, r7, lsl ip
   13b9c:	7c1f0100 	ldfvcs	f0, [pc], {-0}
   13ba0:	fc0002cd 	stc2	2, cr0, [r0], {205}	; 0xcd
   13ba4:	01000000 	mrseq	r0, (UNDEF: 0)
   13ba8:	0009c09c 	muleq	r9, ip, r0
   13bac:	43af1800 			; <UNDEFINED> instruction: 0x43af1800
			vTaskSetTimeOutState( pxTimeOut );
   13bb0:	1f010000 	svcne	0x00010000
   13bb4:	000009c0 	andeq	r0, r0, r0, asr #19
			xReturn = pdFALSE;
   13bb8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
   13bbc:	000020e2 	andeq	r2, r0, r2, ror #1
   13bc0:	050d1f01 	streq	r1, [sp, #-3841]	; 0xfffff0ff
		}
		else
		{
			xReturn = pdTRUE;
   13bc4:	91020000 	mrsls	r0, (UNDEF: 2)
   13bc8:	04100068 	ldreq	r0, [r0], #-104	; 0xffffff98
		}
	}
	taskEXIT_CRITICAL();
   13bcc:	0000051f 	andeq	r0, r0, pc, lsl r5

	return xReturn;
   13bd0:	005d1117 	subseq	r1, sp, r7, lsl r1
   13bd4:	782d0100 	stmdavc	sp!, {r8}
   13bd8:	c40002ce 	strgt	r0, [r0], #-718	; 0xfffffd32
   13bdc:	01000001 	tsteq	r0, r1
   13be0:	0009f89c 	muleq	r9, ip, r8
   13be4:	43af1800 			; <UNDEFINED> instruction: 0x43af1800
   13be8:	2d010000 	stccs	0, cr0, [r1, #-0]
}
   13bec:	000009c0 	andeq	r0, r0, r0, asr #19
   13bf0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
   13bf4:	00003e8e 	andeq	r3, r0, lr, lsl #29
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   13bf8:	09c02d01 	stmibeq	r0, {r0, r8, sl, fp, sp}^
   13bfc:	91020000 	mrsls	r0, (UNDEF: 2)
   13c00:	1f170068 	svcne	0x00170068
   13c04:	0100005d 	qaddeq	r0, sp, r0
   13c08:	02d03c41 	sbcseq	r3, r0, #16640	; 0x4100
   13c0c:	0000f400 	andeq	pc, r0, r0, lsl #8
   13c10:	1c9c0100 	ldfnes	f0, [ip], {0}
   13c14:	1800000a 	stmdane	r0, {r1, r3}
	xMissedYield = pdTRUE;
   13c18:	000043af 	andeq	r4, r0, pc, lsr #7
   13c1c:	09c04101 	stmibeq	r0, {r0, r8, lr}^
   13c20:	91020000 	mrsls	r0, (UNDEF: 2)
   13c24:	4119006c 	tstmi	r9, ip, rrx
   13c28:	0100005d 	qaddeq	r0, sp, r0
   13c2c:	0003d953 	andeq	sp, r3, r3, asr r9
   13c30:	02d13000 	sbcseq	r3, r1, #0
   13c34:	00056c00 	andeq	r6, r5, r0, lsl #24
   13c38:	bc9c0100 	ldflts	f0, [ip], {0}
}
   13c3c:	1800000a 	stmdane	r0, {r1, r3}
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   13c40:	000043af 	andeq	r4, r0, pc, lsr #7
   13c44:	09c05301 	stmibeq	r0, {r0, r8, r9, ip, lr}^
   13c48:	91030000 	mrsls	r0, (UNDEF: 3)
   13c4c:	79187fbc 	ldmdbvc	r8, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
   13c50:	0100005d 	qaddeq	r0, sp, r0
   13c54:	00039653 	andeq	r9, r3, r3, asr r6
   13c58:	bb910300 	bllt	fe454860 <_estack+0xf6444860>
   13c5c:	3d81187f 	stccc	8, cr1, [r1, #508]	; 0x1fc
   13c60:	53010000 	movwpl	r0, #4096	; 0x1000
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   13c64:	000003a0 	andeq	r0, r0, r0, lsr #7

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   13c68:	7fb89103 	svcvc	0x00b89103
   13c6c:	005d5c1a 	subseq	r5, sp, sl, lsl ip
   13c70:	96690100 	strbtls	r0, [r9], -r0, lsl #2
   13c74:	02000003 	andeq	r0, r0, #3
   13c78:	0e1a5191 	mrceq	1, 0, r5, cr10, cr1, {4}
			{
				taskYIELD();
   13c7c:	0100004c 	tsteq	r0, ip, asr #32
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
   13c80:	0003e48b 	andeq	lr, r3, fp, lsl #9
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   13c84:	4c910200 	lfmmi	f0, 4, [r1], {0}
   13c88:	000c911a 	andeq	r9, ip, sl, lsl r1
   13c8c:	bc8e0100 	stflts	f0, [lr], {0}
   13c90:	0300000a 	movweq	r0, #10
   13c94:	1b064491 	blne	1a4ee0 <mailbuffer+0x169df0>
   13c98:	0002d530 	andeq	sp, r2, r0, lsr r5
   13c9c:	0000008c 	andeq	r0, r0, ip, lsl #1
   13ca0:	0100691c 	tsteq	r0, ip, lsl r9
   13ca4:	0003b690 	muleq	r3, r0, r6
   13ca8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
   13cac:	02d53c1b 	sbcseq	r3, r5, #6912	; 0x1b00
   13cb0:	00006400 	andeq	r6, r0, r0, lsl #8
   13cb4:	5d651a00 	vstmdbpl	r5!, {s3-s2}
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   13cb8:	92010000 	andls	r0, r1, #0
   13cbc:	000003a0 	andeq	r0, r0, r0, lsr #7
   13cc0:	00529102 	subseq	r9, r2, r2, lsl #2
   13cc4:	c40b0000 	strgt	r0, [fp], #-0
   13cc8:	cf000003 	svcgt	0x00000003
   13ccc:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   13cd0:	00000382 	andeq	r0, r0, r2, lsl #7
   13cd4:	06489103 	strbeq	r9, [r8], -r3, lsl #2
   13cd8:	5de41900 	stclpl	9, cr1, [r4]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   13cdc:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
   13ce0:	00000af7 	strdeq	r0, [r0], -r7
   13ce4:	0002d69c 	muleq	r2, ip, r6
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   13ce8:	00000084 	andeq	r0, r0, r4, lsl #1
   13cec:	0af79c01 	beq	ffdfacf8 <_estack+0xf7deacf8>
	}

	pxTCB->uxPriority = uxPriority;
   13cf0:	af180000 	svcge	0x00180000
   13cf4:	01000043 	tsteq	r0, r3, asr #32
   13cf8:	0009c0a8 	andeq	ip, r9, r8, lsr #1
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   13cfc:	6c910200 	lfmvs	f0, 4, [r1], {0}
   13d00:	fd041000 	stc2	0, cr1, [r4, #-0]
   13d04:	1100000a 	tstne	r0, sl
   13d08:	000003c4 	andeq	r0, r0, r4, asr #7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   13d0c:	005d2a1e 	subseq	r2, sp, lr, lsl sl
   13d10:	a0ae0100 	adcge	r0, lr, r0, lsl #2
   13d14:	20000003 	andcs	r0, r0, r3
   13d18:	780002d7 	stmdavc	r0, {r0, r1, r2, r4, r6, r7, r9}

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   13d1c:	01000003 	tsteq	r0, r3
   13d20:	43af189c 			; <UNDEFINED> instruction: 0x43af189c
   13d24:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   13d28:	000009c0 	andeq	r0, r0, r0, asr #19
   13d2c:	1a549102 	bne	153813c <mailbuffer+0x14fd04c>
   13d30:	00005d6c 	andeq	r5, r0, ip, ror #26
   13d34:	0513b201 	ldreq	fp, [r3, #-513]	; 0xfffffdff
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   13d38:	91020000 	mrsls	r0, (UNDEF: 2)
   13d3c:	5d5c1a6c 	vldrpl	s3, [ip, #-432]	; 0xfffffe50
   13d40:	c0010000 	andgt	r0, r1, r0
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   13d44:	00000396 	muleq	r0, r6, r3
   13d48:	1a679102 	bne	19f8158 <mailbuffer+0x19bd068>
   13d4c:	00004c0e 	andeq	r4, r0, lr, lsl #24
   13d50:	03e4e601 	mvneq	lr, #1048576	; 0x100000
   13d54:	91020000 	mrsls	r0, (UNDEF: 2)
   13d58:	5d7e1a60 	vldmdbpl	lr!, {s3-s98}
   13d5c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
   13d60:	000003a0 	andeq	r0, r0, r0, lsr #7
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   13d64:	1b5e9102 	blne	17b8174 <mailbuffer+0x177d084>
   13d68:	0002d9f4 	strdeq	sp, [r2], -r4
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   13d6c:	0000005c 	andeq	r0, r0, ip, asr r0
   13d70:	0100691c 	tsteq	r0, ip, lsl r9
   13d74:	0003b6e9 	andeq	fp, r3, r9, ror #13
   13d78:	68910200 	ldmvs	r1, {r9}
   13d7c:	aa000000 	bge	13d84 <prvInitialiseTaskLists+0x18>
   13d80:	02000000 	andeq	r0, r0, #0
   13d84:	00324d00 	eorseq	r4, r2, r0, lsl #26
   13d88:	50010400 	andpl	r0, r1, r0, lsl #8
   13d8c:	98000064 	stmdals	r0, {r2, r5, r6}
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   13d90:	ac0002da 	sfmge	f0, 4, [r0], {218}	; 0xda
   13d94:	2e0002db 	mcrcs	2, 0, r0, cr0, cr11, {6}
   13d98:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   13d9c:	2f2e2e2f 	svccs	0x002e2e2f
   13da0:	2f637273 	svccs	0x00637273
   13da4:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
   13da8:	632f6363 	teqvs	pc, #-1946157055	; 0x8c000001
   13dac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
   13db0:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
   13db4:	696c2f6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
   13db8:	75663162 	strbvc	r3, [r6, #-354]!	; 0xfffffe9e

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   13dbc:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
   13dc0:	622f0053 	eorvs	r0, pc, #83	; 0x53
   13dc4:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
   13dc8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
   13dcc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
   13dd0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   13dd4:	61652d65 	cmnvs	r5, r5, ror #26
   13dd8:	372d6962 	strcc	r6, [sp, -r2, ror #18]!
   13ddc:	6c654166 	stfvse	f4, [r5], #-408	; 0xfffffe68
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   13de0:	63672f56 	cmnvs	r7, #344	; 0x158
   13de4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
   13de8:	6f6e2d6d 	svcvs	0x006e2d6d
	vListInitialise( ( xList * ) &xPendingReadyList );
   13dec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
   13df0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
   13df4:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   13df8:	76732b33 			; <UNDEFINED> instruction: 0x76732b33
   13dfc:	3732326e 	ldrcc	r3, [r2, -lr, ror #4]!
   13e00:	2f373932 	svccs	0x00373932
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   13e04:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
   13e08:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
   13e0c:	6f6e2d6d 	svcvs	0x006e2d6d
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   13e10:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
   13e14:	2f696261 	svccs	0x00696261
   13e18:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
   13e1c:	47006363 	strmi	r6, [r0, -r3, ror #6]
   13e20:	4120554e 	teqmi	r0, lr, asr #10
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   13e24:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
   13e28:	01003532 	tsteq	r0, r2, lsr r5
   13e2c:	0000aa80 	andeq	sl, r0, r0, lsl #21
   13e30:	61000200 	mrsvs	r0, R8_usr
   13e34:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
   13e38:	0064c801 	rsbeq	ip, r4, r1, lsl #16
   13e3c:	02dbac00 	sbcseq	sl, fp, #0, 24
   13e40:	02dbb000 	sbcseq	fp, fp, #0
   13e44:	2f2e2e00 	svccs	0x002e2e00
   13e48:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
}
   13e4c:	72732f2e 	rsbsvc	r2, r3, #46, 30	; 0xb8
   13e50:	696c2f63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   13e54:	63636762 	cmnvs	r3, #25690112	; 0x1880000
   13e58:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
   13e5c:	2f676966 	svccs	0x00676966
   13e60:	2f6d7261 	svccs	0x006d7261
   13e64:	3162696c 	cmncc	r2, ip, ror #18
   13e68:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
   13e6c:	00532e73 	subseq	r2, r3, r3, ror lr
   13e70:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
   13e74:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   13e78:	612d6363 	teqvs	sp, r3, ror #6
   13e7c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
   13e80:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
   13e84:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
   13e88:	4166372d 	cmnmi	r6, sp, lsr #14
		{
			vTaskSuspendAll();
   13e8c:	2f566c65 	svccs	0x00566c65
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   13e90:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
   13e94:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
   13e98:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
   13e9c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
   13ea0:	2e342d69 	cdpcs	13, 3, cr2, cr4, cr9, {3}
   13ea4:	2b332e39 	blcs	cdf790 <mailbuffer+0xca46a0>
   13ea8:	326e7673 	rsbcc	r7, lr, #120586240	; 0x7300000
   13eac:	39323732 	ldmdbcc	r2!, {r1, r4, r5, r8, r9, sl, ip, sp}
			xTaskResumeAll();
   13eb0:	75622f37 	strbvc	r2, [r2, #-3895]!	; 0xfffff0c9

			if( xListIsEmpty == pdFALSE )
   13eb4:	2f646c69 	svccs	0x00646c69
   13eb8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
   13ebc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   13ec0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   13ec4:	696c2f69 	stmdbvs	ip!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
   13ec8:	63636762 	cmnvs	r3, #25690112	; 0x1880000
   13ecc:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
   13ed0:	20534120 	subscs	r4, r3, r0, lsr #2
   13ed4:	35322e32 	ldrcc	r2, [r2, #-3634]!	; 0xfffff1ce
					vListRemove( &( pxTCB->xGenericListItem ) );
   13ed8:	Address 0x0000000000013ed8 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
       c:	00171006 	andseq	r1, r7, r6
      10:	00240200 	eoreq	r0, r4, r0, lsl #4
      14:	0b3e0b0b 	bleq	f82c48 <mailbuffer+0xf47b58>
      18:	00000803 	andeq	r0, r0, r3, lsl #16
      1c:	0b002403 	bleq	9030 <__module_entries_end+0xf50>
      20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      24:	0400000e 	streq	r0, [r0], #-14
      28:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      2c:	0b3b0b3a 	bleq	ec2d1c <mailbuffer+0xe87c2c>
      30:	00001349 	andeq	r1, r0, r9, asr #6
      34:	0b000f05 	bleq	3c50 <_start-0x43b0>
      38:	0013490b 	andseq	r4, r3, fp, lsl #18
      3c:	01150600 	tsteq	r5, r0, lsl #12
      40:	13011927 	movwne	r1, #6439	; 0x1927
      44:	05070000 	streq	r0, [r7, #-0]
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	000f0800 	andeq	r0, pc, r0, lsl #16
      50:	00000b0b 	andeq	r0, r0, fp, lsl #22
      54:	03011309 	movweq	r1, #4873	; 0x1309
      58:	3a0b0b0e 	bcc	2c2c98 <mailbuffer+0x287ba8>
      5c:	010b3b0b 	tsteq	fp, fp, lsl #22
      60:	0a000013 	beq	b4 <_start-0x7f4c>
      64:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      68:	0b3b0b3a 	bleq	ec2d58 <mailbuffer+0xe87c68>
      6c:	0b381349 	bleq	e04d98 <mailbuffer+0xdc9ca8>
      70:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
      74:	03193f01 	tsteq	r9, #1, 30
      78:	3b0b3a0e 	blcc	2ce8b8 <mailbuffer+0x2937c8>
      7c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
      80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
      84:	96184006 	ldrls	r4, [r8], -r6
      88:	13011942 	movwne	r1, #6466	; 0x1942
      8c:	050c0000 	streq	r0, [ip, #-0]
      90:	3a0e0300 	bcc	380c98 <mailbuffer+0x345ba8>
      94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      98:	00180213 	andseq	r0, r8, r3, lsl r2
      9c:	00340d00 	eorseq	r0, r4, r0, lsl #26
      a0:	0b3a0e03 	bleq	e838b4 <mailbuffer+0xe487c4>
      a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      a8:	00001802 	andeq	r1, r0, r2, lsl #16
      ac:	3f002e0e 	svccc	0x00002e0e
      b0:	3a0e0319 	bcc	380d1c <mailbuffer+0x345c2c>
      b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      b8:	11134919 	tstne	r3, r9, lsl r9
      bc:	40061201 	andmi	r1, r6, r1, lsl #4
      c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
      c4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
      c8:	03193f00 	tsteq	r9, #0, 30
      cc:	3b0b3a0e 	blcc	2ce90c <mailbuffer+0x29381c>
      d0:	1119270b 	tstne	r9, fp, lsl #14
      d4:	40061201 	andmi	r1, r6, r1, lsl #4
      d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
      dc:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
      e0:	03193f01 	tsteq	r9, #1, 30
      e4:	3b0b3a0e 	blcc	2ce924 <mailbuffer+0x293834>
      e8:	1119270b 	tstne	r9, fp, lsl #14
      ec:	40061201 	andmi	r1, r6, r1, lsl #4
      f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
      f4:	00001301 	andeq	r1, r0, r1, lsl #6
      f8:	03012e11 	movweq	r2, #7697	; 0x1e11
      fc:	3b0b3a0e 	blcc	2ce93c <mailbuffer+0x29384c>
     100:	1119270b 	tstne	r9, fp, lsl #14
     104:	40061201 	andmi	r1, r6, r1, lsl #4
     108:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     10c:	00001301 	andeq	r1, r0, r1, lsl #6
     110:	49002612 	stmdbmi	r0, {r1, r4, r9, sl, sp}
     114:	13000013 	movwne	r0, #19
     118:	13490035 	movtne	r0, #36917	; 0x9035
     11c:	01000000 	mrseq	r0, (UNDEF: 0)
     120:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     124:	0e030b13 	vmoveq.32	d3[0], r0
     128:	06120111 			; <UNDEFINED> instruction: 0x06120111
     12c:	00001710 	andeq	r1, r0, r0, lsl r7
     130:	0b002402 	bleq	9140 <__module_entries_end+0x1060>
     134:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     138:	03000008 	movweq	r0, #8
     13c:	0b0b0024 	bleq	2c01d4 <mailbuffer+0x2850e4>
     140:	0e030b3e 	vmoveq.16	d3[0], r0
     144:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
     148:	03193f01 	tsteq	r9, #1, 30
     14c:	3b0b3a0e 	blcc	2ce98c <mailbuffer+0x29389c>
     150:	1119270b 	tstne	r9, fp, lsl #14
     154:	40061201 	andmi	r1, r6, r1, lsl #4
     158:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     15c:	00001301 	andeq	r1, r0, r1, lsl #6
     160:	11010b05 	tstne	r1, r5, lsl #22
     164:	00061201 	andeq	r1, r6, r1, lsl #4
     168:	00340600 	eorseq	r0, r4, r0, lsl #12
     16c:	0b3a0e03 	bleq	e83980 <mailbuffer+0xe48890>
     170:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     174:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     178:	35070000 	strcc	r0, [r7, #-0]
     17c:	00134900 	andseq	r4, r3, r0, lsl #18
     180:	000f0800 	andeq	r0, pc, r0, lsl #16
     184:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     188:	35090000 	strcc	r0, [r9, #-0]
     18c:	0a000000 	beq	194 <_start-0x7e6c>
     190:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     194:	0b3a0e03 	bleq	e839a8 <mailbuffer+0xe488b8>
     198:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1a4:	00130119 	andseq	r0, r3, r9, lsl r1
     1a8:	010b0b00 	tsteq	fp, r0, lsl #22
     1ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1b0:	00001301 	andeq	r1, r0, r1, lsl #6
     1b4:	3f002e0c 	svccc	0x00002e0c
     1b8:	3a0e0319 	bcc	380e24 <mailbuffer+0x345d34>
     1bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1c4:	96184006 	ldrls	r4, [r8], -r6
     1c8:	00001942 	andeq	r1, r0, r2, asr #18
     1cc:	0300340d 	movweq	r3, #1037	; 0x40d
     1d0:	3b0b3a0e 	blcc	2cea10 <mailbuffer+0x293920>
     1d4:	3f13490b 	svccc	0x0013490b
     1d8:	00180219 	andseq	r0, r8, r9, lsl r2
     1dc:	11010000 	mrsne	r0, (UNDEF: 1)
     1e0:	130e2501 	movwne	r2, #58625	; 0xe501
     1e4:	110e030b 	tstne	lr, fp, lsl #6
     1e8:	10061201 	andne	r1, r6, r1, lsl #4
     1ec:	02000017 	andeq	r0, r0, #23
     1f0:	0b0b0024 	bleq	2c0288 <mailbuffer+0x285198>
     1f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     1f8:	24030000 	strcs	r0, [r3], #-0
     1fc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     200:	000e030b 	andeq	r0, lr, fp, lsl #6
     204:	000f0400 	andeq	r0, pc, r0, lsl #8
     208:	00000b0b 	andeq	r0, r0, fp, lsl #22
     20c:	03001605 	movweq	r1, #1541	; 0x605
     210:	3b0b3a0e 	blcc	2cea50 <mailbuffer+0x293960>
     214:	0013490b 	andseq	r4, r3, fp, lsl #18
     218:	01130600 	tsteq	r3, r0, lsl #12
     21c:	0b0b0e03 	bleq	2c3a30 <mailbuffer+0x288940>
     220:	0b3b0b3a 	bleq	ec2f10 <mailbuffer+0xe87e20>
     224:	00001301 	andeq	r1, r0, r1, lsl #6
     228:	03000d07 	movweq	r0, #3335	; 0xd07
     22c:	3b0b3a0e 	blcc	2cea6c <mailbuffer+0x29397c>
     230:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     234:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     238:	0b0b000f 	bleq	2c027c <mailbuffer+0x28518c>
     23c:	00001349 	andeq	r1, r0, r9, asr #6
     240:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
     244:	0a000013 	beq	298 <_start-0x7d68>
     248:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     24c:	00001301 	andeq	r1, r0, r1, lsl #6
     250:	4900050b 	stmdbmi	r0, {r0, r1, r3, r8, sl}
     254:	0c000013 	stceq	0, cr0, [r0], {19}
     258:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     25c:	0b3a0e03 	bleq	e83a70 <mailbuffer+0xe48980>
     260:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     264:	01111349 	tsteq	r1, r9, asr #6
     268:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     26c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     270:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     274:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     278:	0b3b0b3a 	bleq	ec2f68 <mailbuffer+0xe87e78>
     27c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     280:	340e0000 	strcc	r0, [lr], #-0
     284:	3a0e0300 	bcc	380e8c <mailbuffer+0x345d9c>
     288:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     28c:	00180213 	andseq	r0, r8, r3, lsl r2
     290:	012e0f00 	teqeq	lr, r0, lsl #30
     294:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     298:	0b3b0b3a 	bleq	ec2f88 <mailbuffer+0xe87e98>
     29c:	01111927 	tsteq	r1, r7, lsr #18
     2a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     2a4:	01194296 			; <UNDEFINED> instruction: 0x01194296
     2a8:	10000013 	andne	r0, r0, r3, lsl r0
     2ac:	0e03012e 	adfeqsp	f0, f3, #0.5
     2b0:	0b3b0b3a 	bleq	ec2fa0 <mailbuffer+0xe87eb0>
     2b4:	01111927 	tsteq	r1, r7, lsr #18
     2b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     2bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
     2c0:	11000013 	tstne	r0, r3, lsl r0
     2c4:	0111010b 	tsteq	r1, fp, lsl #2
     2c8:	00000612 	andeq	r0, r0, r2, lsl r6
     2cc:	03012e12 	movweq	r2, #7698	; 0x1e12
     2d0:	3b0b3a0e 	blcc	2ceb10 <mailbuffer+0x293a20>
     2d4:	11192705 	tstne	r9, r5, lsl #14
     2d8:	40061201 	andmi	r1, r6, r1, lsl #4
     2dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     2e0:	00001301 	andeq	r1, r0, r1, lsl #6
     2e4:	03003413 	movweq	r3, #1043	; 0x413
     2e8:	3b0b3a0e 	blcc	2ceb28 <mailbuffer+0x293a38>
     2ec:	02134905 	andseq	r4, r3, #81920	; 0x14000
     2f0:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
     2f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     2f8:	0b3a0e03 	bleq	e83b0c <mailbuffer+0xe48a1c>
     2fc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     300:	06120111 			; <UNDEFINED> instruction: 0x06120111
     304:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     308:	00130119 	andseq	r0, r3, r9, lsl r1
     30c:	00261500 	eoreq	r1, r6, r0, lsl #10
     310:	00001349 	andeq	r1, r0, r9, asr #6
     314:	3f012e16 	svccc	0x00012e16
     318:	3a0e0319 	bcc	380f84 <mailbuffer+0x345e94>
     31c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     320:	11134919 	tstne	r3, r9, lsl r9
     324:	40061201 	andmi	r1, r6, r1, lsl #4
     328:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     32c:	00001301 	andeq	r1, r0, r1, lsl #6
     330:	03000517 	movweq	r0, #1303	; 0x517
     334:	3b0b3a0e 	blcc	2ceb74 <mailbuffer+0x293a84>
     338:	02134905 	andseq	r4, r3, #81920	; 0x14000
     33c:	18000018 	stmdane	r0, {r3, r4}
     340:	13490101 	movtne	r0, #37121	; 0x9101
     344:	00001301 	andeq	r1, r0, r1, lsl #6
     348:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
     34c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     350:	00341a00 	eorseq	r1, r4, r0, lsl #20
     354:	0b3a0e03 	bleq	e83b68 <mailbuffer+0xe48a78>
     358:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     35c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     360:	01000000 	mrseq	r0, (UNDEF: 0)
     364:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     368:	0e030b13 	vmoveq.32	d3[0], r0
     36c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     370:	00001710 	andeq	r1, r0, r0, lsl r7
     374:	0b002402 	bleq	9384 <__module_entries_end+0x12a4>
     378:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     37c:	0300000e 	movweq	r0, #14
     380:	0b0b0024 	bleq	2c0418 <mailbuffer+0x285328>
     384:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     388:	0f040000 	svceq	0x00040000
     38c:	000b0b00 	andeq	r0, fp, r0, lsl #22
     390:	00160500 	andseq	r0, r6, r0, lsl #10
     394:	0b3a0e03 	bleq	e83ba8 <mailbuffer+0xe48ab8>
     398:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     39c:	13060000 	movwne	r0, #24576	; 0x6000
     3a0:	0b0e0301 	bleq	380fac <mailbuffer+0x345ebc>
     3a4:	3b0b3a0b 	blcc	2cebd8 <mailbuffer+0x293ae8>
     3a8:	0013010b 	andseq	r0, r3, fp, lsl #2
     3ac:	000d0700 	andeq	r0, sp, r0, lsl #14
     3b0:	0b3a0e03 	bleq	e83bc4 <mailbuffer+0xe48ad4>
     3b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3b8:	00000b38 	andeq	r0, r0, r8, lsr fp
     3bc:	0b000f08 	bleq	3fe4 <_start-0x401c>
     3c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     3c4:	00350900 	eorseq	r0, r5, r0, lsl #18
     3c8:	00001349 	andeq	r1, r0, r9, asr #6
     3cc:	3f012e0a 	svccc	0x00012e0a
     3d0:	3a0e0319 	bcc	38103c <mailbuffer+0x345f4c>
     3d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     3dc:	96184006 	ldrls	r4, [r8], -r6
     3e0:	13011942 	movwne	r1, #6466	; 0x1942
     3e4:	050b0000 	streq	r0, [fp, #-0]
     3e8:	3a0e0300 	bcc	380ff0 <mailbuffer+0x345f00>
     3ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3f0:	00180213 	andseq	r0, r8, r3, lsl r2
     3f4:	00340c00 	eorseq	r0, r4, r0, lsl #24
     3f8:	0b3a0e03 	bleq	e83c0c <mailbuffer+0xe48b1c>
     3fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     400:	00001802 	andeq	r1, r0, r2, lsl #16
     404:	3f012e0d 	svccc	0x00012e0d
     408:	3a0e0319 	bcc	381074 <mailbuffer+0x345f84>
     40c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     410:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     414:	96184006 	ldrls	r4, [r8], -r6
     418:	00001942 	andeq	r1, r0, r2, asr #18
     41c:	01110100 	tsteq	r1, r0, lsl #2
     420:	0b130e25 	bleq	4c3cbc <mailbuffer+0x488bcc>
     424:	01110e03 	tsteq	r1, r3, lsl #28
     428:	17100612 			; <UNDEFINED> instruction: 0x17100612
     42c:	16020000 	strne	r0, [r2], -r0
     430:	3a0e0300 	bcc	381038 <mailbuffer+0x345f48>
     434:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     438:	03000013 	movweq	r0, #19
     43c:	0b0b0024 	bleq	2c04d4 <mailbuffer+0x2853e4>
     440:	0e030b3e 	vmoveq.16	d3[0], r0
     444:	24040000 	strcs	r0, [r4], #-0
     448:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     44c:	0008030b 	andeq	r0, r8, fp, lsl #6
     450:	000f0500 	andeq	r0, pc, r0, lsl #10
     454:	00000b0b 	andeq	r0, r0, fp, lsl #22
     458:	0b000f06 	bleq	4078 <_start-0x3f88>
     45c:	0013490b 	andseq	r4, r3, fp, lsl #18
     460:	00260700 	eoreq	r0, r6, r0, lsl #14
     464:	13080000 	movwne	r0, #32768	; 0x8000
     468:	0b0e0301 	bleq	381074 <mailbuffer+0x345f84>
     46c:	3b0b3a0b 	blcc	2ceca0 <mailbuffer+0x293bb0>
     470:	0013010b 	andseq	r0, r3, fp, lsl #2
     474:	000d0900 	andeq	r0, sp, r0, lsl #18
     478:	0b3a0e03 	bleq	e83c8c <mailbuffer+0xe48b9c>
     47c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     480:	00000b38 	andeq	r0, r0, r8, lsr fp
     484:	4900350a 	stmdbmi	r0, {r1, r3, r8, sl, ip, sp}
     488:	0b000013 	bleq	4dc <_start-0x7b24>
     48c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     490:	0b3a0e03 	bleq	e83ca4 <mailbuffer+0xe48bb4>
     494:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     498:	01111349 	tsteq	r1, r9, asr #6
     49c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     4a0:	01194296 			; <UNDEFINED> instruction: 0x01194296
     4a4:	0c000013 	stceq	0, cr0, [r0], {19}
     4a8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     4ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     4b4:	340d0000 	strcc	r0, [sp], #-0
     4b8:	3a0e0300 	bcc	3810c0 <mailbuffer+0x345fd0>
     4bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4c0:	00180213 	andseq	r0, r8, r3, lsl r2
     4c4:	00260e00 	eoreq	r0, r6, r0, lsl #28
     4c8:	00001349 	andeq	r1, r0, r9, asr #6
     4cc:	3f012e0f 	svccc	0x00012e0f
     4d0:	3a0e0319 	bcc	38113c <mailbuffer+0x34604c>
     4d4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     4d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     4dc:	96184006 	ldrls	r4, [r8], -r6
     4e0:	13011942 	movwne	r1, #6466	; 0x1942
     4e4:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     4e8:	3a0e0301 	bcc	3810f4 <mailbuffer+0x346004>
     4ec:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     4f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     4f4:	96184006 	ldrls	r4, [r8], -r6
     4f8:	13011942 	movwne	r1, #6466	; 0x1942
     4fc:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     500:	3a0e0301 	bcc	38110c <mailbuffer+0x34601c>
     504:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     508:	11134919 	tstne	r3, r9, lsl r9
     50c:	40061201 	andmi	r1, r6, r1, lsl #4
     510:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     514:	00001301 	andeq	r1, r0, r1, lsl #6
     518:	3f012e12 	svccc	0x00012e12
     51c:	3a0e0319 	bcc	381188 <mailbuffer+0x346098>
     520:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     524:	11134919 	tstne	r3, r9, lsl r9
     528:	40061201 	andmi	r1, r6, r1, lsl #4
     52c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     530:	01000000 	mrseq	r0, (UNDEF: 0)
     534:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     538:	0e030b13 	vmoveq.32	d3[0], r0
     53c:	01110e1b 	tsteq	r1, fp, lsl lr
     540:	17100612 			; <UNDEFINED> instruction: 0x17100612
     544:	24020000 	strcs	r0, [r2], #-0
     548:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     54c:	000e030b 	andeq	r0, lr, fp, lsl #6
     550:	00240300 	eoreq	r0, r4, r0, lsl #6
     554:	0b3e0b0b 	bleq	f83188 <mailbuffer+0xf48098>
     558:	00000803 	andeq	r0, r0, r3, lsl #16
     55c:	03001604 	movweq	r1, #1540	; 0x604
     560:	3b0b3a0e 	blcc	2ceda0 <mailbuffer+0x293cb0>
     564:	0013490b 	andseq	r4, r3, fp, lsl #18
     568:	000f0500 	andeq	r0, pc, r0, lsl #10
     56c:	00000b0b 	andeq	r0, r0, fp, lsl #22
     570:	0b000f06 	bleq	4190 <_start-0x3e70>
     574:	0013490b 	andseq	r4, r3, fp, lsl #18
     578:	01150700 	tsteq	r5, r0, lsl #14
     57c:	13011927 	movwne	r1, #6439	; 0x1927
     580:	05080000 	streq	r0, [r8, #-0]
     584:	00134900 	andseq	r4, r3, r0, lsl #18
     588:	01150900 	tsteq	r5, r0, lsl #18
     58c:	13491927 	movtne	r1, #39207	; 0x9927
     590:	00001301 	andeq	r1, r0, r1, lsl #6
     594:	0301130a 	movweq	r1, #4874	; 0x130a
     598:	3a0b0b0e 	bcc	2c31d8 <mailbuffer+0x2880e8>
     59c:	010b3b0b 	tsteq	fp, fp, lsl #22
     5a0:	0b000013 	bleq	5f4 <_start-0x7a0c>
     5a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     5a8:	0b3b0b3a 	bleq	ec3298 <mailbuffer+0xe881a8>
     5ac:	0b381349 	bleq	e052d8 <mailbuffer+0xdca1e8>
     5b0:	350c0000 	strcc	r0, [ip, #-0]
     5b4:	00134900 	andseq	r4, r3, r0, lsl #18
     5b8:	00260d00 	eoreq	r0, r6, r0, lsl #26
     5bc:	00001349 	andeq	r1, r0, r9, asr #6
     5c0:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
     5c4:	00130113 	andseq	r0, r3, r3, lsl r1
     5c8:	00210f00 	eoreq	r0, r1, r0, lsl #30
     5cc:	0b2f1349 	bleq	bc52f8 <mailbuffer+0xb8a208>
     5d0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     5d4:	03193f01 	tsteq	r9, #1, 30
     5d8:	3b0b3a0e 	blcc	2cee18 <mailbuffer+0x293d28>
     5dc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     5e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5e4:	96184006 	ldrls	r4, [r8], -r6
     5e8:	13011942 	movwne	r1, #6466	; 0x1942
     5ec:	05110000 	ldreq	r0, [r1, #-0]
     5f0:	3a0e0300 	bcc	3811f8 <mailbuffer+0x346108>
     5f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f8:	00180213 	andseq	r0, r8, r3, lsl r2
     5fc:	00341200 	eorseq	r1, r4, r0, lsl #4
     600:	0b3a0e03 	bleq	e83e14 <mailbuffer+0xe48d24>
     604:	1349053b 	movtne	r0, #38203	; 0x953b
     608:	00001802 	andeq	r1, r0, r2, lsl #16
     60c:	11010b13 	tstne	r1, r3, lsl fp
     610:	00061201 	andeq	r1, r6, r1, lsl #4
     614:	012e1400 	teqeq	lr, r0, lsl #8
     618:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     61c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     620:	01111927 	tsteq	r1, r7, lsr #18
     624:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     628:	01194296 			; <UNDEFINED> instruction: 0x01194296
     62c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     630:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     634:	0b3a0e03 	bleq	e83e48 <mailbuffer+0xe48d58>
     638:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     63c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     640:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     644:	16000019 			; <UNDEFINED> instruction: 0x16000019
     648:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     64c:	0b3a0e03 	bleq	e83e60 <mailbuffer+0xe48d70>
     650:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     654:	01111349 	tsteq	r1, r9, asr #6
     658:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     65c:	00194296 	mulseq	r9, r6, r2
     660:	010b1700 	tsteq	fp, r0, lsl #14
     664:	06120111 			; <UNDEFINED> instruction: 0x06120111
     668:	00001301 	andeq	r1, r0, r1, lsl #6
     66c:	03012e18 	movweq	r2, #7704	; 0x1e18
     670:	3b0b3a0e 	blcc	2ceeb0 <mailbuffer+0x293dc0>
     674:	11192705 	tstne	r9, r5, lsl #14
     678:	40061201 	andmi	r1, r6, r1, lsl #4
     67c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     680:	00001301 	andeq	r1, r0, r1, lsl #6
     684:	03012e19 	movweq	r2, #7705	; 0x1e19
     688:	3b0b3a0e 	blcc	2ceec8 <mailbuffer+0x293dd8>
     68c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     690:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     694:	96184006 	ldrls	r4, [r8], -r6
     698:	13011942 	movwne	r1, #6466	; 0x1942
     69c:	341a0000 	ldrcc	r0, [sl], #-0
     6a0:	3a0e0300 	bcc	3812a8 <mailbuffer+0x3461b8>
     6a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6a8:	00180213 	andseq	r0, r8, r3, lsl r2
     6ac:	00341b00 	eorseq	r1, r4, r0, lsl #22
     6b0:	0b3a0e03 	bleq	e83ec4 <mailbuffer+0xe48dd4>
     6b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6b8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
     6c0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     6c4:	0e030b13 	vmoveq.32	d3[0], r0
     6c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6cc:	00001710 	andeq	r1, r0, r0, lsl r7
     6d0:	03001602 	movweq	r1, #1538	; 0x602
     6d4:	3b0b3a0e 	blcc	2cef14 <mailbuffer+0x293e24>
     6d8:	0013490b 	andseq	r4, r3, fp, lsl #18
     6dc:	000f0300 	andeq	r0, pc, r0, lsl #6
     6e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     6e4:	15040000 	strne	r0, [r4, #-0]
     6e8:	01192701 	tsteq	r9, r1, lsl #14
     6ec:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     6f0:	13490005 	movtne	r0, #36869	; 0x9005
     6f4:	24060000 	strcs	r0, [r6], #-0
     6f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     6fc:	0008030b 	andeq	r0, r8, fp, lsl #6
     700:	000f0700 	andeq	r0, pc, r0, lsl #14
     704:	00000b0b 	andeq	r0, r0, fp, lsl #22
     708:	0b011308 	bleq	45330 <mailbuffer+0xa240>
     70c:	3b0b3a0b 	blcc	2cef40 <mailbuffer+0x293e50>
     710:	0013010b 	andseq	r0, r3, fp, lsl #2
     714:	000d0900 	andeq	r0, sp, r0, lsl #18
     718:	0b3a0e03 	bleq	e83f2c <mailbuffer+0xe48e3c>
     71c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     720:	00000b38 	andeq	r0, r0, r8, lsr fp
     724:	0b00240a 	bleq	9754 <__module_entries_end+0x1674>
     728:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     72c:	0b00000e 	bleq	76c <_start-0x7894>
     730:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     734:	0b3b0b3a 	bleq	ec3424 <mailbuffer+0xe88334>
     738:	06120111 			; <UNDEFINED> instruction: 0x06120111
     73c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     740:	0c000019 	stceq	0, cr0, [r0], {25}
     744:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     748:	0b3a0e03 	bleq	e83f5c <mailbuffer+0xe48e6c>
     74c:	01110b3b 	tsteq	r1, fp, lsr fp
     750:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     754:	01194296 			; <UNDEFINED> instruction: 0x01194296
     758:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     75c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     760:	0b3b0b3a 	bleq	ec3450 <mailbuffer+0xe88360>
     764:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     768:	0b0e0000 	bleq	380770 <mailbuffer+0x345680>
     76c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     770:	0f000006 	svceq	0x00000006
     774:	0e03012e 	adfeqsp	f0, f3, #0.5
     778:	0b3b0b3a 	bleq	ec3468 <mailbuffer+0xe88378>
     77c:	01111927 	tsteq	r1, r7, lsr #18
     780:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     784:	01194296 			; <UNDEFINED> instruction: 0x01194296
     788:	10000013 	andne	r0, r0, r3, lsl r0
     78c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     790:	0b3b0b3a 	bleq	ec3480 <mailbuffer+0xe88390>
     794:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     798:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     79c:	03193f01 	tsteq	r9, #1, 30
     7a0:	3b0b3a0e 	blcc	2cefe0 <mailbuffer+0x293ef0>
     7a4:	1113490b 	tstne	r3, fp, lsl #18
     7a8:	40061201 	andmi	r1, r6, r1, lsl #4
     7ac:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     7b0:	00001301 	andeq	r1, r0, r1, lsl #6
     7b4:	03003412 	movweq	r3, #1042	; 0x412
     7b8:	3b0b3a08 	blcc	2cefe0 <mailbuffer+0x293ef0>
     7bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7c0:	13000018 	movwne	r0, #24
     7c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     7c8:	0b3a0e03 	bleq	e83fdc <mailbuffer+0xe48eec>
     7cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     7d0:	01111349 	tsteq	r1, r9, asr #6
     7d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     7d8:	01194296 			; <UNDEFINED> instruction: 0x01194296
     7dc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     7e0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     7e4:	0b3a0e03 	bleq	e83ff8 <mailbuffer+0xe48f08>
     7e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7f0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7f4:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
     7f8:	13490101 	movtne	r0, #37121	; 0x9101
     7fc:	00001301 	andeq	r1, r0, r1, lsl #6
     800:	49002116 	stmdbmi	r0, {r1, r2, r4, r8, sp}
     804:	000b2f13 	andeq	r2, fp, r3, lsl pc
     808:	00261700 	eoreq	r1, r6, r0, lsl #14
     80c:	00001349 	andeq	r1, r0, r9, asr #6
     810:	49003518 	stmdbmi	r0, {r3, r4, r8, sl, ip, sp}
     814:	00000013 	andeq	r0, r0, r3, lsl r0
     818:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     81c:	030b130e 	movweq	r1, #45838	; 0xb30e
     820:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     824:	00171006 	andseq	r1, r7, r6
     828:	01040200 	mrseq	r0, R12_usr
     82c:	0b0b0e03 	bleq	2c4040 <mailbuffer+0x288f50>
     830:	0b3b0b3a 	bleq	ec3520 <mailbuffer+0xe88430>
     834:	00001301 	andeq	r1, r0, r1, lsl #6
     838:	03002803 	movweq	r2, #2051	; 0x803
     83c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     840:	01130400 	tsteq	r3, r0, lsl #8
     844:	0b3a0b0b 	bleq	e83478 <mailbuffer+0xe48388>
     848:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     84c:	0d050000 	stceq	0, cr0, [r5, #-0]
     850:	3a0e0300 	bcc	381458 <mailbuffer+0x346368>
     854:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     858:	000b3813 	andeq	r3, fp, r3, lsl r8
     85c:	01010600 	tsteq	r1, r0, lsl #12
     860:	13011349 	movwne	r1, #4937	; 0x1349
     864:	21070000 	mrscs	r0, (UNDEF: 7)
     868:	2f134900 	svccs	0x00134900
     86c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     870:	0b0b0024 	bleq	2c0908 <mailbuffer+0x285818>
     874:	0e030b3e 	vmoveq.16	d3[0], r0
     878:	16090000 	strne	r0, [r9], -r0
     87c:	3a0e0300 	bcc	381484 <mailbuffer+0x346394>
     880:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     884:	0a000013 	beq	8d8 <_start-0x7728>
     888:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     88c:	0b3a0e03 	bleq	e840a0 <mailbuffer+0xe48fb0>
     890:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     894:	06120111 			; <UNDEFINED> instruction: 0x06120111
     898:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     89c:	00130119 	andseq	r0, r3, r9, lsl r1
     8a0:	00050b00 	andeq	r0, r5, r0, lsl #22
     8a4:	0b3a0e03 	bleq	e840b8 <mailbuffer+0xe48fc8>
     8a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8ac:	00001802 	andeq	r1, r0, r2, lsl #16
     8b0:	0300340c 	movweq	r3, #1036	; 0x40c
     8b4:	3b0b3a0e 	blcc	2cf0f4 <mailbuffer+0x294004>
     8b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8bc:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
     8c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     8c4:	0b3b0b3a 	bleq	ec35b4 <mailbuffer+0xe884c4>
     8c8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     8cc:	240e0000 	strcs	r0, [lr], #-0
     8d0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     8d4:	0008030b 	andeq	r0, r8, fp, lsl #6
     8d8:	00050f00 	andeq	r0, r5, r0, lsl #30
     8dc:	0b3a0803 	bleq	e828f0 <mailbuffer+0xe47800>
     8e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8e4:	00001802 	andeq	r1, r0, r2, lsl #16
     8e8:	3f012e10 	svccc	0x00012e10
     8ec:	3a0e0319 	bcc	381558 <mailbuffer+0x346468>
     8f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     8f4:	11134919 	tstne	r3, r9, lsl r9
     8f8:	40061201 	andmi	r1, r6, r1, lsl #4
     8fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     900:	00001301 	andeq	r1, r0, r1, lsl #6
     904:	03003411 	movweq	r3, #1041	; 0x411
     908:	3b0b3a0e 	blcc	2cf148 <mailbuffer+0x294058>
     90c:	3f13490b 	svccc	0x0013490b
     910:	00180219 	andseq	r0, r8, r9, lsl r2
     914:	00261200 	eoreq	r1, r6, r0, lsl #4
     918:	00001349 	andeq	r1, r0, r9, asr #6
     91c:	0b000f13 	bleq	4570 <_start-0x3a90>
     920:	0013490b 	andseq	r4, r3, fp, lsl #18
     924:	00351400 	eorseq	r1, r5, r0, lsl #8
     928:	00001349 	andeq	r1, r0, r9, asr #6
     92c:	01110100 	tsteq	r1, r0, lsl #2
     930:	0b130e25 	bleq	4c41cc <mailbuffer+0x4890dc>
     934:	01110e03 	tsteq	r1, r3, lsl #28
     938:	17100612 			; <UNDEFINED> instruction: 0x17100612
     93c:	16020000 	strne	r0, [r2], -r0
     940:	3a0e0300 	bcc	381548 <mailbuffer+0x346458>
     944:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     948:	03000013 	movweq	r0, #19
     94c:	0b0b0024 	bleq	2c09e4 <mailbuffer+0x2858f4>
     950:	0e030b3e 	vmoveq.16	d3[0], r0
     954:	24040000 	strcs	r0, [r4], #-0
     958:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     95c:	0008030b 	andeq	r0, r8, fp, lsl #6
     960:	000f0500 	andeq	r0, pc, r0, lsl #10
     964:	00000b0b 	andeq	r0, r0, fp, lsl #22
     968:	0b000f06 	bleq	4588 <_start-0x3a78>
     96c:	0013490b 	andseq	r4, r3, fp, lsl #18
     970:	01170700 	tsteq	r7, r0, lsl #14
     974:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     978:	0b3b0b3a 	bleq	ec3668 <mailbuffer+0xe88578>
     97c:	00001301 	andeq	r1, r0, r1, lsl #6
     980:	03000d08 	movweq	r0, #3336	; 0xd08
     984:	3b0b3a0e 	blcc	2cf1c4 <mailbuffer+0x2940d4>
     988:	0013490b 	andseq	r4, r3, fp, lsl #18
     98c:	00350900 	eorseq	r0, r5, r0, lsl #18
     990:	00001349 	andeq	r1, r0, r9, asr #6
     994:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     998:	00130113 	andseq	r0, r3, r3, lsl r1
     99c:	00210b00 	eoreq	r0, r1, r0, lsl #22
     9a0:	052f1349 	streq	r1, [pc, #-841]!	; 65f <_start-0x79a1>
     9a4:	130c0000 	movwne	r0, #49152	; 0xc000
     9a8:	0b0e0301 	bleq	3815b4 <mailbuffer+0x3464c4>
     9ac:	3b0b3a0b 	blcc	2cf1e0 <mailbuffer+0x2940f0>
     9b0:	0013010b 	andseq	r0, r3, fp, lsl #2
     9b4:	000d0d00 	andeq	r0, sp, r0, lsl #26
     9b8:	0b3a0e03 	bleq	e841cc <mailbuffer+0xe490dc>
     9bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9c0:	00000b38 	andeq	r0, r0, r8, lsr fp
     9c4:	3f012e0e 	svccc	0x00012e0e
     9c8:	3a0e0319 	bcc	381634 <mailbuffer+0x346544>
     9cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     9d0:	11134919 	tstne	r3, r9, lsl r9
     9d4:	40061201 	andmi	r1, r6, r1, lsl #4
     9d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     9dc:	00001301 	andeq	r1, r0, r1, lsl #6
     9e0:	0300050f 	movweq	r0, #1295	; 0x50f
     9e4:	3b0b3a0e 	blcc	2cf224 <mailbuffer+0x294134>
     9e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9ec:	10000018 	andne	r0, r0, r8, lsl r0
     9f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9f4:	0b3b0b3a 	bleq	ec36e4 <mailbuffer+0xe885f4>
     9f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     9fc:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     a00:	03193f01 	tsteq	r9, #1, 30
     a04:	3b0b3a0e 	blcc	2cf244 <mailbuffer+0x294154>
     a08:	1119270b 	tstne	r9, fp, lsl #14
     a0c:	40061201 	andmi	r1, r6, r1, lsl #4
     a10:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     a14:	00001301 	andeq	r1, r0, r1, lsl #6
     a18:	03000512 	movweq	r0, #1298	; 0x512
     a1c:	3b0b3a08 	blcc	2cf244 <mailbuffer+0x294154>
     a20:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     a24:	13000018 	movwne	r0, #24
     a28:	08030034 	stmdaeq	r3, {r2, r4, r5}
     a2c:	0b3b0b3a 	bleq	ec371c <mailbuffer+0xe8862c>
     a30:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     a34:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     a38:	03193f00 	tsteq	r9, #0, 30
     a3c:	3b0b3a0e 	blcc	2cf27c <mailbuffer+0x29418c>
     a40:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     a44:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a48:	96184006 	ldrls	r4, [r8], -r6
     a4c:	00001942 	andeq	r1, r0, r2, asr #18
     a50:	3f002e15 	svccc	0x00002e15
     a54:	3a0e0319 	bcc	3816c0 <mailbuffer+0x3465d0>
     a58:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a5c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a60:	96184006 	ldrls	r4, [r8], -r6
     a64:	00001942 	andeq	r1, r0, r2, asr #18
     a68:	03012e16 	movweq	r2, #7702	; 0x1e16
     a6c:	3b0b3a0e 	blcc	2cf2ac <mailbuffer+0x2941bc>
     a70:	11192705 	tstne	r9, r5, lsl #14
     a74:	40061201 	andmi	r1, r6, r1, lsl #4
     a78:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     a7c:	00001301 	andeq	r1, r0, r1, lsl #6
     a80:	03003417 	movweq	r3, #1047	; 0x417
     a84:	3b0b3a0e 	blcc	2cf2c4 <mailbuffer+0x2941d4>
     a88:	02134905 	andseq	r4, r3, #81920	; 0x14000
     a8c:	18000018 	stmdane	r0, {r3, r4}
     a90:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     a94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a98:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     a9c:	34190000 	ldrcc	r0, [r9], #-0
     aa0:	3a080300 	bcc	2016a8 <mailbuffer+0x1c65b8>
     aa4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     aa8:	00180213 	andseq	r0, r8, r3, lsl r2
     aac:	00261a00 	eoreq	r1, r6, r0, lsl #20
     ab0:	00001349 	andeq	r1, r0, r9, asr #6
     ab4:	0300341b 	movweq	r3, #1051	; 0x41b
     ab8:	3b0b3a0e 	blcc	2cf2f8 <mailbuffer+0x294208>
     abc:	3f13490b 	svccc	0x0013490b
     ac0:	00180219 	andseq	r0, r8, r9, lsl r2
     ac4:	11010000 	mrsne	r0, (UNDEF: 1)
     ac8:	130e2501 	movwne	r2, #58625	; 0xe501
     acc:	110e030b 	tstne	lr, fp, lsl #6
     ad0:	10061201 	andne	r1, r6, r1, lsl #4
     ad4:	02000017 	andeq	r0, r0, #23
     ad8:	0b0b0024 	bleq	2c0b70 <mailbuffer+0x285a80>
     adc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     ae0:	24030000 	strcs	r0, [r3], #-0
     ae4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ae8:	000e030b 	andeq	r0, lr, fp, lsl #6
     aec:	012e0400 	teqeq	lr, r0, lsl #8
     af0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     af4:	0b3b0b3a 	bleq	ec37e4 <mailbuffer+0xe886f4>
     af8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     afc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     b00:	00130119 	andseq	r0, r3, r9, lsl r1
     b04:	00340500 	eorseq	r0, r4, r0, lsl #10
     b08:	0b3a0803 	bleq	e82b1c <mailbuffer+0xe47a2c>
     b0c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b10:	00001802 	andeq	r1, r0, r2, lsl #16
     b14:	3f002e06 	svccc	0x00002e06
     b18:	3a0e0319 	bcc	381784 <mailbuffer+0x346694>
     b1c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b20:	11134919 	tstne	r3, r9, lsl r9
     b24:	40061201 	andmi	r1, r6, r1, lsl #4
     b28:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     b2c:	34070000 	strcc	r0, [r7], #-0
     b30:	3a0e0300 	bcc	381738 <mailbuffer+0x346648>
     b34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b38:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     b3c:	00000018 	andeq	r0, r0, r8, lsl r0
     b40:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     b44:	030b130e 	movweq	r1, #45838	; 0xb30e
     b48:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     b4c:	00171006 	andseq	r1, r7, r6
     b50:	012e0200 	teqeq	lr, r0, lsl #4
     b54:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b58:	0b3b0b3a 	bleq	ec3848 <mailbuffer+0xe88758>
     b5c:	01111927 	tsteq	r1, r7, lsr #18
     b60:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b64:	01194296 			; <UNDEFINED> instruction: 0x01194296
     b68:	03000013 	movweq	r0, #19
     b6c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b70:	0b3b0b3a 	bleq	ec3860 <mailbuffer+0xe88770>
     b74:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b78:	34040000 	strcc	r0, [r4], #-0
     b7c:	3a0e0300 	bcc	381784 <mailbuffer+0x346694>
     b80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b84:	00180213 	andseq	r0, r8, r3, lsl r2
     b88:	00240500 	eoreq	r0, r4, r0, lsl #10
     b8c:	0b3e0b0b 	bleq	f837c0 <mailbuffer+0xf486d0>
     b90:	00000803 	andeq	r0, r0, r3, lsl #16
     b94:	3f012e06 	svccc	0x00012e06
     b98:	3a0e0319 	bcc	381804 <mailbuffer+0x346714>
     b9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ba0:	11134919 	tstne	r3, r9, lsl r9
     ba4:	40061201 	andmi	r1, r6, r1, lsl #4
     ba8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     bac:	34070000 	strcc	r0, [r7], #-0
     bb0:	3a080300 	bcc	2017b8 <mailbuffer+0x1c66c8>
     bb4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bb8:	00180213 	andseq	r0, r8, r3, lsl r2
     bbc:	11010000 	mrsne	r0, (UNDEF: 1)
     bc0:	130e2501 	movwne	r2, #58625	; 0xe501
     bc4:	110e030b 	tstne	lr, fp, lsl #6
     bc8:	10061201 	andne	r1, r6, r1, lsl #4
     bcc:	02000017 	andeq	r0, r0, #23
     bd0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     bd4:	0b3a0e03 	bleq	e843e8 <mailbuffer+0xe492f8>
     bd8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     bdc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     be0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     be4:	00130119 	andseq	r0, r3, r9, lsl r1
     be8:	00050300 	andeq	r0, r5, r0, lsl #6
     bec:	0b3a0e03 	bleq	e84400 <mailbuffer+0xe49310>
     bf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bf4:	00001802 	andeq	r1, r0, r2, lsl #16
     bf8:	11010b04 	tstne	r1, r4, lsl #22
     bfc:	00061201 	andeq	r1, r6, r1, lsl #4
     c00:	00340500 	eorseq	r0, r4, r0, lsl #10
     c04:	0b3a0803 	bleq	e82c18 <mailbuffer+0xe47b28>
     c08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c0c:	00001802 	andeq	r1, r0, r2, lsl #16
     c10:	0b000f06 	bleq	4830 <_start-0x37d0>
     c14:	0700000b 	streq	r0, [r0, -fp]
     c18:	13490101 	movtne	r0, #37121	; 0x9101
     c1c:	00001301 	andeq	r1, r0, r1, lsl #6
     c20:	49002108 	stmdbmi	r0, {r3, r8, sp}
     c24:	00182f13 	andseq	r2, r8, r3, lsl pc
     c28:	00240900 	eoreq	r0, r4, r0, lsl #18
     c2c:	0b3e0b0b 	bleq	f83860 <mailbuffer+0xf48770>
     c30:	00000e03 	andeq	r0, r0, r3, lsl #28
     c34:	0b00240a 	bleq	9c64 <__module_entries_end+0x1b84>
     c38:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c3c:	0b000008 	bleq	c64 <_start-0x739c>
     c40:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c44:	0b3b0b3a 	bleq	ec3934 <mailbuffer+0xe88844>
     c48:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     c4c:	00001802 	andeq	r1, r0, r2, lsl #16
     c50:	01110100 	tsteq	r1, r0, lsl #2
     c54:	0b130e25 	bleq	4c44f0 <mailbuffer+0x489400>
     c58:	01110e03 	tsteq	r1, r3, lsl #28
     c5c:	17100612 			; <UNDEFINED> instruction: 0x17100612
     c60:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
     c64:	03193f00 	tsteq	r9, #0, 30
     c68:	3b0b3a0e 	blcc	2cf4a8 <mailbuffer+0x2943b8>
     c6c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     c70:	96184006 	ldrls	r4, [r8], -r6
     c74:	00001942 	andeq	r1, r0, r2, asr #18
     c78:	3f012e03 	svccc	0x00012e03
     c7c:	3a0e0319 	bcc	3818e8 <mailbuffer+0x3467f8>
     c80:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c84:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c88:	97184006 	ldrls	r4, [r8, -r6]
     c8c:	13011942 	movwne	r1, #6466	; 0x1942
     c90:	05040000 	streq	r0, [r4, #-0]
     c94:	3a080300 	bcc	20189c <mailbuffer+0x1c67ac>
     c98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c9c:	00180213 	andseq	r0, r8, r3, lsl r2
     ca0:	00050500 	andeq	r0, r5, r0, lsl #10
     ca4:	0b3a0e03 	bleq	e844b8 <mailbuffer+0xe493c8>
     ca8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cac:	00001802 	andeq	r1, r0, r2, lsl #16
     cb0:	0b002406 	bleq	9cd0 <__module_entries_end+0x1bf0>
     cb4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     cb8:	0700000e 	streq	r0, [r0, -lr]
     cbc:	0b0b0024 	bleq	2c0d54 <mailbuffer+0x285c64>
     cc0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     cc4:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
     cc8:	03193f01 	tsteq	r9, #1, 30
     ccc:	3b0b3a0e 	blcc	2cf50c <mailbuffer+0x29441c>
     cd0:	1119270b 	tstne	r9, fp, lsl #14
     cd4:	40061201 	andmi	r1, r6, r1, lsl #4
     cd8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     cdc:	00001301 	andeq	r1, r0, r1, lsl #6
     ce0:	03003409 	movweq	r3, #1033	; 0x409
     ce4:	3b0b3a08 	blcc	2cf50c <mailbuffer+0x29441c>
     ce8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     cec:	0a000018 	beq	d54 <_start-0x72ac>
     cf0:	0b0b000f 	bleq	2c0d34 <mailbuffer+0x285c44>
     cf4:	00001349 	andeq	r1, r0, r9, asr #6
     cf8:	4900260b 	stmdbmi	r0, {r0, r1, r3, r9, sl, sp}
     cfc:	0c000013 	stceq	0, cr0, [r0], {19}
     d00:	13490101 	movtne	r0, #37121	; 0x9101
     d04:	00001301 	andeq	r1, r0, r1, lsl #6
     d08:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
     d0c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     d10:	012e0e00 	teqeq	lr, r0, lsl #28
     d14:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d18:	0b3b0b3a 	bleq	ec3a08 <mailbuffer+0xe88918>
     d1c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d20:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     d24:	00130119 	andseq	r0, r3, r9, lsl r1
     d28:	00340f00 	eorseq	r0, r4, r0, lsl #30
     d2c:	0b3a0e03 	bleq	e84540 <mailbuffer+0xe49450>
     d30:	1349053b 	movtne	r0, #38203	; 0x953b
     d34:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     d38:	0b100000 	bleq	400d40 <mailbuffer+0x3c5c50>
     d3c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     d40:	11000006 	tstne	r0, r6
     d44:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d48:	0b3b0b3a 	bleq	ec3a38 <mailbuffer+0xe88948>
     d4c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     d50:	00001802 	andeq	r1, r0, r2, lsl #16
     d54:	03003412 	movweq	r3, #1042	; 0x412
     d58:	3b0b3a08 	blcc	2cf580 <mailbuffer+0x294490>
     d5c:	3f13490b 	svccc	0x0013490b
     d60:	00180219 	andseq	r0, r8, r9, lsl r2
     d64:	11010000 	mrsne	r0, (UNDEF: 1)
     d68:	130e2501 	movwne	r2, #58625	; 0xe501
     d6c:	110e030b 	tstne	lr, fp, lsl #6
     d70:	10061201 	andne	r1, r6, r1, lsl #4
     d74:	02000017 	andeq	r0, r0, #23
     d78:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     d7c:	0b3b0b3a 	bleq	ec3a6c <mailbuffer+0xe8897c>
     d80:	00001349 	andeq	r1, r0, r9, asr #6
     d84:	27011503 	strcs	r1, [r1, -r3, lsl #10]
     d88:	00130119 	andseq	r0, r3, r9, lsl r1
     d8c:	00050400 	andeq	r0, r5, r0, lsl #8
     d90:	00001349 	andeq	r1, r0, r9, asr #6
     d94:	0b002405 	bleq	9db0 <__module_entries_end+0x1cd0>
     d98:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     d9c:	0600000e 	streq	r0, [r0], -lr
     da0:	0b0b000f 	bleq	2c0de4 <mailbuffer+0x285cf4>
     da4:	24070000 	strcs	r0, [r7], #-0
     da8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     dac:	0008030b 	andeq	r0, r8, fp, lsl #6
     db0:	012e0800 	teqeq	lr, r0, lsl #16
     db4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     db8:	0b3b0b3a 	bleq	ec3aa8 <mailbuffer+0xe889b8>
     dbc:	01111927 	tsteq	r1, r7, lsr #18
     dc0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     dc4:	01194296 			; <UNDEFINED> instruction: 0x01194296
     dc8:	09000013 	stmdbeq	r0, {r0, r1, r4}
     dcc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     dd0:	0b3b0b3a 	bleq	ec3ac0 <mailbuffer+0xe889d0>
     dd4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     dd8:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     ddc:	03193f01 	tsteq	r9, #1, 30
     de0:	3b0b3a0e 	blcc	2cf620 <mailbuffer+0x294530>
     de4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     de8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     dec:	96184006 	ldrls	r4, [r8], -r6
     df0:	13011942 	movwne	r1, #6466	; 0x1942
     df4:	0f0b0000 	svceq	0x000b0000
     df8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     dfc:	0c000013 	stceq	0, cr0, [r0], {19}
     e00:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e04:	0b3b0b3a 	bleq	ec3af4 <mailbuffer+0xe88a04>
     e08:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e0c:	010d0000 	mrseq	r0, (UNDEF: 13)
     e10:	01134901 	tsteq	r3, r1, lsl #18
     e14:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     e18:	13490021 	movtne	r0, #36897	; 0x9021
     e1c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     e20:	0300340f 	movweq	r3, #1039	; 0x40f
     e24:	3b0b3a08 	blcc	2cf64c <mailbuffer+0x29455c>
     e28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e2c:	10000018 	andne	r0, r0, r8, lsl r0
     e30:	00000018 	andeq	r0, r0, r8, lsl r0
     e34:	49002611 	stmdbmi	r0, {r0, r4, r9, sl, sp}
     e38:	12000013 	andne	r0, r0, #19
     e3c:	00000026 	andeq	r0, r0, r6, lsr #32
     e40:	03000513 	movweq	r0, #1299	; 0x513
     e44:	3b0b3a08 	blcc	2cf66c <mailbuffer+0x29457c>
     e48:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e4c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
     e50:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e54:	0b3b0b3a 	bleq	ec3b44 <mailbuffer+0xe88a54>
     e58:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     e5c:	00001802 	andeq	r1, r0, r2, lsl #16
     e60:	01110100 	tsteq	r1, r0, lsl #2
     e64:	0b130e25 	bleq	4c4700 <mailbuffer+0x489610>
     e68:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e70:	00001710 	andeq	r1, r0, r0, lsl r7
     e74:	0b002402 	bleq	9e84 <__module_entries_end+0x1da4>
     e78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e7c:	0300000e 	movweq	r0, #14
     e80:	0b0b0024 	bleq	2c0f18 <mailbuffer+0x285e28>
     e84:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     e88:	16040000 	strne	r0, [r4], -r0
     e8c:	3a080300 	bcc	201a94 <mailbuffer+0x1c69a4>
     e90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e94:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     e98:	0b0b0104 	bleq	2c12b0 <mailbuffer+0x2861c0>
     e9c:	0b3b0b3a 	bleq	ec3b8c <mailbuffer+0xe88a9c>
     ea0:	00001301 	andeq	r1, r0, r1, lsl #6
     ea4:	03002806 	movweq	r2, #2054	; 0x806
     ea8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     eac:	01010700 	tsteq	r1, r0, lsl #14
     eb0:	13011349 	movwne	r1, #4937	; 0x1349
     eb4:	21080000 	mrscs	r0, (UNDEF: 8)
     eb8:	2f134900 	svccs	0x00134900
     ebc:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     ec0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     ec4:	0b3a0b0b 	bleq	e83af8 <mailbuffer+0xe48a08>
     ec8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ecc:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     ed0:	3a0e0300 	bcc	381ad8 <mailbuffer+0x3469e8>
     ed4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ed8:	000b3813 	andeq	r3, fp, r3, lsl r8
     edc:	00160b00 	andseq	r0, r6, r0, lsl #22
     ee0:	0b3a0e03 	bleq	e846f4 <mailbuffer+0xe49604>
     ee4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ee8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     eec:	3a080300 	bcc	201af4 <mailbuffer+0x1c6a04>
     ef0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ef4:	000b3813 	andeq	r3, fp, r3, lsl r8
     ef8:	012e0d00 	teqeq	lr, r0, lsl #26
     efc:	0803193f 	stmdaeq	r3, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     f00:	0b3b0b3a 	bleq	ec3bf0 <mailbuffer+0xe88b00>
     f04:	01111349 	tsteq	r1, r9, asr #6
     f08:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f0c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     f10:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     f14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f18:	0b3b0b3a 	bleq	ec3c08 <mailbuffer+0xe88b18>
     f1c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f20:	0b0f0000 	bleq	3c0f28 <mailbuffer+0x385e38>
     f24:	00175501 	andseq	r5, r7, r1, lsl #10
     f28:	00211000 	eoreq	r1, r1, r0
     f2c:	052f1349 	streq	r1, [pc, #-841]!	; beb <_start-0x7415>
     f30:	0f110000 	svceq	0x00110000
     f34:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     f38:	12000013 	andne	r0, r0, #19
     f3c:	13490026 	movtne	r0, #36902	; 0x9026
     f40:	01000000 	mrseq	r0, (UNDEF: 0)
     f44:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     f48:	0e030b13 	vmoveq.32	d3[0], r0
     f4c:	01110e1b 	tsteq	r1, fp, lsl lr
     f50:	17100612 			; <UNDEFINED> instruction: 0x17100612
     f54:	16020000 	strne	r0, [r2], -r0
     f58:	3a080300 	bcc	201b60 <mailbuffer+0x1c6a70>
     f5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f60:	03000013 	movweq	r0, #19
     f64:	0b0b0024 	bleq	2c0ffc <mailbuffer+0x285f0c>
     f68:	0e030b3e 	vmoveq.16	d3[0], r0
     f6c:	24040000 	strcs	r0, [r4], #-0
     f70:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f74:	0008030b 	andeq	r0, r8, fp, lsl #6
     f78:	00160500 	andseq	r0, r6, r0, lsl #10
     f7c:	0b3a0e03 	bleq	e84790 <mailbuffer+0xe496a0>
     f80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f84:	13060000 	movwne	r0, #24576	; 0x6000
     f88:	0b0e0301 	bleq	381b94 <mailbuffer+0x346aa4>
     f8c:	3b0b3a0b 	blcc	2cf7c0 <mailbuffer+0x2946d0>
     f90:	0013010b 	andseq	r0, r3, fp, lsl #2
     f94:	000d0700 	andeq	r0, sp, r0, lsl #14
     f98:	0b3a0e03 	bleq	e847ac <mailbuffer+0xe496bc>
     f9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fa0:	00000b38 	andeq	r0, r0, r8, lsr fp
     fa4:	0b000f08 	bleq	4bcc <_start-0x3434>
     fa8:	0013490b 	andseq	r4, r3, fp, lsl #18
     fac:	000f0900 	andeq	r0, pc, r0, lsl #18
     fb0:	00000b0b 	andeq	r0, r0, fp, lsl #22
     fb4:	0b01040a 	bleq	41fe4 <mailbuffer+0x6ef4>
     fb8:	3b0b3a0b 	blcc	2cf7ec <mailbuffer+0x2946fc>
     fbc:	0013010b 	andseq	r0, r3, fp, lsl #2
     fc0:	00280b00 	eoreq	r0, r8, r0, lsl #22
     fc4:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     fc8:	130c0000 	movwne	r0, #49152	; 0xc000
     fcc:	3a0b0b01 	bcc	2c3bd8 <mailbuffer+0x288ae8>
     fd0:	010b3b0b 	tsteq	fp, fp, lsl #22
     fd4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     fd8:	0b0b0117 	bleq	2c143c <mailbuffer+0x28634c>
     fdc:	0b3b0b3a 	bleq	ec3ccc <mailbuffer+0xe88bdc>
     fe0:	00001301 	andeq	r1, r0, r1, lsl #6
     fe4:	03000d0e 	movweq	r0, #3342	; 0xd0e
     fe8:	3b0b3a0e 	blcc	2cf828 <mailbuffer+0x294738>
     fec:	0013490b 	andseq	r4, r3, fp, lsl #18
     ff0:	01010f00 	tsteq	r1, r0, lsl #30
     ff4:	13011349 	movwne	r1, #4937	; 0x1349
     ff8:	21100000 	tstcs	r0, r0
     ffc:	00134900 	andseq	r4, r3, r0, lsl #18
    1000:	00261100 	eoreq	r1, r6, r0, lsl #2
    1004:	00001349 	andeq	r1, r0, r9, asr #6
    1008:	27011512 	smladcs	r1, r2, r5, r1
    100c:	01134919 	tsteq	r3, r9, lsl r9
    1010:	13000013 	movwne	r0, #19
    1014:	13490005 	movtne	r0, #36869	; 0x9005
    1018:	15140000 	ldrne	r0, [r4, #-0]
    101c:	01192701 	tsteq	r9, r1, lsl #14
    1020:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1024:	13490035 	movtne	r0, #36917	; 0x9035
    1028:	21160000 	tstcs	r6, r0
    102c:	2f134900 	svccs	0x00134900
    1030:	1700000b 	strne	r0, [r0, -fp]
    1034:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1038:	0b3a050b 	bleq	e8246c <mailbuffer+0xe4737c>
    103c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1040:	0d180000 	ldceq	0, cr0, [r8, #-0]
    1044:	3a0e0300 	bcc	381c4c <mailbuffer+0x346b5c>
    1048:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    104c:	00053813 	andeq	r3, r5, r3, lsl r8
    1050:	00151900 	andseq	r1, r5, r0, lsl #18
    1054:	00001927 	andeq	r1, r0, r7, lsr #18
    1058:	3f012e1a 	svccc	0x00012e1a
    105c:	3a0e0319 	bcc	381cc8 <mailbuffer+0x346bd8>
    1060:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1064:	11134919 	tstne	r3, r9, lsl r9
    1068:	40061201 	andmi	r1, r6, r1, lsl #4
    106c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1070:	00001301 	andeq	r1, r0, r1, lsl #6
    1074:	11010b1b 	tstne	r1, fp, lsl fp
    1078:	01061201 	tsteq	r6, r1, lsl #4
    107c:	1c000013 	stcne	0, cr0, [r0], {19}
    1080:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1084:	0b3b0b3a 	bleq	ec3d74 <mailbuffer+0xe88c84>
    1088:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    108c:	0b1d0000 	bleq	741094 <mailbuffer+0x705fa4>
    1090:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1094:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    1098:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    109c:	0b3b0b3a 	bleq	ec3d8c <mailbuffer+0xe88c9c>
    10a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    10a4:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    10a8:	03193f00 	tsteq	r9, #0, 30
    10ac:	3b0b3a0e 	blcc	2cf8ec <mailbuffer+0x2947fc>
    10b0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    10b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    10b8:	96184006 	ldrls	r4, [r8], -r6
    10bc:	00001942 	andeq	r1, r0, r2, asr #18
    10c0:	3f012e20 	svccc	0x00012e20
    10c4:	3a0e0319 	bcc	381d30 <mailbuffer+0x346c40>
    10c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10d0:	96184006 	ldrls	r4, [r8], -r6
    10d4:	13011942 	movwne	r1, #6466	; 0x1942
    10d8:	05210000 	streq	r0, [r1, #-0]!
    10dc:	3a0e0300 	bcc	381ce4 <mailbuffer+0x346bf4>
    10e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10e4:	00180213 	andseq	r0, r8, r3, lsl r2
    10e8:	00262200 	eoreq	r2, r6, r0, lsl #4
    10ec:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    10f0:	03193f01 	tsteq	r9, #1, 30
    10f4:	3b0b3a0e 	blcc	2cf934 <mailbuffer+0x294844>
    10f8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    10fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1100:	96184006 	ldrls	r4, [r8], -r6
    1104:	13011942 	movwne	r1, #6466	; 0x1942
    1108:	05240000 	streq	r0, [r4, #-0]!
    110c:	3a0e0300 	bcc	381d14 <mailbuffer+0x346c24>
    1110:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1114:	00180213 	andseq	r0, r8, r3, lsl r2
    1118:	00342500 	eorseq	r2, r4, r0, lsl #10
    111c:	0b3a0e03 	bleq	e84930 <mailbuffer+0xe49840>
    1120:	1349053b 	movtne	r0, #38203	; 0x953b
    1124:	00001802 	andeq	r1, r0, r2, lsl #16
    1128:	01110100 	tsteq	r1, r0, lsl #2
    112c:	0b130e25 	bleq	4c49c8 <mailbuffer+0x4898d8>
    1130:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1134:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1138:	00001710 	andeq	r1, r0, r0, lsl r7
    113c:	0b010402 	bleq	4214c <mailbuffer+0x705c>
    1140:	3b0b3a0b 	blcc	2cf974 <mailbuffer+0x294884>
    1144:	0013010b 	andseq	r0, r3, fp, lsl #2
    1148:	00280300 	eoreq	r0, r8, r0, lsl #6
    114c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1150:	16040000 	strne	r0, [r4], -r0
    1154:	3a0e0300 	bcc	381d5c <mailbuffer+0x346c6c>
    1158:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    115c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    1160:	0b0b0113 	bleq	2c15b4 <mailbuffer+0x2864c4>
    1164:	0b3b0b3a 	bleq	ec3e54 <mailbuffer+0xe88d64>
    1168:	00001301 	andeq	r1, r0, r1, lsl #6
    116c:	03000d06 	movweq	r0, #3334	; 0xd06
    1170:	3b0b3a0e 	blcc	2cf9b0 <mailbuffer+0x2948c0>
    1174:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1178:	0700000b 	streq	r0, [r0, -fp]
    117c:	0b0b0024 	bleq	2c1214 <mailbuffer+0x286124>
    1180:	0e030b3e 	vmoveq.16	d3[0], r0
    1184:	17080000 	strne	r0, [r8, -r0]
    1188:	3a0b0b01 	bcc	2c3d94 <mailbuffer+0x288ca4>
    118c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1190:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1194:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1198:	0b3b0b3a 	bleq	ec3e88 <mailbuffer+0xe88d98>
    119c:	00001349 	andeq	r1, r0, r9, asr #6
    11a0:	0301130a 	movweq	r1, #4874	; 0x130a
    11a4:	3a0b0b0e 	bcc	2c3de4 <mailbuffer+0x288cf4>
    11a8:	010b3b0b 	tsteq	fp, fp, lsl #22
    11ac:	0b000013 	bleq	1200 <_start-0x6e00>
    11b0:	13490101 	movtne	r0, #37121	; 0x9101
    11b4:	00001301 	andeq	r1, r0, r1, lsl #6
    11b8:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
    11bc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    11c0:	08030016 	stmdaeq	r3, {r1, r2, r4}
    11c4:	0b3b0b3a 	bleq	ec3eb4 <mailbuffer+0xe88dc4>
    11c8:	00001349 	andeq	r1, r0, r9, asr #6
    11cc:	0b00240e 	bleq	a20c <__module_entries_end+0x212c>
    11d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    11d4:	0f000008 	svceq	0x00000008
    11d8:	0b0b000f 	bleq	2c121c <mailbuffer+0x28612c>
    11dc:	00001349 	andeq	r1, r0, r9, asr #6
    11e0:	49002610 	stmdbmi	r0, {r4, r9, sl, sp}
    11e4:	11000013 	tstne	r0, r3, lsl r0
    11e8:	0b0b000f 	bleq	2c122c <mailbuffer+0x28613c>
    11ec:	15120000 	ldrne	r0, [r2, #-0]
    11f0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    11f4:	00130113 	andseq	r0, r3, r3, lsl r1
    11f8:	00051300 	andeq	r1, r5, r0, lsl #6
    11fc:	00001349 	andeq	r1, r0, r9, asr #6
    1200:	27011514 	smladcs	r1, r4, r5, r1
    1204:	00130119 	andseq	r0, r3, r9, lsl r1
    1208:	00351500 	eorseq	r1, r5, r0, lsl #10
    120c:	00001349 	andeq	r1, r0, r9, asr #6
    1210:	49002116 	stmdbmi	r0, {r1, r2, r4, r8, sp}
    1214:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1218:	012e1700 	teqeq	lr, r0, lsl #14
    121c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1220:	0b3b0b3a 	bleq	ec3f10 <mailbuffer+0xe88e20>
    1224:	01111927 	tsteq	r1, r7, lsr #18
    1228:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    122c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1230:	18000013 	stmdane	r0, {r0, r1, r4}
    1234:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1238:	0b3b0b3a 	bleq	ec3f28 <mailbuffer+0xe88e38>
    123c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1240:	0b190000 	bleq	641248 <mailbuffer+0x606158>
    1244:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1248:	1a000006 	bne	1268 <_start-0x6d98>
    124c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1250:	0b3b0b3a 	bleq	ec3f40 <mailbuffer+0xe88e50>
    1254:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1258:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    125c:	03193f01 	tsteq	r9, #1, 30
    1260:	3b0b3a0e 	blcc	2cfaa0 <mailbuffer+0x2949b0>
    1264:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1268:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    126c:	96184006 	ldrls	r4, [r8], -r6
    1270:	13011942 	movwne	r1, #6466	; 0x1942
    1274:	341c0000 	ldrcc	r0, [ip], #-0
    1278:	3a080300 	bcc	201e80 <mailbuffer+0x1c6d90>
    127c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1280:	00180213 	andseq	r0, r8, r3, lsl r2
    1284:	012e1d00 	teqeq	lr, r0, lsl #26
    1288:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    128c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1290:	13491927 	movtne	r1, #39207	; 0x9927
    1294:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1298:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    129c:	00130119 	andseq	r0, r3, r9, lsl r1
    12a0:	00051e00 	andeq	r1, r5, r0, lsl #28
    12a4:	0b3a0e03 	bleq	e84ab8 <mailbuffer+0xe499c8>
    12a8:	1349053b 	movtne	r0, #38203	; 0x953b
    12ac:	00001802 	andeq	r1, r0, r2, lsl #16
    12b0:	0300341f 	movweq	r3, #1055	; 0x41f
    12b4:	3b0b3a08 	blcc	2cfadc <mailbuffer+0x2949ec>
    12b8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    12bc:	20000018 	andcs	r0, r0, r8, lsl r0
    12c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    12c8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    12cc:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    12d0:	03193f01 	tsteq	r9, #1, 30
    12d4:	3b0b3a0e 	blcc	2cfb14 <mailbuffer+0x294a24>
    12d8:	11192705 	tstne	r9, r5, lsl #14
    12dc:	40061201 	andmi	r1, r6, r1, lsl #4
    12e0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    12e4:	00001301 	andeq	r1, r0, r1, lsl #6
    12e8:	03000522 	movweq	r0, #1314	; 0x522
    12ec:	3b0b3a08 	blcc	2cfb14 <mailbuffer+0x294a24>
    12f0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    12f4:	23000018 	movwcs	r0, #24
    12f8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    12fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1300:	00000111 	andeq	r0, r0, r1, lsl r1
    1304:	11010b24 	tstne	r1, r4, lsr #22
    1308:	01061201 	tsteq	r6, r1, lsl #4
    130c:	00000013 	andeq	r0, r0, r3, lsl r0
    1310:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1314:	030b130e 	movweq	r1, #45838	; 0xb30e
    1318:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    131c:	00171006 	andseq	r1, r7, r6
    1320:	00240200 	eoreq	r0, r4, r0, lsl #4
    1324:	0b3e0b0b 	bleq	f83f58 <mailbuffer+0xf48e68>
    1328:	00000e03 	andeq	r0, r0, r3, lsl #28
    132c:	03001603 	movweq	r1, #1539	; 0x603
    1330:	3b0b3a08 	blcc	2cfb58 <mailbuffer+0x294a68>
    1334:	0013490b 	andseq	r4, r3, fp, lsl #18
    1338:	00240400 	eoreq	r0, r4, r0, lsl #8
    133c:	0b3e0b0b 	bleq	f83f70 <mailbuffer+0xf48e80>
    1340:	00000803 	andeq	r0, r0, r3, lsl #16
    1344:	03001605 	movweq	r1, #1541	; 0x605
    1348:	3b0b3a0e 	blcc	2cfb88 <mailbuffer+0x294a98>
    134c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1350:	01130600 	tsteq	r3, r0, lsl #12
    1354:	0b0b0e03 	bleq	2c4b68 <mailbuffer+0x289a78>
    1358:	0b3b0b3a 	bleq	ec4048 <mailbuffer+0xe88f58>
    135c:	00001301 	andeq	r1, r0, r1, lsl #6
    1360:	03000d07 	movweq	r0, #3335	; 0xd07
    1364:	3b0b3a0e 	blcc	2cfba4 <mailbuffer+0x294ab4>
    1368:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    136c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1374:	0b3a0e03 	bleq	e84b88 <mailbuffer+0xe49a98>
    1378:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    137c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1380:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1384:	00130119 	andseq	r0, r3, r9, lsl r1
    1388:	00050900 	andeq	r0, r5, r0, lsl #18
    138c:	0b3a0e03 	bleq	e84ba0 <mailbuffer+0xe49ab0>
    1390:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1394:	00001802 	andeq	r1, r0, r2, lsl #16
    1398:	0b000f0a 	bleq	4fc8 <_start-0x3038>
    139c:	0013490b 	andseq	r4, r3, fp, lsl #18
    13a0:	012e0b00 	teqeq	lr, r0, lsl #22
    13a4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13a8:	0b3b0b3a 	bleq	ec4098 <mailbuffer+0xe88fa8>
    13ac:	13491927 	movtne	r1, #39207	; 0x9927
    13b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    13b4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    13b8:	00130119 	andseq	r0, r3, r9, lsl r1
    13bc:	012e0c00 	teqeq	lr, r0, lsl #24
    13c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13c4:	0b3b0b3a 	bleq	ec40b4 <mailbuffer+0xe88fc4>
    13c8:	01111927 	tsteq	r1, r7, lsr #18
    13cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    13d0:	00194296 	mulseq	r9, r6, r2
    13d4:	11010000 	mrsne	r0, (UNDEF: 1)
    13d8:	130e2501 	movwne	r2, #58625	; 0xe501
    13dc:	1b0e030b 	blne	382010 <mailbuffer+0x346f20>
    13e0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    13e4:	00171006 	andseq	r1, r7, r6
    13e8:	01040200 	mrseq	r0, R12_usr
    13ec:	0b3a0b0b 	bleq	e84020 <mailbuffer+0xe48f30>
    13f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    13f4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    13f8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    13fc:	0400000d 	streq	r0, [r0], #-13
    1400:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1404:	0b3b0b3a 	bleq	ec40f4 <mailbuffer+0xe89004>
    1408:	00001349 	andeq	r1, r0, r9, asr #6
    140c:	0b011305 	bleq	46028 <mailbuffer+0xaf38>
    1410:	3b0b3a0b 	blcc	2cfc44 <mailbuffer+0x294b54>
    1414:	0013010b 	andseq	r0, r3, fp, lsl #2
    1418:	000d0600 	andeq	r0, sp, r0, lsl #12
    141c:	0b3a0e03 	bleq	e84c30 <mailbuffer+0xe49b40>
    1420:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1424:	00000b38 	andeq	r0, r0, r8, lsr fp
    1428:	0b002407 	bleq	a44c <__module_entries_end+0x236c>
    142c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1430:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1434:	0b0b0117 	bleq	2c1898 <mailbuffer+0x2867a8>
    1438:	0b3b0b3a 	bleq	ec4128 <mailbuffer+0xe89038>
    143c:	00001301 	andeq	r1, r0, r1, lsl #6
    1440:	03000d09 	movweq	r0, #3337	; 0xd09
    1444:	3b0b3a0e 	blcc	2cfc84 <mailbuffer+0x294b94>
    1448:	0013490b 	andseq	r4, r3, fp, lsl #18
    144c:	01130a00 	tsteq	r3, r0, lsl #20
    1450:	0b0b0e03 	bleq	2c4c64 <mailbuffer+0x289b74>
    1454:	0b3b0b3a 	bleq	ec4144 <mailbuffer+0xe89054>
    1458:	00001301 	andeq	r1, r0, r1, lsl #6
    145c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    1460:	00130113 	andseq	r0, r3, r3, lsl r1
    1464:	00210c00 	eoreq	r0, r1, r0, lsl #24
    1468:	00001349 	andeq	r1, r0, r9, asr #6
    146c:	0300160d 	movweq	r1, #1549	; 0x60d
    1470:	3b0b3a08 	blcc	2cfc98 <mailbuffer+0x294ba8>
    1474:	0013490b 	andseq	r4, r3, fp, lsl #18
    1478:	00240e00 	eoreq	r0, r4, r0, lsl #28
    147c:	0b3e0b0b 	bleq	f840b0 <mailbuffer+0xf48fc0>
    1480:	00000803 	andeq	r0, r0, r3, lsl #16
    1484:	0b000f0f 	bleq	50c8 <_start-0x2f38>
    1488:	0013490b 	andseq	r4, r3, fp, lsl #18
    148c:	00261000 	eoreq	r1, r6, r0
    1490:	00001349 	andeq	r1, r0, r9, asr #6
    1494:	0b000f11 	bleq	50e0 <_start-0x2f20>
    1498:	1200000b 	andne	r0, r0, #11
    149c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    14a0:	13011349 	movwne	r1, #4937	; 0x1349
    14a4:	05130000 	ldreq	r0, [r3, #-0]
    14a8:	00134900 	andseq	r4, r3, r0, lsl #18
    14ac:	00131400 	andseq	r1, r3, r0, lsl #8
    14b0:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    14b4:	15150000 	ldrne	r0, [r5, #-0]
    14b8:	01192701 	tsteq	r9, r1, lsl #14
    14bc:	16000013 			; <UNDEFINED> instruction: 0x16000013
    14c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    14c4:	0b3a0e03 	bleq	e84cd8 <mailbuffer+0xe49be8>
    14c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    14cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    14d0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    14d4:	00130119 	andseq	r0, r3, r9, lsl r1
    14d8:	00051700 	andeq	r1, r5, r0, lsl #14
    14dc:	0b3a0e03 	bleq	e84cf0 <mailbuffer+0xe49c00>
    14e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14e4:	00001802 	andeq	r1, r0, r2, lsl #16
    14e8:	03000518 	movweq	r0, #1304	; 0x518
    14ec:	3b0b3a08 	blcc	2cfd14 <mailbuffer+0x294c24>
    14f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    14f4:	19000018 	stmdbne	r0, {r3, r4}
    14f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14fc:	0b3b0b3a 	bleq	ec41ec <mailbuffer+0xe890fc>
    1500:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1504:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    1508:	03193f01 	tsteq	r9, #1, 30
    150c:	3b0b3a0e 	blcc	2cfd4c <mailbuffer+0x294c5c>
    1510:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1514:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1518:	96184006 	ldrls	r4, [r8], -r6
    151c:	13011942 	movwne	r1, #6466	; 0x1942
    1520:	341b0000 	ldrcc	r0, [fp], #-0
    1524:	3a0e0300 	bcc	38212c <mailbuffer+0x34703c>
    1528:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    152c:	00180213 	andseq	r0, r8, r3, lsl r2
    1530:	012e1c00 	teqeq	lr, r0, lsl #24
    1534:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1538:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    153c:	13491927 	movtne	r1, #39207	; 0x9927
    1540:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1544:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1548:	00130119 	andseq	r0, r3, r9, lsl r1
    154c:	00051d00 	andeq	r1, r5, r0, lsl #26
    1550:	0b3a0e03 	bleq	e84d64 <mailbuffer+0xe49c74>
    1554:	1349053b 	movtne	r0, #38203	; 0x953b
    1558:	00001802 	andeq	r1, r0, r2, lsl #16
    155c:	3f012e1e 	svccc	0x00012e1e
    1560:	3a0e0319 	bcc	3821cc <mailbuffer+0x3470dc>
    1564:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1568:	11134919 	tstne	r3, r9, lsl r9
    156c:	40061201 	andmi	r1, r6, r1, lsl #4
    1570:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1574:	01000000 	mrseq	r0, (UNDEF: 0)
    1578:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    157c:	0e030b13 	vmoveq.32	d3[0], r0
    1580:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1584:	00001710 	andeq	r1, r0, r0, lsl r7
    1588:	0b002402 	bleq	a598 <__module_entries_end+0x24b8>
    158c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1590:	0300000e 	movweq	r0, #14
    1594:	0b0b0113 	bleq	2c19e8 <mailbuffer+0x2868f8>
    1598:	0b3b0b3a 	bleq	ec4288 <mailbuffer+0xe89198>
    159c:	00001301 	andeq	r1, r0, r1, lsl #6
    15a0:	03000d04 	movweq	r0, #3332	; 0xd04
    15a4:	3b0b3a0e 	blcc	2cfde4 <mailbuffer+0x294cf4>
    15a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    15ac:	0500000b 	streq	r0, [r0, #-11]
    15b0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    15b4:	0b3b0b3a 	bleq	ec42a4 <mailbuffer+0xe891b4>
    15b8:	00001349 	andeq	r1, r0, r9, asr #6
    15bc:	0b011706 	bleq	471dc <mailbuffer+0xc0ec>
    15c0:	3b0b3a0b 	blcc	2cfdf4 <mailbuffer+0x294d04>
    15c4:	0013010b 	andseq	r0, r3, fp, lsl #2
    15c8:	000d0700 	andeq	r0, sp, r0, lsl #14
    15cc:	0b3a0e03 	bleq	e84de0 <mailbuffer+0xe49cf0>
    15d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    15d4:	16080000 	strne	r0, [r8], -r0
    15d8:	3a080300 	bcc	2021e0 <mailbuffer+0x1c70f0>
    15dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15e0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    15e4:	0b0b0024 	bleq	2c167c <mailbuffer+0x28658c>
    15e8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    15ec:	130a0000 	movwne	r0, #40960	; 0xa000
    15f0:	0b0e0301 	bleq	3821fc <mailbuffer+0x34710c>
    15f4:	3b0b3a0b 	blcc	2cfe28 <mailbuffer+0x294d38>
    15f8:	0013010b 	andseq	r0, r3, fp, lsl #2
    15fc:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1600:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1604:	260c0000 	strcs	r0, [ip], -r0
    1608:	00134900 	andseq	r4, r3, r0, lsl #18
    160c:	012e0d00 	teqeq	lr, r0, lsl #26
    1610:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1614:	0b3b0b3a 	bleq	ec4304 <mailbuffer+0xe89214>
    1618:	01111927 	tsteq	r1, r7, lsr #18
    161c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1620:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1624:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1628:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    162c:	0b3b0b3a 	bleq	ec431c <mailbuffer+0xe8922c>
    1630:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1634:	340f0000 	strcc	r0, [pc], #-0	; 163c <_start-0x69c4>
    1638:	3a0e0300 	bcc	382240 <mailbuffer+0x347150>
    163c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1640:	00180213 	andseq	r0, r8, r3, lsl r2
    1644:	010b1000 	mrseq	r1, (UNDEF: 11)
    1648:	06120111 			; <UNDEFINED> instruction: 0x06120111
    164c:	26110000 	ldrcs	r0, [r1], -r0
    1650:	12000000 	andne	r0, r0, #0
    1654:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1658:	0b3a0e03 	bleq	e84e6c <mailbuffer+0xe49d7c>
    165c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1660:	01111349 	tsteq	r1, r9, asr #6
    1664:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1668:	01194296 			; <UNDEFINED> instruction: 0x01194296
    166c:	00000013 	andeq	r0, r0, r3, lsl r0
    1670:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1674:	030b130e 	movweq	r1, #45838	; 0xb30e
    1678:	110e1b0e 	tstne	lr, lr, lsl #22
    167c:	10061201 	andne	r1, r6, r1, lsl #4
    1680:	02000017 	andeq	r0, r0, #23
    1684:	0b0b0104 	bleq	2c1a9c <mailbuffer+0x2869ac>
    1688:	0b3b0b3a 	bleq	ec4378 <mailbuffer+0xe89288>
    168c:	00001301 	andeq	r1, r0, r1, lsl #6
    1690:	03002803 	movweq	r2, #2051	; 0x803
    1694:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1698:	00160400 	andseq	r0, r6, r0, lsl #8
    169c:	0b3a0e03 	bleq	e84eb0 <mailbuffer+0xe49dc0>
    16a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    16a4:	13050000 	movwne	r0, #20480	; 0x5000
    16a8:	3a0b0b01 	bcc	2c42b4 <mailbuffer+0x2891c4>
    16ac:	010b3b0b 	tsteq	fp, fp, lsl #22
    16b0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    16b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    16b8:	0b3b0b3a 	bleq	ec43a8 <mailbuffer+0xe892b8>
    16bc:	0b381349 	bleq	e063e8 <mailbuffer+0xdcb2f8>
    16c0:	24070000 	strcs	r0, [r7], #-0
    16c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    16c8:	000e030b 	andeq	r0, lr, fp, lsl #6
    16cc:	01170800 	tsteq	r7, r0, lsl #16
    16d0:	0b3a0b0b 	bleq	e84304 <mailbuffer+0xe49214>
    16d4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    16d8:	0d090000 	stceq	0, cr0, [r9, #-0]
    16dc:	3a0e0300 	bcc	3822e4 <mailbuffer+0x3471f4>
    16e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16e4:	0a000013 	beq	1738 <_start-0x68c8>
    16e8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    16ec:	0b3a0b0b 	bleq	e84320 <mailbuffer+0xe49230>
    16f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    16f4:	010b0000 	mrseq	r0, (UNDEF: 11)
    16f8:	01134901 	tsteq	r3, r1, lsl #18
    16fc:	0c000013 	stceq	0, cr0, [r0], {19}
    1700:	13490021 	movtne	r0, #36897	; 0x9021
    1704:	160d0000 	strne	r0, [sp], -r0
    1708:	3a080300 	bcc	202310 <mailbuffer+0x1c7220>
    170c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1710:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1714:	0b0b0024 	bleq	2c17ac <mailbuffer+0x2866bc>
    1718:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    171c:	0f0f0000 	svceq	0x000f0000
    1720:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1724:	10000013 	andne	r0, r0, r3, lsl r0
    1728:	13490026 	movtne	r0, #36902	; 0x9026
    172c:	0f110000 	svceq	0x00110000
    1730:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1734:	01151200 	tsteq	r5, r0, lsl #4
    1738:	13491927 	movtne	r1, #39207	; 0x9927
    173c:	00001301 	andeq	r1, r0, r1, lsl #6
    1740:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    1744:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    1748:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    174c:	00001301 	andeq	r1, r0, r1, lsl #6
    1750:	49003515 	stmdbmi	r0, {r0, r2, r4, r8, sl, ip, sp}
    1754:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1758:	13490021 	movtne	r0, #36897	; 0x9021
    175c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1760:	3f012e17 	svccc	0x00012e17
    1764:	3a0e0319 	bcc	3823d0 <mailbuffer+0x3472e0>
    1768:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    176c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1770:	96184006 	ldrls	r4, [r8], -r6
    1774:	13011942 	movwne	r1, #6466	; 0x1942
    1778:	05180000 	ldreq	r0, [r8, #-0]
    177c:	3a0e0300 	bcc	382384 <mailbuffer+0x347294>
    1780:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1784:	00180213 	andseq	r0, r8, r3, lsl r2
    1788:	010b1900 	tsteq	fp, r0, lsl #18
    178c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1790:	341a0000 	ldrcc	r0, [sl], #-0
    1794:	3a0e0300 	bcc	38239c <mailbuffer+0x3472ac>
    1798:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    179c:	00180213 	andseq	r0, r8, r3, lsl r2
    17a0:	012e1b00 	teqeq	lr, r0, lsl #22
    17a4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    17a8:	0b3b0b3a 	bleq	ec4498 <mailbuffer+0xe893a8>
    17ac:	13491927 	movtne	r1, #39207	; 0x9927
    17b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    17b4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    17b8:	00130119 	andseq	r0, r3, r9, lsl r1
    17bc:	00341c00 	eorseq	r1, r4, r0, lsl #24
    17c0:	0b3a0e03 	bleq	e84fd4 <mailbuffer+0xe49ee4>
    17c4:	1349053b 	movtne	r0, #38203	; 0x953b
    17c8:	00001802 	andeq	r1, r0, r2, lsl #16
    17cc:	3f012e1d 	svccc	0x00012e1d
    17d0:	3a0e0319 	bcc	38243c <mailbuffer+0x34734c>
    17d4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    17d8:	11134919 	tstne	r3, r9, lsl r9
    17dc:	40061201 	andmi	r1, r6, r1, lsl #4
    17e0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    17e4:	00001301 	andeq	r1, r0, r1, lsl #6
    17e8:	0300051e 	movweq	r0, #1310	; 0x51e
    17ec:	3b0b3a0e 	blcc	2d002c <mailbuffer+0x294f3c>
    17f0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    17f4:	1f000018 	svcne	0x00000018
    17f8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    17fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1800:	00000111 	andeq	r0, r0, r1, lsl r1
    1804:	3f012e20 	svccc	0x00012e20
    1808:	3a0e0319 	bcc	382474 <mailbuffer+0x347384>
    180c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1810:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1814:	96184006 	ldrls	r4, [r8], -r6
    1818:	13011942 	movwne	r1, #6466	; 0x1942
    181c:	01000000 	mrseq	r0, (UNDEF: 0)
    1820:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1824:	0e030b13 	vmoveq.32	d3[0], r0
    1828:	01110e1b 	tsteq	r1, fp, lsl lr
    182c:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1830:	04020000 	streq	r0, [r2], #-0
    1834:	3a0b0b01 	bcc	2c4440 <mailbuffer+0x289350>
    1838:	010b3b0b 	tsteq	fp, fp, lsl #22
    183c:	03000013 	movweq	r0, #19
    1840:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1844:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1848:	03001604 	movweq	r1, #1540	; 0x604
    184c:	3b0b3a0e 	blcc	2d008c <mailbuffer+0x294f9c>
    1850:	0013490b 	andseq	r4, r3, fp, lsl #18
    1854:	01130500 	tsteq	r3, r0, lsl #10
    1858:	0b3a0b0b 	bleq	e8448c <mailbuffer+0xe4939c>
    185c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1860:	0d060000 	stceq	0, cr0, [r6, #-0]
    1864:	3a0e0300 	bcc	38246c <mailbuffer+0x34737c>
    1868:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    186c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1870:	00240700 	eoreq	r0, r4, r0, lsl #14
    1874:	0b3e0b0b 	bleq	f844a8 <mailbuffer+0xf493b8>
    1878:	00000e03 	andeq	r0, r0, r3, lsl #28
    187c:	0b011708 	bleq	474a4 <mailbuffer+0xc3b4>
    1880:	3b0b3a0b 	blcc	2d00b4 <mailbuffer+0x294fc4>
    1884:	0013010b 	andseq	r0, r3, fp, lsl #2
    1888:	000d0900 	andeq	r0, sp, r0, lsl #18
    188c:	0b3a0e03 	bleq	e850a0 <mailbuffer+0xe49fb0>
    1890:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1894:	130a0000 	movwne	r0, #40960	; 0xa000
    1898:	0b0e0301 	bleq	3824a4 <mailbuffer+0x3473b4>
    189c:	3b0b3a0b 	blcc	2d00d0 <mailbuffer+0x294fe0>
    18a0:	0013010b 	andseq	r0, r3, fp, lsl #2
    18a4:	01010b00 	tsteq	r1, r0, lsl #22
    18a8:	13011349 	movwne	r1, #4937	; 0x1349
    18ac:	210c0000 	mrscs	r0, (UNDEF: 12)
    18b0:	00134900 	andseq	r4, r3, r0, lsl #18
    18b4:	00160d00 	andseq	r0, r6, r0, lsl #26
    18b8:	0b3a0803 	bleq	e838cc <mailbuffer+0xe487dc>
    18bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18c0:	240e0000 	strcs	r0, [lr], #-0
    18c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    18c8:	0008030b 	andeq	r0, r8, fp, lsl #6
    18cc:	000f0f00 	andeq	r0, pc, r0, lsl #30
    18d0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    18d4:	26100000 	ldrcs	r0, [r0], -r0
    18d8:	00134900 	andseq	r4, r3, r0, lsl #18
    18dc:	000f1100 	andeq	r1, pc, r0, lsl #2
    18e0:	00000b0b 	andeq	r0, r0, fp, lsl #22
    18e4:	27011512 	smladcs	r1, r2, r5, r1
    18e8:	01134919 	tsteq	r3, r9, lsl r9
    18ec:	13000013 	movwne	r0, #19
    18f0:	13490005 	movtne	r0, #36869	; 0x9005
    18f4:	21140000 	tstcs	r4, r0
    18f8:	2f134900 	svccs	0x00134900
    18fc:	1500000b 	strne	r0, [r0, #-11]
    1900:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1904:	00001301 	andeq	r1, r0, r1, lsl #6
    1908:	49003516 	stmdbmi	r0, {r1, r2, r4, r8, sl, ip, sp}
    190c:	17000013 	smladne	r0, r3, r0, r0
    1910:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1914:	0b3a050b 	bleq	e82d48 <mailbuffer+0xe47c58>
    1918:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    191c:	0d180000 	ldceq	0, cr0, [r8, #-0]
    1920:	3a0e0300 	bcc	382528 <mailbuffer+0x347438>
    1924:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1928:	00053813 	andeq	r3, r5, r3, lsl r8
    192c:	00151900 	andseq	r1, r5, r0, lsl #18
    1930:	00001927 	andeq	r1, r0, r7, lsr #18
    1934:	3f012e1a 	svccc	0x00012e1a
    1938:	3a0e0319 	bcc	3825a4 <mailbuffer+0x3474b4>
    193c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1940:	11134919 	tstne	r3, r9, lsl r9
    1944:	40061201 	andmi	r1, r6, r1, lsl #4
    1948:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    194c:	00001301 	andeq	r1, r0, r1, lsl #6
    1950:	0300051b 	movweq	r0, #1307	; 0x51b
    1954:	3b0b3a0e 	blcc	2d0194 <mailbuffer+0x2950a4>
    1958:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    195c:	1c000018 	stcne	0, cr0, [r0], {24}
    1960:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1964:	0b3b0b3a 	bleq	ec4654 <mailbuffer+0xe89564>
    1968:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    196c:	0b1d0000 	bleq	741974 <mailbuffer+0x706884>
    1970:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1974:	00130106 	andseq	r0, r3, r6, lsl #2
    1978:	010b1e00 	tsteq	fp, r0, lsl #28
    197c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1980:	01000000 	mrseq	r0, (UNDEF: 0)
    1984:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1988:	0e030b13 	vmoveq.32	d3[0], r0
    198c:	01110e1b 	tsteq	r1, fp, lsl lr
    1990:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1994:	04020000 	streq	r0, [r2], #-0
    1998:	3a0b0b01 	bcc	2c45a4 <mailbuffer+0x2894b4>
    199c:	010b3b0b 	tsteq	fp, fp, lsl #22
    19a0:	03000013 	movweq	r0, #19
    19a4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    19a8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    19ac:	03001604 	movweq	r1, #1540	; 0x604
    19b0:	3b0b3a0e 	blcc	2d01f0 <mailbuffer+0x295100>
    19b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    19b8:	00240500 	eoreq	r0, r4, r0, lsl #10
    19bc:	0b3e0b0b 	bleq	f845f0 <mailbuffer+0xf49500>
    19c0:	00000e03 	andeq	r0, r0, r3, lsl #28
    19c4:	0b011306 	bleq	465e4 <mailbuffer+0xb4f4>
    19c8:	3b0b3a0b 	blcc	2d01fc <mailbuffer+0x29510c>
    19cc:	0013010b 	andseq	r0, r3, fp, lsl #2
    19d0:	000d0700 	andeq	r0, sp, r0, lsl #14
    19d4:	0b3a0e03 	bleq	e851e8 <mailbuffer+0xe4a0f8>
    19d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    19dc:	00000b38 	andeq	r0, r0, r8, lsr fp
    19e0:	0b011708 	bleq	47608 <mailbuffer+0xc518>
    19e4:	3b0b3a0b 	blcc	2d0218 <mailbuffer+0x295128>
    19e8:	0013010b 	andseq	r0, r3, fp, lsl #2
    19ec:	000d0900 	andeq	r0, sp, r0, lsl #18
    19f0:	0b3a0e03 	bleq	e85204 <mailbuffer+0xe4a114>
    19f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    19f8:	130a0000 	movwne	r0, #40960	; 0xa000
    19fc:	0b0e0301 	bleq	382608 <mailbuffer+0x347518>
    1a00:	3b0b3a0b 	blcc	2d0234 <mailbuffer+0x295144>
    1a04:	0013010b 	andseq	r0, r3, fp, lsl #2
    1a08:	01010b00 	tsteq	r1, r0, lsl #22
    1a0c:	13011349 	movwne	r1, #4937	; 0x1349
    1a10:	210c0000 	mrscs	r0, (UNDEF: 12)
    1a14:	00134900 	andseq	r4, r3, r0, lsl #18
    1a18:	00160d00 	andseq	r0, r6, r0, lsl #26
    1a1c:	0b3a0803 	bleq	e83a30 <mailbuffer+0xe48940>
    1a20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a24:	240e0000 	strcs	r0, [lr], #-0
    1a28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1a2c:	0008030b 	andeq	r0, r8, fp, lsl #6
    1a30:	000f0f00 	andeq	r0, pc, r0, lsl #30
    1a34:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1a38:	26100000 	ldrcs	r0, [r0], -r0
    1a3c:	00134900 	andseq	r4, r3, r0, lsl #18
    1a40:	01151100 	tsteq	r5, r0, lsl #2
    1a44:	13491927 	movtne	r1, #39207	; 0x9927
    1a48:	00001301 	andeq	r1, r0, r1, lsl #6
    1a4c:	49000512 	stmdbmi	r0, {r1, r4, r8, sl}
    1a50:	13000013 	movwne	r0, #19
    1a54:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    1a58:	0000193c 	andeq	r1, r0, ip, lsr r9
    1a5c:	3f012e14 	svccc	0x00012e14
    1a60:	3a0e0319 	bcc	3826cc <mailbuffer+0x3475dc>
    1a64:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1a68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1a6c:	96184006 	ldrls	r4, [r8], -r6
    1a70:	13011942 	movwne	r1, #6466	; 0x1942
    1a74:	05150000 	ldreq	r0, [r5, #-0]
    1a78:	3a0e0300 	bcc	382680 <mailbuffer+0x347590>
    1a7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a80:	00180213 	andseq	r0, r8, r3, lsl r2
    1a84:	010b1600 	tsteq	fp, r0, lsl #12
    1a88:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1a8c:	34170000 	ldrcc	r0, [r7], #-0
    1a90:	3a0e0300 	bcc	382698 <mailbuffer+0x3475a8>
    1a94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a98:	00180213 	andseq	r0, r8, r3, lsl r2
    1a9c:	012e1800 	teqeq	lr, r0, lsl #16
    1aa0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1aa4:	0b3b0b3a 	bleq	ec4794 <mailbuffer+0xe896a4>
    1aa8:	13491927 	movtne	r1, #39207	; 0x9927
    1aac:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1ab0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1ab4:	00130119 	andseq	r0, r3, r9, lsl r1
    1ab8:	012e1900 	teqeq	lr, r0, lsl #18
    1abc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1ac0:	0b3b0b3a 	bleq	ec47b0 <mailbuffer+0xe896c0>
    1ac4:	01111927 	tsteq	r1, r7, lsr #18
    1ac8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1acc:	00194296 	mulseq	r9, r6, r2
    1ad0:	11010000 	mrsne	r0, (UNDEF: 1)
    1ad4:	130e2501 	movwne	r2, #58625	; 0xe501
    1ad8:	1b0e030b 	blne	38270c <mailbuffer+0x34761c>
    1adc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1ae0:	00171006 	andseq	r1, r7, r6
    1ae4:	01040200 	mrseq	r0, R12_usr
    1ae8:	0b3a0b0b 	bleq	e8471c <mailbuffer+0xe4962c>
    1aec:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1af0:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    1af4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1af8:	0400000d 	streq	r0, [r0], #-13
    1afc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1b00:	0b3b0b3a 	bleq	ec47f0 <mailbuffer+0xe89700>
    1b04:	00001349 	andeq	r1, r0, r9, asr #6
    1b08:	0b011305 	bleq	46724 <mailbuffer+0xb634>
    1b0c:	3b0b3a0b 	blcc	2d0340 <mailbuffer+0x295250>
    1b10:	0013010b 	andseq	r0, r3, fp, lsl #2
    1b14:	000d0600 	andeq	r0, sp, r0, lsl #12
    1b18:	0b3a0e03 	bleq	e8532c <mailbuffer+0xe4a23c>
    1b1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b20:	00000b38 	andeq	r0, r0, r8, lsr fp
    1b24:	0b002407 	bleq	ab48 <__module_entries_end+0x2a68>
    1b28:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1b2c:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1b30:	0b0b0117 	bleq	2c1f94 <mailbuffer+0x286ea4>
    1b34:	0b3b0b3a 	bleq	ec4824 <mailbuffer+0xe89734>
    1b38:	00001301 	andeq	r1, r0, r1, lsl #6
    1b3c:	03000d09 	movweq	r0, #3337	; 0xd09
    1b40:	3b0b3a0e 	blcc	2d0380 <mailbuffer+0x295290>
    1b44:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b48:	01130a00 	tsteq	r3, r0, lsl #20
    1b4c:	0b0b0e03 	bleq	2c5360 <mailbuffer+0x28a270>
    1b50:	0b3b0b3a 	bleq	ec4840 <mailbuffer+0xe89750>
    1b54:	00001301 	andeq	r1, r0, r1, lsl #6
    1b58:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    1b5c:	00130113 	andseq	r0, r3, r3, lsl r1
    1b60:	00210c00 	eoreq	r0, r1, r0, lsl #24
    1b64:	00001349 	andeq	r1, r0, r9, asr #6
    1b68:	0300160d 	movweq	r1, #1549	; 0x60d
    1b6c:	3b0b3a08 	blcc	2d0394 <mailbuffer+0x2952a4>
    1b70:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b74:	00240e00 	eoreq	r0, r4, r0, lsl #28
    1b78:	0b3e0b0b 	bleq	f847ac <mailbuffer+0xf496bc>
    1b7c:	00000803 	andeq	r0, r0, r3, lsl #16
    1b80:	0b000f0f 	bleq	57c4 <_start-0x283c>
    1b84:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b88:	00261000 	eoreq	r1, r6, r0
    1b8c:	00001349 	andeq	r1, r0, r9, asr #6
    1b90:	0b000f11 	bleq	57dc <_start-0x2824>
    1b94:	1200000b 	andne	r0, r0, #11
    1b98:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1b9c:	13011349 	movwne	r1, #4937	; 0x1349
    1ba0:	05130000 	ldreq	r0, [r3, #-0]
    1ba4:	00134900 	andseq	r4, r3, r0, lsl #18
    1ba8:	00131400 	andseq	r1, r3, r0, lsl #8
    1bac:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    1bb0:	15150000 	ldrne	r0, [r5, #-0]
    1bb4:	01192701 	tsteq	r9, r1, lsl #14
    1bb8:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1bbc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1bc0:	0b3a0e03 	bleq	e853d4 <mailbuffer+0xe4a2e4>
    1bc4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1bc8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1bcc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1bd0:	00130119 	andseq	r0, r3, r9, lsl r1
    1bd4:	00051700 	andeq	r1, r5, r0, lsl #14
    1bd8:	0b3a0e03 	bleq	e853ec <mailbuffer+0xe4a2fc>
    1bdc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1be0:	00001802 	andeq	r1, r0, r2, lsl #16
    1be4:	3f012e18 	svccc	0x00012e18
    1be8:	3a0e0319 	bcc	382854 <mailbuffer+0x347764>
    1bec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1bf0:	11134919 	tstne	r3, r9, lsl r9
    1bf4:	40061201 	andmi	r1, r6, r1, lsl #4
    1bf8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1bfc:	00001301 	andeq	r1, r0, r1, lsl #6
    1c00:	3f012e19 	svccc	0x00012e19
    1c04:	3a0e0319 	bcc	382870 <mailbuffer+0x347780>
    1c08:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1c0c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1c10:	96184006 	ldrls	r4, [r8], -r6
    1c14:	00001942 	andeq	r1, r0, r2, asr #18
    1c18:	01110100 	tsteq	r1, r0, lsl #2
    1c1c:	0b130e25 	bleq	4c54b8 <mailbuffer+0x48a3c8>
    1c20:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1c24:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1c28:	00001710 	andeq	r1, r0, r0, lsl r7
    1c2c:	0b010402 	bleq	42c3c <mailbuffer+0x7b4c>
    1c30:	3b0b3a0b 	blcc	2d0464 <mailbuffer+0x295374>
    1c34:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c38:	00280300 	eoreq	r0, r8, r0, lsl #6
    1c3c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1c40:	16040000 	strne	r0, [r4], -r0
    1c44:	3a0e0300 	bcc	38284c <mailbuffer+0x34775c>
    1c48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c4c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    1c50:	0b0b0113 	bleq	2c20a4 <mailbuffer+0x286fb4>
    1c54:	0b3b0b3a 	bleq	ec4944 <mailbuffer+0xe89854>
    1c58:	00001301 	andeq	r1, r0, r1, lsl #6
    1c5c:	03000d06 	movweq	r0, #3334	; 0xd06
    1c60:	3b0b3a0e 	blcc	2d04a0 <mailbuffer+0x2953b0>
    1c64:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1c68:	0700000b 	streq	r0, [r0, -fp]
    1c6c:	0b0b0024 	bleq	2c1d04 <mailbuffer+0x286c14>
    1c70:	0e030b3e 	vmoveq.16	d3[0], r0
    1c74:	17080000 	strne	r0, [r8, -r0]
    1c78:	3a0b0b01 	bcc	2c4884 <mailbuffer+0x289794>
    1c7c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1c80:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1c84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1c88:	0b3b0b3a 	bleq	ec4978 <mailbuffer+0xe89888>
    1c8c:	00001349 	andeq	r1, r0, r9, asr #6
    1c90:	0301130a 	movweq	r1, #4874	; 0x130a
    1c94:	3a0b0b0e 	bcc	2c48d4 <mailbuffer+0x2897e4>
    1c98:	010b3b0b 	tsteq	fp, fp, lsl #22
    1c9c:	0b000013 	bleq	1cf0 <_start-0x6310>
    1ca0:	13490101 	movtne	r0, #37121	; 0x9101
    1ca4:	00001301 	andeq	r1, r0, r1, lsl #6
    1ca8:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
    1cac:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1cb0:	13490021 	movtne	r0, #36897	; 0x9021
    1cb4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1cb8:	0300160e 	movweq	r1, #1550	; 0x60e
    1cbc:	3b0b3a08 	blcc	2d04e4 <mailbuffer+0x2953f4>
    1cc0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1cc4:	00240f00 	eoreq	r0, r4, r0, lsl #30
    1cc8:	0b3e0b0b 	bleq	f848fc <mailbuffer+0xf4980c>
    1ccc:	00000803 	andeq	r0, r0, r3, lsl #16
    1cd0:	0b000f10 	bleq	5918 <_start-0x26e8>
    1cd4:	0013490b 	andseq	r4, r3, fp, lsl #18
    1cd8:	00261100 	eoreq	r1, r6, r0, lsl #2
    1cdc:	00001349 	andeq	r1, r0, r9, asr #6
    1ce0:	0b000f12 	bleq	5930 <_start-0x26d0>
    1ce4:	1300000b 	movwne	r0, #11
    1ce8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1cec:	13011349 	movwne	r1, #4937	; 0x1349
    1cf0:	05140000 	ldreq	r0, [r4, #-0]
    1cf4:	00134900 	andseq	r4, r3, r0, lsl #18
    1cf8:	01151500 	tsteq	r5, r0, lsl #10
    1cfc:	13011927 	movwne	r1, #6439	; 0x1927
    1d00:	35160000 	ldrcc	r0, [r6, #-0]
    1d04:	00134900 	andseq	r4, r3, r0, lsl #18
    1d08:	012e1700 	teqeq	lr, r0, lsl #14
    1d0c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1d10:	0b3b0b3a 	bleq	ec4a00 <mailbuffer+0xe89910>
    1d14:	01111927 	tsteq	r1, r7, lsr #18
    1d18:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1d1c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1d20:	18000013 	stmdane	r0, {r0, r1, r4}
    1d24:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1d28:	0b3b0b3a 	bleq	ec4a18 <mailbuffer+0xe89928>
    1d2c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1d30:	0b190000 	bleq	641d38 <mailbuffer+0x606c48>
    1d34:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1d38:	1a000006 	bne	1d58 <_start-0x62a8>
    1d3c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1d40:	0b3b0b3a 	bleq	ec4a30 <mailbuffer+0xe89940>
    1d44:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1d48:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    1d4c:	03193f01 	tsteq	r9, #1, 30
    1d50:	3b0b3a0e 	blcc	2d0590 <mailbuffer+0x2954a0>
    1d54:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1d58:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1d5c:	96184006 	ldrls	r4, [r8], -r6
    1d60:	13011942 	movwne	r1, #6466	; 0x1942
    1d64:	341c0000 	ldrcc	r0, [ip], #-0
    1d68:	3a0e0300 	bcc	382970 <mailbuffer+0x347880>
    1d6c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d70:	00180213 	andseq	r0, r8, r3, lsl r2
    1d74:	010b1d00 	tsteq	fp, r0, lsl #26
    1d78:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1d7c:	00001301 	andeq	r1, r0, r1, lsl #6
    1d80:	3f012e1e 	svccc	0x00012e1e
    1d84:	3a0e0319 	bcc	3829f0 <mailbuffer+0x347900>
    1d88:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1d8c:	11134919 	tstne	r3, r9, lsl r9
    1d90:	40061201 	andmi	r1, r6, r1, lsl #4
    1d94:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1d98:	00001301 	andeq	r1, r0, r1, lsl #6
    1d9c:	0300051f 	movweq	r0, #1311	; 0x51f
    1da0:	3b0b3a0e 	blcc	2d05e0 <mailbuffer+0x2954f0>
    1da4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1da8:	00000018 	andeq	r0, r0, r8, lsl r0
    1dac:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1db0:	030b130e 	movweq	r1, #45838	; 0xb30e
    1db4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1db8:	00171006 	andseq	r1, r7, r6
    1dbc:	00240200 	eoreq	r0, r4, r0, lsl #4
    1dc0:	0b3e0b0b 	bleq	f849f4 <mailbuffer+0xf49904>
    1dc4:	00000e03 	andeq	r0, r0, r3, lsl #28
    1dc8:	0b002403 	bleq	addc <__module_entries_end+0x2cfc>
    1dcc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1dd0:	04000008 	streq	r0, [r0], #-8
    1dd4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1dd8:	0b3b0b3a 	bleq	ec4ac8 <mailbuffer+0xe899d8>
    1ddc:	00001349 	andeq	r1, r0, r9, asr #6
    1de0:	03011305 	movweq	r1, #4869	; 0x1305
    1de4:	3a0b0b0e 	bcc	2c4a24 <mailbuffer+0x289934>
    1de8:	010b3b0b 	tsteq	fp, fp, lsl #22
    1dec:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1df0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1df4:	0b3b0b3a 	bleq	ec4ae4 <mailbuffer+0xe899f4>
    1df8:	0b381349 	bleq	e06b24 <mailbuffer+0xdcba34>
    1dfc:	0f070000 	svceq	0x00070000
    1e00:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1e04:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1e08:	0b0b000f 	bleq	2c1e4c <mailbuffer+0x286d5c>
    1e0c:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    1e10:	03193f01 	tsteq	r9, #1, 30
    1e14:	3b0b3a0e 	blcc	2d0654 <mailbuffer+0x295564>
    1e18:	1119270b 	tstne	r9, fp, lsl #14
    1e1c:	40061201 	andmi	r1, r6, r1, lsl #4
    1e20:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1e24:	00001301 	andeq	r1, r0, r1, lsl #6
    1e28:	0300050a 	movweq	r0, #1290	; 0x50a
    1e2c:	3b0b3a0e 	blcc	2d066c <mailbuffer+0x29557c>
    1e30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e34:	0b000018 	bleq	1e9c <_start-0x6164>
    1e38:	0111010b 	tsteq	r1, fp, lsl #2
    1e3c:	00000612 	andeq	r0, r0, r2, lsl r6
    1e40:	0300340c 	movweq	r3, #1036	; 0x40c
    1e44:	3b0b3a0e 	blcc	2d0684 <mailbuffer+0x295594>
    1e48:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e4c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
    1e50:	13490026 	movtne	r0, #36902	; 0x9026
    1e54:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    1e58:	03193f01 	tsteq	r9, #1, 30
    1e5c:	3b0b3a0e 	blcc	2d069c <mailbuffer+0x2955ac>
    1e60:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1e64:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1e68:	96184006 	ldrls	r4, [r8], -r6
    1e6c:	13011942 	movwne	r1, #6466	; 0x1942
    1e70:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1e74:	03193f00 	tsteq	r9, #0, 30
    1e78:	3b0b3a0e 	blcc	2d06b8 <mailbuffer+0x2955c8>
    1e7c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1e80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1e84:	96184006 	ldrls	r4, [r8], -r6
    1e88:	00001942 	andeq	r1, r0, r2, asr #18
    1e8c:	01110100 	tsteq	r1, r0, lsl #2
    1e90:	0b130e25 	bleq	4c572c <mailbuffer+0x48a63c>
    1e94:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1e98:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1e9c:	00001710 	andeq	r1, r0, r0, lsl r7
    1ea0:	03001602 	movweq	r1, #1538	; 0x602
    1ea4:	3b0b3a08 	blcc	2d06cc <mailbuffer+0x2955dc>
    1ea8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1eac:	00240300 	eoreq	r0, r4, r0, lsl #6
    1eb0:	0b3e0b0b 	bleq	f84ae4 <mailbuffer+0xf499f4>
    1eb4:	00000e03 	andeq	r0, r0, r3, lsl #28
    1eb8:	0b002404 	bleq	aed0 <__module_entries_end+0x2df0>
    1ebc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1ec0:	05000008 	streq	r0, [r0, #-8]
    1ec4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1ec8:	0b3b0b3a 	bleq	ec4bb8 <mailbuffer+0xe89ac8>
    1ecc:	00001349 	andeq	r1, r0, r9, asr #6
    1ed0:	03011306 	movweq	r1, #4870	; 0x1306
    1ed4:	3a0b0b0e 	bcc	2c4b14 <mailbuffer+0x289a24>
    1ed8:	010b3b0b 	tsteq	fp, fp, lsl #22
    1edc:	07000013 	smladeq	r0, r3, r0, r0
    1ee0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1ee4:	0b3b0b3a 	bleq	ec4bd4 <mailbuffer+0xe89ae4>
    1ee8:	0b381349 	bleq	e06c14 <mailbuffer+0xdcbb24>
    1eec:	0f080000 	svceq	0x00080000
    1ef0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1ef4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1ef8:	13490101 	movtne	r0, #37121	; 0x9101
    1efc:	00001301 	andeq	r1, r0, r1, lsl #6
    1f00:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    1f04:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1f08:	012e0b00 	teqeq	lr, r0, lsl #22
    1f0c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1f10:	0b3b0b3a 	bleq	ec4c00 <mailbuffer+0xe89b10>
    1f14:	01111927 	tsteq	r1, r7, lsr #18
    1f18:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1f1c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1f20:	0c000013 	stceq	0, cr0, [r0], {19}
    1f24:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1f28:	0b3b0b3a 	bleq	ec4c18 <mailbuffer+0xe89b28>
    1f2c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1f30:	260d0000 	strcs	r0, [sp], -r0
    1f34:	00134900 	andseq	r4, r3, r0, lsl #18
    1f38:	012e0e00 	teqeq	lr, r0, lsl #28
    1f3c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1f40:	0b3b0b3a 	bleq	ec4c30 <mailbuffer+0xe89b40>
    1f44:	13491927 	movtne	r1, #39207	; 0x9927
    1f48:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1f4c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1f50:	00130119 	andseq	r0, r3, r9, lsl r1
    1f54:	010b0f00 	tsteq	fp, r0, lsl #30
    1f58:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1f5c:	34100000 	ldrcc	r0, [r0], #-0
    1f60:	3a080300 	bcc	202b68 <mailbuffer+0x1c7a78>
    1f64:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f68:	00180213 	andseq	r0, r8, r3, lsl r2
    1f6c:	11010000 	mrsne	r0, (UNDEF: 1)
    1f70:	130e2501 	movwne	r2, #58625	; 0xe501
    1f74:	1b0e030b 	blne	382ba8 <mailbuffer+0x347ab8>
    1f78:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1f7c:	00171006 	andseq	r1, r7, r6
    1f80:	01040200 	mrseq	r0, R12_usr
    1f84:	0b3a0b0b 	bleq	e84bb8 <mailbuffer+0xe49ac8>
    1f88:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1f8c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    1f90:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1f94:	0400000d 	streq	r0, [r0], #-13
    1f98:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1f9c:	0b3b0b3a 	bleq	ec4c8c <mailbuffer+0xe89b9c>
    1fa0:	00001349 	andeq	r1, r0, r9, asr #6
    1fa4:	0b011305 	bleq	46bc0 <mailbuffer+0xbad0>
    1fa8:	3b0b3a0b 	blcc	2d07dc <mailbuffer+0x2956ec>
    1fac:	0013010b 	andseq	r0, r3, fp, lsl #2
    1fb0:	000d0600 	andeq	r0, sp, r0, lsl #12
    1fb4:	0b3a0e03 	bleq	e857c8 <mailbuffer+0xe4a6d8>
    1fb8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1fbc:	00000b38 	andeq	r0, r0, r8, lsr fp
    1fc0:	0b002407 	bleq	afe4 <__module_entries_end+0x2f04>
    1fc4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1fc8:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1fcc:	0b0b0117 	bleq	2c2430 <mailbuffer+0x287340>
    1fd0:	0b3b0b3a 	bleq	ec4cc0 <mailbuffer+0xe89bd0>
    1fd4:	00001301 	andeq	r1, r0, r1, lsl #6
    1fd8:	03000d09 	movweq	r0, #3337	; 0xd09
    1fdc:	3b0b3a0e 	blcc	2d081c <mailbuffer+0x29572c>
    1fe0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1fe4:	01130a00 	tsteq	r3, r0, lsl #20
    1fe8:	0b0b0e03 	bleq	2c57fc <mailbuffer+0x28a70c>
    1fec:	0b3b0b3a 	bleq	ec4cdc <mailbuffer+0xe89bec>
    1ff0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ff4:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    1ff8:	00130113 	andseq	r0, r3, r3, lsl r1
    1ffc:	00210c00 	eoreq	r0, r1, r0, lsl #24
    2000:	00001349 	andeq	r1, r0, r9, asr #6
    2004:	0300160d 	movweq	r1, #1549	; 0x60d
    2008:	3b0b3a08 	blcc	2d0830 <mailbuffer+0x295740>
    200c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2010:	00240e00 	eoreq	r0, r4, r0, lsl #28
    2014:	0b3e0b0b 	bleq	f84c48 <mailbuffer+0xf49b58>
    2018:	00000803 	andeq	r0, r0, r3, lsl #16
    201c:	0b000f0f 	bleq	5c60 <_start-0x23a0>
    2020:	0013490b 	andseq	r4, r3, fp, lsl #18
    2024:	00261000 	eoreq	r1, r6, r0
    2028:	00001349 	andeq	r1, r0, r9, asr #6
    202c:	0b000f11 	bleq	5c78 <_start-0x2388>
    2030:	1200000b 	andne	r0, r0, #11
    2034:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2038:	13011349 	movwne	r1, #4937	; 0x1349
    203c:	05130000 	ldreq	r0, [r3, #-0]
    2040:	00134900 	andseq	r4, r3, r0, lsl #18
    2044:	01151400 	tsteq	r5, r0, lsl #8
    2048:	13011927 	movwne	r1, #6439	; 0x1927
    204c:	21150000 	tstcs	r5, r0
    2050:	2f134900 	svccs	0x00134900
    2054:	1600000b 	strne	r0, [r0], -fp
    2058:	13490035 	movtne	r0, #36917	; 0x9035
    205c:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    2060:	03193f01 	tsteq	r9, #1, 30
    2064:	3b0b3a0e 	blcc	2d08a4 <mailbuffer+0x2957b4>
    2068:	1119270b 	tstne	r9, fp, lsl #14
    206c:	40061201 	andmi	r1, r6, r1, lsl #4
    2070:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2074:	00001301 	andeq	r1, r0, r1, lsl #6
    2078:	03000518 	movweq	r0, #1304	; 0x518
    207c:	3b0b3a0e 	blcc	2d08bc <mailbuffer+0x2957cc>
    2080:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2084:	19000018 	stmdbne	r0, {r3, r4}
    2088:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    208c:	0b3a0e03 	bleq	e858a0 <mailbuffer+0xe4a7b0>
    2090:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2094:	01111349 	tsteq	r1, r9, asr #6
    2098:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    209c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    20a0:	1a000013 	bne	20f4 <_start-0x5f0c>
    20a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    20a8:	0b3b0b3a 	bleq	ec4d98 <mailbuffer+0xe89ca8>
    20ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    20b0:	341b0000 	ldrcc	r0, [fp], #-0
    20b4:	3a0e0300 	bcc	382cbc <mailbuffer+0x347bcc>
    20b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20bc:	00180213 	andseq	r0, r8, r3, lsl r2
    20c0:	012e1c00 	teqeq	lr, r0, lsl #24
    20c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    20c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20cc:	13491927 	movtne	r1, #39207	; 0x9927
    20d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    20d4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    20d8:	00130119 	andseq	r0, r3, r9, lsl r1
    20dc:	00051d00 	andeq	r1, r5, r0, lsl #26
    20e0:	0b3a0e03 	bleq	e858f4 <mailbuffer+0xe4a804>
    20e4:	1349053b 	movtne	r0, #38203	; 0x953b
    20e8:	00001802 	andeq	r1, r0, r2, lsl #16
    20ec:	0000261e 	andeq	r2, r0, lr, lsl r6
    20f0:	00341f00 	eorseq	r1, r4, r0, lsl #30
    20f4:	0b3a0803 	bleq	e84108 <mailbuffer+0xe49018>
    20f8:	1349053b 	movtne	r0, #38203	; 0x953b
    20fc:	00001802 	andeq	r1, r0, r2, lsl #16
    2100:	3f012e20 	svccc	0x00012e20
    2104:	3a0e0319 	bcc	382d70 <mailbuffer+0x347c80>
    2108:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    210c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2110:	96184006 	ldrls	r4, [r8], -r6
    2114:	13011942 	movwne	r1, #6466	; 0x1942
    2118:	01000000 	mrseq	r0, (UNDEF: 0)
    211c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2120:	0e030b13 	vmoveq.32	d3[0], r0
    2124:	01110e1b 	tsteq	r1, fp, lsl lr
    2128:	17100612 			; <UNDEFINED> instruction: 0x17100612
    212c:	16020000 	strne	r0, [r2], -r0
    2130:	3a0e0300 	bcc	382d38 <mailbuffer+0x347c48>
    2134:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2138:	03000013 	movweq	r0, #19
    213c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2140:	0b3a0b0b 	bleq	e84d74 <mailbuffer+0xe49c84>
    2144:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2148:	0d040000 	stceq	0, cr0, [r4, #-0]
    214c:	490e0300 	stmdbmi	lr, {r8, r9}
    2150:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    2154:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    2158:	0b0b000f 	bleq	2c219c <mailbuffer+0x2870ac>
    215c:	24060000 	strcs	r0, [r6], #-0
    2160:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2164:	000e030b 	andeq	r0, lr, fp, lsl #6
    2168:	00240700 	eoreq	r0, r4, r0, lsl #14
    216c:	0b3e0b0b 	bleq	f84da0 <mailbuffer+0xf49cb0>
    2170:	00000803 	andeq	r0, r0, r3, lsl #16
    2174:	03000d08 	movweq	r0, #3336	; 0xd08
    2178:	3b0b3a0e 	blcc	2d09b8 <mailbuffer+0x2958c8>
    217c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2180:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    2184:	0b0b000f 	bleq	2c21c8 <mailbuffer+0x2870d8>
    2188:	00001349 	andeq	r1, r0, r9, asr #6
    218c:	3f012e0a 	svccc	0x00012e0a
    2190:	3a0e0319 	bcc	382dfc <mailbuffer+0x347d0c>
    2194:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2198:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    219c:	96184006 	ldrls	r4, [r8], -r6
    21a0:	13011942 	movwne	r1, #6466	; 0x1942
    21a4:	050b0000 	streq	r0, [fp, #-0]
    21a8:	3a0e0300 	bcc	382db0 <mailbuffer+0x347cc0>
    21ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21b0:	00180213 	andseq	r0, r8, r3, lsl r2
    21b4:	00260c00 	eoreq	r0, r6, r0, lsl #24
    21b8:	00001349 	andeq	r1, r0, r9, asr #6
    21bc:	3f012e0d 	svccc	0x00012e0d
    21c0:	3a0e0319 	bcc	382e2c <mailbuffer+0x347d3c>
    21c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    21c8:	11134919 	tstne	r3, r9, lsl r9
    21cc:	40061201 	andmi	r1, r6, r1, lsl #4
    21d0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    21d4:	00001301 	andeq	r1, r0, r1, lsl #6
    21d8:	0300340e 	movweq	r3, #1038	; 0x40e
    21dc:	3b0b3a0e 	blcc	2d0a1c <mailbuffer+0x29592c>
    21e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    21e4:	0f000018 	svceq	0x00000018
    21e8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    21ec:	0b3b0b3a 	bleq	ec4edc <mailbuffer+0xe89dec>
    21f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    21f4:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    21f8:	11000000 	mrsne	r0, (UNDEF: 0)
    21fc:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    2200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2204:	00000111 	andeq	r0, r0, r1, lsl r1
    2208:	11010b12 	tstne	r1, r2, lsl fp
    220c:	00061201 	andeq	r1, r6, r1, lsl #4
    2210:	01011300 	mrseq	r1, SP_irq
    2214:	13011349 	movwne	r1, #4937	; 0x1349
    2218:	21140000 	tstcs	r4, r0
    221c:	2f134900 	svccs	0x00134900
    2220:	1500000b 	strne	r0, [r0, #-11]
    2224:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2228:	0b3a0e03 	bleq	e85a3c <mailbuffer+0xe4a94c>
    222c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2230:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2234:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2238:	00130119 	andseq	r0, r3, r9, lsl r1
    223c:	00051600 	andeq	r1, r5, r0, lsl #12
    2240:	0b3a0e03 	bleq	e85a54 <mailbuffer+0xe4a964>
    2244:	1349053b 	movtne	r0, #38203	; 0x953b
    2248:	00001802 	andeq	r1, r0, r2, lsl #16
    224c:	03003417 	movweq	r3, #1047	; 0x417
    2250:	3b0b3a0e 	blcc	2d0a90 <mailbuffer+0x2959a0>
    2254:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2258:	18000018 	stmdane	r0, {r3, r4}
    225c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2260:	0b3a0e03 	bleq	e85a74 <mailbuffer+0xe4a984>
    2264:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2268:	01111349 	tsteq	r1, r9, asr #6
    226c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2270:	00194296 	mulseq	r9, r6, r2
    2274:	00341900 	eorseq	r1, r4, r0, lsl #18
    2278:	0b3a0803 	bleq	e8428c <mailbuffer+0xe4919c>
    227c:	1349053b 	movtne	r0, #38203	; 0x953b
    2280:	00001802 	andeq	r1, r0, r2, lsl #16
    2284:	01110100 	tsteq	r1, r0, lsl #2
    2288:	0b130e25 	bleq	4c5b24 <mailbuffer+0x48aa34>
    228c:	01110e03 	tsteq	r1, r3, lsl #28
    2290:	17100612 			; <UNDEFINED> instruction: 0x17100612
    2294:	24020000 	strcs	r0, [r2], #-0
    2298:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    229c:	000e030b 	andeq	r0, lr, fp, lsl #6
    22a0:	000f0300 	andeq	r0, pc, r0, lsl #6
    22a4:	00000b0b 	andeq	r0, r0, fp, lsl #22
    22a8:	03001604 	movweq	r1, #1540	; 0x604
    22ac:	3b0b3a08 	blcc	2d0ad4 <mailbuffer+0x2959e4>
    22b0:	0013490b 	andseq	r4, r3, fp, lsl #18
    22b4:	00240500 	eoreq	r0, r4, r0, lsl #10
    22b8:	0b3e0b0b 	bleq	f84eec <mailbuffer+0xf49dfc>
    22bc:	00000803 	andeq	r0, r0, r3, lsl #16
    22c0:	03001606 	movweq	r1, #1542	; 0x606
    22c4:	3b0b3a0e 	blcc	2d0b04 <mailbuffer+0x295a14>
    22c8:	0013490b 	andseq	r4, r3, fp, lsl #18
    22cc:	012e0700 	teqeq	lr, r0, lsl #14
    22d0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    22d4:	0b3b0b3a 	bleq	ec4fc4 <mailbuffer+0xe89ed4>
    22d8:	13491927 	movtne	r1, #39207	; 0x9927
    22dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    22e0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    22e4:	00130119 	andseq	r0, r3, r9, lsl r1
    22e8:	00050800 	andeq	r0, r5, r0, lsl #16
    22ec:	0b3a0e03 	bleq	e85b00 <mailbuffer+0xe4aa10>
    22f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    22f4:	00001802 	andeq	r1, r0, r2, lsl #16
    22f8:	03003409 	movweq	r3, #1033	; 0x409
    22fc:	3b0b3a08 	blcc	2d0b24 <mailbuffer+0x295a34>
    2300:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2304:	0a000018 	beq	236c <_start-0x5c94>
    2308:	0b0b000f 	bleq	2c234c <mailbuffer+0x28725c>
    230c:	00001349 	andeq	r1, r0, r9, asr #6
    2310:	0000260b 	andeq	r2, r0, fp, lsl #12
    2314:	00260c00 	eoreq	r0, r6, r0, lsl #24
    2318:	00001349 	andeq	r1, r0, r9, asr #6
    231c:	0300340d 	movweq	r3, #1037	; 0x40d
    2320:	3b0b3a0e 	blcc	2d0b60 <mailbuffer+0x295a70>
    2324:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2328:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    232c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2330:	0b3a0e03 	bleq	e85b44 <mailbuffer+0xe4aa54>
    2334:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2338:	01111349 	tsteq	r1, r9, asr #6
    233c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2340:	00194296 	mulseq	r9, r6, r2
    2344:	11010000 	mrsne	r0, (UNDEF: 1)
    2348:	130e2501 	movwne	r2, #58625	; 0xe501
    234c:	1b0e030b 	blne	382f80 <mailbuffer+0x347e90>
    2350:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2354:	00171006 	andseq	r1, r7, r6
    2358:	01040200 	mrseq	r0, R12_usr
    235c:	0b3a0b0b 	bleq	e84f90 <mailbuffer+0xe49ea0>
    2360:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2364:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    2368:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    236c:	0400000d 	streq	r0, [r0], #-13
    2370:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2374:	0b3b0b3a 	bleq	ec5064 <mailbuffer+0xe89f74>
    2378:	00001349 	andeq	r1, r0, r9, asr #6
    237c:	0b011305 	bleq	46f98 <mailbuffer+0xbea8>
    2380:	3b0b3a0b 	blcc	2d0bb4 <mailbuffer+0x295ac4>
    2384:	0013010b 	andseq	r0, r3, fp, lsl #2
    2388:	000d0600 	andeq	r0, sp, r0, lsl #12
    238c:	0b3a0e03 	bleq	e85ba0 <mailbuffer+0xe4aab0>
    2390:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2394:	00000b38 	andeq	r0, r0, r8, lsr fp
    2398:	0b002407 	bleq	b3bc <__module_entries_end+0x32dc>
    239c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    23a0:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    23a4:	0b0b0117 	bleq	2c2808 <mailbuffer+0x287718>
    23a8:	0b3b0b3a 	bleq	ec5098 <mailbuffer+0xe89fa8>
    23ac:	00001301 	andeq	r1, r0, r1, lsl #6
    23b0:	03000d09 	movweq	r0, #3337	; 0xd09
    23b4:	3b0b3a0e 	blcc	2d0bf4 <mailbuffer+0x295b04>
    23b8:	0013490b 	andseq	r4, r3, fp, lsl #18
    23bc:	01130a00 	tsteq	r3, r0, lsl #20
    23c0:	0b0b0e03 	bleq	2c5bd4 <mailbuffer+0x28aae4>
    23c4:	0b3b0b3a 	bleq	ec50b4 <mailbuffer+0xe89fc4>
    23c8:	00001301 	andeq	r1, r0, r1, lsl #6
    23cc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    23d0:	00130113 	andseq	r0, r3, r3, lsl r1
    23d4:	00210c00 	eoreq	r0, r1, r0, lsl #24
    23d8:	00001349 	andeq	r1, r0, r9, asr #6
    23dc:	0300160d 	movweq	r1, #1549	; 0x60d
    23e0:	3b0b3a08 	blcc	2d0c08 <mailbuffer+0x295b18>
    23e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    23e8:	00240e00 	eoreq	r0, r4, r0, lsl #28
    23ec:	0b3e0b0b 	bleq	f85020 <mailbuffer+0xf49f30>
    23f0:	00000803 	andeq	r0, r0, r3, lsl #16
    23f4:	0b000f0f 	bleq	6038 <_start-0x1fc8>
    23f8:	0013490b 	andseq	r4, r3, fp, lsl #18
    23fc:	00261000 	eoreq	r1, r6, r0
    2400:	00001349 	andeq	r1, r0, r9, asr #6
    2404:	0b000f11 	bleq	6050 <_start-0x1fb0>
    2408:	1200000b 	andne	r0, r0, #11
    240c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2410:	13011349 	movwne	r1, #4937	; 0x1349
    2414:	05130000 	ldreq	r0, [r3, #-0]
    2418:	00134900 	andseq	r4, r3, r0, lsl #18
    241c:	01151400 	tsteq	r5, r0, lsl #8
    2420:	13011927 	movwne	r1, #6439	; 0x1927
    2424:	35150000 	ldrcc	r0, [r5, #-0]
    2428:	00134900 	andseq	r4, r3, r0, lsl #18
    242c:	00211600 	eoreq	r1, r1, r0, lsl #12
    2430:	0b2f1349 	bleq	bc715c <mailbuffer+0xb8c06c>
    2434:	0d170000 	ldceq	0, cr0, [r7, #-0]
    2438:	3a0e0300 	bcc	383040 <mailbuffer+0x347f50>
    243c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2440:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2444:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2448:	1800000b 	stmdane	r0, {r0, r1, r3}
    244c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2450:	0b3b0b3a 	bleq	ec5140 <mailbuffer+0xe8a050>
    2454:	0b0b1349 	bleq	2c7180 <mailbuffer+0x28c090>
    2458:	0b0c0b0d 	bleq	305094 <mailbuffer+0x2c9fa4>
    245c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2460:	3f012e19 	svccc	0x00012e19
    2464:	3a0e0319 	bcc	3830d0 <mailbuffer+0x347fe0>
    2468:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    246c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2470:	96184006 	ldrls	r4, [r8], -r6
    2474:	13011942 	movwne	r1, #6466	; 0x1942
    2478:	051a0000 	ldreq	r0, [sl, #-0]
    247c:	3a0e0300 	bcc	383084 <mailbuffer+0x347f94>
    2480:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2484:	00180213 	andseq	r0, r8, r3, lsl r2
    2488:	012e1b00 	teqeq	lr, r0, lsl #22
    248c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2490:	0b3b0b3a 	bleq	ec5180 <mailbuffer+0xe8a090>
    2494:	13491927 	movtne	r1, #39207	; 0x9927
    2498:	06120111 			; <UNDEFINED> instruction: 0x06120111
    249c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    24a0:	00130119 	andseq	r0, r3, r9, lsl r1
    24a4:	00341c00 	eorseq	r1, r4, r0, lsl #24
    24a8:	0b3a0e03 	bleq	e85cbc <mailbuffer+0xe4abcc>
    24ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    24b0:	00001802 	andeq	r1, r0, r2, lsl #16
    24b4:	0300341d 	movweq	r3, #1053	; 0x41d
    24b8:	3b0b3a0e 	blcc	2d0cf8 <mailbuffer+0x295c08>
    24bc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    24c0:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    24c4:	0111010b 	tsteq	r1, fp, lsl #2
    24c8:	00000612 	andeq	r0, r0, r2, lsl r6
    24cc:	3f012e1f 	svccc	0x00012e1f
    24d0:	3a0e0319 	bcc	38313c <mailbuffer+0x34804c>
    24d4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    24d8:	11134919 	tstne	r3, r9, lsl r9
    24dc:	40061201 	andmi	r1, r6, r1, lsl #4
    24e0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    24e4:	00001301 	andeq	r1, r0, r1, lsl #6
    24e8:	03000520 	movweq	r0, #1312	; 0x520
    24ec:	3b0b3a0e 	blcc	2d0d2c <mailbuffer+0x295c3c>
    24f0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    24f4:	21000018 	tstcs	r0, r8, lsl r0
    24f8:	00000026 	andeq	r0, r0, r6, lsr #32
    24fc:	03000522 	movweq	r0, #1314	; 0x522
    2500:	3b0b3a08 	blcc	2d0d28 <mailbuffer+0x295c38>
    2504:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2508:	23000018 	movwcs	r0, #24
    250c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2510:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2514:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2518:	01000000 	mrseq	r0, (UNDEF: 0)
    251c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2520:	0e030b13 	vmoveq.32	d3[0], r0
    2524:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2528:	00001710 	andeq	r1, r0, r0, lsl r7
    252c:	0b002402 	bleq	b53c <__module_entries_end+0x345c>
    2530:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2534:	0300000e 	movweq	r0, #14
    2538:	08030016 	stmdaeq	r3, {r1, r2, r4}
    253c:	0b3b0b3a 	bleq	ec522c <mailbuffer+0xe8a13c>
    2540:	00001349 	andeq	r1, r0, r9, asr #6
    2544:	0b002404 	bleq	b55c <__module_entries_end+0x347c>
    2548:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    254c:	05000008 	streq	r0, [r0, #-8]
    2550:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2554:	0b3b0b3a 	bleq	ec5244 <mailbuffer+0xe8a154>
    2558:	00001349 	andeq	r1, r0, r9, asr #6
    255c:	03011306 	movweq	r1, #4870	; 0x1306
    2560:	3a0b0b0e 	bcc	2c51a0 <mailbuffer+0x28a0b0>
    2564:	010b3b0b 	tsteq	fp, fp, lsl #22
    2568:	07000013 	smladeq	r0, r3, r0, r0
    256c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2570:	0b3b0b3a 	bleq	ec5260 <mailbuffer+0xe8a170>
    2574:	0b381349 	bleq	e072a0 <mailbuffer+0xdcc1b0>
    2578:	15080000 	strne	r0, [r8, #-0]
    257c:	01192701 	tsteq	r9, r1, lsl #14
    2580:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2584:	13490005 	movtne	r0, #36869	; 0x9005
    2588:	0f0a0000 	svceq	0x000a0000
    258c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2590:	0b000013 	bleq	25e4 <_start-0x5a1c>
    2594:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2598:	13011349 	movwne	r1, #4937	; 0x1349
    259c:	040c0000 	streq	r0, [ip], #-0
    25a0:	3a0b0b01 	bcc	2c51ac <mailbuffer+0x28a0bc>
    25a4:	010b3b0b 	tsteq	fp, fp, lsl #22
    25a8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    25ac:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    25b0:	00000d1c 	andeq	r0, r0, ip, lsl sp
    25b4:	3f012e0e 	svccc	0x00012e0e
    25b8:	3a0e0319 	bcc	383224 <mailbuffer+0x348134>
    25bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    25c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    25c4:	96184006 	ldrls	r4, [r8], -r6
    25c8:	13011942 	movwne	r1, #6466	; 0x1942
    25cc:	050f0000 	streq	r0, [pc, #-0]	; 25d4 <_start-0x5a2c>
    25d0:	3a0e0300 	bcc	3831d8 <mailbuffer+0x3480e8>
    25d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25d8:	00180213 	andseq	r0, r8, r3, lsl r2
    25dc:	00341000 	eorseq	r1, r4, r0
    25e0:	0b3a0e03 	bleq	e85df4 <mailbuffer+0xe4ad04>
    25e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25e8:	00001802 	andeq	r1, r0, r2, lsl #16
    25ec:	3f012e11 	svccc	0x00012e11
    25f0:	3a0e0319 	bcc	38325c <mailbuffer+0x34816c>
    25f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    25f8:	11134919 	tstne	r3, r9, lsl r9
    25fc:	40061201 	andmi	r1, r6, r1, lsl #4
    2600:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2604:	00001301 	andeq	r1, r0, r1, lsl #6
    2608:	3f012e12 	svccc	0x00012e12
    260c:	3a0e0319 	bcc	383278 <mailbuffer+0x348188>
    2610:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2614:	11134919 	tstne	r3, r9, lsl r9
    2618:	40061201 	andmi	r1, r6, r1, lsl #4
    261c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2620:	01000000 	mrseq	r0, (UNDEF: 0)
    2624:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2628:	0e030b13 	vmoveq.32	d3[0], r0
    262c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2630:	00001710 	andeq	r1, r0, r0, lsl r7
    2634:	0b002402 	bleq	b644 <__module_entries_end+0x3564>
    2638:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    263c:	0300000e 	movweq	r0, #14
    2640:	08030016 	stmdaeq	r3, {r1, r2, r4}
    2644:	0b3b0b3a 	bleq	ec5334 <mailbuffer+0xe8a244>
    2648:	00001349 	andeq	r1, r0, r9, asr #6
    264c:	0b002404 	bleq	b664 <__module_entries_end+0x3584>
    2650:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2654:	05000008 	streq	r0, [r0, #-8]
    2658:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    265c:	0b3b0b3a 	bleq	ec534c <mailbuffer+0xe8a25c>
    2660:	00001349 	andeq	r1, r0, r9, asr #6
    2664:	03011306 	movweq	r1, #4870	; 0x1306
    2668:	3a0b0b0e 	bcc	2c52a8 <mailbuffer+0x28a1b8>
    266c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2670:	07000013 	smladeq	r0, r3, r0, r0
    2674:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2678:	0b3b0b3a 	bleq	ec5368 <mailbuffer+0xe8a278>
    267c:	0b381349 	bleq	e073a8 <mailbuffer+0xdcc2b8>
    2680:	15080000 	strne	r0, [r8, #-0]
    2684:	01192701 	tsteq	r9, r1, lsl #14
    2688:	09000013 	stmdbeq	r0, {r0, r1, r4}
    268c:	13490005 	movtne	r0, #36869	; 0x9005
    2690:	0f0a0000 	svceq	0x000a0000
    2694:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2698:	0b000013 	bleq	26ec <_start-0x5914>
    269c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    26a0:	13011349 	movwne	r1, #4937	; 0x1349
    26a4:	040c0000 	streq	r0, [ip], #-0
    26a8:	3a0b0b01 	bcc	2c52b4 <mailbuffer+0x28a1c4>
    26ac:	010b3b0b 	tsteq	fp, fp, lsl #22
    26b0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    26b4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    26b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    26bc:	3f012e0e 	svccc	0x00012e0e
    26c0:	3a0e0319 	bcc	38332c <mailbuffer+0x34823c>
    26c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    26c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    26cc:	96184006 	ldrls	r4, [r8], -r6
    26d0:	13011942 	movwne	r1, #6466	; 0x1942
    26d4:	050f0000 	streq	r0, [pc, #-0]	; 26dc <_start-0x5924>
    26d8:	3a0e0300 	bcc	3832e0 <mailbuffer+0x3481f0>
    26dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    26e0:	00180213 	andseq	r0, r8, r3, lsl r2
    26e4:	00341000 	eorseq	r1, r4, r0
    26e8:	0b3a0e03 	bleq	e85efc <mailbuffer+0xe4ae0c>
    26ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    26f0:	00001802 	andeq	r1, r0, r2, lsl #16
    26f4:	3f012e11 	svccc	0x00012e11
    26f8:	3a0e0319 	bcc	383364 <mailbuffer+0x348274>
    26fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2700:	11134919 	tstne	r3, r9, lsl r9
    2704:	40061201 	andmi	r1, r6, r1, lsl #4
    2708:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    270c:	00001301 	andeq	r1, r0, r1, lsl #6
    2710:	3f012e12 	svccc	0x00012e12
    2714:	3a0e0319 	bcc	383380 <mailbuffer+0x348290>
    2718:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    271c:	11134919 	tstne	r3, r9, lsl r9
    2720:	40061201 	andmi	r1, r6, r1, lsl #4
    2724:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2728:	01000000 	mrseq	r0, (UNDEF: 0)
    272c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2730:	0e030b13 	vmoveq.32	d3[0], r0
    2734:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2738:	00001710 	andeq	r1, r0, r0, lsl r7
    273c:	03001602 	movweq	r1, #1538	; 0x602
    2740:	3b0b3a08 	blcc	2d0f68 <mailbuffer+0x295e78>
    2744:	0013490b 	andseq	r4, r3, fp, lsl #18
    2748:	00240300 	eoreq	r0, r4, r0, lsl #6
    274c:	0b3e0b0b 	bleq	f85380 <mailbuffer+0xf4a290>
    2750:	00000e03 	andeq	r0, r0, r3, lsl #28
    2754:	0b002404 	bleq	b76c <__module_entries_end+0x368c>
    2758:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    275c:	05000008 	streq	r0, [r0, #-8]
    2760:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2764:	0b3b0b3a 	bleq	ec5454 <mailbuffer+0xe8a364>
    2768:	00001349 	andeq	r1, r0, r9, asr #6
    276c:	0b010406 	bleq	4378c <mailbuffer+0x869c>
    2770:	3b0b3a0b 	blcc	2d0fa4 <mailbuffer+0x295eb4>
    2774:	0013010b 	andseq	r0, r3, fp, lsl #2
    2778:	00280700 	eoreq	r0, r8, r0, lsl #14
    277c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2780:	13080000 	movwne	r0, #32768	; 0x8000
    2784:	0b0e0301 	bleq	383390 <mailbuffer+0x3482a0>
    2788:	3b0b3a05 	blcc	2d0fa4 <mailbuffer+0x295eb4>
    278c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2790:	000d0900 	andeq	r0, sp, r0, lsl #18
    2794:	0b3a0e03 	bleq	e85fa8 <mailbuffer+0xe4aeb8>
    2798:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    279c:	00000b38 	andeq	r0, r0, r8, lsr fp
    27a0:	03000d0a 	movweq	r0, #3338	; 0xd0a
    27a4:	3b0b3a0e 	blcc	2d0fe4 <mailbuffer+0x295ef4>
    27a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    27ac:	0b000005 	bleq	27c8 <_start-0x5838>
    27b0:	13490101 	movtne	r0, #37121	; 0x9101
    27b4:	00001301 	andeq	r1, r0, r1, lsl #6
    27b8:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
    27bc:	000b2f13 	andeq	r2, fp, r3, lsl pc
    27c0:	012e0d00 	teqeq	lr, r0, lsl #26
    27c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    27c8:	0b3b0b3a 	bleq	ec54b8 <mailbuffer+0xe8a3c8>
    27cc:	01111927 	tsteq	r1, r7, lsr #18
    27d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    27d4:	01194296 			; <UNDEFINED> instruction: 0x01194296
    27d8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    27dc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    27e0:	0b3b0b3a 	bleq	ec54d0 <mailbuffer+0xe8a3e0>
    27e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    27e8:	0f0f0000 	svceq	0x000f0000
    27ec:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    27f0:	10000013 	andne	r0, r0, r3, lsl r0
    27f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    27f8:	0b3a0e03 	bleq	e8600c <mailbuffer+0xe4af1c>
    27fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2800:	01111349 	tsteq	r1, r9, asr #6
    2804:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2808:	01194296 			; <UNDEFINED> instruction: 0x01194296
    280c:	11000013 	tstne	r0, r3, lsl r0
    2810:	0111010b 	tsteq	r1, fp, lsl #2
    2814:	00000612 	andeq	r0, r0, r2, lsl r6
    2818:	03003412 	movweq	r3, #1042	; 0x412
    281c:	3b0b3a0e 	blcc	2d105c <mailbuffer+0x295f6c>
    2820:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2824:	13000018 	movwne	r0, #24
    2828:	13490026 	movtne	r0, #36902	; 0x9026
    282c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    2830:	03193f01 	tsteq	r9, #1, 30
    2834:	3b0b3a0e 	blcc	2d1074 <mailbuffer+0x295f84>
    2838:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    283c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2840:	96184006 	ldrls	r4, [r8], -r6
    2844:	13011942 	movwne	r1, #6466	; 0x1942
    2848:	05150000 	ldreq	r0, [r5, #-0]
    284c:	3a0e0300 	bcc	383454 <mailbuffer+0x348364>
    2850:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2854:	00180213 	andseq	r0, r8, r3, lsl r2
    2858:	00341600 	eorseq	r1, r4, r0, lsl #12
    285c:	0b3a0e03 	bleq	e86070 <mailbuffer+0xe4af80>
    2860:	1349053b 	movtne	r0, #38203	; 0x953b
    2864:	00001802 	andeq	r1, r0, r2, lsl #16
    2868:	01110100 	tsteq	r1, r0, lsl #2
    286c:	0b130e25 	bleq	4c6108 <mailbuffer+0x48b018>
    2870:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2874:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2878:	00001710 	andeq	r1, r0, r0, lsl r7
    287c:	0b010402 	bleq	4388c <mailbuffer+0x879c>
    2880:	3b0b3a0b 	blcc	2d10b4 <mailbuffer+0x295fc4>
    2884:	0013010b 	andseq	r0, r3, fp, lsl #2
    2888:	00280300 	eoreq	r0, r8, r0, lsl #6
    288c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2890:	16040000 	strne	r0, [r4], -r0
    2894:	3a0e0300 	bcc	38349c <mailbuffer+0x3483ac>
    2898:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    289c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    28a0:	0b0b0113 	bleq	2c2cf4 <mailbuffer+0x287c04>
    28a4:	0b3b0b3a 	bleq	ec5594 <mailbuffer+0xe8a4a4>
    28a8:	00001301 	andeq	r1, r0, r1, lsl #6
    28ac:	03000d06 	movweq	r0, #3334	; 0xd06
    28b0:	3b0b3a0e 	blcc	2d10f0 <mailbuffer+0x296000>
    28b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    28b8:	0700000b 	streq	r0, [r0, -fp]
    28bc:	0b0b0024 	bleq	2c2954 <mailbuffer+0x287864>
    28c0:	0e030b3e 	vmoveq.16	d3[0], r0
    28c4:	17080000 	strne	r0, [r8, -r0]
    28c8:	3a0b0b01 	bcc	2c54d4 <mailbuffer+0x28a3e4>
    28cc:	010b3b0b 	tsteq	fp, fp, lsl #22
    28d0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    28d4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    28d8:	0b3b0b3a 	bleq	ec55c8 <mailbuffer+0xe8a4d8>
    28dc:	00001349 	andeq	r1, r0, r9, asr #6
    28e0:	0301130a 	movweq	r1, #4874	; 0x130a
    28e4:	3a0b0b0e 	bcc	2c5524 <mailbuffer+0x28a434>
    28e8:	010b3b0b 	tsteq	fp, fp, lsl #22
    28ec:	0b000013 	bleq	2940 <_start-0x56c0>
    28f0:	13490101 	movtne	r0, #37121	; 0x9101
    28f4:	00001301 	andeq	r1, r0, r1, lsl #6
    28f8:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
    28fc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2900:	08030016 	stmdaeq	r3, {r1, r2, r4}
    2904:	0b3b0b3a 	bleq	ec55f4 <mailbuffer+0xe8a504>
    2908:	00001349 	andeq	r1, r0, r9, asr #6
    290c:	0b00240e 	bleq	b94c <__module_entries_end+0x386c>
    2910:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2914:	0f000008 	svceq	0x00000008
    2918:	0b0b000f 	bleq	2c295c <mailbuffer+0x28786c>
    291c:	00001349 	andeq	r1, r0, r9, asr #6
    2920:	49002610 	stmdbmi	r0, {r4, r9, sl, sp}
    2924:	11000013 	tstne	r0, r3, lsl r0
    2928:	0b0b000f 	bleq	2c296c <mailbuffer+0x28787c>
    292c:	15120000 	ldrne	r0, [r2, #-0]
    2930:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    2934:	00130113 	andseq	r0, r3, r3, lsl r1
    2938:	00051300 	andeq	r1, r5, r0, lsl #6
    293c:	00001349 	andeq	r1, r0, r9, asr #6
    2940:	27011514 	smladcs	r1, r4, r5, r1
    2944:	00130119 	andseq	r0, r3, r9, lsl r1
    2948:	01131500 	tsteq	r3, r0, lsl #10
    294c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    2950:	0b3b0b3a 	bleq	ec5640 <mailbuffer+0xe8a550>
    2954:	00001301 	andeq	r1, r0, r1, lsl #6
    2958:	03000d16 	movweq	r0, #3350	; 0xd16
    295c:	3b0b3a0e 	blcc	2d119c <mailbuffer+0x2960ac>
    2960:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2964:	17000005 	strne	r0, [r0, -r5]
    2968:	13490021 	movtne	r0, #36897	; 0x9021
    296c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2970:	27001518 	smladcs	r0, r8, r5, r1
    2974:	19000019 	stmdbne	r0, {r0, r3, r4}
    2978:	13490035 	movtne	r0, #36917	; 0x9035
    297c:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    2980:	03193f01 	tsteq	r9, #1, 30
    2984:	3b0b3a0e 	blcc	2d11c4 <mailbuffer+0x2960d4>
    2988:	1119270b 	tstne	r9, fp, lsl #14
    298c:	40061201 	andmi	r1, r6, r1, lsl #4
    2990:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2994:	00001301 	andeq	r1, r0, r1, lsl #6
    2998:	0300051b 	movweq	r0, #1307	; 0x51b
    299c:	3b0b3a0e 	blcc	2d11dc <mailbuffer+0x2960ec>
    29a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    29a4:	1c000018 	stcne	0, cr0, [r0], {24}
    29a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    29ac:	0b3a0e03 	bleq	e861c0 <mailbuffer+0xe4b0d0>
    29b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    29b4:	01111349 	tsteq	r1, r9, asr #6
    29b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    29bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
    29c0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    29c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    29c8:	0b3b0b3a 	bleq	ec56b8 <mailbuffer+0xe8a5c8>
    29cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    29d0:	0b1e0000 	bleq	7829d8 <mailbuffer+0x7478e8>
    29d4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    29d8:	1f000006 	svcne	0x00000006
    29dc:	0e03012e 	adfeqsp	f0, f3, #0.5
    29e0:	0b3b0b3a 	bleq	ec56d0 <mailbuffer+0xe8a5e0>
    29e4:	01111927 	tsteq	r1, r7, lsr #18
    29e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    29ec:	01194296 			; <UNDEFINED> instruction: 0x01194296
    29f0:	20000013 	andcs	r0, r0, r3, lsl r0
    29f4:	0e03012e 	adfeqsp	f0, f3, #0.5
    29f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    29fc:	13491927 	movtne	r1, #39207	; 0x9927
    2a00:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2a04:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2a08:	00130119 	andseq	r0, r3, r9, lsl r1
    2a0c:	00052100 	andeq	r2, r5, r0, lsl #2
    2a10:	0b3a0e03 	bleq	e86224 <mailbuffer+0xe4b134>
    2a14:	1349053b 	movtne	r0, #38203	; 0x953b
    2a18:	00001802 	andeq	r1, r0, r2, lsl #16
    2a1c:	03012e22 	movweq	r2, #7714	; 0x1e22
    2a20:	3b0b3a0e 	blcc	2d1260 <mailbuffer+0x296170>
    2a24:	11192705 	tstne	r9, r5, lsl #14
    2a28:	40061201 	andmi	r1, r6, r1, lsl #4
    2a2c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2a30:	00001301 	andeq	r1, r0, r1, lsl #6
    2a34:	03003423 	movweq	r3, #1059	; 0x423
    2a38:	3b0b3a0e 	blcc	2d1278 <mailbuffer+0x296188>
    2a3c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2a40:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
    2a44:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2a48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a4c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2a50:	01000000 	mrseq	r0, (UNDEF: 0)
    2a54:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2a58:	0e030b13 	vmoveq.32	d3[0], r0
    2a5c:	01110e1b 	tsteq	r1, fp, lsl lr
    2a60:	17100612 			; <UNDEFINED> instruction: 0x17100612
    2a64:	04020000 	streq	r0, [r2], #-0
    2a68:	3a0b0b01 	bcc	2c5674 <mailbuffer+0x28a584>
    2a6c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2a70:	03000013 	movweq	r0, #19
    2a74:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2a78:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2a7c:	03001604 	movweq	r1, #1540	; 0x604
    2a80:	3b0b3a0e 	blcc	2d12c0 <mailbuffer+0x2961d0>
    2a84:	0013490b 	andseq	r4, r3, fp, lsl #18
    2a88:	01130500 	tsteq	r3, r0, lsl #10
    2a8c:	0b3a0b0b 	bleq	e856c0 <mailbuffer+0xe4a5d0>
    2a90:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2a94:	0d060000 	stceq	0, cr0, [r6, #-0]
    2a98:	3a0e0300 	bcc	3836a0 <mailbuffer+0x3485b0>
    2a9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2aa0:	000b3813 	andeq	r3, fp, r3, lsl r8
    2aa4:	00240700 	eoreq	r0, r4, r0, lsl #14
    2aa8:	0b3e0b0b 	bleq	f856dc <mailbuffer+0xf4a5ec>
    2aac:	00000e03 	andeq	r0, r0, r3, lsl #28
    2ab0:	0b011708 	bleq	486d8 <mailbuffer+0xd5e8>
    2ab4:	3b0b3a0b 	blcc	2d12e8 <mailbuffer+0x2961f8>
    2ab8:	0013010b 	andseq	r0, r3, fp, lsl #2
    2abc:	000d0900 	andeq	r0, sp, r0, lsl #18
    2ac0:	0b3a0e03 	bleq	e862d4 <mailbuffer+0xe4b1e4>
    2ac4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ac8:	130a0000 	movwne	r0, #40960	; 0xa000
    2acc:	0b0e0301 	bleq	3836d8 <mailbuffer+0x3485e8>
    2ad0:	3b0b3a0b 	blcc	2d1304 <mailbuffer+0x296214>
    2ad4:	0013010b 	andseq	r0, r3, fp, lsl #2
    2ad8:	01010b00 	tsteq	r1, r0, lsl #22
    2adc:	13011349 	movwne	r1, #4937	; 0x1349
    2ae0:	210c0000 	mrscs	r0, (UNDEF: 12)
    2ae4:	00134900 	andseq	r4, r3, r0, lsl #18
    2ae8:	00160d00 	andseq	r0, r6, r0, lsl #26
    2aec:	0b3a0803 	bleq	e84b00 <mailbuffer+0xe49a10>
    2af0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2af4:	240e0000 	strcs	r0, [lr], #-0
    2af8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2afc:	0008030b 	andeq	r0, r8, fp, lsl #6
    2b00:	000f0f00 	andeq	r0, pc, r0, lsl #30
    2b04:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2b08:	26100000 	ldrcs	r0, [r0], -r0
    2b0c:	00134900 	andseq	r4, r3, r0, lsl #18
    2b10:	000f1100 	andeq	r1, pc, r0, lsl #2
    2b14:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2b18:	27011512 	smladcs	r1, r2, r5, r1
    2b1c:	01134919 	tsteq	r3, r9, lsl r9
    2b20:	13000013 	movwne	r0, #19
    2b24:	13490005 	movtne	r0, #36869	; 0x9005
    2b28:	15140000 	ldrne	r0, [r4, #-0]
    2b2c:	01192701 	tsteq	r9, r1, lsl #14
    2b30:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2b34:	13490035 	movtne	r0, #36917	; 0x9035
    2b38:	21160000 	tstcs	r6, r0
    2b3c:	2f134900 	svccs	0x00134900
    2b40:	1700000b 	strne	r0, [r0, -fp]
    2b44:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2b48:	0b3a0e03 	bleq	e8635c <mailbuffer+0xe4b26c>
    2b4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2b50:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b54:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2b58:	00130119 	andseq	r0, r3, r9, lsl r1
    2b5c:	00051800 	andeq	r1, r5, r0, lsl #16
    2b60:	0b3a0e03 	bleq	e86374 <mailbuffer+0xe4b284>
    2b64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2b68:	00001802 	andeq	r1, r0, r2, lsl #16
    2b6c:	3f012e19 	svccc	0x00012e19
    2b70:	3a0e0319 	bcc	3837dc <mailbuffer+0x3486ec>
    2b74:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2b78:	11134919 	tstne	r3, r9, lsl r9
    2b7c:	40061201 	andmi	r1, r6, r1, lsl #4
    2b80:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2b84:	00001301 	andeq	r1, r0, r1, lsl #6
    2b88:	0300341a 	movweq	r3, #1050	; 0x41a
    2b8c:	3b0b3a0e 	blcc	2d13cc <mailbuffer+0x2962dc>
    2b90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b94:	00000018 	andeq	r0, r0, r8, lsl r0
    2b98:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2b9c:	030b130e 	movweq	r1, #45838	; 0xb30e
    2ba0:	110e1b0e 	tstne	lr, lr, lsl #22
    2ba4:	10061201 	andne	r1, r6, r1, lsl #4
    2ba8:	02000017 	andeq	r0, r0, #23
    2bac:	0b0b0104 	bleq	2c2fc4 <mailbuffer+0x287ed4>
    2bb0:	0b3b0b3a 	bleq	ec58a0 <mailbuffer+0xe8a7b0>
    2bb4:	00001301 	andeq	r1, r0, r1, lsl #6
    2bb8:	03002803 	movweq	r2, #2051	; 0x803
    2bbc:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2bc0:	00160400 	andseq	r0, r6, r0, lsl #8
    2bc4:	0b3a0e03 	bleq	e863d8 <mailbuffer+0xe4b2e8>
    2bc8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2bcc:	13050000 	movwne	r0, #20480	; 0x5000
    2bd0:	3a0b0b01 	bcc	2c57dc <mailbuffer+0x28a6ec>
    2bd4:	010b3b0b 	tsteq	fp, fp, lsl #22
    2bd8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2bdc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2be0:	0b3b0b3a 	bleq	ec58d0 <mailbuffer+0xe8a7e0>
    2be4:	0b381349 	bleq	e07910 <mailbuffer+0xdcc820>
    2be8:	24070000 	strcs	r0, [r7], #-0
    2bec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2bf0:	000e030b 	andeq	r0, lr, fp, lsl #6
    2bf4:	01170800 	tsteq	r7, r0, lsl #16
    2bf8:	0b3a0b0b 	bleq	e8582c <mailbuffer+0xe4a73c>
    2bfc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2c00:	0d090000 	stceq	0, cr0, [r9, #-0]
    2c04:	3a0e0300 	bcc	38380c <mailbuffer+0x34871c>
    2c08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c0c:	0a000013 	beq	2c60 <_start-0x53a0>
    2c10:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2c14:	0b3a0b0b 	bleq	e85848 <mailbuffer+0xe4a758>
    2c18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2c1c:	010b0000 	mrseq	r0, (UNDEF: 11)
    2c20:	01134901 	tsteq	r3, r1, lsl #18
    2c24:	0c000013 	stceq	0, cr0, [r0], {19}
    2c28:	13490021 	movtne	r0, #36897	; 0x9021
    2c2c:	160d0000 	strne	r0, [sp], -r0
    2c30:	3a080300 	bcc	203838 <mailbuffer+0x1c8748>
    2c34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c38:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2c3c:	0b0b0024 	bleq	2c2cd4 <mailbuffer+0x287be4>
    2c40:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2c44:	0f0f0000 	svceq	0x000f0000
    2c48:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2c4c:	10000013 	andne	r0, r0, r3, lsl r0
    2c50:	13490026 	movtne	r0, #36902	; 0x9026
    2c54:	0f110000 	svceq	0x00110000
    2c58:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2c5c:	01151200 	tsteq	r5, r0, lsl #4
    2c60:	13491927 	movtne	r1, #39207	; 0x9927
    2c64:	00001301 	andeq	r1, r0, r1, lsl #6
    2c68:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    2c6c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2c70:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2c74:	00001301 	andeq	r1, r0, r1, lsl #6
    2c78:	49003515 	stmdbmi	r0, {r0, r2, r4, r8, sl, ip, sp}
    2c7c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2c80:	13490021 	movtne	r0, #36897	; 0x9021
    2c84:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2c88:	3f012e17 	svccc	0x00012e17
    2c8c:	3a0e0319 	bcc	3838f8 <mailbuffer+0x348808>
    2c90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2c94:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2c98:	96184006 	ldrls	r4, [r8], -r6
    2c9c:	13011942 	movwne	r1, #6466	; 0x1942
    2ca0:	05180000 	ldreq	r0, [r8, #-0]
    2ca4:	3a0e0300 	bcc	3838ac <mailbuffer+0x3487bc>
    2ca8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2cac:	00180213 	andseq	r0, r8, r3, lsl r2
    2cb0:	012e1900 	teqeq	lr, r0, lsl #18
    2cb4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2cb8:	0b3b0b3a 	bleq	ec59a8 <mailbuffer+0xe8a8b8>
    2cbc:	13491927 	movtne	r1, #39207	; 0x9927
    2cc0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2cc4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2cc8:	00130119 	andseq	r0, r3, r9, lsl r1
    2ccc:	00341a00 	eorseq	r1, r4, r0, lsl #20
    2cd0:	0b3a0e03 	bleq	e864e4 <mailbuffer+0xe4b3f4>
    2cd4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2cd8:	00001802 	andeq	r1, r0, r2, lsl #16
    2cdc:	11010b1b 	tstne	r1, fp, lsl fp
    2ce0:	00061201 	andeq	r1, r6, r1, lsl #4
    2ce4:	012e1c00 	teqeq	lr, r0, lsl #24
    2ce8:	0b3a0e03 	bleq	e864fc <mailbuffer+0xe4b40c>
    2cec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2cf0:	01111349 	tsteq	r1, r9, asr #6
    2cf4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2cf8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2cfc:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    2d00:	0e03012e 	adfeqsp	f0, f3, #0.5
    2d04:	0b3b0b3a 	bleq	ec59f4 <mailbuffer+0xe8a904>
    2d08:	01111927 	tsteq	r1, r7, lsr #18
    2d0c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2d10:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2d14:	00000013 	andeq	r0, r0, r3, lsl r0
    2d18:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2d1c:	030b130e 	movweq	r1, #45838	; 0xb30e
    2d20:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2d24:	00171006 	andseq	r1, r7, r6
    2d28:	00240200 	eoreq	r0, r4, r0, lsl #4
    2d2c:	0b3e0b0b 	bleq	f85960 <mailbuffer+0xf4a870>
    2d30:	00000e03 	andeq	r0, r0, r3, lsl #28
    2d34:	03001603 	movweq	r1, #1539	; 0x603
    2d38:	3b0b3a08 	blcc	2d1560 <mailbuffer+0x296470>
    2d3c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2d40:	00240400 	eoreq	r0, r4, r0, lsl #8
    2d44:	0b3e0b0b 	bleq	f85978 <mailbuffer+0xf4a888>
    2d48:	00000803 	andeq	r0, r0, r3, lsl #16
    2d4c:	03001605 	movweq	r1, #1541	; 0x605
    2d50:	3b0b3a0e 	blcc	2d1590 <mailbuffer+0x2964a0>
    2d54:	0013490b 	andseq	r4, r3, fp, lsl #18
    2d58:	01130600 	tsteq	r3, r0, lsl #12
    2d5c:	0b0b0e03 	bleq	2c6570 <mailbuffer+0x28b480>
    2d60:	0b3b0b3a 	bleq	ec5a50 <mailbuffer+0xe8a960>
    2d64:	00001301 	andeq	r1, r0, r1, lsl #6
    2d68:	03000d07 	movweq	r0, #3335	; 0xd07
    2d6c:	3b0b3a0e 	blcc	2d15ac <mailbuffer+0x2964bc>
    2d70:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2d74:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2d78:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2d7c:	00001301 	andeq	r1, r0, r1, lsl #6
    2d80:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
    2d84:	0a000013 	beq	2dd8 <_start-0x5228>
    2d88:	0b0b000f 	bleq	2c2dcc <mailbuffer+0x287cdc>
    2d8c:	00001349 	andeq	r1, r0, r9, asr #6
    2d90:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
    2d94:	01134919 	tsteq	r3, r9, lsl r9
    2d98:	0c000013 	stceq	0, cr0, [r0], {19}
    2d9c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2da0:	0b3a0e03 	bleq	e865b4 <mailbuffer+0xe4b4c4>
    2da4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2da8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2dac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2db0:	00130119 	andseq	r0, r3, r9, lsl r1
    2db4:	00050d00 	andeq	r0, r5, r0, lsl #26
    2db8:	0b3a0e03 	bleq	e865cc <mailbuffer+0xe4b4dc>
    2dbc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2dc0:	00001802 	andeq	r1, r0, r2, lsl #16
    2dc4:	0300340e 	movweq	r3, #1038	; 0x40e
    2dc8:	3b0b3a0e 	blcc	2d1608 <mailbuffer+0x296518>
    2dcc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2dd0:	0f000018 	svceq	0x00000018
    2dd4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2dd8:	0b3a0e03 	bleq	e865ec <mailbuffer+0xe4b4fc>
    2ddc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2de0:	01111349 	tsteq	r1, r9, asr #6
    2de4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2de8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2dec:	10000013 	andne	r0, r0, r3, lsl r0
    2df0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2df4:	0b3a0e03 	bleq	e86608 <mailbuffer+0xe4b518>
    2df8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2dfc:	01111349 	tsteq	r1, r9, asr #6
    2e00:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2e04:	00194296 	mulseq	r9, r6, r2
    2e08:	11010000 	mrsne	r0, (UNDEF: 1)
    2e0c:	130e2501 	movwne	r2, #58625	; 0xe501
    2e10:	1b0e030b 	blne	383a44 <mailbuffer+0x348954>
    2e14:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2e18:	00171006 	andseq	r1, r7, r6
    2e1c:	01040200 	mrseq	r0, R12_usr
    2e20:	0b3a0b0b 	bleq	e85a54 <mailbuffer+0xe4a964>
    2e24:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2e28:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    2e2c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    2e30:	0400000d 	streq	r0, [r0], #-13
    2e34:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2e38:	0b3b0b3a 	bleq	ec5b28 <mailbuffer+0xe8aa38>
    2e3c:	00001349 	andeq	r1, r0, r9, asr #6
    2e40:	0b011305 	bleq	47a5c <mailbuffer+0xc96c>
    2e44:	3b0b3a0b 	blcc	2d1678 <mailbuffer+0x296588>
    2e48:	0013010b 	andseq	r0, r3, fp, lsl #2
    2e4c:	000d0600 	andeq	r0, sp, r0, lsl #12
    2e50:	0b3a0e03 	bleq	e86664 <mailbuffer+0xe4b574>
    2e54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e58:	00000b38 	andeq	r0, r0, r8, lsr fp
    2e5c:	0b002407 	bleq	be80 <__module_entries_end+0x3da0>
    2e60:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2e64:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2e68:	0b0b0117 	bleq	2c32cc <mailbuffer+0x2881dc>
    2e6c:	0b3b0b3a 	bleq	ec5b5c <mailbuffer+0xe8aa6c>
    2e70:	00001301 	andeq	r1, r0, r1, lsl #6
    2e74:	03000d09 	movweq	r0, #3337	; 0xd09
    2e78:	3b0b3a0e 	blcc	2d16b8 <mailbuffer+0x2965c8>
    2e7c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2e80:	01130a00 	tsteq	r3, r0, lsl #20
    2e84:	0b0b0e03 	bleq	2c6698 <mailbuffer+0x28b5a8>
    2e88:	0b3b0b3a 	bleq	ec5b78 <mailbuffer+0xe8aa88>
    2e8c:	00001301 	andeq	r1, r0, r1, lsl #6
    2e90:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    2e94:	00130113 	andseq	r0, r3, r3, lsl r1
    2e98:	00210c00 	eoreq	r0, r1, r0, lsl #24
    2e9c:	00001349 	andeq	r1, r0, r9, asr #6
    2ea0:	0300160d 	movweq	r1, #1549	; 0x60d
    2ea4:	3b0b3a08 	blcc	2d16cc <mailbuffer+0x2965dc>
    2ea8:	0013490b 	andseq	r4, r3, fp, lsl #18
    2eac:	00240e00 	eoreq	r0, r4, r0, lsl #28
    2eb0:	0b3e0b0b 	bleq	f85ae4 <mailbuffer+0xf4a9f4>
    2eb4:	00000803 	andeq	r0, r0, r3, lsl #16
    2eb8:	0b000f0f 	bleq	6afc <_start-0x1504>
    2ebc:	0013490b 	andseq	r4, r3, fp, lsl #18
    2ec0:	00261000 	eoreq	r1, r6, r0
    2ec4:	00001349 	andeq	r1, r0, r9, asr #6
    2ec8:	0b000f11 	bleq	6b14 <_start-0x14ec>
    2ecc:	1200000b 	andne	r0, r0, #11
    2ed0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2ed4:	13011349 	movwne	r1, #4937	; 0x1349
    2ed8:	05130000 	ldreq	r0, [r3, #-0]
    2edc:	00134900 	andseq	r4, r3, r0, lsl #18
    2ee0:	01151400 	tsteq	r5, r0, lsl #8
    2ee4:	13011927 	movwne	r1, #6439	; 0x1927
    2ee8:	21150000 	tstcs	r5, r0
    2eec:	2f134900 	svccs	0x00134900
    2ef0:	1600000b 	strne	r0, [r0], -fp
    2ef4:	13490035 	movtne	r0, #36917	; 0x9035
    2ef8:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    2efc:	03193f01 	tsteq	r9, #1, 30
    2f00:	3b0b3a0e 	blcc	2d1740 <mailbuffer+0x296650>
    2f04:	1119270b 	tstne	r9, fp, lsl #14
    2f08:	40061201 	andmi	r1, r6, r1, lsl #4
    2f0c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2f10:	00001301 	andeq	r1, r0, r1, lsl #6
    2f14:	03000518 	movweq	r0, #1304	; 0x518
    2f18:	3b0b3a0e 	blcc	2d1758 <mailbuffer+0x296668>
    2f1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2f20:	19000018 	stmdbne	r0, {r3, r4}
    2f24:	0111010b 	tsteq	r1, fp, lsl #2
    2f28:	13010612 	movwne	r0, #5650	; 0x1612
    2f2c:	341a0000 	ldrcc	r0, [sl], #-0
    2f30:	3a080300 	bcc	203b38 <mailbuffer+0x1c8a48>
    2f34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f38:	00180213 	andseq	r0, r8, r3, lsl r2
    2f3c:	010b1b00 	tsteq	fp, r0, lsl #22
    2f40:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2f44:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    2f48:	3a0e0301 	bcc	383b54 <mailbuffer+0x348a64>
    2f4c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2f50:	11134919 	tstne	r3, r9, lsl r9
    2f54:	40061201 	andmi	r1, r6, r1, lsl #4
    2f58:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2f5c:	00001301 	andeq	r1, r0, r1, lsl #6
    2f60:	0300341d 	movweq	r3, #1053	; 0x41d
    2f64:	3b0b3a0e 	blcc	2d17a4 <mailbuffer+0x2966b4>
    2f68:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2f6c:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    2f70:	0e03012e 	adfeqsp	f0, f3, #0.5
    2f74:	0b3b0b3a 	bleq	ec5c64 <mailbuffer+0xe8ab74>
    2f78:	01111927 	tsteq	r1, r7, lsr #18
    2f7c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2f80:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2f84:	1f000013 	svcne	0x00000013
    2f88:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2f8c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2f90:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2f94:	34200000 	strtcc	r0, [r0], #-0
    2f98:	3a0e0300 	bcc	383ba0 <mailbuffer+0x348ab0>
    2f9c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fa0:	00180213 	andseq	r0, r8, r3, lsl r2
    2fa4:	012e2100 	teqeq	lr, r0, lsl #2
    2fa8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2fac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fb0:	13491927 	movtne	r1, #39207	; 0x9927
    2fb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2fb8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2fbc:	00130119 	andseq	r0, r3, r9, lsl r1
    2fc0:	00052200 	andeq	r2, r5, r0, lsl #4
    2fc4:	0b3a0e03 	bleq	e867d8 <mailbuffer+0xe4b6e8>
    2fc8:	1349053b 	movtne	r0, #38203	; 0x953b
    2fcc:	00001802 	andeq	r1, r0, r2, lsl #16
    2fd0:	3f012e23 	svccc	0x00012e23
    2fd4:	3a0e0319 	bcc	383c40 <mailbuffer+0x348b50>
    2fd8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2fdc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2fe0:	96184006 	ldrls	r4, [r8], -r6
    2fe4:	13011942 	movwne	r1, #6466	; 0x1942
    2fe8:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    2fec:	3a0e0301 	bcc	383bf8 <mailbuffer+0x348b08>
    2ff0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2ff4:	11134919 	tstne	r3, r9, lsl r9
    2ff8:	40061201 	andmi	r1, r6, r1, lsl #4
    2ffc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    3000:	00001301 	andeq	r1, r0, r1, lsl #6
    3004:	03012e25 	movweq	r2, #7717	; 0x1e25
    3008:	3b0b3a0e 	blcc	2d1848 <mailbuffer+0x296758>
    300c:	11192705 	tstne	r9, r5, lsl #14
    3010:	40061201 	andmi	r1, r6, r1, lsl #4
    3014:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    3018:	00001301 	andeq	r1, r0, r1, lsl #6
    301c:	01110100 	tsteq	r1, r0, lsl #2
    3020:	0b130e25 	bleq	4c68bc <mailbuffer+0x48b7cc>
    3024:	01110e03 	tsteq	r1, r3, lsl #28
    3028:	17100612 			; <UNDEFINED> instruction: 0x17100612
    302c:	24020000 	strcs	r0, [r2], #-0
    3030:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3034:	000e030b 	andeq	r0, lr, fp, lsl #6
    3038:	00160300 	andseq	r0, r6, r0, lsl #6
    303c:	0b3a0803 	bleq	e85050 <mailbuffer+0xe49f60>
    3040:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3044:	24040000 	strcs	r0, [r4], #-0
    3048:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    304c:	0008030b 	andeq	r0, r8, fp, lsl #6
    3050:	00160500 	andseq	r0, r6, r0, lsl #10
    3054:	0b3a0e03 	bleq	e86868 <mailbuffer+0xe4b778>
    3058:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    305c:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    3060:	03193f01 	tsteq	r9, #1, 30
    3064:	3b0b3a0e 	blcc	2d18a4 <mailbuffer+0x2967b4>
    3068:	1119270b 	tstne	r9, fp, lsl #14
    306c:	40061201 	andmi	r1, r6, r1, lsl #4
    3070:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    3074:	00001301 	andeq	r1, r0, r1, lsl #6
    3078:	03003407 	movweq	r3, #1031	; 0x407
    307c:	3b0b3a0e 	blcc	2d18bc <mailbuffer+0x2967cc>
    3080:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3084:	08000018 	stmdaeq	r0, {r3, r4}
    3088:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    308c:	0b3a0e03 	bleq	e868a0 <mailbuffer+0xe4b7b0>
    3090:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3094:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3098:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    309c:	09000019 	stmdbeq	r0, {r0, r3, r4}
    30a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    30a4:	0b3a0e03 	bleq	e868b8 <mailbuffer+0xe4b7c8>
    30a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    30ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
    30b0:	13011840 	movwne	r1, #6208	; 0x1840
    30b4:	050a0000 	streq	r0, [sl, #-0]
    30b8:	3a0e0300 	bcc	383cc0 <mailbuffer+0x348bd0>
    30bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30c0:	00180213 	andseq	r0, r8, r3, lsl r2
    30c4:	00350b00 	eorseq	r0, r5, r0, lsl #22
    30c8:	00001349 	andeq	r1, r0, r9, asr #6
    30cc:	01110100 	tsteq	r1, r0, lsl #2
    30d0:	0b130e25 	bleq	4c696c <mailbuffer+0x48b87c>
    30d4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    30d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    30dc:	00001710 	andeq	r1, r0, r0, lsl r7
    30e0:	0b010402 	bleq	440f0 <mailbuffer+0x9000>
    30e4:	3b0b3a0b 	blcc	2d1918 <mailbuffer+0x296828>
    30e8:	0013010b 	andseq	r0, r3, fp, lsl #2
    30ec:	00280300 	eoreq	r0, r8, r0, lsl #6
    30f0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    30f4:	16040000 	strne	r0, [r4], -r0
    30f8:	3a0e0300 	bcc	383d00 <mailbuffer+0x348c10>
    30fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3100:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    3104:	0b0b0113 	bleq	2c3558 <mailbuffer+0x288468>
    3108:	0b3b0b3a 	bleq	ec5df8 <mailbuffer+0xe8ad08>
    310c:	00001301 	andeq	r1, r0, r1, lsl #6
    3110:	03000d06 	movweq	r0, #3334	; 0xd06
    3114:	3b0b3a0e 	blcc	2d1954 <mailbuffer+0x296864>
    3118:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    311c:	0700000b 	streq	r0, [r0, -fp]
    3120:	0b0b0024 	bleq	2c31b8 <mailbuffer+0x2880c8>
    3124:	0e030b3e 	vmoveq.16	d3[0], r0
    3128:	17080000 	strne	r0, [r8, -r0]
    312c:	3a0b0b01 	bcc	2c5d38 <mailbuffer+0x28ac48>
    3130:	010b3b0b 	tsteq	fp, fp, lsl #22
    3134:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3138:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    313c:	0b3b0b3a 	bleq	ec5e2c <mailbuffer+0xe8ad3c>
    3140:	00001349 	andeq	r1, r0, r9, asr #6
    3144:	0301130a 	movweq	r1, #4874	; 0x130a
    3148:	3a0b0b0e 	bcc	2c5d88 <mailbuffer+0x28ac98>
    314c:	010b3b0b 	tsteq	fp, fp, lsl #22
    3150:	0b000013 	bleq	31a4 <_start-0x4e5c>
    3154:	13490101 	movtne	r0, #37121	; 0x9101
    3158:	00001301 	andeq	r1, r0, r1, lsl #6
    315c:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
    3160:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    3164:	0b0b000f 	bleq	2c31a8 <mailbuffer+0x2880b8>
    3168:	160e0000 	strne	r0, [lr], -r0
    316c:	3a080300 	bcc	203d74 <mailbuffer+0x1c8c84>
    3170:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3174:	0f000013 	svceq	0x00000013
    3178:	0b0b0024 	bleq	2c3210 <mailbuffer+0x288120>
    317c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3180:	0f100000 	svceq	0x00100000
    3184:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3188:	11000013 	tstne	r0, r3, lsl r0
    318c:	13490026 	movtne	r0, #36902	; 0x9026
    3190:	15120000 	ldrne	r0, [r2, #-0]
    3194:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3198:	00130113 	andseq	r0, r3, r3, lsl r1
    319c:	00051300 	andeq	r1, r5, r0, lsl #6
    31a0:	00001349 	andeq	r1, r0, r9, asr #6
    31a4:	27011514 	smladcs	r1, r4, r5, r1
    31a8:	00130119 	andseq	r0, r3, r9, lsl r1
    31ac:	00351500 	eorseq	r1, r5, r0, lsl #10
    31b0:	00001349 	andeq	r1, r0, r9, asr #6
    31b4:	49002116 	stmdbmi	r0, {r1, r2, r4, r8, sp}
    31b8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    31bc:	012e1700 	teqeq	lr, r0, lsl #14
    31c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    31c4:	0b3b0b3a 	bleq	ec5eb4 <mailbuffer+0xe8adc4>
    31c8:	01111927 	tsteq	r1, r7, lsr #18
    31cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    31d0:	01194296 			; <UNDEFINED> instruction: 0x01194296
    31d4:	18000013 	stmdane	r0, {r0, r1, r4}
    31d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    31dc:	0b3b0b3a 	bleq	ec5ecc <mailbuffer+0xe8addc>
    31e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    31e4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    31e8:	03193f01 	tsteq	r9, #1, 30
    31ec:	3b0b3a0e 	blcc	2d1a2c <mailbuffer+0x29693c>
    31f0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    31f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    31f8:	96184006 	ldrls	r4, [r8], -r6
    31fc:	13011942 	movwne	r1, #6466	; 0x1942
    3200:	341a0000 	ldrcc	r0, [sl], #-0
    3204:	3a0e0300 	bcc	383e0c <mailbuffer+0x348d1c>
    3208:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    320c:	00180213 	andseq	r0, r8, r3, lsl r2
    3210:	010b1b00 	tsteq	fp, r0, lsl #22
    3214:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3218:	341c0000 	ldrcc	r0, [ip], #-0
    321c:	3a080300 	bcc	203e24 <mailbuffer+0x1c8d34>
    3220:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3224:	00180213 	andseq	r0, r8, r3, lsl r2
    3228:	00211d00 	eoreq	r1, r1, r0, lsl #26
    322c:	182f1349 	stmdane	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    3230:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    3234:	03193f01 	tsteq	r9, #1, 30
    3238:	3b0b3a0e 	blcc	2d1a78 <mailbuffer+0x296988>
    323c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3240:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3244:	96184006 	ldrls	r4, [r8], -r6
    3248:	00001942 	andeq	r1, r0, r2, asr #18
    324c:	00110100 	andseq	r0, r1, r0, lsl #2
    3250:	01110610 	tsteq	r1, r0, lsl r6
    3254:	08030112 	stmdaeq	r3, {r1, r4, r8}
    3258:	0825081b 	stmdaeq	r5!, {r0, r1, r3, r4, fp}
    325c:	00000513 	andeq	r0, r0, r3, lsl r5
    3260:	00110100 	andseq	r0, r1, r0, lsl #2
    3264:	01110610 	tsteq	r1, r0, lsl r6
    3268:	08030112 	stmdaeq	r3, {r1, r4, r8}
    326c:	0825081b 	stmdaeq	r5!, {r0, r1, r3, r4, fp}
    3270:	00000513 	andeq	r0, r0, r3, lsl r5
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00010000 	andeq	r0, r1, r0
  14:	00000420 	andeq	r0, r0, r0, lsr #8
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01f50002 	mvnseq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00010420 	andeq	r0, r1, r0, lsr #8
  34:	00000320 	andeq	r0, r0, r0, lsr #6
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	037d0002 	cmneq	sp, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00010748 	andeq	r0, r1, r8, asr #14
  54:	000008e0 	andeq	r0, r0, r0, ror #17
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	07e70002 	strbeq	r0, [r7, r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00011028 	andeq	r1, r1, r8, lsr #32
  74:	00000350 	andeq	r0, r0, r0, asr r3
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0a660002 	beq	1980094 <mailbuffer+0x1944fa4>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00011378 	andeq	r1, r1, r8, ror r3
  94:	00000ea0 	andeq	r0, r0, r0, lsr #29
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	11820002 	orrne	r0, r2, r2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00012218 	andeq	r2, r1, r8, lsl r2
  b4:	00001f5c 	andeq	r1, r0, ip, asr pc
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	1ea30002 	cdpne	0, 10, cr0, cr3, cr2, {0}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00014174 	andeq	r4, r1, r4, ror r1
  d4:	000005ac 	andeq	r0, r0, ip, lsr #11
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	21a80002 			; <UNDEFINED> instruction: 0x21a80002
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00014720 	andeq	r4, r1, r0, lsr #14
  f4:	00000734 	andeq	r0, r0, r4, lsr r7
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	259b0002 	ldrcs	r0, [fp, #2]
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00014e54 	andeq	r4, r1, r4, asr lr
 114:	000005c8 	andeq	r0, r0, r8, asr #11
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	28620002 	stmdacs	r2!, {r1}^
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00015444 	andeq	r5, r1, r4, asr #8
 134:	00000188 	andeq	r0, r0, r8, lsl #3
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	29260002 	stmdbcs	r6!, {r1}
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	000155cc 	andeq	r5, r1, ip, asr #11
 154:	00000150 	andeq	r0, r0, r0, asr r1
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	29ce0002 	stmibcs	lr, {r1}^
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	0001571c 	andeq	r5, r1, ip, lsl r7
 174:	00000290 	muleq	r0, r0, r2
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	2b0d0002 	blcs	340194 <mailbuffer+0x3050a4>
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	000159b0 			; <UNDEFINED> instruction: 0x000159b0
 194:	00000bc8 	andeq	r0, r0, r8, asr #23
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	2ec20002 	cdpcs	0, 12, cr0, cr2, cr2, {0}
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	00016580 	andeq	r6, r1, r0, lsl #11
 1b4:	0000084c 	andeq	r0, r0, ip, asr #16
	...
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	33b10002 			; <UNDEFINED> instruction: 0x33b10002
 1c8:	00040000 	andeq	r0, r4, r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	00016dcc 	andeq	r6, r1, ip, asr #27
 1d4:	00000344 	andeq	r0, r0, r4, asr #6
	...
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	37690002 	strbcc	r0, [r9, -r2]!
 1e8:	00040000 	andeq	r0, r4, r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	00017110 	andeq	r7, r1, r0, lsl r1
 1f4:	000013c4 	andeq	r1, r0, r4, asr #7
	...
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	4cf10002 	ldclmi	0, cr0, [r1], #8
 208:	00040000 	andeq	r0, r4, r0
 20c:	00000000 	andeq	r0, r0, r0
 210:	000184d4 	ldrdeq	r8, [r1], -r4
 214:	00003bc4 	andeq	r3, r0, r4, asr #23
	...
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	64480002 	strbvs	r0, [r8], #-2
 228:	00040000 	andeq	r0, r4, r0
 22c:	00000000 	andeq	r0, r0, r0
 230:	0001c098 	muleq	r1, r8, r0
 234:	00000990 	muleq	r0, r0, r9
	...
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	67a30002 	strvs	r0, [r3, r2]!
 248:	00040000 	andeq	r0, r4, r0
 24c:	00000000 	andeq	r0, r0, r0
 250:	0001ca28 	andeq	ip, r1, r8, lsr #20
 254:	00001ad8 	ldrdeq	r1, [r0], -r8
	...
 260:	0000001c 	andeq	r0, r0, ip, lsl r0
 264:	776a0002 	strbvc	r0, [sl, -r2]!
 268:	00040000 	andeq	r0, r4, r0
 26c:	00000000 	andeq	r0, r0, r0
 270:	0001e500 	andeq	lr, r1, r0, lsl #10
 274:	000006c0 	andeq	r0, r0, r0, asr #13
	...
 280:	0000001c 	andeq	r0, r0, ip, lsl r0
 284:	7bb50002 	blvc	fed40294 <_estack+0xf6d30294>
 288:	00040000 	andeq	r0, r4, r0
 28c:	00000000 	andeq	r0, r0, r0
 290:	0001ebc0 	andeq	lr, r1, r0, asr #23
 294:	0000182c 	andeq	r1, r0, ip, lsr #16
	...
 2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a4:	89a40002 	stmibhi	r4!, {r1}
 2a8:	00040000 	andeq	r0, r4, r0
 2ac:	00000000 	andeq	r0, r0, r0
 2b0:	000203ec 	andeq	r0, r2, ip, ror #7
 2b4:	00000474 	andeq	r0, r0, r4, ror r4
	...
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	9a740002 	bls	1d002d4 <mailbuffer+0x1cc51e4>
 2c8:	00040000 	andeq	r0, r4, r0
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	00020860 	andeq	r0, r2, r0, ror #16
 2d4:	00000ba4 	andeq	r0, r0, r4, lsr #23
	...
 2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e4:	a3520002 	cmpge	r2, #2
 2e8:	00040000 	andeq	r0, r4, r0
 2ec:	00000000 	andeq	r0, r0, r0
 2f0:	00021404 	andeq	r1, r2, r4, lsl #8
 2f4:	000007ec 	andeq	r0, r0, ip, ror #15
	...
 300:	0000001c 	andeq	r0, r0, ip, lsl r0
 304:	acb70002 	ldcge	0, cr0, [r7], #8
 308:	00040000 	andeq	r0, r4, r0
 30c:	00000000 	andeq	r0, r0, r0
 310:	00021bf0 	strdeq	r1, [r2], -r0
 314:	000014a4 	andeq	r1, r0, r4, lsr #9
	...
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	bb010002 	bllt	40334 <mailbuffer+0x5244>
 328:	00040000 	andeq	r0, r4, r0
 32c:	00000000 	andeq	r0, r0, r0
 330:	00023094 	muleq	r2, r4, r0
 334:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	bd320002 	ldclt	0, cr0, [r2, #-8]!
 348:	00040000 	andeq	r0, r4, r0
 34c:	00000000 	andeq	r0, r0, r0
 350:	000235b4 			; <UNDEFINED> instruction: 0x000235b4
 354:	0000073c 	andeq	r0, r0, ip, lsr r7
	...
 360:	0000001c 	andeq	r0, r0, ip, lsl r0
 364:	c04a0002 	subgt	r0, sl, r2
 368:	00040000 	andeq	r0, r4, r0
 36c:	00000000 	andeq	r0, r0, r0
 370:	00023cf0 	strdeq	r3, [r2], -r0
 374:	000010d8 	ldrdeq	r1, [r0], -r8
	...
 380:	0000001c 	andeq	r0, r0, ip, lsl r0
 384:	cdf70002 	ldclgt	0, cr0, [r7, #8]!
 388:	00040000 	andeq	r0, r4, r0
 38c:	00000000 	andeq	r0, r0, r0
 390:	00024dc8 	andeq	r4, r2, r8, asr #27
 394:	00001284 	andeq	r1, r0, r4, lsl #5
	...
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	d3710002 	cmnle	r1, #2
 3a8:	00040000 	andeq	r0, r4, r0
 3ac:	00000000 	andeq	r0, r0, r0
 3b0:	0002604c 	andeq	r6, r2, ip, asr #32
 3b4:	00000748 	andeq	r0, r0, r8, asr #14
	...
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	d6e80002 	strbtle	r0, [r8], r2
 3c8:	00040000 	andeq	r0, r4, r0
 3cc:	00000000 	andeq	r0, r0, r0
 3d0:	00026794 	muleq	r2, r4, r7
 3d4:	000014fc 	strdeq	r1, [r0], -ip
	...
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	eb160002 	bl	5803f4 <mailbuffer+0x545304>
 3e8:	00040000 	andeq	r0, r4, r0
 3ec:	00000000 	andeq	r0, r0, r0
 3f0:	00027c90 	muleq	r2, r0, ip
 3f4:	00000554 	andeq	r0, r0, r4, asr r5
	...
 400:	0000001c 	andeq	r0, r0, ip, lsl r0
 404:	ee0c0002 	cdp	0, 0, cr0, cr12, cr2, {0}
 408:	00040000 	andeq	r0, r4, r0
 40c:	00000000 	andeq	r0, r0, r0
 410:	000281e4 	andeq	r8, r2, r4, ror #3
 414:	00000698 	muleq	r0, r8, r6
	...
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	f1740002 			; <UNDEFINED> instruction: 0xf1740002
 428:	00040000 	andeq	r0, r4, r0
 42c:	00000000 	andeq	r0, r0, r0
 430:	0002887c 	andeq	r8, r2, ip, ror r8
 434:	000007dc 	ldrdeq	r0, [r0], -ip
	...
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	f68b0002 			; <UNDEFINED> instruction: 0xf68b0002
 448:	00040000 	andeq	r0, r4, r0
 44c:	00000000 	andeq	r0, r0, r0
 450:	00029058 	andeq	r9, r2, r8, asr r0
 454:	00000f60 	andeq	r0, r0, r0, ror #30
	...
 460:	0000001c 	andeq	r0, r0, ip, lsl r0
 464:	07280002 	streq	r0, [r8, -r2]!
 468:	00040001 	andeq	r0, r4, r1
 46c:	00000000 	andeq	r0, r0, r0
 470:	00029fb8 			; <UNDEFINED> instruction: 0x00029fb8
 474:	00000524 	andeq	r0, r0, r4, lsr #10
	...
 480:	0000001c 	andeq	r0, r0, ip, lsl r0
 484:	11750002 	cmnne	r5, r2
 488:	00040001 	andeq	r0, r4, r1
 48c:	00000000 	andeq	r0, r0, r0
 490:	0002a4dc 	ldrdeq	sl, [r2], -ip
 494:	00000a00 	andeq	r0, r0, r0, lsl #20
	...
 4a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a4:	1d450002 	stclne	0, cr0, [r5, #-8]
 4a8:	00040001 	andeq	r0, r4, r1
 4ac:	00000000 	andeq	r0, r0, r0
 4b0:	0002aedc 	ldrdeq	sl, [r2], -ip
 4b4:	000003d4 	ldrdeq	r0, [r0], -r4
	...
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	20360002 	eorscs	r0, r6, r2
 4c8:	00040001 	andeq	r0, r4, r1
 4cc:	00000000 	andeq	r0, r0, r0
 4d0:	0002b2b0 			; <UNDEFINED> instruction: 0x0002b2b0
 4d4:	0000192c 	andeq	r1, r0, ip, lsr #18
	...
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	31020002 	tstcc	r2, r2
 4e8:	00040001 	andeq	r0, r4, r1
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	0002cbdc 	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
 4f4:	000001a0 	andeq	r0, r0, r0, lsr #3
	...
 500:	0000001c 	andeq	r0, r0, ip, lsl r0
 504:	320a0002 	andcc	r0, sl, #2
 508:	00040001 	andeq	r0, r4, r1
 50c:	00000000 	andeq	r0, r0, r0
 510:	0002cd7c 	andeq	ip, r2, ip, ror sp
 514:	00000d1c 	andeq	r0, r0, ip, lsl sp
	...
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	3d7f0002 	ldclcc	0, cr0, [pc, #-8]!	; 524 <_start-0x7adc>
 528:	00040001 	andeq	r0, r4, r1
 52c:	00000000 	andeq	r0, r0, r0
 530:	0002da98 	muleq	r2, r8, sl
 534:	00000114 	andeq	r0, r0, r4, lsl r1
	...
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	3e2d0002 	cdpcc	0, 2, cr0, cr13, cr2, {0}
 548:	00040001 	andeq	r0, r4, r1
 54c:	00000000 	andeq	r0, r0, r0
 550:	0002dbac 	andeq	sp, r2, ip, lsr #23
 554:	00000004 	andeq	r0, r0, r4
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	0000014b 	andeq	r0, r0, fp, asr #2
       4:	00eb0002 	rsceq	r0, fp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	6f6a6c2f 	svcvs	0x006a6c2f
      24:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
      28:	442f7275 	strtmi	r7, [pc], #-629	; 30 <_start-0x7fd0>
      2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
      30:	722f706f 	eorvc	r7, pc, #111	; 0x6f
      34:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
      38:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
      3c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      40:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
      44:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      48:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
      4c:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
      50:	462f7265 	strtmi	r7, [pc], -r5, ror #4
      54:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      58:	2f534f54 	svccs	0x00534f54
      5c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
      60:	702f6563 	eorvc	r6, pc, r3, ror #10
      64:	6174726f 	cmnvs	r4, pc, ror #4
      68:	2f656c62 	svccs	0x00656c62
      6c:	2f434347 	svccs	0x00434347
      70:	70736152 	rsbsvc	r6, r3, r2, asr r1
      74:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      78:	00695079 	rsbeq	r5, r9, r9, ror r0
      7c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffc8 <_estack+0xf7feffc8>
      80:	6a6c2f65 	bvs	1b0be1c <mailbuffer+0x1ad0d2c>
      84:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
      88:	2f727566 	svccs	0x00727566
      8c:	6b736544 	blvs	1cd95a4 <mailbuffer+0x1c9e4b4>
      90:	2f706f74 	svccs	0x00706f74
      94:	2f697072 	svccs	0x00697072
      98:	70736152 	rsbsvc	r6, r3, r2, asr r1
      9c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      a0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
      a4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      a8:	534f5452 	movtpl	r5, #62546	; 0xf452
      ac:	73616d2d 	cmnvc	r1, #2880	; 0xb40
      b0:	2f726574 	svccs	0x00726574
      b4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      b8:	534f5452 	movtpl	r5, #62546	; 0xf452
      bc:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffd95 <_estack+0xf7fefd95>
      c0:	2f656372 	svccs	0x00656372
      c4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      c8:	00656475 	rsbeq	r6, r5, r5, ror r4
      cc:	726f7000 	rsbvc	r7, pc, #0
      d0:	00632e74 	rsbeq	r2, r3, r4, ror lr
      d4:	70000001 	andvc	r0, r0, r1
      d8:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
      dc:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
      e0:	00020068 	andeq	r0, r2, r8, rrx
      e4:	726f7000 	rsbvc	r7, pc, #0
      e8:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
      ec:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
      f0:	00000100 	andeq	r0, r0, r0, lsl #2
      f4:	02050000 	andeq	r0, r5, #0
      f8:	00010000 	andeq	r0, r1, r0
      fc:	08013603 	stmdaeq	r1, {r0, r1, r9, sl, ip, sp}
     100:	836e4e77 	cmnhi	lr, #1904	; 0x770
     104:	67678368 	strbvs	r8, [r7, -r8, ror #6]!
     108:	83678367 	cmnhi	r7, #-1677721599	; 0x9c000001
     10c:	83678367 	cmnhi	r7, #-1677721599	; 0x9c000001
     110:	83678367 	cmnhi	r7, #-1677721599	; 0x9c000001
     114:	83678367 	cmnhi	r7, #-1677721599	; 0x9c000001
     118:	83678367 	cmnhi	r7, #-1677721599	; 0x9c000001
     11c:	83678367 	cmnhi	r7, #-1677721599	; 0x9c000001
     120:	686a676a 	stmdavs	sl!, {r1, r3, r5, r6, r8, r9, sl, sp, lr}^
     124:	686ca185 	stmdavs	ip!, {r0, r2, r7, r8, sp, pc}^
     128:	31f56ad7 	ldrsbcc	r6, [r5, #167]!	; 0xa7
     12c:	084ed731 	stmdaeq	lr, {r0, r4, r5, r8, r9, sl, ip, lr, pc}^
     130:	2e0a0393 	mcrcs	3, 0, r0, cr10, cr3, {4}
     134:	31315908 	teqcc	r1, r8, lsl #18
     138:	08502108 	ldmdaeq	r0, {r3, r8, sp}^
     13c:	4a0a0325 	bmi	280dd8 <mailbuffer+0x245ce8>
     140:	83838330 	orrhi	r8, r3, #48, 6	; 0xc0000000
     144:	a0a08383 	adcge	r8, r0, r3, lsl #7
     148:	0402bb4c 	streq	fp, [r2], #-2892	; 0xfffff4b4
     14c:	c6010100 	strgt	r0, [r1], -r0, lsl #2
     150:	02000000 	andeq	r0, r0, #0
     154:	00008100 	andeq	r8, r0, r0, lsl #2
     158:	fb010200 	blx	40962 <mailbuffer+0x5872>
     15c:	01000d0e 	tsteq	r0, lr, lsl #26
     160:	00010101 	andeq	r0, r1, r1, lsl #2
     164:	00010000 	andeq	r0, r1, r0
     168:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     16c:	2f656d6f 	svccs	0x00656d6f
     170:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
     174:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
     178:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     17c:	6f746b73 	svcvs	0x00746b73
     180:	70722f70 	rsbsvc	r2, r2, r0, ror pc
     184:	61522f69 	cmpvs	r2, r9, ror #30
     188:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     18c:	50797272 	rsbspl	r7, r9, r2, ror r2
     190:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     194:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     198:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
     19c:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
     1a0:	72462f72 	subvc	r2, r6, #456	; 0x1c8
     1a4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     1a8:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     1ac:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     1b0:	6f702f65 	svcvs	0x00702f65
     1b4:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     1b8:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     1bc:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     1c0:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     1c4:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     1c8:	00006950 	andeq	r6, r0, r0, asr r9
     1cc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     1d0:	2e727369 	cdpcs	3, 7, cr7, cr2, cr9, {3}
     1d4:	00010063 	andeq	r0, r1, r3, rrx
     1d8:	05000000 	streq	r0, [r0, #-0]
     1dc:	01042002 	tsteq	r4, r2
     1e0:	01330300 	teqeq	r3, r0, lsl #6
     1e4:	2f2fd8fa 	svccs	0x002fd8fa
     1e8:	13280234 	teqne	r8, #52, 4	; 0x40000003
     1ec:	2e0e03f8 	mcrcs	3, 0, r0, cr14, cr8, {7}
     1f0:	30023116 	andcc	r3, r2, r6, lsl r1
     1f4:	28023115 	stmdacs	r2, {r0, r2, r4, r8, ip, sp}
     1f8:	01160313 	tsteq	r6, r3, lsl r3
     1fc:	13300213 	teqne	r0, #805306369	; 0x30000001
     200:	1328022f 	teqne	r8, #-268435454	; 0xf0000002
     204:	f4012a03 	vst1.8	{d2-d3}, [r1], r3
     208:	089e0a03 	ldmeq	lr, {r0, r1, r9, fp}
     20c:	a1f33175 	mvnsge	r3, r5, ror r1
     210:	4408a1da 	strmi	sl, [r8], #-474	; 0xfffffe26
     214:	01000602 	tsteq	r0, r2, lsl #12
     218:	00022801 	andeq	r2, r2, r1, lsl #16
     21c:	41000200 	mrsmi	r0, R8_usr
     220:	02000001 	andeq	r0, r0, #1
     224:	0d0efb01 	vstreq	d15, [lr, #-4]
     228:	01010100 	mrseq	r0, (UNDEF: 17)
     22c:	00000001 	andeq	r0, r0, r1
     230:	01000001 	tsteq	r0, r1
     234:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 180 <_start-0x7e80>
     238:	6a6c2f65 	bvs	1b0bfd4 <mailbuffer+0x1ad0ee4>
     23c:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
     240:	2f727566 	svccs	0x00727566
     244:	6b736544 	blvs	1cd975c <mailbuffer+0x1c9e66c>
     248:	2f706f74 	svccs	0x00706f74
     24c:	2f697072 	svccs	0x00697072
     250:	70736152 	rsbsvc	r6, r3, r2, asr r1
     254:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     258:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     25c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     260:	534f5452 	movtpl	r5, #62546	; 0xf452
     264:	73616d2d 	cmnvc	r1, #2880	; 0xb40
     268:	2f726574 	svccs	0x00726574
     26c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     270:	534f5452 	movtpl	r5, #62546	; 0xf452
     274:	756f532f 	strbvc	r5, [pc, #-815]!	; ffffff4d <_estack+0xf7feff4d>
     278:	00656372 	rsbeq	r6, r5, r2, ror r3
     27c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1c8 <_start-0x7e38>
     280:	6a6c2f65 	bvs	1b0c01c <mailbuffer+0x1ad0f2c>
     284:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
     288:	2f727566 	svccs	0x00727566
     28c:	6b736544 	blvs	1cd97a4 <mailbuffer+0x1c9e6b4>
     290:	2f706f74 	svccs	0x00706f74
     294:	2f697072 	svccs	0x00697072
     298:	70736152 	rsbsvc	r6, r3, r2, asr r1
     29c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     2a0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     2a4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     2a8:	534f5452 	movtpl	r5, #62546	; 0xf452
     2ac:	73616d2d 	cmnvc	r1, #2880	; 0xb40
     2b0:	2f726574 	svccs	0x00726574
     2b4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     2b8:	534f5452 	movtpl	r5, #62546	; 0xf452
     2bc:	756f532f 	strbvc	r5, [pc, #-815]!	; ffffff95 <_estack+0xf7feff95>
     2c0:	2f656372 	svccs	0x00656372
     2c4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     2c8:	00656475 	rsbeq	r6, r5, r5, ror r4
     2cc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 218 <_start-0x7de8>
     2d0:	6a6c2f65 	bvs	1b0c06c <mailbuffer+0x1ad0f7c>
     2d4:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
     2d8:	2f727566 	svccs	0x00727566
     2dc:	6b736544 	blvs	1cd97f4 <mailbuffer+0x1c9e704>
     2e0:	2f706f74 	svccs	0x00706f74
     2e4:	2f697072 	svccs	0x00697072
     2e8:	70736152 	rsbsvc	r6, r3, r2, asr r1
     2ec:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     2f0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     2f4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     2f8:	534f5452 	movtpl	r5, #62546	; 0xf452
     2fc:	73616d2d 	cmnvc	r1, #2880	; 0xb40
     300:	2f726574 	svccs	0x00726574
     304:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     308:	534f5452 	movtpl	r5, #62546	; 0xf452
     30c:	756f532f 	strbvc	r5, [pc, #-815]!	; ffffffe5 <_estack+0xf7feffe5>
     310:	2f656372 	svccs	0x00656372
     314:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     318:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     31c:	4343472f 	movtmi	r4, #14127	; 0x372f
     320:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     324:	72656270 	rsbvc	r6, r5, #112, 4
     328:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     32c:	72630000 	rsbvc	r0, r3, #0
     330:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     334:	632e656e 	teqvs	lr, #461373440	; 0x1b800000
     338:	00000100 	andeq	r0, r0, r0, lsl #2
     33c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     340:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     344:	6f700000 	svcvs	0x00700000
     348:	616d7472 	smcvs	55106	; 0xd742
     34c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     350:	00030068 	andeq	r0, r3, r8, rrx
     354:	6f726300 	svcvs	0x00726300
     358:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     35c:	00682e65 	rsbeq	r2, r8, r5, ror #28
     360:	00000002 	andeq	r0, r0, r2
     364:	48020500 	stmdami	r2, {r8, sl}
     368:	03000107 	movweq	r0, #263	; 0x107
     36c:	0801018a 	stmdaeq	r1, {r1, r3, r7, r8}
     370:	a06a6779 	rsbge	r6, sl, r9, ror r7
     374:	4e683283 	cdpmi	2, 6, cr3, cr8, cr3, {4}
     378:	69676767 	stmdbvs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
     37c:	69678783 	stmdbvs	r7!, {r0, r1, r7, r8, r9, sl, pc}^
     380:	04020086 	streq	r0, [r2], #-134	; 0xffffff7a
     384:	00d60601 	sbcseq	r0, r6, r1, lsl #12
     388:	9e030402 	cdpls	4, 0, cr0, cr3, cr2, {0}
     38c:	03040200 	movweq	r0, #16896	; 0x4200
     390:	6a760806 	bvs	1d823b0 <mailbuffer+0x1d472c0>
     394:	086ad74d 	stmdaeq	sl!, {r0, r2, r3, r6, r8, r9, sl, ip, lr, pc}^
     398:	a0bdbf5d 	adcsge	fp, sp, sp, asr pc
     39c:	085e08be 	ldmdaeq	lr, {r1, r2, r3, r4, r5, r7, fp}^
     3a0:	76086a3f 			; <UNDEFINED> instruction: 0x76086a3f
     3a4:	3324084e 	teqcc	r4, #5111808	; 0x4e0000
     3a8:	a0849fa0 	addge	r9, r4, r0, lsr #31
     3ac:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     3b0:	00d60601 	sbcseq	r0, r6, r1, lsl #12
     3b4:	9e030402 	cdpls	4, 0, cr0, cr3, cr2, {0}
     3b8:	08730306 	ldmdaeq	r3!, {r1, r2, r8, r9}^
     3bc:	080f0374 	stmdaeq	pc, {r2, r4, r5, r6, r8, r9}	; <UNPREDICTABLE>
     3c0:	23084e3c 	movwcs	r4, #36412	; 0x8e3c
     3c4:	d7302108 	ldrle	r2, [r0, -r8, lsl #2]!
     3c8:	bb83a4d9 	bllt	fe0e9734 <_estack+0xf60d9734>
     3cc:	d9bc3086 	ldmible	ip!, {r1, r2, r7, ip, sp}
     3d0:	8485a531 	strhi	sl, [r5], #1329	; 0x531
     3d4:	0200a085 	andeq	sl, r0, #133	; 0x85
     3d8:	d6060104 	strle	r0, [r6], -r4, lsl #2
     3dc:	03040200 	movweq	r0, #16896	; 0x4200
     3e0:	6503069e 	strvs	r0, [r3, #-1694]	; 0xfffff962
     3e4:	6e037408 	cdpvs	4, 0, cr7, cr3, cr8, {0}
     3e8:	9e3103ba 	mrcls	3, 1, r0, cr1, cr10, {5}
     3ec:	084e5908 	stmdaeq	lr, {r3, r8, fp, ip, lr}^
     3f0:	30313122 	eorscc	r3, r1, r2, lsr #2
     3f4:	790330a1 	stmdbvc	r3, {r0, r5, r7, ip, sp}
     3f8:	080c03d6 	stmdaeq	ip, {r1, r2, r4, r6, r7, r8, r9}
     3fc:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     400:	28020601 	stmdacs	r2, {r0, r9, sl}
     404:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
     408:	02009e03 	andeq	r9, r0, #3, 28	; 0x30
     40c:	bd060304 	stclt	3, cr0, [r6, #-16]
     410:	03040200 	movweq	r0, #16896	; 0x4200
     414:	0200ae08 	andeq	sl, r0, #8, 28	; 0x80
     418:	4ebb0104 	frdmie	f0, f3, f4
     41c:	02002308 	andeq	r2, r0, #8, 6	; 0x20000000
     420:	00680304 	rsbeq	r0, r8, r4, lsl #6
     424:	f0030402 			; <UNDEFINED> instruction: 0xf0030402
     428:	01040200 	mrseq	r0, R12_usr
     42c:	6b066606 	blvs	199c4c <mailbuffer+0x15eb5c>
     430:	9f6a6767 	svcls	0x006a6767
     434:	084e3d08 	stmdaeq	lr, {r3, r8, sl, fp, ip, sp}^
     438:	bc838343 	stclt	3, cr8, [r3], {67}	; 0x43
     43c:	d74d6af4 			; <UNDEFINED> instruction: 0xd74d6af4
     440:	01000602 	tsteq	r0, r2, lsl #12
     444:	00018501 	andeq	r8, r1, r1, lsl #10
     448:	2f000200 	svccs	0x00000200
     44c:	02000001 	andeq	r0, r0, #1
     450:	0d0efb01 	vstreq	d15, [lr, #-4]
     454:	01010100 	mrseq	r0, (UNDEF: 17)
     458:	00000001 	andeq	r0, r0, r1
     45c:	01000001 	tsteq	r0, r1
     460:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3ac <_start-0x7c54>
     464:	6a6c2f65 	bvs	1b0c200 <mailbuffer+0x1ad1110>
     468:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
     46c:	2f727566 	svccs	0x00727566
     470:	6b736544 	blvs	1cd9988 <mailbuffer+0x1c9e898>
     474:	2f706f74 	svccs	0x00706f74
     478:	2f697072 	svccs	0x00697072
     47c:	70736152 	rsbsvc	r6, r3, r2, asr r1
     480:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     484:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     488:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     48c:	534f5452 	movtpl	r5, #62546	; 0xf452
     490:	73616d2d 	cmnvc	r1, #2880	; 0xb40
     494:	2f726574 	svccs	0x00726574
     498:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     49c:	534f5452 	movtpl	r5, #62546	; 0xf452
     4a0:	756f532f 	strbvc	r5, [pc, #-815]!	; 179 <_start-0x7e87>
     4a4:	00656372 	rsbeq	r6, r5, r2, ror r3
     4a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3f4 <_start-0x7c0c>
     4ac:	6a6c2f65 	bvs	1b0c248 <mailbuffer+0x1ad1158>
     4b0:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
     4b4:	2f727566 	svccs	0x00727566
     4b8:	6b736544 	blvs	1cd99d0 <mailbuffer+0x1c9e8e0>
     4bc:	2f706f74 	svccs	0x00706f74
     4c0:	2f697072 	svccs	0x00697072
     4c4:	70736152 	rsbsvc	r6, r3, r2, asr r1
     4c8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     4cc:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     4d0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     4d4:	534f5452 	movtpl	r5, #62546	; 0xf452
     4d8:	73616d2d 	cmnvc	r1, #2880	; 0xb40
     4dc:	2f726574 	svccs	0x00726574
     4e0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     4e4:	534f5452 	movtpl	r5, #62546	; 0xf452
     4e8:	756f532f 	strbvc	r5, [pc, #-815]!	; 1c1 <_start-0x7e3f>
     4ec:	2f656372 	svccs	0x00656372
     4f0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     4f4:	00656475 	rsbeq	r6, r5, r5, ror r4
     4f8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 444 <_start-0x7bbc>
     4fc:	6a6c2f65 	bvs	1b0c298 <mailbuffer+0x1ad11a8>
     500:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
     504:	2f727566 	svccs	0x00727566
     508:	6b736544 	blvs	1cd9a20 <mailbuffer+0x1c9e930>
     50c:	2f706f74 	svccs	0x00706f74
     510:	2f697072 	svccs	0x00697072
     514:	70736152 	rsbsvc	r6, r3, r2, asr r1
     518:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     51c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     520:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     524:	534f5452 	movtpl	r5, #62546	; 0xf452
     528:	73616d2d 	cmnvc	r1, #2880	; 0xb40
     52c:	2f726574 	svccs	0x00726574
     530:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     534:	534f5452 	movtpl	r5, #62546	; 0xf452
     538:	756f532f 	strbvc	r5, [pc, #-815]!	; 211 <_start-0x7def>
     53c:	2f656372 	svccs	0x00656372
     540:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     544:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     548:	4343472f 	movtmi	r4, #14127	; 0x372f
     54c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     550:	72656270 	rsbvc	r6, r5, #112, 4
     554:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     558:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     55c:	632e7473 	teqvs	lr, #1929379840	; 0x73000000
     560:	00000100 	andeq	r0, r0, r0, lsl #2
     564:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     568:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     56c:	6f700000 	svcvs	0x00700000
     570:	616d7472 	smcvs	55106	; 0xd742
     574:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     578:	00030068 	andeq	r0, r3, r8, rrx
     57c:	05000000 	streq	r0, [r0, #-0]
     580:	01102802 	tsteq	r0, r2, lsl #16
     584:	00cc0300 	sbceq	r0, ip, r0, lsl #6
     588:	86400801 	strbhi	r0, [r0], -r1, lsl #16
     58c:	f384836a 			; <UNDEFINED> instruction: 0xf384836a
     590:	f33e084e 	vsub.i64	q0, q7, q7
     594:	685f084e 	ldmdavs	pc, {r1, r2, r3, r6, fp}^	; <UNPREDICTABLE>
     598:	67838383 	strvs	r8, [r3, r3, lsl #7]
     59c:	3d086869 	stccc	8, cr6, [r8, #-420]	; 0xfffffe5c
     5a0:	035d084e 	cmpeq	sp, #5111808	; 0x4e0000
     5a4:	03686609 	cmneq	r8, #9437184	; 0x900000
     5a8:	02008214 	andeq	r8, r0, #20, 4	; 0x40000001
     5ac:	82060304 	andhi	r0, r6, #4, 6	; 0x10000000
     5b0:	01040200 	mrseq	r0, R12_usr
     5b4:	83c10666 	bichi	r0, r1, #106954752	; 0x6600000
     5b8:	686a6783 	stmdavs	sl!, {r0, r1, r7, r8, r9, sl, sp, lr}^
     5bc:	084e3d08 	stmdaeq	lr, {r3, r8, sl, fp, ip, sp}^
     5c0:	69a29f3f 	stmibvs	r2!, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, pc}
     5c4:	086785a0 	stmdaeq	r7!, {r5, r7, r8, sl, pc}^
     5c8:	0004023d 	andeq	r0, r4, sp, lsr r2
     5cc:	02c80101 	sbceq	r0, r8, #1073741824	; 0x40000000
     5d0:	00020000 	andeq	r0, r2, r0
     5d4:	0000016f 	andeq	r0, r0, pc, ror #2
     5d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     5dc:	0101000d 	tsteq	r1, sp
     5e0:	00000101 	andeq	r0, r0, r1, lsl #2
     5e4:	00000100 	andeq	r0, r0, r0, lsl #2
     5e8:	6f682f01 	svcvs	0x00682f01
     5ec:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 440 <_start-0x7bc0>
     5f0:	61736f6a 	cmnvs	r3, sl, ror #30
     5f4:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
     5f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     5fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
     600:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     604:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     608:	72656270 	rsbvc	r6, r5, #112, 4
     60c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     610:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     614:	4f545265 	svcmi	0x00545265
     618:	616d2d53 	cmnvs	sp, r3, asr sp
     61c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     620:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     624:	4f545265 	svcmi	0x00545265
     628:	6f532f53 	svcvs	0x00532f53
     62c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     630:	73752f00 	cmnvc	r5, #0, 30
     634:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     638:	63672f62 	cmnvs	r7, #392	; 0x188
     63c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     640:	6f6e2d6d 	svcvs	0x006e2d6d
     644:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     648:	2f696261 	svccs	0x00696261
     64c:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
     650:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     654:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     658:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     65c:	2f656d6f 	svccs	0x00656d6f
     660:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
     664:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
     668:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     66c:	6f746b73 	svcvs	0x00746b73
     670:	70722f70 	rsbsvc	r2, r2, r0, ror pc
     674:	61522f69 	cmpvs	r2, r9, ror #30
     678:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     67c:	50797272 	rsbspl	r7, r9, r2, ror r2
     680:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     684:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     688:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
     68c:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
     690:	72462f72 	subvc	r2, r6, #456	; 0x1c8
     694:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     698:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     69c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     6a0:	6f702f65 	svcvs	0x00702f65
     6a4:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     6a8:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     6ac:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     6b0:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     6b4:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     6b8:	2f006950 	svccs	0x00006950
     6bc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     6c0:	6f6a6c2f 	svcvs	0x006a6c2f
     6c4:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
     6c8:	442f7275 	strtmi	r7, [pc], #-629	; 6d0 <_start-0x7930>
     6cc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     6d0:	722f706f 	eorvc	r7, pc, #111	; 0x6f
     6d4:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
     6d8:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     6dc:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     6e0:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     6e4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     6e8:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     6ec:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
     6f0:	462f7265 	strtmi	r7, [pc], -r5, ror #4
     6f4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     6f8:	2f534f54 	svccs	0x00534f54
     6fc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     700:	692f6563 	stmdbvs	pc!, {r0, r1, r5, r6, r8, sl, sp, lr}	; <UNPREDICTABLE>
     704:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     708:	00006564 	andeq	r6, r0, r4, ror #10
     70c:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
     710:	00632e65 	rsbeq	r2, r3, r5, ror #28
     714:	73000001 	movwvc	r0, #1
     718:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
     71c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     720:	70000002 	andvc	r0, r0, r2
     724:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
     728:	6f726361 	svcvs	0x00726361
     72c:	0300682e 	movweq	r6, #2094	; 0x82e
     730:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     734:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     738:	00000400 	andeq	r0, r0, r0, lsl #8
     73c:	6b736174 	blvs	1cd8d14 <mailbuffer+0x1c9dc24>
     740:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     744:	00000000 	andeq	r0, r0, r0
     748:	13780205 	cmnne	r8, #1342177280	; 0x50000000
     74c:	97030001 	strls	r0, [r3, -r1]
     750:	5b080102 	blpl	200b60 <mailbuffer+0x1c5a70>
     754:	673d0830 			; <UNDEFINED> instruction: 0x673d0830
     758:	67590883 	ldrbvs	r0, [r9, -r3, lsl #17]
     75c:	d8846d68 	stmle	r4, {r3, r5, r6, r8, sl, fp, sp, lr}
     760:	32858351 	addcc	r8, r5, #1140850689	; 0x44000001
     764:	93086ad7 	movwls	r6, #35543	; 0x8ad7
     768:	6a676851 	bvs	19da8b4 <mailbuffer+0x199f7c4>
     76c:	67869fa0 	strvs	r9, [r6, r0, lsr #31]
     770:	516b6e67 	cmnpl	fp, r7, ror #28
     774:	01d003d7 	ldrsbeq	r0, [r0, #55]	; 0x37
     778:	03910866 	orrseq	r0, r1, #6684672	; 0x660000
     77c:	bd324a0b 	vldmdblt	r2!, {s8-s18}
     780:	32dc8486 	sbcscc	r8, ip, #-2046820352	; 0x86000000
     784:	336a4e32 	cmncc	sl, #800	; 0x320
     788:	4e676a4c 	vnmulmi.f32	s13, s14, s24
     78c:	02002f33 	andeq	r2, r0, #51, 30	; 0xcc
     790:	9e060104 	adflss	f0, f6, f4
     794:	03040200 	movweq	r0, #16896	; 0x4200
     798:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     79c:	02008204 	andeq	r8, r0, #4, 4	; 0x40000000
     7a0:	00660604 	rsbeq	r0, r6, r4, lsl #12
     7a4:	06060402 	streq	r0, [r6], -r2, lsl #8
     7a8:	c1a1f431 			; <UNDEFINED> instruction: 0xc1a1f431
     7ac:	4b508451 	blmi	14218f8 <mailbuffer+0x13e6808>
     7b0:	00334b50 	eorseq	r4, r3, r0, asr fp
     7b4:	4c020402 	cfstrsmi	mvf0, [r2], {2}
     7b8:	01d203d7 	ldrsbeq	r0, [r2, #55]	; 0x37
     7bc:	080c0366 	stmdaeq	ip, {r1, r2, r5, r6, r8, r9}
     7c0:	86be4c90 	ssathi	r4, #31, r0, lsl #25
     7c4:	68da8484 	ldmvs	sl, {r2, r7, sl, pc}^
     7c8:	a1820903 	orrge	r0, r2, r3, lsl #18
     7cc:	6ad74f6b 	bvs	ff5d4580 <_estack+0xf75c4580>
     7d0:	0d039108 	stfeqd	f1, [r3, #-32]	; 0xffffffe0
     7d4:	6885324a 	stmvs	r5, {r1, r3, r6, r9, ip, sp}
     7d8:	0d036b68 	vstreq	d6, [r3, #-416]	; 0xfffffe60
     7dc:	03d8849e 	bicseq	r8, r8, #-1644167168	; 0x9e000000
     7e0:	866a4a0a 	strbthi	r4, [sl], -sl, lsl #20
     7e4:	4e2f33d9 	mcrmi	3, 1, r3, cr15, cr9, {6}
     7e8:	6a4c306a 	bvs	130c998 <mailbuffer+0x12d18a8>
     7ec:	2f334e67 	svccs	0x00334e67
     7f0:	01040200 	mrseq	r0, R12_usr
     7f4:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     7f8:	00660304 	rsbeq	r0, r6, r4, lsl #6
     7fc:	82040402 	andhi	r0, r4, #33554432	; 0x2000000
     800:	06040200 	streq	r0, [r4], -r0, lsl #4
     804:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     808:	f4310606 			; <UNDEFINED> instruction: 0xf4310606
     80c:	bb9e1103 	bllt	fe784c20 <_estack+0xf6774c20>
     810:	4b50844b 	blmi	1421944 <mailbuffer+0x13e6854>
     814:	00304b4f 	eorseq	r4, r0, pc, asr #22
     818:	4c020402 	cfstrsmi	mvf0, [r2], {2}
     81c:	7b086ad7 	blvc	21b380 <mailbuffer+0x1e0290>
     820:	a367864d 	cmnge	r7, #80740352	; 0x4d00000
     824:	68da8484 	ldmvs	sl, {r2, r7, sl, pc}^
     828:	a1820903 	orrge	r0, r2, r3, lsl #18
     82c:	6ad7506a 	bvs	ff5d49dc <_estack+0xf75c49dc>
     830:	672f4108 	strvs	r4, [pc, -r8, lsl #2]!
     834:	086ad730 	stmdaeq	sl!, {r4, r5, r8, r9, sl, ip, lr, pc}^
     838:	6ad76841 	bvs	ff5da944 <_estack+0xf75ca944>
     83c:	d7834108 	strle	r4, [r3, r8, lsl #2]
     840:	084a2203 	stmdaeq	sl, {r0, r1, r9, sp}^
     844:	820d0375 	andhi	r0, sp, #-738197503	; 0xd4000001
     848:	bcd7f368 	ldcllt	3, cr15, [r7], {104}	; 0x68
     84c:	bcf3f3a3 	ldcllt	3, cr15, [r3], #652	; 0x28c
     850:	4e3d08f6 	mrcmi	8, 1, r0, cr13, cr6, {7}
     854:	d7845908 	strle	r5, [r4, r8, lsl #18]
     858:	920884bc 	andls	r8, r8, #188, 8	; 0xbc000000
     85c:	3143084e 	cmpcc	r3, lr, asr #16
     860:	31da8632 	bicscc	r8, sl, r2, lsr r6
     864:	2e6d03be 	mcrcs	3, 3, r0, cr13, cr14, {5}
     868:	68821703 	stmvs	r2, {r0, r1, r8, r9, sl, ip}
     86c:	84303031 	ldrthi	r3, [r0], #-49	; 0xffffffcf
     870:	03be31d8 			; <UNDEFINED> instruction: 0x03be31d8
     874:	11032e73 	tstne	r3, r3, ror lr
     878:	4ebb6882 	cdpmi	8, 11, cr6, cr11, cr2, {4}
     87c:	d72f3f08 	strle	r3, [pc, -r8, lsl #30]!
     880:	086ad730 	stmdaeq	sl!, {r4, r5, r8, r9, sl, ip, lr, pc}^
     884:	6ad7d840 	bvs	ff5f698c <_estack+0xf75e698c>
     888:	082f3f08 	stmdaeq	pc!, {r3, r8, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
     88c:	6ad73021 	bvs	ff5cc918 <_estack+0xf75bc918>
     890:	22084008 	andcs	r4, r8, #8
     894:	000602d7 	ldrdeq	r0, [r6], -r7
     898:	04e80101 	strbteq	r0, [r8], #257	; 0x101
     89c:	00020000 	andeq	r0, r2, r0
     8a0:	0000018b 	andeq	r0, r0, fp, lsl #3
     8a4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     8a8:	0101000d 	tsteq	r1, sp
     8ac:	00000101 	andeq	r0, r0, r1, lsl #2
     8b0:	00000100 	andeq	r0, r0, r0, lsl #2
     8b4:	6f682f01 	svcvs	0x00682f01
     8b8:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 70c <_start-0x78f4>
     8bc:	61736f6a 	cmnvs	r3, sl, ror #30
     8c0:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
     8c4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     8c8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     8cc:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     8d0:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     8d4:	72656270 	rsbvc	r6, r5, #112, 4
     8d8:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     8dc:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     8e0:	4f545265 	svcmi	0x00545265
     8e4:	616d2d53 	cmnvs	sp, r3, asr sp
     8e8:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     8ec:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     8f0:	4f545265 	svcmi	0x00545265
     8f4:	6f532f53 	svcvs	0x00532f53
     8f8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     8fc:	73752f00 	cmnvc	r5, #0, 30
     900:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     904:	63672f62 	cmnvs	r7, #392	; 0x188
     908:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     90c:	6f6e2d6d 	svcvs	0x006e2d6d
     910:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     914:	2f696261 	svccs	0x00696261
     918:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
     91c:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     920:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     924:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     928:	2f656d6f 	svccs	0x00656d6f
     92c:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
     930:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
     934:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     938:	6f746b73 	svcvs	0x00746b73
     93c:	70722f70 	rsbsvc	r2, r2, r0, ror pc
     940:	61522f69 	cmpvs	r2, r9, ror #30
     944:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     948:	50797272 	rsbspl	r7, r9, r2, ror r2
     94c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     950:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     954:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
     958:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
     95c:	72462f72 	subvc	r2, r6, #456	; 0x1c8
     960:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     964:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     968:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     96c:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     970:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     974:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     978:	2f656d6f 	svccs	0x00656d6f
     97c:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
     980:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
     984:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     988:	6f746b73 	svcvs	0x00746b73
     98c:	70722f70 	rsbsvc	r2, r2, r0, ror pc
     990:	61522f69 	cmpvs	r2, r9, ror #30
     994:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     998:	50797272 	rsbspl	r7, r9, r2, ror r2
     99c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     9a0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     9a4:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
     9a8:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
     9ac:	72462f72 	subvc	r2, r6, #456	; 0x1c8
     9b0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     9b4:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     9b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     9bc:	6f702f65 	svcvs	0x00702f65
     9c0:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     9c4:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     9c8:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     9cc:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     9d0:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     9d4:	00006950 	andeq	r6, r0, r0, asr r9
     9d8:	6b736174 	blvs	1cd8fb0 <mailbuffer+0x1c9dec0>
     9dc:	00632e73 	rsbeq	r2, r3, r3, ror lr
     9e0:	73000001 	movwvc	r0, #1
     9e4:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
     9e8:	00682e66 	rsbeq	r2, r8, r6, ror #28
     9ec:	70000002 	andvc	r0, r0, r2
     9f0:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
     9f4:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
     9f8:	00030068 	andeq	r0, r3, r8, rrx
     9fc:	726f7000 	rsbvc	r7, pc, #0
     a00:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     a04:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     a08:	00000400 	andeq	r0, r0, r0, lsl #8
     a0c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     a10:	534f5452 	movtpl	r5, #62546	; 0xf452
     a14:	0300682e 	movweq	r6, #2094	; 0x82e
     a18:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     a1c:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     a20:	00000300 	andeq	r0, r0, r0, lsl #6
     a24:	6b736174 	blvs	1cd8ffc <mailbuffer+0x1c9df0c>
     a28:	0300682e 	movweq	r6, #2094	; 0x82e
     a2c:	00000000 	andeq	r0, r0, r0
     a30:	22180205 	andscs	r0, r8, #1342177280	; 0x50000000
     a34:	9b030001 	blls	c0a40 <mailbuffer+0x85950>
     a38:	09030103 	stmdbeq	r3, {r0, r1, r8}
     a3c:	03a09008 	moveq	r9, #8
     a40:	03d76618 	bicseq	r6, r7, #24, 12	; 0x1800000
     a44:	0c036614 	stceq	6, cr6, [r3], {20}
     a48:	6b6bddd6 	blvs	1af81a8 <mailbuffer+0x1abd0b8>
     a4c:	84a2d730 	strthi	sp, [r2], #1840	; 0x730
     a50:	d8a052a3 	stmiale	r0!, {r0, r1, r5, r7, r9, ip, lr}
     a54:	0903d889 	stmdbeq	r3, {r0, r3, r7, fp, ip, lr, pc}
     a58:	0200d89e 	andeq	sp, r0, #10354688	; 0x9e0000
     a5c:	d6060104 	strle	r0, [r6], -r4, lsl #2
     a60:	03040200 	movweq	r0, #16896	; 0x4200
     a64:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     a68:	76080603 	strvc	r0, [r8], -r3, lsl #12
     a6c:	03040200 	movweq	r0, #16896	; 0x4200
     a70:	684e4e4e 	stmdavs	lr, {r1, r2, r3, r6, r9, sl, fp, lr}^
     a74:	d733d8a2 	ldrle	sp, [r3, -r2, lsr #17]!
     a78:	323f086c 	eorscc	r0, pc, #108, 16	; 0x6c0000
     a7c:	02004ebc 	andeq	r4, r0, #188, 28	; 0xbc0
     a80:	66060104 	strvs	r0, [r6], -r4, lsl #2
     a84:	02040200 	andeq	r0, r4, #0, 4
     a88:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     a8c:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     a90:	34060404 	strcc	r0, [r6], #-1028	; 0xfffffbfc
     a94:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     a98:	bf858485 	svclt	0x00858485
     a9c:	a031dada 	ldrsbtge	sp, [r1], -sl
     aa0:	1003bd68 	andne	fp, r3, r8, ror #26
     aa4:	4f5a084a 	svcmi	0x005a084a
     aa8:	00dda031 	sbcseq	sl, sp, r1, lsr r0
     aac:	06010402 	streq	r0, [r1], -r2, lsl #8
     ab0:	6ebc069e 	mrcvs	6, 5, r0, cr12, cr14, {4}
     ab4:	01040200 	mrseq	r0, R12_usr
     ab8:	bc069e06 	stclt	14, cr9, [r6], {6}
     abc:	bb6d684f 	bllt	1b5ac00 <mailbuffer+0x1b1fb10>
     ac0:	bc684e4d 	stcllt	14, cr4, [r8], #-308	; 0xfffffecc
     ac4:	4d3e0852 	ldcmi	8, cr0, [lr, #-328]!	; 0xfffffeb8
     ac8:	2e0e0368 	cdpcs	3, 0, cr0, cr14, cr8, {3}
     acc:	4f4cbbbf 	svcmi	0x004cbbbf
     ad0:	0852bc68 	ldmdaeq	r2, {r3, r5, r6, sl, fp, ip, sp, pc}^
     ad4:	02003240 	andeq	r3, r0, #64, 4
     ad8:	66060104 	strvs	r0, [r6], -r4, lsl #2
     adc:	02040200 	andeq	r0, r4, #0, 4
     ae0:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     ae4:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     ae8:	2f060404 	svccs	0x00060404
     aec:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     af0:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
     af4:	02003004 	andeq	r3, r0, #4
     af8:	6ed70404 	cdpvs	4, 13, cr0, cr7, cr4, {0}
     afc:	684f5b08 	stmdavs	pc, {r3, r8, r9, fp, ip, lr}^	; <UNPREDICTABLE>
     b00:	4fbc304d 	svcmi	0x00bc304d
     b04:	01040200 	mrseq	r0, R12_usr
     b08:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     b0c:	00820204 	addeq	r0, r2, r4, lsl #4
     b10:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     b14:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     b18:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
     b1c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     b20:	6c84866a 	stcvs	6, cr8, [r4], {106}	; 0x6a
     b24:	13036a69 	movwne	r6, #14953	; 0x3a69
     b28:	08886a4a 	stmeq	r8, {r1, r3, r6, r9, fp, sp, lr}
     b2c:	02008341 	andeq	r8, r0, #67108865	; 0x4000001
     b30:	d6060104 	strle	r0, [r6], -r4, lsl #2
     b34:	03040200 	movweq	r0, #16896	; 0x4200
     b38:	7708069e 			; <UNDEFINED> instruction: 0x7708069e
     b3c:	52bb3268 	adcspl	r3, fp, #104, 4	; 0x80000006
     b40:	bc323f08 	ldclt	15, cr3, [r2], #-32	; 0xffffffe0
     b44:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
     b48:	00660601 	rsbeq	r0, r6, r1, lsl #12
     b4c:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
     b50:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     b54:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     b58:	00330604 	eorseq	r0, r3, r4, lsl #12
     b5c:	85040402 	strhi	r0, [r4, #-1026]	; 0xfffffbfe
     b60:	30bc8584 	adcscc	r8, ip, r4, lsl #11
     b64:	f851a168 			; <UNDEFINED> instruction: 0xf851a168
     b68:	0852bea2 	ldmdaeq	r2, {r1, r5, r7, r9, sl, fp, ip, sp, pc}^
     b6c:	bd514b3d 	vldrlt	d20, [r1, #-244]	; 0xffffff0c
     b70:	d74f84c0 	strble	r8, [pc, -r0, asr #9]
     b74:	4e44086e 	cdpmi	8, 4, cr0, cr4, cr14, {3}
     b78:	01040200 	mrseq	r0, R12_usr
     b7c:	bc066606 	stclt	6, cr6, [r6], {6}
     b80:	0083a430 	addeq	sl, r3, r0, lsr r4
     b84:	06010402 	streq	r0, [r1], -r2, lsl #8
     b88:	040200d6 	streq	r0, [r2], #-214	; 0xffffff2a
     b8c:	02009e03 	andeq	r9, r0, #3, 28	; 0x30
     b90:	08060304 	stmdaeq	r6, {r2, r8, r9}
     b94:	bc32f677 	ldclt	6, cr15, [r2], #-476	; 0xfffffe24
     b98:	084a0903 	stmdaeq	sl, {r0, r1, r8, fp}^
     b9c:	4c4c503d 	mcrrmi	0, 3, r5, ip, cr13
     ba0:	5908a0a2 	stmdbpl	r8, {r1, r5, r7, sp, pc}
     ba4:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     ba8:	00d60601 	sbcseq	r0, r6, r1, lsl #12
     bac:	9e030402 	cdpls	4, 0, cr0, cr3, cr2, {0}
     bb0:	c0970806 	addsgt	r0, r7, r6, lsl #16
     bb4:	660d03d7 			; <UNDEFINED> instruction: 0x660d03d7
     bb8:	20080d03 	andcs	r0, r8, r3, lsl #26
     bbc:	e4080d03 	str	r0, [r8], #-3331	; 0xfffff2fd
     bc0:	a0660a03 	rsbge	r0, r6, r3, lsl #20
     bc4:	82090383 	andhi	r0, r9, #201326594	; 0xc000002
     bc8:	01040200 	mrseq	r0, R12_usr
     bcc:	4eba0d03 	cdpmi	13, 11, cr0, cr10, cr3, {0}
     bd0:	bb839ff6 	bllt	fe0e8bb0 <_estack+0xf60d8bb0>
     bd4:	7508f532 	strvc	pc, [r8, #-1330]	; 0xffffface
     bd8:	03220832 	teqeq	r2, #3276800	; 0x320000
     bdc:	d8304a0b 	ldmdale	r0!, {r0, r1, r3, r9, fp, lr}
     be0:	304ea0a0 	subcc	sl, lr, r0, lsr #1
     be4:	00676783 	rsbeq	r6, r7, r3, lsl #15
     be8:	06010402 	streq	r0, [r1], -r2, lsl #8
     bec:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     bf0:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
     bf4:	08060304 	stmdaeq	r6, {r2, r8, r9}
     bf8:	7503d840 	strvc	sp, [r3, #-2112]	; 0xfffff7c0
     bfc:	9e12034a 	cdpls	3, 1, cr0, cr2, cr10, {2}
     c00:	d32f30a0 	teqle	pc, #160	; 0xa0
     c04:	4f9e0b03 	svcmi	0x009e0b03
     c08:	01040200 	mrseq	r0, R12_usr
     c0c:	a0066606 	andge	r6, r6, r6, lsl #12
     c10:	3033834b 	eorscc	r8, r3, fp, asr #6
     c14:	660e03d7 			; <UNDEFINED> instruction: 0x660e03d7
     c18:	84302408 	ldrthi	r2, [r0], #-1032	; 0xfffffbf8
     c1c:	086ad730 	stmdaeq	sl!, {r4, r5, r8, r9, sl, ip, lr, pc}^
     c20:	d7854b24 	strle	r4, [r5, r4, lsr #22]
     c24:	2108f56a 	tstcs	r8, sl, ror #10
     c28:	4a01ae03 	bmi	6c43c <mailbuffer+0x3134c>
     c2c:	d7a02608 	strle	r2, [r0, r8, lsl #12]!
     c30:	839e0903 	orrshi	r0, lr, #49152	; 0xc000
     c34:	c1d883bb 	ldrhgt	r8, [r8, #59]	; 0x3b
     c38:	00a3bba6 	adceq	fp, r3, r6, lsr #23
     c3c:	060c0402 	streq	r0, [ip], -r2, lsl #8
     c40:	040200f2 	streq	r0, [r2], #-242	; 0xffffff0e
     c44:	0200ba02 	andeq	fp, r0, #8192	; 0x2000
     c48:	009e0304 	addseq	r0, lr, r4, lsl #6
     c4c:	08040402 	stmdaeq	r4, {r1, sl}
     c50:	040200c8 	streq	r0, [r2], #-200	; 0xffffff38
     c54:	02009e05 	andeq	r9, r0, #5, 28	; 0x50
     c58:	00f20604 	rscseq	r0, r2, r4, lsl #12
     c5c:	82080402 	andhi	r0, r8, #33554432	; 0x2000000
     c60:	09040200 	stmdbeq	r4, {r9}
     c64:	040200d6 	streq	r0, [r2], #-214	; 0xffffff2a
     c68:	08069e0b 	stmdaeq	r6, {r0, r1, r3, r9, sl, fp, ip, pc}
     c6c:	040200b0 	streq	r0, [r2], #-176	; 0xffffff50
     c70:	08170301 	ldmdaeq	r7, {r0, r8, r9}
     c74:	5c085074 	stcpl	0, cr5, [r8], {116}	; 0x74
     c78:	2f4fa268 	svccs	0x004fa268
     c7c:	0852bb67 	ldmdaeq	r2, {r0, r1, r2, r5, r6, r8, r9, fp, ip, sp, pc}^
     c80:	4fa26841 	svcmi	0x00a26841
     c84:	d730672f 	ldrle	r6, [r0, -pc, lsr #14]!
     c88:	685d086e 	ldmdavs	sp, {r1, r2, r3, r5, r6, fp}^
     c8c:	be844da2 	cdplt	13, 8, cr4, cr4, cr2, {5}
     c90:	086cd74d 	stmdaeq	ip!, {r0, r2, r3, r6, r8, r9, sl, ip, lr, pc}^
     c94:	1e03a221 	cdpne	2, 0, cr10, cr3, cr1, {1}
     c98:	03d3319e 	bicseq	r3, r3, #-2147483609	; 0x80000027
     c9c:	0058080d 	subseq	r0, r8, sp, lsl #16
     ca0:	06010402 	streq	r0, [r1], -r2, lsl #8
     ca4:	00122802 	andseq	r2, r2, r2, lsl #16
     ca8:	9e030402 	cdpls	4, 0, cr0, cr3, cr2, {0}
     cac:	4e600806 	cdpmi	8, 6, cr0, cr0, cr6, {0}
     cb0:	58080b03 	stmdapl	r8, {r0, r1, r8, r9, fp}
     cb4:	086bbfdb 	stmdaeq	fp!, {r0, r1, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, pc}^
     cb8:	0b03bb26 	bleq	ef958 <mailbuffer+0xb4868>
     cbc:	4a2603d6 	bmi	981c1c <mailbuffer+0x946b2c>
     cc0:	3c081103 	stfccs	f1, [r8], {3}
     cc4:	83a08484 	movhi	r8, #132, 8	; 0x84000000
     cc8:	01040200 	mrseq	r0, R12_usr
     ccc:	0200d606 	andeq	sp, r0, #6291456	; 0x600000
     cd0:	069e0304 	ldreq	r0, [lr], r4, lsl #6
     cd4:	f8bd9608 			; <UNDEFINED> instruction: 0xf8bd9608
     cd8:	6ad74d6a 	bvs	ff5d4288 <_estack+0xf75c4288>
     cdc:	089f3e08 	ldmeq	pc, {r3, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
     ce0:	5e084e3d 	mcrpl	14, 0, r4, cr8, cr13, {1}
     ce4:	006b8434 	rsbeq	r8, fp, r4, lsr r4
     ce8:	06010402 	streq	r0, [r1], -r2, lsl #8
     cec:	68dc06d6 	ldmvs	ip, {r1, r2, r4, r6, r7, r9, sl}^
     cf0:	59083f08 	stmdbpl	r8, {r3, r8, r9, sl, fp, ip, sp}
     cf4:	304d6a4b 	subcc	r6, sp, fp, asr #20
     cf8:	08f36ad7 	ldmeq	r3!, {r0, r1, r2, r4, r6, r7, r9, fp, sp, lr}^
     cfc:	2e320321 	cdpcs	3, 3, cr0, cr2, cr1, {1}
     d00:	17032708 	strne	r2, [r3, -r8, lsl #14]
     d04:	1103a02e 	tstne	r3, lr, lsr #32
     d08:	2e10032e 	cdpcs	3, 1, cr0, cr0, cr14, {1}
     d0c:	6abd9508 	bvs	fef66134 <_estack+0xf6f56134>
     d10:	836d4d68 	cmnhi	sp, #104, 26	; 0x1a00
     d14:	03836986 	orreq	r6, r3, #2195456	; 0x218000
     d18:	1403660a 	strne	r6, [r3], #-1546	; 0xfffff9f6
     d1c:	4a1703f2 	bmi	5c1cec <mailbuffer+0x586bfc>
     d20:	02002308 	andeq	r2, r0, #8, 6	; 0x20000000
     d24:	00680304 	rsbeq	r0, r8, r4, lsl #6
     d28:	f0030402 			; <UNDEFINED> instruction: 0xf0030402
     d2c:	01040200 	mrseq	r0, R12_usr
     d30:	6b066606 	blvs	19a550 <mailbuffer+0x15f460>
     d34:	6c6a6767 	stclvs	7, cr6, [sl], #-412	; 0xfffffe64
     d38:	3d089f6c 	stccc	15, cr9, [r8, #-432]	; 0xfffffe50
     d3c:	a027084e 	eorge	r0, r7, lr, asr #16
     d40:	6a30f32f 	bvs	c3da04 <mailbuffer+0xc02914>
     d44:	d7839f30 			; <UNDEFINED> instruction: 0xd7839f30
     d48:	4edb30d8 	mrcmi	0, 6, r3, cr11, cr8, {6}
     d4c:	bda03e08 	stclt	14, cr3, [r0, #32]!
     d50:	41085d08 	tstmi	r8, r8, lsl #26
     d54:	4e2308bc 	mcrmi	8, 1, r0, cr3, cr12, {5}
     d58:	6b687908 	blvs	1a1f180 <mailbuffer+0x19e4090>
     d5c:	01040200 	mrseq	r0, R12_usr
     d60:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     d64:	00ba0204 	adcseq	r0, sl, r4, lsl #4
     d68:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     d6c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     d70:	4b854c06 	blmi	fe153d90 <_estack+0xf6143d90>
     d74:	f20a036b 	vcgt.s8	q0, q5, <illegal reg q13.5>
     d78:	019d03d7 			; <UNDEFINED> instruction: 0x019d03d7
     d7c:	83440866 	movthi	r0, #18534	; 0x4866
     d80:	000402d7 	ldrdeq	r0, [r4], -r7
     d84:	01210101 	teqeq	r1, r1, lsl #2
     d88:	00020000 	andeq	r0, r2, r0
     d8c:	00000078 	andeq	r0, r0, r8, ror r0
     d90:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d94:	0101000d 	tsteq	r1, sp
     d98:	00000101 	andeq	r0, r0, r1, lsl #2
     d9c:	00000100 	andeq	r0, r0, r0, lsl #2
     da0:	6f682f01 	svcvs	0x00682f01
     da4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; bf8 <_start-0x7408>
     da8:	61736f6a 	cmnvs	r3, sl, ror #30
     dac:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
     db0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     db4:	706f746b 	rsbvc	r7, pc, fp, ror #8
     db8:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     dbc:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     dc0:	72656270 	rsbvc	r6, r5, #112, 4
     dc4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     dc8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     dcc:	4f545265 	svcmi	0x00545265
     dd0:	616d2d53 	cmnvs	sp, r3, asr sp
     dd4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     dd8:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
     ddc:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
     de0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     de4:	69000073 	stmdbvs	r0, {r0, r1, r4, r5, r6}
     de8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     dec:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     df0:	00632e73 	rsbeq	r2, r3, r3, ror lr
     df4:	69000001 	stmdbvs	r0, {r0}
     df8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     dfc:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     e00:	00682e73 	rsbeq	r2, r8, r3, ror lr
     e04:	00000001 	andeq	r0, r0, r1
     e08:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
     e0c:	03000141 	movweq	r0, #321	; 0x141
     e10:	bbf3011d 	bllt	ffcc128c <_estack+0xf7cb128c>
     e14:	03bbf330 			; <UNDEFINED> instruction: 0x03bbf330
     e18:	24082e0c 	strcs	r2, [r8], #-3596	; 0xfffff1f4
     e1c:	674e6769 	strbvs	r6, [lr, -r9, ror #14]
     e20:	67674e67 	strbvs	r4, [r7, -r7, ror #28]!
     e24:	bc4c326b 	sfmlt	f3, 2, [ip], {107}	; 0x6b
     e28:	4d132602 	ldcmi	6, cr2, [r3, #-8]
     e2c:	084cea08 	stmdaeq	ip, {r3, r9, fp, sp, lr, pc}^
     e30:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
     e34:	02006703 	andeq	r6, r0, #786432	; 0xc0000
     e38:	00bb0304 	adcseq	r0, fp, r4, lsl #6
     e3c:	d4030402 	strle	r0, [r3], #-1026	; 0xfffffbfe
     e40:	01040200 	mrseq	r0, R12_usr
     e44:	6a066606 	bvs	19a664 <mailbuffer+0x15f574>
     e48:	75086ad7 	strvc	r6, [r8, #-2775]	; 0xfffff529
     e4c:	01040200 	mrseq	r0, R12_usr
     e50:	67066606 	strvs	r6, [r6, -r6, lsl #12]
     e54:	d89f304c 	ldmle	pc, {r2, r3, r6, ip, sp}	; <UNPREDICTABLE>
     e58:	0868d72f 	stmdaeq	r8!, {r0, r1, r2, r3, r5, r8, r9, sl, ip, lr, pc}^
     e5c:	003e083e 	eorseq	r0, lr, lr, lsr r8
     e60:	06010402 	streq	r0, [r1], -r2, lsl #8
     e64:	a0670666 	rsbge	r0, r7, r6, ror #12
     e68:	01040200 	mrseq	r0, R12_usr
     e6c:	67066606 	strvs	r6, [r6, -r6, lsl #12]
     e70:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     e74:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     e78:	d74ca067 	strble	sl, [ip, -r7, rrx]
     e7c:	083e0868 	ldmdaeq	lr!, {r3, r5, r6, fp}
     e80:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     e84:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     e88:	0200a067 	andeq	sl, r0, #103	; 0x67
     e8c:	66060104 	strvs	r0, [r6], -r4, lsl #2
     e90:	00a06706 	adceq	r6, r0, r6, lsl #14
     e94:	06010402 	streq	r0, [r1], -r2, lsl #8
     e98:	a0670666 	rsbge	r0, r7, r6, ror #12
     e9c:	f368d74c 	vabd.u32	<illegal reg q14.5>, q4, q6
     ea0:	f34cd72f 	vabd.u8	d29, d12, d31
     ea4:	0402d72f 	streq	sp, [r2], #-1839	; 0xfffff8d1
     ea8:	e5010100 	str	r0, [r1, #-256]	; 0xffffff00
     eac:	02000000 	andeq	r0, r0, #0
     eb0:	00006c00 	andeq	r6, r0, r0, lsl #24
     eb4:	fb010200 	blx	416be <mailbuffer+0x65ce>
     eb8:	01000d0e 	tsteq	r0, lr, lsl #26
     ebc:	00010101 	andeq	r0, r1, r1, lsl #2
     ec0:	00010000 	andeq	r0, r1, r0
     ec4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     ec8:	2f656d6f 	svccs	0x00656d6f
     ecc:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
     ed0:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
     ed4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     ed8:	6f746b73 	svcvs	0x00746b73
     edc:	70722f70 	rsbsvc	r2, r2, r0, ror pc
     ee0:	61522f69 	cmpvs	r2, r9, ror #30
     ee4:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     ee8:	50797272 	rsbspl	r7, r9, r2, ror r2
     eec:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     ef0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     ef4:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
     ef8:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
     efc:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     f00:	442f6f6d 	strtmi	r6, [pc], #-3949	; f08 <_start-0x70f8>
     f04:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     f08:	00007372 	andeq	r7, r0, r2, ror r3
     f0c:	6f697067 	svcvs	0x00697067
     f10:	0100632e 	tsteq	r0, lr, lsr #6
     f14:	70670000 	rsbvc	r0, r7, r0
     f18:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     f1c:	00000100 	andeq	r0, r0, r0, lsl #2
     f20:	02050000 	andeq	r0, r5, #0
     f24:	00014720 	andeq	r4, r1, r0, lsr #14
     f28:	08012603 	stmdaeq	r1, {r0, r1, r9, sl, sp}
     f2c:	08a0bc5a 	stmiaeq	r0!, {r1, r3, r4, r6, sl, fp, ip, sp, pc}
     f30:	083d0821 	ldmdaeq	sp!, {r0, r5, fp}
     f34:	4c3d0821 	ldcmi	8, cr0, [sp], #-132	; 0xffffff7c
     f38:	21087508 	tstcs	r8, r8, lsl #10
     f3c:	6759084c 	ldrbvs	r0, [r9, -ip, asr #16]
     f40:	220267a0 	andcs	r6, r2, #160, 14	; 0x2800000
     f44:	14220214 	strtne	r0, [r2], #-532	; 0xfffffdec
     f48:	023d084c 	eorseq	r0, sp, #76, 16	; 0x4c0000
     f4c:	08691324 	stmdaeq	r9!, {r2, r5, r8, r9, ip}^
     f50:	08688375 	stmdaeq	r8!, {r0, r2, r4, r5, r6, r8, r9, pc}^
     f54:	30e5085a 	rsccc	r0, r5, sl, asr r8
     f58:	08307508 	ldmdaeq	r0!, {r3, r8, sl, ip, sp, lr}
     f5c:	750830e5 	strvc	r3, [r8, #-229]	; 0xffffff1b
     f60:	30e50830 	rsccc	r0, r5, r0, lsr r8
     f64:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
     f68:	4dbe0104 	ldfmis	f0, [lr, #16]!
     f6c:	68bb7508 	ldmvs	fp!, {r3, r8, sl, ip, sp, lr}
     f70:	e5085a08 	str	r5, [r8, #-2568]	; 0xfffff5f8
     f74:	30750830 	rsbscc	r0, r5, r0, lsr r8
     f78:	0830e508 	ldmdaeq	r0!, {r3, r8, sl, sp, lr, pc}
     f7c:	e5083075 	str	r3, [r8, #-117]	; 0xffffff8b
     f80:	00750830 	rsbseq	r0, r5, r0, lsr r8
     f84:	be010402 	cdplt	4, 0, cr0, cr1, cr2, {0}
     f88:	9f3d084d 	svcls	0x003d084d
     f8c:	02590868 	subseq	r0, r9, #104, 16	; 0x680000
     f90:	01010004 	tsteq	r1, r4
     f94:	00000133 	andeq	r0, r0, r3, lsr r1
     f98:	00ae0002 	adceq	r0, lr, r2
     f9c:	01020000 	mrseq	r0, (UNDEF: 2)
     fa0:	000d0efb 	strdeq	r0, [sp], -fp
     fa4:	01010101 	tsteq	r1, r1, lsl #2
     fa8:	01000000 	mrseq	r0, (UNDEF: 0)
     fac:	2f010000 	svccs	0x00010000
     fb0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     fb4:	6f6a6c2f 	svcvs	0x006a6c2f
     fb8:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
     fbc:	442f7275 	strtmi	r7, [pc], #-629	; fc4 <_start-0x703c>
     fc0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     fc4:	722f706f 	eorvc	r7, pc, #111	; 0x6f
     fc8:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
     fcc:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     fd0:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     fd4:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     fd8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     fdc:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     fe0:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
     fe4:	2f2f7265 	svccs	0x002f7265
     fe8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     fec:	534f5452 	movtpl	r5, #62546	; 0xf452
     ff0:	756f532f 	strbvc	r5, [pc, #-815]!	; cc9 <_start-0x7337>
     ff4:	2f656372 	svccs	0x00656372
     ff8:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     ffc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1000:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	; 0xffffff44
    1004:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
    1008:	73752f00 	cmnvc	r5, #0, 30
    100c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1010:	63672f62 	cmnvs	r7, #392	; 0x188
    1014:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    1018:	6f6e2d6d 	svcvs	0x006e2d6d
    101c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1020:	2f696261 	svccs	0x00696261
    1024:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    1028:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    102c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1030:	68000065 	stmdavs	r0, {r0, r2, r5, r6}
    1034:	5f706165 	svcpl	0x00706165
    1038:	00632e34 	rsbeq	r2, r3, r4, lsr lr
    103c:	73000001 	movwvc	r0, #1
    1040:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    1044:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1048:	00000002 	andeq	r0, r0, r2
    104c:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    1050:	0300014e 	movweq	r0, #334	; 0x14e
    1054:	08010192 	stmdaeq	r1, {r1, r4, r7, r8}
    1058:	a0324c3e 	eorsge	r4, r2, lr, lsr ip
    105c:	85a26833 	strhi	r6, [r2, #2099]!	; 0x833
    1060:	04020086 	streq	r0, [r2], #-134	; 0xffffff7a
    1064:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1068:	30836786 	addcc	r6, r3, r6, lsl #15
    106c:	0200634b 	andeq	r6, r0, #738197505	; 0x2c000001
    1070:	9e060104 	adflss	f0, f6, f4
    1074:	a2be8a06 	adcsge	r8, lr, #24576	; 0x6000
    1078:	bb86f785 	bllt	fe1bee94 <_estack+0xf61aee94>
    107c:	24084d69 	strcs	r4, [r8], #-3433	; 0xfffff297
    1080:	f42e0c03 			; <UNDEFINED> instruction: 0xf42e0c03
    1084:	3d086ad7 	vstrcc	s12, [r8, #-860]	; 0xfffffca4
    1088:	4ca16a4d 	vstmiami	r1!, {s12-s88}
    108c:	4c210831 	stcmi	8, cr0, [r1], #-196	; 0xffffff3c
    1090:	08f34ebc 	ldmeq	r3!, {r2, r3, r4, r5, r7, r9, sl, fp, lr}^
    1094:	92084e21 	andls	r4, r8, #528	; 0x210
    1098:	08090332 	stmdaeq	r9, {r1, r4, r5, r8, r9}
    109c:	9f869f20 	svcls	0x00869f20
    10a0:	a29f849f 	addsge	r8, pc, #-1627389952	; 0x9f000000
    10a4:	08a19f67 	stmiaeq	r1!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, pc}
    10a8:	42084e91 	andmi	r4, r8, #2320	; 0x910
    10ac:	03040200 	movweq	r0, #16896	; 0x4200
    10b0:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
    10b4:	06660104 	strbteq	r0, [r6], -r4, lsl #2
    10b8:	d7d84ba5 	ldrble	r4, [r8, r5, lsr #23]
    10bc:	d9f44b4f 	ldmible	r4!, {r0, r1, r2, r3, r6, r8, r9, fp, lr}^
    10c0:	89bfbef3 	ldmibhi	pc!, {r0, r1, r4, r5, r6, r7, r9, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    10c4:	0402f484 	streq	pc, [r2], #-1156	; 0xfffffb7c
    10c8:	02010100 	andeq	r0, r1, #0, 2
    10cc:	02000001 	andeq	r0, r0, #1
    10d0:	0000aa00 	andeq	sl, r0, r0, lsl #20
    10d4:	fb010200 	blx	418de <mailbuffer+0x67ee>
    10d8:	01000d0e 	tsteq	r0, lr, lsl #26
    10dc:	00010101 	andeq	r0, r1, r1, lsl #2
    10e0:	00010000 	andeq	r0, r1, r0
    10e4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    10e8:	2f656d6f 	svccs	0x00656d6f
    10ec:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    10f0:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    10f4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    10f8:	6f746b73 	svcvs	0x00746b73
    10fc:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    1100:	61522f69 	cmpvs	r2, r9, ror #30
    1104:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1108:	50797272 	rsbspl	r7, r9, r2, ror r2
    110c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1110:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1114:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    1118:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    111c:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    1120:	2f006f6d 	svccs	0x00006f6d
    1124:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1128:	6f6a6c2f 	svcvs	0x006a6c2f
    112c:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    1130:	442f7275 	strtmi	r7, [pc], #-629	; 1138 <_start-0x6ec8>
    1134:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1138:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    113c:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    1140:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1144:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1148:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    114c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1150:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1154:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    1158:	442f7265 	strtmi	r7, [pc], #-613	; 1160 <_start-0x6ea0>
    115c:	2f6f6d65 	svccs	0x006f6d65
    1160:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1164:	00737265 	rsbseq	r7, r3, r5, ror #4
    1168:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    116c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    1170:	76000001 	strvc	r0, [r0], -r1
    1174:	6f656469 	svcvs	0x00656469
    1178:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    117c:	00000000 	andeq	r0, r0, r0
    1180:	54440205 	strbpl	r0, [r4], #-517	; 0xfffffdfb
    1184:	f31a0001 	vhadd.u16	d0, d10, d1
    1188:	01040200 	mrseq	r0, R12_usr
    118c:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    1190:	02006701 	andeq	r6, r0, #262144	; 0x40000
    1194:	00670104 	rsbeq	r0, r7, r4, lsl #2
    1198:	4b010402 	blmi	421a8 <mailbuffer+0x70b8>
    119c:	0200f331 	andeq	pc, r0, #-1006632960	; 0xc4000000
    11a0:	004c0104 	subeq	r0, ip, r4, lsl #2
    11a4:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    11a8:	01040200 	mrseq	r0, R12_usr
    11ac:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    11b0:	02006701 	andeq	r6, r0, #262144	; 0x40000
    11b4:	034b0104 	movteq	r0, #45316	; 0xb104
    11b8:	68f32e09 	ldmvs	r3!, {r0, r3, r9, sl, fp, sp}^
    11bc:	832f832f 	teqhi	pc, #-1140850688	; 0xbc000000
    11c0:	08302f69 	ldmdaeq	r0!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}
    11c4:	00cb08c9 	sbceq	r0, fp, r9, asr #17
    11c8:	36010402 	strcc	r0, [r1], -r2, lsl #8
    11cc:	01000202 	tsteq	r0, r2, lsl #4
    11d0:	00008d01 	andeq	r8, r0, r1, lsl #26
    11d4:	65000200 	strvs	r0, [r0, #-512]	; 0xfffffe00
    11d8:	02000000 	andeq	r0, r0, #0
    11dc:	0d0efb01 	vstreq	d15, [lr, #-4]
    11e0:	01010100 	mrseq	r0, (UNDEF: 17)
    11e4:	00000001 	andeq	r0, r0, r1
    11e8:	01000001 	tsteq	r0, r1
    11ec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1138 <_start-0x6ec8>
    11f0:	6a6c2f65 	bvs	1b0cf8c <mailbuffer+0x1ad1e9c>
    11f4:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    11f8:	2f727566 	svccs	0x00727566
    11fc:	6b736544 	blvs	1cda714 <mailbuffer+0x1c9f624>
    1200:	2f706f74 	svccs	0x00706f74
    1204:	2f697072 	svccs	0x00697072
    1208:	70736152 	rsbsvc	r6, r3, r2, asr r1
    120c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1210:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    1214:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1218:	534f5452 	movtpl	r5, #62546	; 0xf452
    121c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    1220:	2f726574 	svccs	0x00726574
    1224:	6f6d6544 	svcvs	0x006d6544
    1228:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    122c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1230:	616d0000 	cmnvs	sp, r0
    1234:	6f626c69 	svcvs	0x00626c69
    1238:	00632e78 	rsbeq	r2, r3, r8, ror lr
    123c:	00000001 	andeq	r0, r0, r1
    1240:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    1244:	03000155 	movweq	r0, #341	; 0x155
    1248:	5908010a 	stmdbpl	r8, {r1, r3, r8}
    124c:	f32ff368 	vcgt.u32	<illegal reg q7.5>, <illegal reg q7.5>, q12
    1250:	3e084cbb 	mcrcc	12, 0, r4, cr8, cr11, {5}
    1254:	67a09f69 	strvs	r9, [r0, r9, ror #30]!
    1258:	2f2f30b8 	svccs	0x002f30b8
    125c:	000602d7 	ldrdeq	r0, [r6], -r7
    1260:	00f70101 	rscseq	r0, r7, r1, lsl #2
    1264:	00020000 	andeq	r0, r2, r0
    1268:	000000ab 	andeq	r0, r0, fp, lsr #1
    126c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1270:	0101000d 	tsteq	r1, sp
    1274:	00000101 	andeq	r0, r0, r1, lsl #2
    1278:	00000100 	andeq	r0, r0, r0, lsl #2
    127c:	6f682f01 	svcvs	0x00682f01
    1280:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 10d4 <_start-0x6f2c>
    1284:	61736f6a 	cmnvs	r3, sl, ror #30
    1288:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    128c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1290:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1294:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    1298:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    129c:	72656270 	rsbvc	r6, r5, #112, 4
    12a0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    12a4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    12a8:	4f545265 	svcmi	0x00545265
    12ac:	616d2d53 	cmnvs	sp, r3, asr sp
    12b0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    12b4:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    12b8:	682f006f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r6}	; <UNPREDICTABLE>
    12bc:	2f656d6f 	svccs	0x00656d6f
    12c0:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    12c4:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    12c8:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    12cc:	6f746b73 	svcvs	0x00746b73
    12d0:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    12d4:	61522f69 	cmpvs	r2, r9, ror #30
    12d8:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    12dc:	50797272 	rsbspl	r7, r9, r2, ror r2
    12e0:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    12e4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    12e8:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    12ec:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    12f0:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    12f4:	442f6f6d 	strtmi	r6, [pc], #-3949	; 12fc <_start-0x6d04>
    12f8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    12fc:	00007372 	andeq	r7, r0, r2, ror r3
    1300:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
    1304:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1308:	76000001 	strvc	r0, [r0], -r1
    130c:	6f656469 	svcvs	0x00656469
    1310:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1314:	00000000 	andeq	r0, r0, r0
    1318:	571c0205 	ldrpl	r0, [ip, -r5, lsl #4]
    131c:	0d030001 	stceq	0, cr0, [r3, #-4]
    1320:	d7f39f01 	ldrble	r9, [r3, r1, lsl #30]!
    1324:	00133402 	andseq	r3, r3, r2, lsl #8
    1328:	67030402 	strvs	r0, [r3, -r2, lsl #8]
    132c:	03040200 	movweq	r0, #16896	; 0x4200
    1330:	0402009d 	streq	r0, [r2], #-157	; 0xffffff63
    1334:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1338:	f467bbbd 			; <UNDEFINED> instruction: 0xf467bbbd
    133c:	02f39f4d 	rscseq	r9, r3, #308	; 0x134
    1340:	02001334 	andeq	r1, r0, #52, 6	; 0xd0000000
    1344:	00670304 	rsbeq	r0, r7, r4, lsl #6
    1348:	9d030402 	cfstrsls	mvf0, [r3, #-8]
    134c:	01040200 	mrseq	r0, R12_usr
    1350:	bd066606 	stclt	6, cr6, [r6, #-24]	; 0xffffffe8
    1354:	f4d767bb 			; <UNDEFINED> instruction: 0xf4d767bb
    1358:	01000402 	tsteq	r0, r2, lsl #8
    135c:	00015901 	andeq	r5, r1, r1, lsl #18
    1360:	71000200 	mrsvc	r0, R8_usr
    1364:	02000000 	andeq	r0, r0, #0
    1368:	0d0efb01 	vstreq	d15, [lr, #-4]
    136c:	01010100 	mrseq	r0, (UNDEF: 17)
    1370:	00000001 	andeq	r0, r0, r1
    1374:	01000001 	tsteq	r0, r1
    1378:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 12c4 <_start-0x6d3c>
    137c:	6a6c2f65 	bvs	1b0d118 <mailbuffer+0x1ad2028>
    1380:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    1384:	2f727566 	svccs	0x00727566
    1388:	6b736544 	blvs	1cda8a0 <mailbuffer+0x1c9f7b0>
    138c:	2f706f74 	svccs	0x00706f74
    1390:	2f697072 	svccs	0x00697072
    1394:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1398:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    139c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    13a0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    13a4:	534f5452 	movtpl	r5, #62546	; 0xf452
    13a8:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    13ac:	2f726574 	svccs	0x00726574
    13b0:	6f6d6544 	svcvs	0x006d6544
    13b4:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    13b8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    13bc:	69760000 	ldmdbvs	r6!, {}^	; <UNPREDICTABLE>
    13c0:	2e6f6564 	cdpcs	5, 6, cr6, cr15, cr4, {3}
    13c4:	00010063 	andeq	r0, r1, r3, rrx
    13c8:	35783500 	ldrbcc	r3, [r8, #-1280]!	; 0xfffffb00
    13cc:	6e6f665f 	mcrvs	6, 3, r6, cr15, cr15, {2}
    13d0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    13d4:	00000001 	andeq	r0, r0, r1
    13d8:	b0020500 	andlt	r0, r2, r0, lsl #10
    13dc:	03000159 	movweq	r0, #345	; 0x159
    13e0:	1c03010d 	stfnes	f0, [r3], {13}
    13e4:	838483f2 	orrhi	r8, r4, #-939524093	; 0xc8000003
    13e8:	83839f84 	orrhi	r9, r3, #132, 30	; 0x210
    13ec:	839fd8d7 	orrshi	sp, pc, #14090240	; 0xd70000
    13f0:	9fd8d783 	svcls	0x00d8d783
    13f4:	9f858383 	svcls	0x00858383
    13f8:	84838383 	strhi	r8, [r3], #899	; 0x383
    13fc:	489f2f85 	ldmmi	pc, {r0, r2, r7, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
    1400:	319108a5 	orrscc	r0, r1, r5, lsr #17
    1404:	69c908bb 	stmibvs	r9, {r0, r1, r3, r4, r5, r7, fp}^
    1408:	00674bd7 	ldrdeq	r4, [r7], #-183	; 0xffffff49	; <UNPREDICTABLE>
    140c:	67030402 	strvs	r0, [r3, -r2, lsl #8]
    1410:	03040200 	movweq	r0, #16896	; 0x4200
    1414:	04020081 	streq	r0, [r2], #-129	; 0xffffff7f
    1418:	00660601 	rsbeq	r0, r6, r1, lsl #12
    141c:	06020402 	streq	r0, [r2], -r2, lsl #8
    1420:	04020081 	streq	r0, [r2], #-129	; 0xffffff7f
    1424:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1428:	4a0e0387 	bmi	38224c <mailbuffer+0x34715c>
    142c:	686767f6 	stmdavs	r7!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, sp, lr}^
    1430:	0868676a 	stmdaeq	r8!, {r1, r3, r5, r6, r8, r9, sl, sp, lr}^
    1434:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
    1438:	0f240202 	svceq	0x00240202
    143c:	01040200 	mrseq	r0, R12_usr
    1440:	02006606 	andeq	r6, r0, #6291456	; 0x600000
    1444:	65060204 	strvs	r0, [r6, #-516]	; 0xfffffdfc
    1448:	01040200 	mrseq	r0, R12_usr
    144c:	6e066606 	cfmadd32vs	mvax0, mvfx6, mvfx6, mvfx6
    1450:	082fd769 	stmdaeq	pc!, {r0, r3, r5, r6, r8, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
    1454:	4f86643d 	svcmi	0x0086643d
    1458:	d75908a1 	ldrble	r0, [r9, -r1, lsr #17]
    145c:	03d883f3 	bicseq	r8, r8, #-872415229	; 0xcc000003
    1460:	bc4a00cd 	mcrrlt	0, 12, r0, sl, cr13
    1464:	21082f4b 	tstcs	r8, fp, asr #30
    1468:	59088764 	stmdbpl	r8, {r2, r5, r6, r8, r9, sl, pc}
    146c:	75087508 	strvc	r7, [r8, #-1288]	; 0xfffffaf8
    1470:	75087508 	strvc	r7, [r8, #-1288]	; 0xfffffaf8
    1474:	75087508 	strvc	r7, [r8, #-1288]	; 0xfffffaf8
    1478:	83bb5908 			; <UNDEFINED> instruction: 0x83bb5908
    147c:	0024084c 	eoreq	r0, r4, ip, asr #16
    1480:	67030402 	strvs	r0, [r3, -r2, lsl #8]
    1484:	03040200 	movweq	r0, #16896	; 0x4200
    1488:	02001f08 	andeq	r1, r0, #8, 30
    148c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1490:	00400806 	subeq	r0, r0, r6, lsl #16
    1494:	06030402 	streq	r0, [r3], -r2, lsl #8
    1498:	00124e02 	andseq	r4, r2, r2, lsl #28
    149c:	02010402 	andeq	r0, r1, #33554432	; 0x2000000
    14a0:	001202b6 			; <UNDEFINED> instruction: 0x001202b6
    14a4:	9e040402 	cdpls	4, 0, cr0, cr4, cr2, {0}
    14a8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    14ac:	02008506 	andeq	r8, r0, #25165824	; 0x1800000
    14b0:	3c020404 	cfstrscc	mvf0, [r2], {4}
    14b4:	000c0213 	andeq	r0, ip, r3, lsl r2
    14b8:	01e50101 	mvneq	r0, r1, lsl #2
    14bc:	00020000 	andeq	r0, r2, r0
    14c0:	00000154 	andeq	r0, r0, r4, asr r1
    14c4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    14c8:	0101000d 	tsteq	r1, sp
    14cc:	00000101 	andeq	r0, r0, r1, lsl #2
    14d0:	00000100 	andeq	r0, r0, r0, lsl #2
    14d4:	6f682f01 	svcvs	0x00682f01
    14d8:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 132c <_start-0x6cd4>
    14dc:	61736f6a 	cmnvs	r3, sl, ror #30
    14e0:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    14e4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    14e8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    14ec:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    14f0:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    14f4:	72656270 	rsbvc	r6, r5, #112, 4
    14f8:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    14fc:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    1500:	4f545265 	svcmi	0x00545265
    1504:	616d2d53 	cmnvs	sp, r3, asr sp
    1508:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    150c:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1510:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    1514:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1518:	616c2f73 	smcvs	49907	; 0xc2f3
    151c:	3135396e 	teqcc	r5, lr, ror #18
    1520:	682f0034 	stmdavs	pc!, {r2, r4, r5}	; <UNPREDICTABLE>
    1524:	2f656d6f 	svccs	0x00656d6f
    1528:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    152c:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    1530:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    1534:	6f746b73 	svcvs	0x00746b73
    1538:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    153c:	61522f69 	cmpvs	r2, r9, ror #30
    1540:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1544:	50797272 	rsbspl	r7, r9, r2, ror r2
    1548:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    154c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1550:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    1554:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    1558:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    155c:	442f6f6d 	strtmi	r6, [pc], #-3949	; 1564 <_start-0x6a9c>
    1560:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1564:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 13a4 <_start-0x6c5c>
    1568:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    156c:	692f3431 	stmdbvs	pc!, {r0, r4, r5, sl, ip, sp}	; <UNPREDICTABLE>
    1570:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1574:	2f006564 	svccs	0x00006564
    1578:	2f727375 	svccs	0x00727375
    157c:	2f62696c 	svccs	0x0062696c
    1580:	2f636367 	svccs	0x00636367
    1584:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1588:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    158c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1590:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    1594:	2f332e39 	svccs	0x00332e39
    1598:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    159c:	00656475 	rsbeq	r6, r5, r5, ror r4
    15a0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14ec <_start-0x6b14>
    15a4:	6a6c2f65 	bvs	1b0d340 <mailbuffer+0x1ad2250>
    15a8:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    15ac:	2f727566 	svccs	0x00727566
    15b0:	6b736544 	blvs	1cdaac8 <mailbuffer+0x1c9f9d8>
    15b4:	2f706f74 	svccs	0x00706f74
    15b8:	2f697072 	svccs	0x00697072
    15bc:	70736152 	rsbsvc	r6, r3, r2, asr r1
    15c0:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    15c4:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    15c8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    15cc:	534f5452 	movtpl	r5, #62546	; 0xf452
    15d0:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    15d4:	2f726574 	svccs	0x00726574
    15d8:	6f6d6544 	svcvs	0x006d6544
    15dc:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    15e0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    15e4:	73750000 	cmnvc	r5, #0
    15e8:	69626970 	stmdbvs	r2!, {r4, r5, r6, r8, fp, sp, lr}^
    15ec:	632e646e 	teqvs	lr, #1845493760	; 0x6e000000
    15f0:	00000100 	andeq	r0, r0, r0, lsl #2
    15f4:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    15f8:	682e736f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
    15fc:	00000200 	andeq	r0, r0, r0, lsl #4
    1600:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    1604:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1608:	00000300 	andeq	r0, r0, r0, lsl #6
    160c:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    1610:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1614:	00000004 	andeq	r0, r0, r4
    1618:	80020500 	andhi	r0, r2, r0, lsl #10
    161c:	03000165 	movweq	r0, #357	; 0x165
    1620:	3d080122 	stfccs	f0, [r8, #-136]	; 0xffffff78
    1624:	084c2208 	stmdaeq	ip, {r3, r9, sp}^
    1628:	4c22083d 	stcmi	8, cr0, [r2], #-244	; 0xffffff0c
    162c:	d7839108 	strle	r9, [r3, r8, lsl #2]
    1630:	083d0868 	ldmdaeq	sp!, {r3, r5, r6, fp}
    1634:	76084c21 	strvc	r4, [r8], -r1, lsr #24
    1638:	084c3d08 	stmdaeq	ip, {r3, r8, sl, fp, ip, sp}^
    163c:	674b4bcc 	strbvs	r4, [fp, -ip, asr #23]
    1640:	4b4b4b4b 	blmi	12d4374 <mailbuffer+0x1299284>
    1644:	48832f4d 	stmmi	r3, {r0, r2, r3, r6, r8, r9, sl, fp, sp}
    1648:	0868d76b 	stmdaeq	r8!, {r0, r1, r3, r5, r6, r8, r9, sl, ip, lr, pc}^
    164c:	674b4bcc 	strbvs	r4, [fp, -ip, asr #23]
    1650:	4d4b4b4b 	vstrmi	d20, [fp, #-300]	; 0xfffffed4
    1654:	6b48832f 	blvs	1222318 <mailbuffer+0x11e7228>
    1658:	9f3d089f 	svcls	0x003d089f
    165c:	82100383 	andshi	r0, r0, #201326594	; 0xc000002
    1660:	7b0869d7 	blvc	21bdc4 <mailbuffer+0x1e0cd4>
    1664:	750887f3 	strvc	r8, [r8, #-2035]	; 0xfffff80d
    1668:	024d2208 	subeq	r2, sp, #8, 4	; 0x80000000
    166c:	084e1422 	stmdaeq	lr, {r1, r5, sl, ip}^
    1670:	6821083d 	stmdavs	r1!, {r0, r2, r3, r4, r5, fp}
    1674:	4cd73d08 	ldclmi	13, cr3, [r7], {8}
    1678:	2f4b7508 	svccs	0x004b7508
    167c:	68d7a0b9 	ldmvs	r7, {r0, r3, r4, r5, r7, sp, pc}^
    1680:	2f837508 	svccs	0x00837508
    1684:	a3b6d8bb 			; <UNDEFINED> instruction: 0xa3b6d8bb
    1688:	750868d7 	strvc	r6, [r8, #-2263]	; 0xfffff729
    168c:	f12f4b4b 			; <UNDEFINED> instruction: 0xf12f4b4b
    1690:	0868d7a0 	stmdaeq	r8!, {r5, r7, r8, r9, sl, ip, lr, pc}^
    1694:	4b9f4c75 	blmi	fe7d4870 <_estack+0xf67c4870>
    1698:	9d2f5908 	stcls	9, cr5, [pc, #-32]!	; 1680 <_start-0x6980>
    169c:	0602d7a0 	streq	sp, [r2], -r0, lsr #15
    16a0:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    16a4:	02000001 	andeq	r0, r0, #1
    16a8:	0000da00 	andeq	sp, r0, r0, lsl #20
    16ac:	fb010200 	blx	41eb6 <mailbuffer+0x6dc6>
    16b0:	01000d0e 	tsteq	r0, lr, lsl #26
    16b4:	00010101 	andeq	r0, r1, r1, lsl #2
    16b8:	00010000 	andeq	r0, r1, r0
    16bc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    16c0:	2f656d6f 	svccs	0x00656d6f
    16c4:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    16c8:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    16cc:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    16d0:	6f746b73 	svcvs	0x00746b73
    16d4:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    16d8:	61522f69 	cmpvs	r2, r9, ror #30
    16dc:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    16e0:	50797272 	rsbspl	r7, r9, r2, ror r2
    16e4:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    16e8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    16ec:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    16f0:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    16f4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    16f8:	442f6f6d 	strtmi	r6, [pc], #-3949	; 1700 <_start-0x6900>
    16fc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1700:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 1540 <_start-0x6ac0>
    1704:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    1708:	2f003431 	svccs	0x00003431
    170c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1710:	6f6a6c2f 	svcvs	0x006a6c2f
    1714:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    1718:	442f7275 	strtmi	r7, [pc], #-629	; 1720 <_start-0x68e0>
    171c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1720:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    1724:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    1728:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    172c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1730:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1734:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1738:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    173c:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    1740:	442f7265 	strtmi	r7, [pc], #-613	; 1748 <_start-0x68b8>
    1744:	2f6f6d65 	svccs	0x006f6d65
    1748:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    174c:	2f737265 	svccs	0x00737265
    1750:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    1754:	2f343135 	svccs	0x00343135
    1758:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    175c:	2f656475 	svccs	0x00656475
    1760:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    1764:	72610000 	rsbvc	r0, r1, #0
    1768:	00632e70 	rsbeq	r2, r3, r0, ror lr
    176c:	74000001 	strvc	r0, [r0], #-1
    1770:	73657079 	cmnvc	r5, #121	; 0x79
    1774:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1778:	656b0000 	strbvs	r0, [fp, #-0]!
    177c:	70616d79 	rsbvc	r6, r1, r9, ror sp
    1780:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1784:	00000000 	andeq	r0, r0, r0
    1788:	6dcc0205 	sfmvs	f0, 2, [ip, #20]
    178c:	37030001 	strcc	r0, [r3, -r1]
    1790:	84260801 	strthi	r0, [r6], #-2049	; 0xfffff7ff
    1794:	be844dbe 	mcrlt	13, 4, r4, cr4, cr14, {5}
    1798:	22086c4e 	andcs	r6, r8, #19968	; 0x4e00
    179c:	3168d831 	cmncc	r8, r1, lsr r8
    17a0:	9f9fbb67 	svcls	0x009fbb67
    17a4:	32a08383 	adccc	r8, r0, #201326594	; 0xc000002
    17a8:	31483049 	cmpcc	r8, r9, asr #32
    17ac:	08463247 	stmdaeq	r6, {r0, r1, r2, r6, r9, ip, sp}^
    17b0:	313e0842 	teqcc	lr, r2, asr #16
    17b4:	bcf3d7bd 	ldcllt	7, cr13, [r3], #756	; 0x2f4
    17b8:	bcf3f4f3 	cfldrdlt	mvd15, [r3], #972	; 0x3cc
    17bc:	ba0a03bc 	blt	2826b4 <mailbuffer+0x2475c4>
    17c0:	04020045 	streq	r0, [r2], #-69	; 0xffffffbb
    17c4:	02dbbb01 	sbcseq	fp, fp, #1024	; 0x400
    17c8:	01010006 	tsteq	r1, r6
    17cc:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    17d0:	028b0002 	addeq	r0, fp, #2
    17d4:	01020000 	mrseq	r0, (UNDEF: 2)
    17d8:	000d0efb 	strdeq	r0, [sp], -fp
    17dc:	01010101 	tsteq	r1, r1, lsl #2
    17e0:	01000000 	mrseq	r0, (UNDEF: 0)
    17e4:	2f010000 	svccs	0x00010000
    17e8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    17ec:	6f6a6c2f 	svcvs	0x006a6c2f
    17f0:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    17f4:	442f7275 	strtmi	r7, [pc], #-629	; 17fc <_start-0x6804>
    17f8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    17fc:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    1800:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    1804:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1808:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    180c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1810:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1814:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1818:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    181c:	442f7265 	strtmi	r7, [pc], #-613	; 1824 <_start-0x67dc>
    1820:	2f6f6d65 	svccs	0x006f6d65
    1824:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1828:	2f737265 	svccs	0x00737265
    182c:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    1830:	2f343135 	svccs	0x00343135
    1834:	0062696c 	rsbeq	r6, r2, ip, ror #18
    1838:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1784 <_start-0x687c>
    183c:	6a6c2f65 	bvs	1b0d5d8 <mailbuffer+0x1ad24e8>
    1840:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    1844:	2f727566 	svccs	0x00727566
    1848:	6b736544 	blvs	1cdad60 <mailbuffer+0x1c9fc70>
    184c:	2f706f74 	svccs	0x00706f74
    1850:	2f697072 	svccs	0x00697072
    1854:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1858:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    185c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    1860:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1864:	534f5452 	movtpl	r5, #62546	; 0xf452
    1868:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    186c:	2f726574 	svccs	0x00726574
    1870:	6f6d6544 	svcvs	0x006d6544
    1874:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1878:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    187c:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    1880:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    1884:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1888:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    188c:	7073752f 	rsbsvc	r7, r3, pc, lsr #10
    1890:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	; <UNPREDICTABLE>
    1894:	2f656d6f 	svccs	0x00656d6f
    1898:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    189c:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    18a0:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    18a4:	6f746b73 	svcvs	0x00746b73
    18a8:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    18ac:	61522f69 	cmpvs	r2, r9, ror #30
    18b0:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    18b4:	50797272 	rsbspl	r7, r9, r2, ror r2
    18b8:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    18bc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    18c0:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    18c4:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    18c8:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    18cc:	442f6f6d 	strtmi	r6, [pc], #-3949	; 18d4 <_start-0x672c>
    18d0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    18d4:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 1714 <_start-0x68ec>
    18d8:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    18dc:	692f3431 	stmdbvs	pc!, {r0, r4, r5, sl, ip, sp}	; <UNPREDICTABLE>
    18e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    18e4:	00006564 	andeq	r6, r0, r4, ror #10
    18e8:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    18ec:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
    18f0:	2e797261 	cdpcs	2, 7, cr7, cr9, cr1, {3}
    18f4:	00010063 	andeq	r0, r1, r3, rrx
    18f8:	70797400 	rsbsvc	r7, r9, r0, lsl #8
    18fc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1900:	00000200 	andeq	r0, r0, r0, lsl #4
    1904:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    1908:	616e6563 	cmnvs	lr, r3, ror #10
    190c:	6573656d 	ldrbvs	r6, [r3, #-1389]!	; 0xfffffa93
    1910:	63697672 	cmnvs	r9, #119537664	; 0x7200000
    1914:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1918:	75000002 	strvc	r0, [r0, #-2]
    191c:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
    1920:	00000200 	andeq	r0, r0, r0, lsl #4
    1924:	63627375 	cmnvs	r2, #-738197503	; 0xd4000001
    1928:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    192c:	72617067 	rsbvc	r7, r1, #103	; 0x67
    1930:	2e726573 	mrccs	5, 3, r6, cr2, cr3, {3}
    1934:	00020068 	andeq	r0, r2, r8, rrx
    1938:	72747300 	rsbsvc	r7, r4, #0, 6
    193c:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    1940:	00020068 	andeq	r0, r2, r8, rrx
    1944:	62737500 	rsbsvs	r7, r3, #0, 10
    1948:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    194c:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    1950:	00000200 	andeq	r0, r0, r0, lsl #4
    1954:	64627375 	strbtvs	r7, [r2], #-885	; 0xfffffc8b
    1958:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    195c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1960:	64000002 	strvs	r0, [r0], #-2
    1964:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    1968:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    196c:	682e6563 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, sp, lr}
    1970:	00000200 	andeq	r0, r0, r0, lsl #4
    1974:	65627375 	strbvs	r7, [r2, #-885]!	; 0xfffffc8b
    1978:	6f70646e 	svcvs	0x0070646e
    197c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1980:	00020068 	andeq	r0, r2, r8, rrx
    1984:	62737500 	rsbsvs	r7, r3, #0, 10
    1988:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    198c:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
    1990:	00020068 	andeq	r0, r2, r8, rrx
    1994:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    1998:	6f726963 	svcvs	0x00726963
    199c:	6f70746f 	svcvs	0x0070746f
    19a0:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    19a4:	00000200 	andeq	r0, r0, r0, lsl #4
    19a8:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    19ac:	61726669 	cmnvs	r2, r9, ror #12
    19b0:	6373656d 	cmnvs	r3, #457179136	; 0x1b400000
    19b4:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
    19b8:	2e72656c 	cdpcs	5, 7, cr6, cr2, cr12, {3}
    19bc:	00020068 	andeq	r0, r2, r8, rrx
    19c0:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    19c4:	66786963 	ldrbtvs	r6, [r8], -r3, ror #18
    19c8:	74737265 	ldrbtvc	r7, [r3], #-613	; 0xfffffd9b
    19cc:	64656761 	strbtvs	r6, [r5], #-1889	; 0xfffff89f
    19d0:	2e617461 	cdpcs	4, 6, cr7, cr1, cr1, {3}
    19d4:	00020068 	andeq	r0, r2, r8, rrx
    19d8:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
    19dc:	2e70616d 	rpwcssz	f6, f0, #5.0
    19e0:	00020068 	andeq	r0, r2, r8, rrx
    19e4:	62737500 	rsbsvs	r7, r3, #0, 10
    19e8:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
    19ec:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
    19f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    19f4:	73750000 	cmnvc	r5, #0
    19f8:	756f6d62 	strbvc	r6, [pc, #-3426]!	; c9e <_start-0x7362>
    19fc:	682e6573 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
    1a00:	00000200 	andeq	r0, r0, r0, lsl #4
    1a04:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    1a08:	0300682e 	movweq	r6, #2094	; 0x82e
    1a0c:	73750000 	cmnvc	r5, #0
    1a10:	6d616762 	stclvs	7, cr6, [r1, #-392]!	; 0xfffffe78
    1a14:	64617065 	strbtvs	r7, [r1], #-101	; 0xffffff9b
    1a18:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1a1c:	73750000 	cmnvc	r5, #0
    1a20:	73616d62 	cmnvc	r1, #6272	; 0x1880
    1a24:	76656473 			; <UNDEFINED> instruction: 0x76656473
    1a28:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    1a2c:	00020068 	andeq	r0, r2, r8, rrx
    1a30:	63616d00 	cmnvs	r1, #0, 26
    1a34:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    1a38:	2e737365 	cdpcs	3, 7, cr7, cr3, cr5, {3}
    1a3c:	00020068 	andeq	r0, r2, r8, rrx
    1a40:	736d7300 	cmnvc	sp, #0, 6
    1a44:	31353963 	teqcc	r5, r3, ror #18
    1a48:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1a4c:	75000002 	strvc	r0, [r0, #-2]
    1a50:	6c697073 	stclvs	0, cr7, [r9], #-460	; 0xfffffe34
    1a54:	61726269 	cmnvs	r2, r9, ror #4
    1a58:	682e7972 	stmdavs	lr!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
    1a5c:	00000200 	andeq	r0, r0, r0, lsl #4
    1a60:	02050000 	andeq	r0, r5, #0
    1a64:	00017110 	andeq	r7, r1, r0, lsl r1
    1a68:	08012003 	stmdaeq	r1, {r0, r1, sp}
    1a6c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    1a70:	069e0601 	ldreq	r0, [lr], r1, lsl #12
    1a74:	0200d7bb 	andeq	sp, r0, #49020928	; 0x2ec0000
    1a78:	9e060104 	adflss	f0, f6, f4
    1a7c:	bb9fbc06 	bllt	fe7f0a9c <_estack+0xf67e0a9c>
    1a80:	bc2208a0 	stclt	8, cr0, [r2], #-640	; 0xfffffd80
    1a84:	849f9fbb 	ldrhi	r9, [pc], #4027	; 1a8c <_start-0x6574>
    1a88:	0876084d 	ldmdaeq	r6!, {r0, r2, r3, r6, fp}^
    1a8c:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
    1a90:	02006903 	andeq	r6, r0, #49152	; 0xc000
    1a94:	00670304 	rsbeq	r0, r7, r4, lsl #6
    1a98:	f4030402 	vst3.8	{d0-d2}, [r3], r2
    1a9c:	03040200 	movweq	r0, #16896	; 0x4200
    1aa0:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1aa4:	00570803 	subseq	r0, r7, r3, lsl #16
    1aa8:	69030402 	stmdbvs	r3, {r1, sl}
    1aac:	03040200 	movweq	r0, #16896	; 0x4200
    1ab0:	00667703 	rsbeq	r7, r6, r3, lsl #14
    1ab4:	06010402 	streq	r0, [r1], -r2, lsl #8
    1ab8:	0c030666 	stceq	6, cr0, [r3], {102}	; 0x66
    1abc:	00760866 	rsbseq	r0, r6, r6, ror #16
    1ac0:	69030402 	stmdbvs	r3, {r1, sl}
    1ac4:	03040200 	movweq	r0, #16896	; 0x4200
    1ac8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1acc:	0200f403 	andeq	pc, r0, #50331648	; 0x3000000
    1ad0:	00670304 	rsbeq	r0, r7, r4, lsl #6
    1ad4:	08030402 	stmdaeq	r3, {r1, sl}
    1ad8:	04020057 	streq	r0, [r2], #-87	; 0xffffffa9
    1adc:	0200a103 	andeq	sl, r0, #-1073741824	; 0xc0000000
    1ae0:	77030304 	strvc	r0, [r3, -r4, lsl #6]
    1ae4:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    1ae8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1aec:	bc660c03 	stcllt	12, cr0, [r6], #-12
    1af0:	00f369d7 	ldrsbteq	r6, [r3], #151	; 0x97
    1af4:	06010402 	streq	r0, [r1], -r2, lsl #8
    1af8:	08bb069e 	ldmeq	fp!, {r1, r2, r3, r4, r7, r9, sl}
    1afc:	3d084dc9 	stccc	13, cr4, [r8, #-804]	; 0xfffffcdc
    1b00:	01040200 	mrseq	r0, R12_usr
    1b04:	bb069e06 	bllt	1a9324 <mailbuffer+0x16e234>
    1b08:	01040200 	mrseq	r0, R12_usr
    1b0c:	bb06ba06 	bllt	1b032c <mailbuffer+0x17523c>
    1b10:	084d7508 	stmdaeq	sp, {r3, r8, sl, ip, sp, lr}^
    1b14:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    1b18:	069e0601 	ldreq	r0, [lr], r1, lsl #12
    1b1c:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    1b20:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
    1b24:	4d7508bb 	ldclmi	8, cr0, [r5, #-748]!	; 0xfffffd14
    1b28:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    1b2c:	9e060104 	adflss	f0, f6, f4
    1b30:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    1b34:	ba060104 	blt	181f4c <mailbuffer+0x146e5c>
    1b38:	7508bb06 	strvc	fp, [r8, #-2822]	; 0xfffff4fa
    1b3c:	0200f34d 	andeq	pc, r0, #872415233	; 0x34000001
    1b40:	9e060104 	adflss	f0, f6, f4
    1b44:	c908bb06 	stmdbgt	r8, {r1, r2, r8, r9, fp, ip, sp, pc}
    1b48:	003d084d 	eorseq	r0, sp, sp, asr #16
    1b4c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1b50:	00bb069e 	umlalseq	r0, fp, lr, r6
    1b54:	06010402 	streq	r0, [r1], -r2, lsl #8
    1b58:	08bb06ba 	ldmeq	fp!, {r1, r3, r4, r5, r7, r9, sl}
    1b5c:	21084d75 	tstcs	r8, r5, ror sp
    1b60:	01040200 	mrseq	r0, R12_usr
    1b64:	bd069e06 	stclt	14, cr9, [r6, #-24]	; 0xffffffe8
    1b68:	0200f468 	andeq	pc, r0, #104, 8	; 0x68000000
    1b6c:	002a0204 	eoreq	r0, sl, r4, lsl #4
    1b70:	06010402 	streq	r0, [r1], -r2, lsl #8
    1b74:	d76e0666 	strble	r0, [lr, -r6, ror #12]!
    1b78:	00750869 	rsbseq	r0, r5, r9, ror #16
    1b7c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1b80:	67bc069e 			; <UNDEFINED> instruction: 0x67bc069e
    1b84:	92084df4 	andls	r4, r8, #244, 26	; 0x3d00
    1b88:	1322024d 	teqne	r2, #-805306364	; 0xd0000004
    1b8c:	00750869 	rsbseq	r0, r5, r9, ror #16
    1b90:	06010402 	streq	r0, [r1], -r2, lsl #8
    1b94:	67bc069e 			; <UNDEFINED> instruction: 0x67bc069e
    1b98:	92084df4 	andls	r4, r8, #244, 26	; 0x3d00
    1b9c:	1322024d 	teqne	r2, #-805306364	; 0xd0000004
    1ba0:	003d0869 	eorseq	r0, sp, r9, ror #16
    1ba4:	06010402 	streq	r0, [r1], -r2, lsl #8
    1ba8:	67bc069e 			; <UNDEFINED> instruction: 0x67bc069e
    1bac:	c9084df4 	stmdbgt	r8, {r2, r4, r5, r6, r7, r8, sl, fp, lr}
    1bb0:	0200f369 	andeq	pc, r0, #-1543503871	; 0xa4000001
    1bb4:	9e060104 	adflss	f0, f6, f4
    1bb8:	c908bb06 	stmdbgt	r8, {r1, r2, r8, r9, fp, ip, sp, pc}
    1bbc:	003d084d 	eorseq	r0, sp, sp, asr #16
    1bc0:	06010402 	streq	r0, [r1], -r2, lsl #8
    1bc4:	00bb069e 	umlalseq	r0, fp, lr, r6
    1bc8:	06010402 	streq	r0, [r1], -r2, lsl #8
    1bcc:	d8bb06ba 	ldmle	fp!, {r1, r3, r4, r5, r7, r9, sl}
    1bd0:	01040200 	mrseq	r0, R12_usr
    1bd4:	bb066606 	bllt	19b3f4 <mailbuffer+0x160304>
    1bd8:	59084df3 	stmdbpl	r8, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    1bdc:	01040200 	mrseq	r0, R12_usr
    1be0:	bb069e06 	bllt	1a9400 <mailbuffer+0x16e310>
    1be4:	01040200 	mrseq	r0, R12_usr
    1be8:	bb06ba06 	bllt	1b0408 <mailbuffer+0x175318>
    1bec:	69132802 	ldmdbvs	r3, {r1, fp, sp}
    1bf0:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    1bf4:	9e060104 	adflss	f0, f6, f4
    1bf8:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    1bfc:	ba060104 	blt	182014 <mailbuffer+0x146f24>
    1c00:	2802bb06 	stmdacs	r2, {r1, r2, r8, r9, fp, ip, sp, pc}
    1c04:	21086913 	tstcs	r8, r3, lsl r9
    1c08:	01040200 	mrseq	r0, R12_usr
    1c0c:	bd069e06 	stclt	14, cr9, [r6, #-24]	; 0xffffffe8
    1c10:	003e0868 	eorseq	r0, lr, r8, ror #16
    1c14:	2a020402 	bcs	82c24 <mailbuffer+0x47b34>
    1c18:	01040200 	mrseq	r0, R12_usr
    1c1c:	6e066606 	cfmadd32vs	mvax0, mvfx6, mvfx6, mvfx6
    1c20:	3d0869d7 	stccc	9, cr6, [r8, #-860]	; 0xfffffca4
    1c24:	01040200 	mrseq	r0, R12_usr
    1c28:	bd069e06 	stclt	14, cr9, [r6, #-24]	; 0xffffffe8
    1c2c:	003e0868 	eorseq	r0, lr, r8, ror #16
    1c30:	08020402 	stmdaeq	r2, {r1, sl}
    1c34:	04020054 	streq	r0, [r2], #-84	; 0xffffffac
    1c38:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1c3c:	3d084df9 	stccc	13, cr4, [r8, #-996]	; 0xfffffc1c
    1c40:	01040200 	mrseq	r0, R12_usr
    1c44:	bc069e06 	stclt	14, cr9, [r6], {6}
    1c48:	4d3e0867 	ldcmi	8, cr0, [lr, #-412]!	; 0xfffffe64
    1c4c:	c9083e08 	stmdbgt	r8, {r3, r9, sl, fp, ip, sp}
    1c50:	00750869 	rsbseq	r0, r5, r9, ror #16
    1c54:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c58:	4cbc069e 	ldcmi	6, cr0, [ip], #632	; 0x278
    1c5c:	a0683f08 	rsbge	r3, r8, r8, lsl #30
    1c60:	4da0684d 	stcmi	8, cr6, [r0, #308]!	; 0x134
    1c64:	684dd868 	stmdavs	sp, {r3, r5, r6, fp, ip, lr, pc}^
    1c68:	08684da0 	stmdaeq	r8!, {r5, r7, r8, sl, fp, lr}^
    1c6c:	68314d22 	ldmdavs	r1!, {r1, r5, r8, sl, fp, lr}
    1c70:	0200674d 	andeq	r6, r0, #20185088	; 0x1340000
    1c74:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1c78:	0200bc06 	andeq	fp, r0, #1536	; 0x600
    1c7c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1c80:	9f9fbb06 	svcls	0x009fbb06
    1c84:	d7d8d7a0 	ldrble	sp, [r8, r0, lsr #15]
    1c88:	01000602 	tsteq	r0, r2, lsl #12
    1c8c:	00074201 	andeq	r4, r7, r1, lsl #4
    1c90:	ab000200 	blge	2498 <_start-0x5b68>
    1c94:	02000001 	andeq	r0, r0, #1
    1c98:	0d0efb01 	vstreq	d15, [lr, #-4]
    1c9c:	01010100 	mrseq	r0, (UNDEF: 17)
    1ca0:	00000001 	andeq	r0, r0, r1
    1ca4:	01000001 	tsteq	r0, r1
    1ca8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1bf4 <_start-0x640c>
    1cac:	6a6c2f65 	bvs	1b0da48 <mailbuffer+0x1ad2958>
    1cb0:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    1cb4:	2f727566 	svccs	0x00727566
    1cb8:	6b736544 	blvs	1cdb1d0 <mailbuffer+0x1ca00e0>
    1cbc:	2f706f74 	svccs	0x00706f74
    1cc0:	2f697072 	svccs	0x00697072
    1cc4:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1cc8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1ccc:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    1cd0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1cd4:	534f5452 	movtpl	r5, #62546	; 0xf452
    1cd8:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    1cdc:	2f726574 	svccs	0x00726574
    1ce0:	6f6d6544 	svcvs	0x006d6544
    1ce4:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1ce8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1cec:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    1cf0:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    1cf4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1cf8:	6f682f00 	svcvs	0x00682f00
    1cfc:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 1b50 <_start-0x64b0>
    1d00:	61736f6a 	cmnvs	r3, sl, ror #30
    1d04:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    1d08:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1d0c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1d10:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    1d14:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    1d18:	72656270 	rsbvc	r6, r5, #112, 4
    1d1c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1d20:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    1d24:	4f545265 	svcmi	0x00545265
    1d28:	616d2d53 	cmnvs	sp, r3, asr sp
    1d2c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1d30:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1d34:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    1d38:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1d3c:	616c2f73 	smcvs	49907	; 0xc2f3
    1d40:	3135396e 	teqcc	r5, lr, ror #18
    1d44:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
    1d48:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1d4c:	73752f65 	cmnvc	r5, #404	; 0x194
    1d50:	00006970 	andeq	r6, r0, r0, ror r9
    1d54:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    1d58:	76656469 	strbtvc	r6, [r5], -r9, ror #8
    1d5c:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    1d60:	00010063 	andeq	r0, r1, r3, rrx
    1d64:	62737500 	rsbsvs	r7, r3, #0, 10
    1d68:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1d6c:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
    1d70:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1d74:	00020068 	andeq	r0, r2, r8, rrx
    1d78:	62737500 	rsbsvs	r7, r3, #0, 10
    1d7c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1d80:	61706769 	cmnvs	r0, r9, ror #14
    1d84:	72657372 	rsbvc	r7, r5, #-939524095	; 0xc8000001
    1d88:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1d8c:	74730000 	ldrbtvc	r0, [r3], #-0
    1d90:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    1d94:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1d98:	73750000 	cmnvc	r5, #0
    1d9c:	72747362 	rsbsvc	r7, r4, #-2013265919	; 0x88000001
    1da0:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    1da4:	00020068 	andeq	r0, r2, r8, rrx
    1da8:	62737500 	rsbsvs	r7, r3, #0, 10
    1dac:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    1db0:	682e6563 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, sp, lr}
    1db4:	00000200 	andeq	r0, r0, r0, lsl #4
    1db8:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    1dbc:	76656469 	strbtvc	r6, [r5], -r9, ror #8
    1dc0:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    1dc4:	00020068 	andeq	r0, r2, r8, rrx
    1dc8:	62737500 	rsbsvs	r7, r3, #0, 10
    1dcc:	70646e65 	rsbvc	r6, r4, r5, ror #28
    1dd0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    1dd4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1dd8:	73750000 	cmnvc	r5, #0
    1ddc:	71657262 	cmnvc	r5, r2, ror #4
    1de0:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
    1de4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1de8:	77640000 	strbvc	r0, [r4, -r0]!
    1dec:	72696368 	rsbvc	r6, r9, #104, 6	; 0xa0000001
    1df0:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
    1df4:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
    1df8:	00020068 	andeq	r0, r2, r8, rrx
    1dfc:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    1e00:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
    1e04:	73656d61 	cmnvc	r5, #6208	; 0x1840
    1e08:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    1e0c:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    1e10:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1e14:	77640000 	strbvc	r0, [r4, -r0]!
    1e18:	78696368 	stmdavc	r9!, {r3, r5, r6, r8, r9, sp, lr}^
    1e1c:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    1e20:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    1e24:	61746164 	cmnvs	r4, r4, ror #2
    1e28:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1e2c:	77640000 	strbvc	r0, [r4, -r0]!
    1e30:	72696368 	rsbvc	r6, r9, #104, 6	; 0xa0000001
    1e34:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    1e38:	2e726574 	mrccs	5, 3, r6, cr2, cr4, {3}
    1e3c:	00020068 	andeq	r0, r2, r8, rrx
    1e40:	05000000 	streq	r0, [r0, #-0]
    1e44:	0184d402 	orreq	sp, r4, r2, lsl #8
    1e48:	00dc0300 	sbcseq	r0, ip, r0, lsl #6
    1e4c:	003d0801 	eorseq	r0, sp, r1, lsl #16
    1e50:	06010402 	streq	r0, [r1], -r2, lsl #8
    1e54:	67bc0666 	ldrvs	r0, [ip, r6, ror #12]!
    1e58:	00a06767 	adceq	r6, r0, r7, ror #14
    1e5c:	68030402 	stmdavs	r3, {r1, sl}
    1e60:	03040200 	movweq	r0, #16896	; 0x4200
    1e64:	0402009c 	streq	r0, [r2], #-156	; 0xffffff64
    1e68:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1e6c:	3d084df6 	stccc	13, cr4, [r8, #-984]	; 0xfffffc28
    1e70:	084d2108 	stmdaeq	sp, {r3, r8, sp}^
    1e74:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    1e78:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1e7c:	f49f31bc 			; <UNDEFINED> instruction: 0xf49f31bc
    1e80:	4d673d08 	stclmi	13, cr3, [r7, #-32]!	; 0xffffffe0
    1e84:	4f67bba0 	svcmi	0x0067bba0
    1e88:	6883679f 	stmvs	r3, {r0, r1, r2, r3, r4, r7, r8, r9, sl, sp, lr}
    1e8c:	67bba0a0 	ldrvs	sl, [fp, r0, lsr #1]!
    1e90:	a04c4d67 	subge	r4, ip, r7, ror #26
    1e94:	506767bb 	strhtpl	r6, [r7], #-123	; 0xffffff85
    1e98:	6767bba0 	strbvs	fp, [r7, -r0, lsr #23]!
    1e9c:	67bbd84d 	ldrvs	sp, [fp, sp, asr #16]!
    1ea0:	67304d67 	ldrvs	r4, [r0, -r7, ror #26]!
    1ea4:	026cd768 	rsbeq	sp, ip, #104, 14	; 0x1a00000
    1ea8:	02001322 	andeq	r1, r0, #-2013265920	; 0x88000000
    1eac:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1eb0:	0248be06 	subeq	fp, r8, #6, 28	; 0x60
    1eb4:	08691636 	stmdaeq	r9!, {r1, r2, r4, r5, r9, sl, ip}^
    1eb8:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    1ebc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1ec0:	142202bc 	strtne	r0, [r2], #-700	; 0xfffffd44
    1ec4:	69d74c4d 	ldmibvs	r7, {r0, r2, r3, r6, sl, fp, lr}^
    1ec8:	02009108 	andeq	r9, r0, #8, 2
    1ecc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1ed0:	2202bc06 	andcs	fp, r2, #1536	; 0x600
    1ed4:	d74c4d14 	smlaldle	r4, ip, r4, sp
    1ed8:	1322026b 	teqne	r2, #-1342177274	; 0xb0000006
    1edc:	01040200 	mrseq	r0, R12_usr
    1ee0:	bc066606 	stclt	6, cr6, [r6], {6}
    1ee4:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    1ee8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1eec:	676767bc 			; <UNDEFINED> instruction: 0x676767bc
    1ef0:	22086967 	andcs	r6, r8, #1687552	; 0x19c000
    1ef4:	4ca1d84c 	stcmi	8, cr13, [r1], #304	; 0x130
    1ef8:	0869d768 	stmdaeq	r9!, {r3, r5, r6, r8, r9, sl, ip, lr, pc}^
    1efc:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    1f00:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1f04:	d84cf4bd 	stmdale	ip, {r0, r2, r3, r4, r5, r7, sl, ip, sp, lr, pc}^
    1f08:	69d768a1 	ldmibvs	r7, {r0, r5, r7, fp, sp, lr}^
    1f0c:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    1f10:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1f14:	0030bc06 	eorseq	fp, r0, r6, lsl #24
    1f18:	06010402 	streq	r0, [r1], -r2, lsl #8
    1f1c:	68bb0666 	ldmvs	fp!, {r1, r2, r5, r6, r9, sl}
    1f20:	020067f4 	andeq	r6, r0, #244, 14	; 0x3d00000
    1f24:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1f28:	00bcbc06 	adcseq	fp, ip, r6, lsl #24
    1f2c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1f30:	f3bc069e 	vqshlu.s64	d0, d14, #60	; 0x3c
    1f34:	a04ff4f3 	strdge	pc, [pc], #-67	; <UNPREDICTABLE>
    1f38:	f34ff4f3 	vqshl.u8	<illegal reg q15.5>, <illegal reg q9.5>, <illegal reg q15.5>
    1f3c:	006df4f3 	strdeq	pc, [sp], #-67	; 0xffffffbd	; <UNPREDICTABLE>
    1f40:	06010402 	streq	r0, [r1], -r2, lsl #8
    1f44:	040200f2 	streq	r0, [r2], #-242	; 0xffffff0e
    1f48:	bc06f202 	sfmlt	f7, 1, [r6], {2}
    1f4c:	01040200 	mrseq	r0, R12_usr
    1f50:	bc069e06 	stclt	14, cr9, [r6], {6}
    1f54:	304eae08 	subcc	sl, lr, r8, lsl #28
    1f58:	590869d7 	stmdbpl	r8, {r0, r1, r2, r4, r6, r7, r8, fp, sp, lr}
    1f5c:	01040200 	mrseq	r0, R12_usr
    1f60:	bc066606 	stclt	6, cr6, [r6], {6}
    1f64:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    1f68:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1f6c:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    1f70:	00f20601 	rscseq	r0, r2, r1, lsl #12
    1f74:	f2020402 	vshl.s8	d0, d2, d2
    1f78:	0200bc06 	andeq	fp, r0, #1536	; 0x600
    1f7c:	9e060104 	adflss	f0, f6, f4
    1f80:	0868bc06 	stmdaeq	r8!, {r1, r2, sl, fp, ip, sp, pc}^
    1f84:	69d73076 	ldmibvs	r7, {r1, r2, r4, r5, r6, ip, sp}^
    1f88:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    1f8c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1f90:	679fbd06 	ldrvs	fp, [pc, r6, lsl #26]
    1f94:	a0688383 	rsbge	r8, r8, r3, lsl #7
    1f98:	83674dbb 	cmnhi	r7, #11968	; 0x2ec0
    1f9c:	679f6a83 	ldrvs	r6, [pc, r3, lsl #21]
    1fa0:	01040200 	mrseq	r0, R12_usr
    1fa4:	bc06f206 	sfmlt	f7, 1, [r6], {6}
    1fa8:	83f4f367 	mvnshi	pc, #-1677721599	; 0x9c000001
    1fac:	688483a2 	stmvs	r4, {r1, r5, r7, r8, r9, pc}
    1fb0:	01040200 	mrseq	r0, R12_usr
    1fb4:	bb068206 	bllt	1a27d4 <mailbuffer+0x1676e4>
    1fb8:	02002108 	andeq	r2, r0, #8, 2
    1fbc:	82060204 	andhi	r0, r6, #4, 4	; 0x40000000
    1fc0:	03040200 	movweq	r0, #16896	; 0x4200
    1fc4:	9fbd0682 	svcls	0x00bd0682
    1fc8:	84838467 	strhi	r8, [r3], #1127	; 0x467
    1fcc:	83836769 	orrhi	r6, r3, #27525120	; 0x1a40000
    1fd0:	67674c68 	strbvs	r4, [r7, -r8, ror #24]!
    1fd4:	0869d768 	stmdaeq	r9!, {r3, r5, r6, r8, r9, sl, ip, lr, pc}^
    1fd8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    1fdc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1fe0:	9f69bbbe 	svcls	0x0069bbbe
    1fe4:	9fa08567 	svcls	0x00a08567
    1fe8:	a2d8f3f3 	sbcsge	pc, r8, #-872415229	; 0xcc000003
    1fec:	69bb6a85 	ldmibvs	fp!, {r0, r2, r7, r9, fp, sp, lr}
    1ff0:	698383bb 	stmibvs	r3, {r0, r1, r3, r4, r5, r7, r8, r9, pc}
    1ff4:	698383bb 	stmibvs	r3, {r0, r1, r3, r4, r5, r7, r8, r9, pc}
    1ff8:	679f4d67 	ldrvs	r4, [pc, r7, ror #26]
    1ffc:	6983d883 	stmibvs	r3, {r0, r1, r7, fp, ip, lr, pc}
    2000:	6767684c 	strbvs	r6, [r7, -ip, asr #16]!
    2004:	67676768 	strbvs	r6, [r7, -r8, ror #14]!
    2008:	0869d768 	stmdaeq	r9!, {r3, r5, r6, r8, r9, sl, ip, lr, pc}^
    200c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    2010:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2014:	5a089fbd 	bpl	229f10 <mailbuffer+0x1eee20>
    2018:	674c4d68 	strbvs	r4, [ip, -r8, ror #26]
    201c:	4c688383 	stclmi	3, cr8, [r8], #-524	; 0xfffffdf4
    2020:	69838367 	stmibvs	r3, {r0, r1, r2, r5, r6, r8, r9, pc}
    2024:	69d7684c 	ldmibvs	r7, {r2, r3, r6, fp, sp, lr}^
    2028:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    202c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2030:	08bdbd06 	popeq	{r1, r2, r8, sl, fp, ip, sp, pc}
    2034:	834e685a 	movthi	r6, #59482	; 0xe85a
    2038:	685a0868 	ldmdavs	sl, {r3, r5, r6, fp}^
    203c:	d7684c4d 	strble	r4, [r8, -sp, asr #24]!
    2040:	003d0869 	eorseq	r0, sp, r9, ror #16
    2044:	06010402 	streq	r0, [r1], -r2, lsl #8
    2048:	9fbd0666 	svcls	0x00bd0666
    204c:	f3688367 	vcgt.u32	q12, q4, <illegal reg q11.5>
    2050:	003d084d 	eorseq	r0, sp, sp, asr #16
    2054:	06010402 	streq	r0, [r1], -r2, lsl #8
    2058:	9fbd0666 	svcls	0x00bd0666
    205c:	660e0367 	strvs	r0, [lr], -r7, ror #6
    2060:	3d084df3 	stccc	13, cr4, [r8, #-972]	; 0xfffffc34
    2064:	01040200 	mrseq	r0, R12_usr
    2068:	bd066606 	stclt	6, cr6, [r6, #-24]	; 0xffffffe8
    206c:	674c68bb 			; <UNDEFINED> instruction: 0x674c68bb
    2070:	4df36886 	ldclmi	8, cr6, [r3, #536]!	; 0x218
    2074:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    2078:	66060104 	strvs	r0, [r6], -r4, lsl #2
    207c:	30a0bd06 	adccc	fp, r0, r6, lsl #26
    2080:	3068f367 	rsbcc	pc, r8, r7, ror #6
    2084:	59084df3 	stmdbpl	r8, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    2088:	01040200 	mrseq	r0, R12_usr
    208c:	bd066606 	stclt	6, cr6, [r6, #-24]	; 0xffffffe8
    2090:	086730a0 	stmdaeq	r7!, {r5, r7, ip, sp}^
    2094:	f3306821 	vsub.i64	d6, d0, d17
    2098:	0059084d 	subseq	r0, r9, sp, asr #16
    209c:	06010402 	streq	r0, [r1], -r2, lsl #8
    20a0:	bbbd0666 	bllt	fef43a40 <_estack+0xf6f33a40>
    20a4:	68bb8383 	ldmvs	fp!, {r0, r1, r7, r8, r9, pc}
    20a8:	f34d5a08 	vpmax.u8	d21, d13, d8
    20ac:	003d084d 	eorseq	r0, sp, sp, asr #16
    20b0:	06010402 	streq	r0, [r1], -r2, lsl #8
    20b4:	bbbd0666 	bllt	fef43a54 <_estack+0xf6f33a54>
    20b8:	5a086883 	bpl	21c2cc <mailbuffer+0x1e11dc>
    20bc:	084df34d 	stmdaeq	sp, {r0, r2, r3, r6, r8, r9, ip, sp, lr, pc}^
    20c0:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    20c4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    20c8:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    20cc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    20d0:	0200bcbb 	andeq	fp, r0, #47872	; 0xbb00
    20d4:	82060104 	andhi	r0, r6, #4, 2
    20d8:	f468bb06 			; <UNDEFINED> instruction: 0xf468bb06
    20dc:	02004d68 	andeq	r4, r0, #104, 26	; 0x1a00
    20e0:	2e060104 	adfcss	f0, f6, f4
    20e4:	21088706 	tstcs	r8, r6, lsl #14
    20e8:	4b750869 	blmi	1d44294 <mailbuffer+0x1d091a4>
    20ec:	01040200 	mrseq	r0, R12_usr
    20f0:	bc066606 	stclt	6, cr6, [r6], {6}
    20f4:	91084df3 	strdls	r4, [r8, -r3]
    20f8:	01040200 	mrseq	r0, R12_usr
    20fc:	bb066606 	bllt	19b91c <mailbuffer+0x16082c>
    2100:	01040200 	mrseq	r0, R12_usr
    2104:	bc066606 	stclt	6, cr6, [r6], {6}
    2108:	844da067 	strbhi	sl, [sp], #-103	; 0xffffff99
    210c:	01040200 	mrseq	r0, R12_usr
    2110:	bb066606 	bllt	19b930 <mailbuffer+0x160840>
    2114:	040200d8 	streq	r0, [r2], #-216	; 0xffffff28
    2118:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
    211c:	a068a0bb 	strhtge	sl, [r8], #-11
    2120:	4b68a086 	blmi	1a2a340 <mailbuffer+0x19ef250>
    2124:	4d68a04c 	stclmi	0, cr10, [r8, #-304]!	; 0xfffffed0
    2128:	00686867 	rsbeq	r6, r8, r7, ror #16
    212c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2130:	85bb0666 	ldrhi	r0, [fp, #1638]!	; 0x666
    2134:	0869d768 	stmdaeq	r9!, {r3, r5, r6, r8, r9, sl, ip, lr, pc}^
    2138:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    213c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2140:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    2144:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2148:	020067bb 	andeq	r6, r0, #49020928	; 0x2ec0000
    214c:	9e060104 	adflss	f0, f6, f4
    2150:	2108be06 	tstcs	r8, r6, lsl #28
    2154:	8368d867 	cmnhi	r8, #6750208	; 0x670000
    2158:	21086983 	smlabbcs	r8, r3, r9, r6
    215c:	69866883 	stmibvs	r6, {r0, r1, r7, fp, sp, lr}
    2160:	59084df3 	stmdbpl	r8, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    2164:	01040200 	mrseq	r0, R12_usr
    2168:	bc066606 	stclt	6, cr6, [r6], {6}
    216c:	01040200 	mrseq	r0, R12_usr
    2170:	bb066606 	bllt	19b990 <mailbuffer+0x1608a0>
    2174:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    2178:	069e0601 	ldreq	r0, [lr], r1, lsl #12
    217c:	21086abc 			; <UNDEFINED> instruction: 0x21086abc
    2180:	3d086a67 	vstrcc	s12, [r8, #-412]	; 0xfffffe64
    2184:	085a08f3 	ldmdaeq	sl, {r0, r1, r4, r5, r6, r7, fp}^
    2188:	659f6a21 	ldrvs	r6, [pc, #2593]	; 2bb1 <_start-0x544f>
    218c:	220868bc 	andcs	r6, r8, #188, 16	; 0xbc0000
    2190:	a03d0832 	eorsge	r0, sp, r2, lsr r8
    2194:	a02d67f3 	strdge	r6, [sp], -r3	; <UNPREDICTABLE>
    2198:	a0a02d67 	adcge	r2, r0, r7, ror #26
    219c:	086a8484 	stmdaeq	sl!, {r2, r7, sl, pc}^
    21a0:	f49f6721 			; <UNDEFINED> instruction: 0xf49f6721
    21a4:	a2a08483 	adcge	r8, r0, #-2097152000	; 0x83000000
    21a8:	85a2a085 	strhi	sl, [r2, #133]!	; 0x85
    21ac:	83220883 	teqhi	r2, #8585216	; 0x830000
    21b0:	08832208 	stmeq	r3, {r3, r9, sp}
    21b4:	84686722 	strbthi	r6, [r8], #-1826	; 0xfffff8de
    21b8:	0887a2d8 	stmeq	r7, {r3, r4, r6, r7, r9, sp, pc}
    21bc:	8368d721 	cmnhi	r8, #8650752	; 0x840000
    21c0:	67676883 	strbvs	r6, [r7, -r3, lsl #17]!
    21c4:	f3676767 	vabd.u32	q11, <illegal reg q3.5>, <illegal reg q11.5>
    21c8:	0059084d 	subseq	r0, r9, sp, asr #16
    21cc:	06010402 	streq	r0, [r1], -r2, lsl #8
    21d0:	9fbc0666 	svcls	0x00bc0666
    21d4:	01040200 	mrseq	r0, R12_usr
    21d8:	bb066606 	bllt	19b9f8 <mailbuffer+0x160908>
    21dc:	02006767 	andeq	r6, r0, #27000832	; 0x19c0000
    21e0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    21e4:	83f5bc06 	mvnshi	fp, #1536	; 0x600
    21e8:	31220831 	teqcc	r2, r1, lsr r8
    21ec:	08692108 	stmdaeq	r9!, {r3, r8, sp}^
    21f0:	00a2bc23 	adceq	fp, r2, r3, lsr #24
    21f4:	06010402 	streq	r0, [r1], -r2, lsl #8
    21f8:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
    21fc:	be06f202 	cdplt	2, 0, cr15, cr6, cr2, {0}
    2200:	80309d83 	eorshi	r9, r0, r3, lsl #27
    2204:	316767a2 	cmncc	r7, r2, lsr #15
    2208:	3f0833bb 	svccc	0x000833bb
    220c:	84d8a067 	ldrbhi	sl, [r8], #103	; 0x67
    2210:	bc68a083 	stcllt	0, cr10, [r8], #-524	; 0xfffffdf4
    2214:	a0329208 	eorsge	r9, r2, r8, lsl #4
    2218:	4b6869bd 	blmi	1a1c914 <mailbuffer+0x19e1824>
    221c:	4b68a04b 	blmi	1a2a350 <mailbuffer+0x19ef260>
    2220:	839f6731 	orrshi	r6, pc, #12845056	; 0xc40000
    2224:	6868d884 	stmdavs	r8!, {r2, r7, fp, ip, lr, pc}^
    2228:	68a04b4b 	stmiavs	r0!, {r0, r1, r3, r6, r8, r9, fp, lr}
    222c:	67a0314b 	strvs	r3, [r0, fp, asr #2]!
    2230:	6731d868 	ldrvs	sp, [r1, -r8, ror #16]!
    2234:	d8a06731 	stmiale	r0!, {r0, r4, r5, r8, r9, sl, sp, lr}
    2238:	4b4b6868 	blmi	12dc3e0 <mailbuffer+0x12a12f0>
    223c:	314b68a0 	smlaltbcc	r6, fp, r0, r8
    2240:	3267d8a0 	rsbcc	sp, r7, #160, 16	; 0xa00000
    2244:	6868a0a0 	stmdavs	r8!, {r5, r7, sp, pc}^
    2248:	68a04b4b 	stmiavs	r0!, {r0, r1, r3, r6, r8, r9, fp, lr}
    224c:	67a0314b 	strvs	r3, [r0, fp, asr #2]!
    2250:	0a038468 	beq	e33f8 <mailbuffer+0xa8308>
    2254:	2e7a0366 	cdpcs	3, 7, cr0, cr10, cr6, {3}
    2258:	9208bc68 	andls	fp, r8, #104, 24	; 0x6800
    225c:	bca06831 	stclt	8, cr6, [r0], #196	; 0xc4
    2260:	a04b4b68 	subge	r4, fp, r8, ror #22
    2264:	bb314b68 	bllt	c5500c <mailbuffer+0xc19f1c>
    2268:	3d084df4 	stccc	13, cr4, [r8, #-976]	; 0xfffffc30
    226c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    2270:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2274:	689f31bc 	ldmvs	pc, {r2, r3, r4, r5, r7, r8, ip, sp}	; <UNPREDICTABLE>
    2278:	68679fd9 	stmdavs	r7!, {r0, r3, r4, r6, r7, r8, r9, sl, fp, ip, pc}^
    227c:	08f5684b 	ldmeq	r5!, {r0, r1, r3, r6, fp, sp, lr}^
    2280:	0068683d 	rsbeq	r6, r8, sp, lsr r8
    2284:	69020402 	stmdbvs	r2, {r1, sl}
    2288:	02040200 	andeq	r0, r4, #0, 4
    228c:	00667303 	rsbeq	r7, r6, r3, lsl #6
    2290:	06010402 	streq	r0, [r1], -r2, lsl #8
    2294:	10030666 	andne	r0, r3, r6, ror #12
    2298:	6613039e 			; <UNDEFINED> instruction: 0x6613039e
    229c:	4df33068 	ldclmi	0, cr3, [r3, #416]!	; 0x1a0
    22a0:	004b7508 	subeq	r7, fp, r8, lsl #10
    22a4:	06010402 	streq	r0, [r1], -r2, lsl #8
    22a8:	4bbc0666 	blmi	fef03c48 <_estack+0xf6ef3c48>
    22ac:	01040200 	mrseq	r0, R12_usr
    22b0:	bc066606 	stclt	6, cr6, [r6], {6}
    22b4:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    22b8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    22bc:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    22c0:	069e0601 	ldreq	r0, [lr], r1, lsl #12
    22c4:	6768a0bc 			; <UNDEFINED> instruction: 0x6768a0bc
    22c8:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    22cc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    22d0:	6869a2bb 	stmdavs	r9!, {r0, r1, r3, r4, r5, r7, r9, sp, pc}^
    22d4:	3d084dbb 	stccc	13, cr4, [r8, #-748]	; 0xfffffd14
    22d8:	01040200 	mrseq	r0, R12_usr
    22dc:	bc066606 	stclt	6, cr6, [r6], {6}
    22e0:	bc684b30 	stcllt	11, cr4, [r8], #-192	; 0xffffff40
    22e4:	020030bc 	andeq	r3, r0, #188	; 0xbc
    22e8:	004d0204 	subeq	r0, sp, r4, lsl #4
    22ec:	03020402 	movweq	r0, #9218	; 0x2402
    22f0:	02006675 	andeq	r6, r0, #122683392	; 0x7500000
    22f4:	66060104 	strvs	r0, [r6], -r4, lsl #2
    22f8:	9e0e0306 	cdpls	3, 0, cr0, cr14, cr6, {0}
    22fc:	0869d730 	stmdaeq	r9!, {r4, r5, r8, r9, sl, ip, lr, pc}^
    2300:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    2304:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2308:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    230c:	069e0601 	ldreq	r0, [lr], r1, lsl #12
    2310:	003084bb 	ldrhteq	r8, [r0], -fp
    2314:	06010402 	streq	r0, [r1], -r2, lsl #8
    2318:	d8bb06ba 	ldmle	fp!, {r1, r3, r4, r5, r7, r9, sl}
    231c:	91084dbb 			; <UNDEFINED> instruction: 0x91084dbb
    2320:	01040200 	mrseq	r0, R12_usr
    2324:	bc066606 	stclt	6, cr6, [r6], {6}
    2328:	01040200 	mrseq	r0, R12_usr
    232c:	bb066606 	bllt	19bb4c <mailbuffer+0x160a5c>
    2330:	01040200 	mrseq	r0, R12_usr
    2334:	bb066606 	bllt	19bb54 <mailbuffer+0x160a64>
    2338:	01040200 	mrseq	r0, R12_usr
    233c:	bc066606 	stclt	6, cr6, [r6], {6}
    2340:	03c04c30 	biceq	r4, r0, #48, 24	; 0x3000
    2344:	02004a76 	andeq	r4, r0, #483328	; 0x76000
    2348:	d6060104 	strle	r0, [r6], -r4, lsl #2
    234c:	02040200 	andeq	r0, r4, #0, 4
    2350:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    2354:	03069e04 	movweq	r9, #28164	; 0x6e04
    2358:	69d74a0e 	ldmibvs	r7, {r1, r2, r3, r9, fp, lr}^
    235c:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    2360:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2364:	a04dbc06 	subge	fp, sp, r6, lsl #24
    2368:	74080f03 	strvc	r0, [r8], #-3843	; 0xfffff0fd
    236c:	4b2e7403 	blmi	b9f380 <mailbuffer+0xb64290>
    2370:	4b314b31 	blmi	c5503c <mailbuffer+0xc19f4c>
    2374:	69d76834 	ldmibvs	r7, {r2, r4, r5, fp, sp, lr}^
    2378:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    237c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2380:	d8a0bd06 	stmiale	r0!, {r1, r2, r8, sl, fp, ip, sp, pc}
    2384:	d7684d68 	strble	r4, [r8, -r8, ror #26]!
    2388:	003d0869 	eorseq	r0, sp, r9, ror #16
    238c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2390:	a0bd0666 	adcsge	r0, sp, r6, ror #12
    2394:	f3688367 	vcgt.u32	q12, q4, <illegal reg q11.5>
    2398:	0075084f 	rsbseq	r0, r5, pc, asr #16
    239c:	06010402 	streq	r0, [r1], -r2, lsl #8
    23a0:	84bd0666 	ldrthi	r0, [sp], #1638	; 0x666
    23a4:	f3920830 	vqshrun.s32	d0, q8, #14
    23a8:	0059084d 	subseq	r0, r9, sp, asr #16
    23ac:	06010402 	streq	r0, [r1], -r2, lsl #8
    23b0:	bbbc0666 	bllt	fef03d50 <_estack+0xf6ef3d50>
    23b4:	bbbbbbbb 	bllt	feef12a8 <_estack+0xf6ee12a8>
    23b8:	bbbbbbbb 	bllt	feef12ac <_estack+0xf6ee12ac>
    23bc:	bbbbbbbc 	bllt	feef12b4 <_estack+0xf6ee12b4>
    23c0:	3d08bcbb 	stccc	12, cr11, [r8, #-748]	; 0xfffffd14
    23c4:	3d083d08 	stccc	13, cr3, [r8, #-32]	; 0xffffffe0
    23c8:	3d083d08 	stccc	13, cr3, [r8, #-32]	; 0xffffffe0
    23cc:	0402c908 	streq	ip, [r2], #-2312	; 0xfffff6f8
    23d0:	13010100 	movwne	r0, #4352	; 0x1100
    23d4:	02000002 	andeq	r0, r0, #2
    23d8:	0000ef00 	andeq	lr, r0, r0, lsl #30
    23dc:	fb010200 	blx	42be6 <mailbuffer+0x7af6>
    23e0:	01000d0e 	tsteq	r0, lr, lsl #26
    23e4:	00010101 	andeq	r0, r1, r1, lsl #2
    23e8:	00010000 	andeq	r0, r1, r0
    23ec:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    23f0:	2f656d6f 	svccs	0x00656d6f
    23f4:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    23f8:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    23fc:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    2400:	6f746b73 	svcvs	0x00746b73
    2404:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    2408:	61522f69 	cmpvs	r2, r9, ror #30
    240c:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    2410:	50797272 	rsbspl	r7, r9, r2, ror r2
    2414:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    2418:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    241c:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    2420:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    2424:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    2428:	442f6f6d 	strtmi	r6, [pc], #-3949	; 2430 <_start-0x5bd0>
    242c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2430:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 2270 <_start-0x5d90>
    2434:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    2438:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 237c <_start-0x5c84>
    243c:	2f006269 	svccs	0x00006269
    2440:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2444:	6f6a6c2f 	svcvs	0x006a6c2f
    2448:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    244c:	442f7275 	strtmi	r7, [pc], #-629	; 2454 <_start-0x5bac>
    2450:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    2454:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    2458:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    245c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    2460:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2464:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    2468:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    246c:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    2470:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    2474:	442f7265 	strtmi	r7, [pc], #-613	; 247c <_start-0x5b84>
    2478:	2f6f6d65 	svccs	0x006f6d65
    247c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2480:	2f737265 	svccs	0x00737265
    2484:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    2488:	2f343135 	svccs	0x00343135
    248c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2490:	2f656475 	svccs	0x00656475
    2494:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    2498:	77640000 	strbvc	r0, [r4, -r0]!
    249c:	72696368 	rsbvc	r6, r9, #104, 6	; 0xa0000001
    24a0:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    24a4:	2e726574 	mrccs	5, 3, r6, cr2, cr4, {3}
    24a8:	00010063 	andeq	r0, r1, r3, rrx
    24ac:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    24b0:	65726963 	ldrbvs	r6, [r2, #-2403]!	; 0xfffff69d
    24b4:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    24b8:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    24bc:	00000200 	andeq	r0, r0, r0, lsl #4
    24c0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    24c4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    24c8:	00000002 	andeq	r0, r0, r2
    24cc:	98020500 	stmdals	r2, {r8, sl}
    24d0:	030001c0 	movweq	r0, #448	; 0x1c0
    24d4:	59080118 	stmdbpl	r8, {r3, r4, r8}
    24d8:	01040200 	mrseq	r0, R12_usr
    24dc:	bb066606 	bllt	19bcfc <mailbuffer+0x160c0c>
    24e0:	084df367 	stmdaeq	sp, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr, pc}^
    24e4:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    24e8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    24ec:	f36767bb 	vaba.u32	d22, d23, d27
    24f0:	003d084d 	eorseq	r0, sp, sp, asr #16
    24f4:	06010402 	streq	r0, [r1], -r2, lsl #8
    24f8:	f3bb0666 	vcvt.f32.s32	q0, q11
    24fc:	003d084d 	eorseq	r0, sp, sp, asr #16
    2500:	06010402 	streq	r0, [r1], -r2, lsl #8
    2504:	9fbb0666 	svcls	0x00bb0666
    2508:	0869f368 	stmdaeq	r9!, {r3, r5, r6, r8, r9, ip, sp, lr, pc}^
    250c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    2510:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2514:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    2518:	06820601 	streq	r0, [r2], r1, lsl #12
    251c:	4d5908bb 	ldclmi	8, cr0, [r9, #-748]	; 0xfffffd14
    2520:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    2524:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2528:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    252c:	82060104 	andhi	r0, r6, #4, 2
    2530:	69f3bb06 	ldmibvs	r3!, {r1, r2, r8, r9, fp, ip, sp, pc}^
    2534:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    2538:	66060104 	strvs	r0, [r6], -r4, lsl #2
    253c:	f367bb06 	vqrdmulh.s32	d27, d7, d6
    2540:	0059084d 	subseq	r0, r9, sp, asr #16
    2544:	06010402 	streq	r0, [r1], -r2, lsl #8
    2548:	00bb0666 	adcseq	r0, fp, r6, ror #12
    254c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2550:	08bb0682 	ldmeq	fp!, {r1, r7, r9, sl}
    2554:	590869c9 	stmdbpl	r8, {r0, r3, r6, r7, r8, fp, sp, lr}
    2558:	01040200 	mrseq	r0, R12_usr
    255c:	bb066606 	bllt	19bd7c <mailbuffer+0x160c8c>
    2560:	01040200 	mrseq	r0, R12_usr
    2564:	bb068206 	bllt	1a2d84 <mailbuffer+0x167c94>
    2568:	084d5908 	stmdaeq	sp, {r3, r8, fp, ip, lr}^
    256c:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    2570:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2574:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    2578:	06820601 	streq	r0, [r2], r1, lsl #12
    257c:	4d5908bb 	ldclmi	8, cr0, [r9, #-748]	; 0xfffffd14
    2580:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    2584:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2588:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    258c:	82060104 	andhi	r0, r6, #4, 2
    2590:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    2594:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2598:	ad08bb06 	vstrge	d11, [r8, #-24]	; 0xffffffe8
    259c:	0059084d 	subseq	r0, r9, sp, asr #16
    25a0:	06010402 	streq	r0, [r1], -r2, lsl #8
    25a4:	00bb0666 	adcseq	r0, fp, r6, ror #12
    25a8:	06010402 	streq	r0, [r1], -r2, lsl #8
    25ac:	00bb0682 	adcseq	r0, fp, r2, lsl #13
    25b0:	06010402 	streq	r0, [r1], -r2, lsl #8
    25b4:	08bb0666 	ldmeq	fp!, {r1, r2, r5, r6, r9, sl}
    25b8:	3d084d91 	stccc	13, cr4, [r8, #-580]	; 0xfffffdbc
    25bc:	01040200 	mrseq	r0, R12_usr
    25c0:	bb066606 	bllt	19bde0 <mailbuffer+0x160cf0>
    25c4:	084df367 	stmdaeq	sp, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr, pc}^
    25c8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    25cc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    25d0:	4ff367bb 	svcmi	0x00f367bb
    25d4:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    25d8:	66060104 	strvs	r0, [r6], -r4, lsl #2
    25dc:	4886bb06 	stmmi	r6, {r1, r2, r8, r9, fp, ip, sp, pc}
    25e0:	08487c08 	stmdaeq	r8, {r3, sl, fp, ip, sp, lr}^
    25e4:	00040278 	andeq	r0, r4, r8, ror r2
    25e8:	04ca0101 	strbeq	r0, [sl], #257	; 0x101
    25ec:	00020000 	andeq	r0, r2, r0
    25f0:	000001c7 	andeq	r0, r0, r7, asr #3
    25f4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    25f8:	0101000d 	tsteq	r1, sp
    25fc:	00000101 	andeq	r0, r0, r1, lsl #2
    2600:	00000100 	andeq	r0, r0, r0, lsl #2
    2604:	6f682f01 	svcvs	0x00682f01
    2608:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 245c <_start-0x5ba4>
    260c:	61736f6a 	cmnvs	r3, sl, ror #30
    2610:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    2614:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2618:	706f746b 	rsbvc	r7, pc, fp, ror #8
    261c:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    2620:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    2624:	72656270 	rsbvc	r6, r5, #112, 4
    2628:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    262c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    2630:	4f545265 	svcmi	0x00545265
    2634:	616d2d53 	cmnvs	sp, r3, asr sp
    2638:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    263c:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    2640:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    2644:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2648:	616c2f73 	smcvs	49907	; 0xc2f3
    264c:	3135396e 	teqcc	r5, lr, ror #18
    2650:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2654:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    2658:	2f656d6f 	svccs	0x00656d6f
    265c:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    2660:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    2664:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    2668:	6f746b73 	svcvs	0x00746b73
    266c:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    2670:	61522f69 	cmpvs	r2, r9, ror #30
    2674:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    2678:	50797272 	rsbspl	r7, r9, r2, ror r2
    267c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    2680:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    2684:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    2688:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    268c:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    2690:	442f6f6d 	strtmi	r6, [pc], #-3949	; 2698 <_start-0x5968>
    2694:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2698:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 24d8 <_start-0x5b28>
    269c:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    26a0:	692f3431 	stmdbvs	pc!, {r0, r4, r5, sl, ip, sp}	; <UNPREDICTABLE>
    26a4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    26a8:	752f6564 	strvc	r6, [pc, #-1380]!	; 214c <_start-0x5eb4>
    26ac:	00697073 	rsbeq	r7, r9, r3, ror r0
    26b0:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    26b4:	66786963 	ldrbtvs	r6, [r8], -r3, ror #18
    26b8:	74737265 	ldrbtvc	r7, [r3], #-613	; 0xfffffd9b
    26bc:	64656761 	strbtvs	r6, [r5], #-1889	; 0xfffff89f
    26c0:	2e617461 	cdpcs	4, 6, cr7, cr1, cr1, {3}
    26c4:	00010063 	andeq	r0, r1, r3, rrx
    26c8:	62737500 	rsbsvs	r7, r3, #0, 10
    26cc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    26d0:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
    26d4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    26d8:	00020068 	andeq	r0, r2, r8, rrx
    26dc:	62737500 	rsbsvs	r7, r3, #0, 10
    26e0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    26e4:	61706769 	cmnvs	r0, r9, ror #14
    26e8:	72657372 	rsbvc	r7, r5, #-939524095	; 0xc8000001
    26ec:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    26f0:	74730000 	ldrbtvc	r0, [r3], #-0
    26f4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    26f8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    26fc:	73750000 	cmnvc	r5, #0
    2700:	72747362 	rsbsvc	r7, r4, #-2013265919	; 0x88000001
    2704:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    2708:	00020068 	andeq	r0, r2, r8, rrx
    270c:	62737500 	rsbsvs	r7, r3, #0, 10
    2710:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    2714:	682e6563 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, sp, lr}
    2718:	00000200 	andeq	r0, r0, r0, lsl #4
    271c:	65627375 	strbvs	r7, [r2, #-885]!	; 0xfffffc8b
    2720:	6f70646e 	svcvs	0x0070646e
    2724:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2728:	00020068 	andeq	r0, r2, r8, rrx
    272c:	62737500 	rsbsvs	r7, r3, #0, 10
    2730:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2734:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
    2738:	00020068 	andeq	r0, r2, r8, rrx
    273c:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    2740:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
    2744:	73656d61 	cmnvc	r5, #6208	; 0x1840
    2748:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    274c:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    2750:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2754:	77640000 	strbvc	r0, [r4, -r0]!
    2758:	78696368 	stmdavc	r9!, {r3, r5, r6, r8, r9, sp, lr}^
    275c:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    2760:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    2764:	61746164 	cmnvs	r4, r4, ror #2
    2768:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    276c:	77640000 	strbvc	r0, [r4, -r0]!
    2770:	66696368 	strbtvs	r6, [r9], -r8, ror #6
    2774:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    2778:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    277c:	72657064 	rsbvc	r7, r5, #100	; 0x64
    2780:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2784:	77640000 	strbvc	r0, [r4, -r0]!
    2788:	66696368 	strbtvs	r6, [r9], -r8, ror #6
    278c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    2790:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    2794:	65706e64 	ldrbvs	r6, [r0, #-3684]!	; 0xfffff19c
    2798:	00682e72 	rsbeq	r2, r8, r2, ror lr
    279c:	64000002 	strvs	r0, [r0], #-2
    27a0:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    27a4:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    27a8:	68637365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    27ac:	736e6465 	cmnvc	lr, #1694498816	; 0x65000000
    27b0:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    27b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    27b8:	00000000 	andeq	r0, r0, r0
    27bc:	ca280205 	bgt	a02fd8 <mailbuffer+0x9c7ee8>
    27c0:	1c030001 	stcne	0, cr0, [r3], {1}
    27c4:	00910801 	addseq	r0, r1, r1, lsl #16
    27c8:	06010402 	streq	r0, [r1], -r2, lsl #8
    27cc:	67bc0666 	ldrvs	r0, [ip, r6, ror #12]!
    27d0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    27d4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    27d8:	02006867 	andeq	r6, r0, #6750208	; 0x670000
    27dc:	82060104 	andhi	r0, r6, #4, 2
    27e0:	009fbc06 	addseq	fp, pc, r6, lsl #24
    27e4:	06010402 	streq	r0, [r1], -r2, lsl #8
    27e8:	d7bb0682 	ldrle	r0, [fp, r2, lsl #13]!
    27ec:	01040200 	mrseq	r0, R12_usr
    27f0:	bc068206 	sfmlt	f0, 1, [r6], {6}
    27f4:	009fd8f3 			; <UNDEFINED> instruction: 0x009fd8f3
    27f8:	06010402 	streq	r0, [r1], -r2, lsl #8
    27fc:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    2800:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
    2804:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
    2808:	f4684d2d 			; <UNDEFINED> instruction: 0xf4684d2d
    280c:	a19f869f 			; <UNDEFINED> instruction: 0xa19f869f
    2810:	bc84ca08 	vstmialt	r4, {s24-s31}
    2814:	838685a2 	orrhi	r8, r6, #679477248	; 0x28800000
    2818:	040200a3 	streq	r0, [r2], #-163	; 0xffffff5d
    281c:	06820601 	streq	r0, [r2], r1, lsl #12
    2820:	0200bbbb 	andeq	fp, r0, #191488	; 0x2ec00
    2824:	82060104 	andhi	r0, r6, #4, 2
    2828:	6784bb06 	strvs	fp, [r4, r6, lsl #22]
    282c:	00696767 	rsbeq	r6, r9, r7, ror #14
    2830:	06010402 	streq	r0, [r1], -r2, lsl #8
    2834:	00bb0682 	adcseq	r0, fp, r2, lsl #13
    2838:	06010402 	streq	r0, [r1], -r2, lsl #8
    283c:	84bc069e 	ldrthi	r0, [ip], #1694	; 0x69e
    2840:	bba2bba0 	bllt	fe8b16c8 <_estack+0xf68a16c8>
    2844:	04020085 	streq	r0, [r2], #-133	; 0xffffff7b
    2848:	06820601 	streq	r0, [r2], r1, lsl #12
    284c:	bb84d7da 	bllt	fe1387bc <_estack+0xf61287bc>
    2850:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
    2854:	00820601 	addeq	r0, r2, r1, lsl #12
    2858:	06010402 	streq	r0, [r1], -r2, lsl #8
    285c:	084d5b08 	stmdaeq	sp, {r3, r8, r9, fp, ip, lr}^
    2860:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    2864:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2868:	83d784bc 	bicshi	r8, r7, #188, 8	; 0xbc000000
    286c:	83846869 	orrhi	r6, r4, #6881280	; 0x690000
    2870:	f3676769 	vabd.u32	q11, <illegal reg q3.5>, <illegal reg q12.5>
    2874:	0091084d 	addseq	r0, r1, sp, asr #16
    2878:	06010402 	streq	r0, [r1], -r2, lsl #8
    287c:	0b030666 	bleq	c421c <mailbuffer+0x8912c>
    2880:	6b6569ba 	blvs	195cf70 <mailbuffer+0x1921e80>
    2884:	83a09f31 	movhi	r9, #49, 30	; 0xc4
    2888:	a1846783 	orrge	r6, r4, r3, lsl #15
    288c:	8483bcbb 	strhi	fp, [r3], #3259	; 0xcbb
    2890:	040200f5 	streq	r0, [r2], #-245	; 0xffffff0b
    2894:	069e0601 	ldreq	r0, [lr], r1, lsl #12
    2898:	2208bdbb 	andcs	fp, r8, #11968	; 0x2ec0
    289c:	01040200 	mrseq	r0, R12_usr
    28a0:	bb06ba06 	bllt	1b10c0 <mailbuffer+0x175fd0>
    28a4:	084dae08 	stmdaeq	sp, {r3, r9, sl, fp, sp, pc}^
    28a8:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    28ac:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    28b0:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    28b4:	06820601 	streq	r0, [r2], r1, lsl #12
    28b8:	084df3bc 	stmdaeq	sp, {r2, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    28bc:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    28c0:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    28c4:	084df3bb 	stmdaeq	sp, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    28c8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    28cc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    28d0:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    28d4:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    28d8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    28dc:	084df3bb 	stmdaeq	sp, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    28e0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    28e4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    28e8:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    28ec:	0869d73d 	stmdaeq	r9!, {r0, r2, r3, r4, r5, r8, r9, sl, ip, lr, pc}^
    28f0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    28f4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    28f8:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    28fc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    2900:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2904:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    2908:	06820601 	streq	r0, [r2], r1, lsl #12
    290c:	0200bdbb 	andeq	fp, r0, #11968	; 0x2ec0
    2910:	66060204 	strvs	r0, [r6], -r4, lsl #4
    2914:	03040200 	movweq	r0, #16896	; 0x4200
    2918:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    291c:	b9064a04 	stmdblt	r6, {r2, r9, fp, lr}
    2920:	3d086930 	stccc	9, cr6, [r8, #-192]	; 0xffffff40
    2924:	01040200 	mrseq	r0, R12_usr
    2928:	bb066606 	bllt	19c148 <mailbuffer+0x161058>
    292c:	01040200 	mrseq	r0, R12_usr
    2930:	bb068206 	bllt	1a3150 <mailbuffer+0x168060>
    2934:	08697508 	stmdaeq	r9!, {r3, r8, sl, ip, sp, lr}^
    2938:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    293c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2940:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    2944:	06820601 	streq	r0, [r2], r1, lsl #12
    2948:	5b084cbc 	blpl	215c40 <mailbuffer+0x1dab50>
    294c:	314b314b 	cmpcc	fp, fp, asr #2
    2950:	31bb314b 			; <UNDEFINED> instruction: 0x31bb314b
    2954:	3d0869f3 	stccc	9, cr6, [r8, #-972]	; 0xfffffc34
    2958:	01040200 	mrseq	r0, R12_usr
    295c:	bb066606 	bllt	19c17c <mailbuffer+0x16108c>
    2960:	01040200 	mrseq	r0, R12_usr
    2964:	bb068206 	bllt	1a3184 <mailbuffer+0x168094>
    2968:	08697508 	stmdaeq	r9!, {r3, r8, sl, ip, sp, lr}^
    296c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    2970:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2974:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    2978:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    297c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2980:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    2984:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    2988:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    298c:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    2990:	06820601 	streq	r0, [r2], r1, lsl #12
    2994:	af084cbc 	svcge	0x00084cbc
    2998:	314b314b 	cmpcc	fp, fp, asr #2
    299c:	31bb314b 			; <UNDEFINED> instruction: 0x31bb314b
    29a0:	3d0869d7 	stccc	9, cr6, [r8, #-860]	; 0xfffffca4
    29a4:	01040200 	mrseq	r0, R12_usr
    29a8:	bb066606 	bllt	19c1c8 <mailbuffer+0x1610d8>
    29ac:	3d0869f3 	stccc	9, cr6, [r8, #-972]	; 0xfffffc34
    29b0:	01040200 	mrseq	r0, R12_usr
    29b4:	bb066606 	bllt	19c1d4 <mailbuffer+0x1610e4>
    29b8:	3d0869f3 	stccc	9, cr6, [r8, #-972]	; 0xfffffc34
    29bc:	01040200 	mrseq	r0, R12_usr
    29c0:	bb066606 	bllt	19c1e0 <mailbuffer+0x1610f0>
    29c4:	01040200 	mrseq	r0, R12_usr
    29c8:	bc068206 	sfmlt	f0, 1, [r6], {6}
    29cc:	08692108 	stmdaeq	r9!, {r3, r8, sp}^
    29d0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    29d4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    29d8:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    29dc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    29e0:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    29e4:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    29e8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    29ec:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    29f0:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    29f4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    29f8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    29fc:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    2a00:	06820601 	streq	r0, [r2], r1, lsl #12
    2a04:	0869f3bc 	stmdaeq	r9!, {r2, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    2a08:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    2a0c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2a10:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    2a14:	06820601 	streq	r0, [r2], r1, lsl #12
    2a18:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    2a1c:	06820601 	streq	r0, [r2], r1, lsl #12
    2a20:	697508bb 	ldmdbvs	r5!, {r0, r1, r3, r4, r5, r7, fp}^
    2a24:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    2a28:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2a2c:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    2a30:	82060104 	andhi	r0, r6, #4, 2
    2a34:	0200bc06 	andeq	fp, r0, #1536	; 0x600
    2a38:	82060104 	andhi	r0, r6, #4, 2
    2a3c:	7508bb06 	strvc	fp, [r8, #-2822]	; 0xfffff4fa
    2a40:	003d0869 	eorseq	r0, sp, r9, ror #16
    2a44:	06010402 	streq	r0, [r1], -r2, lsl #8
    2a48:	00bb0666 	adcseq	r0, fp, r6, ror #12
    2a4c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2a50:	d7bb0682 	ldrle	r0, [fp, r2, lsl #13]!
    2a54:	003d0869 	eorseq	r0, sp, r9, ror #16
    2a58:	06010402 	streq	r0, [r1], -r2, lsl #8
    2a5c:	4ebb0666 	cdpmi	6, 11, cr0, cr11, cr6, {3}
    2a60:	d76ba083 	strble	sl, [fp, -r3, lsl #1]!
    2a64:	003d0869 	eorseq	r0, sp, r9, ror #16
    2a68:	06010402 	streq	r0, [r1], -r2, lsl #8
    2a6c:	00bb0666 	adcseq	r0, fp, r6, ror #12
    2a70:	06010402 	streq	r0, [r1], -r2, lsl #8
    2a74:	f3bb0682 	vcvt.f32.u32	d0, d2
    2a78:	003d0869 	eorseq	r0, sp, r9, ror #16
    2a7c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2a80:	08bb0666 	ldmeq	fp!, {r1, r2, r5, r6, r9, sl}
    2a84:	3d086991 	stccc	9, cr6, [r8, #-580]	; 0xfffffdbc
    2a88:	01040200 	mrseq	r0, R12_usr
    2a8c:	bb066606 	bllt	19c2ac <mailbuffer+0x1611bc>
    2a90:	69f369bc 	ldmibvs	r3!, {r2, r3, r4, r5, r7, r8, fp, sp, lr}^
    2a94:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    2a98:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2a9c:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    2aa0:	82060104 	andhi	r0, r6, #4, 2
    2aa4:	69f3bb06 	ldmibvs	r3!, {r1, r2, r8, r9, fp, ip, sp, pc}^
    2aa8:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    2aac:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2ab0:	02f3bb06 	rscseq	fp, r3, #6144	; 0x1800
    2ab4:	01010006 	tsteq	r1, r6
    2ab8:	000001c3 	andeq	r0, r0, r3, asr #3
    2abc:	00fc0002 	rscseq	r0, ip, r2
    2ac0:	01020000 	mrseq	r0, (UNDEF: 2)
    2ac4:	000d0efb 	strdeq	r0, [sp], -fp
    2ac8:	01010101 	tsteq	r1, r1, lsl #2
    2acc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ad0:	2f010000 	svccs	0x00010000
    2ad4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2ad8:	6f6a6c2f 	svcvs	0x006a6c2f
    2adc:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    2ae0:	442f7275 	strtmi	r7, [pc], #-629	; 2ae8 <_start-0x5518>
    2ae4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    2ae8:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    2aec:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    2af0:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    2af4:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2af8:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    2afc:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    2b00:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    2b04:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    2b08:	442f7265 	strtmi	r7, [pc], #-613	; 2b10 <_start-0x54f0>
    2b0c:	2f6f6d65 	svccs	0x006f6d65
    2b10:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2b14:	2f737265 	svccs	0x00737265
    2b18:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    2b1c:	2f343135 	svccs	0x00343135
    2b20:	0062696c 	rsbeq	r6, r2, ip, ror #18
    2b24:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2a70 <_start-0x5590>
    2b28:	6a6c2f65 	bvs	1b0e8c4 <mailbuffer+0x1ad37d4>
    2b2c:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    2b30:	2f727566 	svccs	0x00727566
    2b34:	6b736544 	blvs	1cdc04c <mailbuffer+0x1ca0f5c>
    2b38:	2f706f74 	svccs	0x00706f74
    2b3c:	2f697072 	svccs	0x00697072
    2b40:	70736152 	rsbsvc	r6, r3, r2, asr r1
    2b44:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    2b48:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    2b4c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    2b50:	534f5452 	movtpl	r5, #62546	; 0xf452
    2b54:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    2b58:	2f726574 	svccs	0x00726574
    2b5c:	6f6d6544 	svcvs	0x006d6544
    2b60:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    2b64:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    2b68:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    2b6c:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    2b70:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2b74:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    2b78:	7073752f 	rsbsvc	r7, r3, pc, lsr #10
    2b7c:	75000069 	strvc	r0, [r0, #-105]	; 0xffffff97
    2b80:	6f636273 	svcvs	0x00636273
    2b84:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2b88:	73726170 	cmnvc	r2, #112, 2
    2b8c:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
    2b90:	00000100 	andeq	r0, r0, r0, lsl #2
    2b94:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
    2b98:	00020068 	andeq	r0, r2, r8, rrx
    2b9c:	70797400 	rsbsvc	r7, r9, r0, lsl #8
    2ba0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2ba4:	00000200 	andeq	r0, r0, r0, lsl #4
    2ba8:	63627375 	cmnvs	r2, #-738197503	; 0xd4000001
    2bac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2bb0:	72617067 	rsbvc	r7, r1, #103	; 0x67
    2bb4:	2e726573 	mrccs	5, 3, r6, cr2, cr3, {3}
    2bb8:	00020068 	andeq	r0, r2, r8, rrx
    2bbc:	05000000 	streq	r0, [r0, #-0]
    2bc0:	01e50002 	mvneq	r0, r2
    2bc4:	011a0300 	tsteq	sl, r0, lsl #6
    2bc8:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
    2bcc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2bd0:	6767bb06 	strbvs	fp, [r7, -r6, lsl #22]!
    2bd4:	8483bb67 	strhi	fp, [r3], #2919	; 0xb67
    2bd8:	01040200 	mrseq	r0, R12_usr
    2bdc:	bc068206 	sfmlt	f0, 1, [r6], {6}
    2be0:	9f31a083 	svcls	0x0031a083
    2be4:	3122089f 			; <UNDEFINED> instruction: 0x3122089f
    2be8:	672308f4 			; <UNDEFINED> instruction: 0x672308f4
    2bec:	6867304b 	stmdavs	r7!, {r0, r1, r3, r6, ip, sp}^
    2bf0:	3183a083 	orrcc	sl, r3, r3, lsl #1
    2bf4:	d61f034b 	ldrle	r0, [pc], -fp, asr #6
    2bf8:	682e6403 	stmdavs	lr!, {r0, r1, sl, sp, lr}
    2bfc:	314b3083 	smlalbbcc	r3, fp, r3, r0
    2c00:	4b308368 	blmi	c239a8 <mailbuffer+0xbe88b8>
    2c04:	83686731 	cmnhi	r8, #12845056	; 0xc40000
    2c08:	67344b30 			; <UNDEFINED> instruction: 0x67344b30
    2c0c:	4b318384 	blmi	c63a24 <mailbuffer+0xc28934>
    2c10:	034a4903 	movteq	r4, #43267	; 0xa903
    2c14:	83a0ba3a 	movhi	fp, #237568	; 0x3a000
    2c18:	4d3d0831 	ldcmi	8, cr0, [sp, #-196]!	; 0xffffff3c
    2c1c:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    2c20:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2c24:	4df3bb06 	ldclmi	11, cr11, [r3, #24]!
    2c28:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    2c2c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2c30:	69f3bb06 	ldmibvs	r3!, {r1, r2, r8, r9, fp, ip, sp, pc}^
    2c34:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
    2c38:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2c3c:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    2c40:	82060104 	andhi	r0, r6, #4, 2
    2c44:	304cbc06 	subcc	fp, ip, r6, lsl #24
    2c48:	009f8483 	addseq	r8, pc, r3, lsl #9
    2c4c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2c50:	67bc069e 			; <UNDEFINED> instruction: 0x67bc069e
    2c54:	67843168 	strvs	r3, [r4, r8, ror #2]
    2c58:	6b033167 	blvs	cf1fc <mailbuffer+0x9410c>
    2c5c:	ba180366 	blt	6039fc <mailbuffer+0x5c890c>
    2c60:	6ad76968 	bvs	ff5dd208 <_estack+0xf75cd208>
    2c64:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    2c68:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2c6c:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    2c70:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2c74:	be9cbd06 	cdplt	13, 9, cr11, cr12, cr6, {0}
    2c78:	04029208 	streq	r9, [r2], #-520	; 0xfffffdf8
    2c7c:	26010100 	strcs	r0, [r1], -r0, lsl #2
    2c80:	02000004 	andeq	r0, r0, #4
    2c84:	00019600 	andeq	r9, r1, r0, lsl #12
    2c88:	fb010200 	blx	43492 <mailbuffer+0x83a2>
    2c8c:	01000d0e 	tsteq	r0, lr, lsl #26
    2c90:	00010101 	andeq	r0, r1, r1, lsl #2
    2c94:	00010000 	andeq	r0, r1, r0
    2c98:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    2c9c:	2f656d6f 	svccs	0x00656d6f
    2ca0:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    2ca4:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    2ca8:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    2cac:	6f746b73 	svcvs	0x00746b73
    2cb0:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    2cb4:	61522f69 	cmpvs	r2, r9, ror #30
    2cb8:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    2cbc:	50797272 	rsbspl	r7, r9, r2, ror r2
    2cc0:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    2cc4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    2cc8:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    2ccc:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    2cd0:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    2cd4:	442f6f6d 	strtmi	r6, [pc], #-3949	; 2cdc <_start-0x5324>
    2cd8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2cdc:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 2b1c <_start-0x54e4>
    2ce0:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    2ce4:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 2c28 <_start-0x53d8>
    2ce8:	2f006269 	svccs	0x00006269
    2cec:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2cf0:	6f6a6c2f 	svcvs	0x006a6c2f
    2cf4:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    2cf8:	442f7275 	strtmi	r7, [pc], #-629	; 2d00 <_start-0x5300>
    2cfc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    2d00:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    2d04:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    2d08:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    2d0c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2d10:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    2d14:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    2d18:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    2d1c:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    2d20:	442f7265 	strtmi	r7, [pc], #-613	; 2d28 <_start-0x52d8>
    2d24:	2f6f6d65 	svccs	0x006f6d65
    2d28:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2d2c:	2f737265 	svccs	0x00737265
    2d30:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    2d34:	2f343135 	svccs	0x00343135
    2d38:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2d3c:	2f656475 	svccs	0x00656475
    2d40:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    2d44:	73750000 	cmnvc	r5, #0
    2d48:	76656462 	strbtvc	r6, [r5], -r2, ror #8
    2d4c:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    2d50:	00010063 	andeq	r0, r1, r3, rrx
    2d54:	62737500 	rsbsvs	r7, r3, #0, 10
    2d58:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2d5c:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
    2d60:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2d64:	00020068 	andeq	r0, r2, r8, rrx
    2d68:	62737500 	rsbsvs	r7, r3, #0, 10
    2d6c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    2d70:	61706769 	cmnvs	r0, r9, ror #14
    2d74:	72657372 	rsbvc	r7, r5, #-939524095	; 0xc8000001
    2d78:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2d7c:	74730000 	ldrbtvc	r0, [r3], #-0
    2d80:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    2d84:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2d88:	73750000 	cmnvc	r5, #0
    2d8c:	72747362 	rsbsvc	r7, r4, #-2013265919	; 0x88000001
    2d90:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    2d94:	00020068 	andeq	r0, r2, r8, rrx
    2d98:	62737500 	rsbsvs	r7, r3, #0, 10
    2d9c:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    2da0:	682e6563 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, sp, lr}
    2da4:	00000200 	andeq	r0, r0, r0, lsl #4
    2da8:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    2dac:	76656469 	strbtvc	r6, [r5], -r9, ror #8
    2db0:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    2db4:	00020068 	andeq	r0, r2, r8, rrx
    2db8:	62737500 	rsbsvs	r7, r3, #0, 10
    2dbc:	70646e65 	rsbvc	r6, r4, r5, ror #28
    2dc0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    2dc4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2dc8:	73750000 	cmnvc	r5, #0
    2dcc:	71657262 	cmnvc	r5, r2, ror #4
    2dd0:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
    2dd4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2dd8:	77640000 	strbvc	r0, [r4, -r0]!
    2ddc:	72696368 	rsbvc	r6, r9, #104, 6	; 0xa0000001
    2de0:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
    2de4:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
    2de8:	00020068 	andeq	r0, r2, r8, rrx
    2dec:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    2df0:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
    2df4:	73656d61 	cmnvc	r5, #6208	; 0x1840
    2df8:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    2dfc:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    2e00:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2e04:	77640000 	strbvc	r0, [r4, -r0]!
    2e08:	78696368 	stmdavc	r9!, {r3, r5, r6, r8, r9, sp, lr}^
    2e0c:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    2e10:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    2e14:	61746164 	cmnvs	r4, r4, ror #2
    2e18:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2e1c:	00000000 	andeq	r0, r0, r0
    2e20:	ebc00205 	bl	ff00363c <_estack+0xf6ff363c>
    2e24:	2a030001 	bcs	c2e30 <mailbuffer+0x87d40>
    2e28:	13220201 	teqne	r2, #268435456	; 0x10000000
    2e2c:	01040200 	mrseq	r0, R12_usr
    2e30:	bc066606 	stclt	6, cr6, [r6], {6}
    2e34:	67676784 	strbvs	r6, [r7, -r4, lsl #15]!
    2e38:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    2e3c:	02006867 	andeq	r6, r0, #6750208	; 0x670000
    2e40:	82060104 	andhi	r0, r6, #4, 2
    2e44:	0200bc06 	andeq	fp, r0, #1536	; 0x600
    2e48:	82060104 	andhi	r0, r6, #4, 2
    2e4c:	00bbbb06 	adcseq	fp, fp, r6, lsl #22
    2e50:	06010402 	streq	r0, [r1], -r2, lsl #8
    2e54:	a0bb0682 	adcsge	r0, fp, r2, lsl #13
    2e58:	01040200 	mrseq	r0, R12_usr
    2e5c:	bc066606 	stclt	6, cr6, [r6], {6}
    2e60:	4d3d089f 	ldcmi	8, cr0, [sp, #-636]!	; 0xfffffd84
    2e64:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    2e68:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2e6c:	0200bc06 	andeq	fp, r0, #1536	; 0x600
    2e70:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2e74:	6784bc06 	strvs	fp, [r4, r6, lsl #24]
    2e78:	83686767 	cmnhi	r8, #27000832	; 0x19c0000
    2e7c:	84838383 	strhi	r8, [r3], #899	; 0x383
    2e80:	00bbd8d7 	ldrsbteq	sp, [fp], r7
    2e84:	06010402 	streq	r0, [r1], -r2, lsl #8
    2e88:	f4bb0682 			; <UNDEFINED> instruction: 0xf4bb0682
    2e8c:	0200bb84 	andeq	fp, r0, #132, 22	; 0x21000
    2e90:	82060104 	andhi	r0, r6, #4, 2
    2e94:	84f5bc06 	ldrbthi	fp, [r5], #3078	; 0xc06
    2e98:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
    2e9c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2ea0:	0200bbbc 	andeq	fp, r0, #188, 22	; 0x2f000
    2ea4:	82060104 	andhi	r0, r6, #4, 2
    2ea8:	84f4bc06 	ldrbthi	fp, [r4], #3078	; 0xc06
    2eac:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    2eb0:	06820601 	streq	r0, [r2], r1, lsl #12
    2eb4:	4d9308bb 	ldcmi	8, cr0, [r3, #748]	; 0x2ec
    2eb8:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    2ebc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2ec0:	8384bc06 	orrhi	fp, r4, #1536	; 0x600
    2ec4:	83846983 	orrhi	r6, r4, #2146304	; 0x20c000
    2ec8:	69838469 	stmibvs	r3, {r0, r3, r5, r6, sl, pc}
    2ecc:	69838384 	stmibvs	r3, {r2, r7, r8, r9, pc}
    2ed0:	08836868 	stmeq	r3, {r3, r5, r6, fp, sp, lr}
    2ed4:	3d084d21 	stccc	13, cr4, [r8, #-132]	; 0xffffff7c
    2ed8:	01040200 	mrseq	r0, R12_usr
    2edc:	bc066606 	stclt	6, cr6, [r6], {6}
    2ee0:	01040200 	mrseq	r0, R12_usr
    2ee4:	bb068206 	bllt	1a3704 <mailbuffer+0x168614>
    2ee8:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    2eec:	06820601 	streq	r0, [r2], r1, lsl #12
    2ef0:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    2ef4:	06820601 	streq	r0, [r2], r1, lsl #12
    2ef8:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    2efc:	06820601 	streq	r0, [r2], r1, lsl #12
    2f00:	084884bd 	stmdaeq	r8, {r0, r2, r3, r4, r5, r7, sl, pc}^
    2f04:	6883bc95 	stmvs	r3, {r0, r2, r4, r7, sl, fp, ip, sp, pc}
    2f08:	bca09f4d 	stclt	15, cr9, [r0], #308	; 0x134
    2f0c:	f44d6883 	vst2.32	{d22-d23}, [sp], r3
    2f10:	95084884 	strls	r4, [r8, #-2180]	; 0xfffff77c
    2f14:	516883bc 	strhpl	r8, [r8, #-60]!	; 0xffffffc4
    2f18:	bc843d08 	stclt	13, cr3, [r4], {8}
    2f1c:	d976084d 	ldmdble	r6!, {r0, r2, r3, r6, fp}^
    2f20:	a09f844d 	addsge	r8, pc, sp, asr #8
    2f24:	494ba0bc 	stmdbmi	fp, {r2, r3, r4, r5, r7, sp, pc}^
    2f28:	494ba0be 	stmdbmi	fp, {r1, r2, r3, r4, r5, r7, sp, pc}^
    2f2c:	040200bf 	streq	r0, [r2], #-191	; 0xffffff41
    2f30:	06820601 	streq	r0, [r2], r1, lsl #12
    2f34:	0200bbbb 	andeq	fp, r0, #191488	; 0x2ec00
    2f38:	82060104 	andhi	r0, r6, #4, 2
    2f3c:	4884bc06 	stmmi	r4, {r1, r2, sl, fp, ip, sp, pc}
    2f40:	83bc9508 			; <UNDEFINED> instruction: 0x83bc9508
    2f44:	9f9f4d68 	svcls	0x009f4d68
    2f48:	6883bcbc 	stmvs	r3, {r2, r3, r4, r5, r7, sl, fp, ip, sp, pc}
    2f4c:	bb84a04d 	bllt	fe12b088 <_estack+0xf611b088>
    2f50:	01040200 	mrseq	r0, R12_usr
    2f54:	bc068206 	sfmlt	f0, 1, [r6], {6}
    2f58:	5b084884 	blpl	215170 <mailbuffer+0x1da080>
    2f5c:	83bc4f2b 			; <UNDEFINED> instruction: 0x83bc4f2b
    2f60:	02005168 	andeq	r5, r0, #104, 2
    2f64:	82060104 	andhi	r0, r6, #4, 2
    2f68:	00bbbb06 	adcseq	fp, fp, r6, lsl #22
    2f6c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2f70:	f4bb0682 			; <UNDEFINED> instruction: 0xf4bb0682
    2f74:	d74d84d8 			; <UNDEFINED> instruction: 0xd74d84d8
    2f78:	003d0869 	eorseq	r0, sp, r9, ror #16
    2f7c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2f80:	00bc0666 	adcseq	r0, ip, r6, ror #12
    2f84:	06010402 	streq	r0, [r1], -r2, lsl #8
    2f88:	00bb0682 	adcseq	r0, fp, r2, lsl #13
    2f8c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2f90:	84bc0682 	ldrthi	r0, [ip], #1666	; 0x682
    2f94:	65af084d 	strvs	r0, [pc, #2125]!	; 37e9 <_start-0x4817>
    2f98:	69d74dbd 	ldmibvs	r7, {r0, r2, r3, r4, r5, r7, r8, sl, fp, lr}^
    2f9c:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
    2fa0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2fa4:	0083bc06 	addeq	fp, r3, r6, lsl #24
    2fa8:	06010402 	streq	r0, [r1], -r2, lsl #8
    2fac:	4cbb0666 	ldcmi	6, cr0, [fp], #408	; 0x198
    2fb0:	040200d9 	streq	r0, [r2], #-217	; 0xffffff27
    2fb4:	06820601 	streq	r0, [r2], r1, lsl #12
    2fb8:	803081bc 	ldrhthi	r8, [r0], -ip
    2fbc:	02003185 	andeq	r3, r0, #1073741857	; 0x40000021
    2fc0:	82060104 	andhi	r0, r6, #4, 2
    2fc4:	a39fbb06 	orrsge	fp, pc, #6144	; 0x1800
    2fc8:	31643065 	cmncc	r4, r5, rrx
    2fcc:	6731be63 	ldrvs	fp, [r1, -r3, ror #28]!
    2fd0:	01040200 	mrseq	r0, R12_usr
    2fd4:	bb066606 	bllt	19c7f4 <mailbuffer+0x161704>
    2fd8:	4987839f 	stmibmi	r7, {r0, r1, r2, r3, r4, r7, r8, r9, pc}
    2fdc:	47314830 			; <UNDEFINED> instruction: 0x47314830
    2fe0:	83bc31be 			; <UNDEFINED> instruction: 0x83bc31be
    2fe4:	0869d731 	stmdaeq	r9!, {r0, r4, r5, r8, r9, sl, ip, lr, pc}^
    2fe8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    2fec:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2ff0:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    2ff4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    2ff8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2ffc:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    3000:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    3004:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3008:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    300c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    3010:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3014:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    3018:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    301c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3020:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    3024:	06820601 	streq	r0, [r2], r1, lsl #12
    3028:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    302c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    3030:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3034:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    3038:	06820601 	streq	r0, [r2], r1, lsl #12
    303c:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    3040:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    3044:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3048:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    304c:	06820601 	streq	r0, [r2], r1, lsl #12
    3050:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    3054:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    3058:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    305c:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    3060:	06820601 	streq	r0, [r2], r1, lsl #12
    3064:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    3068:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    306c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3070:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    3074:	06820601 	streq	r0, [r2], r1, lsl #12
    3078:	699108bb 	ldmibvs	r1, {r0, r1, r3, r4, r5, r7, fp}
    307c:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    3080:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3084:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    3088:	82060104 	andhi	r0, r6, #4, 2
    308c:	3d08bb06 	vstrcc	d11, [r8, #-24]	; 0xffffffe8
    3090:	0075084d 	rsbseq	r0, r5, sp, asr #16
    3094:	06010402 	streq	r0, [r1], -r2, lsl #8
    3098:	00bc0666 	adcseq	r0, ip, r6, ror #12
    309c:	06010402 	streq	r0, [r1], -r2, lsl #8
    30a0:	f5bb0682 			; <UNDEFINED> instruction: 0xf5bb0682
    30a4:	01000402 	tsteq	r0, r2, lsl #8
    30a8:	00031901 	andeq	r1, r3, r1, lsl #18
    30ac:	88000200 	stmdahi	r0, {r9}
    30b0:	02000002 	andeq	r0, r0, #2
    30b4:	0d0efb01 	vstreq	d15, [lr, #-4]
    30b8:	01010100 	mrseq	r0, (UNDEF: 17)
    30bc:	00000001 	andeq	r0, r0, r1
    30c0:	01000001 	tsteq	r0, r1
    30c4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3010 <_start-0x4ff0>
    30c8:	6a6c2f65 	bvs	1b0ee64 <mailbuffer+0x1ad3d74>
    30cc:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    30d0:	2f727566 	svccs	0x00727566
    30d4:	6b736544 	blvs	1cdc5ec <mailbuffer+0x1ca14fc>
    30d8:	2f706f74 	svccs	0x00706f74
    30dc:	2f697072 	svccs	0x00697072
    30e0:	70736152 	rsbsvc	r6, r3, r2, asr r1
    30e4:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    30e8:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    30ec:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    30f0:	534f5452 	movtpl	r5, #62546	; 0xf452
    30f4:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    30f8:	2f726574 	svccs	0x00726574
    30fc:	6f6d6544 	svcvs	0x006d6544
    3100:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    3104:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    3108:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    310c:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    3110:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3114:	6f682f00 	svcvs	0x00682f00
    3118:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 2f6c <_start-0x5094>
    311c:	61736f6a 	cmnvs	r3, sl, ror #30
    3120:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    3124:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3128:	706f746b 	rsbvc	r7, pc, fp, ror #8
    312c:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    3130:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    3134:	72656270 	rsbvc	r6, r5, #112, 4
    3138:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    313c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    3140:	4f545265 	svcmi	0x00545265
    3144:	616d2d53 	cmnvs	sp, r3, asr sp
    3148:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    314c:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    3150:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    3154:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3158:	616c2f73 	smcvs	49907	; 0xc2f3
    315c:	3135396e 	teqcc	r5, lr, ror #18
    3160:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
    3164:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3168:	73752f65 	cmnvc	r5, #404	; 0x194
    316c:	2f006970 	svccs	0x00006970
    3170:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3174:	6f6a6c2f 	svcvs	0x006a6c2f
    3178:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    317c:	442f7275 	strtmi	r7, [pc], #-629	; 3184 <_start-0x4e7c>
    3180:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3184:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    3188:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    318c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    3190:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3194:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    3198:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    319c:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    31a0:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    31a4:	442f7265 	strtmi	r7, [pc], #-613	; 31ac <_start-0x4e54>
    31a8:	2f6f6d65 	svccs	0x006f6d65
    31ac:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    31b0:	2f737265 	svccs	0x00737265
    31b4:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    31b8:	2f343135 	svccs	0x00343135
    31bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    31c0:	00656475 	rsbeq	r6, r5, r5, ror r4
    31c4:	62737500 	rsbsvs	r7, r3, #0, 10
    31c8:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    31cc:	61666563 	cmnvs	r6, r3, ror #10
    31d0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    31d4:	00632e79 	rsbeq	r2, r3, r9, ror lr
    31d8:	75000001 	strvc	r0, [r0, #-1]
    31dc:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
    31e0:	00000200 	andeq	r0, r0, r0, lsl #4
    31e4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    31e8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    31ec:	75000002 	strvc	r0, [r0, #-2]
    31f0:	6f636273 	svcvs	0x00636273
    31f4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    31f8:	73726170 	cmnvc	r2, #112, 2
    31fc:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    3200:	00000200 	andeq	r0, r0, r0, lsl #4
    3204:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3208:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    320c:	00000200 	andeq	r0, r0, r0, lsl #4
    3210:	73627375 	cmnvc	r2, #-738197503	; 0xd4000001
    3214:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    3218:	00682e67 	rsbeq	r2, r8, r7, ror #28
    321c:	75000002 	strvc	r0, [r0, #-2]
    3220:	65646273 	strbvs	r6, [r4, #-627]!	; 0xfffffd8d
    3224:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3228:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    322c:	77640000 	strbvc	r0, [r4, -r0]!
    3230:	64696368 	strbtvs	r6, [r9], #-872	; 0xfffffc98
    3234:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3238:	00682e65 	rsbeq	r2, r8, r5, ror #28
    323c:	75000002 	strvc	r0, [r0, #-2]
    3240:	6e656273 	mcrvs	2, 3, r6, cr5, cr3, {3}
    3244:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3248:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    324c:	00000200 	andeq	r0, r0, r0, lsl #4
    3250:	68627375 	stmdavs	r2!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    3254:	682e6275 	stmdavs	lr!, {r0, r2, r4, r5, r6, r9, sp, lr}
    3258:	00000200 	andeq	r0, r0, r0, lsl #4
    325c:	72627375 	rsbvc	r7, r2, #-738197503	; 0xd4000001
    3260:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    3264:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    3268:	00000200 	andeq	r0, r0, r0, lsl #4
    326c:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    3270:	6f6f7269 	svcvs	0x006f7269
    3274:	726f7074 	rsbvc	r7, pc, #116	; 0x74
    3278:	00682e74 	rsbeq	r2, r8, r4, ror lr
    327c:	64000002 	strvs	r0, [r0], #-2
    3280:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    3284:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    3288:	68637365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    328c:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    3290:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    3294:	00000200 	andeq	r0, r0, r0, lsl #4
    3298:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    329c:	65667869 	strbvs	r7, [r6, #-2153]!	; 0xfffff797
    32a0:	61747372 	cmnvs	r4, r2, ror r3
    32a4:	61646567 	cmnvs	r4, r7, ror #10
    32a8:	682e6174 	stmdavs	lr!, {r2, r4, r5, r6, r8, sp, lr}
    32ac:	00000200 	andeq	r0, r0, r0, lsl #4
    32b0:	73627375 	cmnvc	r2, #-738197503	; 0xd4000001
    32b4:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    32b8:	68647261 	stmdavs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    32bc:	682e6275 	stmdavs	lr!, {r0, r2, r4, r5, r6, r9, sp, lr}
    32c0:	00000200 	andeq	r0, r0, r0, lsl #4
    32c4:	6d627375 	stclvs	3, cr7, [r2, #-468]!	; 0xfffffe2c
    32c8:	64737361 	ldrbtvs	r7, [r3], #-865	; 0xfffffc9f
    32cc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    32d0:	00682e65 	rsbeq	r2, r8, r5, ror #28
    32d4:	6b000002 	blvs	32e4 <_start-0x4d1c>
    32d8:	616d7965 	cmnvs	sp, r5, ror #18
    32dc:	00682e70 	rsbeq	r2, r8, r0, ror lr
    32e0:	75000002 	strvc	r0, [r0, #-2]
    32e4:	656b6273 	strbvs	r6, [fp, #-627]!	; 0xfffffd8d
    32e8:	616f6279 	smcvs	63017	; 0xf629
    32ec:	682e6472 	stmdavs	lr!, {r1, r4, r5, r6, sl, sp, lr}
    32f0:	00000200 	andeq	r0, r0, r0, lsl #4
    32f4:	6d627375 	stclvs	3, cr7, [r2, #-468]!	; 0xfffffe2c
    32f8:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
    32fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3300:	73750000 	cmnvc	r5, #0
    3304:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
    3308:	00000300 	andeq	r0, r0, r0, lsl #6
    330c:	67627375 			; <UNDEFINED> instruction: 0x67627375
    3310:	70656d61 	rsbvc	r6, r5, r1, ror #26
    3314:	682e6461 	stmdavs	lr!, {r0, r5, r6, sl, sp, lr}
    3318:	00000200 	andeq	r0, r0, r0, lsl #4
    331c:	6163616d 	cmnvs	r3, sp, ror #2
    3320:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    3324:	682e7373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
    3328:	00000200 	andeq	r0, r0, r0, lsl #4
    332c:	63736d73 	cmnvs	r3, #7360	; 0x1cc0
    3330:	78313539 	ldmdavc	r1!, {r0, r3, r4, r5, r8, sl, ip, sp}
    3334:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3338:	00000000 	andeq	r0, r0, r0
    333c:	03ec0205 	mvneq	r0, #1342177280	; 0x50000000
    3340:	22030002 	andcs	r0, r3, #2
    3344:	003d0801 	eorseq	r0, sp, r1, lsl #16
    3348:	06010402 	streq	r0, [r1], -r2, lsl #8
    334c:	08bd0666 	popeq	{r1, r2, r5, r6, r9, sl}
    3350:	08590859 	ldmdaeq	r9, {r0, r3, r4, r6, fp}^
    3354:	02004d5a 	andeq	r4, r0, #5760	; 0x1680
    3358:	66060104 	strvs	r0, [r6], -r4, lsl #2
    335c:	69d7bc06 	ldmibvs	r7, {r1, r2, sl, fp, ip, sp, pc}^
    3360:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    3364:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3368:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    336c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3370:	d84cbc06 	stmdale	ip, {r1, r2, sl, fp, ip, sp, pc}^
    3374:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    3378:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    337c:	d86867bb 	stmdale	r8!, {r0, r1, r3, r4, r5, r7, r8, r9, sl, sp, lr}^
    3380:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    3384:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3388:	d86867bb 	stmdale	r8!, {r0, r1, r3, r4, r5, r7, r8, r9, sl, sp, lr}^
    338c:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    3390:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3394:	d86867bb 	stmdale	r8!, {r0, r1, r3, r4, r5, r7, r8, r9, sl, sp, lr}^
    3398:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    339c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    33a0:	d86867bb 	stmdale	r8!, {r0, r1, r3, r4, r5, r7, r8, r9, sl, sp, lr}^
    33a4:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    33a8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    33ac:	d86867bb 	stmdale	r8!, {r0, r1, r3, r4, r5, r7, r8, r9, sl, sp, lr}^
    33b0:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    33b4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    33b8:	684e67bb 	stmdavs	lr, {r0, r1, r3, r4, r5, r7, r8, r9, sl, sp, lr}^
    33bc:	4c4b2308 	mcrrmi	3, 0, r2, fp, cr8
    33c0:	000602d7 	ldrdeq	r0, [r6], -r7
    33c4:	02a20101 	adceq	r0, r2, #1073741824	; 0x40000000
    33c8:	00020000 	andeq	r0, r2, r0
    33cc:	00000133 	andeq	r0, r0, r3, lsr r1
    33d0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    33d4:	0101000d 	tsteq	r1, sp
    33d8:	00000101 	andeq	r0, r0, r1, lsl #2
    33dc:	00000100 	andeq	r0, r0, r0, lsl #2
    33e0:	6f682f01 	svcvs	0x00682f01
    33e4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 3238 <_start-0x4dc8>
    33e8:	61736f6a 	cmnvs	r3, sl, ror #30
    33ec:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    33f0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    33f4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    33f8:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    33fc:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    3400:	72656270 	rsbvc	r6, r5, #112, 4
    3404:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3408:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    340c:	4f545265 	svcmi	0x00545265
    3410:	616d2d53 	cmnvs	sp, r3, asr sp
    3414:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    3418:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    341c:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    3420:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3424:	616c2f73 	smcvs	49907	; 0xc2f3
    3428:	3135396e 	teqcc	r5, lr, ror #18
    342c:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3430:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    3434:	2f656d6f 	svccs	0x00656d6f
    3438:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    343c:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    3440:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    3444:	6f746b73 	svcvs	0x00746b73
    3448:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    344c:	61522f69 	cmpvs	r2, r9, ror #30
    3450:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    3454:	50797272 	rsbspl	r7, r9, r2, ror r2
    3458:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    345c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    3460:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    3464:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    3468:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    346c:	442f6f6d 	strtmi	r6, [pc], #-3949	; 3474 <_start-0x4b8c>
    3470:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3474:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 32b4 <_start-0x4d4c>
    3478:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    347c:	692f3431 	stmdbvs	pc!, {r0, r4, r5, sl, ip, sp}	; <UNPREDICTABLE>
    3480:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3484:	752f6564 	strvc	r6, [pc, #-1380]!	; 2f28 <_start-0x50d8>
    3488:	00697073 	rsbeq	r7, r9, r3, ror r0
    348c:	62737500 	rsbsvs	r7, r3, #0, 10
    3490:	70646e65 	rsbvc	r6, r4, r5, ror #28
    3494:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    3498:	0100632e 	tsteq	r0, lr, lsr #6
    349c:	73750000 	cmnvc	r5, #0
    34a0:	00682e62 	rsbeq	r2, r8, r2, ror #28
    34a4:	74000002 	strvc	r0, [r0], #-2
    34a8:	73657079 	cmnvc	r5, #121	; 0x79
    34ac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    34b0:	73750000 	cmnvc	r5, #0
    34b4:	6e6f6362 	cdpvs	3, 6, cr6, cr15, cr2, {3}
    34b8:	70676966 	rsbvc	r6, r7, r6, ror #18
    34bc:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    34c0:	00682e72 	rsbeq	r2, r8, r2, ror lr
    34c4:	73000002 	movwvc	r0, #2
    34c8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    34cc:	00682e67 	rsbeq	r2, r8, r7, ror #28
    34d0:	75000002 	strvc	r0, [r0, #-2]
    34d4:	74736273 	ldrbtvc	r6, [r3], #-627	; 0xfffffd8d
    34d8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    34dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    34e0:	73750000 	cmnvc	r5, #0
    34e4:	76656462 	strbtvc	r6, [r5], -r2, ror #8
    34e8:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    34ec:	00020068 	andeq	r0, r2, r8, rrx
    34f0:	62737500 	rsbsvs	r7, r3, #0, 10
    34f4:	70646e65 	rsbvc	r6, r4, r5, ror #28
    34f8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    34fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3500:	00000000 	andeq	r0, r0, r0
    3504:	08600205 	stmdaeq	r0!, {r0, r2, r9}^
    3508:	17030002 	strne	r0, [r3, -r2]
    350c:	00590801 	subseq	r0, r9, r1, lsl #16
    3510:	06010402 	streq	r0, [r1], -r2, lsl #8
    3514:	67bb0666 	ldrvs	r0, [fp, r6, ror #12]!
    3518:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    351c:	02006867 	andeq	r6, r0, #6750208	; 0x670000
    3520:	82060104 	andhi	r0, r6, #4, 2
    3524:	4d590806 	ldclmi	8, cr0, [r9, #-24]	; 0xffffffe8
    3528:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
    352c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3530:	6867bb06 	stmdavs	r7!, {r1, r2, r8, r9, fp, ip, sp, pc}^
    3534:	01040200 	mrseq	r0, R12_usr
    3538:	bc068206 	sfmlt	f0, 1, [r6], {6}
    353c:	01040200 	mrseq	r0, R12_usr
    3540:	bb066606 	bllt	19cd60 <mailbuffer+0x161c70>
    3544:	01040200 	mrseq	r0, R12_usr
    3548:	bb068206 	bllt	1a3d68 <mailbuffer+0x168c78>
    354c:	01040200 	mrseq	r0, R12_usr
    3550:	bc068206 	sfmlt	f0, 1, [r6], {6}
    3554:	316767f5 	strdcc	r6, [r7, #-117]!	; 0xffffff8b
    3558:	d7316767 	ldrle	r6, [r1, -r7, ror #14]!
    355c:	bcf3bb31 	fldmiaxlt	r3!, {d27-d50}	;@ Deprecated
    3560:	4e686784 	cdpmi	7, 6, cr6, cr8, cr4, {4}
    3564:	4d6886d8 	stclmi	6, cr8, [r8, #-864]!	; 0xfffffca0
    3568:	088484a0 	stmeq	r4, {r5, r7, sl, pc}
    356c:	75084d40 	strvc	r4, [r8, #-3392]	; 0xfffff2c0
    3570:	01040200 	mrseq	r0, R12_usr
    3574:	bc066606 	stclt	6, cr6, [r6], {6}
    3578:	01040200 	mrseq	r0, R12_usr
    357c:	bc066606 	stclt	6, cr6, [r6], {6}
    3580:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    3584:	06820601 	streq	r0, [r2], r1, lsl #12
    3588:	838383bc 	orrhi	r8, r3, #188, 6	; 0xf0000002
    358c:	21088383 	smlabbcs	r8, r3, r3, r8
    3590:	003d084d 	eorseq	r0, sp, sp, asr #16
    3594:	06010402 	streq	r0, [r1], -r2, lsl #8
    3598:	f3bb0666 	vcvt.f32.s32	q0, q11
    359c:	003d084d 	eorseq	r0, sp, sp, asr #16
    35a0:	06010402 	streq	r0, [r1], -r2, lsl #8
    35a4:	00bb0666 	adcseq	r0, fp, r6, ror #12
    35a8:	06010402 	streq	r0, [r1], -r2, lsl #8
    35ac:	f3bb0682 	vcvt.f32.u32	d0, d2
    35b0:	003d0869 	eorseq	r0, sp, r9, ror #16
    35b4:	06010402 	streq	r0, [r1], -r2, lsl #8
    35b8:	f3bb0666 	vcvt.f32.s32	q0, q11
    35bc:	003d0869 	eorseq	r0, sp, r9, ror #16
    35c0:	06010402 	streq	r0, [r1], -r2, lsl #8
    35c4:	f3bb0666 	vcvt.f32.s32	q0, q11
    35c8:	003d0869 	eorseq	r0, sp, r9, ror #16
    35cc:	06010402 	streq	r0, [r1], -r2, lsl #8
    35d0:	f3bb0666 	vcvt.f32.s32	q0, q11
    35d4:	00590869 	subseq	r0, r9, r9, ror #16
    35d8:	06010402 	streq	r0, [r1], -r2, lsl #8
    35dc:	f3bb0666 	vcvt.f32.s32	q0, q11
    35e0:	003d084d 	eorseq	r0, sp, sp, asr #16
    35e4:	06010402 	streq	r0, [r1], -r2, lsl #8
    35e8:	f3bb0666 	vcvt.f32.s32	q0, q11
    35ec:	003d0869 	eorseq	r0, sp, r9, ror #16
    35f0:	06010402 	streq	r0, [r1], -r2, lsl #8
    35f4:	00bb0666 	adcseq	r0, fp, r6, ror #12
    35f8:	06010402 	streq	r0, [r1], -r2, lsl #8
    35fc:	f3bc0682 	vpadal.u<illegal width 64>	d0, d2
    3600:	00590869 	subseq	r0, r9, r9, ror #16
    3604:	06010402 	streq	r0, [r1], -r2, lsl #8
    3608:	68bb0666 	ldmvs	fp!, {r1, r2, r5, r6, r9, sl}
    360c:	01040200 	mrseq	r0, R12_usr
    3610:	bc068206 	sfmlt	f0, 1, [r6], {6}
    3614:	0869f34d 	stmdaeq	r9!, {r0, r2, r3, r6, r8, r9, ip, sp, lr, pc}^
    3618:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    361c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3620:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    3624:	00820601 	addeq	r0, r2, r1, lsl #12
    3628:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    362c:	03040200 	movweq	r0, #16896	; 0x4200
    3630:	68be0682 	ldmvs	lr!, {r1, r7, r9, sl}
    3634:	843167f5 	ldrthi	r6, [r1], #-2037	; 0xfffff80b
    3638:	68844d68 	stmvs	r4, {r3, r5, r6, r8, sl, fp, lr}
    363c:	02040200 	andeq	r0, r4, #0, 4
    3640:	31062e06 	tstcc	r6, r6, lsl #28
    3644:	02004fbb 	andeq	r4, r0, #748	; 0x2ec
    3648:	82060104 	andhi	r0, r6, #4, 2
    364c:	0200bc06 	andeq	fp, r0, #1536	; 0x600
    3650:	4df40304 	ldclmi	3, cr0, [r4, #16]!
    3654:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    3658:	66060104 	strvs	r0, [r6], -r4, lsl #2
    365c:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    3660:	82060104 	andhi	r0, r6, #4, 2
    3664:	02f3bc06 	rscseq	fp, r3, #1536	; 0x600
    3668:	01010004 	tsteq	r1, r4
    366c:	00000248 	andeq	r0, r0, r8, asr #4
    3670:	01420002 	cmpeq	r2, r2
    3674:	01020000 	mrseq	r0, (UNDEF: 2)
    3678:	000d0efb 	strdeq	r0, [sp], -fp
    367c:	01010101 	tsteq	r1, r1, lsl #2
    3680:	01000000 	mrseq	r0, (UNDEF: 0)
    3684:	2f010000 	svccs	0x00010000
    3688:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    368c:	6f6a6c2f 	svcvs	0x006a6c2f
    3690:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    3694:	442f7275 	strtmi	r7, [pc], #-629	; 369c <_start-0x4964>
    3698:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    369c:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    36a0:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    36a4:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    36a8:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    36ac:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    36b0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    36b4:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    36b8:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    36bc:	442f7265 	strtmi	r7, [pc], #-613	; 36c4 <_start-0x493c>
    36c0:	2f6f6d65 	svccs	0x006f6d65
    36c4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    36c8:	2f737265 	svccs	0x00737265
    36cc:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    36d0:	2f343135 	svccs	0x00343135
    36d4:	0062696c 	rsbeq	r6, r2, ip, ror #18
    36d8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3624 <_start-0x49dc>
    36dc:	6a6c2f65 	bvs	1b0f478 <mailbuffer+0x1ad4388>
    36e0:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    36e4:	2f727566 	svccs	0x00727566
    36e8:	6b736544 	blvs	1cdcc00 <mailbuffer+0x1ca1b10>
    36ec:	2f706f74 	svccs	0x00706f74
    36f0:	2f697072 	svccs	0x00697072
    36f4:	70736152 	rsbsvc	r6, r3, r2, asr r1
    36f8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    36fc:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    3700:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    3704:	534f5452 	movtpl	r5, #62546	; 0xf452
    3708:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    370c:	2f726574 	svccs	0x00726574
    3710:	6f6d6544 	svcvs	0x006d6544
    3714:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    3718:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    371c:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    3720:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    3724:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3728:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    372c:	7073752f 	rsbsvc	r7, r3, pc, lsr #10
    3730:	75000069 	strvc	r0, [r0, #-105]	; 0xffffff97
    3734:	65726273 	ldrbvs	r6, [r2, #-627]!	; 0xfffffd8d
    3738:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    373c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    3740:	75000001 	strvc	r0, [r0, #-1]
    3744:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
    3748:	00000200 	andeq	r0, r0, r0, lsl #4
    374c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3750:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3754:	75000002 	strvc	r0, [r0, #-2]
    3758:	6f636273 	svcvs	0x00636273
    375c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3760:	73726170 	cmnvc	r2, #112, 2
    3764:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    3768:	00000200 	andeq	r0, r0, r0, lsl #4
    376c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3770:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    3774:	00000200 	andeq	r0, r0, r0, lsl #4
    3778:	73627375 	cmnvc	r2, #-738197503	; 0xd4000001
    377c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    3780:	00682e67 	rsbeq	r2, r8, r7, ror #28
    3784:	75000002 	strvc	r0, [r0, #-2]
    3788:	65646273 	strbvs	r6, [r4, #-627]!	; 0xfffffd8d
    378c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3790:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3794:	73750000 	cmnvc	r5, #0
    3798:	646e6562 	strbtvs	r6, [lr], #-1378	; 0xfffffa9e
    379c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    37a0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    37a4:	75000002 	strvc	r0, [r0, #-2]
    37a8:	65726273 	ldrbvs	r6, [r2, #-627]!	; 0xfffffd8d
    37ac:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    37b0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    37b4:	00000002 	andeq	r0, r0, r2
    37b8:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
    37bc:	03000214 	movweq	r0, #532	; 0x214
    37c0:	91080117 	tstls	r8, r7, lsl r1
    37c4:	01040200 	mrseq	r0, R12_usr
    37c8:	bc066606 	stclt	6, cr6, [r6], {6}
    37cc:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    37d0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    37d4:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    37d8:	06820601 	streq	r0, [r2], r1, lsl #12
    37dc:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    37e0:	00820601 	addeq	r0, r2, r1, lsl #12
    37e4:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    37e8:	4d590806 	ldclmi	8, cr0, [r9, #-24]	; 0xffffffe8
    37ec:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    37f0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    37f4:	6767bb06 	strbvs	fp, [r7, -r6, lsl #22]!
    37f8:	084df367 	stmdaeq	sp, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr, pc}^
    37fc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    3800:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3804:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    3808:	06820601 	streq	r0, [r2], r1, lsl #12
    380c:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    3810:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    3814:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3818:	084df3bb 	stmdaeq	sp, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    381c:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    3820:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3824:	084df3bb 	stmdaeq	sp, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    3828:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    382c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3830:	0869f3bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    3834:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    3838:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    383c:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    3840:	06820601 	streq	r0, [r2], r1, lsl #12
    3844:	0869f3bc 	stmdaeq	r9!, {r2, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    3848:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    384c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3850:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    3854:	06d60601 	ldrbeq	r0, [r6], r1, lsl #12
    3858:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    385c:	06820601 	streq	r0, [r2], r1, lsl #12
    3860:	0869f3bc 	stmdaeq	r9!, {r2, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    3864:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    3868:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    386c:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    3870:	00820601 	addeq	r0, r2, r1, lsl #12
    3874:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    3878:	69f3bd06 	ldmibvs	r3!, {r1, r2, r8, sl, fp, ip, sp, pc}^
    387c:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    3880:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3884:	69f3bb06 	ldmibvs	r3!, {r1, r2, r8, r9, fp, ip, sp, pc}^
    3888:	02009108 	andeq	r9, r0, #8, 2
    388c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3890:	6767bb06 	strbvs	fp, [r7, -r6, lsl #22]!
    3894:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    3898:	06820601 	streq	r0, [r2], r1, lsl #12
    389c:	084d5908 	stmdaeq	sp, {r3, r8, fp, ip, lr}^
    38a0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    38a4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    38a8:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    38ac:	06820601 	streq	r0, [r2], r1, lsl #12
    38b0:	029108bc 	addseq	r0, r1, #188, 16	; 0xbc0000
    38b4:	01010004 	tsteq	r1, r4
    38b8:	000003f9 	strdeq	r0, [r0], -r9
    38bc:	01bb0002 			; <UNDEFINED> instruction: 0x01bb0002
    38c0:	01020000 	mrseq	r0, (UNDEF: 2)
    38c4:	000d0efb 	strdeq	r0, [sp], -fp
    38c8:	01010101 	tsteq	r1, r1, lsl #2
    38cc:	01000000 	mrseq	r0, (UNDEF: 0)
    38d0:	2f010000 	svccs	0x00010000
    38d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    38d8:	6f6a6c2f 	svcvs	0x006a6c2f
    38dc:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    38e0:	442f7275 	strtmi	r7, [pc], #-629	; 38e8 <_start-0x4718>
    38e4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    38e8:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    38ec:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    38f0:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    38f4:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    38f8:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    38fc:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    3900:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    3904:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    3908:	442f7265 	strtmi	r7, [pc], #-613	; 3910 <_start-0x46f0>
    390c:	2f6f6d65 	svccs	0x006f6d65
    3910:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3914:	2f737265 	svccs	0x00737265
    3918:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    391c:	2f343135 	svccs	0x00343135
    3920:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3924:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3870 <_start-0x4790>
    3928:	6a6c2f65 	bvs	1b0f6c4 <mailbuffer+0x1ad45d4>
    392c:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    3930:	2f727566 	svccs	0x00727566
    3934:	6b736544 	blvs	1cdce4c <mailbuffer+0x1ca1d5c>
    3938:	2f706f74 	svccs	0x00706f74
    393c:	2f697072 	svccs	0x00697072
    3940:	70736152 	rsbsvc	r6, r3, r2, asr r1
    3944:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    3948:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    394c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    3950:	534f5452 	movtpl	r5, #62546	; 0xf452
    3954:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    3958:	2f726574 	svccs	0x00726574
    395c:	6f6d6544 	svcvs	0x006d6544
    3960:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    3964:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    3968:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    396c:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    3970:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3974:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3978:	7073752f 	rsbsvc	r7, r3, pc, lsr #10
    397c:	75000069 	strvc	r0, [r0, #-105]	; 0xffffff97
    3980:	74736273 	ldrbtvc	r6, [r3], #-627	; 0xfffffd8d
    3984:	61646e61 	cmnvs	r4, r1, ror #28
    3988:	75686472 	strbvc	r6, [r8, #-1138]!	; 0xfffffb8e
    398c:	00632e62 	rsbeq	r2, r3, r2, ror #28
    3990:	75000001 	strvc	r0, [r0, #-1]
    3994:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
    3998:	00000200 	andeq	r0, r0, r0, lsl #4
    399c:	68627375 	stmdavs	r2!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    39a0:	682e6275 	stmdavs	lr!, {r0, r2, r4, r5, r6, r9, sp, lr}
    39a4:	00000200 	andeq	r0, r0, r0, lsl #4
    39a8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    39ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
    39b0:	75000002 	strvc	r0, [r0, #-2]
    39b4:	6f636273 	svcvs	0x00636273
    39b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    39bc:	73726170 	cmnvc	r2, #112, 2
    39c0:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    39c4:	00000200 	andeq	r0, r0, r0, lsl #4
    39c8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    39cc:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    39d0:	00000200 	andeq	r0, r0, r0, lsl #4
    39d4:	73627375 	cmnvc	r2, #-738197503	; 0xd4000001
    39d8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    39dc:	00682e67 	rsbeq	r2, r8, r7, ror #28
    39e0:	75000002 	strvc	r0, [r0, #-2]
    39e4:	65646273 	strbvs	r6, [r4, #-627]!	; 0xfffffd8d
    39e8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    39ec:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    39f0:	77640000 	strbvc	r0, [r4, -r0]!
    39f4:	64696368 	strbtvs	r6, [r9], #-872	; 0xfffffc98
    39f8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    39fc:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3a00:	75000002 	strvc	r0, [r0, #-2]
    3a04:	6e656273 	mcrvs	2, 3, r6, cr5, cr3, {3}
    3a08:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3a0c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3a10:	00000200 	andeq	r0, r0, r0, lsl #4
    3a14:	72627375 	rsbvc	r7, r2, #-738197503	; 0xd4000001
    3a18:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    3a1c:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    3a20:	00000200 	andeq	r0, r0, r0, lsl #4
    3a24:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    3a28:	6f6f7269 	svcvs	0x006f7269
    3a2c:	726f7074 	rsbvc	r7, pc, #116	; 0x74
    3a30:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3a34:	64000002 	strvs	r0, [r0], #-2
    3a38:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    3a3c:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    3a40:	68637365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    3a44:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    3a48:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    3a4c:	00000200 	andeq	r0, r0, r0, lsl #4
    3a50:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    3a54:	65667869 	strbvs	r7, [r6, #-2153]!	; 0xfffff797
    3a58:	61747372 	cmnvs	r4, r2, ror r3
    3a5c:	61646567 	cmnvs	r4, r7, ror #10
    3a60:	682e6174 	stmdavs	lr!, {r2, r4, r5, r6, r8, sp, lr}
    3a64:	00000200 	andeq	r0, r0, r0, lsl #4
    3a68:	73627375 	cmnvc	r2, #-738197503	; 0xd4000001
    3a6c:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    3a70:	68647261 	stmdavs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3a74:	682e6275 	stmdavs	lr!, {r0, r2, r4, r5, r6, r9, sp, lr}
    3a78:	00000200 	andeq	r0, r0, r0, lsl #4
    3a7c:	02050000 	andeq	r0, r5, #0
    3a80:	00021bf0 	strdeq	r1, [r2], -r0
    3a84:	08011e03 	stmdaeq	r1, {r0, r1, r9, sl, fp, ip}
    3a88:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    3a8c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3a90:	678483bc 			; <UNDEFINED> instruction: 0x678483bc
    3a94:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    3a98:	02006803 	andeq	r6, r0, #196608	; 0x30000
    3a9c:	009f0304 	addseq	r0, pc, r4, lsl #6
    3aa0:	9b030402 	blls	c4ab0 <mailbuffer+0x899c0>
    3aa4:	01040200 	mrseq	r0, R12_usr
    3aa8:	f7066606 			; <UNDEFINED> instruction: 0xf7066606
    3aac:	003d084d 	eorseq	r0, sp, sp, asr #16
    3ab0:	06010402 	streq	r0, [r1], -r2, lsl #8
    3ab4:	68bc0666 	ldmvs	ip!, {r1, r2, r5, r6, r9, sl}
    3ab8:	bca1bbbc 	vstmialt	r1!, {d11-<overflow reg d40>}
    3abc:	0200bbbb 	andeq	fp, r0, #191488	; 0x2ec00
    3ac0:	74030204 	strvc	r0, [r3], #-516	; 0xfffffdfc
    3ac4:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
    3ac8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3acc:	689e1003 	ldmvs	lr, {r0, r1, ip}
    3ad0:	f3698384 	vcgt.u32	d24, d25, d4
    3ad4:	003d084d 	eorseq	r0, sp, sp, asr #16
    3ad8:	06010402 	streq	r0, [r1], -r2, lsl #8
    3adc:	08bb0666 	ldmeq	fp!, {r1, r2, r5, r6, r9, sl}
    3ae0:	3d08693d 	stccc	9, cr6, [r8, #-244]	; 0xffffff0c
    3ae4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    3ae8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3aec:	020083bc 	andeq	r8, r0, #188, 6	; 0xf0000002
    3af0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3af4:	8383bc06 	orrhi	fp, r3, #1536	; 0x600
    3af8:	bd498583 	cfstr64lt	mvdx8, [r9, #-524]	; 0xfffffdf4
    3afc:	67842d4e 	strvs	r2, [r4, lr, asr #26]
    3b00:	304ea084 	subcc	sl, lr, r4, lsl #1
    3b04:	31848383 	orrcc	r8, r4, r3, lsl #7
    3b08:	2d4ea084 	stclcs	0, cr10, [lr, #-528]	; 0xfffffdf0
    3b0c:	a0bb6784 	adcsge	r6, fp, r4, lsl #15
    3b10:	65034da0 	strvs	r4, [r3, #-3488]	; 0xfffff260
    3b14:	f21e032e 	vcgt.s16	d0, d14, d30
    3b18:	bc4da068 	mcrrlt	0, 6, sl, sp, cr8
    3b1c:	00834dbc 			; <UNDEFINED> instruction: 0x00834dbc
    3b20:	06010402 	streq	r0, [r1], -r2, lsl #8
    3b24:	84bc0666 	ldrthi	r0, [ip], #1638	; 0x666
    3b28:	47314884 	ldrmi	r4, [r1, -r4, lsl #17]!
    3b2c:	4ebcb108 	asnmie	f3, #0.0
    3b30:	01040200 	mrseq	r0, R12_usr
    3b34:	bb068206 	bllt	1a4354 <mailbuffer+0x169264>
    3b38:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    3b3c:	06820601 	streq	r0, [r2], r1, lsl #12
    3b40:	084884bc 	stmdaeq	r8, {r2, r3, r4, r5, r7, sl, pc}^
    3b44:	6883bc96 	stmvs	r3, {r1, r2, r4, r7, sl, fp, ip, sp, pc}
    3b48:	f484bb51 	vst4.32	{d11[0],d13[0],d15[0],d17[0]}, [r4 :64], r1
    3b4c:	a04d6883 	subge	r6, sp, r3, lsl #17
    3b50:	69d74dbc 	ldmibvs	r7, {r2, r3, r4, r5, r7, r8, sl, fp, lr}^
    3b54:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    3b58:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3b5c:	0083bc06 	addeq	fp, r3, r6, lsl #24
    3b60:	06010402 	streq	r0, [r1], -r2, lsl #8
    3b64:	83bc0666 			; <UNDEFINED> instruction: 0x83bc0666
    3b68:	01040200 	mrseq	r0, R12_usr
    3b6c:	bc066606 	stclt	6, cr6, [r6], {6}
    3b70:	01040200 	mrseq	r0, R12_usr
    3b74:	bd068206 	sfmlt	f0, 1, [r6, #-24]	; 0xffffffe8
    3b78:	16260268 	strtne	r0, [r6], -r8, ror #4
    3b7c:	040200f4 	streq	r0, [r2], #-244	; 0xffffff0c
    3b80:	4a780302 	bmi	1e04790 <mailbuffer+0x1dc96a0>
    3b84:	01040200 	mrseq	r0, R12_usr
    3b88:	03066606 	movweq	r6, #26118	; 0x6606
    3b8c:	684d9e0e 	stmdavs	sp, {r1, r2, r3, r9, sl, fp, ip, pc}^
    3b90:	01040200 	mrseq	r0, R12_usr
    3b94:	bb06ba06 	bllt	1b23b4 <mailbuffer+0x1772c4>
    3b98:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
    3b9c:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
    3ba0:	088084bc 	stmeq	r0, {r2, r3, r4, r5, r7, sl, pc}
    3ba4:	0031f4b0 	ldrhteq	pc, [r1], -r0	; <UNPREDICTABLE>
    3ba8:	06010402 	streq	r0, [r1], -r2, lsl #8
    3bac:	bb062008 	bllt	18bbd4 <mailbuffer+0x150ae4>
    3bb0:	02312208 	eorseq	r2, r1, #8, 4	; 0x80000000
    3bb4:	31f41626 	mvnscc	r1, r6, lsr #12
    3bb8:	0880844c 	stmeq	r0, {r2, r3, r6, sl, pc}
    3bbc:	22084fb0 	andcs	r4, r8, #176, 30	; 0x2c0
    3bc0:	220832f4 	andcs	r3, r8, #244, 4	; 0x4000000f
    3bc4:	4df4e808 	ldclmi	8, cr14, [r4, #32]!
    3bc8:	6822084b 	stmdavs	r2!, {r0, r1, r3, r6, fp}
    3bcc:	4e6a2208 	cdpmi	2, 6, cr2, cr10, cr8, {0}
    3bd0:	01040200 	mrseq	r0, R12_usr
    3bd4:	bb06ba06 	bllt	1b23f4 <mailbuffer+0x177304>
    3bd8:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
    3bdc:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
    3be0:	142602bb 	strtne	r0, [r6], #-699	; 0xfffffd45
    3be4:	bbbb2208 	bllt	feecc40c <_estack+0xf6ebc40c>
    3be8:	00d731a0 	sbcseq	r3, r7, r0, lsr #3
    3bec:	06010402 	streq	r0, [r1], -r2, lsl #8
    3bf0:	08bc0666 	ldmeq	ip!, {r1, r2, r5, r6, r9, sl}
    3bf4:	02004b92 	andeq	r4, r0, #149504	; 0x24800
    3bf8:	a1030204 	tstge	r3, r4, lsl #4
    3bfc:	02004a7f 	andeq	r4, r0, #520192	; 0x7f000
    3c00:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3c04:	00e30306 	rsceq	r0, r3, r6, lsl #6
    3c08:	32bc689e 	adcscc	r6, ip, #10354688	; 0x9e0000
    3c0c:	bbbb68d7 	bllt	feeddf70 <_estack+0xf6ecdf70>
    3c10:	f4ae08a0 	vld1.32			; <UNDEFINED> instruction: 0xf4ae08a0
    3c14:	f4240831 	vld2.8	{d0-d1}, [r4 :256], r1
    3c18:	0200bbbb 	andeq	fp, r0, #191488	; 0x2ec00
    3c1c:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
    3c20:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
    3c24:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3c28:	839e2303 	orrshi	r2, lr, #201326592	; 0xc000000
    3c2c:	01040200 	mrseq	r0, R12_usr
    3c30:	bc066606 	stclt	6, cr6, [r6], {6}
    3c34:	4cbce808 	ldcmi	8, cr14, [ip], #32
    3c38:	0200bc4d 	andeq	fp, r0, #19712	; 0x4d00
    3c3c:	00680304 	rsbeq	r0, r8, r4, lsl #6
    3c40:	08030402 	stmdaeq	r3, {r1, sl}
    3c44:	040200e2 	streq	r0, [r2], #-226	; 0xffffff1e
    3c48:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3c4c:	4d4cbca5 	stclmi	12, cr11, [ip, #-660]	; 0xfffffd6c
    3c50:	684c4c4b 	stmdavs	ip, {r0, r1, r3, r6, sl, fp, lr}^
    3c54:	b0088084 	andlt	r8, r8, r4, lsl #1
    3c58:	08220831 	stmdaeq	r2!, {r0, r4, r5, fp}
    3c5c:	0200f4e8 	andeq	pc, r0, #232, 8	; 0xe8000000
    3c60:	6f030204 	svcvs	0x00030204
    3c64:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    3c68:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3c6c:	d79e1503 	ldrle	r1, [lr, r3, lsl #10]
    3c70:	003d0869 	eorseq	r0, sp, r9, ror #16
    3c74:	06010402 	streq	r0, [r1], -r2, lsl #8
    3c78:	83bc0666 			; <UNDEFINED> instruction: 0x83bc0666
    3c7c:	01040200 	mrseq	r0, R12_usr
    3c80:	bb066606 	bllt	19d4a0 <mailbuffer+0x1623b0>
    3c84:	00bb684c 	adcseq	r6, fp, ip, asr #16
    3c88:	06010402 	streq	r0, [r1], -r2, lsl #8
    3c8c:	d8bc0666 	ldmle	ip!, {r1, r2, r5, r6, r9, sl}
    3c90:	020085a0 	andeq	r8, r0, #160, 10	; 0x28000000
    3c94:	00bd0204 	adcseq	r0, sp, r4, lsl #4
    3c98:	4b020402 	blmi	84ca8 <mailbuffer+0x49bb8>
    3c9c:	02040200 	andeq	r0, r4, #0, 4
    3ca0:	004a7003 	subeq	r7, sl, r3
    3ca4:	06010402 	streq	r0, [r1], -r2, lsl #8
    3ca8:	13030666 	movwne	r0, #13926	; 0x3666
    3cac:	d785a066 	strle	sl, [r5, r6, rrx]
    3cb0:	01000602 	tsteq	r0, r2, lsl #12
    3cb4:	0001b001 	andeq	fp, r1, r1
    3cb8:	f7000200 			; <UNDEFINED> instruction: 0xf7000200
    3cbc:	02000000 	andeq	r0, r0, #0
    3cc0:	0d0efb01 	vstreq	d15, [lr, #-4]
    3cc4:	01010100 	mrseq	r0, (UNDEF: 17)
    3cc8:	00000001 	andeq	r0, r0, r1
    3ccc:	01000001 	tsteq	r0, r1
    3cd0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3c1c <_start-0x43e4>
    3cd4:	6a6c2f65 	bvs	1b0fa70 <mailbuffer+0x1ad4980>
    3cd8:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    3cdc:	2f727566 	svccs	0x00727566
    3ce0:	6b736544 	blvs	1cdd1f8 <mailbuffer+0x1ca2108>
    3ce4:	2f706f74 	svccs	0x00706f74
    3ce8:	2f697072 	svccs	0x00697072
    3cec:	70736152 	rsbsvc	r6, r3, r2, asr r1
    3cf0:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    3cf4:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    3cf8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    3cfc:	534f5452 	movtpl	r5, #62546	; 0xf452
    3d00:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    3d04:	2f726574 	svccs	0x00726574
    3d08:	6f6d6544 	svcvs	0x006d6544
    3d0c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    3d10:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    3d14:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    3d18:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    3d1c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3d20:	6f682f00 	svcvs	0x00682f00
    3d24:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 3b78 <_start-0x4488>
    3d28:	61736f6a 	cmnvs	r3, sl, ror #30
    3d2c:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    3d30:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3d34:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3d38:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    3d3c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    3d40:	72656270 	rsbvc	r6, r5, #112, 4
    3d44:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3d48:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    3d4c:	4f545265 	svcmi	0x00545265
    3d50:	616d2d53 	cmnvs	sp, r3, asr sp
    3d54:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    3d58:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    3d5c:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    3d60:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3d64:	616c2f73 	smcvs	49907	; 0xc2f3
    3d68:	3135396e 	teqcc	r5, lr, ror #18
    3d6c:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
    3d70:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3d74:	73752f65 	cmnvc	r5, #404	; 0x194
    3d78:	00006970 	andeq	r6, r0, r0, ror r9
    3d7c:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    3d80:	616e6563 	cmnvs	lr, r3, ror #10
    3d84:	6573656d 	ldrbvs	r6, [r3, #-1389]!	; 0xfffffa93
    3d88:	63697672 	cmnvs	r9, #119537664	; 0x7200000
    3d8c:	00632e65 	rsbeq	r2, r3, r5, ror #28
    3d90:	64000001 	strvs	r0, [r0], #-1
    3d94:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3d98:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
    3d9c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    3da0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3da4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3da8:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
    3dac:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3db0:	00020068 	andeq	r0, r2, r8, rrx
    3db4:	05000000 	streq	r0, [r0, #-0]
    3db8:	02309402 	eorseq	r9, r0, #33554432	; 0x2000000
    3dbc:	011b0300 	tsteq	fp, r0, lsl #6
    3dc0:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    3dc4:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3dc8:	0068bc06 	rsbeq	fp, r8, r6, lsl #24
    3dcc:	06010402 	streq	r0, [r1], -r2, lsl #8
    3dd0:	08bb069e 	ldmeq	fp!, {r1, r2, r3, r4, r7, r9, sl}
    3dd4:	3d084d21 	stccc	13, cr4, [r8, #-132]	; 0xffffff7c
    3dd8:	01040200 	mrseq	r0, R12_usr
    3ddc:	bc066606 	stclt	6, cr6, [r6], {6}
    3de0:	02008430 	andeq	r8, r0, #48, 8	; 0x30000000
    3de4:	9e060104 	adflss	f0, f6, f4
    3de8:	849fbb06 	ldrhi	fp, [pc], #2822	; 3df0 <_start-0x4210>
    3dec:	74038484 	strvc	r8, [r3], #-1156	; 0xfffffb7c
    3df0:	820f0366 	andhi	r0, pc, #-1744830463	; 0x98000001
    3df4:	084d2108 	stmdaeq	sp, {r3, r8, sp}^
    3df8:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    3dfc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3e00:	020083bc 	andeq	r8, r0, #188, 6	; 0xf0000002
    3e04:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3e08:	0200bc06 	andeq	fp, r0, #1536	; 0x600
    3e0c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3e10:	3d08bb06 	vstrcc	d11, [r8, #-24]	; 0xffffffe8
    3e14:	01040200 	mrseq	r0, R12_usr
    3e18:	bb068206 	bllt	1a4638 <mailbuffer+0x169548>
    3e1c:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
    3e20:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    3e24:	836868bb 	cmnhi	r8, #12255232	; 0xbb0000
    3e28:	75084df3 	strvc	r4, [r8, #-3571]	; 0xfffff20d
    3e2c:	01040200 	mrseq	r0, R12_usr
    3e30:	bb066606 	bllt	19d650 <mailbuffer+0x162560>
    3e34:	01040200 	mrseq	r0, R12_usr
    3e38:	bc066606 	stclt	6, cr6, [r6], {6}
    3e3c:	02003067 	andeq	r3, r0, #103	; 0x67
    3e40:	82060104 	andhi	r0, r6, #4, 2
    3e44:	a0f3bb06 	rscsge	fp, r3, r6, lsl #22
    3e48:	01040200 	mrseq	r0, R12_usr
    3e4c:	bb068206 	bllt	1a466c <mailbuffer+0x16957c>
    3e50:	66760369 	ldrbtvs	r0, [r6], -r9, ror #6
    3e54:	d7660d03 	strble	r0, [r6, -r3, lsl #26]!
    3e58:	0200f369 	andeq	pc, r0, #-1543503871	; 0xa4000001
    3e5c:	9e060104 	adflss	f0, f6, f4
    3e60:	2108bb06 	tstcs	r8, r6, lsl #22
    3e64:	01000402 	tsteq	r0, r2, lsl #8
    3e68:	0001e501 	andeq	lr, r1, r1, lsl #10
    3e6c:	f5000200 			; <UNDEFINED> instruction: 0xf5000200
    3e70:	02000000 	andeq	r0, r0, #0
    3e74:	0d0efb01 	vstreq	d15, [lr, #-4]
    3e78:	01010100 	mrseq	r0, (UNDEF: 17)
    3e7c:	00000001 	andeq	r0, r0, r1
    3e80:	01000001 	tsteq	r0, r1
    3e84:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3dd0 <_start-0x4230>
    3e88:	6a6c2f65 	bvs	1b0fc24 <mailbuffer+0x1ad4b34>
    3e8c:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    3e90:	2f727566 	svccs	0x00727566
    3e94:	6b736544 	blvs	1cdd3ac <mailbuffer+0x1ca22bc>
    3e98:	2f706f74 	svccs	0x00706f74
    3e9c:	2f697072 	svccs	0x00697072
    3ea0:	70736152 	rsbsvc	r6, r3, r2, asr r1
    3ea4:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    3ea8:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    3eac:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    3eb0:	534f5452 	movtpl	r5, #62546	; 0xf452
    3eb4:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    3eb8:	2f726574 	svccs	0x00726574
    3ebc:	6f6d6544 	svcvs	0x006d6544
    3ec0:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    3ec4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    3ec8:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    3ecc:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    3ed0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3ed4:	6f682f00 	svcvs	0x00682f00
    3ed8:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 3d2c <_start-0x42d4>
    3edc:	61736f6a 	cmnvs	r3, sl, ror #30
    3ee0:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    3ee4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3ee8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3eec:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    3ef0:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    3ef4:	72656270 	rsbvc	r6, r5, #112, 4
    3ef8:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3efc:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    3f00:	4f545265 	svcmi	0x00545265
    3f04:	616d2d53 	cmnvs	sp, r3, asr sp
    3f08:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    3f0c:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    3f10:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    3f14:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3f18:	616c2f73 	smcvs	49907	; 0xc2f3
    3f1c:	3135396e 	teqcc	r5, lr, ror #18
    3f20:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
    3f24:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3f28:	73752f65 	cmnvc	r5, #404	; 0x194
    3f2c:	00006970 	andeq	r6, r0, r0, ror r9
    3f30:	6163616d 	cmnvs	r3, sp, ror #2
    3f34:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    3f38:	632e7373 	teqvs	lr, #-872415231	; 0xcc000001
    3f3c:	00000100 	andeq	r0, r0, r0, lsl #2
    3f40:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3f44:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    3f48:	00000200 	andeq	r0, r0, r0, lsl #4
    3f4c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3f50:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3f54:	6d000002 	stcvs	0, cr0, [r0, #-8]
    3f58:	64616361 	strbtvs	r6, [r1], #-865	; 0xfffffc9f
    3f5c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    3f60:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3f64:	00000002 	andeq	r0, r0, r2
    3f68:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
    3f6c:	03000235 	movweq	r0, #565	; 0x235
    3f70:	3d080118 	stfccs	f0, [r8, #-96]	; 0xffffffa0
    3f74:	01040200 	mrseq	r0, R12_usr
    3f78:	bc066606 	stclt	6, cr6, [r6], {6}
    3f7c:	59084df3 	stmdbpl	r8, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    3f80:	01040200 	mrseq	r0, R12_usr
    3f84:	bc066606 	stclt	6, cr6, [r6], {6}
    3f88:	3d084df3 	stccc	13, cr4, [r8, #-972]	; 0xfffffc34
    3f8c:	01040200 	mrseq	r0, R12_usr
    3f90:	bc066606 	stclt	6, cr6, [r6], {6}
    3f94:	59084df3 	stmdbpl	r8, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    3f98:	01040200 	mrseq	r0, R12_usr
    3f9c:	bb066606 	bllt	19d7bc <mailbuffer+0x1626cc>
    3fa0:	01040200 	mrseq	r0, R12_usr
    3fa4:	bc068206 	sfmlt	f0, 1, [r6], {6}
    3fa8:	69132a02 	ldmdbvs	r3, {r1, r9, fp, sp}
    3fac:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    3fb0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3fb4:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    3fb8:	66060104 	strvs	r0, [r6], -r4, lsl #2
    3fbc:	f3bbbc06 	vdup.8	d11, d6[5]
    3fc0:	003d084d 	eorseq	r0, sp, sp, asr #16
    3fc4:	06010402 	streq	r0, [r1], -r2, lsl #8
    3fc8:	bbbc0666 	bllt	fef05968 <_estack+0xf6ef5968>
    3fcc:	3d084df3 	stccc	13, cr4, [r8, #-972]	; 0xfffffc34
    3fd0:	01040200 	mrseq	r0, R12_usr
    3fd4:	bb066606 	bllt	19d7f4 <mailbuffer+0x162704>
    3fd8:	01040200 	mrseq	r0, R12_usr
    3fdc:	bc068206 	sfmlt	f0, 1, [r6], {6}
    3fe0:	590869f3 	stmdbpl	r8, {r0, r1, r4, r5, r6, r7, r8, fp, sp, lr}
    3fe4:	01040200 	mrseq	r0, R12_usr
    3fe8:	bb066606 	bllt	19d808 <mailbuffer+0x162718>
    3fec:	01040200 	mrseq	r0, R12_usr
    3ff0:	bb068206 	bllt	1a4810 <mailbuffer+0x169720>
    3ff4:	01040200 	mrseq	r0, R12_usr
    3ff8:	bc066606 	stclt	6, cr6, [r6], {6}
    3ffc:	084d5908 	stmdaeq	sp, {r3, r8, fp, ip, lr}^
    4000:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    4004:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4008:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    400c:	06820601 	streq	r0, [r2], r1, lsl #12
    4010:	00bc68bc 	ldrhteq	r6, [ip], ip
    4014:	46020402 	strmi	r0, [r2], -r2, lsl #8
    4018:	01040200 	mrseq	r0, R12_usr
    401c:	6e066606 	cfmadd32vs	mvax0, mvfx6, mvfx6, mvfx6
    4020:	3d0869d7 	stccc	9, cr6, [r8, #-860]	; 0xfffffca4
    4024:	590869d7 	stmdbpl	r8, {r0, r1, r2, r4, r6, r7, r8, fp, sp, lr}
    4028:	01040200 	mrseq	r0, R12_usr
    402c:	bb066606 	bllt	19d84c <mailbuffer+0x16275c>
    4030:	01040200 	mrseq	r0, R12_usr
    4034:	bc068206 	sfmlt	f0, 1, [r6], {6}
    4038:	01040200 	mrseq	r0, R12_usr
    403c:	bc066606 	stclt	6, cr6, [r6], {6}
    4040:	30492f49 	subcc	r2, r9, r9, asr #30
    4044:	31483048 	cmpcc	r8, r8, asr #32
    4048:	08473147 	stmdaeq	r7, {r0, r1, r2, r6, r8, ip, sp}^
    404c:	000402cc 	andeq	r0, r4, ip, asr #5
    4050:	033b0101 	teqeq	fp, #1073741824	; 0x40000000
    4054:	00020000 	andeq	r0, r2, r0
    4058:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    405c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4060:	0101000d 	tsteq	r1, sp
    4064:	00000101 	andeq	r0, r0, r1, lsl #2
    4068:	00000100 	andeq	r0, r0, r0, lsl #2
    406c:	6f682f01 	svcvs	0x00682f01
    4070:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 3ec4 <_start-0x413c>
    4074:	61736f6a 	cmnvs	r3, sl, ror #30
    4078:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    407c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4080:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4084:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    4088:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    408c:	72656270 	rsbvc	r6, r5, #112, 4
    4090:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4094:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    4098:	4f545265 	svcmi	0x00545265
    409c:	616d2d53 	cmnvs	sp, r3, asr sp
    40a0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    40a4:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    40a8:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    40ac:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    40b0:	616c2f73 	smcvs	49907	; 0xc2f3
    40b4:	3135396e 	teqcc	r5, lr, ror #18
    40b8:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    40bc:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    40c0:	2f656d6f 	svccs	0x00656d6f
    40c4:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    40c8:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    40cc:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    40d0:	6f746b73 	svcvs	0x00746b73
    40d4:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    40d8:	61522f69 	cmpvs	r2, r9, ror #30
    40dc:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    40e0:	50797272 	rsbspl	r7, r9, r2, ror r2
    40e4:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    40e8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    40ec:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    40f0:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    40f4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    40f8:	442f6f6d 	strtmi	r6, [pc], #-3949	; 4100 <_start-0x3f00>
    40fc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4100:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 3f40 <_start-0x40c0>
    4104:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    4108:	692f3431 	stmdbvs	pc!, {r0, r4, r5, sl, ip, sp}	; <UNPREDICTABLE>
    410c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4110:	752f6564 	strvc	r6, [pc, #-1380]!	; 3bb4 <_start-0x444c>
    4114:	00697073 	rsbeq	r7, r9, r3, ror r0
    4118:	736d7300 	cmnvc	sp, #0, 6
    411c:	31353963 	teqcc	r5, r3, ror #18
    4120:	00632e78 	rsbeq	r2, r3, r8, ror lr
    4124:	75000001 	strvc	r0, [r0, #-1]
    4128:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
    412c:	00000200 	andeq	r0, r0, r0, lsl #4
    4130:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4134:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4138:	75000002 	strvc	r0, [r0, #-2]
    413c:	6f636273 	svcvs	0x00636273
    4140:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4144:	73726170 	cmnvc	r2, #112, 2
    4148:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    414c:	00000200 	andeq	r0, r0, r0, lsl #4
    4150:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4154:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    4158:	00000200 	andeq	r0, r0, r0, lsl #4
    415c:	73627375 	cmnvc	r2, #-738197503	; 0xd4000001
    4160:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    4164:	00682e67 	rsbeq	r2, r8, r7, ror #28
    4168:	75000002 	strvc	r0, [r0, #-2]
    416c:	65646273 	strbvs	r6, [r4, #-627]!	; 0xfffffd8d
    4170:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4174:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4178:	77640000 	strbvc	r0, [r4, -r0]!
    417c:	64696368 	strbtvs	r6, [r9], #-872	; 0xfffffc98
    4180:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4184:	00682e65 	rsbeq	r2, r8, r5, ror #28
    4188:	75000002 	strvc	r0, [r0, #-2]
    418c:	6e656273 	mcrvs	2, 3, r6, cr5, cr3, {3}
    4190:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    4194:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4198:	00000200 	andeq	r0, r0, r0, lsl #4
    419c:	72627375 	rsbvc	r7, r2, #-738197503	; 0xd4000001
    41a0:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    41a4:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    41a8:	00000200 	andeq	r0, r0, r0, lsl #4
    41ac:	6163616d 	cmnvs	r3, sp, ror #2
    41b0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    41b4:	682e7373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
    41b8:	00000200 	andeq	r0, r0, r0, lsl #4
    41bc:	63736d73 	cmnvs	r3, #7360	; 0x1cc0
    41c0:	78313539 	ldmdavc	r1!, {r0, r3, r4, r5, r8, sl, ip, sp}
    41c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    41c8:	77640000 	strbvc	r0, [r4, -r0]!
    41cc:	72696368 	rsbvc	r6, r9, #104, 6	; 0xa0000001
    41d0:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
    41d4:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
    41d8:	00020068 	andeq	r0, r2, r8, rrx
    41dc:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    41e0:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
    41e4:	73656d61 	cmnvc	r5, #6208	; 0x1840
    41e8:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    41ec:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    41f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    41f4:	77640000 	strbvc	r0, [r4, -r0]!
    41f8:	78696368 	stmdavc	r9!, {r3, r5, r6, r8, r9, sp, lr}^
    41fc:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    4200:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    4204:	61746164 	cmnvs	r4, r4, ror #2
    4208:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    420c:	00000000 	andeq	r0, r0, r0
    4210:	3cf00205 	lfmcc	f0, 2, [r0], #20
    4214:	86030002 	strhi	r0, [r3], -r2
    4218:	59080101 	stmdbpl	r8, {r0, r8}
    421c:	01040200 	mrseq	r0, R12_usr
    4220:	bc066606 	stclt	6, cr6, [r6], {6}
    4224:	67678483 	strbvs	r8, [r7, -r3, lsl #9]!
    4228:	0200bb68 	andeq	fp, r0, #104, 22	; 0x1a000
    422c:	82060104 	andhi	r0, r6, #4, 2
    4230:	4d590806 	ldclmi	8, cr0, [r9, #-24]	; 0xffffffe8
    4234:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    4238:	66060104 	strvs	r0, [r6], -r4, lsl #2
    423c:	8384bc06 	orrhi	fp, r4, #1536	; 0x600
    4240:	83838469 	orrhi	r8, r3, #1761607680	; 0x69000000
    4244:	83838469 	orrhi	r8, r3, #1761607680	; 0x69000000
    4248:	084df369 	stmdaeq	sp, {r0, r3, r5, r6, r8, r9, ip, sp, lr, pc}^
    424c:	02004b3d 	andeq	r4, r0, #62464	; 0xf400
    4250:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4254:	03bcbd06 			; <UNDEFINED> instruction: 0x03bcbd06
    4258:	bb67ba09 	bllt	19f2a84 <mailbuffer+0x19b7994>
    425c:	842d3f08 	strthi	r3, [sp], #-3848	; 0xfffff0f8
    4260:	bc827503 	cfstr32lt	mvfx7, [r2], {3}
    4264:	844a0a03 	strbhi	r0, [sl], #-2563	; 0xfffff5fd
    4268:	2d4e68a0 	stclcs	8, cr6, [lr, #-640]	; 0xfffffd80
    426c:	83836784 	orrhi	r6, r3, #132, 14	; 0x2100000
    4270:	4e68a084 	cdpmi	0, 6, cr10, cr8, cr4, {4}
    4274:	84bca030 	ldrthi	sl, [ip], #48	; 0x30
    4278:	bb4d68a0 	bllt	135e500 <mailbuffer+0x1323410>
    427c:	01040200 	mrseq	r0, R12_usr
    4280:	bb068206 	bllt	1a4aa0 <mailbuffer+0x1699b0>
    4284:	68a084f6 	stmiavs	r0!, {r1, r2, r4, r5, r6, r7, sl, pc}
    4288:	0200bb4d 	andeq	fp, r0, #78848	; 0x13400
    428c:	82060104 	andhi	r0, r6, #4, 2
    4290:	6003bb06 	andvs	fp, r3, r6, lsl #22
    4294:	f22503d6 	vcge.s32	q0, <illegal reg q10.5>, q3
    4298:	68a08483 	stmiavs	r0!, {r0, r1, r7, sl, pc}
    429c:	68bcbc4d 	ldmvs	ip!, {r0, r2, r3, r6, sl, fp, ip, sp, pc}
    42a0:	6783bb4e 	strvs	fp, [r3, lr, asr #22]
    42a4:	68bcd8f3 	ldmvs	ip!, {r0, r1, r4, r5, r6, r7, fp, ip, lr, pc}
    42a8:	d8f6f54d 	ldmle	r6!, {r0, r2, r3, r6, r8, sl, ip, sp, lr, pc}^
    42ac:	675068bc 			; <UNDEFINED> instruction: 0x675068bc
    42b0:	5a087508 	bpl	2216d8 <mailbuffer+0x1e65e8>
    42b4:	69d76867 	ldmibvs	r7, {r0, r1, r2, r5, r6, fp, sp, lr}^
    42b8:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    42bc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    42c0:	69f3bc06 	ldmibvs	r3!, {r1, r2, sl, fp, ip, sp, pc}^
    42c4:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
    42c8:	66060104 	strvs	r0, [r6], -r4, lsl #2
    42cc:	4d84bc06 	stcmi	12, cr11, [r4, #24]
    42d0:	01040200 	mrseq	r0, R12_usr
    42d4:	bb068206 	bllt	1a4af4 <mailbuffer+0x169a04>
    42d8:	01040200 	mrseq	r0, R12_usr
    42dc:	bb066606 	bllt	19dafc <mailbuffer+0x162a0c>
    42e0:	00a09fd8 	ldrdeq	r9, [r0], r8	; <UNPREDICTABLE>
    42e4:	06010402 	streq	r0, [r1], -r2, lsl #8
    42e8:	02bb0682 	adcseq	r0, fp, #136314880	; 0x8200000
    42ec:	0869132a 	stmdaeq	r9!, {r1, r3, r5, r8, r9, ip}^
    42f0:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    42f4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    42f8:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    42fc:	06820601 	streq	r0, [r2], r1, lsl #12
    4300:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    4304:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4308:	083e08bc 	ldmdaeq	lr!, {r2, r3, r4, r5, r7, fp}
    430c:	834d685a 	movthi	r6, #55386	; 0xd85a
    4310:	674d6868 	strbvs	r6, [sp, -r8, ror #16]
    4314:	4d68d8bc 	stclmi	8, cr13, [r8, #-752]!	; 0xfffffd10
    4318:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    431c:	069e0601 	ldreq	r0, [lr], r1, lsl #12
    4320:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    4324:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4328:	4c6868bb 	stclmi	8, cr6, [r8], #-748	; 0xfffffd14
    432c:	0200bc6a 	andeq	fp, r0, #27136	; 0x6a00
    4330:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4334:	6868bb06 	stmdavs	r8!, {r1, r2, r8, r9, fp, ip, sp, pc}^
    4338:	750869d7 	strvc	r6, [r8, #-2519]	; 0xfffff629
    433c:	01040200 	mrseq	r0, R12_usr
    4340:	bc066606 	stclt	6, cr6, [r6], {6}
    4344:	af088183 	svcge	0x00088183
    4348:	0869da63 	stmdaeq	r9!, {r0, r1, r5, r6, r9, fp, ip, lr, pc}^
    434c:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    4350:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4354:	088183bc 	stmeq	r1, {r2, r3, r4, r5, r7, r8, r9, pc}
    4358:	6bda7faf 	blvs	ff6a421c <_estack+0xf769421c>
    435c:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
    4360:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4364:	08f4bd06 	ldmeq	r4!, {r1, r2, r8, sl, fp, ip, sp, pc}^
    4368:	13220225 	teqne	r2, #1342177282	; 0x50000002
    436c:	003d084d 	eorseq	r0, sp, sp, asr #16
    4370:	06010402 	streq	r0, [r1], -r2, lsl #8
    4374:	9fbc0666 	svcls	0x00bc0666
    4378:	9f9f9f9f 	svcls	0x009f9f9f
    437c:	9f9f9f9f 	svcls	0x009f9f9f
    4380:	9f9f9f9f 	svcls	0x009f9f9f
    4384:	9f9f9f9f 	svcls	0x009f9f9f
    4388:	3d089f9f 	stccc	15, cr9, [r8, #-636]	; 0xfffffd84
    438c:	01000402 	tsteq	r0, r2, lsl #8
    4390:	00030601 	andeq	r0, r3, r1, lsl #12
    4394:	fb000200 	blx	4b9e <_start-0x3462>
    4398:	02000000 	andeq	r0, r0, #0
    439c:	0d0efb01 	vstreq	d15, [lr, #-4]
    43a0:	01010100 	mrseq	r0, (UNDEF: 17)
    43a4:	00000001 	andeq	r0, r0, r1
    43a8:	01000001 	tsteq	r0, r1
    43ac:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 42f8 <_start-0x3d08>
    43b0:	6a6c2f65 	bvs	1b1014c <mailbuffer+0x1ad505c>
    43b4:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    43b8:	2f727566 	svccs	0x00727566
    43bc:	6b736544 	blvs	1cdd8d4 <mailbuffer+0x1ca27e4>
    43c0:	2f706f74 	svccs	0x00706f74
    43c4:	2f697072 	svccs	0x00697072
    43c8:	70736152 	rsbsvc	r6, r3, r2, asr r1
    43cc:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    43d0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    43d4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    43d8:	534f5452 	movtpl	r5, #62546	; 0xf452
    43dc:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    43e0:	2f726574 	svccs	0x00726574
    43e4:	6f6d6544 	svcvs	0x006d6544
    43e8:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    43ec:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    43f0:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    43f4:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    43f8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    43fc:	6f682f00 	svcvs	0x00682f00
    4400:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4254 <_start-0x3dac>
    4404:	61736f6a 	cmnvs	r3, sl, ror #30
    4408:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    440c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4410:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4414:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    4418:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    441c:	72656270 	rsbvc	r6, r5, #112, 4
    4420:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4424:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    4428:	4f545265 	svcmi	0x00545265
    442c:	616d2d53 	cmnvs	sp, r3, asr sp
    4430:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    4434:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    4438:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    443c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4440:	616c2f73 	smcvs	49907	; 0xc2f3
    4444:	3135396e 	teqcc	r5, lr, ror #18
    4448:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
    444c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4450:	73752f65 	cmnvc	r5, #404	; 0x194
    4454:	00006970 	andeq	r6, r0, r0, ror r9
    4458:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    445c:	632e676e 	teqvs	lr, #28835840	; 0x1b80000
    4460:	00000100 	andeq	r0, r0, r0, lsl #2
    4464:	61647473 	smcvs	18243	; 0x4743
    4468:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    446c:	00000200 	andeq	r0, r0, r0, lsl #4
    4470:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4474:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4478:	3c000002 	stccc	0, cr0, [r0], {2}
    447c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4480:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    4484:	0000003e 	andeq	r0, r0, lr, lsr r0
    4488:	72747300 	rsbsvc	r7, r4, #0, 6
    448c:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    4490:	00020068 	andeq	r0, r2, r8, rrx
    4494:	05000000 	streq	r0, [r0, #-0]
    4498:	024dc802 	subeq	ip, sp, #131072	; 0x20000
    449c:	01210300 	teqeq	r1, r0, lsl #6
    44a0:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    44a4:	66060104 	strvs	r0, [r6], -r4, lsl #2
    44a8:	f367bb06 	vqrdmulh.s32	d27, d7, d6
    44ac:	0059084d 	subseq	r0, r9, sp, asr #16
    44b0:	06010402 	streq	r0, [r1], -r2, lsl #8
    44b4:	bcbc0666 	ldclt	6, cr0, [ip], #408	; 0x198
    44b8:	4d3d08f4 	ldcmi	8, cr0, [sp, #-976]!	; 0xfffffc30
    44bc:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    44c0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    44c4:	8384bc06 	orrhi	fp, r4, #1536	; 0x600
    44c8:	3d084df4 	stccc	13, cr4, [r8, #-976]	; 0xfffffc30
    44cc:	01040200 	mrseq	r0, R12_usr
    44d0:	bc066606 	stclt	6, cr6, [r6], {6}
    44d4:	69f36984 	ldmibvs	r3!, {r2, r7, r8, fp, sp, lr}^
    44d8:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    44dc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    44e0:	8584bc06 	strhi	fp, [r4, #3078]	; 0xc06
    44e4:	f3a0f4bc 	vsri.64	d15, d28, #32
    44e8:	003d0869 	eorseq	r0, sp, r9, ror #16
    44ec:	06010402 	streq	r0, [r1], -r2, lsl #8
    44f0:	84bc0666 	ldrthi	r0, [ip], #1638	; 0x666
    44f4:	6959084d 	ldmdbvs	r9, {r0, r2, r3, r6, fp}^
    44f8:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    44fc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4500:	8467bc06 	strbthi	fp, [r7], #-3078	; 0xfffff3fa
    4504:	bcf43e08 	ldcllt	14, cr3, [r4], #32
    4508:	69a29f84 	stmibvs	r2!, {r2, r7, r8, r9, sl, fp, ip, pc}
    450c:	084df368 	stmdaeq	sp, {r3, r5, r6, r8, r9, ip, sp, lr, pc}^
    4510:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    4514:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4518:	697508bc 	ldmdbvs	r5!, {r2, r3, r4, r5, r7, fp}^
    451c:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
    4520:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4524:	844dbc06 	strbhi	fp, [sp], #-3078	; 0xfffff3fa
    4528:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    452c:	02004d02 	andeq	r4, r0, #2, 26	; 0x80
    4530:	79030204 	stmdbvc	r3, {r2, r9}
    4534:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    4538:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    453c:	d7820a03 	strle	r0, [r2, r3, lsl #20]
    4540:	00590869 	subseq	r0, r9, r9, ror #16
    4544:	06010402 	streq	r0, [r1], -r2, lsl #8
    4548:	4cbd0666 	ldcmi	6, cr0, [sp], #408	; 0x198
    454c:	08852308 	stmeq	r5, {r3, r8, r9, sp}
    4550:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    4554:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4558:	678584bc 			; <UNDEFINED> instruction: 0x678584bc
    455c:	a03084f3 	ldrshtge	r8, [r0], -r3
    4560:	4b8784f4 	blmi	fe1e5938 <_estack+0xf61d5938>
    4564:	4b694ca0 	blmi	1a577ec <mailbuffer+0x1a1c6fc>
    4568:	4b694ca0 	blmi	1a577f0 <mailbuffer+0x1a1c700>
    456c:	62220830 	eorvs	r0, r2, #48, 16	; 0x300000
    4570:	01040200 	mrseq	r0, R12_usr
    4574:	a5069e06 	strge	r9, [r6, #-3590]	; 0xfffff1fa
    4578:	034ca04b 	movteq	sl, #49227	; 0xc04b
    457c:	024d6609 	subeq	r6, sp, #9437184	; 0x900000
    4580:	689f1550 	ldmvs	pc, {r4, r6, r8, sl, ip}	; <UNPREDICTABLE>
    4584:	0b03689f 	bleq	de808 <mailbuffer+0xa3718>
    4588:	2e7a03ba 	mrccs	3, 3, r0, cr10, cr10, {5}
    458c:	00a0bc68 	adceq	fp, r0, r8, ror #24
    4590:	06010402 	streq	r0, [r1], -r2, lsl #8
    4594:	6831062e 	ldmdavs	r1!, {r1, r2, r3, r5, r9, sl}
    4598:	4b68a0be 	blmi	1a2c898 <mailbuffer+0x19f17a8>
    459c:	0200d768 	andeq	sp, r0, #104, 14	; 0x1a00000
    45a0:	d6060104 	strle	r0, [r6], -r4, lsl #2
    45a4:	02040200 	andeq	r0, r4, #0, 4
    45a8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    45ac:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
    45b0:	4b060404 	blmi	1855c8 <mailbuffer+0x14a4d8>
    45b4:	83846868 	orrhi	r6, r4, #104, 16	; 0x680000
    45b8:	d60f0384 	strle	r0, [pc], -r4, lsl #7
    45bc:	842e7603 	strthi	r7, [lr], #-1539	; 0xfffff9fd
    45c0:	848468d8 	strhi	r6, [r4], #2264	; 0x8d8
    45c4:	03040200 	movweq	r0, #16896	; 0x4200
    45c8:	31062e06 	tstcc	r6, r6, lsl #28
    45cc:	679f314b 	ldrvs	r3, [pc, fp, asr #2]
    45d0:	03846768 	orreq	r6, r4, #104, 14	; 0x1a00000
    45d4:	7a03d60b 	bvc	f9e08 <mailbuffer+0xbed18>
    45d8:	68d8842e 	ldmvs	r8, {r1, r2, r3, r5, sl, pc}^
    45dc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    45e0:	31062e06 	tstcc	r6, r6, lsl #28
    45e4:	314b324b 	cmpcc	fp, fp, asr #4
    45e8:	08a0be68 	stmiaeq	r0!, {r3, r5, r6, r9, sl, fp, ip, sp, pc}
    45ec:	836883ad 	cmnhi	r8, #-1275068414	; 0xb4000002
    45f0:	d60b0384 	strle	r0, [fp], -r4, lsl #7
    45f4:	842e7a03 	strthi	r7, [lr], #-2563	; 0xfffff5fd
    45f8:	01040200 	mrseq	r0, R12_usr
    45fc:	02006606 	andeq	r6, r0, #6291456	; 0x600000
    4600:	004a0204 	subeq	r0, sl, r4, lsl #4
    4604:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
    4608:	0084f406 	addeq	pc, r4, r6, lsl #8
    460c:	06070402 	streq	r0, [r7], -r2, lsl #8
    4610:	8331062e 	teqhi	r1, #48234496	; 0x2e00000
    4614:	03d94fd7 	bicseq	r4, r9, #860	; 0x35c
    4618:	03667ec0 	cmneq	r6, #192, 28	; 0xc00
    461c:	088201c3 	stmeq	r2, {r0, r1, r6, r7, r8}
    4620:	91084d21 	tstls	r8, r1, lsr #26
    4624:	01040200 	mrseq	r0, R12_usr
    4628:	bc066606 	stclt	6, cr6, [r6], {6}
    462c:	08d43068 	ldmeq	r4, {r3, r5, r6, ip, sp}^
    4630:	59084d40 	stmdbpl	r8, {r6, r8, sl, fp, lr}
    4634:	01040200 	mrseq	r0, R12_usr
    4638:	bc066606 	stclt	6, cr6, [r6], {6}
    463c:	08a06868 	stmiaeq	r0!, {r3, r5, r6, fp, sp, lr}
    4640:	59084d59 	stmdbpl	r8, {r0, r3, r4, r6, r8, sl, fp, lr}
    4644:	01040200 	mrseq	r0, R12_usr
    4648:	bc066606 	stclt	6, cr6, [r6], {6}
    464c:	9fd73184 	svcls	0x00d73184
    4650:	846731bc 	strbthi	r3, [r7], #-444	; 0xfffffe44
    4654:	6784a083 	strvs	sl, [r4, r3, lsl #1]
    4658:	4d910868 	ldcmi	8, cr0, [r1, #416]	; 0x1a0
    465c:	9f4d9308 	svcls	0x004d9308
    4660:	83633484 	cmnhi	r3, #132, 8	; 0x84000000
    4664:	0200bc33 	andeq	fp, r0, #13056	; 0x3300
    4668:	ba060104 	blt	184a80 <mailbuffer+0x149990>
    466c:	02040200 	andeq	r0, r4, #0, 4
    4670:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    4674:	02006604 	andeq	r6, r0, #4, 12	; 0x400000
    4678:	004a0504 	subeq	r0, sl, r4, lsl #10
    467c:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
    4680:	08040200 	stmdaeq	r4, {r9}
    4684:	040200d6 	streq	r0, [r2], #-214	; 0xffffff2a
    4688:	00300608 	eorseq	r0, r0, r8, lsl #12
    468c:	9f080402 	svcls	0x00080402
    4690:	309f3168 	addscc	r3, pc, r8, ror #2
    4694:	0602d768 	streq	sp, [r2], -r8, ror #14
    4698:	63010100 	movwvs	r0, #4352	; 0x1100
    469c:	02000001 	andeq	r0, r0, #1
    46a0:	0000d300 	andeq	sp, r0, r0, lsl #6
    46a4:	fb010200 	blx	44eae <mailbuffer+0x9dbe>
    46a8:	01000d0e 	tsteq	r0, lr, lsl #26
    46ac:	00010101 	andeq	r0, r1, r1, lsl #2
    46b0:	00010000 	andeq	r0, r1, r0
    46b4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    46b8:	2f656d6f 	svccs	0x00656d6f
    46bc:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    46c0:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    46c4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    46c8:	6f746b73 	svcvs	0x00746b73
    46cc:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    46d0:	61522f69 	cmpvs	r2, r9, ror #30
    46d4:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    46d8:	50797272 	rsbspl	r7, r9, r2, ror r2
    46dc:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    46e0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    46e4:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    46e8:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    46ec:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    46f0:	442f6f6d 	strtmi	r6, [pc], #-3949	; 46f8 <_start-0x3908>
    46f4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    46f8:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 4538 <_start-0x3ac8>
    46fc:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    4700:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 4644 <_start-0x39bc>
    4704:	2f006269 	svccs	0x00006269
    4708:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    470c:	6f6a6c2f 	svcvs	0x006a6c2f
    4710:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    4714:	442f7275 	strtmi	r7, [pc], #-629	; 471c <_start-0x38e4>
    4718:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    471c:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    4720:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    4724:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    4728:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    472c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    4730:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    4734:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    4738:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    473c:	442f7265 	strtmi	r7, [pc], #-613	; 4744 <_start-0x38bc>
    4740:	2f6f6d65 	svccs	0x006f6d65
    4744:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    4748:	2f737265 	svccs	0x00737265
    474c:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    4750:	2f343135 	svccs	0x00343135
    4754:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4758:	2f656475 	svccs	0x00656475
    475c:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    4760:	74750000 	ldrbtvc	r0, [r5], #-0
    4764:	632e6c69 	teqvs	lr, #26880	; 0x6900
    4768:	00000100 	andeq	r0, r0, r0, lsl #2
    476c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4770:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4774:	00000002 	andeq	r0, r0, r2
    4778:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    477c:	03000260 	movweq	r0, #608	; 0x260
    4780:	75080118 	strvc	r0, [r8, #-280]	; 0xfffffee8
    4784:	a3b8304c 			; <UNDEFINED> instruction: 0xa3b8304c
    4788:	750869d7 	strvc	r6, [r8, #-2519]	; 0xfffff629
    478c:	f0304c4b 			; <UNDEFINED> instruction: 0xf0304c4b
    4790:	0869d7a3 	stmdaeq	r9!, {r0, r1, r5, r7, r8, r9, sl, ip, lr, pc}^
    4794:	304c4b75 	subcc	r4, ip, r5, ror fp
    4798:	4dbc4cbc 	ldcmi	12, cr4, [ip, #752]!	; 0x2f0
    479c:	66740367 	ldrbtvs	r0, [r4], -r7, ror #6
    47a0:	d79e0f03 	ldrle	r0, [lr, r3, lsl #30]
    47a4:	4c3d086d 	ldcmi	8, cr0, [sp], #-436	; 0xfffffe4c
    47a8:	d7bf6430 			; <UNDEFINED> instruction: 0xd7bf6430
    47ac:	31590869 	cmpcc	r9, r9, ror #16
    47b0:	4df44cf4 	ldclmi	12, cr4, [r4, #976]!	; 0x3d0
    47b4:	66730367 	ldrbtvs	r0, [r3], -r7, ror #6
    47b8:	820f0383 	andhi	r0, pc, #201326594	; 0xc000002
    47bc:	4df44cf4 	ldclmi	12, cr4, [r4, #976]!	; 0x3d0
    47c0:	590869d7 	stmdbpl	r8, {r0, r1, r2, r4, r6, r7, r8, fp, sp, lr}
    47c4:	87f0304c 	ldrbhi	r3, [r0, ip, asr #32]!
    47c8:	0869d768 	stmdaeq	r9!, {r3, r5, r6, r8, r9, sl, ip, lr, pc}^
    47cc:	84304c75 	ldrthi	r4, [r0], #-3189	; 0xfffff38b
    47d0:	7803f331 	stmdavc	r3, {r0, r4, r5, r8, r9, ip, sp, lr, pc}
    47d4:	660b0366 	strvs	r0, [fp], -r6, ror #6
    47d8:	69d76968 	ldmibvs	r7, {r3, r5, r6, r8, fp, sp, lr}^
    47dc:	304c5908 	subcc	r5, ip, r8, lsl #18
    47e0:	f0308764 			; <UNDEFINED> instruction: 0xf0308764
    47e4:	6bd76887 	blvs	ff5dea08 <_estack+0xf75cea08>
    47e8:	684c5908 	stmdavs	ip, {r3, r8, fp, ip, lr}^
    47ec:	0869d785 	stmdaeq	r9!, {r0, r2, r7, r8, r9, sl, ip, lr, pc}^
    47f0:	08656759 	stmdaeq	r5!, {r0, r3, r4, r6, r8, r9, sl, sp, lr}^
    47f4:	3d08693e 	stccc	9, cr6, [r8, #-248]	; 0xffffff08
    47f8:	4783834b 	strmi	r8, [r3, fp, asr #6]
    47fc:	000602da 	ldrdeq	r0, [r6], -sl
    4800:	03c90101 	biceq	r0, r9, #1073741824	; 0x40000000
    4804:	00020000 	andeq	r0, r2, r0
    4808:	000001ad 	andeq	r0, r0, sp, lsr #3
    480c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4810:	0101000d 	tsteq	r1, sp
    4814:	00000101 	andeq	r0, r0, r1, lsl #2
    4818:	00000100 	andeq	r0, r0, r0, lsl #2
    481c:	6f682f01 	svcvs	0x00682f01
    4820:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4674 <_start-0x398c>
    4824:	61736f6a 	cmnvs	r3, sl, ror #30
    4828:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    482c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4830:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4834:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    4838:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    483c:	72656270 	rsbvc	r6, r5, #112, 4
    4840:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4844:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    4848:	4f545265 	svcmi	0x00545265
    484c:	616d2d53 	cmnvs	sp, r3, asr sp
    4850:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    4854:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    4858:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    485c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4860:	616c2f73 	smcvs	49907	; 0xc2f3
    4864:	3135396e 	teqcc	r5, lr, ror #18
    4868:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    486c:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    4870:	2f656d6f 	svccs	0x00656d6f
    4874:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    4878:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    487c:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    4880:	6f746b73 	svcvs	0x00746b73
    4884:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    4888:	61522f69 	cmpvs	r2, r9, ror #30
    488c:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    4890:	50797272 	rsbspl	r7, r9, r2, ror r2
    4894:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    4898:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    489c:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    48a0:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    48a4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    48a8:	442f6f6d 	strtmi	r6, [pc], #-3949	; 48b0 <_start-0x3750>
    48ac:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    48b0:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 46f0 <_start-0x3910>
    48b4:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    48b8:	692f3431 	stmdbvs	pc!, {r0, r4, r5, sl, ip, sp}	; <UNPREDICTABLE>
    48bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    48c0:	752f6564 	strvc	r6, [pc, #-1380]!	; 4364 <_start-0x3c9c>
    48c4:	00697073 	rsbeq	r7, r9, r3, ror r0
    48c8:	62737500 	rsbsvs	r7, r3, #0, 10
    48cc:	7373616d 	cmnvc	r3, #1073741851	; 0x4000001b
    48d0:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    48d4:	632e6563 	teqvs	lr, #415236096	; 0x18c00000
    48d8:	00000100 	andeq	r0, r0, r0, lsl #2
    48dc:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
    48e0:	00020068 	andeq	r0, r2, r8, rrx
    48e4:	70797400 	rsbsvc	r7, r9, r0, lsl #8
    48e8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    48ec:	00000200 	andeq	r0, r0, r0, lsl #4
    48f0:	63627375 	cmnvs	r2, #-738197503	; 0xd4000001
    48f4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    48f8:	72617067 	rsbvc	r7, r1, #103	; 0x67
    48fc:	2e726573 	mrccs	5, 3, r6, cr2, cr3, {3}
    4900:	00020068 	andeq	r0, r2, r8, rrx
    4904:	72747300 	rsbsvc	r7, r4, #0, 6
    4908:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    490c:	00020068 	andeq	r0, r2, r8, rrx
    4910:	62737500 	rsbsvs	r7, r3, #0, 10
    4914:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4918:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    491c:	00000200 	andeq	r0, r0, r0, lsl #4
    4920:	64627375 	strbtvs	r7, [r2], #-885	; 0xfffffc8b
    4924:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4928:	00682e65 	rsbeq	r2, r8, r5, ror #28
    492c:	64000002 	strvs	r0, [r0], #-2
    4930:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    4934:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    4938:	682e6563 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, sp, lr}
    493c:	00000200 	andeq	r0, r0, r0, lsl #4
    4940:	65627375 	strbvs	r7, [r2, #-885]!	; 0xfffffc8b
    4944:	6f70646e 	svcvs	0x0070646e
    4948:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    494c:	00020068 	andeq	r0, r2, r8, rrx
    4950:	62737500 	rsbsvs	r7, r3, #0, 10
    4954:	7373616d 	cmnvc	r3, #1073741851	; 0x4000001b
    4958:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    495c:	682e6563 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, sp, lr}
    4960:	00000200 	andeq	r0, r0, r0, lsl #4
    4964:	72627375 	rsbvc	r7, r2, #-738197503	; 0xd4000001
    4968:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    496c:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    4970:	00000200 	andeq	r0, r0, r0, lsl #4
    4974:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    4978:	6f6f7269 	svcvs	0x006f7269
    497c:	726f7074 	rsbvc	r7, pc, #116	; 0x74
    4980:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4984:	64000002 	strvs	r0, [r0], #-2
    4988:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    498c:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    4990:	68637365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    4994:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    4998:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    499c:	00000200 	andeq	r0, r0, r0, lsl #4
    49a0:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    49a4:	65667869 	strbvs	r7, [r6, #-2153]!	; 0xfffff797
    49a8:	61747372 	cmnvs	r4, r2, ror r3
    49ac:	61646567 	cmnvs	r4, r7, ror #10
    49b0:	682e6174 	stmdavs	lr!, {r2, r4, r5, r6, r8, sp, lr}
    49b4:	00000200 	andeq	r0, r0, r0, lsl #4
    49b8:	02050000 	andeq	r0, r5, #0
    49bc:	00026794 	muleq	r2, r4, r7
    49c0:	0101c603 	tsteq	r1, r3, lsl #12
    49c4:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    49c8:	66060104 	strvs	r0, [r6], -r4, lsl #2
    49cc:	8483bc06 	strhi	fp, [r3], #3078	; 0xc06
    49d0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    49d4:	084d2108 	stmdaeq	sp, {r3, r8, sp}^
    49d8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    49dc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    49e0:	838384bc 	orrhi	r8, r3, #188, 8	; 0xbc000000
    49e4:	83838469 	orrhi	r8, r3, #1761607680	; 0x69000000
    49e8:	084df369 	stmdaeq	sp, {r0, r3, r5, r6, r8, r9, ip, sp, lr, pc}^
    49ec:	02004b3d 	andeq	r4, r0, #62464	; 0xf400
    49f0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    49f4:	842dbd06 	strthi	fp, [sp], #-3334	; 0xfffff2fa
    49f8:	4ea08467 	cdpmi	4, 10, cr8, cr0, cr7, {3}
    49fc:	8367842d 	cmnhi	r7, #754974720	; 0x2d000000
    4a00:	83838383 	orrhi	r8, r3, #201326594	; 0xc000002
    4a04:	304ea084 	subcc	sl, lr, r4, lsl #1
    4a08:	a084bca0 	addge	fp, r4, r0, lsr #25
    4a0c:	0200bb4d 	andeq	fp, r0, #78848	; 0x13400
    4a10:	82060104 	andhi	r0, r6, #4, 2
    4a14:	84f6bb06 	ldrbthi	fp, [r6], #2822	; 0xb06
    4a18:	00bb4da0 	adcseq	r4, fp, r0, lsr #27
    4a1c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4a20:	03bb0682 			; <UNDEFINED> instruction: 0x03bb0682
    4a24:	2103d664 	tstcs	r3, r4, ror #12
    4a28:	a08483f2 	strdge	r8, [r4], r2
    4a2c:	4ebcbc4d 	cdpmi	12, 11, cr11, cr12, cr13, {2}
    4a30:	4b4b4b4b 	blmi	12d7764 <mailbuffer+0x129c674>
    4a34:	b0084d4b 	andlt	r4, r8, fp, asr #26
    4a38:	08a04dbc 	stmiaeq	r0!, {r2, r3, r4, r5, r7, r8, sl, fp, lr}
    4a3c:	314b4d22 	cmpcc	fp, r2, lsr #26
    4a40:	084cf34b 	stmdaeq	ip, {r0, r1, r3, r6, r8, r9, ip, sp, lr, pc}^
    4a44:	67674b97 			; <UNDEFINED> instruction: 0x67674b97
    4a48:	084d4b4b 	stmdaeq	sp, {r0, r1, r3, r6, r8, r9, fp, lr}^
    4a4c:	034dbcb0 	movteq	fp, #56496	; 0xdcb0
    4a50:	22034a61 	andcs	r4, r3, #397312	; 0x61000
    4a54:	4ebc68ba 	mrcmi	8, 5, r6, cr12, cr10, {5}
    4a58:	8367674b 	cmnhi	r7, #19660800	; 0x12c0000
    4a5c:	4d67674b 	stclmi	7, cr6, [r7, #-300]!	; 0xfffffed4
    4a60:	4dbcb008 	ldcmi	0, cr11, [ip, #32]!
    4a64:	4dd86883 	ldclmi	8, cr6, [r8, #524]	; 0x20c
    4a68:	4dbc84bb 	cfldrsmi	mvf8, [ip, #748]!	; 0x2ec
    4a6c:	672308a0 	strvs	r0, [r3, -r0, lsr #17]!
    4a70:	5a087508 	bpl	221e98 <mailbuffer+0x1e6da8>
    4a74:	0869d768 	stmdaeq	r9!, {r3, r5, r6, r8, r9, sl, ip, lr, pc}^
    4a78:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    4a7c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4a80:	84a050bc 	strthi	r5, [r0], #188	; 0xbc
    4a84:	2f4e6867 	svccs	0x004e6867
    4a88:	01040200 	mrseq	r0, R12_usr
    4a8c:	bc066606 	stclt	6, cr6, [r6], {6}
    4a90:	750869d7 	strvc	r6, [r8, #-2519]	; 0xfffff629
    4a94:	01040200 	mrseq	r0, R12_usr
    4a98:	bc066606 	stclt	6, cr6, [r6], {6}
    4a9c:	6784a050 			; <UNDEFINED> instruction: 0x6784a050
    4aa0:	002f4e68 	eoreq	r4, pc, r8, ror #28
    4aa4:	06010402 	streq	r0, [r1], -r2, lsl #8
    4aa8:	d7bc0666 	ldrle	r0, [ip, r6, ror #12]!
    4aac:	00590869 	subseq	r0, r9, r9, ror #16
    4ab0:	06010402 	streq	r0, [r1], -r2, lsl #8
    4ab4:	68bc0666 	ldmvs	ip!, {r1, r2, r5, r6, r9, sl}
    4ab8:	08852108 	stmeq	r5, {r3, r8, sp}
    4abc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    4ac0:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4ac4:	0869f3bc 	stmdaeq	r9!, {r2, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    4ac8:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    4acc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4ad0:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    4ad4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4ad8:	4cd8f3bc 	ldclmi	3, cr15, [r8], {188}	; 0xbc
    4adc:	6b4c84d8 	blvs	1325e44 <mailbuffer+0x12ead54>
    4ae0:	4b834b4b 	blmi	fe0d7814 <_estack+0xf60c7814>
    4ae4:	5a084c9f 	bpl	217d68 <mailbuffer+0x1dcc78>
    4ae8:	4dbc4e2c 	ldcmi	14, cr4, [ip, #176]!	; 0xb0
    4aec:	750869d7 	strvc	r6, [r8, #-2519]	; 0xfffff629
    4af0:	01040200 	mrseq	r0, R12_usr
    4af4:	bc066606 	stclt	6, cr6, [r6], {6}
    4af8:	01040200 	mrseq	r0, R12_usr
    4afc:	bc066606 	stclt	6, cr6, [r6], {6}
    4b00:	d84cd8f3 	stmdale	ip, {r0, r1, r4, r5, r6, r7, fp, ip, lr, pc}^
    4b04:	4b6b4c84 	blmi	1ad7d1c <mailbuffer+0x1a9cc2c>
    4b08:	9f4b834b 	svcls	0x004b834b
    4b0c:	bc94084c 	ldclt	8, cr0, [r4], {76}	; 0x4c
    4b10:	086bd74d 	stmdaeq	fp!, {r0, r2, r3, r6, r8, r9, sl, ip, lr, pc}^
    4b14:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    4b18:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4b1c:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    4b20:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4b24:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    4b28:	00660602 	rsbeq	r0, r6, r2, lsl #12
    4b2c:	66030402 	strvs	r0, [r3], -r2, lsl #8
    4b30:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    4b34:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4b38:	02040200 	andeq	r0, r4, #0, 4
    4b3c:	a0bd0666 	adcsge	r0, sp, r6, ror #12
    4b40:	004bf367 	subeq	pc, fp, r7, ror #6
    4b44:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b48:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    4b4c:	02004a02 	andeq	r4, r0, #8192	; 0x2000
    4b50:	002e0404 	eoreq	r0, lr, r4, lsl #8
    4b54:	06040402 	streq	r0, [r4], -r2, lsl #8
    4b58:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    4b5c:	02006704 	andeq	r6, r0, #4, 14	; 0x100000
    4b60:	00d80404 	sbcseq	r0, r8, r4, lsl #8
    4b64:	bc040402 	cfstrslt	mvf0, [r4], {2}
    4b68:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4b6c:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    4b70:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4b74:	bc5a08bc 	mrrclt	8, 11, r0, sl, cr12
    4b78:	00684c4d 	rsbeq	r4, r8, sp, asr #24
    4b7c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b80:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    4b84:	02006602 	andeq	r6, r0, #2097152	; 0x200000
    4b88:	004a0404 	subeq	r0, sl, r4, lsl #8
    4b8c:	06040402 	streq	r0, [r4], -r2, lsl #8
    4b90:	50bc68bb 	ldrhtpl	r6, [ip], fp
    4b94:	4dbc5a08 	ldcmi	10, cr5, [ip, #32]!
    4b98:	a04dbca0 	subge	fp, sp, r0, lsr #25
    4b9c:	4d684dbc 	stclmi	13, cr4, [r8, #-752]!	; 0xfffffd10
    4ba0:	d74dbc68 	strble	fp, [sp, -r8, ror #24]
    4ba4:	003d0869 	eorseq	r0, sp, r9, ror #16
    4ba8:	06010402 	streq	r0, [r1], -r2, lsl #8
    4bac:	83bc0666 			; <UNDEFINED> instruction: 0x83bc0666
    4bb0:	01040200 	mrseq	r0, R12_usr
    4bb4:	bc066606 	stclt	6, cr6, [r6], {6}
    4bb8:	bc142802 	ldclt	8, cr2, [r4], {2}
    4bbc:	1428024d 	strtne	r0, [r8], #-589	; 0xfffffdb3
    4bc0:	28024dbc 	stmdacs	r2, {r2, r3, r4, r5, r7, r8, sl, fp, lr}
    4bc4:	834dbc14 	movthi	fp, #56340	; 0xdc14
    4bc8:	0602d784 	streq	sp, [r2], -r4, lsl #15
    4bcc:	ae010100 	adfges	f0, f1, f0
    4bd0:	02000001 	andeq	r0, r0, #1
    4bd4:	00011400 	andeq	r1, r1, r0, lsl #8
    4bd8:	fb010200 	blx	453e2 <mailbuffer+0xa2f2>
    4bdc:	01000d0e 	tsteq	r0, lr, lsl #26
    4be0:	00010101 	andeq	r0, r1, r1, lsl #2
    4be4:	00010000 	andeq	r0, r1, r0
    4be8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4bec:	2f656d6f 	svccs	0x00656d6f
    4bf0:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    4bf4:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    4bf8:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    4bfc:	6f746b73 	svcvs	0x00746b73
    4c00:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    4c04:	61522f69 	cmpvs	r2, r9, ror #30
    4c08:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    4c0c:	50797272 	rsbspl	r7, r9, r2, ror r2
    4c10:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    4c14:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    4c18:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    4c1c:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    4c20:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    4c24:	442f6f6d 	strtmi	r6, [pc], #-3949	; 4c2c <_start-0x33d4>
    4c28:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4c2c:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 4a6c <_start-0x3594>
    4c30:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    4c34:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 4b78 <_start-0x3488>
    4c38:	2f006269 	svccs	0x00006269
    4c3c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4c40:	6f6a6c2f 	svcvs	0x006a6c2f
    4c44:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    4c48:	442f7275 	strtmi	r7, [pc], #-629	; 4c50 <_start-0x33b0>
    4c4c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4c50:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    4c54:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    4c58:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    4c5c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4c60:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    4c64:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    4c68:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    4c6c:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    4c70:	442f7265 	strtmi	r7, [pc], #-613	; 4c78 <_start-0x3388>
    4c74:	2f6f6d65 	svccs	0x006f6d65
    4c78:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    4c7c:	2f737265 	svccs	0x00737265
    4c80:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    4c84:	2f343135 	svccs	0x00343135
    4c88:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4c8c:	2f656475 	svccs	0x00656475
    4c90:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    4c94:	77640000 	strbvc	r0, [r4, -r0]!
    4c98:	66696368 	strbtvs	r6, [r9], -r8, ror #6
    4c9c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    4ca0:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    4ca4:	65706e64 	ldrbvs	r6, [r0, #-3684]!	; 0xfffff19c
    4ca8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    4cac:	64000001 	strvs	r0, [r0], #-1
    4cb0:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    4cb4:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    4cb8:	68637365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    4cbc:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    4cc0:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    4cc4:	00000200 	andeq	r0, r0, r0, lsl #4
    4cc8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4ccc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4cd0:	64000002 	strvs	r0, [r0], #-2
    4cd4:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    4cd8:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    4cdc:	68637365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    4ce0:	706e6465 	rsbvc	r6, lr, r5, ror #8
    4ce4:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    4ce8:	00000200 	andeq	r0, r0, r0, lsl #4
    4cec:	02050000 	andeq	r0, r5, #0
    4cf0:	00027c90 	muleq	r2, r0, ip
    4cf4:	08012703 	stmdaeq	r1, {r0, r1, r8, r9, sl, sp}
    4cf8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    4cfc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4d00:	83834cbc 	orrhi	r4, r3, #188, 24	; 0xbc00
    4d04:	84838383 	strhi	r8, [r3], #899	; 0x383
    4d08:	3d084df3 	stccc	13, cr4, [r8, #-972]	; 0xfffffc34
    4d0c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    4d10:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4d14:	084df3bc 	stmdaeq	sp, {r2, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    4d18:	02004b3d 	andeq	r4, r0, #62464	; 0xf400
    4d1c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4d20:	4df3bc06 	ldclmi	12, cr11, [r3, #24]!
    4d24:	004b3d08 	subeq	r3, fp, r8, lsl #26
    4d28:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d2c:	4cbc0666 	ldcmi	6, cr0, [ip], #408	; 0x198
    4d30:	67675b08 	strbvs	r5, [r7, -r8, lsl #22]!
    4d34:	4b4b324b 	blmi	12d1668 <mailbuffer+0x1296578>
    4d38:	352abb35 	strcc	fp, [sl, #-2869]!	; 0xfffff4cb
    4d3c:	590869d7 	stmdbpl	r8, {r0, r1, r2, r4, r6, r7, r8, fp, sp, lr}
    4d40:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    4d44:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4d48:	0200f5bc 	andeq	pc, r0, #188, 10	; 0x2f000000
    4d4c:	82060104 	andhi	r0, r6, #4, 2
    4d50:	3267bb06 	rsbcc	fp, r7, #6144	; 0x1800
    4d54:	d8848484 	stmle	r4, {r2, r7, sl, pc}
    4d58:	66140386 	ldrvs	r0, [r4], -r6, lsl #7
    4d5c:	842e6f03 	strthi	r6, [lr], #-3843	; 0xfffff0fd
    4d60:	6e864bd8 	mcrvs	11, 4, r4, cr6, cr8, {6}
    4d64:	00bcd72b 	adcseq	sp, ip, fp, lsr #14
    4d68:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d6c:	bb31062e 	bllt	c4662c <mailbuffer+0xc0b53c>
    4d70:	03040200 	movweq	r0, #16896	; 0x4200
    4d74:	c9084dbc 	stmdbgt	r8, {r2, r3, r4, r5, r7, r8, sl, fp, lr}
    4d78:	d73d084d 	ldrle	r0, [sp, -sp, asr #16]!
    4d7c:	01000602 	tsteq	r0, r2, lsl #12
    4d80:	0001ff01 	andeq	pc, r1, r1, lsl #30
    4d84:	25000200 	strcs	r0, [r0, #-512]	; 0xfffffe00
    4d88:	02000001 	andeq	r0, r0, #1
    4d8c:	0d0efb01 	vstreq	d15, [lr, #-4]
    4d90:	01010100 	mrseq	r0, (UNDEF: 17)
    4d94:	00000001 	andeq	r0, r0, r1
    4d98:	01000001 	tsteq	r0, r1
    4d9c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4ce8 <_start-0x3318>
    4da0:	6a6c2f65 	bvs	1b10b3c <mailbuffer+0x1ad5a4c>
    4da4:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    4da8:	2f727566 	svccs	0x00727566
    4dac:	6b736544 	blvs	1cde2c4 <mailbuffer+0x1ca31d4>
    4db0:	2f706f74 	svccs	0x00706f74
    4db4:	2f697072 	svccs	0x00697072
    4db8:	70736152 	rsbsvc	r6, r3, r2, asr r1
    4dbc:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    4dc0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    4dc4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    4dc8:	534f5452 	movtpl	r5, #62546	; 0xf452
    4dcc:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    4dd0:	2f726574 	svccs	0x00726574
    4dd4:	6f6d6544 	svcvs	0x006d6544
    4dd8:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    4ddc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    4de0:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    4de4:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    4de8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4dec:	6f682f00 	svcvs	0x00682f00
    4df0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4c44 <_start-0x33bc>
    4df4:	61736f6a 	cmnvs	r3, sl, ror #30
    4df8:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    4dfc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4e00:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4e04:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    4e08:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    4e0c:	72656270 	rsbvc	r6, r5, #112, 4
    4e10:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4e14:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    4e18:	4f545265 	svcmi	0x00545265
    4e1c:	616d2d53 	cmnvs	sp, r3, asr sp
    4e20:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    4e24:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    4e28:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    4e2c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4e30:	616c2f73 	smcvs	49907	; 0xc2f3
    4e34:	3135396e 	teqcc	r5, lr, ror #18
    4e38:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
    4e3c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4e40:	73752f65 	cmnvc	r5, #404	; 0x194
    4e44:	00006970 	andeq	r6, r0, r0, ror r9
    4e48:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    4e4c:	61726669 	cmnvs	r2, r9, ror #12
    4e50:	6373656d 	cmnvs	r3, #457179136	; 0x1b400000
    4e54:	70646568 	rsbvc	r6, r4, r8, ror #10
    4e58:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
    4e5c:	00000100 	andeq	r0, r0, r0, lsl #2
    4e60:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    4e64:	61726669 	cmnvs	r2, r9, ror #12
    4e68:	6373656d 	cmnvs	r3, #457179136	; 0x1b400000
    4e6c:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
    4e70:	2e72656c 	cdpcs	5, 7, cr6, cr2, cr12, {3}
    4e74:	00020068 	andeq	r0, r2, r8, rrx
    4e78:	70797400 	rsbsvc	r7, r9, r0, lsl #8
    4e7c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    4e80:	00000200 	andeq	r0, r0, r0, lsl #4
    4e84:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    4e88:	61726669 	cmnvs	r2, r9, ror #12
    4e8c:	6373656d 	cmnvs	r3, #457179136	; 0x1b400000
    4e90:	70646568 	rsbvc	r6, r4, r8, ror #10
    4e94:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    4e98:	00000200 	andeq	r0, r0, r0, lsl #4
    4e9c:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    4ea0:	67657269 	strbvs	r7, [r5, -r9, ror #4]!
    4ea4:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    4ea8:	00682e72 	rsbeq	r2, r8, r2, ror lr
    4eac:	00000002 	andeq	r0, r0, r2
    4eb0:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
    4eb4:	03000281 	movweq	r0, #641	; 0x281
    4eb8:	3d08012a 	stfccs	f0, [r8, #-168]	; 0xffffff58
    4ebc:	01040200 	mrseq	r0, R12_usr
    4ec0:	bc066606 	stclt	6, cr6, [r6], {6}
    4ec4:	8383834c 	orrhi	r8, r3, #76, 6	; 0x30000001
    4ec8:	67848383 	strvs	r8, [r4, r3, lsl #7]
    4ecc:	3d084df3 	stccc	13, cr4, [r8, #-972]	; 0xfffffc34
    4ed0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    4ed4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4ed8:	084df3bc 	stmdaeq	sp, {r2, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}^
    4edc:	02004b3d 	andeq	r4, r0, #62464	; 0xf400
    4ee0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4ee4:	f367bc06 			; <UNDEFINED> instruction: 0xf367bc06
    4ee8:	4b3d084d 	blmi	f47024 <mailbuffer+0xf0bf34>
    4eec:	01040200 	mrseq	r0, R12_usr
    4ef0:	bc066606 	stclt	6, cr6, [r6], {6}
    4ef4:	675b084c 	ldrbvs	r0, [fp, -ip, asr #16]
    4ef8:	01040200 	mrseq	r0, R12_usr
    4efc:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
    4f00:	004a0204 	subeq	r0, sl, r4, lsl #4
    4f04:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
    4f08:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4f0c:	02004b06 	andeq	r4, r0, #6144	; 0x1800
    4f10:	00bb0404 	adcseq	r0, fp, r4, lsl #8
    4f14:	4b040402 	blmi	105f24 <mailbuffer+0xcae34>
    4f18:	35bb4b31 	ldrcc	r4, [fp, #2865]!	; 0xb31
    4f1c:	d7352abb 			; <UNDEFINED> instruction: 0xd7352abb
    4f20:	4b590869 	blmi	16470cc <mailbuffer+0x160bfdc>
    4f24:	01040200 	mrseq	r0, R12_usr
    4f28:	bc066606 	stclt	6, cr6, [r6], {6}
    4f2c:	040200f5 	streq	r0, [r2], #-245	; 0xffffff0b
    4f30:	06820601 	streq	r0, [r2], r1, lsl #12
    4f34:	843267bb 	ldrthi	r6, [r2], #-1979	; 0xfffff845
    4f38:	68d88484 	ldmvs	r8, {r2, r7, sl, pc}^
    4f3c:	660d036a 	strvs	r0, [sp], -sl, ror #6
    4f40:	842e7603 	strthi	r7, [lr], #-1539	; 0xfffff9fd
    4f44:	bcd7864b 	ldcllt	6, cr8, [r7], {75}	; 0x4b
    4f48:	01040200 	mrseq	r0, R12_usr
    4f4c:	31062e06 	tstcc	r6, r6, lsl #28
    4f50:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    4f54:	084dbc02 	stmdaeq	sp, {r1, sl, fp, ip, sp, pc}^
    4f58:	02004b3d 	andeq	r4, r0, #62464	; 0xf400
    4f5c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4f60:	84a0bd06 	strthi	fp, [r0], #3334	; 0xd06
    4f64:	00a284f3 	strdeq	r8, [r2], r3	; <UNPREDICTABLE>
    4f68:	06010402 	streq	r0, [r1], -r2, lsl #8
    4f6c:	2508062e 	strcs	r0, [r8, #-1582]	; 0xfffff9d2
    4f70:	3d084df3 	stccc	13, cr4, [r8, #-972]	; 0xfffffc34
    4f74:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    4f78:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4f7c:	02ad08bc 	adceq	r0, sp, #188, 16	; 0xbc0000
    4f80:	01010006 	tsteq	r1, r6
    4f84:	000001c9 	andeq	r0, r0, r9, asr #3
    4f88:	00e10002 	rsceq	r0, r1, r2
    4f8c:	01020000 	mrseq	r0, (UNDEF: 2)
    4f90:	000d0efb 	strdeq	r0, [sp], -fp
    4f94:	01010101 	tsteq	r1, r1, lsl #2
    4f98:	01000000 	mrseq	r0, (UNDEF: 0)
    4f9c:	2f010000 	svccs	0x00010000
    4fa0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4fa4:	6f6a6c2f 	svcvs	0x006a6c2f
    4fa8:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    4fac:	442f7275 	strtmi	r7, [pc], #-629	; 4fb4 <_start-0x304c>
    4fb0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4fb4:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    4fb8:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    4fbc:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    4fc0:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4fc4:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    4fc8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    4fcc:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    4fd0:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    4fd4:	442f7265 	strtmi	r7, [pc], #-613	; 4fdc <_start-0x3024>
    4fd8:	2f6f6d65 	svccs	0x006f6d65
    4fdc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    4fe0:	2f737265 	svccs	0x00737265
    4fe4:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    4fe8:	2f343135 	svccs	0x00343135
    4fec:	0062696c 	rsbeq	r6, r2, ip, ror #18
    4ff0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4f3c <_start-0x30c4>
    4ff4:	6a6c2f65 	bvs	1b10d90 <mailbuffer+0x1ad5ca0>
    4ff8:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    4ffc:	2f727566 	svccs	0x00727566
    5000:	6b736544 	blvs	1cde518 <mailbuffer+0x1ca3428>
    5004:	2f706f74 	svccs	0x00706f74
    5008:	2f697072 	svccs	0x00697072
    500c:	70736152 	rsbsvc	r6, r3, r2, asr r1
    5010:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    5014:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    5018:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    501c:	534f5452 	movtpl	r5, #62546	; 0xf452
    5020:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    5024:	2f726574 	svccs	0x00726574
    5028:	6f6d6544 	svcvs	0x006d6544
    502c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    5030:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    5034:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    5038:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    503c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5040:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5044:	7073752f 	rsbsvc	r7, r3, pc, lsr #10
    5048:	6b000069 	blvs	51f4 <_start-0x2e0c>
    504c:	616d7965 	cmnvs	sp, r5, ror #18
    5050:	00632e70 	rsbeq	r2, r3, r0, ror lr
    5054:	6b000001 	blvs	5060 <_start-0x2fa0>
    5058:	616d7965 	cmnvs	sp, r5, ror #18
    505c:	00682e70 	rsbeq	r2, r8, r0, ror lr
    5060:	74000002 	strvc	r0, [r0], #-2
    5064:	73657079 	cmnvc	r5, #121	; 0x79
    5068:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    506c:	00000000 	andeq	r0, r0, r0
    5070:	887c0205 	ldmdahi	ip!, {r0, r2, r9}^
    5074:	e0030002 	and	r0, r3, r2
    5078:	3d080100 	stfccs	f0, [r8, #-0]
    507c:	01040200 	mrseq	r0, R12_usr
    5080:	bc066606 	stclt	6, cr6, [r6], {6}
    5084:	08696767 	stmdaeq	r9!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    5088:	c9084d59 	stmdbgt	r8, {r0, r3, r4, r6, r8, sl, fp, lr}
    508c:	0075084d 	rsbseq	r0, r5, sp, asr #16
    5090:	06010402 	streq	r0, [r1], -r2, lsl #8
    5094:	68bc0666 	ldmvs	ip!, {r1, r2, r5, r6, r9, sl}
    5098:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    509c:	02006803 	andeq	r6, r0, #196608	; 0x30000
    50a0:	1e080304 	cdpne	3, 0, cr0, cr8, cr4, {0}
    50a4:	01040200 	mrseq	r0, R12_usr
    50a8:	6b066606 	blvs	19e8c8 <mailbuffer+0x1637d8>
    50ac:	260269d7 			; <UNDEFINED> instruction: 0x260269d7
    50b0:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    50b4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    50b8:	836767bc 	cmnhi	r7, #188, 14	; 0x2f00000
    50bc:	22084d68 	andcs	r4, r8, #104, 26	; 0x1a00
    50c0:	ad0869d7 	stcge	9, cr6, [r8, #-860]	; 0xfffffca4
    50c4:	01040200 	mrseq	r0, R12_usr
    50c8:	bc066606 	stclt	6, cr6, [r6], {6}
    50cc:	d84d8467 	stmdale	sp, {r0, r1, r2, r5, r6, sl, pc}^
    50d0:	4d848367 	stcmi	3, cr8, [r4, #412]	; 0x19c
    50d4:	01040200 	mrseq	r0, R12_usr
    50d8:	67066606 	strvs	r6, [r6, -r6, lsl #12]
    50dc:	4d848584 	cfstr32mi	mvfx8, [r4, #528]	; 0x210
    50e0:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    50e4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    50e8:	4f488468 	svcmi	0x00488468
    50ec:	4d846884 	stcmi	8, cr6, [r4, #528]	; 0x210
    50f0:	08d92208 	ldmeq	r9, {r3, r9, sp}^
    50f4:	21084d21 	tstcs	r8, r1, lsr #26
    50f8:	4d21084d 	stcmi	8, cr0, [r1, #-308]!	; 0xfffffecc
    50fc:	c90869d7 	stmdbgt	r8, {r0, r1, r2, r4, r6, r7, r8, fp, sp, lr}
    5100:	01040200 	mrseq	r0, R12_usr
    5104:	bc066606 	stclt	6, cr6, [r6], {6}
    5108:	004d6867 	subeq	r6, sp, r7, ror #16
    510c:	06010402 	streq	r0, [r1], -r2, lsl #8
    5110:	bd680682 	stcllt	6, cr0, [r8, #-520]!	; 0xfffffdf8
    5114:	0083844c 	addeq	r8, r3, ip, asr #8
    5118:	06010402 	streq	r0, [r1], -r2, lsl #8
    511c:	bb680666 	bllt	1a06abc <mailbuffer+0x19cb9cc>
    5120:	844d4d84 	strbhi	r4, [sp], #-3460	; 0xfffff27c
    5124:	01040200 	mrseq	r0, R12_usr
    5128:	68066606 	stmdavs	r6, {r1, r2, r9, sl, sp, lr}
    512c:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
    5130:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    5134:	84678668 	strbthi	r8, [r7], #-1640	; 0xfffff998
    5138:	3d0869d7 	stccc	9, cr6, [r8, #-860]	; 0xfffffca4
    513c:	01040200 	mrseq	r0, R12_usr
    5140:	bc066606 	stclt	6, cr6, [r6], {6}
    5144:	8469844c 	strbthi	r8, [r9], #-1100	; 0xfffffbb4
    5148:	d7698469 	strble	r8, [r9, -r9, ror #8]!
    514c:	01000602 	tsteq	r0, r2, lsl #12
    5150:	00037601 	andeq	r7, r3, r1, lsl #12
    5154:	b5000200 	strlt	r0, [r0, #-512]	; 0xfffffe00
    5158:	02000001 	andeq	r0, r0, #1
    515c:	0d0efb01 	vstreq	d15, [lr, #-4]
    5160:	01010100 	mrseq	r0, (UNDEF: 17)
    5164:	00000001 	andeq	r0, r0, r1
    5168:	01000001 	tsteq	r0, r1
    516c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50b8 <_start-0x2f48>
    5170:	6a6c2f65 	bvs	1b10f0c <mailbuffer+0x1ad5e1c>
    5174:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    5178:	2f727566 	svccs	0x00727566
    517c:	6b736544 	blvs	1cde694 <mailbuffer+0x1ca35a4>
    5180:	2f706f74 	svccs	0x00706f74
    5184:	2f697072 	svccs	0x00697072
    5188:	70736152 	rsbsvc	r6, r3, r2, asr r1
    518c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    5190:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    5194:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    5198:	534f5452 	movtpl	r5, #62546	; 0xf452
    519c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    51a0:	2f726574 	svccs	0x00726574
    51a4:	6f6d6544 	svcvs	0x006d6544
    51a8:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    51ac:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    51b0:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    51b4:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    51b8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    51bc:	6f682f00 	svcvs	0x00682f00
    51c0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 5014 <_start-0x2fec>
    51c4:	61736f6a 	cmnvs	r3, sl, ror #30
    51c8:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    51cc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    51d0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    51d4:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    51d8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    51dc:	72656270 	rsbvc	r6, r5, #112, 4
    51e0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    51e4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    51e8:	4f545265 	svcmi	0x00545265
    51ec:	616d2d53 	cmnvs	sp, r3, asr sp
    51f0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    51f4:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    51f8:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    51fc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5200:	616c2f73 	smcvs	49907	; 0xc2f3
    5204:	3135396e 	teqcc	r5, lr, ror #18
    5208:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
    520c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5210:	73752f65 	cmnvc	r5, #404	; 0x194
    5214:	00006970 	andeq	r6, r0, r0, ror r9
    5218:	6b627375 	blvs	18a1ff4 <mailbuffer+0x1866f04>
    521c:	6f627965 	svcvs	0x00627965
    5220:	2e647261 	cdpcs	2, 6, cr7, cr4, cr1, {3}
    5224:	00010063 	andeq	r0, r1, r3, rrx
    5228:	62737500 	rsbsvs	r7, r3, #0, 10
    522c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5230:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
    5234:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5238:	00020068 	andeq	r0, r2, r8, rrx
    523c:	62737500 	rsbsvs	r7, r3, #0, 10
    5240:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    5244:	61706769 	cmnvs	r0, r9, ror #14
    5248:	72657372 	rsbvc	r7, r5, #-939524095	; 0xc8000001
    524c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5250:	74730000 	ldrbtvc	r0, [r3], #-0
    5254:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    5258:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    525c:	73750000 	cmnvc	r5, #0
    5260:	72747362 	rsbsvc	r7, r4, #-2013265919	; 0x88000001
    5264:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    5268:	00020068 	andeq	r0, r2, r8, rrx
    526c:	62737500 	rsbsvs	r7, r3, #0, 10
    5270:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    5274:	682e6563 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, sp, lr}
    5278:	00000200 	andeq	r0, r0, r0, lsl #4
    527c:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    5280:	76656469 	strbtvc	r6, [r5], -r9, ror #8
    5284:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    5288:	00020068 	andeq	r0, r2, r8, rrx
    528c:	62737500 	rsbsvs	r7, r3, #0, 10
    5290:	70646e65 	rsbvc	r6, r4, r5, ror #28
    5294:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    5298:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    529c:	73750000 	cmnvc	r5, #0
    52a0:	71657262 	cmnvc	r5, r2, ror #4
    52a4:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
    52a8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    52ac:	656b0000 	strbvs	r0, [fp, #-0]!
    52b0:	70616d79 	rsbvc	r6, r1, r9, ror sp
    52b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    52b8:	73750000 	cmnvc	r5, #0
    52bc:	79656b62 	stmdbvc	r5!, {r1, r5, r6, r8, r9, fp, sp, lr}^
    52c0:	72616f62 	rsbvc	r6, r1, #392	; 0x188
    52c4:	00682e64 	rsbeq	r2, r8, r4, ror #28
    52c8:	64000002 	strvs	r0, [r0], #-2
    52cc:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    52d0:	746f6f72 	strbtvc	r6, [pc], #-3954	; 52d8 <_start-0x2d28>
    52d4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    52d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    52dc:	77640000 	strbvc	r0, [r4, -r0]!
    52e0:	66696368 	strbtvs	r6, [r9], -r8, ror #6
    52e4:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    52e8:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    52ec:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    52f0:	00682e72 	rsbeq	r2, r8, r2, ror lr
    52f4:	64000002 	strvs	r0, [r0], #-2
    52f8:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    52fc:	72656678 	rsbvc	r6, r5, #120, 12	; 0x7800000
    5300:	67617473 			; <UNDEFINED> instruction: 0x67617473
    5304:	74616465 	strbtvc	r6, [r1], #-1125	; 0xfffffb9b
    5308:	00682e61 	rsbeq	r2, r8, r1, ror #28
    530c:	00000002 	andeq	r0, r0, r2
    5310:	58020500 	stmdapl	r2, {r8, sl}
    5314:	03000290 	movweq	r0, #656	; 0x290
    5318:	5908012f 	stmdbpl	r8, {r0, r1, r2, r3, r5, r8}
    531c:	01040200 	mrseq	r0, R12_usr
    5320:	bc066606 	stclt	6, cr6, [r6], {6}
    5324:	67678483 	strbvs	r8, [r7, -r3, lsl #9]!
    5328:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    532c:	84686767 	strbthi	r6, [r8], #-1895	; 0xfffff899
    5330:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    5334:	06820601 	streq	r0, [r2], r1, lsl #12
    5338:	084d5908 	stmdaeq	sp, {r3, r8, fp, ip, lr}^
    533c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    5340:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    5344:	698384bc 	stmibvs	r3, {r2, r3, r4, r5, r7, sl, pc}
    5348:	69838384 	stmibvs	r3, {r2, r7, r8, r9, pc}
    534c:	084df383 	stmdaeq	sp, {r0, r1, r7, r8, r9, ip, sp, lr, pc}^
    5350:	02004b3d 	andeq	r4, r0, #62464	; 0xf400
    5354:	66060104 	strvs	r0, [r6], -r4, lsl #2
    5358:	842dbd06 	strthi	fp, [sp], #-3334	; 0xfffff2fa
    535c:	4ea08467 	cdpmi	4, 10, cr8, cr0, cr7, {3}
    5360:	83838330 	orrhi	r8, r3, #48, 6	; 0xc0000000
    5364:	85833184 	strhi	r3, [r3, #388]	; 0x184
    5368:	bb67842d 	bllt	19e6424 <mailbuffer+0x19ab334>
    536c:	020031a0 	andeq	r3, r0, #160, 2	; 0x28
    5370:	82060104 	andhi	r0, r6, #4, 2
    5374:	00bbbb06 	adcseq	fp, fp, r6, lsl #22
    5378:	06010402 	streq	r0, [r1], -r2, lsl #8
    537c:	d8bb0682 	ldmle	fp!, {r1, r7, r9, sl}
    5380:	032e6503 	teqeq	lr, #12582912	; 0xc00000
    5384:	a084f21e 	addge	pc, r4, lr, lsl r2	; <UNPREDICTABLE>
    5388:	4dbcbc4d 	ldcmi	12, cr11, [ip, #308]!	; 0x134
    538c:	47848384 	strmi	r8, [r4, r4, lsl #7]
    5390:	b2084632 	andlt	r4, r8, #52428800	; 0x3200000
    5394:	85834ebc 	strhi	r4, [r3, #3772]	; 0xebc
    5398:	bcce0846 	stcllt	8, cr0, [lr], {70}	; 0x46
    539c:	7508674e 	strvc	r6, [r8, #-1870]	; 0xfffff8b2
    53a0:	08685a08 	stmdaeq	r8!, {r3, r9, fp, ip, lr}^
    53a4:	59086921 	stmdbpl	r8, {r0, r5, r8, fp, sp, lr}
    53a8:	01040200 	mrseq	r0, R12_usr
    53ac:	bb066606 	bllt	19ebcc <mailbuffer+0x163adc>
    53b0:	01040200 	mrseq	r0, R12_usr
    53b4:	bb066606 	bllt	19ebd4 <mailbuffer+0x163ae4>
    53b8:	59084df3 	stmdbpl	r8, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    53bc:	01040200 	mrseq	r0, R12_usr
    53c0:	bb066606 	bllt	19ebe0 <mailbuffer+0x163af0>
    53c4:	01040200 	mrseq	r0, R12_usr
    53c8:	bb066606 	bllt	19ebe8 <mailbuffer+0x163af8>
    53cc:	59084df3 	stmdbpl	r8, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    53d0:	01040200 	mrseq	r0, R12_usr
    53d4:	bb066606 	bllt	19ebf4 <mailbuffer+0x163b04>
    53d8:	01040200 	mrseq	r0, R12_usr
    53dc:	bb066606 	bllt	19ebfc <mailbuffer+0x163b0c>
    53e0:	59084df3 	stmdbpl	r8, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    53e4:	01040200 	mrseq	r0, R12_usr
    53e8:	bb066606 	bllt	19ec08 <mailbuffer+0x163b18>
    53ec:	01040200 	mrseq	r0, R12_usr
    53f0:	bb066606 	bllt	19ec10 <mailbuffer+0x163b20>
    53f4:	75084df3 	strvc	r4, [r8, #-3571]	; 0xfffff20d
    53f8:	01040200 	mrseq	r0, R12_usr
    53fc:	bf066606 	svclt	0x00066606
    5400:	033e0883 	teqeq	lr, #8585216	; 0x830000
    5404:	012a0213 	teqeq	sl, r3, lsl r2
    5408:	02006784 	andeq	r6, r0, #132, 14	; 0x2100000
    540c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    5410:	0084bc06 	addeq	fp, r4, r6, lsl #24
    5414:	06020402 	streq	r0, [r2], -r2, lsl #8
    5418:	8431062e 	ldrthi	r0, [r1], #-1582	; 0xfffff9d2
    541c:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    5420:	062e0603 	strteq	r0, [lr], -r3, lsl #12
    5424:	8468d731 	strbthi	sp, [r8], #-1841	; 0xfffff8cf
    5428:	04020085 	streq	r0, [r2], #-133	; 0xffffff7b
    542c:	062e0604 	strteq	r0, [lr], -r4, lsl #12
    5430:	002e5903 	eoreq	r5, lr, r3, lsl #18
    5434:	03010402 	movweq	r0, #5122	; 0x1402
    5438:	084dba29 	stmdaeq	sp, {r0, r3, r5, r9, fp, ip, sp, pc}^
    543c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    5440:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    5444:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    5448:	06820601 	streq	r0, [r2], r1, lsl #12
    544c:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    5450:	06820601 	streq	r0, [r2], r1, lsl #12
    5454:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    5458:	06820601 	streq	r0, [r2], r1, lsl #12
    545c:	0200bbbb 	andeq	fp, r0, #191488	; 0x2ec00
    5460:	82060104 	andhi	r0, r6, #4, 2
    5464:	3d08bb06 	vstrcc	d11, [r8, #-24]	; 0xffffffe8
    5468:	69e508f4 	stmibvs	r5!, {r2, r4, r5, r6, r7, fp}^
    546c:	004b7508 	subeq	r7, fp, r8, lsl #10
    5470:	06010402 	streq	r0, [r1], -r2, lsl #8
    5474:	00bc0666 	adcseq	r0, ip, r6, ror #12
    5478:	06010402 	streq	r0, [r1], -r2, lsl #8
    547c:	00bb0666 	adcseq	r0, fp, r6, ror #12
    5480:	06010402 	streq	r0, [r1], -r2, lsl #8
    5484:	9fbc069e 	svcls	0x00bc069e
    5488:	940884a0 	strls	r8, [r8], #-1184	; 0xfffffb60
    548c:	696aa084 	stmdbvs	sl!, {r2, r7, sp, pc}^
    5490:	9e0b0368 	cdpls	3, 0, cr0, cr11, cr8, {3}
    5494:	836b8384 	cmnhi	fp, #132, 6	; 0x10000002
    5498:	4dd76883 	ldclmi	8, cr6, [r7, #524]	; 0x20c
    549c:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    54a0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    54a4:	2108bb06 	tstcs	r8, r6, lsl #22
    54a8:	003d0869 	eorseq	r0, sp, r9, ror #16
    54ac:	06010402 	streq	r0, [r1], -r2, lsl #8
    54b0:	68bc0666 	ldmvs	ip!, {r1, r2, r5, r6, r9, sl}
    54b4:	020068bb 	andeq	r6, r0, #12255232	; 0xbb0000
    54b8:	00450204 	subeq	r0, r5, r4, lsl #4
    54bc:	06010402 	streq	r0, [r1], -r2, lsl #8
    54c0:	09030666 	stmdbeq	r3, {r1, r2, r5, r6, r9, sl}
    54c4:	0602d766 	streq	sp, [r2], -r6, ror #14
    54c8:	2e010100 	adfcss	f0, f1, f0
    54cc:	02000002 	andeq	r0, r0, #2
    54d0:	00019a00 	andeq	r9, r1, r0, lsl #20
    54d4:	fb010200 	blx	45cde <mailbuffer+0xabee>
    54d8:	01000d0e 	tsteq	r0, lr, lsl #26
    54dc:	00010101 	andeq	r0, r1, r1, lsl #2
    54e0:	00010000 	andeq	r0, r1, r0
    54e4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    54e8:	2f656d6f 	svccs	0x00656d6f
    54ec:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    54f0:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    54f4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    54f8:	6f746b73 	svcvs	0x00746b73
    54fc:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    5500:	61522f69 	cmpvs	r2, r9, ror #30
    5504:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    5508:	50797272 	rsbspl	r7, r9, r2, ror r2
    550c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    5510:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    5514:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    5518:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    551c:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    5520:	442f6f6d 	strtmi	r6, [pc], #-3949	; 5528 <_start-0x2ad8>
    5524:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5528:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 5368 <_start-0x2c98>
    552c:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    5530:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 5474 <_start-0x2b8c>
    5534:	2f006269 	svccs	0x00006269
    5538:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    553c:	6f6a6c2f 	svcvs	0x006a6c2f
    5540:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    5544:	442f7275 	strtmi	r7, [pc], #-629	; 554c <_start-0x2ab4>
    5548:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    554c:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    5550:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    5554:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    5558:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    555c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    5560:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    5564:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    5568:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    556c:	442f7265 	strtmi	r7, [pc], #-613	; 5574 <_start-0x2a8c>
    5570:	2f6f6d65 	svccs	0x006f6d65
    5574:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    5578:	2f737265 	svccs	0x00737265
    557c:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    5580:	2f343135 	svccs	0x00343135
    5584:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5588:	2f656475 	svccs	0x00656475
    558c:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    5590:	77640000 	strbvc	r0, [r4, -r0]!
    5594:	72696368 	rsbvc	r6, r9, #104, 6	; 0xa0000001
    5598:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
    559c:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
    55a0:	00010063 	andeq	r0, r1, r3, rrx
    55a4:	62737500 	rsbsvs	r7, r3, #0, 10
    55a8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    55ac:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
    55b0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    55b4:	00020068 	andeq	r0, r2, r8, rrx
    55b8:	62737500 	rsbsvs	r7, r3, #0, 10
    55bc:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    55c0:	61706769 	cmnvs	r0, r9, ror #14
    55c4:	72657372 	rsbvc	r7, r5, #-939524095	; 0xc8000001
    55c8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    55cc:	74730000 	ldrbtvc	r0, [r3], #-0
    55d0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    55d4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    55d8:	73750000 	cmnvc	r5, #0
    55dc:	72747362 	rsbsvc	r7, r4, #-2013265919	; 0x88000001
    55e0:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    55e4:	00020068 	andeq	r0, r2, r8, rrx
    55e8:	62737500 	rsbsvs	r7, r3, #0, 10
    55ec:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    55f0:	682e6563 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, sp, lr}
    55f4:	00000200 	andeq	r0, r0, r0, lsl #4
    55f8:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    55fc:	76656469 	strbtvc	r6, [r5], -r9, ror #8
    5600:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    5604:	00020068 	andeq	r0, r2, r8, rrx
    5608:	62737500 	rsbsvs	r7, r3, #0, 10
    560c:	70646e65 	rsbvc	r6, r4, r5, ror #28
    5610:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    5614:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5618:	77640000 	strbvc	r0, [r4, -r0]!
    561c:	72696368 	rsbvc	r6, r9, #104, 6	; 0xa0000001
    5620:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
    5624:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
    5628:	00020068 	andeq	r0, r2, r8, rrx
    562c:	62737500 	rsbsvs	r7, r3, #0, 10
    5630:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    5634:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
    5638:	00020068 	andeq	r0, r2, r8, rrx
    563c:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    5640:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
    5644:	73656d61 	cmnvc	r5, #6208	; 0x1840
    5648:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    564c:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    5650:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5654:	77640000 	strbvc	r0, [r4, -r0]!
    5658:	78696368 	stmdavc	r9!, {r3, r5, r6, r8, r9, sp, lr}^
    565c:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    5660:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    5664:	61746164 	cmnvs	r4, r4, ror #2
    5668:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    566c:	00000000 	andeq	r0, r0, r0
    5670:	9fb80205 	svcls	0x00b80205
    5674:	1d030002 	stcne	0, cr0, [r3, #-8]
    5678:	00590801 	subseq	r0, r9, r1, lsl #16
    567c:	06010402 	streq	r0, [r1], -r2, lsl #8
    5680:	67bc0666 	ldrvs	r0, [ip, r6, ror #12]!
    5684:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    5688:	06820601 	streq	r0, [r2], r1, lsl #12
    568c:	084d5908 	stmdaeq	sp, {r3, r8, fp, ip, lr}^
    5690:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    5694:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    5698:	838384bc 	orrhi	r8, r3, #188, 8	; 0xbc000000
    569c:	084df369 	stmdaeq	sp, {r0, r3, r5, r6, r8, r9, ip, sp, lr, pc}^
    56a0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    56a4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    56a8:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    56ac:	06820601 	streq	r0, [r2], r1, lsl #12
    56b0:	bc68bbbb 	stcllt	11, cr11, [r8], #-748	; 0xfffffd14
    56b4:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
    56b8:	06820601 	streq	r0, [r2], r1, lsl #12
    56bc:	0200bbbb 	andeq	fp, r0, #191488	; 0x2ec00
    56c0:	82060104 	andhi	r0, r6, #4, 2
    56c4:	2208bb06 	andcs	fp, r8, #6144	; 0x1800
    56c8:	688383d8 	stmvs	r3, {r3, r4, r6, r7, r8, r9, pc}
    56cc:	02009f4d 	andeq	r9, r0, #308	; 0x134
    56d0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    56d4:	2208bc06 	andcs	fp, r8, #1536	; 0x600
    56d8:	689f4d4b 	ldmvs	pc, {r0, r1, r3, r6, r8, sl, fp, lr}	; <UNPREDICTABLE>
    56dc:	08688383 	stmdaeq	r8!, {r0, r1, r7, r8, r9, pc}^
    56e0:	8383bc3e 	orrhi	fp, r3, #15872	; 0x3e00
    56e4:	0e034d68 	cdpeq	13, 0, cr4, cr3, cr8, {3}
    56e8:	f27603ba 	vcge.s<illegal width 64>	d16, d22, d26
    56ec:	688383bc 	stmvs	r3, {r2, r3, r4, r5, r7, r8, r9, pc}
    56f0:	8384bc50 	orrhi	fp, r4, #80, 24	; 0x5000
    56f4:	d74d6883 	strble	r6, [sp, -r3, lsl #17]
    56f8:	01000602 	tsteq	r0, r2, lsl #12
    56fc:	0002b201 	andeq	fp, r2, r1, lsl #4
    5700:	a3000200 	movwge	r0, #512	; 0x200
    5704:	02000001 	andeq	r0, r0, #1
    5708:	0d0efb01 	vstreq	d15, [lr, #-4]
    570c:	01010100 	mrseq	r0, (UNDEF: 17)
    5710:	00000001 	andeq	r0, r0, r1
    5714:	01000001 	tsteq	r0, r1
    5718:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5664 <_start-0x299c>
    571c:	6a6c2f65 	bvs	1b114b8 <mailbuffer+0x1ad63c8>
    5720:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    5724:	2f727566 	svccs	0x00727566
    5728:	6b736544 	blvs	1cdec40 <mailbuffer+0x1ca3b50>
    572c:	2f706f74 	svccs	0x00706f74
    5730:	2f697072 	svccs	0x00697072
    5734:	70736152 	rsbsvc	r6, r3, r2, asr r1
    5738:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    573c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    5740:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    5744:	534f5452 	movtpl	r5, #62546	; 0xf452
    5748:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    574c:	2f726574 	svccs	0x00726574
    5750:	6f6d6544 	svcvs	0x006d6544
    5754:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    5758:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    575c:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    5760:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    5764:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5768:	6f682f00 	svcvs	0x00682f00
    576c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 55c0 <_start-0x2a40>
    5770:	61736f6a 	cmnvs	r3, sl, ror #30
    5774:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    5778:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    577c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5780:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    5784:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    5788:	72656270 	rsbvc	r6, r5, #112, 4
    578c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5790:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    5794:	4f545265 	svcmi	0x00545265
    5798:	616d2d53 	cmnvs	sp, r3, asr sp
    579c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    57a0:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    57a4:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    57a8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    57ac:	616c2f73 	smcvs	49907	; 0xc2f3
    57b0:	3135396e 	teqcc	r5, lr, ror #18
    57b4:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
    57b8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    57bc:	73752f65 	cmnvc	r5, #404	; 0x194
    57c0:	00006970 	andeq	r6, r0, r0, ror r9
    57c4:	6d627375 	stclvs	3, cr7, [r2, #-468]!	; 0xfffffe2c
    57c8:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
    57cc:	0100632e 	tsteq	r0, lr, lsr #6
    57d0:	73750000 	cmnvc	r5, #0
    57d4:	00682e62 	rsbeq	r2, r8, r2, ror #28
    57d8:	74000002 	strvc	r0, [r0], #-2
    57dc:	73657079 	cmnvc	r5, #121	; 0x79
    57e0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    57e4:	73750000 	cmnvc	r5, #0
    57e8:	6e6f6362 	cdpvs	3, 6, cr6, cr15, cr2, {3}
    57ec:	70676966 	rsbvc	r6, r7, r6, ror #18
    57f0:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    57f4:	00682e72 	rsbeq	r2, r8, r2, ror lr
    57f8:	73000002 	movwvc	r0, #2
    57fc:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    5800:	00682e67 	rsbeq	r2, r8, r7, ror #28
    5804:	75000002 	strvc	r0, [r0, #-2]
    5808:	74736273 	ldrbtvc	r6, [r3], #-627	; 0xfffffd8d
    580c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    5810:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5814:	73750000 	cmnvc	r5, #0
    5818:	76656462 	strbtvc	r6, [r5], -r2, ror #8
    581c:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    5820:	00020068 	andeq	r0, r2, r8, rrx
    5824:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    5828:	65646963 	strbvs	r6, [r4, #-2403]!	; 0xfffff69d
    582c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    5830:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5834:	73750000 	cmnvc	r5, #0
    5838:	646e6562 	strbtvs	r6, [lr], #-1378	; 0xfffffa9e
    583c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    5840:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5844:	75000002 	strvc	r0, [r0, #-2]
    5848:	65726273 	ldrbvs	r6, [r2, #-627]!	; 0xfffffd8d
    584c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    5850:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5854:	75000002 	strvc	r0, [r0, #-2]
    5858:	6f6d6273 	svcvs	0x006d6273
    585c:	2e657375 	mcrcs	3, 3, r7, cr5, cr5, {3}
    5860:	00020068 	andeq	r0, r2, r8, rrx
    5864:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    5868:	6f726963 	svcvs	0x00726963
    586c:	6f70746f 	svcvs	0x0070746f
    5870:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    5874:	00000200 	andeq	r0, r0, r0, lsl #4
    5878:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    587c:	61726669 	cmnvs	r2, r9, ror #12
    5880:	6373656d 	cmnvs	r3, #457179136	; 0x1b400000
    5884:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
    5888:	2e72656c 	cdpcs	5, 7, cr6, cr2, cr12, {3}
    588c:	00020068 	andeq	r0, r2, r8, rrx
    5890:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    5894:	66786963 	ldrbtvs	r6, [r8], -r3, ror #18
    5898:	74737265 	ldrbtvc	r7, [r3], #-613	; 0xfffffd9b
    589c:	64656761 	strbtvs	r6, [r5], #-1889	; 0xfffff89f
    58a0:	2e617461 	cdpcs	4, 6, cr7, cr1, cr1, {3}
    58a4:	00020068 	andeq	r0, r2, r8, rrx
    58a8:	05000000 	streq	r0, [r0, #-0]
    58ac:	02a4dc02 	adceq	sp, r4, #512	; 0x200
    58b0:	01230300 	teqeq	r3, r0, lsl #6
    58b4:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    58b8:	66060104 	strvs	r0, [r6], -r4, lsl #2
    58bc:	8483bc06 	strhi	fp, [r3], #3078	; 0xc06
    58c0:	68676767 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    58c4:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    58c8:	06820601 	streq	r0, [r2], r1, lsl #12
    58cc:	084d5908 	stmdaeq	sp, {r3, r8, fp, ip, lr}^
    58d0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    58d4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    58d8:	698384bc 	stmibvs	r3, {r2, r3, r4, r5, r7, sl, pc}
    58dc:	69838384 	stmibvs	r3, {r2, r7, r8, r9, pc}
    58e0:	3d084df3 	stccc	13, cr4, [r8, #-972]	; 0xfffffc34
    58e4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    58e8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    58ec:	67842dbd 			; <UNDEFINED> instruction: 0x67842dbd
    58f0:	304ea084 	subcc	sl, lr, r4, lsl #1
    58f4:	84838383 	strhi	r8, [r3], #899	; 0x383
    58f8:	2d858331 	stccs	3, cr8, [r5, #196]	; 0xc4
    58fc:	a0bb6784 	adcsge	r6, fp, r4, lsl #15
    5900:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    5904:	06820601 	streq	r0, [r2], r1, lsl #12
    5908:	0200bbbb 	andeq	fp, r0, #191488	; 0x2ec00
    590c:	82060104 	andhi	r0, r6, #4, 2
    5910:	03d8bb06 	bicseq	fp, r8, #6144	; 0x1800
    5914:	1e032e65 	cdpne	14, 0, cr2, cr3, cr5, {3}
    5918:	4da084f2 	cfstrsmi	mvf8, [r0, #968]!	; 0x3c8
    591c:	844dbcbc 	strbhi	fp, [sp], #-3260	; 0xfffff344
    5920:	32478483 	subcc	r8, r7, #-2097152000	; 0x83000000
    5924:	bcb20846 	ldclt	8, cr0, [r2], #280	; 0x118
    5928:	4685834e 	strmi	r8, [r5], lr, asr #6
    592c:	4ebcce08 	cdpmi	14, 11, cr12, cr12, cr8, {0}
    5930:	08750867 	ldmdaeq	r5!, {r0, r1, r2, r5, r6, fp}^
    5934:	2108685a 	tstcs	r8, sl, asr r8
    5938:	00590869 	subseq	r0, r9, r9, ror #16
    593c:	06010402 	streq	r0, [r1], -r2, lsl #8
    5940:	00bb0666 	adcseq	r0, fp, r6, ror #12
    5944:	06010402 	streq	r0, [r1], -r2, lsl #8
    5948:	f3bb0666 	vcvt.f32.s32	q0, q11
    594c:	003d084d 	eorseq	r0, sp, sp, asr #16
    5950:	06010402 	streq	r0, [r1], -r2, lsl #8
    5954:	00bc0666 	adcseq	r0, ip, r6, ror #12
    5958:	06010402 	streq	r0, [r1], -r2, lsl #8
    595c:	00bb0682 	adcseq	r0, fp, r2, lsl #13
    5960:	06010402 	streq	r0, [r1], -r2, lsl #8
    5964:	00bc0682 	adcseq	r0, ip, r2, lsl #13
    5968:	06010402 	streq	r0, [r1], -r2, lsl #8
    596c:	bbbb0682 	bllt	feec737c <_estack+0xf6eb737c>
    5970:	01040200 	mrseq	r0, R12_usr
    5974:	bb068206 	bllt	1a6194 <mailbuffer+0x16b0a4>
    5978:	08f43d08 	ldmeq	r4!, {r3, r8, sl, fp, ip, sp}^
    597c:	750869e5 	strvc	r6, [r8, #-2533]	; 0xfffff61b
    5980:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    5984:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    5988:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    598c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    5990:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    5994:	069e0601 	ldreq	r0, [lr], r1, lsl #12
    5998:	849f9fbc 	ldrhi	r9, [pc], #4028	; 59a0 <_start-0x2660>
    599c:	01040200 	mrseq	r0, R12_usr
    59a0:	bb068206 	bllt	1a61c0 <mailbuffer+0x16b0d0>
    59a4:	80a081bb 	strhthi	r8, [r0], fp
    59a8:	83832508 	orrhi	r2, r3, #8, 10	; 0x2000000
    59ac:	0402d768 	streq	sp, [r2], #-1896	; 0xfffff898
    59b0:	8c010100 	stfhis	f0, [r1], {-0}
    59b4:	02000001 	andeq	r0, r0, #1
    59b8:	00012b00 	andeq	r2, r1, r0, lsl #22
    59bc:	fb010200 	blx	461c6 <mailbuffer+0xb0d6>
    59c0:	01000d0e 	tsteq	r0, lr, lsl #26
    59c4:	00010101 	andeq	r0, r1, r1, lsl #2
    59c8:	00010000 	andeq	r0, r1, r0
    59cc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    59d0:	2f656d6f 	svccs	0x00656d6f
    59d4:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    59d8:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    59dc:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    59e0:	6f746b73 	svcvs	0x00746b73
    59e4:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    59e8:	61522f69 	cmpvs	r2, r9, ror #30
    59ec:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    59f0:	50797272 	rsbspl	r7, r9, r2, ror r2
    59f4:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    59f8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    59fc:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    5a00:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    5a04:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    5a08:	442f6f6d 	strtmi	r6, [pc], #-3949	; 5a10 <_start-0x25f0>
    5a0c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5a10:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 5850 <_start-0x27b0>
    5a14:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    5a18:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 595c <_start-0x26a4>
    5a1c:	2f006269 	svccs	0x00006269
    5a20:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5a24:	6f6a6c2f 	svcvs	0x006a6c2f
    5a28:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    5a2c:	442f7275 	strtmi	r7, [pc], #-629	; 5a34 <_start-0x25cc>
    5a30:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5a34:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    5a38:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    5a3c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    5a40:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5a44:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    5a48:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    5a4c:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    5a50:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    5a54:	442f7265 	strtmi	r7, [pc], #-613	; 5a5c <_start-0x25a4>
    5a58:	2f6f6d65 	svccs	0x006f6d65
    5a5c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    5a60:	2f737265 	svccs	0x00737265
    5a64:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    5a68:	2f343135 	svccs	0x00343135
    5a6c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5a70:	2f656475 	svccs	0x00656475
    5a74:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    5a78:	77640000 	strbvc	r0, [r4, -r0]!
    5a7c:	66696368 	strbtvs	r6, [r9], -r8, ror #6
    5a80:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    5a84:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    5a88:	70736e64 	rsbsvc	r6, r3, r4, ror #28
    5a8c:	2e74696c 	cdpcs	9, 7, cr6, cr4, cr12, {3}
    5a90:	00010063 	andeq	r0, r1, r3, rrx
    5a94:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    5a98:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
    5a9c:	73656d61 	cmnvc	r5, #6208	; 0x1840
    5aa0:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    5aa4:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    5aa8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5aac:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
    5ab0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5ab4:	00020068 	andeq	r0, r2, r8, rrx
    5ab8:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    5abc:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
    5ac0:	73656d61 	cmnvc	r5, #6208	; 0x1840
    5ac4:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    5ac8:	6c70736e 	ldclvs	3, cr7, [r0], #-440	; 0xfffffe48
    5acc:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
    5ad0:	00000200 	andeq	r0, r0, r0, lsl #4
    5ad4:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    5ad8:	67657269 	strbvs	r7, [r5, -r9, ror #4]!
    5adc:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    5ae0:	00682e72 	rsbeq	r2, r8, r2, ror lr
    5ae4:	00000002 	andeq	r0, r0, r2
    5ae8:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    5aec:	030002ae 	movweq	r0, #686	; 0x2ae
    5af0:	5908011a 	stmdbpl	r8, {r1, r3, r4, r8}
    5af4:	01040200 	mrseq	r0, R12_usr
    5af8:	bc066606 	stclt	6, cr6, [r6], {6}
    5afc:	8383834c 	orrhi	r8, r3, #76, 6	; 0x30000001
    5b00:	67848383 	strvs	r8, [r4, r3, lsl #7]
    5b04:	c9084df4 	stmdbgt	r8, {r2, r4, r5, r6, r7, r8, sl, fp, lr}
    5b08:	083d084d 	ldmdaeq	sp!, {r0, r2, r3, r6, fp}
    5b0c:	3d084d59 	stccc	13, cr4, [r8, #-356]	; 0xfffffe9c
    5b10:	0869d7bb 	stmdaeq	r9!, {r0, r1, r3, r4, r5, r7, r8, r9, sl, ip, lr, pc}^
    5b14:	4d590859 	ldclmi	8, cr0, [r9, #-356]	; 0xfffffe9c
    5b18:	004b3d08 	subeq	r3, fp, r8, lsl #26
    5b1c:	06010402 	streq	r0, [r1], -r2, lsl #8
    5b20:	a0bd0666 	adcsge	r0, sp, r6, ror #12
    5b24:	020084f4 	andeq	r8, r0, #244, 8	; 0xf4000000
    5b28:	2e060104 	adfcss	f0, f6, f4
    5b2c:	f3260806 	vsub.i32	d0, d6, d6
    5b30:	4b3d084d 	blmi	f47c6c <mailbuffer+0xf0cb7c>
    5b34:	01040200 	mrseq	r0, R12_usr
    5b38:	bc066606 	stclt	6, cr6, [r6], {6}
    5b3c:	0602ad08 	streq	sl, [r2], -r8, lsl #26
    5b40:	ca010100 	bgt	45f48 <mailbuffer+0xae58>
    5b44:	02000004 	andeq	r0, r0, #4
    5b48:	00021200 	andeq	r1, r2, r0, lsl #4
    5b4c:	fb010200 	blx	46356 <mailbuffer+0xb266>
    5b50:	01000d0e 	tsteq	r0, lr, lsl #26
    5b54:	00010101 	andeq	r0, r1, r1, lsl #2
    5b58:	00010000 	andeq	r0, r1, r0
    5b5c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    5b60:	2f656d6f 	svccs	0x00656d6f
    5b64:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    5b68:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    5b6c:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    5b70:	6f746b73 	svcvs	0x00746b73
    5b74:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    5b78:	61522f69 	cmpvs	r2, r9, ror #30
    5b7c:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    5b80:	50797272 	rsbspl	r7, r9, r2, ror r2
    5b84:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    5b88:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    5b8c:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    5b90:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    5b94:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    5b98:	442f6f6d 	strtmi	r6, [pc], #-3949	; 5ba0 <_start-0x2460>
    5b9c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5ba0:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 59e0 <_start-0x2620>
    5ba4:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    5ba8:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 5aec <_start-0x2514>
    5bac:	2f006269 	svccs	0x00006269
    5bb0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5bb4:	6f6a6c2f 	svcvs	0x006a6c2f
    5bb8:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    5bbc:	442f7275 	strtmi	r7, [pc], #-629	; 5bc4 <_start-0x243c>
    5bc0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5bc4:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    5bc8:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    5bcc:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    5bd0:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5bd4:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    5bd8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    5bdc:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    5be0:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    5be4:	442f7265 	strtmi	r7, [pc], #-613	; 5bec <_start-0x2414>
    5be8:	2f6f6d65 	svccs	0x006f6d65
    5bec:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    5bf0:	2f737265 	svccs	0x00737265
    5bf4:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    5bf8:	2f343135 	svccs	0x00343135
    5bfc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5c00:	2f656475 	svccs	0x00656475
    5c04:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    5c08:	6f682f00 	svcvs	0x00682f00
    5c0c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 5a60 <_start-0x25a0>
    5c10:	61736f6a 	cmnvs	r3, sl, ror #30
    5c14:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    5c18:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5c1c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5c20:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    5c24:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    5c28:	72656270 	rsbvc	r6, r5, #112, 4
    5c2c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5c30:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    5c34:	4f545265 	svcmi	0x00545265
    5c38:	616d2d53 	cmnvs	sp, r3, asr sp
    5c3c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    5c40:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    5c44:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    5c48:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5c4c:	616c2f73 	smcvs	49907	; 0xc2f3
    5c50:	3135396e 	teqcc	r5, lr, ror #18
    5c54:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
    5c58:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5c5c:	75000065 	strvc	r0, [r0, #-101]	; 0xffffff9b
    5c60:	61676273 	smcvs	30243	; 0x7623
    5c64:	6170656d 	cmnvs	r0, sp, ror #10
    5c68:	00632e64 	rsbeq	r2, r3, r4, ror #28
    5c6c:	75000001 	strvc	r0, [r0, #-1]
    5c70:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
    5c74:	00000200 	andeq	r0, r0, r0, lsl #4
    5c78:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    5c7c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5c80:	75000002 	strvc	r0, [r0, #-2]
    5c84:	6f636273 	svcvs	0x00636273
    5c88:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    5c8c:	73726170 	cmnvc	r2, #112, 2
    5c90:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    5c94:	00000200 	andeq	r0, r0, r0, lsl #4
    5c98:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5c9c:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    5ca0:	00000200 	andeq	r0, r0, r0, lsl #4
    5ca4:	73627375 	cmnvc	r2, #-738197503	; 0xd4000001
    5ca8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    5cac:	00682e67 	rsbeq	r2, r8, r7, ror #28
    5cb0:	75000002 	strvc	r0, [r0, #-2]
    5cb4:	65646273 	strbvs	r6, [r4, #-627]!	; 0xfffffd8d
    5cb8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    5cbc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5cc0:	77640000 	strbvc	r0, [r4, -r0]!
    5cc4:	64696368 	strbtvs	r6, [r9], #-872	; 0xfffffc98
    5cc8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    5ccc:	00682e65 	rsbeq	r2, r8, r5, ror #28
    5cd0:	75000002 	strvc	r0, [r0, #-2]
    5cd4:	6e656273 	mcrvs	2, 3, r6, cr5, cr3, {3}
    5cd8:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    5cdc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5ce0:	00000200 	andeq	r0, r0, r0, lsl #4
    5ce4:	72627375 	rsbvc	r7, r2, #-738197503	; 0xd4000001
    5ce8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    5cec:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    5cf0:	00000200 	andeq	r0, r0, r0, lsl #4
    5cf4:	68627375 	stmdavs	r2!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    5cf8:	682e6469 	stmdavs	lr!, {r0, r3, r5, r6, sl, sp, lr}
    5cfc:	00000200 	andeq	r0, r0, r0, lsl #4
    5d00:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    5d04:	0300682e 	movweq	r6, #2094	; 0x82e
    5d08:	73750000 	cmnvc	r5, #0
    5d0c:	6d616762 	stclvs	7, cr6, [r1, #-392]!	; 0xfffffe78
    5d10:	64617065 	strbtvs	r7, [r1], #-101	; 0xffffff9b
    5d14:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5d18:	77640000 	strbvc	r0, [r4, -r0]!
    5d1c:	72696368 	rsbvc	r6, r9, #104, 6	; 0xa0000001
    5d20:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
    5d24:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
    5d28:	00020068 	andeq	r0, r2, r8, rrx
    5d2c:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    5d30:	72666963 	rsbvc	r6, r6, #1622016	; 0x18c000
    5d34:	73656d61 	cmnvc	r5, #6208	; 0x1840
    5d38:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    5d3c:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    5d40:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5d44:	77640000 	strbvc	r0, [r4, -r0]!
    5d48:	78696368 	stmdavc	r9!, {r3, r5, r6, r8, r9, sp, lr}^
    5d4c:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    5d50:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    5d54:	61746164 	cmnvs	r4, r4, ror #2
    5d58:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5d5c:	00000000 	andeq	r0, r0, r0
    5d60:	b2b00205 	adcslt	r0, r0, #1342177280	; 0x50000000
    5d64:	d4030002 	strle	r0, [r3], #-2
    5d68:	59080100 	stmdbpl	r8, {r8}
    5d6c:	01040200 	mrseq	r0, R12_usr
    5d70:	bc066606 	stclt	6, cr6, [r6], {6}
    5d74:	67678483 	strbvs	r8, [r7, -r3, lsl #9]!
    5d78:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    5d7c:	02006768 	andeq	r6, r0, #104, 14	; 0x1a00000
    5d80:	00670304 	rsbeq	r0, r7, r4, lsl #6
    5d84:	f3030402 	vshl.u8	d0, d2, d3
    5d88:	03040200 	movweq	r0, #16896	; 0x4200
    5d8c:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
    5d90:	0200ef03 	andeq	lr, r0, #3, 30
    5d94:	66060104 	strvs	r0, [r6], -r4, lsl #2
    5d98:	00676c06 	rsbeq	r6, r7, r6, lsl #24
    5d9c:	67030402 	strvs	r0, [r3, -r2, lsl #8]
    5da0:	03040200 	movweq	r0, #16896	; 0x4200
    5da4:	0402009d 	streq	r0, [r2], #-157	; 0xffffff63
    5da8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    5dac:	bb686769 	bllt	1a1fb58 <mailbuffer+0x19e4a68>
    5db0:	01040200 	mrseq	r0, R12_usr
    5db4:	08068206 	stmdaeq	r6, {r1, r2, r9, pc}
    5db8:	3d084d59 	stccc	13, cr4, [r8, #-356]	; 0xfffffe9c
    5dbc:	01040200 	mrseq	r0, R12_usr
    5dc0:	bc066606 	stclt	6, cr6, [r6], {6}
    5dc4:	84698384 	strbthi	r8, [r9], #-900	; 0xfffffc7c
    5dc8:	83846983 	orrhi	r6, r4, #2146304	; 0x20c000
    5dcc:	83846983 	orrhi	r6, r4, #2146304	; 0x20c000
    5dd0:	4df36983 	ldclmi	9, cr6, [r3, #524]!	; 0x20c
    5dd4:	4b4b7908 	blmi	12e41fc <mailbuffer+0x12a910c>
    5dd8:	082108bb 	stmdaeq	r1!, {r0, r1, r3, r4, r5, r7, fp}
    5ddc:	9f9108c9 	svcls	0x009108c9
    5de0:	2202bbd7 	andcs	fp, r2, #220160	; 0x35c00
    5de4:	3d08f313 	stccc	3, cr15, [r8, #-76]	; 0xffffffb4
    5de8:	00677608 	rsbeq	r7, r7, r8, lsl #12
    5dec:	03020402 	movweq	r0, #9218	; 0x2402
    5df0:	00900873 	addseq	r0, r0, r3, ror r8
    5df4:	06010402 	streq	r0, [r1], -r2, lsl #8
    5df8:	11030666 	tstne	r3, r6, ror #12
    5dfc:	0868d7f2 	stmdaeq	r8!, {r1, r4, r5, r6, r7, r8, r9, sl, ip, lr, pc}^
    5e00:	3d08a075 	stccc	0, cr10, [r8, #-468]	; 0xfffffe2c
    5e04:	0d03d7f4 	stceq	7, cr13, [r3, #-976]	; 0xfffffc30
    5e08:	bb3e0866 	bllt	f87fa8 <mailbuffer+0xf4ceb8>
    5e0c:	84837508 	strhi	r7, [r3], #1288	; 0x508
    5e10:	68676767 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    5e14:	f468bb2f 			; <UNDEFINED> instruction: 0xf468bb2f
    5e18:	67bb304b 	ldrvs	r3, [fp, fp, asr #32]!
    5e1c:	2108d730 	tstcs	r8, r0, lsr r7
    5e20:	08bb3067 	ldmeq	fp!, {r0, r1, r2, r5, r6, ip, sp}
    5e24:	08210821 	stmdaeq	r1!, {r0, r5, fp}
    5e28:	83316721 	teqhi	r1, #8650752	; 0x840000
    5e2c:	009f2f67 	addseq	r2, pc, r7, ror #30
    5e30:	06010402 	streq	r0, [r1], -r2, lsl #8
    5e34:	2f9f0666 	svccs	0x009f0666
    5e38:	40024d4b 	andmi	r4, r2, fp, asr #26
    5e3c:	4b676814 	blmi	19dfe94 <mailbuffer+0x19a4da4>
    5e40:	02040200 	andeq	r0, r4, #0, 4
    5e44:	7708304c 	strvc	r3, [r8, -ip, asr #32]
    5e48:	4b67364b 	blmi	19d377c <mailbuffer+0x199868c>
    5e4c:	004b674c 	subeq	r6, fp, ip, asr #14
    5e50:	4c030402 	cfstrsmi	mvf0, [r3], {2}
    5e54:	4b304b30 	blmi	c18b1c <mailbuffer+0xbdda2c>
    5e58:	4b304b30 	blmi	c18b20 <mailbuffer+0xbdda30>
    5e5c:	4b304b30 	blmi	c18b24 <mailbuffer+0xbdda34>
    5e60:	67678330 			; <UNDEFINED> instruction: 0x67678330
    5e64:	01040200 	mrseq	r0, R12_usr
    5e68:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
    5e6c:	004a0204 	subeq	r0, sl, r4, lsl #4
    5e70:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
    5e74:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    5e78:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    5e7c:	9e060104 	adflss	f0, f6, f4
    5e80:	02040200 	andeq	r0, r4, #0, 4
    5e84:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    5e88:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
    5e8c:	d8060404 	stmdale	r6, {r2, sl}
    5e90:	01040200 	mrseq	r0, R12_usr
    5e94:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
    5e98:	02009d01 	andeq	r9, r0, #1, 26	; 0x40
    5e9c:	00bc0204 	adcseq	r0, ip, r4, lsl #4
    5ea0:	08040402 	stmdaeq	r4, {r1, sl}
    5ea4:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
    5ea8:	02003204 	andeq	r3, r0, #4, 4	; 0x40000000
    5eac:	78030404 	stmdavc	r3, {r2, sl}
    5eb0:	02002008 	andeq	r2, r0, #8
    5eb4:	66060204 	strvs	r0, [r6], -r4, lsl #4
    5eb8:	03040200 	movweq	r0, #16896	; 0x4200
    5ebc:	0b030682 	bleq	c78cc <mailbuffer+0x8c7dc>
    5ec0:	00676866 	rsbeq	r6, r7, r6, ror #16
    5ec4:	67040402 	strvs	r0, [r4, -r2, lsl #8]
    5ec8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    5ecc:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    5ed0:	00d40404 	sbcseq	r0, r4, r4, lsl #8
    5ed4:	06010402 	streq	r0, [r1], -r2, lsl #8
    5ed8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    5edc:	6a068203 	bvs	1a66f0 <mailbuffer+0x16b600>
    5ee0:	08676768 	stmdaeq	r7!, {r3, r5, r6, r8, r9, sl, sp, lr}^
    5ee4:	30bb4d3d 	adcscc	r4, fp, sp, lsr sp
    5ee8:	2e7f8b03 	vaddcs.f64	d24, d15, d3
    5eec:	01040200 	mrseq	r0, R12_usr
    5ef0:	6600f903 	strvs	pc, [r0], -r3, lsl #18
    5ef4:	01040200 	mrseq	r0, R12_usr
    5ef8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    5efc:	91086801 	tstls	r8, r1, lsl #16
    5f00:	4b3d084d 	blmi	f4803c <mailbuffer+0xf0cf4c>
    5f04:	01040200 	mrseq	r0, R12_usr
    5f08:	bd066606 	stclt	6, cr6, [r6, #-24]	; 0xffffffe8
    5f0c:	8467842d 	strbthi	r8, [r7], #-1069	; 0xfffffbd3
    5f10:	842d4ea0 	strthi	r4, [sp], #-3744	; 0xfffff160
    5f14:	83838367 	orrhi	r8, r3, #-1677721599	; 0x9c000001
    5f18:	834da084 	movthi	sl, #53380	; 0xd084
    5f1c:	a0679f84 	rsbge	r9, r7, r4, lsl #31
    5f20:	a0304ea0 	eorsge	r4, r0, r0, lsr #29
    5f24:	4da084bc 	cfstrsmi	mvf8, [r0, #752]!	; 0x2f0
    5f28:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    5f2c:	06820601 	streq	r0, [r2], r1, lsl #12
    5f30:	a084f6bb 			; <UNDEFINED> instruction: 0xa084f6bb
    5f34:	0200bb4d 	andeq	fp, r0, #78848	; 0x13400
    5f38:	82060104 	andhi	r0, r6, #4, 2
    5f3c:	6403bb06 	strvs	fp, [r3], #-2822	; 0xfffff4fa
    5f40:	f22103d6 	vcge.s32	q0, <illegal reg q8.5>, q3
    5f44:	9f4da084 	svcls	0x004da084
    5f48:	02002108 	andeq	r2, r0, #8, 2
    5f4c:	82060104 	andhi	r0, r6, #4, 2
    5f50:	8183bc06 	orrhi	fp, r3, r6, lsl #24
    5f54:	24089b4d 	strcs	r9, [r8], #-2893	; 0xfffff4b3
    5f58:	4ebc5062 	cdpmi	0, 11, cr5, cr12, cr2, {3}
    5f5c:	bcbc4c83 	ldclt	12, cr4, [ip], #524	; 0x20c
    5f60:	8483844d 	strhi	r8, [r3], #1101	; 0x44d
    5f64:	08463247 	stmdaeq	r6, {r0, r1, r2, r6, r9, ip, sp}^
    5f68:	084ebcb2 	stmdaeq	lr, {r1, r4, r5, r7, sl, fp, ip, sp, pc}^
    5f6c:	4ebcd722 	cdpmi	7, 11, cr13, cr12, cr2, {1}
    5f70:	5a08f367 	bpl	242d14 <mailbuffer+0x207c24>
    5f74:	69210868 	stmdbvs	r1!, {r3, r5, r6, fp}
    5f78:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    5f7c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    5f80:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    5f84:	66060104 	strvs	r0, [r6], -r4, lsl #2
    5f88:	4df3bb06 	ldclmi	11, cr11, [r3, #24]!
    5f8c:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
    5f90:	66060104 	strvs	r0, [r6], -r4, lsl #2
    5f94:	0200bc06 	andeq	fp, r0, #1536	; 0x600
    5f98:	82060104 	andhi	r0, r6, #4, 2
    5f9c:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    5fa0:	82060104 	andhi	r0, r6, #4, 2
    5fa4:	0200bc06 	andeq	fp, r0, #1536	; 0x600
    5fa8:	82060104 	andhi	r0, r6, #4, 2
    5fac:	00bbbb06 	adcseq	fp, fp, r6, lsl #22
    5fb0:	06010402 	streq	r0, [r1], -r2, lsl #8
    5fb4:	08bb0682 	ldmeq	fp!, {r1, r7, r9, sl}
    5fb8:	e508f491 	str	pc, [r8, #-1169]	; 0xfffffb6f
    5fbc:	4b750869 	blmi	1d48168 <mailbuffer+0x1d0d078>
    5fc0:	01040200 	mrseq	r0, R12_usr
    5fc4:	bc066606 	stclt	6, cr6, [r6], {6}
    5fc8:	01040200 	mrseq	r0, R12_usr
    5fcc:	bb066606 	bllt	19f7ec <mailbuffer+0x1646fc>
    5fd0:	01040200 	mrseq	r0, R12_usr
    5fd4:	bc069e06 	stclt	14, cr9, [r6], {6}
    5fd8:	0200a19f 	andeq	sl, r0, #-1073741785	; 0xc0000027
    5fdc:	82060104 	andhi	r0, r6, #4, 2
    5fe0:	084b8406 	stmdaeq	fp, {r1, r2, sl, pc}^
    5fe4:	68838340 	stmvs	r3, {r6, r8, r9, pc}
    5fe8:	3d084dd7 	stccc	13, cr4, [r8, #-860]	; 0xfffffca4
    5fec:	33468583 	movtcc	r8, #25987	; 0x6583
    5ff0:	d8cf0845 	stmiale	pc, {r0, r2, r6, fp}^	; <UNPREDICTABLE>
    5ff4:	0819034d 	ldmdaeq	r9, {r0, r2, r3, r6, r8, r9}
    5ff8:	9f9f833c 	svcls	0x009f833c
    5ffc:	4685839f 	pkhbtmi	r8, r5, pc, lsl #7	; <UNPREDICTABLE>
    6000:	60084533 	andvs	r4, r8, r3, lsr r5
    6004:	8583c908 	strhi	ip, [r3, #2312]	; 0x908
    6008:	18240246 	stmdane	r4!, {r1, r2, r6, r9}
    600c:	01000402 	tsteq	r0, r2, lsl #8
    6010:	00011101 	andeq	r1, r1, r1, lsl #2
    6014:	da000200 	ble	681c <_start-0x17e4>
    6018:	02000000 	andeq	r0, r0, #0
    601c:	0d0efb01 	vstreq	d15, [lr, #-4]
    6020:	01010100 	mrseq	r0, (UNDEF: 17)
    6024:	00000001 	andeq	r0, r0, r1
    6028:	01000001 	tsteq	r0, r1
    602c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5f78 <_start-0x2088>
    6030:	6a6c2f65 	bvs	1b11dcc <mailbuffer+0x1ad6cdc>
    6034:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    6038:	2f727566 	svccs	0x00727566
    603c:	6b736544 	blvs	1cdf554 <mailbuffer+0x1ca4464>
    6040:	2f706f74 	svccs	0x00706f74
    6044:	2f697072 	svccs	0x00697072
    6048:	70736152 	rsbsvc	r6, r3, r2, asr r1
    604c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    6050:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    6054:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    6058:	534f5452 	movtpl	r5, #62546	; 0xf452
    605c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    6060:	2f726574 	svccs	0x00726574
    6064:	6f6d6544 	svcvs	0x006d6544
    6068:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    606c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    6070:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    6074:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    6078:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    607c:	6f682f00 	svcvs	0x00682f00
    6080:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 5ed4 <_start-0x212c>
    6084:	61736f6a 	cmnvs	r3, sl, ror #30
    6088:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    608c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6090:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6094:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    6098:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    609c:	72656270 	rsbvc	r6, r5, #112, 4
    60a0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    60a4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    60a8:	4f545265 	svcmi	0x00545265
    60ac:	616d2d53 	cmnvs	sp, r3, asr sp
    60b0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    60b4:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    60b8:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    60bc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    60c0:	616c2f73 	smcvs	49907	; 0xc2f3
    60c4:	3135396e 	teqcc	r5, lr, ror #18
    60c8:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
    60cc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    60d0:	73752f65 	cmnvc	r5, #404	; 0x194
    60d4:	00006970 	andeq	r6, r0, r0, ror r9
    60d8:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
    60dc:	6e6f7268 	cdpvs	2, 6, cr7, cr15, cr8, {3}
    60e0:	2e657a69 	vnmulcs.f32	s15, s10, s19
    60e4:	00010063 	andeq	r0, r1, r3, rrx
    60e8:	70797400 	rsbsvc	r7, r9, r0, lsl #8
    60ec:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    60f0:	00000200 	andeq	r0, r0, r0, lsl #4
    60f4:	02050000 	andeq	r0, r5, #0
    60f8:	0002cbdc 	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
    60fc:	08011e03 	stmdaeq	r1, {r0, r1, r9, sl, fp, ip}
    6100:	08304c22 	ldmdaeq	r0!, {r1, r5, sl, fp, lr}
    6104:	bb3f0822 	bllt	fc8194 <mailbuffer+0xf8d0a4>
    6108:	0030f34d 	eorseq	pc, r0, sp, asr #6
    610c:	06010402 	streq	r0, [r1], -r2, lsl #8
    6110:	08bb069e 	ldmeq	fp!, {r1, r2, r3, r4, r7, r9, sl}
    6114:	03bda022 			; <UNDEFINED> instruction: 0x03bda022
    6118:	db2e2e35 	blle	b919f4 <mailbuffer+0xb56904>
    611c:	309c342a 	addscc	r3, ip, sl, lsr #8
    6120:	000402c2 	andeq	r0, r4, r2, asr #5
    6124:	03260101 	teqeq	r6, #1073741824	; 0x40000000
    6128:	00020000 	andeq	r0, r2, r0
    612c:	00000196 	muleq	r0, r6, r1
    6130:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6134:	0101000d 	tsteq	r1, sp
    6138:	00000101 	andeq	r0, r0, r1, lsl #2
    613c:	00000100 	andeq	r0, r0, r0, lsl #2
    6140:	6f682f01 	svcvs	0x00682f01
    6144:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 5f98 <_start-0x2068>
    6148:	61736f6a 	cmnvs	r3, sl, ror #30
    614c:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    6150:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6154:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6158:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    615c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    6160:	72656270 	rsbvc	r6, r5, #112, 4
    6164:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    6168:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    616c:	4f545265 	svcmi	0x00545265
    6170:	616d2d53 	cmnvs	sp, r3, asr sp
    6174:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    6178:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    617c:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    6180:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6184:	616c2f73 	smcvs	49907	; 0xc2f3
    6188:	3135396e 	teqcc	r5, lr, ror #18
    618c:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    6190:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    6194:	2f656d6f 	svccs	0x00656d6f
    6198:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    619c:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    61a0:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    61a4:	6f746b73 	svcvs	0x00746b73
    61a8:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    61ac:	61522f69 	cmpvs	r2, r9, ror #30
    61b0:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    61b4:	50797272 	rsbspl	r7, r9, r2, ror r2
    61b8:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    61bc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    61c0:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    61c4:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    61c8:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    61cc:	442f6f6d 	strtmi	r6, [pc], #-3949	; 61d4 <_start-0x1e2c>
    61d0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    61d4:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 6014 <_start-0x1fec>
    61d8:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    61dc:	692f3431 	stmdbvs	pc!, {r0, r4, r5, sl, ip, sp}	; <UNPREDICTABLE>
    61e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    61e4:	752f6564 	strvc	r6, [pc, #-1380]!	; 5c88 <_start-0x2378>
    61e8:	00697073 	rsbeq	r7, r9, r3, ror r0
    61ec:	62737500 	rsbsvs	r7, r3, #0, 10
    61f0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    61f4:	632e676e 	teqvs	lr, #28835840	; 0x1b80000
    61f8:	00000100 	andeq	r0, r0, r0, lsl #2
    61fc:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
    6200:	00020068 	andeq	r0, r2, r8, rrx
    6204:	70797400 	rsbsvc	r7, r9, r0, lsl #8
    6208:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    620c:	00000200 	andeq	r0, r0, r0, lsl #4
    6210:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6214:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    6218:	00000200 	andeq	r0, r0, r0, lsl #4
    621c:	73627375 	cmnvc	r2, #-738197503	; 0xd4000001
    6220:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    6224:	00682e67 	rsbeq	r2, r8, r7, ror #28
    6228:	75000002 	strvc	r0, [r0, #-2]
    622c:	65646273 	strbvs	r6, [r4, #-627]!	; 0xfffffd8d
    6230:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    6234:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6238:	73750000 	cmnvc	r5, #0
    623c:	6e6f6362 	cdpvs	3, 6, cr6, cr15, cr2, {3}
    6240:	70676966 	rsbvc	r6, r7, r6, ror #18
    6244:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    6248:	00682e72 	rsbeq	r2, r8, r2, ror lr
    624c:	64000002 	strvs	r0, [r0], #-2
    6250:	69636877 	stmdbvs	r3!, {r0, r1, r2, r4, r5, r6, fp, sp, lr}^
    6254:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    6258:	682e6563 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, sp, lr}
    625c:	00000200 	andeq	r0, r0, r0, lsl #4
    6260:	65627375 	strbvs	r7, [r2, #-885]!	; 0xfffffc8b
    6264:	6f70646e 	svcvs	0x0070646e
    6268:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    626c:	00020068 	andeq	r0, r2, r8, rrx
    6270:	62737500 	rsbsvs	r7, r3, #0, 10
    6274:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    6278:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
    627c:	00020068 	andeq	r0, r2, r8, rrx
    6280:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    6284:	6f726963 	svcvs	0x00726963
    6288:	6f70746f 	svcvs	0x0070746f
    628c:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    6290:	00000200 	andeq	r0, r0, r0, lsl #4
    6294:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    6298:	61726669 	cmnvs	r2, r9, ror #12
    629c:	6373656d 	cmnvs	r3, #457179136	; 0x1b400000
    62a0:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
    62a4:	2e72656c 	cdpcs	5, 7, cr6, cr2, cr12, {3}
    62a8:	00020068 	andeq	r0, r2, r8, rrx
    62ac:	68776400 	ldmdavs	r7!, {sl, sp, lr}^
    62b0:	66786963 	ldrbtvs	r6, [r8], -r3, ror #18
    62b4:	74737265 	ldrbtvc	r7, [r3], #-613	; 0xfffffd9b
    62b8:	64656761 	strbtvs	r6, [r5], #-1889	; 0xfffff89f
    62bc:	2e617461 	cdpcs	4, 6, cr7, cr1, cr1, {3}
    62c0:	00020068 	andeq	r0, r2, r8, rrx
    62c4:	05000000 	streq	r0, [r0, #-0]
    62c8:	02cd7c02 	sbceq	r7, sp, #512	; 0x200
    62cc:	011f0300 	tsteq	pc, r0, lsl #6
    62d0:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    62d4:	66060104 	strvs	r0, [r6], -r4, lsl #2
    62d8:	0067bc06 	rsbeq	fp, r7, r6, lsl #24
    62dc:	06010402 	streq	r0, [r1], -r2, lsl #8
    62e0:	68bc0682 	ldmvs	ip!, {r1, r7, r9, sl}
    62e4:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    62e8:	06820601 	streq	r0, [r2], r1, lsl #12
    62ec:	4d2108bb 	stcmi	8, cr0, [r1, #-748]!	; 0xfffffd14
    62f0:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    62f4:	66060104 	strvs	r0, [r6], -r4, lsl #2
    62f8:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    62fc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    6300:	6784bb06 	strvs	fp, [r4, r6, lsl #22]
    6304:	00210884 	eoreq	r0, r1, r4, lsl #17
    6308:	06010402 	streq	r0, [r1], -r2, lsl #8
    630c:	08bb0682 	ldmeq	fp!, {r1, r7, r9, sl}
    6310:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
    6314:	06820601 	streq	r0, [r2], r1, lsl #12
    6318:	0200bbbb 	andeq	fp, r0, #191488	; 0x2ec00
    631c:	82060104 	andhi	r0, r6, #4, 2
    6320:	c908bb06 	stmdbgt	r8, {r1, r2, r8, r9, fp, ip, sp, pc}
    6324:	003d084d 	eorseq	r0, sp, sp, asr #16
    6328:	06010402 	streq	r0, [r1], -r2, lsl #8
    632c:	00bc0666 	adcseq	r0, ip, r6, ror #12
    6330:	06010402 	streq	r0, [r1], -r2, lsl #8
    6334:	83bb0682 			; <UNDEFINED> instruction: 0x83bb0682
    6338:	83846883 	orrhi	r6, r4, #8585216	; 0x830000
    633c:	084df369 	stmdaeq	sp, {r0, r3, r5, r6, r8, r9, ip, sp, lr, pc}^
    6340:	040200e5 	streq	r0, [r2], #-229	; 0xffffff1b
    6344:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    6348:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    634c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    6350:	bb8484bc 	bllt	fe127648 <_estack+0xf6117648>
    6354:	01040200 	mrseq	r0, R12_usr
    6358:	bc068206 	sfmlt	f0, 1, [r6], {6}
    635c:	01040200 	mrseq	r0, R12_usr
    6360:	bb068206 	bllt	1a6b80 <mailbuffer+0x16ba90>
    6364:	46869d9f 	pkhbtmi	r9, r6, pc, lsl #27	; <UNPREDICTABLE>
    6368:	834d9608 	movthi	r9, #54792	; 0xd608
    636c:	4da08367 	stcmi	3, cr8, [r0, #412]!	; 0x19c
    6370:	00d78368 	sbcseq	r8, r7, r8, ror #6
    6374:	06010402 	streq	r0, [r1], -r2, lsl #8
    6378:	9fbc0682 	svcls	0x00bc0682
    637c:	0846869d 	stmdaeq	r6, {r0, r2, r3, r4, r7, r9, sl, pc}^
    6380:	4d502a94 	vldrmi	s5, [r0, #-592]	; 0xfffffdb0
    6384:	4fa0bbbb 	svcmi	0x00a0bbbb
    6388:	01040200 	mrseq	r0, R12_usr
    638c:	bb069e06 	bllt	1adbac <mailbuffer+0x172abc>
    6390:	01040200 	mrseq	r0, R12_usr
    6394:	bb06ba06 	bllt	1b4bb4 <mailbuffer+0x179ac4>
    6398:	040200f4 	streq	r0, [r2], #-244	; 0xffffff0c
    639c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    63a0:	142c02bb 	strtne	r0, [ip], #-699	; 0xfffffd45
    63a4:	673d0868 	ldrvs	r0, [sp, -r8, ror #16]!
    63a8:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    63ac:	02004d02 	andeq	r4, r0, #2, 26	; 0x80
    63b0:	77030204 	strvc	r0, [r3, -r4, lsl #4]
    63b4:	040200d6 	streq	r0, [r2], #-214	; 0xffffff2a
    63b8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    63bc:	a0820b03 	addge	r0, r2, r3, lsl #22
    63c0:	01040200 	mrseq	r0, R12_usr
    63c4:	bb068206 	bllt	1a6be4 <mailbuffer+0x16baf4>
    63c8:	00bb8483 	adcseq	r8, fp, r3, lsl #9
    63cc:	06010402 	streq	r0, [r1], -r2, lsl #8
    63d0:	bcbb0682 	ldclt	6, cr0, [fp], #520	; 0x208
    63d4:	3d0869f3 	stccc	9, cr6, [r8, #-972]	; 0xfffffc34
    63d8:	01040200 	mrseq	r0, R12_usr
    63dc:	bb066606 	bllt	19fbfc <mailbuffer+0x164b0c>
    63e0:	08695908 	stmdaeq	r9!, {r3, r8, fp, ip, lr}^
    63e4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    63e8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    63ec:	020083bc 	andeq	r8, r0, #188, 6	; 0xf0000002
    63f0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    63f4:	0200bc06 	andeq	fp, r0, #1536	; 0x600
    63f8:	82060104 	andhi	r0, r6, #4, 2
    63fc:	9d9fbb06 	vldrls	d11, [pc, #24]	; 641c <_start-0x1be4>
    6400:	4d4cb108 	stfmip	f3, [ip, #-32]	; 0xffffffe0
    6404:	84836767 	strhi	r6, [r3], #1895	; 0x767
    6408:	4b684d4c 	blmi	1a19940 <mailbuffer+0x19de850>
    640c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
    6410:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    6414:	089d9fbc 	ldmeq	sp, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, pc}
    6418:	4c4f2b5b 	mcrrmi	11, 5, r2, pc, cr11
    641c:	849f9f4d 	ldrhi	r9, [pc], #3917	; 6424 <_start-0x1bdc>
    6420:	02004e4c 	andeq	r4, r0, #76, 28	; 0x4c0
    6424:	82060104 	andhi	r0, r6, #4, 2
    6428:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
    642c:	9e060104 	adflss	f0, f6, f4
    6430:	68d9bb06 	ldmvs	r9, {r1, r2, r8, r9, fp, ip, sp, pc}^
    6434:	004c2208 	subeq	r2, ip, r8, lsl #4
    6438:	03020402 	movweq	r0, #9218	; 0x2402
    643c:	02004a7a 	andeq	r4, r0, #499712	; 0x7a000
    6440:	66060104 	strvs	r0, [r6], -r4, lsl #2
    6444:	820b0306 	andhi	r0, fp, #402653184	; 0x18000000
    6448:	02d74cbc 	sbcseq	r4, r7, #188, 24	; 0xbc00
    644c:	01010006 	tsteq	r1, r6
    6450:	00000074 	andeq	r0, r0, r4, ror r0
    6454:	00410002 	subeq	r0, r1, r2
    6458:	01020000 	mrseq	r0, (UNDEF: 2)
    645c:	000d0efb 	strdeq	r0, [sp], -fp
    6460:	01010101 	tsteq	r1, r1, lsl #2
    6464:	01000000 	mrseq	r0, (UNDEF: 0)
    6468:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    646c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6470:	2f2e2e2f 	svccs	0x002e2e2f
    6474:	2f637273 	svccs	0x00637273
    6478:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    647c:	632f6363 	teqvs	pc, #-1946157055	; 0x8c000001
    6480:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    6484:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
    6488:	6c00006d 	stcvs	0, cr0, [r0], {109}	; 0x6d
    648c:	66316269 	ldrtvs	r6, [r1], -r9, ror #4
    6490:	73636e75 	cmnvc	r3, #1872	; 0x750
    6494:	0100532e 	tsteq	r0, lr, lsr #6
    6498:	00000000 	andeq	r0, r0, r0
    649c:	da980205 	ble	fe606cb8 <_estack+0xf65f6cb8>
    64a0:	d8030002 	stmdale	r3, {r1}
    64a4:	2f300108 	svccs	0x00300108
    64a8:	2f2f2f2f 	svccs	0x002f2f2f
    64ac:	143e0230 	ldrtne	r0, [lr], #-560	; 0xfffffdd0
    64b0:	2f2f312f 	svccs	0x002f312f
    64b4:	2f920830 	svccs	0x00920830
    64b8:	66160332 			; <UNDEFINED> instruction: 0x66160332
    64bc:	2f2f2f2f 	svccs	0x002f2f2f
    64c0:	022f2f2f 	eoreq	r2, pc, #47, 30	; 0xbc
    64c4:	01010002 	tsteq	r1, r2
    64c8:	00000057 	andeq	r0, r0, r7, asr r0
    64cc:	00410002 	subeq	r0, r1, r2
    64d0:	01020000 	mrseq	r0, (UNDEF: 2)
    64d4:	000d0efb 	strdeq	r0, [sp], -fp
    64d8:	01010101 	tsteq	r1, r1, lsl #2
    64dc:	01000000 	mrseq	r0, (UNDEF: 0)
    64e0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    64e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    64e8:	2f2e2e2f 	svccs	0x002e2e2f
    64ec:	2f637273 	svccs	0x00637273
    64f0:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    64f4:	632f6363 	teqvs	pc, #-1946157055	; 0x8c000001
    64f8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    64fc:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
    6500:	6c00006d 	stcvs	0, cr0, [r0], {109}	; 0x6d
    6504:	66316269 	ldrtvs	r6, [r1], -r9, ror #4
    6508:	73636e75 	cmnvc	r3, #1872	; 0x750
    650c:	0100532e 	tsteq	r0, lr, lsr #6
    6510:	00000000 	andeq	r0, r0, r0
    6514:	dbac0205 	blle	feb06d30 <_estack+0xf6af6d30>
    6518:	ae030002 	cdpge	0, 0, cr0, cr3, cr2, {0}
    651c:	0202010b 	andeq	r0, r2, #-1073741822	; 0xc0000002
    6520:	Address 0x0000000000006520 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      10:	6b636954 	blvs	18da568 <mailbuffer+0x189f478>
      14:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      18:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      1c:	34204320 	strtcc	r4, [r0], #-800	; 0xfffffce0
      20:	332e392e 	teqcc	lr, #753664	; 0xb8000
      24:	31303220 	teqcc	r0, r0, lsr #4
      28:	32353035 	eorscc	r3, r5, #53	; 0x35
      2c:	70282039 	eorvc	r2, r8, r9, lsr r0
      30:	65726572 	ldrbvs	r6, [r2, #-1394]!	; 0xfffffa8e
      34:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
      38:	2d202965 	stccs	9, cr2, [r0, #-404]!	; 0xfffffe6c
      3c:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
      40:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
      44:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
      48:	6d2d2061 	stcvs	0, cr2, [sp, #-388]!	; 0xfffffe7c
      4c:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
      50:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
      54:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
      58:	2d203761 	stccs	7, cr3, [r0, #-388]!	; 0xfffffe7c
      5c:	6f6c666d 	svcvs	0x006c666d
      60:	612d7461 	teqvs	sp, r1, ror #8
      64:	683d6962 	ldmdavs	sp!, {r1, r5, r6, r8, fp, sp, lr}
      68:	20647261 	rsbcs	r7, r4, r1, ror #4
      6c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      70:	613d6863 	teqvs	sp, r3, ror #16
      74:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
      78:	2d20612d 	stfcss	f6, [r0, #-180]!	; 0xffffff4c
      7c:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
      80:	6f633d65 	svcvs	0x00633d65
      84:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
      88:	2037612d 	eorscs	r6, r7, sp, lsr #2
      8c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
      90:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
      94:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
      98:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
      9c:	616d2d20 	cmnvs	sp, r0, lsr #26
      a0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
      a4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
      a8:	20612d37 	rsbcs	r2, r1, r7, lsr sp
      ac:	75746d2d 	ldrbvc	r6, [r4, #-3373]!	; 0xfffff2d3
      b0:	633d656e 	teqvs	sp, #461373440	; 0x1b800000
      b4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
      b8:	37612d78 			; <UNDEFINED> instruction: 0x37612d78
      bc:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
      c0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
      c4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
      c8:	7261683d 	rsbvc	r6, r1, #3997696	; 0x3d0000
      cc:	672d2064 	strvs	r2, [sp, -r4, rrx]!
      d0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      d4:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
      d8:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
      dc:	39756e67 	ldmdbcc	r5!, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}^
      e0:	732d2039 	teqvc	sp, #57	; 0x39
      e4:	673d6474 			; <UNDEFINED> instruction: 0x673d6474
      e8:	3939756e 	ldmdbcc	r9!, {r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}
      ec:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
      f0:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
      f4:	20393975 	eorscs	r3, r9, r5, ror r9
      f8:	6973662d 	ldmdbvs	r3!, {r0, r2, r3, r5, r9, sl, sp, lr}^
      fc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     100:	6168632d 	cmnvs	r8, sp, lsr #6
     104:	662d2072 			; <UNDEFINED> instruction: 0x662d2072
     108:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xfffff197
     10c:	656d7572 	strbvs	r7, [sp, #-1394]!	; 0xfffffa8e
     110:	662d746e 	strtvs	r7, [sp], -lr, ror #8
     114:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     118:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     11c:	61507000 	cmpvs	r0, r0
     120:	006d6172 	rsbeq	r6, sp, r2, ror r1
     124:	724f7870 	subvc	r7, pc, #112, 16	; 0x700000
     128:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     12c:	4f546c61 	svcmi	0x00546c61
     130:	68730053 	ldmdavs	r3!, {r0, r1, r4, r6}^
     134:	2074726f 	rsbscs	r7, r4, pc, ror #4
     138:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     13c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     140:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     144:	54647000 	strbtpl	r7, [r4], #-0
     148:	5f4b5341 	svcpl	0x004b5341
     14c:	45444f43 	strbmi	r4, [r4, #-3907]	; 0xfffff0bd
     150:	6f507600 	svcvs	0x00507600
     154:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
     158:	68635364 	stmdavs	r3!, {r2, r5, r6, r8, r9, ip, lr}^
     15c:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     160:	2f007265 	svccs	0x00007265
     164:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     168:	6f6a6c2f 	svcvs	0x006a6c2f
     16c:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
     170:	442f7275 	strtmi	r7, [pc], #-629	; 178 <_start-0x7e88>
     174:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     178:	722f706f 	eorvc	r7, pc, #111	; 0x6f
     17c:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
     180:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     184:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     188:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     18c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     190:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     194:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
     198:	462f7265 	strtmi	r7, [pc], -r5, ror #4
     19c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     1a0:	2f534f54 	svccs	0x00534f54
     1a4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     1a8:	702f6563 	eorvc	r6, pc, r3, ror #10
     1ac:	6174726f 	cmnvs	r4, pc, ror #4
     1b0:	2f656c62 	svccs	0x00656c62
     1b4:	2f434347 	svccs	0x00434347
     1b8:	70736152 	rsbsvc	r6, r3, r2, asr r1
     1bc:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     1c0:	2f695079 	svccs	0x00695079
     1c4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     1c8:	7600632e 	strvc	r6, [r0], -lr, lsr #6
     1cc:	6b636954 	blvs	18da724 <mailbuffer+0x189f634>
     1d0:	00525349 	subseq	r5, r2, r9, asr #6
     1d4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     1d8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     1dc:	50767000 	rsbspl	r7, r6, r0
     1e0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     1e4:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     1e8:	72700073 	rsbsvc	r0, r0, #115	; 0x73
     1ec:	74655376 	strbtvc	r5, [r5], #-886	; 0xfffffc8a
     1f0:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
     1f4:	4972656d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
     1f8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1fc:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     200:	54787000 	ldrbtpl	r7, [r8], #-0
     204:	664f706f 	strbvs	r7, [pc], -pc, rrx
     208:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     20c:	425f006b 	subsmi	r0, pc, #107	; 0x6b
     210:	38324d43 	ldmdacc	r2!, {r0, r1, r6, r8, sl, fp, lr}
     214:	545f3533 	ldrbpl	r3, [pc], #-1331	; 21c <_start-0x7de4>
     218:	52454d49 	subpl	r4, r5, #4672	; 0x1240
     21c:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
     220:	50780053 	rsbspl	r0, r8, r3, asr r0
     224:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
     228:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     22c:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
     230:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     234:	78700072 	ldmdavc	r0!, {r1, r4, r5, r6}^
     238:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     23c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     240:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     244:	74536573 	ldrbvc	r6, [r3], #-1395	; 0xfffffa8d
     248:	006b6361 	rsbeq	r6, fp, r1, ror #6
     24c:	6f436c75 	svcvs	0x00436c75
     250:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
     254:	74614d65 	strbtvc	r4, [r1], #-3429	; 0xfffff29b
     258:	2f006863 	svccs	0x00006863
     25c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     260:	6f6a6c2f 	svcvs	0x006a6c2f
     264:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
     268:	442f7275 	strtmi	r7, [pc], #-629	; 270 <_start-0x7d90>
     26c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     270:	722f706f 	eorvc	r7, pc, #111	; 0x6f
     274:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
     278:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     27c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     280:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     284:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     288:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     28c:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
     290:	462f7265 	strtmi	r7, [pc], -r5, ror #4
     294:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     298:	2f534f54 	svccs	0x00534f54
     29c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     2a0:	702f6563 	eorvc	r6, pc, r3, ror #10
     2a4:	6174726f 	cmnvs	r4, pc, ror #4
     2a8:	2f656c62 	svccs	0x00656c62
     2ac:	2f434347 	svccs	0x00434347
     2b0:	70736152 	rsbsvc	r6, r3, r2, asr r1
     2b4:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     2b8:	2f695079 	svccs	0x00695079
     2bc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     2c0:	2e727369 	cdpcs	3, 7, cr7, cr2, cr9, {3}
     2c4:	6c750063 	ldclvs	0, cr0, [r5], #-396	; 0xfffffe74
     2c8:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     2cc:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     2d0:	7473654e 	ldrbtvc	r6, [r3], #-1358	; 0xfffffab2
     2d4:	00676e69 	rsbeq	r6, r7, r9, ror #28
     2d8:	53625f67 	cmnpl	r2, #412	; 0x19c
     2dc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     2e0:	76006465 	strvc	r6, [r0], -r5, ror #8
     2e4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     2e8:	6c656959 	stclvs	9, cr6, [r5], #-356	; 0xfffffe9c
     2ec:	6f725064 	svcvs	0x00725064
     2f0:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
     2f4:	7600726f 	strvc	r7, [r0], -pc, ror #4
     2f8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     2fc:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
     300:	69724372 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, lr}^
     304:	61636974 	smcvs	13972	; 0x3694
     308:	7870006c 	ldmdavc	r0!, {r2, r3, r5, r6}^
     30c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     310:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
     314:	76004243 	strvc	r4, [r0], -r3, asr #4
     318:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     31c:	53525349 	cmppl	r2, #603979777	; 0x24000001
     320:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     324:	73726946 	cmnvc	r2, #1146880	; 0x118000
     328:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
     32c:	5076006b 	rsbspl	r0, r6, fp, rrx
     330:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     334:	43746978 	cmnmi	r4, #120, 18	; 0x1e0000
     338:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     33c:	006c6163 	rsbeq	r6, ip, r3, ror #2
     340:	65724676 	ldrbvs	r4, [r2, #-1654]!	; 0xfffff98a
     344:	4f545265 	svcmi	0x00545265
     348:	53495f53 	movtpl	r5, #40787	; 0x9f53
     34c:	76700052 			; <UNDEFINED> instruction: 0x76700052
     350:	656e774f 	strbvs	r7, [lr, #-1871]!	; 0xfffff8b1
     354:	78700072 	ldmdavc	r0!, {r1, r4, r5, r6}^
     358:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
     35c:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     360:	43524364 	cmpmi	r2, #100, 6	; 0x90000001
     364:	78700042 	ldmdavc	r0!, {r1, r6}^
     368:	706d6554 	rsbvc	r6, sp, r4, asr r5
     36c:	6f437600 	svcvs	0x00437600
     370:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     374:	41656e69 	cmnmi	r5, r9, ror #28
     378:	6f546464 	svcvs	0x00546464
     37c:	616c6544 	cmnvs	ip, r4, asr #10
     380:	4c646579 	cfstr64mi	mvdx6, [r4], #-484	; 0xfffffe1c
     384:	00747369 	rsbseq	r7, r4, r9, ror #6
     388:	6f437670 	svcvs	0x00437670
     38c:	6961746e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     390:	0072656e 	rsbseq	r6, r2, lr, ror #10
     394:	6f437870 	svcvs	0x00437870
     398:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     39c:	46656e69 	strbtmi	r6, [r5], -r9, ror #28
     3a0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     3a4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     3a8:	73615078 	cmnvc	r1, #120	; 0x78
     3ac:	54646573 	strbtpl	r6, [r4], #-1395	; 0xfffffa8d
     3b0:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     3b4:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     3b8:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     3bc:	74497800 	strbvc	r7, [r9], #-2048	; 0xfffff800
     3c0:	61566d65 	cmpvs	r6, r5, ror #26
     3c4:	0065756c 	rsbeq	r7, r5, ip, ror #10
     3c8:	73694c78 	cmnvc	r9, #120, 24	; 0x7800
     3cc:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
     3d0:	6f682f00 	svcvs	0x00682f00
     3d4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 228 <_start-0x7dd8>
     3d8:	61736f6a 	cmnvs	r3, sl, ror #30
     3dc:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
     3e0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     3e4:	706f746b 	rsbvc	r7, pc, fp, ror #8
     3e8:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     3ec:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     3f0:	72656270 	rsbvc	r6, r5, #112, 4
     3f4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     3f8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     3fc:	4f545265 	svcmi	0x00545265
     400:	616d2d53 	cmnvs	sp, r3, asr sp
     404:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     408:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     40c:	4f545265 	svcmi	0x00545265
     410:	6f532f53 	svcvs	0x00532f53
     414:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     418:	6f72632f 	svcvs	0x0072632f
     41c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     420:	00632e65 	rsbeq	r2, r3, r5, ror #28
     424:	73614c78 	cmnvc	r1, #120, 24	; 0x7800
     428:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
     42c:	756f436b 	strbvc	r4, [pc, #-875]!	; c9 <_start-0x7f37>
     430:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     434:	6f526f43 	svcvs	0x00526f43
     438:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     43c:	63695465 	cmnvs	r9, #1694498816	; 0x65000000
     440:	756f436b 	strbvc	r4, [pc, #-875]!	; dd <_start-0x7f23>
     444:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     448:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0xfffff6b4
     44c:	4554495f 	ldrbmi	r4, [r4, #-2399]	; 0xfffff6a1
     450:	7870004d 	ldmdavc	r0!, {r0, r2, r3, r6}^
     454:	736e6f43 	cmnvc	lr, #268	; 0x10c
     458:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     45c:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
     460:	43706f54 	cmnmi	r0, #84, 30	; 0x150
     464:	756f526f 	strbvc	r5, [pc, #-623]!	; 1fd <_start-0x7e03>
     468:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     46c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     470:	69725079 	ldmdbvs	r2!, {r0, r3, r4, r5, r6, ip, lr}^
     474:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     478:	44780079 	ldrbtmi	r0, [r8], #-121	; 0xffffff87
     47c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     480:	6f436465 	svcvs	0x00436465
     484:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     488:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     48c:	31747369 	cmncc	r4, r9, ror #6
     490:	65447800 	strbvs	r7, [r4, #-2048]	; 0xfffff800
     494:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     498:	526f4364 	rsbpl	r4, pc, #100, 6	; 0x90000001
     49c:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4a0:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     4a4:	00327473 	eorseq	r7, r2, r3, ror r4
     4a8:	43726f63 	cmnmi	r2, #396	; 0x18c
     4ac:	00424352 	subeq	r4, r2, r2, asr r3
     4b0:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
     4b4:	6f697665 	svcvs	0x00697665
     4b8:	70007375 	andvc	r7, r0, r5, ror r3
     4bc:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     4c0:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4c4:	6f43656e 	svcvs	0x0043656e
     4c8:	63006564 	movwvs	r6, #1380	; 0x564
     4cc:	6f43726f 	svcvs	0x0043726f
     4d0:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     4d4:	43656e69 	cmnmi	r5, #1680	; 0x690
     4d8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     4dc:	6c426c6f 	mcrrvs	12, 6, r6, r2, cr15
     4e0:	006b636f 	rsbeq	r6, fp, pc, ror #6
     4e4:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     4e8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4ec:	6552656e 	ldrbvs	r6, [r2, #-1390]	; 0xfffffa92
     4f0:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
     4f4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 3e4 <_start-0x7c1c>
     4f8:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     4fc:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     500:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     504:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
     508:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
     50c:	616c6544 	cmnvs	ip, r4, asr #10
     510:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     514:	756f526f 	strbvc	r5, [pc, #-623]!	; 2ad <_start-0x7d53>
     518:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     51c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     520:	49787500 	ldmdbmi	r8!, {r8, sl, ip, sp, lr}^
     524:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     528:	694d7800 	stmdbvs	sp, {fp, ip, sp, lr}^
     52c:	694c696e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     530:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     534:	78006d65 	stmdavc	r0, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
     538:	6f526f43 	svcvs	0x00526f43
     53c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     540:	65724365 	ldrbvs	r4, [r2, #-869]!	; 0xfffffc9b
     544:	00657461 	rsbeq	r7, r5, r1, ror #8
     548:	52437870 	subpl	r7, r3, #112, 16	; 0x700000
     54c:	75004243 	strvc	r4, [r0, #-579]	; 0xfffffdbd
     550:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
     554:	4f726562 	svcmi	0x00726562
     558:	65744966 	ldrbvs	r4, [r4, #-2406]!	; 0xfffff69a
     55c:	7000736d 	andvc	r7, r0, sp, ror #6
     560:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     564:	506b6365 	rsbpl	r6, fp, r5, ror #6
     568:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     56c:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0xfffff892
     570:	4c796461 	cfldrdmi	mvd6, [r9], #-388	; 0xfffffe7c
     574:	00747369 	rsbseq	r7, r4, r9, ror #6
     578:	72507875 	subsvc	r7, r0, #7667712	; 0x750000
     57c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     580:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     584:	6f526f43 	svcvs	0x00526f43
     588:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     58c:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
     590:	00656c64 	rsbeq	r6, r5, r4, ror #24
     594:	6e655078 	mcrvs	0, 3, r5, cr5, cr8, {3}
     598:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     59c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     5a0:	526f4379 	rsbpl	r4, pc, #-469762047	; 0xe4000001
     5a4:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     5a8:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     5ac:	70007473 	andvc	r7, r0, r3, ror r4
     5b0:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     5b4:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     5b8:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     5bc:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     5c0:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     5c4:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     5c8:	43746e65 	cmnmi	r4, #1616	; 0x650
     5cc:	756f526f 	strbvc	r5, [pc, #-623]!	; 365 <_start-0x7c9b>
     5d0:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     5d4:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     5d8:	6f54656d 	svcvs	0x0054656d
     5dc:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
     5e0:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     5e4:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     5e8:	76006d65 	strvc	r6, [r0], -r5, ror #26
     5ec:	6f526f43 	svcvs	0x00526f43
     5f0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     5f4:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
     5f8:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     5fc:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     600:	6f526f43 	svcvs	0x00526f43
     604:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     608:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     60c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     610:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     614:	616c6544 	cmnvs	ip, r4, asr #10
     618:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     61c:	756f526f 	strbvc	r5, [pc, #-623]!	; 3b5 <_start-0x7c4b>
     620:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     624:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     628:	52787000 	rsbspl	r7, r8, #0
     62c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     630:	6f526f43 	svcvs	0x00526f43
     634:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     638:	73694c65 	cmnvc	r9, #25856	; 0x6500
     63c:	78007374 	stmdavc	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     640:	494e494d 	stmdbmi	lr, {r0, r2, r3, r6, r8, fp, lr}^
     644:	53494c5f 	movtpl	r4, #40031	; 0x9c5f
     648:	54495f54 	strbpl	r5, [r9], #-3924	; 0xfffff0ac
     64c:	78004d45 	stmdavc	r0, {r0, r2, r6, r8, sl, fp, lr}
     650:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0xfffff6b4
     654:	76727000 	ldrbtvc	r7, [r2], -r0
     658:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     65c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     660:	6f436573 	svcvs	0x00436573
     664:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     668:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     66c:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
     670:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     674:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
     678:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
     67c:	78007961 	stmdavc	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
     680:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     684:	4c636972 	stclmi	9, cr6, [r3], #-456	; 0xfffffe38
     688:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     68c:	006d6574 	rsbeq	r6, sp, r4, ror r5
     690:	65764578 	ldrbvs	r4, [r6, #-1400]!	; 0xfffffa88
     694:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     698:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     69c:	70006d65 	andvc	r6, r0, r5, ror #26
     6a0:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     6a4:	446b6365 	strbtmi	r6, [fp], #-869	; 0xfffffc9b
     6a8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     6ac:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
     6b0:	63007473 	movwvs	r7, #1139	; 0x473
     6b4:	524f4372 	subpl	r4, pc, #-939524095	; 0xc8000001
     6b8:	4954554f 	ldmdbmi	r4, {r0, r1, r2, r3, r6, r8, sl, ip, lr}^
     6bc:	435f454e 	cmpmi	pc, #327155712	; 0x13800000
     6c0:	0045444f 	subeq	r4, r5, pc, asr #8
     6c4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 610 <_start-0x79f0>
     6c8:	6a6c2f65 	bvs	1b0c464 <mailbuffer+0x1ad1374>
     6cc:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
     6d0:	2f727566 	svccs	0x00727566
     6d4:	6b736544 	blvs	1cd9bec <mailbuffer+0x1c9eafc>
     6d8:	2f706f74 	svccs	0x00706f74
     6dc:	2f697072 	svccs	0x00697072
     6e0:	70736152 	rsbsvc	r6, r3, r2, asr r1
     6e4:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     6e8:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     6ec:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     6f0:	534f5452 	movtpl	r5, #62546	; 0xf452
     6f4:	73616d2d 	cmnvc	r1, #2880	; 0xb40
     6f8:	2f726574 	svccs	0x00726574
     6fc:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     700:	534f5452 	movtpl	r5, #62546	; 0xf452
     704:	756f532f 	strbvc	r5, [pc, #-815]!	; 3dd <_start-0x7c23>
     708:	2f656372 	svccs	0x00656372
     70c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     710:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
     714:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     718:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     71c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     720:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     724:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     728:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
     72c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     730:	63206465 	teqvs	r0, #1694498816	; 0x65000000
     734:	00726168 	rsbseq	r6, r2, r8, ror #2
     738:	74497870 	strbvc	r7, [r9], #-2160	; 0xfffff790
     73c:	6f546d65 	svcvs	0x00546d65
     740:	6f6d6552 	svcvs	0x006d6552
     744:	76006576 			; <UNDEFINED> instruction: 0x76006576
     748:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     74c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     750:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     754:	74496573 	strbvc	r6, [r9], #-1395	; 0xfffffa8d
     758:	76006d65 	strvc	r6, [r0], -r5, ror #26
     75c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     760:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
     764:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
     768:	4c760064 	ldclmi	0, cr0, [r6], #-400	; 0xfffffe70
     76c:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     770:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     774:	73696c61 	cmnvc	r9, #24832	; 0x6100
     778:	56780065 	ldrbtpl	r0, [r8], -r5, rrx
     77c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     780:	6e49664f 	cdpvs	6, 4, cr6, cr9, cr15, {2}
     784:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
     788:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     78c:	74497870 	strbvc	r7, [r9], #-2160	; 0xfffff790
     790:	6c006d65 	stcvs	13, cr6, [r0], {101}	; 0x65
     794:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     798:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     79c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     7a0:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     7a4:	65527473 	ldrbvs	r7, [r2, #-1139]	; 0xfffffb8d
     7a8:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
     7ac:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     7b0:	61726574 	cmnvs	r2, r4, ror r5
     7b4:	00726f74 	rsbseq	r6, r2, r4, ror pc
     7b8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     7bc:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     7c0:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     7c4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     7c8:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     7cc:	694c7765 	stmdbvs	ip, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     7d0:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     7d4:	76006d65 	strvc	r6, [r0], -r5, ror #26
     7d8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     7dc:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
     7e0:	75007472 	strvc	r7, [r0, #-1138]	; 0xfffffb8e
     7e4:	65755163 	ldrbvs	r5, [r5, #-355]!	; 0xfffffe9d
     7e8:	79546575 	ldmdbvc	r4, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
     7ec:	78006570 	stmdavc	r0, {r4, r5, r6, r8, sl, sp, lr}
     7f0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     7f4:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     7f8:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     7fc:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
     800:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 6f0 <_start-0x7910>
     804:	00525349 	subseq	r5, r2, r9, asr #6
     808:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0xfffff78b
     80c:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	; 0xfffffe6c
     810:	61737365 	cmnvs	r3, r5, ror #6
     814:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     818:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     81c:	7300676e 	movwvc	r6, #1902	; 0x76e
     820:	5f657a69 	svcpl	0x00657a69
     824:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     828:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     82c:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
     830:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     834:	61547974 	cmpvs	r4, r4, ror r9
     838:	6f576b73 	svcvs	0x00576b73
     83c:	006e656b 	rsbeq	r6, lr, fp, ror #10
     840:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     844:	73496575 	movtvc	r6, #38261	; 0x9575
     848:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     84c:	706d4565 	rsbvc	r4, sp, r5, ror #10
     850:	72467974 	subvc	r7, r6, #116, 18	; 0x1d0000
     854:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     858:	72700052 	rsbsvc	r0, r0, #82	; 0x52
     85c:	51734976 	cmnpl	r3, r6, ror r9
     860:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     864:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xfffff2bb
     868:	72700079 	rsbsvc	r0, r0, #121	; 0x79
     86c:	706f4376 	rsbvc	r4, pc, r6, ror r3	; <UNPREDICTABLE>
     870:	74614479 	strbtvc	r4, [r1], #-1145	; 0xfffffb87
     874:	6f724661 	svcvs	0x00724661
     878:	6575516d 	ldrbvs	r5, [r5, #-365]!	; 0xfffffe93
     87c:	70006575 	andvc	r6, r0, r5, ror r5
     880:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
     884:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     888:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     88c:	706f4376 	rsbvc	r4, pc, r6, ror r3	; <UNPREDICTABLE>
     890:	74614479 	strbtvc	r4, [r1], #-1145	; 0xfffffb87
     894:	516f5461 	cmnpl	pc, r1, ror #8
     898:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     89c:	49547800 	ldmdbmi	r4, {fp, ip, sp, lr}^
     8a0:	4f5f454d 	svcmi	0x005f454d
     8a4:	78005455 	stmdavc	r0, {r0, r2, r4, r6, sl, ip, lr}
     8a8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     8ac:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     8b0:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     8b4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
     8b8:	00657669 	rsbeq	r7, r5, r9, ror #12
     8bc:	706f4378 	rsbvc	r4, pc, r8, ror r3	; <UNPREDICTABLE>
     8c0:	736f5079 	cmnvc	pc, #121	; 0x79
     8c4:	6f697469 	svcvs	0x00697469
     8c8:	6370006e 	cmnvs	r0, #110	; 0x6e
     8cc:	6769724f 	strbvs	r7, [r9, -pc, asr #4]!
     8d0:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     8d4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     8d8:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     8dc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     8e0:	52637000 	rsbpl	r7, r3, #0
     8e4:	46646165 	strbtmi	r6, [r4], -r5, ror #2
     8e8:	006d6f72 	rsbeq	r6, sp, r2, ror pc
     8ec:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xfffff088
     8f0:	6f6c6672 	svcvs	0x006c6672
     8f4:	756f4377 	strbvc	r4, [pc, #-887]!	; 585 <_start-0x7a7b>
     8f8:	7600746e 	strvc	r7, [r0], -lr, ror #8
     8fc:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     900:	6c654465 	cfstrdvs	mvd4, [r5], #-404	; 0xfffffe6c
     904:	00657465 	rsbeq	r7, r5, r5, ror #8
     908:	65486370 	strbvs	r6, [r8, #-880]	; 0xfffffc90
     90c:	78006461 	stmdavc	r0, {r0, r5, r6, sl, sp, lr}
     910:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     914:	6e456e4f 	cdpvs	14, 4, cr6, cr5, cr15, {2}
     918:	69726574 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     91c:	7800676e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     920:	7473754a 	ldrbtvc	r7, [r3], #-1354	; 0xfffffab6
     924:	6b656550 	blvs	1959e6c <mailbuffer+0x191ed7c>
     928:	00676e69 	rsbeq	r6, r7, r9, ror #28
     92c:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     930:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     934:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     938:	6e655363 	cdpvs	3, 6, cr5, cr5, cr3, {3}
     93c:	54780064 	ldrbtpl	r0, [r8], #-100	; 0xffffff9c
     940:	4f656d69 	svcmi	0x00656d69
     944:	79547475 	ldmdbvc	r4, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
     948:	75006570 	strvc	r6, [r0, #-1392]	; 0xfffffa90
     94c:	74655278 	strbtvc	r5, [r5], #-632	; 0xfffffd88
     950:	006e7275 	rsbeq	r7, lr, r5, ror r2
     954:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     958:	61486575 	hvcvs	34389	; 0x8655
     95c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     960:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     964:	52657565 	rsbpl	r7, r5, #423624704	; 0x19400000
     968:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     96c:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
     970:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     974:	78750052 	ldmdavc	r5!, {r1, r4, r6}^
     978:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     97c:	75006874 	strvc	r6, [r0, #-2164]	; 0xfffff78c
     980:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     984:	654c6575 	strbvs	r6, [ip, #-1397]	; 0xfffffa8b
     988:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     98c:	61547800 	cmpvs	r4, r0, lsl #16
     990:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
     994:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     998:	6f54676e 	svcvs	0x0054676e
     99c:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
     9a0:	00657669 	rsbeq	r7, r5, r9, ror #12
     9a4:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0xfffff78b
     9a8:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	; 0xfffffe6c
     9ac:	61737365 	cmnvs	r3, r5, ror #6
     9b0:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     9b4:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     9b8:	7246676e 	subvc	r6, r6, #28835840	; 0x1b80000
     9bc:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     9c0:	76700052 			; <UNDEFINED> instruction: 0x76700052
     9c4:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     9c8:	75516f54 	ldrbvc	r6, [r1, #-3924]	; 0xfffff0ac
     9cc:	00657565 	rsbeq	r7, r5, r5, ror #10
     9d0:	45555178 	ldrbmi	r5, [r5, #-376]	; 0xfffffe88
     9d4:	78004555 	stmdavc	r0, {r0, r2, r4, r6, r8, sl, lr}
     9d8:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
     9dc:	6d695479 	cfstrdvs	mvd5, [r9, #-484]!	; 0xfffffe1c
     9e0:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
     9e4:	6f682f00 	svcvs	0x00682f00
     9e8:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 83c <_start-0x77c4>
     9ec:	61736f6a 	cmnvs	r3, sl, ror #30
     9f0:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
     9f4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     9f8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     9fc:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     a00:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     a04:	72656270 	rsbvc	r6, r5, #112, 4
     a08:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     a0c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     a10:	4f545265 	svcmi	0x00545265
     a14:	616d2d53 	cmnvs	sp, r3, asr sp
     a18:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     a1c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     a20:	4f545265 	svcmi	0x00545265
     a24:	6f532f53 	svcvs	0x00532f53
     a28:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     a2c:	6575712f 	ldrbvs	r7, [r5, #-303]!	; 0xfffffed1
     a30:	632e6575 	teqvs	lr, #490733568	; 0x1d400000
     a34:	65755100 	ldrbvs	r5, [r5, #-256]!	; 0xffffff00
     a38:	65446575 	strbvs	r6, [r4, #-1397]	; 0xfffffa8b
     a3c:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
     a40:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     a44:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     a48:	49657565 	stmdbmi	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
     a4c:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     a50:	75466575 	strbvc	r6, [r6, #-1397]	; 0xfffffa8b
     a54:	72466c6c 	subvc	r6, r6, #108, 24	; 0x6c00
     a58:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     a5c:	54780052 	ldrbtpl	r0, [r8], #-82	; 0xffffffae
     a60:	636f4c78 	cmnvs	pc, #120, 24	; 0x7800
     a64:	5178006b 	cmnpl	r8, fp, rrx
     a68:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     a6c:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     a70:	43636972 	cmnmi	r3, #1867776	; 0x1c8000
     a74:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
     a78:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     a7c:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0xfffffead
     a80:	746e4964 	strbtvc	r4, [lr], #-2404	; 0xfffff69c
     a84:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     a88:	74537470 	ldrbvc	r7, [r3], #-1136	; 0xfffffb90
     a8c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     a90:	76727000 	ldrbtvc	r7, [r2], -r0
     a94:	75517349 	ldrbvc	r7, [r1, #-841]	; 0xfffffcb7
     a98:	46657565 	strbtmi	r7, [r5], -r5, ror #10
     a9c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
     aa0:	654d7875 	strbvs	r7, [sp, #-2165]	; 0xfffff78b
     aa4:	67617373 			; <UNDEFINED> instruction: 0x67617373
     aa8:	61577365 	cmpvs	r7, r5, ror #6
     aac:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     ab0:	76700067 	ldrbtvc	r0, [r0], -r7, rrx
     ab4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     ab8:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     abc:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     ac0:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     ac4:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     ac8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     acc:	72700074 	rsbsvc	r0, r0, #116	; 0x74
     ad0:	6c6e5576 	cfstr64vs	mvdx5, [lr], #-472	; 0xfffffe28
     ad4:	516b636f 	cmnpl	fp, pc, ror #6
     ad8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     adc:	78527800 	ldmdavc	r2, {fp, ip, sp, lr}^
     ae0:	6b636f4c 	blvs	18dc818 <mailbuffer+0x18a1728>
     ae4:	54637000 	strbtpl	r7, [r3], #-0
     ae8:	006c6961 	rsbeq	r6, ip, r1, ror #18
     aec:	736f5078 	cmnvc	pc, #120	; 0x78
     af0:	6f697469 	svcvs	0x00697469
     af4:	5478006e 	ldrbtpl	r0, [r8], #-110	; 0xffffff92
     af8:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     afc:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     b00:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
     b04:	6e65536f 	cdpvs	3, 6, cr5, cr5, cr15, {3}
     b08:	51780064 	cmnpl	r8, r4, rrx
     b0c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     b10:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
     b14:	79426e49 	stmdbvc	r2, {r0, r3, r6, r9, sl, fp, sp, lr}^
     b18:	00736574 	rsbseq	r6, r3, r4, ror r5
     b1c:	75517870 	ldrbvc	r7, [r1, #-2160]	; 0xfffff790
     b20:	00657565 	rsbeq	r7, r5, r5, ror #10
     b24:	72576370 	subsvc	r6, r7, #112, 6	; 0xc0000001
     b28:	54657469 	strbtpl	r7, [r5], #-1129	; 0xfffffb97
     b2c:	7875006f 	ldmdavc	r5!, {r0, r1, r2, r3, r5, r6}^
     b30:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     b34:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
     b38:	76727000 	ldrbtvc	r7, [r2], -r0
     b3c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     b40:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     b44:	43546573 	cmpmi	r4, #482344960	; 0x1cc00000
     b48:	72615642 	rsbvc	r5, r1, #69206016	; 0x4200000
     b4c:	6c626169 	stfvse	f6, [r2], #-420	; 0xfffffe5c
     b50:	76007365 	strvc	r7, [r0], -r5, ror #6
     b54:	6b736154 	blvs	1cd90ac <mailbuffer+0x1c9dfbc>
     b58:	70737553 	rsbsvc	r7, r3, r3, asr r5
     b5c:	00646e65 	rsbeq	r6, r4, r5, ror #28
     b60:	75437875 	strbvc	r7, [r3, #-2165]	; 0xfffff78b
     b64:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     b68:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
     b6c:	4f726562 	svcmi	0x00726562
     b70:	73615466 	cmnvc	r1, #1711276032	; 0x66000000
     b74:	7500736b 	strvc	r7, [r0, #-875]	; 0xfffffc95
     b78:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     b7c:	6544736b 	strbvs	r7, [r4, #-875]	; 0xfffffc95
     b80:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     b84:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
     b88:	6b6f6f48 	blvs	1bdc8b0 <mailbuffer+0x1ba17c0>
     b8c:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     b90:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     b94:	75537800 	ldrbvc	r7, [r3, #-2048]	; 0xfffff800
     b98:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
     b9c:	54646564 	strbtpl	r6, [r4], #-1380	; 0xfffffa9c
     ba0:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
     ba4:	00747369 	rsbseq	r7, r4, r9, ror #6
     ba8:	61547870 	cmpvs	r4, r0, ror r8
     bac:	61546b73 	cmpvs	r4, r3, ror fp
     bb0:	54780067 	ldrbtpl	r0, [r8], #-103	; 0xffffff99
     bb4:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     bb8:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     bbc:	72436369 	subvc	r6, r3, #-1543503871	; 0xa4000001
     bc0:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     bc4:	6c417800 	mcrrvs	8, 0, r7, r1, cr0
     bc8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     bcc:	65695979 	strbvs	r5, [r9, #-2425]!	; 0xfffff687
     bd0:	6465646c 	strbtvs	r6, [r5], #-1132	; 0xfffffb94
     bd4:	54787000 	ldrbtpl	r7, [r8], #-0
     bd8:	4f656d69 	svcmi	0x00656d69
     bdc:	78007475 	stmdavc	r0, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
     be0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     be4:	6d457349 	stclvs	3, cr7, [r5, #-292]	; 0xfffffedc
     be8:	00797470 	rsbseq	r7, r9, r0, ror r4
     bec:	61547870 	cmpvs	r4, r0, ror r8
     bf0:	6f546b73 	svcvs	0x00546b73
     bf4:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
     bf8:	7600656d 	strvc	r6, [r0], -sp, ror #10
     bfc:	6b736154 	blvs	1cd9154 <mailbuffer+0x1c9e064>
     c00:	616c6544 	cmnvs	ip, r4, asr #10
     c04:	54780079 	ldrbtpl	r0, [r8], #-121	; 0xffffff87
     c08:	486b7361 	stmdami	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     c0c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     c10:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
     c14:	436b7361 	cmnmi	fp, #-2080374783	; 0x84000001
     c18:	416c6c61 	cmnmi	ip, r1, ror #24
     c1c:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
     c20:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
     c24:	61546e6f 	cmpvs	r4, pc, ror #28
     c28:	6f486b73 	svcvs	0x00486b73
     c2c:	74006b6f 	strvc	r6, [r0], #-2927	; 0xfffff491
     c30:	61546b73 	cmpvs	r4, r3, ror fp
     c34:	6f436b73 	svcvs	0x00436b73
     c38:	6f72746e 	svcvs	0x0072746e
     c3c:	6f6c426c 	svcvs	0x006c426c
     c40:	70006b63 	andvc	r6, r0, r3, ror #22
     c44:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
     c48:	00424354 	subeq	r4, r2, r4, asr r3
     c4c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     c50:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
     c54:	6b636954 	blvs	18db1ac <mailbuffer+0x18a00bc>
     c58:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     c5c:	6f724674 	svcvs	0x00724674
     c60:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     c64:	76727000 	ldrbtvc	r7, [r2], -r0
     c68:	6f6c6c41 	svcvs	0x006c6c41
     c6c:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
     c70:	41424354 	cmpmi	r2, r4, asr r3
     c74:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0xfffffb92
     c78:	006b6361 	rsbeq	r6, fp, r1, ror #6
     c7c:	74537375 	ldrbvc	r7, [r3], #-885	; 0xfffffc8b
     c80:	446b6361 	strbtmi	r6, [fp], #-865	; 0xfffffc9f
     c84:	68747065 	ldmdavs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     c88:	78757000 	ldmdavc	r5!, {ip, sp, lr}^
     c8c:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     c90:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
     c94:	00726566 	rsbseq	r6, r2, r6, ror #10
     c98:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
     c9c:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
     ca0:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     ca4:	74655379 	strbtvc	r5, [r5], #-889	; 0xfffffc87
     ca8:	61547600 	cmpvs	r4, r0, lsl #12
     cac:	74536b73 	ldrbvc	r6, [r3], #-2931	; 0xfffff48d
     cb0:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     cb4:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     cb8:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     cbc:	6f682f00 	svcvs	0x00682f00
     cc0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; b14 <_start-0x74ec>
     cc4:	61736f6a 	cmnvs	r3, sl, ror #30
     cc8:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
     ccc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     cd0:	706f746b 	rsbvc	r7, pc, fp, ror #8
     cd4:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
     cd8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     cdc:	72656270 	rsbvc	r6, r5, #112, 4
     ce0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     ce4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     ce8:	4f545265 	svcmi	0x00545265
     cec:	616d2d53 	cmnvs	sp, r3, asr sp
     cf0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     cf4:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     cf8:	4f545265 	svcmi	0x00545265
     cfc:	6f532f53 	svcvs	0x00532f53
     d00:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     d04:	7361742f 	cmnvc	r1, #788529152	; 0x2f000000
     d08:	632e736b 	teqvs	lr, #-1409286143	; 0xac000001
     d0c:	61547600 	cmpvs	r4, r0, lsl #12
     d10:	6c506b73 	mrrcvs	11, 7, r6, r0, cr3
     d14:	4f656361 	svcmi	0x00656361
     d18:	6576456e 	ldrbvs	r4, [r6, #-1390]!	; 0xfffffa92
     d1c:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     d20:	70007473 	andvc	r7, r0, r3, ror r4
     d24:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     d28:	7670006b 	ldrbtvc	r0, [r0], -fp, rrx
     d2c:	61726150 	cmnvs	r2, r0, asr r1
     d30:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
     d34:	78750072 	ldmdavc	r5!, {r1, r4, r5, r6}^
     d38:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
     d3c:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     d40:	73755372 	cmnvc	r5, #-939524095	; 0xc8000001
     d44:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
     d48:	70006465 	andvc	r6, r0, r5, ror #8
     d4c:	65724378 	ldrbvs	r4, [r2, #-888]!	; 0xfffffc88
     d50:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
     d54:	6b736154 	blvs	1cd92ac <mailbuffer+0x1c9e1bc>
     d58:	61547800 	cmpvs	r4, r0, lsl #16
     d5c:	73496b73 	movtvc	r6, #39795	; 0x9b73
     d60:	6b736154 	blvs	1cd92b8 <mailbuffer+0x1c9e1c8>
     d64:	70737553 	rsbsvc	r7, r3, r3, asr r5
     d68:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     d6c:	54780064 	ldrbtpl	r0, [r8], #-100	; 0xffffff9c
     d70:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     d74:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     d78:	6b737400 	blvs	1cddd80 <mailbuffer+0x1ca2c90>
     d7c:	00424354 	subeq	r4, r2, r4, asr r3
     d80:	41546470 	cmpmi	r4, r0, ror r4
     d84:	485f4b53 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
     d88:	5f4b4f4f 	svcpl	0x004b4f4f
     d8c:	45444f43 	strbmi	r4, [r4, #-3907]	; 0xfffff0bd
     d90:	54787000 	ldrbtpl	r7, [r8], #-0
     d94:	78004243 	stmdavc	r0, {r0, r1, r6, r9, lr}
     d98:	6c656959 	stclvs	9, cr6, [r5], #-356	; 0xfffffe9c
     d9c:	71655264 	cmnvc	r5, r4, ror #4
     da0:	65726975 	ldrbvs	r6, [r2, #-2421]!	; 0xfffff68b
     da4:	54760064 	ldrbtpl	r0, [r6], #-100	; 0xffffff9c
     da8:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
     dac:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     db0:	4d780065 	ldclmi	0, cr0, [r8, #-404]!	; 0xfffffe6c
     db4:	524f4d45 	subpl	r4, pc, #4416	; 0x1140
     db8:	45525f59 	ldrbmi	r5, [r2, #-3929]	; 0xfffff0a7
     dbc:	4e4f4947 	cdpmi	9, 4, cr4, cr15, cr7, {2}
     dc0:	61547600 	cmpvs	r4, r0, lsl #12
     dc4:	65536b73 	ldrbvs	r6, [r3, #-2931]	; 0xfffff48d
     dc8:	70704174 	rsbsvc	r4, r0, r4, ror r1
     dcc:	6163696c 	cmnvs	r3, ip, ror #18
     dd0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     dd4:	6b736154 	blvs	1cd932c <mailbuffer+0x1c9e23c>
     dd8:	00676154 	rsbeq	r6, r7, r4, asr r1
     ddc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d28 <_start-0x72d8>
     de0:	6a6c2f65 	bvs	1b0cb7c <mailbuffer+0x1ad1a8c>
     de4:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
     de8:	2f727566 	svccs	0x00727566
     dec:	6b736544 	blvs	1cda304 <mailbuffer+0x1c9f214>
     df0:	2f706f74 	svccs	0x00706f74
     df4:	2f697072 	svccs	0x00697072
     df8:	70736152 	rsbsvc	r6, r3, r2, asr r1
     dfc:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     e00:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     e04:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     e08:	534f5452 	movtpl	r5, #62546	; 0xf452
     e0c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
     e10:	00726574 	rsbseq	r6, r2, r4, ror r5
     e14:	44767270 	ldrbtmi	r7, [r6], #-624	; 0xfffffd90
     e18:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     e1c:	42435465 	submi	r5, r3, #1694498816	; 0x65000000
     e20:	694d7800 	stmdbvs	sp, {fp, ip, sp, lr}^
     e24:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
     e28:	6c656959 	stclvs	9, cr6, [r5], #-356	; 0xfffffe9c
     e2c:	72700064 	rsbsvc	r0, r0, #100	; 0x64
     e30:	6c644976 	stclvs	9, cr4, [r4], #-472	; 0xfffffe28
     e34:	73615465 	cmnvc	r1, #1694498816	; 0x65000000
     e38:	5476006b 	ldrbtpl	r0, [r6], #-107	; 0xffffff95
     e3c:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     e40:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e44:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
     e48:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     e4c:	53787000 	cmnpl	r8, #0
     e50:	6b636174 	blvs	18d9428 <mailbuffer+0x189e338>
     e54:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     e58:	7355706f 	cmpvc	r5, #111	; 0x6f
     e5c:	72506465 	subsvc	r6, r0, #1694498816	; 0x65000000
     e60:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     e64:	70007974 	andvc	r7, r0, r4, ror r9
     e68:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xfffff088
     e6c:	6f6c6672 	svcvs	0x006c6672
     e70:	6c654477 	cfstrdvs	mvd4, [r5], #-476	; 0xfffffe24
     e74:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     e78:	6b736154 	blvs	1cd93d0 <mailbuffer+0x1c9e2e0>
     e7c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     e80:	54787000 	ldrbtpl	r7, [r8], #-0
     e84:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
     e88:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
     e8c:	00657465 	rsbeq	r7, r5, r5, ror #8
     e90:	67655278 			; <UNDEFINED> instruction: 0x67655278
     e94:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     e98:	65507800 	ldrbvs	r7, [r0, #-2048]	; 0xfffff800
     e9c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     ea0:	61655267 	cmnvs	r5, r7, ror #4
     ea4:	694c7964 	stmdbvs	ip, {r2, r5, r6, r8, fp, ip, sp, lr}^
     ea8:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     eac:	6b736154 	blvs	1cd9404 <mailbuffer+0x1c9e314>
     eb0:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     eb4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     eb8:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
     ebc:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
     ec0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     ec4:	61547870 	cmpvs	r4, r0, ror r8
     ec8:	6f436b73 	svcvs	0x00436b73
     ecc:	78006564 	stmdavc	r0, {r2, r5, r6, r8, sl, sp, lr}
     ed0:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
     ed4:	6b736154 	blvs	1cd942c <mailbuffer+0x1c9e33c>
     ed8:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
     edc:	546b636f 	strbtpl	r6, [fp], #-879	; 0xfffffc91
     ee0:	00656d69 	rsbeq	r6, r5, r9, ror #26
     ee4:	6f547875 	svcvs	0x00547875
     ee8:	61655270 	smcvs	21792	; 0x5520
     eec:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
     ef0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     ef4:	70007974 	andvc	r7, r0, r4, ror r9
     ef8:	65725078 	ldrbvs	r5, [r2, #-120]!	; 0xffffff88
     efc:	756f6976 	strbvc	r6, [pc, #-2422]!	; 58e <_start-0x7a72>
     f00:	6b615773 	blvs	1856cd4 <mailbuffer+0x181bbe4>
     f04:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
     f08:	6c750065 	ldclvs	0, cr0, [r5], #-404	; 0xfffffe6c
     f0c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     f10:	6e496874 	mcrvs	8, 2, r6, cr9, cr4, {3}
     f14:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
     f18:	78750073 	ldmdavc	r5!, {r0, r1, r4, r5, r6}^
     f1c:	5077654e 	rsbspl	r6, r7, lr, asr #10
     f20:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     f24:	00797469 	rsbseq	r7, r9, r9, ror #8
     f28:	6e557870 	mrcvs	8, 2, r7, cr5, cr0, {3}
     f2c:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     f30:	5464656b 	strbtpl	r6, [r4], #-1387	; 0xfffffa95
     f34:	76004243 	strvc	r4, [r0], -r3, asr #4
     f38:	6b736154 	blvs	1cd9490 <mailbuffer+0x1c9e3a0>
     f3c:	616c6544 	cmnvs	ip, r4, asr #10
     f40:	746e5579 	strbtvc	r5, [lr], #-1401	; 0xfffffa87
     f44:	76006c69 	strvc	r6, [r0], -r9, ror #24
     f48:	6b736154 	blvs	1cd94a0 <mailbuffer+0x1c9e3b0>
     f4c:	72636e49 	rsbvc	r6, r3, #1168	; 0x490
     f50:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
     f54:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
     f58:	5478006b 	ldrbtpl	r0, [r8], #-107	; 0xffffff95
     f5c:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
     f60:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     f64:	6f724665 	svcvs	0x00724665
     f68:	6576456d 	ldrbvs	r4, [r6, #-1389]!	; 0xfffffa93
     f6c:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     f70:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     f74:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
     f78:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     f7c:	6e755272 	mrcvs	2, 3, r5, cr5, cr2, {3}
     f80:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
     f84:	61547600 	cmpvs	r4, r0, lsl #12
     f88:	6e456b73 	vmovvs.8	d5[3], r6
     f8c:	68635364 	stmdavs	r3!, {r2, r5, r6, r8, r9, ip, lr}^
     f90:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     f94:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     f98:	6b736154 	blvs	1cd94f0 <mailbuffer+0x1c9e400>
     f9c:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
     fa0:	6c41656d 	cfstr64vs	mvdx6, [r1], {109}	; 0x6d
     fa4:	5476006c 	ldrbtpl	r0, [r6], #-108	; 0xffffff94
     fa8:	4d6b7361 	stclmi	3, cr7, [fp, #-388]!	; 0xfffffe7c
     fac:	65737369 	ldrbvs	r7, [r3, #-873]!	; 0xfffffc97
     fb0:	65695964 	strbvs	r5, [r9, #-2404]!	; 0xfffff69c
     fb4:	7800646c 	stmdavc	r0, {r2, r3, r5, r6, sl, sp, lr}
     fb8:	6b736154 	blvs	1cd9510 <mailbuffer+0x1c9e420>
     fbc:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
     fc0:	7246656d 	subvc	r6, r6, #457179136	; 0x1b400000
     fc4:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     fc8:	53780052 	cmnpl	r8, #82	; 0x52
     fcc:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
     fd0:	6c654464 	cfstrdvs	mvd4, [r5], #-400	; 0xfffffe70
     fd4:	70007961 	andvc	r7, r0, r1, ror #18
     fd8:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     fdc:	546b6365 	strbtpl	r6, [fp], #-869	; 0xfffffc9b
     fe0:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     fe4:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     fe8:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
     fec:	696d7265 	stmdbvs	sp!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     ff0:	6974616e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     ff4:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xfffff191
     ff8:	7261506c 	rsbvc	r5, r1, #108	; 0x6c
     ffc:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
    1000:	00737265 	rsbseq	r7, r3, r5, ror #4
    1004:	6d654d78 	stclvs	13, cr4, [r5, #-480]!	; 0xfffffe20
    1008:	5279726f 	rsbspl	r7, r9, #-268435450	; 0xf0000006
    100c:	6f696765 	svcvs	0x00696765
    1010:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
    1014:	64644176 	strbtvs	r4, [r4], #-374	; 0xfffffe8a
    1018:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    101c:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    1020:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    1024:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
    1028:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
    102c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    1030:	61547600 	cmpvs	r4, r0, lsl #12
    1034:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xfffff48d
    1038:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    103c:	61547800 	cmpvs	r4, r0, lsl #16
    1040:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    1044:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
    1048:	756f436b 	strbvc	r4, [pc, #-875]!	; ce5 <_start-0x731b>
    104c:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1050:	6b736154 	blvs	1cd95a8 <mailbuffer+0x1c9e4b8>
    1054:	63656843 	cmnvs	r5, #4390912	; 0x430000
    1058:	726f466b 	rsbvc	r4, pc, #112197632	; 0x6b00000
    105c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    1060:	0074754f 	rsbseq	r7, r4, pc, asr #10
    1064:	61547875 	cmpvs	r4, r5, ror r8
    1068:	754e6b73 	strbvc	r6, [lr, #-2931]	; 0xfffff48d
    106c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1070:	52787000 	rsbspl	r7, r8, #0
    1074:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1078:	6b736154 	blvs	1cd95d0 <mailbuffer+0x1c9e4e0>
    107c:	73694c73 	cmnvc	r9, #29440	; 0x7300
    1080:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
    1084:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1088:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
    108c:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    1090:	664f7265 	strbvs	r7, [pc], -r5, ror #4
    1094:	6b736154 	blvs	1cd95ec <mailbuffer+0x1c9e4fc>
    1098:	44780073 	ldrbtmi	r0, [r8], #-115	; 0xffffff8d
    109c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    10a0:	61546465 	cmpvs	r4, r5, ror #8
    10a4:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    10a8:	00317473 	eorseq	r7, r1, r3, ror r4
    10ac:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
    10b0:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
    10b4:	6b736154 	blvs	1cd960c <mailbuffer+0x1c9e51c>
    10b8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    10bc:	4e780032 	mrcmi	0, 3, r0, cr8, cr2, {1}
    10c0:	664f6d75 			; <UNDEFINED> instruction: 0x664f6d75
    10c4:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    10c8:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    10cc:	54780073 	ldrbtpl	r0, [r8], #-115	; 0xffffff8d
    10d0:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    10d4:	61547600 	cmpvs	r4, r0, lsl #12
    10d8:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xfffff48d
    10dc:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    10e0:	6c6c4164 	stfvse	f4, [ip], #-400	; 0xfffffe70
    10e4:	4d787500 	cfldr64mi	mvdx7, [r8, #-0]
    10e8:	65737369 	ldrbvs	r7, [r3, #-873]!	; 0xfffffc97
    10ec:	63695464 	cmnvs	r9, #100, 8	; 0x64000000
    10f0:	7800736b 	stmdavc	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    10f4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    10f8:	72636e49 	rsbvc	r6, r3, #1168	; 0x490
    10fc:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    1100:	63700074 	cmnvs	r0, #116	; 0x74
    1104:	6b736154 	blvs	1cd965c <mailbuffer+0x1c9e56c>
    1108:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    110c:	61547800 	cmpvs	r4, r0, lsl #16
    1110:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    1114:	70704174 	rsbsvc	r4, r0, r4, ror r1
    1118:	6163696c 	cmnvs	r3, ip, ror #18
    111c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1120:	6b736154 	blvs	1cd9678 <mailbuffer+0x1c9e588>
    1124:	00676154 	rsbeq	r6, r7, r4, asr r1
    1128:	69547870 	ldmdbvs	r4, {r4, r5, r6, fp, ip, sp, lr}^
    112c:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
    1130:	6961576f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}^
    1134:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    1138:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    113c:	50746e65 	rsbspl	r6, r4, r5, ror #28
    1140:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1144:	00797469 	rsbseq	r7, r9, r9, ror #8
    1148:	65447870 	strbvs	r7, [r4, #-2160]	; 0xfffff790
    114c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
    1150:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    1154:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
    1158:	63700074 	cmnvs	r0, #116	; 0x74
    115c:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    1160:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
    1164:	506b7361 	rsbpl	r7, fp, r1, ror #6
    1168:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    116c:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    1170:	76007465 	strvc	r7, [r0], -r5, ror #8
    1174:	6b736154 	blvs	1cd96cc <mailbuffer+0x1c9e5dc>
    1178:	54746553 	ldrbtpl	r6, [r4], #-1363	; 0xfffffaad
    117c:	4f656d69 	svcmi	0x00656d69
    1180:	74537475 	ldrbvc	r7, [r3], #-1141	; 0xfffffb8b
    1184:	00657461 	rsbeq	r7, r5, r1, ror #8
    1188:	61547870 	cmpvs	r4, r0, ror r8
    118c:	6f546b73 	svcvs	0x00546b73
    1190:	70737553 	rsbsvc	r7, r3, r3, asr r5
    1194:	00646e65 	rsbeq	r6, r4, r5, ror #28
    1198:	61427670 	hvcvs	10080	; 0x2760
    119c:	64416573 	strbvs	r6, [r1], #-1395	; 0xfffffa8d
    11a0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    11a4:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    11a8:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
    11ac:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    11b0:	54657369 	strbtpl	r7, [r5], #-873	; 0xfffffc97
    11b4:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    11b8:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
    11bc:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    11c0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    11c4:	65500031 	ldrbvs	r0, [r0, #-49]	; 0xffffffcf
    11c8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    11cc:	44003267 	strmi	r3, [r0], #-615	; 0xfffffd99
    11d0:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    11d4:	6142656c 	cmpvs	r2, ip, ror #10
    11d8:	00636973 	rsbeq	r6, r3, r3, ror r9
    11dc:	324d4342 	subcc	r4, sp, #134217729	; 0x8000001
    11e0:	5f353338 	svcpl	0x00353338
    11e4:	43544e49 	cmpmi	r4, #1168	; 0x490
    11e8:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
    11ec:	49460053 	stmdbmi	r6, {r0, r1, r4, r6}^
    11f0:	72744351 	rsbsvc	r4, r4, #1140850689	; 0x44000001
    11f4:	6e49006c 	cdpvs	0, 4, cr0, cr9, cr12, {3}
    11f8:	6e497469 	cdpvs	4, 4, cr7, cr9, cr9, {3}
    11fc:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    1200:	43747075 	cmnmi	r4, #117	; 0x75
    1204:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1208:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
    120c:	6c750072 	ldclvs	0, cr0, [r5], #-456	; 0xfffffe38
    1210:	6b73614d 	blvs	1cd974c <mailbuffer+0x1c9e65c>
    1214:	74536465 	ldrbvc	r6, [r3], #-1125	; 0xfffffb9b
    1218:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    121c:	71726900 	cmnvc	r2, r0, lsl #18
    1220:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    1224:	45007265 	strmi	r7, [r0, #-613]	; 0xfffffd9b
    1228:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    122c:	6d003265 	sfmvs	f3, 4, [r0, #-404]	; 0xfffffe6c
    1230:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1234:	44717269 	ldrbtmi	r7, [r1], #-617	; 0xfffffd97
    1238:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    123c:	2f00656c 	svccs	0x0000656c
    1240:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1244:	6f6a6c2f 	svcvs	0x006a6c2f
    1248:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    124c:	442f7275 	strtmi	r7, [pc], #-629	; 1254 <_start-0x6dac>
    1250:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1254:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    1258:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    125c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1260:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1264:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1268:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    126c:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1270:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    1274:	442f7265 	strtmi	r7, [pc], #-613	; 127c <_start-0x6d84>
    1278:	2f6f6d65 	svccs	0x006f6d65
    127c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1280:	2f737265 	svccs	0x00737265
    1284:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    1288:	70757272 	rsbsvc	r7, r5, r2, ror r2
    128c:	632e7374 	teqvs	lr, #116, 6	; 0xd0000001
    1290:	6e667000 	cdpvs	0, 6, cr7, cr6, cr0, {0}
    1294:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1298:	0072656c 	rsbseq	r6, r2, ip, ror #10
    129c:	61736944 	cmnvs	r3, r4, asr #18
    12a0:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
    12a4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    12a8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    12ac:	5f670073 	svcpl	0x00670073
    12b0:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    12b4:	6154726f 	cmpvs	r4, pc, ror #4
    12b8:	00656c62 	rsbeq	r6, r5, r2, ror #24
    12bc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    12c0:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
    12c4:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    12c8:	73747075 	cmnvc	r4, #117	; 0x75
    12cc:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    12d0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    12d4:	71726900 	cmnvc	r2, r0, lsl #18
    12d8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    12dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12e0:	61736944 	cmnvs	r3, r4, asr #18
    12e4:	31656c62 	cmncc	r5, r2, ror #24
    12e8:	73694400 	cmnvc	r9, #0, 8
    12ec:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    12f0:	65520032 	ldrbvs	r0, [r2, #-50]	; 0xffffffce
    12f4:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    12f8:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    12fc:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    1300:	00747075 	rsbseq	r7, r4, r5, ror r0
    1304:	62757473 	rsbsvs	r7, r5, #1929379840	; 0x73000000
    1308:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    130c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1310:	495f4e46 	ldmdbmi	pc, {r1, r2, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1314:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    1318:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    131c:	4e41485f 	mcrmi	8, 2, r4, cr1, cr15, {2}
    1320:	52454c44 	subpl	r4, r5, #68, 24	; 0x4400
    1324:	544e4900 	strbpl	r4, [lr], #-2304	; 0xfffff700
    1328:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    132c:	565f5450 			; <UNDEFINED> instruction: 0x565f5450
    1330:	4f544345 	svcmi	0x00544345
    1334:	69440052 	stmdbvs	r4, {r1, r4, r6}^
    1338:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    133c:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    1340:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    1344:	69007470 	stmdbvs	r0, {r4, r5, r6, sl, ip, sp, lr}
    1348:	6e457172 	mcrvs	1, 2, r7, cr5, cr2, {3}
    134c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1350:	615f5f00 	cmpvs	pc, r0, lsl #30
    1354:	45006772 	strmi	r6, [r0, #-1906]	; 0xfffff88e
    1358:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    135c:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    1360:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    1364:	49007470 	stmdbmi	r0, {r4, r5, r6, sl, ip, sp, lr}
    1368:	61425152 	cmpvs	r2, r2, asr r1
    136c:	00636973 	rsbeq	r6, r3, r3, ror r9
    1370:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1374:	6142656c 	cmpvs	r2, ip, ror #10
    1378:	00636973 	rsbeq	r6, r3, r3, ror r9
    137c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1380:	0031656c 	eorseq	r6, r1, ip, ror #10
    1384:	61656c43 	cmnvs	r5, r3, asr #24
    1388:	69704772 	ldmdbvs	r0!, {r1, r4, r5, r6, r8, r9, sl, lr}^
    138c:	746e496f 	strbtvc	r4, [lr], #-2415	; 0xfffff691
    1390:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    1394:	47007470 	smlsdxmi	r0, r0, r4, r7
    1398:	54455350 	strbpl	r5, [r5], #-848	; 0xfffffcb0
    139c:	6f682f00 	svcvs	0x00682f00
    13a0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 11f4 <_start-0x6e0c>
    13a4:	61736f6a 	cmnvs	r3, sl, ror #30
    13a8:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    13ac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    13b0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    13b4:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    13b8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    13bc:	72656270 	rsbvc	r6, r5, #112, 4
    13c0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    13c4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    13c8:	4f545265 	svcmi	0x00545265
    13cc:	616d2d53 	cmnvs	sp, r3, asr sp
    13d0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    13d4:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    13d8:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    13dc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    13e0:	70672f73 	rsbvc	r2, r7, r3, ror pc
    13e4:	632e6f69 	teqvs	lr, #420	; 0x1a4
    13e8:	61655200 	cmnvs	r5, r0, lsl #4
    13ec:	69704764 	ldmdbvs	r0!, {r2, r5, r6, r8, r9, sl, lr}^
    13f0:	4342006f 	movtmi	r0, #8303	; 0x206f
    13f4:	3338324d 	teqcc	r8, #-805306364	; 0xd0000004
    13f8:	50475f35 	subpl	r5, r7, r5, lsr pc
    13fc:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1400:	00534745 	subseq	r4, r3, r5, asr #14
    1404:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
    1408:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    140c:	006d754e 	rsbeq	r7, sp, lr, asr #10
    1410:	47746553 			; <UNDEFINED> instruction: 0x47746553
    1414:	446f6970 	strbtmi	r6, [pc], #-2416	; 141c <_start-0x6be4>
    1418:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    141c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1420:	43504700 	cmpmi	r0, #0, 14
    1424:	4700524c 	strmi	r5, [r0, -ip, asr #4]
    1428:	4e454850 	mcrmi	8, 2, r4, cr5, cr0, {2}
    142c:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    1430:	5f544345 	svcpl	0x00544345
    1434:	49534952 	ldmdbmi	r3, {r1, r4, r6, r8, fp, lr}^
    1438:	415f474e 	cmpmi	pc, lr, asr #14
    143c:	434e5953 	movtmi	r5, #59731	; 0xe953
    1440:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    1444:	5f544345 	svcpl	0x00544345
    1448:	4c4c4146 	stfmie	f4, [ip], {70}	; 0x46
    144c:	5f474e49 	svcpl	0x00474e49
    1450:	4e595341 	cdpmi	3, 5, cr5, cr9, cr1, {2}
    1454:	6e450043 	cdpvs	0, 4, cr0, cr5, cr3, {2}
    1458:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    145c:	6f697047 	svcvs	0x00697047
    1460:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    1464:	47007463 	strmi	r7, [r0, -r3, ror #8]
    1468:	45464150 	strbmi	r4, [r6, #-336]	; 0xfffffeb0
    146c:	5047004e 	subpl	r0, r7, lr, asr #32
    1470:	00445550 	subeq	r5, r4, r0, asr r5
    1474:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    1478:	545f5443 	ldrbpl	r5, [pc], #-1091	; 1480 <_start-0x6b80>
    147c:	00455059 	subeq	r5, r5, r9, asr r0
    1480:	566e6970 			; <UNDEFINED> instruction: 0x566e6970
    1484:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    1488:	45524150 	ldrbmi	r4, [r2, #-336]	; 0xfffffeb0
    148c:	6553004e 	ldrbvs	r0, [r3, #-78]	; 0xffffffb2
    1490:	69704774 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, lr}^
    1494:	6e75466f 	cdpvs	6, 7, cr4, cr5, cr15, {3}
    1498:	6f697463 	svcvs	0x00697463
    149c:	5047006e 	subpl	r0, r7, lr, rrx
    14a0:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 14a8 <_start-0x6b58>
    14a4:	47005249 	strmi	r5, [r0, -r9, asr #4]
    14a8:	4e454650 	mcrmi	6, 2, r4, cr5, cr0, {2}
    14ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    14b0:	4e495f4f 	cdpmi	15, 4, cr5, cr9, cr15, {2}
    14b4:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    14b8:	5f544345 	svcpl	0x00544345
    14bc:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
    14c0:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    14c4:	5f544345 	svcpl	0x00544345
    14c8:	454e4f4e 	strbmi	r4, [lr, #-3918]	; 0xfffff0b2
    14cc:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
    14d0:	47004e45 	strmi	r4, [r0, -r5, asr #28]
    14d4:	44555050 	ldrbmi	r5, [r5], #-80	; 0xffffffb0
    14d8:	004b4c43 	subeq	r4, fp, r3, asr #24
    14dc:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    14e0:	525f5443 	subspl	r5, pc, #1124073472	; 0x43000000
    14e4:	4e495349 	cdpmi	3, 4, cr5, cr9, cr9, {2}
    14e8:	45440047 	strbmi	r0, [r4, #-71]	; 0xffffffb9
    14ec:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    14f0:	574f4c5f 	smlsldpl	r4, pc, pc, ip	; <UNPREDICTABLE>
    14f4:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
    14f8:	66005645 	strvs	r5, [r0], -r5, asr #12
    14fc:	4e636e75 	mcrmi	14, 3, r6, cr3, cr5, {3}
    1500:	47006d75 	smlsdxmi	r0, r5, sp, r6
    1504:	4e455250 	mcrmi	2, 2, r5, cr5, cr0, {2}
    1508:	45504700 	ldrbmi	r4, [r0, #-1792]	; 0xfffff900
    150c:	44005344 	strmi	r5, [r0], #-836	; 0xfffffcbc
    1510:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1514:	7047656c 	subvc	r6, r7, ip, ror #10
    1518:	65446f69 	strbvs	r6, [r4, #-3945]	; 0xfffff097
    151c:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1520:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
    1524:	00746573 	rsbseq	r6, r4, r3, ror r5
    1528:	53465047 	movtpl	r5, #24647	; 0x6047
    152c:	52004c45 	andpl	r4, r0, #17664	; 0x4500
    1530:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1534:	5f646576 	svcpl	0x00646576
    1538:	65520031 	ldrbvs	r0, [r2, #-49]	; 0xffffffcf
    153c:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1540:	325f6465 	subscc	r6, pc, #1694498816	; 0x65000000
    1544:	73655200 	cmnvc	r5, #0, 4
    1548:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    154c:	00335f64 	eorseq	r5, r3, r4, ror #30
    1550:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1554:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1558:	5200345f 	andpl	r3, r0, #1593835520	; 0x5f000000
    155c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1560:	5f646576 	svcpl	0x00646576
    1564:	65520035 	ldrbvs	r0, [r2, #-53]	; 0xffffffcb
    1568:	76726573 			; <UNDEFINED> instruction: 0x76726573
    156c:	365f6465 	ldrbcc	r6, [pc], -r5, ror #8
    1570:	73655200 	cmnvc	r5, #0, 4
    1574:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1578:	00375f64 	eorseq	r5, r7, r4, ror #30
    157c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1580:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1584:	5200385f 	andpl	r3, r0, #6225920	; 0x5f0000
    1588:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    158c:	5f646576 	svcpl	0x00646576
    1590:	45440039 	strbmi	r0, [r4, #-57]	; 0xffffffc7
    1594:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    1598:	4c41465f 	mcrrmi	6, 5, r4, r1, cr15
    159c:	474e494c 	strbmi	r4, [lr, -ip, asr #18]
    15a0:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    15a4:	6f697047 	svcvs	0x00697047
    15a8:	73655200 	cmnvc	r5, #0, 4
    15ac:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    15b0:	00415f64 	subeq	r5, r1, r4, ror #30
    15b4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    15b8:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    15bc:	4700425f 	smlsdmi	r0, pc, r2, r4	; <UNPREDICTABLE>
    15c0:	5f4f4950 	svcpl	0x004f4950
    15c4:	0054554f 	subseq	r5, r4, pc, asr #10
    15c8:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    15cc:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    15d0:	6f6c4274 	svcvs	0x006c4274
    15d4:	6e496b63 	vmlsvs.f64	d22, d9, d19
    15d8:	72466f74 	subvc	r6, r6, #116, 30	; 0x1d0
    15dc:	694c6565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, sp, lr}^
    15e0:	2f007473 	svccs	0x00007473
    15e4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    15e8:	6f6a6c2f 	svcvs	0x006a6c2f
    15ec:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    15f0:	442f7275 	strtmi	r7, [pc], #-629	; 15f8 <_start-0x6a08>
    15f4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    15f8:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    15fc:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    1600:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1604:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1608:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    160c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1610:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1614:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    1618:	2f2f7265 	svccs	0x002f7265
    161c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1620:	534f5452 	movtpl	r5, #62546	; 0xf452
    1624:	756f532f 	strbvc	r5, [pc, #-815]!	; 12fd <_start-0x6d03>
    1628:	2f656372 	svccs	0x00656372
    162c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    1630:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1634:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	; 0xffffff44
    1638:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
    163c:	6165682f 	cmnvs	r5, pc, lsr #16
    1640:	2e345f70 	mrccs	15, 1, r5, cr4, cr0, {3}
    1644:	50780063 	rsbspl	r0, r8, r3, rrx
    1648:	4774726f 	ldrbmi	r7, [r4, -pc, ror #4]!
    164c:	72467465 	subvc	r7, r6, #1694498816	; 0x65000000
    1650:	65486565 	strbvs	r6, [r8, #-1381]	; 0xfffffa9b
    1654:	69537061 	ldmdbvs	r3, {r0, r5, r6, ip, sp, lr}^
    1658:	4100657a 	tstmi	r0, sl, ror r5
    165c:	4f4c425f 	svcmi	0x004c425f
    1660:	4c5f4b43 	mrrcmi	11, 4, r4, pc, cr3	; <UNPREDICTABLE>
    1664:	004b4e49 	subeq	r4, fp, r9, asr #28
    1668:	48767270 	ldmdami	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    166c:	49706165 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sp, lr}^
    1670:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1674:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
    1678:	7000656c 	andvc	r6, r0, ip, ror #10
    167c:	6f6c4278 	svcvs	0x006c4278
    1680:	70006b63 	andvc	r6, r0, r3, ror #22
    1684:	6e694c78 	mcrvs	12, 3, r4, cr9, cr8, {3}
    1688:	7670006b 	ldrbtvc	r0, [r0], -fp, rrx
    168c:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    1690:	6c6c614d 	stfvse	f6, [ip], #-308	; 0xfffffecc
    1694:	7000636f 	andvc	r6, r0, pc, ror #6
    1698:	72694678 	rsbvc	r4, r9, #120, 12	; 0x7800000
    169c:	72467473 	subvc	r7, r6, #1929379840	; 0x73000000
    16a0:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	; 0x65
    16a4:	006b636f 	rsbeq	r6, fp, pc, ror #6
    16a8:	4f545278 	svcmi	0x00545278
    16ac:	45485f53 	strbmi	r5, [r8, #-3923]	; 0xfffff0ad
    16b0:	75005041 	strvc	r5, [r0, #-65]	; 0xffffffbf
    16b4:	61654863 	cmnvs	r5, r3, ror #16
    16b8:	44640070 	strbtmi	r0, [r4], #-112	; 0xffffff90
    16bc:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    16c0:	6c427800 	mcrrvs	8, 0, r7, r2, cr0
    16c4:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    16c8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    16cc:	61654878 	smcvs	21640	; 0x5488
    16d0:	78700070 	ldmdavc	r0!, {r4, r5, r6}^
    16d4:	00646e45 	rsbeq	r6, r4, r5, asr #28
    16d8:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
    16dc:	6f697665 	svcvs	0x00697665
    16e0:	6c427375 	mcrrvs	3, 7, r7, r2, cr5
    16e4:	006b636f 	rsbeq	r6, fp, pc, ror #6
    16e8:	746f5478 	strbtvc	r5, [pc], #-1144	; 16f0 <_start-0x6910>
    16ec:	65486c61 	strbvs	r6, [r8, #-3169]	; 0xfffff39f
    16f0:	69537061 	ldmdbvs	r3, {r0, r5, r6, ip, sp, lr}^
    16f4:	7000657a 	andvc	r6, r0, sl, ror r5
    16f8:	74655276 	strbtvc	r5, [r5], #-630	; 0xfffffd8a
    16fc:	006e7275 	rsbeq	r7, lr, r5, ror r2
    1700:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    1704:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1708:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    170c:	42657369 	rsbmi	r7, r5, #-1543503871	; 0xa4000001
    1710:	6b636f6c 	blvs	18dd4c8 <mailbuffer+0x18a23d8>
    1714:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
    1718:	54537061 	ldrbpl	r7, [r3], #-97	; 0xffffff9f
    171c:	54435552 	strbpl	r5, [r3], #-1362	; 0xfffffaae
    1720:	5a49535f 	bpl	12564a4 <mailbuffer+0x121b3b4>
    1724:	53780045 	cmnpl	r8, #69	; 0x45
    1728:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    172c:	6c427800 	mcrrvs	8, 0, r7, r2, cr0
    1730:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1734:	006b6e69 	rsbeq	r6, fp, r9, ror #28
    1738:	6f6c6c61 	svcvs	0x006c6c61
    173c:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    1740:	57780064 	ldrbpl	r0, [r8, -r4, rrx]!
    1744:	65746e61 	ldrbvs	r6, [r4, #-3681]!	; 0xfffff19f
    1748:	7a695364 	bvc	1a564e0 <mailbuffer+0x1a1b3f0>
    174c:	50760065 	rsbspl	r0, r6, r5, rrx
    1750:	4674726f 	ldrbtmi	r7, [r4], -pc, ror #4
    1754:	00656572 	rsbeq	r6, r5, r2, ror r5
    1758:	65724678 	ldrbvs	r4, [r2, #-1656]!	; 0xfffff988
    175c:	74794265 	ldrbtvc	r4, [r9], #-613	; 0xfffffd9b
    1760:	65527365 	ldrbvs	r7, [r2, #-869]	; 0xfffffc9b
    1764:	6e69616d 	powvsez	f6, f1, #5.0
    1768:	00676e69 	rsbeq	r6, r7, r9, ror #28
    176c:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
    1770:	6f6c4277 	svcvs	0x006c4277
    1774:	694c6b63 	stmdbvs	ip, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    1778:	70006b6e 	andvc	r6, r0, lr, ror #22
    177c:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
    1780:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    1784:	6f6c4265 	svcvs	0x006c4265
    1788:	70006b63 	andvc	r6, r0, r3, ror #22
    178c:	65486375 	strbvs	r6, [r8, #-885]	; 0xfffffc8b
    1790:	6e457061 	cdpvs	0, 4, cr7, cr5, cr1, {3}
    1794:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
    1798:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    179c:	496f546b 	stmdbmi	pc!, {r0, r1, r3, r5, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    17a0:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    17a4:	616d0074 	smcvs	53252	; 0xd004
    17a8:	74006e69 	strvc	r6, [r0], #-3689	; 0xfffff197
    17ac:	316b7361 	cmncc	fp, r1, ror #6
    17b0:	616f6c00 	cmnvs	pc, r0, lsl #24
    17b4:	00646564 	rsbeq	r6, r4, r4, ror #10
    17b8:	6b736174 	blvs	1cd9d90 <mailbuffer+0x1c9eca0>
    17bc:	682f0032 	stmdavs	pc!, {r1, r4, r5}	; <UNPREDICTABLE>
    17c0:	2f656d6f 	svccs	0x00656d6f
    17c4:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    17c8:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    17cc:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    17d0:	6f746b73 	svcvs	0x00746b73
    17d4:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    17d8:	61522f69 	cmpvs	r2, r9, ror #30
    17dc:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    17e0:	50797272 	rsbspl	r7, r9, r2, ror r2
    17e4:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    17e8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    17ec:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    17f0:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    17f4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    17f8:	6d2f6f6d 	stcvs	15, cr6, [pc, #-436]!	; 164c <_start-0x69b4>
    17fc:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
    1800:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    1804:	2f656d6f 	svccs	0x00656d6f
    1808:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    180c:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    1810:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    1814:	6f746b73 	svcvs	0x00746b73
    1818:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    181c:	61522f69 	cmpvs	r2, r9, ror #30
    1820:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1824:	50797272 	rsbspl	r7, r9, r2, ror r2
    1828:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    182c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1830:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    1834:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    1838:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    183c:	442f6f6d 	strtmi	r6, [pc], #-3949	; 1844 <_start-0x67bc>
    1840:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1844:	6d2f7372 	stcvs	3, cr7, [pc, #-456]!	; 1684 <_start-0x697c>
    1848:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    184c:	632e786f 	teqvs	lr, #7274496	; 0x6f0000
    1850:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    1854:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    1858:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    185c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    1860:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    1864:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1868:	68630065 	stmdavs	r3!, {r0, r2, r5, r6}^
    186c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    1870:	6164006c 	cmnvs	r4, ip, rrx
    1874:	615f6174 	cmpvs	pc, r4, ror r1	; <UNPREDICTABLE>
    1878:	00726464 	rsbseq	r6, r2, r4, ror #8
    187c:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    1880:	00786f62 	rsbseq	r6, r8, r2, ror #30
    1884:	74706564 	ldrbtvc	r6, [r0], #-1380	; 0xfffffa9c
    1888:	5f5f0068 	svcpl	0x005f0068
    188c:	5f677963 	svcpl	0x00677963
    1890:	666f7270 			; <UNDEFINED> instruction: 0x666f7270
    1894:	5f656c69 	svcpl	0x00656c69
    1898:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    189c:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    18a0:	68740074 	ldmdavs	r4!, {r2, r4, r5, r6}^
    18a4:	665f7369 	ldrbvs	r7, [pc], -r9, ror #6
    18a8:	5f5f006e 	svcpl	0x005f006e
    18ac:	5f677963 	svcpl	0x00677963
    18b0:	666f7270 			; <UNDEFINED> instruction: 0x666f7270
    18b4:	5f656c69 	svcpl	0x00656c69
    18b8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    18bc:	746e655f 	strbtvc	r6, [lr], #-1375	; 0xfffffaa1
    18c0:	63007265 	movwvs	r7, #613	; 0x265
    18c4:	5f6c6c61 	svcpl	0x006c6c61
    18c8:	65746973 	ldrbvs	r6, [r4, #-2419]!	; 0xfffff68d
    18cc:	6f682f00 	svcvs	0x00682f00
    18d0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 1724 <_start-0x68dc>
    18d4:	61736f6a 	cmnvs	r3, sl, ror #30
    18d8:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    18dc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    18e0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    18e4:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    18e8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    18ec:	72656270 	rsbvc	r6, r5, #112, 4
    18f0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    18f4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    18f8:	4f545265 	svcmi	0x00545265
    18fc:	616d2d53 	cmnvs	sp, r3, asr sp
    1900:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1904:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1908:	72742f6f 	rsbsvc	r2, r4, #444	; 0x1bc
    190c:	2e656361 	cdpcs	3, 6, cr6, cr5, cr1, {3}
    1910:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
    1914:	67617373 			; <UNDEFINED> instruction: 0x67617373
    1918:	6f630065 	svcvs	0x00630065
    191c:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
    1920:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    1924:	00424674 	subeq	r4, r2, r4, ror r6
    1928:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    192c:	74636552 	strbtvc	r6, [r3], #-1362	; 0xfffffaae
    1930:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    1934:	6675626c 	ldrbtvs	r6, [r5], -ip, ror #4
    1938:	00726566 	rsbseq	r6, r2, r6, ror #10
    193c:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    1940:	66756265 	ldrbtvs	r6, [r5], -r5, ror #4
    1944:	00726566 	rsbseq	r6, r2, r6, ror #10
    1948:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    194c:	78654874 	stmdavc	r5!, {r2, r4, r5, r6, fp, lr}^
    1950:	52435300 	subpl	r5, r3, #0, 6
    1954:	5f4e4545 	svcpl	0x004e4545
    1958:	47494548 	strbmi	r4, [r9, -r8, asr #10]
    195c:	64005448 	strvs	r5, [r0], #-1096	; 0xfffffbb8
    1960:	53776172 	cmnpl	r7, #-2147483620	; 0x8000001c
    1964:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1968:	6f660067 	svcvs	0x00660067
    196c:	7600746e 	strvc	r7, [r0], -lr, ror #8
    1970:	6f656469 	svcvs	0x00656469
    1974:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1978:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
    197c:	6f700073 	svcvs	0x00700073
    1980:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    1984:	795f6e6f 	ldmdbvc	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1988:	78656800 	stmdavc	r5!, {fp, sp, lr}^
    198c:	72640069 	rsbvc	r0, r4, #105	; 0x69
    1990:	69507761 	ldmdbvs	r0, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
    1994:	006c6578 	rsbeq	r6, ip, r8, ror r5
    1998:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    199c:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
    19a0:	6f682f00 	svcvs	0x00682f00
    19a4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 17f8 <_start-0x6808>
    19a8:	61736f6a 	cmnvs	r3, sl, ror #30
    19ac:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    19b0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    19b4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    19b8:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    19bc:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    19c0:	72656270 	rsbvc	r6, r5, #112, 4
    19c4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    19c8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    19cc:	4f545265 	svcmi	0x00545265
    19d0:	616d2d53 	cmnvs	sp, r3, asr sp
    19d4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    19d8:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    19dc:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    19e0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    19e4:	69762f73 	ldmdbvs	r6!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    19e8:	2e6f6564 	cdpcs	5, 6, cr6, cr15, cr4, {3}
    19ec:	6f700063 	svcvs	0x00700063
    19f0:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    19f4:	785f6e6f 	ldmdavc	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    19f8:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
    19fc:	6e6c746e 	cdpvs	4, 6, cr7, cr12, cr14, {3}
    1a00:	73656d00 	cmnvc	r5, #0, 26
    1a04:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    1a08:	43530068 	cmpmi	r3, #104	; 0x68
    1a0c:	4e454552 	mcrmi	5, 2, r4, cr5, cr2, {2}
    1a10:	4449575f 	strbmi	r5, [r9], #-1887	; 0xfffff8a1
    1a14:	70004854 	andvc	r4, r0, r4, asr r8
    1a18:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    1a1c:	00656761 	rsbeq	r6, r5, r1, ror #14
    1a20:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
    1a24:	676f4c00 	strbvs	r4, [pc, -r0, lsl #24]!
    1a28:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1a2c:	53700065 	cmnpl	r0, #101	; 0x65
    1a30:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1a34:	616d0065 	cmnvs	sp, r5, rrx
    1a38:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    1a3c:	70737500 	rsbsvc	r7, r3, r0, lsl #10
    1a40:	73615f69 	cmnvc	r1, #420	; 0x1a4
    1a44:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
    1a48:	5f6e6f69 	svcpl	0x006e6f69
    1a4c:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
    1a50:	44006465 	strmi	r6, [r0], #-1125	; 0xfffffb9b
    1a54:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
    1a58:	64786548 	ldrbtvs	r6, [r8], #-1352	; 0xfffffab8
    1a5c:	00706d75 	rsbseq	r6, r0, r5, ror sp
    1a60:	6e694c6e 	cdpvs	12, 6, cr4, cr9, cr14, {3}
    1a64:	4d6e0065 	stclmi	0, cr0, [lr, #-404]!	; 0xfffffe6c
    1a68:	6f726369 	svcvs	0x00726369
    1a6c:	6f636553 	svcvs	0x00636553
    1a70:	0073646e 	rsbseq	r6, r3, lr, ror #8
    1a74:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    1a78:	6e614300 	cdpvs	3, 6, cr4, cr1, cr0, {0}
    1a7c:	4b6c6563 	blmi	1b1b010 <mailbuffer+0x1adff20>
    1a80:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1a84:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
    1a88:	53007265 	movwpl	r7, #613	; 0x265
    1a8c:	6f507465 	svcvs	0x00507465
    1a90:	53726577 	cmnpl	r2, #499122176	; 0x1dc00000
    1a94:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1a98:	70006e4f 	andvc	r6, r0, pc, asr #28
    1a9c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1aa0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1aa4:	6c694670 	stclvs	6, cr4, [r9], #-448	; 0xfffffe40
    1aa8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    1aac:	2f656d6f 	svccs	0x00656d6f
    1ab0:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    1ab4:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    1ab8:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    1abc:	6f746b73 	svcvs	0x00746b73
    1ac0:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    1ac4:	61522f69 	cmpvs	r2, r9, ror #30
    1ac8:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1acc:	50797272 	rsbspl	r7, r9, r2, ror r2
    1ad0:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1ad4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1ad8:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    1adc:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    1ae0:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    1ae4:	442f6f6d 	strtmi	r6, [pc], #-3949	; 1aec <_start-0x6514>
    1ae8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1aec:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 192c <_start-0x66d4>
    1af0:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    1af4:	752f3431 	strvc	r3, [pc, #-1073]!	; 16cb <_start-0x6935>
    1af8:	62697073 	rsbvs	r7, r9, #115	; 0x73
    1afc:	2e646e69 	cdpcs	14, 6, cr6, cr4, cr9, {3}
    1b00:	4d6e0063 	stclmi	0, cr0, [lr, #-396]!	; 0xfffffe74
    1b04:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    1b08:	6f636553 	svcvs	0x00636553
    1b0c:	0073646e 	rsbseq	r6, r3, lr, ror #8
    1b10:	746e4954 	strbtvc	r4, [lr], #-2388	; 0xfffff6ac
    1b14:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    1b18:	61487470 	hvcvs	34624	; 0x8740
    1b1c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1b20:	73750072 	cmnvc	r5, #114	; 0x72
    1b24:	616c6544 	cmnvs	ip, r4, asr #10
    1b28:	74530079 	ldrbvc	r0, [r3], #-121	; 0xffffff87
    1b2c:	4b747261 	blmi	1d1e4b8 <mailbuffer+0x1ce33c8>
    1b30:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1b34:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
    1b38:	70007265 	andvc	r7, r0, r5, ror #4
    1b3c:	72707845 	rsbsvc	r7, r0, #4521984	; 0x450000
    1b40:	6c427000 	marvs	acc0, r7, r2
    1b44:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1b48:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1b4c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
    1b50:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
    1b54:	7463656e 	strbtvc	r6, [r3], #-1390	; 0xfffffa92
    1b58:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    1b5c:	70757272 	rsbsvc	r7, r5, r2, ror r2
    1b60:	446e0074 	strbtmi	r0, [lr], #-116	; 0xffffff8c
    1b64:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    1b68:	00644965 	rsbeq	r4, r4, r5, ror #18
    1b6c:	72654b54 	rsbvc	r4, r5, #84, 22	; 0x15000
    1b70:	546c656e 	strbtpl	r6, [ip], #-1390	; 0xfffffa92
    1b74:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1b78:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1b7c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1b80:	6544734d 	strbvs	r7, [r4, #-845]	; 0xfffffcb3
    1b84:	0079616c 	rsbseq	r6, r9, ip, ror #2
    1b88:	65766553 	ldrbvs	r6, [r6, #-1363]!	; 0xfffffaad
    1b8c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1b90:	65446e00 	strbvs	r6, [r4, #-3584]	; 0xfffff200
    1b94:	0079616c 	rsbseq	r6, r9, ip, ror #2
    1b98:	4d79654b 	cfldr64mi	mvdx6, [r9, #-300]!	; 0xfffffed4
    1b9c:	6f437861 	svcvs	0x00437861
    1ba0:	2f006564 	svccs	0x00006564
    1ba4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1ba8:	6f6a6c2f 	svcvs	0x006a6c2f
    1bac:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    1bb0:	442f7275 	strtmi	r7, [pc], #-629	; 1bb8 <_start-0x6448>
    1bb4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1bb8:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    1bbc:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    1bc0:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1bc4:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1bc8:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1bcc:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1bd0:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1bd4:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    1bd8:	442f7265 	strtmi	r7, [pc], #-613	; 1be0 <_start-0x6420>
    1bdc:	2f6f6d65 	svccs	0x006f6d65
    1be0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1be4:	2f737265 	svccs	0x00737265
    1be8:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    1bec:	2f343135 	svccs	0x00343135
    1bf0:	2e707261 	cdpcs	2, 7, cr7, cr0, cr1, {3}
    1bf4:	654b0063 	strbvs	r0, [fp, #-99]	; 0xffffff9d
    1bf8:	70614379 	rsbvc	r4, r1, r9, ror r3
    1bfc:	636f4c73 	cmnvs	pc, #29440	; 0x7300
    1c00:	654b006b 	strbvs	r0, [fp, #-107]	; 0xffffff95
    1c04:	6d754e79 	ldclvs	14, cr4, [r5, #-484]!	; 0xfffffe1c
    1c08:	6b636f4c 	blvs	18dd940 <mailbuffer+0x18a2850>
    1c0c:	72506e00 	subsvc	r6, r0, #0, 28
    1c10:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    1c14:	64416c6f 	strbvs	r6, [r1], #-3183	; 0xfffff391
    1c18:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1c1c:	6e654c73 	mcrvs	12, 3, r4, cr5, cr3, {3}
    1c20:	00687467 	rsbeq	r7, r8, r7, ror #8
    1c24:	5479654b 	ldrbtpl	r6, [r9], #-1355	; 0xfffffab5
    1c28:	6c756261 	lfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
    1c2c:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    1c30:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    1c34:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
    1c38:	6e007472 	mcrvs	4, 0, r7, cr0, cr2, {3}
    1c3c:	64415748 	strbvs	r5, [r1], #-1864	; 0xfffff8b8
    1c40:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1c44:	61705373 	cmnvs	r0, r3, ror r3
    1c48:	4b006563 	blmi	1b1dc <DWHCIDeviceChannelInterruptHandler+0x568>
    1c4c:	6f487965 	svcvs	0x00487965
    1c50:	4b00656d 	blmi	1b20c <DWHCIDeviceChannelInterruptHandler+0x598>
    1c54:	31467965 	cmpcc	r6, r5, ror #18
    1c58:	654b0030 	strbvs	r0, [fp, #-48]	; 0xffffffd0
    1c5c:	31314679 	teqcc	r1, r9, ror r6
    1c60:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    1c64:	00323146 	eorseq	r3, r2, r6, asr #2
    1c68:	4479654b 	ldrbtmi	r6, [r9], #-1355	; 0xfffffab5
    1c6c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    1c70:	72500065 	subsvc	r0, r0, #101	; 0x65
    1c74:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    1c78:	64416c6f 	strbvs	r6, [r1], #-3183	; 0xfffff391
    1c7c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1c80:	6e655373 	mcrvs	3, 3, r5, cr5, cr3, {3}
    1c84:	00726564 	rsbseq	r6, r2, r4, ror #10
    1c88:	5243414d 	subpl	r4, r3, #1073741843	; 0x40000013
    1c8c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1c90:	00726576 	rsbseq	r6, r2, r6, ror r5
    1c94:	746f7250 	strbtvc	r7, [pc], #-592	; 1c9c <_start-0x6364>
    1c98:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 1ae4 <_start-0x651c>
    1c9c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1ca0:	54737365 	ldrbtpl	r7, [r3], #-869	; 0xfffffc9b
    1ca4:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    1ca8:	654b0074 	strbvs	r0, [fp, #-116]	; 0xffffff8c
    1cac:	5f504b79 	svcpl	0x00504b79
    1cb0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1cb4:	5400646f 	strpl	r6, [r0], #-1135	; 0xfffffb91
    1cb8:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
    1cbc:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
    1cc0:	64616548 	strbtvs	r6, [r1], #-1352	; 0xfffffab8
    1cc4:	4b007265 	blmi	1e660 <USBConfigurationParser+0x160>
    1cc8:	69527965 	ldmdbvs	r2, {r0, r2, r5, r6, r8, fp, ip, sp, lr}^
    1ccc:	00746867 	rsbseq	r6, r4, r7, ror #16
    1cd0:	4279654b 	rsbsmi	r6, r9, #314572800	; 0x12c00000
    1cd4:	736b6361 	cmnvc	fp, #-2080374783	; 0x84000001
    1cd8:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    1cdc:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    1ce0:	65676150 	strbvs	r6, [r7, #-336]!	; 0xfffffeb0
    1ce4:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1ce8:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    1cec:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0xfffffaae
    1cf0:	48006e72 	stmdami	r0, {r1, r4, r5, r6, r9, sl, fp, sp, lr}
    1cf4:	64644157 	strbtvs	r4, [r4], #-343	; 0xfffffea9
    1cf8:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1cfc:	67726154 			; <UNDEFINED> instruction: 0x67726154
    1d00:	4f007465 	svcmi	0x00007465
    1d04:	50496e77 	subpl	r6, r9, r7, ror lr
    1d08:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1d0c:	00737365 	rsbseq	r7, r3, r5, ror #6
    1d10:	5079654b 	rsbspl	r6, r9, fp, asr #10
    1d14:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    1d18:	65726353 	ldrbvs	r6, [r2, #-851]!	; 0xfffffcad
    1d1c:	4b006e65 	blmi	1d6b8 <DWHCITransferStageDataIsPeriodic+0x80>
    1d20:	504b7965 	subpl	r7, fp, r5, ror #18
    1d24:	4b00305f 	blmi	dea8 <__module_entries_end+0x5dc8>
    1d28:	504b7965 	subpl	r7, fp, r5, ror #18
    1d2c:	4b00315f 	blmi	e2b0 <__module_entries_end+0x61d0>
    1d30:	504b7965 	subpl	r7, fp, r5, ror #18
    1d34:	4b00325f 	blmi	e6b8 <__module_entries_end+0x65d8>
    1d38:	504b7965 	subpl	r7, fp, r5, ror #18
    1d3c:	4b00335f 	blmi	eac0 <__module_entries_end+0x69e0>
    1d40:	6e457965 	cdpvs	9, 4, cr7, cr5, cr5, {3}
    1d44:	654b0064 	strbvs	r0, [fp, #-100]	; 0xffffff9c
    1d48:	5f504b79 	svcpl	0x00504b79
    1d4c:	654b0035 	strbvs	r0, [fp, #-53]	; 0xffffffcb
    1d50:	5f504b79 	svcpl	0x00504b79
    1d54:	654b0036 	strbvs	r0, [fp, #-54]	; 0xffffffca
    1d58:	5f504b79 	svcpl	0x00504b79
    1d5c:	654b0037 	strbvs	r0, [fp, #-55]	; 0xffffffc9
    1d60:	5f504b79 	svcpl	0x00504b79
    1d64:	654b0038 	strbvs	r0, [fp, #-56]	; 0xffffffc8
    1d68:	5f504b79 	svcpl	0x00504b79
    1d6c:	654b0039 	strbvs	r0, [fp, #-57]	; 0xffffffc7
    1d70:	5f504b79 	svcpl	0x00504b79
    1d74:	74627553 	strbtvc	r7, [r2], #-1363	; 0xfffffaad
    1d78:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
    1d7c:	41574800 	cmpmi	r7, r0, lsl #16
    1d80:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1d84:	65537373 	ldrbvs	r7, [r3, #-883]	; 0xfffffc8d
    1d88:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
    1d8c:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    1d90:	445f504b 	ldrbmi	r5, [pc], #-75	; 1d98 <_start-0x6268>
    1d94:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
    1d98:	72460065 	subvc	r0, r6, #101	; 0x65
    1d9c:	61536d6f 	cmpvs	r3, pc, ror #26
    1da0:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    1da4:	6e774f00 	cdpvs	15, 7, cr4, cr7, cr0, {0}
    1da8:	4143414d 	cmpmi	r3, sp, asr #2
    1dac:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1db0:	4b007373 	blmi	1eb84 <USBConfigurationParserError+0xa0>
    1db4:	504b7965 	subpl	r7, fp, r5, ror #18
    1db8:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 1c44 <_start-0x63bc>
    1dbc:	4b00616d 	blmi	1a378 <DWHCIDeviceTransferStageAsync+0xc0>
    1dc0:	504b7965 	subpl	r7, fp, r5, ror #18
    1dc4:	6c754d5f 	ldclvs	13, cr4, [r5], #-380	; 0xfffffe84
    1dc8:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    1dcc:	74450079 	strbvc	r0, [r5], #-121	; 0xffffff87
    1dd0:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
    1dd4:	4b007465 	blmi	1ef70 <USBDeviceCopy+0x1c0>
    1dd8:	63537965 	cmpvs	r3, #1654784	; 0x194000
    1ddc:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
    1de0:	6b636f4c 	blvs	18ddb18 <mailbuffer+0x18a2a28>
    1de4:	72506e00 	subsvc	r6, r0, #0, 28
    1de8:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    1dec:	79546c6f 	ldmdbvc	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    1df0:	4b006570 	blmi	1b3b8 <DWHCIDeviceChannelInterruptHandler+0x744>
    1df4:	70537965 	subsvc	r7, r3, r5, ror #18
    1df8:	00656361 	rsbeq	r6, r5, r1, ror #6
    1dfc:	4e79654b 	cdpmi	5, 7, cr6, cr9, cr11, {2}
    1e00:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    1e04:	4b79654b 	blmi	1e5b338 <mailbuffer+0x1e20248>
    1e08:	64415f50 	strbvs	r5, [r1], #-3920	; 0xfffff0b0
    1e0c:	654b0064 	strbvs	r0, [fp, #-100]	; 0xffffff9c
    1e10:	66654c79 			; <UNDEFINED> instruction: 0x66654c79
    1e14:	654b0074 	strbvs	r0, [fp, #-116]	; 0xffffff8c
    1e18:	63734579 	cmnvs	r3, #507510784	; 0x1e400000
    1e1c:	00657061 	rsbeq	r7, r5, r1, rrx
    1e20:	4b79654b 	blmi	1e5b354 <mailbuffer+0x1e20264>
    1e24:	6e455f50 	mcrvs	15, 2, r5, cr5, cr0, {2}
    1e28:	00726574 	rsbseq	r6, r2, r4, ror r5
    1e2c:	4b79654b 	blmi	1e5b360 <mailbuffer+0x1e20270>
    1e30:	65435f50 	strbvs	r5, [r3, #-3920]	; 0xfffff0b0
    1e34:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1e38:	43414d00 	movtmi	r4, #7424	; 0x1d00
    1e3c:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    1e40:	6e007265 	cdpvs	2, 0, cr7, cr0, cr5, {3}
    1e44:	746f7250 	strbtvc	r7, [pc], #-592	; 1e4c <_start-0x61b4>
    1e48:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 1c94 <_start-0x636c>
    1e4c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1e50:	53737365 	cmnpl	r3, #-1811939327	; 0x94000001
    1e54:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    1e58:	57486e00 	strbpl	r6, [r8, -r0, lsl #28]
    1e5c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1e60:	4c737365 	ldclmi	3, cr7, [r3], #-404	; 0xfffffe6c
    1e64:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1e68:	41700068 	cmnmi	r0, r8, rrx
    1e6c:	72465052 	subvc	r5, r6, #82	; 0x52
    1e70:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1e74:	50524154 	subspl	r4, r2, r4, asr r1
    1e78:	6b636150 	blvs	18da3c0 <mailbuffer+0x189f2d0>
    1e7c:	4b007465 	blmi	1f018 <USBDeviceCopy+0x268>
    1e80:	70417965 	subvc	r7, r1, r5, ror #18
    1e84:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
    1e88:	6f697461 	svcvs	0x00697461
    1e8c:	4f6e006e 	svcmi	0x006e006e
    1e90:	646f4350 	strbtvs	r4, [pc], #-848	; 1e98 <_start-0x6168>
    1e94:	466e0065 	strbtmi	r0, [lr], -r5, rrx
    1e98:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    1e9c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1ea0:	4b006874 	blmi	1c078 <DWHCIDeviceDumpStatus+0x2a4>
    1ea4:	31467965 	cmpcc	r6, r5, ror #18
    1ea8:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    1eac:	4b003246 	blmi	e7cc <__module_entries_end+0x66ec>
    1eb0:	33467965 	movtcc	r7, #26981	; 0x6965
    1eb4:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    1eb8:	4b003446 	blmi	efd8 <__module_entries_end+0x6ef8>
    1ebc:	35467965 	strbcc	r7, [r6, #-2405]	; 0xfffff69b
    1ec0:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    1ec4:	4b003646 	blmi	f7e4 <__module_entries_end+0x7704>
    1ec8:	37467965 	strbcc	r7, [r6, -r5, ror #18]
    1ecc:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    1ed0:	4b003846 	blmi	fff0 <__module_entries_end+0x7f10>
    1ed4:	39467965 	stmdbcc	r6, {r0, r2, r5, r6, r8, fp, ip, sp, lr}^
    1ed8:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    1edc:	73756150 	cmnvc	r5, #80, 2
    1ee0:	654b0065 	strbvs	r0, [fp, #-101]	; 0xffffff9b
    1ee4:	5f504b79 	svcpl	0x00504b79
    1ee8:	654b0034 	strbvs	r0, [fp, #-52]	; 0xffffffcc
    1eec:	67615079 			; <UNDEFINED> instruction: 0x67615079
    1ef0:	00705565 	rsbseq	r5, r0, r5, ror #10
    1ef4:	4479654b 	ldrbtmi	r6, [r9], #-1355	; 0xfffffab5
    1ef8:	006e776f 	rsbeq	r7, lr, pc, ror #14
    1efc:	5579654b 	ldrbpl	r6, [r9, #-1355]!	; 0xfffffab5
    1f00:	41540070 	cmpmi	r4, r0, ror r0
    1f04:	72465052 	subvc	r5, r6, #82	; 0x52
    1f08:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1f0c:	646e4977 	strbtvs	r4, [lr], #-2423	; 0xfffff689
    1f10:	54007865 	strpl	r7, [r0], #-2149	; 0xfffff79b
    1f14:	4d425355 	stclmi	3, cr5, [r2, #-340]	; 0xfffffeac
    1f18:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
    1f1c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1f20:	70006563 	andvc	r6, r0, r3, ror #10
    1f24:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
    1f28:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
    1f2c:	66726574 			; <UNDEFINED> instruction: 0x66726574
    1f30:	53656361 	cmnpl	r5, #-2080374783	; 0x84000001
    1f34:	6c436275 	sfmvs	f6, 2, [r3], {117}	; 0x75
    1f38:	00737361 	rsbseq	r7, r3, r1, ror #6
    1f3c:	436e5f6d 	cmnmi	lr, #436	; 0x1b4
    1f40:	6e6e6168 	powvsez	f6, f6, #0.0
    1f44:	6c416c65 	mcrrvs	12, 6, r6, r1, cr5
    1f48:	61636f6c 	cmnvs	r3, ip, ror #30
    1f4c:	00646574 	rsbeq	r6, r4, r4, ror r5
    1f50:	43414d54 	movtmi	r4, #7508	; 0x1d54
    1f54:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1f58:	00737365 	rsbseq	r7, r3, r5, ror #6
    1f5c:	42535554 	subsmi	r5, r3, #84, 10	; 0x15000000
    1f60:	6b6c7542 	blvs	1b1f470 <mailbuffer+0x1ae4380>
    1f64:	796c6e4f 	stmdbvc	ip!, {r0, r1, r2, r3, r6, r9, sl, fp, sp, lr}^
    1f68:	7373614d 	cmnvc	r3, #1073741843	; 0x40000013
    1f6c:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    1f70:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    1f74:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    1f78:	5f6d0065 	svcpl	0x006d0065
    1f7c:	75486375 	strbvc	r6, [r8, #-885]	; 0xfffffc8b
    1f80:	64644162 	strbtvs	r4, [r4], #-354	; 0xfffffe9e
    1f84:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1f88:	53555400 	cmppl	r5, #0, 8
    1f8c:	65446950 	strbvs	r6, [r4, #-2384]	; 0xfffff6b0
    1f90:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    1f94:	6f666e49 	svcvs	0x00666e49
    1f98:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
    1f9c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1fa0:	46705f6d 	ldrbtmi	r5, [r0], -sp, ror #30
    1fa4:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    1fa8:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    1fac:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    1fb0:	5f6d0072 	svcpl	0x006d0072
    1fb4:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1fb8:	44676966 	strbtmi	r6, [r7], #-2406	; 0xfffff69a
    1fbc:	00637365 	rsbeq	r7, r3, r5, ror #6
    1fc0:	70646e45 	rsbvc	r6, r4, r5, asr #28
    1fc4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    1fc8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1fcc:	6b6c7542 	blvs	1b1f4dc <mailbuffer+0x1ae43ec>
    1fd0:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    1fd4:	52444948 	subpl	r4, r4, #72, 18	; 0x120000
    1fd8:	726f7065 	rsbvc	r7, pc, #101	; 0x65
    1fdc:	73654474 	cmnvc	r5, #116, 8	; 0x74000000
    1fe0:	70697263 	rsbvc	r7, r9, r3, ror #4
    1fe4:	00726f74 	rsbseq	r6, r2, r4, ror pc
    1fe8:	63755f6d 	cmnvs	r5, #436	; 0x1b4
    1fec:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    1ff0:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    1ff4:	47695053 			; <UNDEFINED> instruction: 0x47695053
    1ff8:	50656d61 	rsbpl	r6, r5, r1, ror #26
    1ffc:	65476461 	strbvs	r6, [r7, #-1121]	; 0xfffffb9f
    2000:	61745374 	cmnvs	r4, r4, ror r3
    2004:	00737574 	rsbseq	r7, r3, r4, ror r5
    2008:	446e5f6d 	strbtmi	r5, [lr], #-3949	; 0xfffff093
    200c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2010:	646e4965 	strbtvs	r4, [lr], #-2405	; 0xfffff69b
    2014:	62007865 	andvs	r7, r0, #6619136	; 0x650000
    2018:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    201c:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    2020:	6d754e65 	ldclvs	14, cr4, [r5, #-404]!	; 0xfffffe6c
    2024:	00726562 	rsbseq	r6, r2, r2, ror #10
    2028:	69505355 	ldmdbvs	r0, {r0, r2, r4, r6, r8, r9, ip, lr}^
    202c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2030:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    2034:	666e4974 			; <UNDEFINED> instruction: 0x666e4974
    2038:	616d726f 	cmnvs	sp, pc, ror #4
    203c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2040:	6c416200 	sfmvs	f6, 2, [r1], {-0}
    2044:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2048:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    204c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2050:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
    2054:	73746168 	cmnvc	r4, #104, 2
    2058:	6f724600 	svcvs	0x00724600
    205c:	5053556d 	subspl	r5, r3, sp, ror #10
    2060:	5f6d0069 	svcpl	0x006d0069
    2064:	70655270 	rsbvc	r5, r5, r0, ror r2
    2068:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
    206c:	6f70646e 	svcvs	0x0070646e
    2070:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2074:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
    2078:	00676e69 	rsbeq	r6, r7, r9, ror #28
    207c:	63755f6d 	cmnvs	r5, #436	; 0x1b4
    2080:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2084:	00737365 	rsbseq	r7, r3, r5, ror #6
    2088:	746f5477 	strbtvc	r5, [pc], #-1143	; 2090 <_start-0x5f70>
    208c:	654c6c61 	strbvs	r6, [ip, #-3169]	; 0xfffff39f
    2090:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2094:	6e5f6d00 	cdpvs	13, 5, cr6, cr15, cr0, {0}
    2098:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    209c:	72655073 	rsbvc	r5, r5, #115	; 0x73
    20a0:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    20a4:	74636173 	strbtvc	r6, [r3], #-371	; 0xfffffe8d
    20a8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    20ac:	4b705f6d 	blmi	1c19e68 <mailbuffer+0x1bded78>
    20b0:	72507965 	subsvc	r7, r0, #1654784	; 0x194000
    20b4:	65737365 	ldrbvs	r7, [r3, #-869]!	; 0xfffffc9b
    20b8:	6e614864 	cdpvs	8, 6, cr4, cr1, cr4, {3}
    20bc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    20c0:	50535500 	subspl	r5, r3, r0, lsl #10
    20c4:	756f4d69 	strbvc	r4, [pc, #-3433]!	; 1363 <_start-0x6c9d>
    20c8:	65526573 	ldrbvs	r6, [r2, #-1395]	; 0xfffffa8d
    20cc:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    20d0:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    20d4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    20d8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    20dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
    20e0:	44705f6d 	ldrbtmi	r5, [r0], #-3949	; 0xfffff093
    20e4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    20e8:	5f6d0065 	svcpl	0x006d0065
    20ec:	6361506e 	cmnvs	r1, #110	; 0x6e
    20f0:	7374656b 	cmnvc	r4, #448790528	; 0x1ac00000
    20f4:	54726550 	ldrbtpl	r6, [r2], #-1360	; 0xfffffab0
    20f8:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    20fc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    2100:	6d006e6f 	stcvs	14, cr6, [r0, #-444]	; 0xfffffe44
    2104:	4963755f 	stmdbmi	r3!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    2108:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    210c:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    2110:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    2114:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
    2118:	7053625f 	subsvc	r6, r3, pc, asr r2
    211c:	4374696c 	cmnmi	r4, #108, 18	; 0x1b0000
    2120:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    2124:	00657465 	rsbeq	r7, r5, r5, ror #8
    2128:	76654462 	strbtvc	r4, [r5], -r2, ror #8
    212c:	43656369 	cmnmi	r5, #-1543503871	; 0xa4000001
    2130:	7373616c 	cmnvc	r3, #108, 2
    2134:	64636200 	strbtvs	r6, [r3], #-512	; 0xfffffe00
    2138:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    213c:	6d006563 	cfstr32vs	mvfx6, [r0, #-396]	; 0xfffffe74
    2140:	7453625f 	ldrbvc	r6, [r3], #-607	; 0xfffffda1
    2144:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2148:	545f6d00 	ldrbpl	r6, [pc], #-3328	; 2150 <_start-0x5eb0>
    214c:	00657079 	rsbeq	r7, r5, r9, ror r0
    2150:	79654b54 	stmdbvc	r5!, {r2, r4, r6, r8, r9, fp, lr}^
    2154:	0070614d 	rsbseq	r6, r0, sp, asr #2
    2158:	69505355 	ldmdbvs	r0, {r0, r2, r4, r6, r8, r9, ip, lr}^
    215c:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2160:	46657669 	strbtmi	r7, [r5], -r9, ror #12
    2164:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    2168:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    216c:	50646e45 	rsbpl	r6, r4, r5, asr #28
    2170:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    2174:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2178:	72505f6d 	subsvc	r5, r0, #436	; 0x1b4
    217c:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
    2180:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2184:	00676e69 	rsbeq	r6, r7, r9, ror #28
    2188:	69505355 	ldmdbvs	r0, {r0, r2, r4, r6, r8, r9, ip, lr}^
    218c:	6279654b 	rsbsvs	r6, r9, #314572800	; 0x12c00000
    2190:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
    2194:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    2198:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    219c:	5379654b 	cmnpl	r9, #314572800	; 0x12c00000
    21a0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    21a4:	6e614873 	mcrvs	8, 3, r4, cr1, cr3, {3}
    21a8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    21ac:	00776152 	rsbseq	r6, r7, r2, asr r1
    21b0:	506e5f6d 	rsbpl	r5, lr, sp, ror #30
    21b4:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
    21b8:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
    21bc:	6e49625f 	mcrvs	2, 2, r6, cr9, cr15, {2}
    21c0:	65445400 	strbvs	r5, [r4, #-1024]	; 0xfffffc00
    21c4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    21c8:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    21cc:	76726553 			; <UNDEFINED> instruction: 0x76726553
    21d0:	00656369 	rsbeq	r6, r5, r9, ror #6
    21d4:	4d6e5f6d 	stclmi	15, cr5, [lr, #-436]!	; 0xfffffe4c
    21d8:	61507861 	cmpvs	r0, r1, ror #16
    21dc:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
    21e0:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    21e4:	6f436e00 	svcvs	0x00436e00
    21e8:	00746e75 	rsbseq	r6, r4, r5, ror lr
    21ec:	424b5570 	submi	r5, fp, #112, 10	; 0x1c000000
    21f0:	77003144 	strvc	r3, [r0, -r4, asr #2]
    21f4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    21f8:	4d690065 	stclmi	0, cr0, [r9, #-404]!	; 0xfffffe6c
    21fc:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
    2200:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
    2204:	00726572 	rsbseq	r6, r2, r2, ror r5
    2208:	74655354 	strbtvc	r5, [r5], #-852	; 0xfffffcac
    220c:	61447075 	hvcvs	18181	; 0x4705
    2210:	54006174 	strpl	r6, [r0], #-372	; 0xfffffe8c
    2214:	50425355 	subpl	r5, r2, r5, asr r3
    2218:	70004449 	andvc	r4, r0, r9, asr #8
    221c:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    2220:	42535500 	subsmi	r5, r3, #0, 10
    2224:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    2228:	67694864 	strbvs	r4, [r9, -r4, ror #16]!
    222c:	6e450068 	cdpvs	0, 4, cr0, cr5, cr8, {3}
    2230:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    2234:	7954746e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    2238:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
    223c:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    2240:	00747075 	rsbseq	r7, r4, r5, ror r0
    2244:	72506469 	subsvc	r6, r0, #1761607680	; 0x69000000
    2248:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
    224c:	5f6d0074 	svcpl	0x006d0074
    2250:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2254:	55700065 	ldrbpl	r0, [r0, #-101]!	; 0xffffff9b
    2258:	00444150 	subeq	r4, r4, r0, asr r1
    225c:	4c705f73 	ldclmi	15, cr5, [r0], #-460	; 0xfffffe34
    2260:	61726269 	cmnvs	r2, r9, ror #4
    2264:	6d007972 	stcvs	9, cr7, [r0, #-456]	; 0xfffffe38
    2268:	7453625f 	ldrbvc	r6, [r3], #-607	; 0xfffffda1
    226c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2270:	67617453 			; <UNDEFINED> instruction: 0x67617453
    2274:	6d620065 	stclvs	0, cr0, [r2, #-404]!	; 0xfffffe6c
    2278:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    227c:	54747365 	ldrbtpl	r7, [r4], #-869	; 0xfffffc9b
    2280:	00657079 	rsbeq	r7, r5, r9, ror r0
    2284:	696e696d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    2288:	006d756d 	rsbeq	r7, sp, sp, ror #10
    228c:	55646362 	strbpl	r6, [r4, #-866]!	; 0xfffffc9e
    2290:	6d004253 	sfmvs	f4, 4, [r0, #-332]	; 0xfffffeb4
    2294:	6e45705f 	mcrvs	0, 2, r7, cr5, cr15, {2}
    2298:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    229c:	0030746e 	eorseq	r7, r0, lr, ror #8
    22a0:	48574454 	ldmdami	r7, {r2, r4, r6, sl, lr}^
    22a4:	72544943 	subsvc	r4, r4, #1097728	; 0x10c000
    22a8:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    22ac:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    22b0:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    22b4:	00617461 	rsbeq	r7, r1, r1, ror #8
    22b8:	43414d70 	movtmi	r4, #7536	; 0x1d70
    22bc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    22c0:	00737365 	rsbseq	r7, r3, r5, ror #6
    22c4:	53705f6d 	cmnpl	r0, #436	; 0x1b4
    22c8:	64747568 	ldrbtvs	r7, [r4], #-1384	; 0xfffffa98
    22cc:	486e776f 	stmdami	lr!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    22d0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    22d4:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
    22d8:	78654e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, lr}^
    22dc:	44495074 	strbmi	r5, [r9], #-116	; 0xffffff8c
    22e0:	50535500 	subspl	r5, r3, r0, lsl #10
    22e4:	6d614769 	stclvs	7, cr4, [r1, #-420]!	; 0xfffffe5c
    22e8:	64615065 	strbtvs	r5, [r1], #-101	; 0xffffff9b
    22ec:	69617641 	stmdbvs	r1!, {r0, r6, r9, sl, ip, sp, lr}^
    22f0:	6c62616c 	stfvse	f6, [r2], #-432	; 0xfffffe50
    22f4:	44620065 	strbtmi	r0, [r2], #-101	; 0xffffff9b
    22f8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    22fc:	62755365 	rsbsvs	r5, r5, #-1811939327	; 0x94000001
    2300:	73616c43 	cmnvc	r1, #17152	; 0x4300
    2304:	55540073 	ldrbpl	r0, [r4, #-115]	; 0xffffff8d
    2308:	6f434253 	svcvs	0x00434253
    230c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2310:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
    2314:	446e6f69 	strbtmi	r6, [lr], #-3945	; 0xfffff097
    2318:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
    231c:	6f747069 	svcvs	0x00747069
    2320:	53690072 	cmnpl	r9, #114	; 0x72
    2324:	61697265 	cmnvs	r9, r5, ror #4
    2328:	6d754e6c 	ldclvs	14, cr4, [r5, #-432]!	; 0xfffffe50
    232c:	00726562 	rsbseq	r6, r2, r2, ror #10
    2330:	42535570 	subsmi	r5, r3, #112, 10	; 0x1c000000
    2334:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2338:	69006563 	stmdbvs	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    233c:	646f7250 	strbtvs	r7, [pc], #-592	; 2344 <_start-0x5cbc>
    2340:	00746375 	rsbseq	r6, r4, r5, ror r3
    2344:	50535554 	subspl	r5, r3, r4, asr r5
    2348:	75685369 	strbvc	r5, [r8, #-873]!	; 0xfffffc97
    234c:	776f6474 			; <UNDEFINED> instruction: 0x776f6474
    2350:	6e61486e 	cdpvs	8, 6, cr4, cr1, cr14, {3}
    2354:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    2358:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    235c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2360:	6974656c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sl, sp, lr}^
    2364:	61506e6f 	cmpvs	r0, pc, ror #28
    2368:	006d6172 	rsbeq	r6, sp, r2, ror r1
    236c:	69505355 	ldmdbvs	r0, {r0, r2, r4, r6, r8, r9, ip, lr}^
    2370:	7373614d 	cmnvc	r3, #1073741843	; 0x40000013
    2374:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    2378:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    237c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2380:	61655265 	cmnvs	r5, r5, ror #4
    2384:	53550064 	cmppl	r5, #100	; 0x64
    2388:	654b6950 	strbvs	r6, [fp, #-2384]	; 0xfffff6b0
    238c:	616f6279 	smcvs	63017	; 0xf629
    2390:	76416472 			; <UNDEFINED> instruction: 0x76416472
    2394:	616c6961 	cmnvs	ip, r1, ror #18
    2398:	00656c62 	rsbeq	r6, r5, r2, ror #24
    239c:	546e5f6d 	strbtpl	r5, [lr], #-3949	; 0xfffff093
    23a0:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    23a4:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    23a8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    23ac:	53625f6d 	cmnpl	r2, #436	; 0x1b4
    23b0:	6c6f7263 	sfmvs	f7, 2, [pc], #-396	; 222c <_start-0x5dd4>
    23b4:	636f4c6c 	cmnvs	pc, #108, 24	; 0x6c00
    23b8:	5f6d006b 	svcpl	0x006d006b
    23bc:	6d6f4370 	stclvs	3, cr4, [pc, #-448]!	; 2204 <_start-0x5dfc>
    23c0:	74656c70 	strbtvc	r6, [r5], #-3184	; 0xfffff390
    23c4:	526e6f69 	rsbpl	r6, lr, #420	; 0x1a4
    23c8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    23cc:	5500656e 	strpl	r6, [r0, #-1390]	; 0xfffffa92
    23d0:	49695053 	stmdbmi	r9!, {r0, r1, r4, r6, ip, lr}^
    23d4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    23d8:	7a696c61 	bvc	1a5d564 <mailbuffer+0x1a22474>
    23dc:	5f6d0065 	svcpl	0x006d0065
    23e0:	4143414d 	cmpmi	r3, sp, asr #2
    23e4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    23e8:	70007373 	andvc	r7, r0, r3, ror r3
    23ec:	646f7250 	strbtvs	r7, [pc], #-592	; 23f4 <_start-0x5c0c>
    23f0:	00746375 	rsbseq	r6, r4, r5, ror r3
    23f4:	69505355 	ldmdbvs	r0, {r0, r2, r4, r6, r8, r9, ip, lr}^
    23f8:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
    23fc:	52646150 	rsbpl	r6, r4, #80, 2
    2400:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    2404:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    2408:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    240c:	6e614873 	mcrvs	8, 3, r4, cr1, cr3, {3}
    2410:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    2414:	65447000 	strbvs	r7, [r4, #-0]
    2418:	6e006373 	mcrvs	3, 0, r6, cr0, cr3, {3}
    241c:	73657861 	cmnvc	r5, #6356992	; 0x610000
    2420:	53555400 	cmppl	r5, #0, 8
    2424:	65705342 	ldrbvs	r5, [r0, #-834]!	; 0xfffffcbe
    2428:	62006465 	andvs	r6, r0, #1694498816	; 0x65000000
    242c:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    2430:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
    2434:	7954726f 	ldmdbvc	r4, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    2438:	6d006570 	cfstr32vs	mvfx6, [r0, #-448]	; 0xfffffe40
    243c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
    2440:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
    2444:	6f48705f 	svcvs	0x0048705f
    2448:	55007473 	strpl	r7, [r0, #-1139]	; 0xfffffb8d
    244c:	4d695053 	stclmi	0, cr5, [r9, #-332]!	; 0xfffffeb4
    2450:	53737361 	cmnpl	r3, #-2080374783	; 0x84000001
    2454:	61726f74 	cmnvs	r2, r4, ror pc
    2458:	65446567 	strbvs	r6, [r4, #-1383]	; 0xfffffa99
    245c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2460:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    2464:	55540065 	ldrbpl	r0, [r4, #-101]	; 0xffffff9b
    2468:	74534253 	ldrbvc	r4, [r3], #-595	; 0xfffffdad
    246c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    2470:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    2474:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
    2478:	6d00726f 	sfmvs	f7, 4, [r0, #-444]	; 0xfffffe44
    247c:	6464415f 	strbtvs	r4, [r4], #-351	; 0xfffffea1
    2480:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2484:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    2488:	74506e49 	ldrbvc	r6, [r0], #-3657	; 0xfffff1b7
    248c:	5f6d0072 	svcpl	0x006d0072
    2490:	6d754e62 	ldclvs	14, cr4, [r5, #-392]!	; 0xfffffe78
    2494:	6b636f4c 	blvs	18de1cc <mailbuffer+0x18a30dc>
    2498:	50535500 	subspl	r5, r3, r0, lsl #10
    249c:	6e655369 	cdpvs	3, 6, cr5, cr5, cr9, {3}
    24a0:	61724664 	cmnvs	r2, r4, ror #12
    24a4:	6d00656d 	cfstr32vs	mvfx6, [r0, #-436]	; 0xfffffe4c
    24a8:	7542705f 	strbvc	r7, [r2, #-95]	; 0xffffffa1
    24ac:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    24b0:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
    24b4:	00726574 	rsbseq	r6, r2, r4, ror r5
    24b8:	79654b54 	stmdbvc	r5!, {r2, r4, r6, r8, r9, fp, lr}^
    24bc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    24c0:	61487375 	hvcvs	34613	; 0x8735
    24c4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    24c8:	77615272 			; <UNDEFINED> instruction: 0x77615272
    24cc:	4d557000 	ldclmi	0, cr7, [r5, #-0]
    24d0:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
    24d4:	4b540031 	blmi	15025a0 <mailbuffer+0x14c74b0>
    24d8:	72507965 	subsvc	r7, r0, #1654784	; 0x194000
    24dc:	65737365 	ldrbvs	r7, [r3, #-869]!	; 0xfffffc9b
    24e0:	6e614864 	cdpvs	8, 6, cr4, cr1, cr4, {3}
    24e4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    24e8:	53555400 	cmppl	r5, #0, 8
    24ec:	6f4d6950 	svcvs	0x004d6950
    24f0:	53657375 	cmnpl	r5, #-738197503	; 0xd4000001
    24f4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    24f8:	6e614873 	mcrvs	8, 3, r4, cr1, cr3, {3}
    24fc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    2500:	555f6d00 	ldrbpl	r6, [pc, #-3328]	; 1808 <_start-0x67f8>
    2504:	65444253 	strbvs	r4, [r4, #-595]	; 0xfffffdad
    2508:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    250c:	57445400 	strbpl	r5, [r4, -r0, lsl #8]
    2510:	46494348 	strbmi	r4, [r9], -r8, asr #6
    2514:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    2518:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    251c:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    2520:	49620072 	stmdbmi	r2!, {r1, r4, r5, r6}^
    2524:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2528:	006c6176 	rsbeq	r6, ip, r6, ror r1
    252c:	45705f6d 	ldrbmi	r5, [r0, #-3949]!	; 0xfffff093
    2530:	6f70646e 	svcvs	0x0070646e
    2534:	4f746e69 	svcmi	0x00746e69
    2538:	54007475 	strpl	r7, [r0], #-1141	; 0xfffffb8b
    253c:	53425355 	movtpl	r5, #9045	; 0x2355
    2540:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    2544:	53550067 	cmppl	r5, #103	; 0x67
    2548:	44495042 	strbmi	r5, [r9], #-66	; 0xffffffbe
    254c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2550:	55540070 	ldrbpl	r0, [r4, #-112]	; 0xffffff90
    2554:	6f434253 	svcvs	0x00434253
    2558:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    255c:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
    2560:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    2564:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    2568:	47540072 			; <UNDEFINED> instruction: 0x47540072
    256c:	50656d61 	rsbpl	r6, r5, r1, ror #26
    2570:	74536461 	ldrbvc	r6, [r3], #-1121	; 0xfffffb9f
    2574:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2578:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    257c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2580:	42535554 	subsmi	r5, r3, #84, 10	; 0x15000000
    2584:	70646e45 	rsbvc	r6, r4, r5, asr #28
    2588:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    258c:	416d6200 	cmnmi	sp, r0, lsl #4
    2590:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
    2594:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
    2598:	53550073 	cmppl	r5, #115	; 0x73
    259c:	65705342 	ldrbvs	r5, [r0, #-834]!	; 0xfffffcbe
    25a0:	6f4c6465 	svcvs	0x004c6465
    25a4:	53550077 	cmppl	r5, #119	; 0x77
    25a8:	74456950 	strbvc	r6, [r5], #-2384	; 0xfffff6b0
    25ac:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
    25b0:	76417465 	strbvc	r7, [r1], -r5, ror #8
    25b4:	616c6961 	cmnvs	ip, r1, ror #18
    25b8:	00656c62 	rsbeq	r6, r5, r2, ror #24
    25bc:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    25c0:	6e45006f 	cdpvs	0, 4, cr0, cr5, cr15, {3}
    25c4:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    25c8:	7954746e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    25cc:	73496570 	movtvc	r6, #38256	; 0x9570
    25d0:	7268636f 	rsbvc	r6, r8, #-1140850687	; 0xbc000001
    25d4:	756f6e6f 	strbvc	r6, [pc, #-3695]!	; 176d <_start-0x6893>
    25d8:	5f6d0073 	svcpl	0x006d0073
    25dc:	61745370 	cmnvs	r4, r0, ror r3
    25e0:	61446567 	cmpvs	r4, r7, ror #10
    25e4:	62006174 	andvs	r6, r0, #116, 2
    25e8:	5078614d 	rsbspl	r6, r8, sp, asr #2
    25ec:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
    25f0:	7a695374 	bvc	1a573c8 <mailbuffer+0x1a1c2d8>
    25f4:	6d003065 	stcvs	0, cr3, [r0, #-404]	; 0xfffffe6c
    25f8:	65526e5f 	ldrbvs	r6, [r2, #-3679]	; 0xfffff1a1
    25fc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    2600:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    2604:	614d7000 	mrsvs	r7, (UNDEF: 77)
    2608:	6166756e 	cmnvs	r6, lr, ror #10
    260c:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    2610:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
    2614:	654b705f 	strbvs	r7, [fp, #-95]	; 0xffffffa1
    2618:	61745379 	cmnvs	r4, r9, ror r3
    261c:	48737574 	ldmdami	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
    2620:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    2624:	61527265 	cmpvs	r2, r5, ror #4
    2628:	5f6d0077 	svcpl	0x006d0077
    262c:	42525570 	subsmi	r5, r2, #112, 10	; 0x1c000000
    2630:	74535400 	ldrbvc	r5, [r3], #-1024	; 0xfffffc00
    2634:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    2638:	6e5f6d00 	cdpvs	13, 5, cr6, cr15, cr0, {0}
    263c:	61746f54 	cmnvs	r4, r4, asr pc
    2640:	7479426c 	ldrbtvc	r4, [r9], #-620	; 0xfffffd94
    2644:	72547365 	subsvc	r7, r4, #-1811939327	; 0x94000001
    2648:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    264c:	64657265 	strbtvs	r7, [r5], #-613	; 0xfffffd9b
    2650:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    2654:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    2658:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    265c:	70534253 	subsvc	r4, r3, r3, asr r2
    2660:	55646565 	strbpl	r6, [r4, #-1381]!	; 0xfffffa9b
    2664:	6f6e6b6e 	svcvs	0x006e6b6e
    2668:	6d006e77 	stcvs	14, cr6, [r0, #-476]	; 0xfffffe24
    266c:	6944625f 	stmdbvs	r4, {r0, r1, r2, r3, r4, r6, r9, sp, lr}^
    2670:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
    2674:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2678:	5f6d006e 	svcpl	0x006d006e
    267c:	614c6375 	hvcvs	50741	; 0xc635
    2680:	68507473 	ldmdavs	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2684:	646f4379 	strbtvs	r4, [pc], #-889	; 268c <_start-0x5974>
    2688:	5f6d0065 	svcpl	0x006d0065
    268c:	6c615662 	stclvs	6, cr5, [r1], #-392	; 0xfffffe78
    2690:	54006469 	strpl	r6, [r0], #-1129	; 0xfffffb97
    2694:	43425255 	movtmi	r5, #8789	; 0x2255
    2698:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    269c:	6f697465 	svcvs	0x00697465
    26a0:	756f526e 	strbvc	r5, [pc, #-622]!	; 243a <_start-0x5bc6>
    26a4:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
    26a8:	755f6d00 	ldrbvc	r6, [pc, #-3328]	; 19b0 <_start-0x6650>
    26ac:	62754863 	rsbsvs	r4, r5, #6488064	; 0x630000
    26b0:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    26b4:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    26b8:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
    26bc:	6c426e5f 	mcrrvs	14, 5, r6, r2, cr15
    26c0:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    26c4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    26c8:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
    26cc:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    26d0:	6441746e 	strbvs	r7, [r1], #-1134	; 0xfffffb92
    26d4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    26d8:	53540073 	cmppl	r4, #115	; 0x73
    26dc:	63656c65 	cmnvs	r5, #25856	; 0x6500
    26e0:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    26e4:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
    26e8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    26ec:	0072656c 	rsbseq	r6, r2, ip, ror #10
    26f0:	76654454 			; <UNDEFINED> instruction: 0x76654454
    26f4:	49656369 	stmdbmi	r5!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    26f8:	006f666e 	rsbeq	r6, pc, lr, ror #12
    26fc:	42535554 	subsmi	r5, r3, #84, 10	; 0x15000000
    2700:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    2704:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
    2708:	6d00726f 	sfmvs	f7, 4, [r0, #-444]	; 0xfffffe44
    270c:	6157625f 	cmpvs	r7, pc, asr r2
    2710:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    2714:	49690067 	stmdbmi	r9!, {r0, r1, r2, r5, r6}^
    2718:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    271c:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    2720:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
    2724:	66726574 			; <UNDEFINED> instruction: 0x66726574
    2728:	43656361 	cmnmi	r5, #-2080374783	; 0x84000001
    272c:	7373616c 	cmnvc	r3, #108, 2
    2730:	6e5f6d00 	cdpvs	13, 5, cr6, cr15, cr0, {0}
    2734:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
    2738:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    273c:	6e5f6d00 	cdpvs	13, 5, cr6, cr15, cr0, {0}
    2740:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2744:	736c656e 	cmnvc	ip, #461373440	; 0x1b800000
    2748:	57445400 	strbpl	r5, [r4, -r0, lsl #8]
    274c:	52494348 	subpl	r4, r9, #72, 6	; 0x20000001
    2750:	50746f6f 	rsbspl	r6, r4, pc, ror #30
    2754:	0074726f 	rsbseq	r7, r4, pc, ror #4
    2758:	53705f6d 	cmnpl	r0, #436	; 0x1b4
    275c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    2760:	6e614873 	mcrvs	8, 3, r4, cr1, cr3, {3}
    2764:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    2768:	754e6200 	strbvc	r6, [lr, #-512]	; 0xfffffe00
    276c:	646e456d 	strbtvs	r4, [lr], #-1389	; 0xfffffa93
    2770:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    2774:	70007374 	andvc	r7, r0, r4, ror r3
    2778:	30687445 	rsbcc	r7, r8, r5, asr #8
    277c:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    2780:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    2784:	50746e65 	rsbspl	r6, r4, r5, ror #28
    2788:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    278c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2790:	6e6f4369 	cdpvs	3, 6, cr4, cr15, cr9, {3}
    2794:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
    2798:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    279c:	62006e6f 	andvs	r6, r0, #1776	; 0x6f0
    27a0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    27a4:	72506563 	subsvc	r6, r0, #415236096	; 0x18c00000
    27a8:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    27ac:	6e006c6f 	cdpvs	12, 0, cr6, cr0, cr15, {3}
    27b0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    27b4:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    27b8:	73755f6d 	cmnvc	r5, #436	; 0x1b4
    27bc:	6f706552 	svcvs	0x00706552
    27c0:	65447472 	strbvs	r7, [r4, #-1138]	; 0xfffffb8e
    27c4:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    27c8:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    27cc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    27d0:	62006874 	andvs	r6, r0, #116, 16	; 0x740000
    27d4:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    27d8:	00747365 	rsbseq	r7, r4, r5, ror #6
    27dc:	6978616d 	ldmdbvs	r8!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    27e0:	006d756d 	rsbeq	r7, sp, sp, ror #10
    27e4:	42535554 	subsmi	r5, r3, #84, 10	; 0x15000000
    27e8:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    27ec:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    27f0:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
    27f4:	70697263 	rsbvc	r7, r9, r3, ror #4
    27f8:	00726f74 	rsbseq	r6, r2, r4, ror pc
    27fc:	43705f6d 	cmnmi	r0, #436	; 0x1b4
    2800:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2804:	72615067 	rsbvc	r5, r1, #103	; 0x67
    2808:	00726573 	rsbseq	r6, r2, r3, ror r5
    280c:	45705f6d 	ldrbmi	r5, [r0, #-3949]!	; 0xfffff093
    2810:	6f70646e 	svcvs	0x0070646e
    2814:	42746e69 	rsbsmi	r6, r4, #1680	; 0x690
    2818:	496b6c75 	stmdbmi	fp!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    281c:	5355006e 	cmppl	r5, #110	; 0x6e
    2820:	61476950 	cmpvs	r7, r0, asr r9
    2824:	6150656d 	cmpvs	r0, sp, ror #10
    2828:	61745364 	cmnvs	r4, r4, ror #6
    282c:	6d006574 	cfstr32vs	mvfx6, [r0, #-464]	; 0xfffffe30
    2830:	72546e5f 	subsvc	r6, r4, #1520	; 0x5f0
    2834:	61736e61 	cmnvs	r3, r1, ror #28
    2838:	6f697463 	svcvs	0x00697463
    283c:	6174536e 	cmnvs	r4, lr, ror #6
    2840:	00737574 	rsbseq	r7, r3, r4, ror r5
    2844:	53705f6d 	cmnpl	r0, #436	; 0x1b4
    2848:	70757465 	rsbsvc	r7, r5, r5, ror #8
    284c:	61746144 	cmnvs	r4, r4, asr #2
    2850:	4d557000 	ldclmi	0, cr7, [r5, #-0]
    2854:	6d004453 	cfstrsvs	mvf4, [r0, #-332]	; 0xfffffeb4
    2858:	6e496e5f 	mcrvs	14, 2, r6, cr9, cr15, {2}
    285c:	76726574 			; <UNDEFINED> instruction: 0x76726574
    2860:	54006c61 	strpl	r6, [r0], #-3169	; 0xfffff39f
    2864:	4b425355 	blmi	10975c0 <mailbuffer+0x105c4d0>
    2868:	6f627965 	svcvs	0x00627965
    286c:	44647261 	strbtmi	r7, [r4], #-609	; 0xfffffd9f
    2870:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2874:	44540065 	ldrbmi	r0, [r4], #-101	; 0xffffff9b
    2878:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    287c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2880:	6d006563 	cfstr32vs	mvfx6, [r0, #-396]	; 0xfffffe74
    2884:	79654b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, lr}^
    2888:	0070614d 	rsbseq	r6, r0, sp, asr #2
    288c:	536e5f6d 	cmnpl	lr, #436	; 0x1b4
    2890:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    2894:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
    2898:	66726574 			; <UNDEFINED> instruction: 0x66726574
    289c:	50656361 	rsbpl	r6, r5, r1, ror #6
    28a0:	6f746f72 	svcvs	0x00746f72
    28a4:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    28a8:	6d754e62 	ldclvs	14, cr4, [r5, #-392]!	; 0xfffffe78
    28ac:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    28b0:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    28b4:	6f697461 	svcvs	0x00697461
    28b8:	5500736e 	strpl	r7, [r0, #-878]	; 0xfffffc92
    28bc:	49504253 	ldmdbmi	r0, {r0, r1, r4, r6, r9, lr}^
    28c0:	74614444 	strbtvc	r4, [r1], #-1092	; 0xfffffbbc
    28c4:	54003161 	strpl	r3, [r0], #-353	; 0xfffffe9f
    28c8:	44425355 	strbmi	r5, [r2], #-853	; 0xfffffcab
    28cc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    28d0:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
    28d4:	70697263 	rsbvc	r7, r9, r3, ror #4
    28d8:	00726f74 	rsbseq	r6, r2, r4, ror pc
    28dc:	436e5f6d 	cmnmi	lr, #436	; 0x1b4
    28e0:	61544257 	cmpvs	r4, r7, asr r2
    28e4:	53550067 	cmppl	r5, #103	; 0x67
    28e8:	614d6950 	cmpvs	sp, r0, asr r9
    28ec:	74537373 	ldrbvc	r7, [r3], #-883	; 0xfffffc8d
    28f0:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    28f4:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    28f8:	47656369 	strbmi	r6, [r5, -r9, ror #6]!
    28fc:	61437465 	cmpvs	r3, r5, ror #8
    2900:	69636170 	stmdbvs	r3!, {r4, r5, r6, r8, sp, lr}^
    2904:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
    2908:	52425355 	subpl	r5, r2, #1409286145	; 0x54000001
    290c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    2910:	54007473 	strpl	r7, [r0], #-1139	; 0xfffffb8d
    2914:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    2918:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
    291c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    2920:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2924:	6c755f6d 	ldclvs	15, cr5, [r5], #-436	; 0xfffffe4c
    2928:	66664f6c 	strbtvs	r4, [r6], -ip, ror #30
    292c:	00746573 	rsbseq	r6, r4, r3, ror r5
    2930:	6c6f6f62 	stclvs	15, cr6, [pc], #-392	; 27b0 <_start-0x5850>
    2934:	006e6165 	rsbeq	r6, lr, r5, ror #2
    2938:	69505355 	ldmdbvs	r0, {r0, r2, r4, r6, r8, r9, ip, lr}^
    293c:	7373614d 	cmnvc	r3, #1073741843	; 0x40000013
    2940:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    2944:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    2948:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    294c:	61764165 	cmnvs	r6, r5, ror #2
    2950:	62616c69 	rsbvs	r6, r1, #26880	; 0x6900
    2954:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
    2958:	6954685f 	ldmdbvs	r4, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
    295c:	0072656d 	rsbseq	r6, r2, sp, ror #10
    2960:	78614d77 	stmdavc	r1!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, lr}^
    2964:	6b636150 	blvs	18daeac <mailbuffer+0x189fdbc>
    2968:	69537465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    296c:	6d00657a 	cfstr32vs	mvfx6, [r0, #-488]	; 0xfffffe18
    2970:	6544705f 	strbvs	r7, [r4, #-95]	; 0xffffffa1
    2974:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2978:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    297c:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    2980:	70646e45 	rsbvc	r6, r4, r5, asr #28
    2984:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    2988:	53555400 	cmppl	r5, #0, 8
    298c:	6d614742 	stclvs	7, cr4, [r1, #-264]!	; 0xfffffef8
    2990:	64615065 	strbtvs	r5, [r1], #-101	; 0xffffff9b
    2994:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2998:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    299c:	69505355 	ldmdbvs	r0, {r0, r2, r4, r6, r8, r9, ip, lr}^
    29a0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    29a4:	00797261 	rsbseq	r7, r9, r1, ror #4
    29a8:	6e654c62 	cdpvs	12, 6, cr4, cr5, cr2, {3}
    29ac:	00687467 	rsbeq	r7, r8, r7, ror #8
    29b0:	6d754e62 	ldclvs	14, cr4, [r5, #-392]!	; 0xfffffe78
    29b4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    29b8:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    29bc:	54007365 	strpl	r7, [r0], #-869	; 0xfffffc9b
    29c0:	43534d53 	cmpmi	r3, #5312	; 0x14c0
    29c4:	78313539 	ldmdavc	r1!, {r0, r3, r4, r5, r8, sl, ip, sp}
    29c8:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    29cc:	6e006563 	cfsh32vs	mvfx6, mvfx0, #51
    29d0:	73616c43 	cmnvc	r1, #17152	; 0x4300
    29d4:	5f6d0073 	svcpl	0x006d0073
    29d8:	6c416375 	mcrrvs	3, 7, r6, r1, cr5
    29dc:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    29e0:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    29e4:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    29e8:	6d00676e 	stcvs	7, cr6, [r0, #-440]	; 0xfffffe48
    29ec:	65526e5f 	ldrbvs	r6, [r2, #-3679]	; 0xfffff1a1
    29f0:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
    29f4:	006e654c 	rsbeq	r6, lr, ip, asr #10
    29f8:	6f6c4262 	svcvs	0x006c4262
    29fc:	65446b63 	strbvs	r6, [r4, #-2915]	; 0xfffff49d
    2a00:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2a04:	50535500 	subspl	r5, r3, r0, lsl #10
    2a08:	79654b69 	stmdbvc	r5!, {r0, r3, r5, r6, r8, r9, fp, lr}^
    2a0c:	72616f62 	rsbvc	r6, r1, #392	; 0x188
    2a10:	67655264 	strbvs	r5, [r5, -r4, ror #4]!
    2a14:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    2a18:	75685372 	strbvc	r5, [r8, #-882]!	; 0xfffffc8e
    2a1c:	776f6474 			; <UNDEFINED> instruction: 0x776f6474
    2a20:	6e61486e 	cdpvs	8, 6, cr4, cr1, cr14, {3}
    2a24:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    2a28:	6e5f6d00 	cdpvs	13, 5, cr6, cr15, cr0, {0}
    2a2c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2a30:	006c656e 	rsbeq	r6, ip, lr, ror #10
    2a34:	52705f6d 	rsbspl	r5, r0, #436	; 0x1b4
    2a38:	726f7065 	rsbvc	r7, pc, #101	; 0x65
    2a3c:	66754274 			; <UNDEFINED> instruction: 0x66754274
    2a40:	00726566 	rsbseq	r6, r2, r6, ror #10
    2a44:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2a48:	614e6563 	cmpvs	lr, r3, ror #10
    2a4c:	6200656d 	andvs	r6, r0, #457179136	; 0x1b400000
    2a50:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2a54:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    2a58:	6f697461 	svcvs	0x00697461
    2a5c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2a60:	70006575 	andvc	r6, r0, r5, ror r5
    2a64:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
    2a68:	654c746c 	strbvs	r7, [ip, #-1132]	; 0xfffffb94
    2a6c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2a70:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    2a74:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2a78:	6f437463 	svcvs	0x00437463
    2a7c:	6c6f736e 	stclvs	3, cr7, [pc], #-440	; 28cc <_start-0x5734>
    2a80:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
    2a84:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    2a88:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    2a8c:	75427854 	strbvc	r7, [r2, #-2132]	; 0xfffff7ac
    2a90:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    2a94:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    2a98:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    2a9c:	4500676e 	strmi	r6, [r0, #-1902]	; 0xfffff892
    2aa0:	6f70646e 	svcvs	0x0070646e
    2aa4:	54746e69 	ldrbtpl	r6, [r4], #-3689	; 0xfffff197
    2aa8:	43657079 	cmnmi	r5, #121	; 0x79
    2aac:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    2ab0:	62006c6f 	andvs	r6, r0, #28416	; 0x6f00
    2ab4:	5078614d 	rsbspl	r6, r8, sp, asr #2
    2ab8:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    2abc:	625f6d00 	subsvs	r6, pc, #0, 26
    2ac0:	696c7053 	stmdbvs	ip!, {r0, r1, r4, r6, ip, sp, lr}^
    2ac4:	61725474 	cmnvs	r2, r4, ror r4
    2ac8:	6361736e 	cmnvs	r1, #-1207959551	; 0xb8000001
    2acc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2ad0:	53555400 	cmppl	r5, #0, 8
    2ad4:	76654442 	strbtvc	r4, [r5], -r2, asr #8
    2ad8:	00656369 	rsbeq	r6, r5, r9, ror #6
    2adc:	54705f6d 	ldrbtpl	r5, [r0], #-3949	; 0xfffff093
    2ae0:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    2ae4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    2ae8:	5f6d0072 	svcpl	0x006d0072
    2aec:	646e4570 	strbtvs	r4, [lr], #-1392	; 0xfffffa90
    2af0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    2af4:	6c754274 	lfmvs	f4, 2, [r5], #-464	; 0xfffffe30
    2af8:	74754f6b 	ldrbtvc	r4, [r5], #-3947	; 0xfffff095
    2afc:	6e455400 	cdpvs	4, 4, cr5, cr5, cr0, {0}
    2b00:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    2b04:	7954746e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    2b08:	6d006570 	cfstr32vs	mvfx6, [r0, #-448]	; 0xfffffe40
    2b0c:	694c705f 	stmdbvs	ip, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2b10:	6d007473 	cfstrsvs	mvf7, [r0, #-460]	; 0xfffffe34
    2b14:	6f43705f 	svcvs	0x0043705f
    2b18:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    2b1c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2b20:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    2b24:	00747865 	rsbseq	r7, r4, r5, ror #16
    2b28:	50425355 	subpl	r5, r2, r5, asr r3
    2b2c:	61444449 	cmpvs	r4, r9, asr #8
    2b30:	00306174 	eorseq	r6, r0, r4, ror r1
    2b34:	614d5f6d 	cmpvs	sp, sp, ror #30
    2b38:	6166756e 	cmnvs	r6, lr, ror #10
    2b3c:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    2b40:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    2b44:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    2b48:	525f6d00 	subspl	r6, pc, #0, 26
    2b4c:	50746f6f 	rsbspl	r6, r4, pc, ror #30
    2b50:	0074726f 	rsbseq	r7, r4, pc, ror #4
    2b54:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2aa0 <_start-0x5560>
    2b58:	6a6c2f65 	bvs	1b0e8f4 <mailbuffer+0x1ad3804>
    2b5c:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    2b60:	2f727566 	svccs	0x00727566
    2b64:	6b736544 	blvs	1cdc07c <mailbuffer+0x1ca0f8c>
    2b68:	2f706f74 	svccs	0x00706f74
    2b6c:	2f697072 	svccs	0x00697072
    2b70:	70736152 	rsbsvc	r6, r3, r2, asr r1
    2b74:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    2b78:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    2b7c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    2b80:	534f5452 	movtpl	r5, #62546	; 0xf452
    2b84:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    2b88:	2f726574 	svccs	0x00726574
    2b8c:	6f6d6544 	svcvs	0x006d6544
    2b90:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    2b94:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    2b98:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    2b9c:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    2ba0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2ba4:	7073752f 	rsbsvc	r7, r3, pc, lsr #10
    2ba8:	62696c69 	rsbvs	r6, r9, #26880	; 0x6900
    2bac:	79726172 	ldmdbvc	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2bb0:	7700632e 	strvc	r6, [r0, -lr, lsr #6]
    2bb4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2bb8:	6d006874 	stcvs	8, cr6, [r0, #-464]	; 0xfffffe30
    2bbc:	7245705f 	subvc	r7, r5, #95	; 0x5f
    2bc0:	50726f72 	rsbspl	r6, r2, r2, ror pc
    2bc4:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    2bc8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2bcc:	45705f6d 	ldrbmi	r5, [r0, #-3949]!	; 0xfffff093
    2bd0:	6f70646e 	svcvs	0x0070646e
    2bd4:	49746e69 	ldmdbmi	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    2bd8:	5554006e 	ldrbpl	r0, [r4, #-110]	; 0xffffff92
    2bdc:	6e454253 	mcrvs	2, 2, r4, cr5, cr3, {2}
    2be0:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    2be4:	6544746e 	strbvs	r7, [r4, #-1134]	; 0xfffffb92
    2be8:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    2bec:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    2bf0:	6e5f6d00 	cdpvs	13, 5, cr6, cr15, cr0, {0}
    2bf4:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    2bf8:	50535500 	subspl	r5, r3, r0, lsl #10
    2bfc:	756f4d69 	strbvc	r4, [pc, #-3433]!	; 1e9b <_start-0x6165>
    2c00:	76416573 			; <UNDEFINED> instruction: 0x76416573
    2c04:	616c6961 	cmnvs	ip, r1, ror #18
    2c08:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2c0c:	426e5f6d 	rsbmi	r5, lr, #436	; 0x1b4
    2c10:	654c6675 	strbvs	r6, [ip, #-1653]	; 0xfffff98b
    2c14:	5355006e 	cmppl	r5, #110	; 0x6e
    2c18:	65476950 	strbvs	r6, [r7, #-2384]	; 0xfffff6b0
    2c1c:	43414d74 	movtmi	r4, #7540	; 0x1d74
    2c20:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2c24:	00737365 	rsbseq	r7, r3, r5, ror #6
    2c28:	756f4d54 	strbvc	r4, [pc, #-3412]!	; 1edc <_start-0x6124>
    2c2c:	74536573 	ldrbvc	r6, [r3], #-1395	; 0xfffffa8d
    2c30:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2c34:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    2c38:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2c3c:	55705f6d 	ldrbpl	r5, [r0, #-3949]!	; 0xfffff093
    2c40:	74534253 	ldrbvc	r4, [r3], #-595	; 0xfffffdad
    2c44:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    2c48:	42535500 	subsmi	r5, r3, #0, 10
    2c4c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    2c50:	6c754664 	ldclvs	6, cr4, [r5], #-400	; 0xfffffe70
    2c54:	6469006c 	strbtvs	r0, [r9], #-108	; 0xffffff94
    2c58:	646e6556 	strbtvs	r6, [lr], #-1366	; 0xfffffaaa
    2c5c:	5500726f 	strpl	r7, [r0, #-623]	; 0xfffffd91
    2c60:	4b695053 	blmi	1a56db4 <mailbuffer+0x1a1bcc4>
    2c64:	6f627965 	svcvs	0x00627965
    2c68:	52647261 	rsbpl	r7, r4, #268435462	; 0x10000006
    2c6c:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    2c70:	4b726574 	blmi	1c9c248 <mailbuffer+0x1c61158>
    2c74:	72507965 	subsvc	r7, r0, #1654784	; 0x194000
    2c78:	65737365 	ldrbvs	r7, [r3, #-869]!	; 0xfffffc9b
    2c7c:	6e614864 	cdpvs	8, 6, cr4, cr1, cr4, {3}
    2c80:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    2c84:	53555400 	cmppl	r5, #0, 8
    2c88:	654b6950 	strbvs	r6, [fp, #-2384]	; 0xfffff6b0
    2c8c:	65725079 	ldrbvs	r5, [r2, #-121]!	; 0xffffff87
    2c90:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
    2c94:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    2c98:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2c9c:	43625f6d 	cmnmi	r2, #436	; 0x1b4
    2ca0:	4c737061 	ldclmi	0, cr7, [r3], #-388	; 0xfffffe7c
    2ca4:	006b636f 	rsbeq	r6, fp, pc, ror #6
    2ca8:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 2b98 <_start-0x5468>
    2cac:	43485744 	movtmi	r5, #34628	; 0x8744
    2cb0:	74530049 	ldrbvc	r0, [r3], #-73	; 0xffffffb7
    2cb4:	53656761 	cmnpl	r5, #25427968	; 0x1840000
    2cb8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    2cbc:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2cc0:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    2cc4:	696c7053 	stmdbvs	ip!, {r0, r1, r4, r6, ip, sp, lr}^
    2cc8:	57440074 	smlsldxpl	r0, r4, r4, r0
    2ccc:	44494348 	strbmi	r4, [r9], #-840	; 0xfffffcb8
    2cd0:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2cd4:	6d6f4365 	stclvs	3, cr4, [pc, #-404]!	; 2b48 <_start-0x54b8>
    2cd8:	74656c70 	strbtvc	r6, [r5], #-3184	; 0xfffff390
    2cdc:	526e6f69 	rsbpl	r6, lr, #420	; 0x1a4
    2ce0:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    2ce4:	4400656e 	strmi	r6, [r0], #-1390	; 0xfffffa92
    2ce8:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    2cec:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2cf0:	6e496563 	cdpvs	5, 4, cr6, cr9, cr3, {3}
    2cf4:	6f487469 	svcvs	0x00487469
    2cf8:	70007473 	andvc	r7, r0, r3, ror r4
    2cfc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2d00:	57480070 	smlsldxpl	r0, r8, r0, r0
    2d04:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2d08:	00326769 	eorseq	r6, r2, r9, ror #14
    2d0c:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
    2d10:	466e006b 	strbtmi	r0, [lr], -fp, rrx
    2d14:	004f4649 	subeq	r4, pc, r9, asr #12
    2d18:	67617453 			; <UNDEFINED> instruction: 0x67617453
    2d1c:	62755365 	rsbsvs	r5, r5, #-1811939327	; 0x94000001
    2d20:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2d24:	6b6e5565 	blvs	1b982c0 <mailbuffer+0x1b5d1d0>
    2d28:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    2d2c:	46785200 	ldrbtmi	r5, [r8], -r0, lsl #4
    2d30:	534f4649 	movtpl	r4, #63049	; 0xf649
    2d34:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2d38:	61447375 	hvcvs	18229	; 0x4735
    2d3c:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    2d40:	4400657a 	strmi	r6, [r0], #-1402	; 0xfffffa86
    2d44:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    2d48:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2d4c:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    2d50:	74696d62 	strbtvc	r6, [r9], #-3426	; 0xfffff29e
    2d54:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    2d58:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
    2d5c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    2d60:	00747365 	rsbseq	r7, r4, r5, ror #6
    2d64:	61567375 	cmpvs	r6, r5, ror r3
    2d68:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2d6c:	67617453 			; <UNDEFINED> instruction: 0x67617453
    2d70:	61745365 	cmnvs	r4, r5, ror #6
    2d74:	6f4e6574 	svcvs	0x004e6574
    2d78:	696c7053 	stmdbvs	ip!, {r0, r1, r4, r6, ip, sp, lr}^
    2d7c:	61725474 	cmnvs	r2, r4, ror r4
    2d80:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    2d84:	57440072 	smlsldxpl	r0, r4, r2, r0
    2d88:	44494348 	strbmi	r4, [r9], #-840	; 0xfffffcb8
    2d8c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2d90:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2d94:	726f4374 	rsbvc	r4, pc, #116, 6	; 0xd0000001
    2d98:	57440065 	strbpl	r0, [r4, -r5, rrx]
    2d9c:	44494348 	strbmi	r4, [r9], #-840	; 0xfffffcb8
    2da0:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2da4:	616e4565 	cmnvs	lr, r5, ror #10
    2da8:	52656c62 	rsbpl	r6, r5, #25088	; 0x6200
    2dac:	50746f6f 	rsbspl	r6, r4, pc, ror #30
    2db0:	0074726f 	rsbseq	r7, r4, pc, ror #4
    2db4:	67617453 			; <UNDEFINED> instruction: 0x67617453
    2db8:	62755365 	rsbsvs	r5, r5, #-1811939327	; 0x94000001
    2dbc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2dc0:	69615765 	stmdbvs	r1!, {r0, r2, r5, r6, r8, r9, sl, ip, lr}^
    2dc4:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
    2dc8:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    2dcc:	74636173 	strbtvc	r6, [r3], #-371	; 0xfffffe8d
    2dd0:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    2dd4:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    2dd8:	00657465 	rsbeq	r7, r5, r5, ror #8
    2ddc:	43485744 	movtmi	r5, #34628	; 0x8744
    2de0:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    2de4:	49656369 	stmdbmi	r5!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    2de8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2dec:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    2df0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    2df4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2df8:	6e496375 	mcrvs	3, 2, r6, cr9, cr5, {3}
    2dfc:	00786564 	rsbseq	r6, r8, r4, ror #10
    2e00:	43485744 	movtmi	r5, #34628	; 0x8744
    2e04:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    2e08:	45656369 	strbmi	r6, [r5, #-873]!	; 0xfffffc97
    2e0c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    2e10:	6f6c4765 	svcvs	0x006c4765
    2e14:	496c6162 	stmdbmi	ip!, {r1, r5, r6, r8, sp, lr}^
    2e18:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2e1c:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    2e20:	57440073 	smlsldxpl	r0, r4, r3, r0
    2e24:	44494348 	strbmi	r4, [r9], #-840	; 0xfffffcb8
    2e28:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2e2c:	616e4565 	cmnvs	lr, r5, ror #10
    2e30:	43656c62 	cmnmi	r5, #25088	; 0x6200
    2e34:	6e6e6168 	powvsez	f6, f6, #0.0
    2e38:	6e496c65 	cdpvs	12, 4, cr6, cr9, cr5, {3}
    2e3c:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    2e40:	00747075 	rsbseq	r7, r4, r5, ror r0
    2e44:	43485744 	movtmi	r5, #34628	; 0x8744
    2e48:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    2e4c:	46656369 	strbtmi	r6, [r5], -r9, ror #6
    2e50:	6873756c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    2e54:	49467854 	stmdbmi	r6, {r2, r4, r6, fp, ip, sp, lr}^
    2e58:	44004f46 	strmi	r4, [r0], #-3910	; 0xfffff0ba
    2e5c:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    2e60:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2e64:	69546563 	ldmdbvs	r4, {r0, r1, r5, r6, r8, sl, sp, lr}^
    2e68:	4872656d 	ldmdami	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    2e6c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    2e70:	48007265 	stmdami	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    2e74:	5074736f 	rsbspl	r7, r4, pc, ror #6
    2e78:	0074726f 	rsbseq	r7, r4, pc, ror #4
    2e7c:	43485744 	movtmi	r5, #34628	; 0x8744
    2e80:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    2e84:	43656369 	cmnmi	r5, #-1543503871	; 0xa4000001
    2e88:	6e6e6168 	powvsez	f6, f6, #0.0
    2e8c:	6e496c65 	cdpvs	12, 4, cr6, cr9, cr5, {3}
    2e90:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    2e94:	48747075 	ldmdami	r4!, {r0, r2, r4, r5, r6, ip, sp, lr}^
    2e98:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    2e9c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2ea0:	43485744 	movtmi	r5, #34628	; 0x8744
    2ea4:	67655249 	strbvs	r5, [r5, -r9, asr #4]!
    2ea8:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    2eac:	57440072 	smlsldxpl	r0, r4, r2, r0
    2eb0:	44494348 	strbmi	r4, [r9], #-840	; 0xfffffcb8
    2eb4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2eb8:	6d754465 	cfldrdvs	mvd4, [r5, #-404]!	; 0xfffffe6c
    2ebc:	61745370 	cmnvs	r4, r0, ror r3
    2ec0:	00737574 	rsbseq	r7, r3, r4, ror r5
    2ec4:	426e5f6d 	rsbmi	r5, lr, #436	; 0x1b4
    2ec8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    2ecc:	6e490072 	mcrvs	0, 2, r0, cr9, cr2, {3}
    2ed0:	61745374 	cmnvs	r4, r4, ror r3
    2ed4:	00737574 	rsbseq	r7, r3, r4, ror r5
    2ed8:	6675426e 	ldrbtvs	r4, [r5], -lr, ror #4
    2edc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    2ee0:	61654c00 	cmnvs	r5, r0, lsl #24
    2ee4:	6f436576 	svcvs	0x00436576
    2ee8:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    2eec:	70536574 	subsvc	r6, r3, r4, ror r5
    2ef0:	0074696c 	rsbseq	r6, r4, ip, ror #18
    2ef4:	67617453 			; <UNDEFINED> instruction: 0x67617453
    2ef8:	61745365 	cmnvs	r4, r5, ror #6
    2efc:	74536574 	ldrbvc	r6, [r3], #-1396	; 0xfffffa8c
    2f00:	53747261 	cmnpl	r4, #268435462	; 0x10000006
    2f04:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    2f08:	48574400 	ldmdami	r7, {sl, lr}^
    2f0c:	65444943 	strbvs	r4, [r4, #-2371]	; 0xfffff6bd
    2f10:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2f14:	706d7544 	rsbvc	r7, sp, r4, asr #10
    2f18:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    2f1c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2f20:	48574400 	ldmdami	r7, {sl, lr}^
    2f24:	65444943 	strbvs	r4, [r4, #-2371]	; 0xfffff6bd
    2f28:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2f2c:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    2f30:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    2f34:	67617453 			; <UNDEFINED> instruction: 0x67617453
    2f38:	6c410065 	mcrrvs	0, 6, r0, r1, cr5
    2f3c:	6168436c 	cmnvs	r8, ip, ror #6
    2f40:	746e496e 	strbtvc	r4, [lr], #-2414	; 0xfffff692
    2f44:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    2f48:	75007470 	strvc	r7, [r0, #-1136]	; 0xfffffb90
    2f4c:	76654463 	strbtvc	r4, [r5], -r3, ror #8
    2f50:	41656369 	cmnmi	r5, r9, ror #6
    2f54:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    2f58:	44007373 	strmi	r7, [r0], #-883	; 0xfffffc8d
    2f5c:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    2f60:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2f64:	72466563 	subvc	r6, r6, #415236096	; 0x18c00000
    2f68:	68436565 	stmdavs	r3, {r0, r2, r5, r6, r8, sl, sp, lr}^
    2f6c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    2f70:	6e49006c 	cdpvs	0, 4, cr0, cr9, cr12, {3}
    2f74:	73614d74 	cmnvc	r1, #116, 26	; 0x1d00
    2f78:	5762006b 	strbpl	r0, [r2, -fp, rrx]!
    2f7c:	55746961 	ldrbpl	r6, [r4, #-2401]!	; 0xfffff69f
    2f80:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    2f84:	00746553 	rsbseq	r6, r4, r3, asr r5
    2f88:	6168436e 	cmnvs	r8, lr, ror #6
    2f8c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    2f90:	6b73614d 	blvs	1cdb4cc <mailbuffer+0x1ca03dc>
    2f94:	736f4800 	cmnvc	pc, #0, 16
    2f98:	72655074 	rsbvc	r5, r5, #116	; 0x74
    2f9c:	69646f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2fa0:	46785463 	ldrbtmi	r5, [r8], -r3, ror #8
    2fa4:	534f4649 	movtpl	r4, #63049	; 0xf649
    2fa8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2fac:	43424841 	movtmi	r4, #10305	; 0x2841
    2fb0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2fb4:	74530067 	ldrbvc	r0, [r3], #-103	; 0xffffff99
    2fb8:	53656761 	cmnpl	r5, #25427968	; 0x1840000
    2fbc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    2fc0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2fc4:	6369646f 	cmnvs	r9, #1862270976	; 0x6f000000
    2fc8:	616c6544 	cmnvs	ip, r4, asr #10
    2fcc:	68430079 	stmdavs	r3, {r0, r3, r4, r5, r6}^
    2fd0:	63617261 	cmnvs	r1, #268435462	; 0x10000006
    2fd4:	00726574 	rsbseq	r6, r2, r4, ror r5
    2fd8:	43485744 	movtmi	r5, #34628	; 0x8744
    2fdc:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    2fe0:	4f656369 	svcmi	0x00656369
    2fe4:	63726576 	cmnvs	r2, #494927872	; 0x1d800000
    2fe8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2fec:	6544746e 	strbvs	r7, [r4, #-1134]	; 0xfffffb92
    2ff0:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    2ff4:	44006465 	strmi	r6, [r0], #-1125	; 0xfffffb9b
    2ff8:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    2ffc:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3000:	6e456563 	cdpvs	5, 4, cr6, cr5, cr3, {3}
    3004:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3008:	74736f48 	ldrbtvc	r6, [r3], #-3912	; 0xfffff0b8
    300c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    3010:	70757272 	rsbsvc	r7, r5, r2, ror r2
    3014:	2f007374 	svccs	0x00007374
    3018:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    301c:	6f6a6c2f 	svcvs	0x006a6c2f
    3020:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    3024:	442f7275 	strtmi	r7, [pc], #-629	; 302c <_start-0x4fd4>
    3028:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    302c:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    3030:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    3034:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    3038:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    303c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    3040:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    3044:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    3048:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    304c:	442f7265 	strtmi	r7, [pc], #-613	; 3054 <_start-0x4fac>
    3050:	2f6f6d65 	svccs	0x006f6d65
    3054:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3058:	2f737265 	svccs	0x00737265
    305c:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    3060:	2f343135 	svccs	0x00343135
    3064:	2f62696c 	svccs	0x0062696c
    3068:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    306c:	76656469 	strbtvc	r6, [r5], -r9, ror #8
    3070:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    3074:	57440063 	strbpl	r0, [r4, -r3, rrx]
    3078:	44494348 	strbmi	r4, [r9], #-840	; 0xfffffcb8
    307c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3080:	616e4565 	cmnvs	lr, r5, ror #10
    3084:	43656c62 	cmnmi	r5, #25088	; 0x6200
    3088:	6f6d6d6f 	svcvs	0x006d6d6f
    308c:	746e496e 	strbtvc	r4, [lr], #-2414	; 0xfffff692
    3090:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    3094:	00737470 	rsbseq	r7, r3, r0, ror r4
    3098:	54734d6e 	ldrbtpl	r4, [r3], #-3438	; 0xfffff292
    309c:	6f656d69 	svcvs	0x00656d69
    30a0:	44007475 	strmi	r7, [r0], #-1141	; 0xfffffb8b
    30a4:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    30a8:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    30ac:	74536563 	ldrbvc	r6, [r3], #-1379	; 0xfffffa9d
    30b0:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    30b4:	6e6e6168 	powvsez	f6, f6, #0.0
    30b8:	75006c65 	strvc	r6, [r0, #-3173]	; 0xfffff39b
    30bc:	70795463 	rsbsvc	r5, r9, r3, ror #8
    30c0:	57440065 	strbpl	r0, [r4, -r5, rrx]
    30c4:	44494348 	strbmi	r4, [r9], #-840	; 0xfffffcb8
    30c8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    30cc:	61745365 	cmnvs	r4, r5, ror #6
    30d0:	72547472 	subsvc	r7, r4, #1912602624	; 0x72000000
    30d4:	61736e61 	cmnvs	r3, r1, ror #28
    30d8:	6f697463 	svcvs	0x00697463
    30dc:	526e006e 	rsbpl	r0, lr, #110	; 0x6e
    30e0:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    30e4:	63750074 	cmnvs	r5, #116	; 0x74
    30e8:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    30ec:	00747365 	rsbseq	r7, r4, r5, ror #6
    30f0:	6e497375 	mcrvs	3, 2, r7, cr9, cr5, {3}
    30f4:	00786564 	rsbseq	r6, r8, r4, ror #10
    30f8:	416e5f6d 	cmnmi	lr, sp, ror #30
    30fc:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    3100:	44007373 	strmi	r7, [r0], #-883	; 0xfffffc8d
    3104:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    3108:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    310c:	72546563 	subsvc	r6, r4, #415236096	; 0x18c00000
    3110:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    3114:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
    3118:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    311c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3120:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    3124:	73654474 	cmnvc	r5, #116, 8	; 0x74000000
    3128:	70697263 	rsbvc	r7, r9, r3, ror #4
    312c:	00726f74 	rsbseq	r6, r2, r4, ror pc
    3130:	43485744 	movtmi	r5, #34628	; 0x8744
    3134:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    3138:	44656369 	strbtmi	r6, [r5], #-873	; 0xfffffc97
    313c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    3140:	6f52656c 	svcvs	0x0052656c
    3144:	6f50746f 	svcvs	0x0050746f
    3148:	56007472 			; <UNDEFINED> instruction: 0x56007472
    314c:	6f646e65 	svcvs	0x00646e65
    3150:	00644972 	rsbeq	r4, r4, r2, ror r9
    3154:	74736f48 	ldrbtvc	r6, [r3], #-3912	; 0xfffff0b8
    3158:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    315c:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
    3160:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    3164:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3168:	65536563 	ldrbvs	r6, [r3, #-1379]	; 0xfffffa9d
    316c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    3170:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
    3174:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    3178:	55006e6f 	strpl	r6, [r0, #-3695]	; 0xfffff191
    317c:	6f434253 	svcvs	0x00434253
    3180:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3184:	48574400 	ldmdami	r7, {sl, lr}^
    3188:	65444943 	strbvs	r4, [r4, #-2371]	; 0xfffff6bd
    318c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3190:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    3194:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    3198:	5300657a 	movwpl	r6, #1402	; 0x57a
    319c:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    31a0:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    31a4:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    31a8:	436c6c41 	cmnmi	ip, #16640	; 0x4100
    31ac:	496e6168 	stmdbmi	lr!, {r3, r5, r6, r8, sp, lr}^
    31b0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    31b4:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    31b8:	6b73614d 	blvs	1cdb6f4 <mailbuffer+0x1ca0604>
    31bc:	48574400 	ldmdami	r7, {sl, lr}^
    31c0:	65444943 	strbvs	r4, [r4, #-2371]	; 0xfffff6bd
    31c4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    31c8:	61736944 	cmnvs	r3, r4, asr #18
    31cc:	43656c62 	cmnmi	r5, #25088	; 0x6200
    31d0:	6e6e6168 	powvsez	f6, f6, #0.0
    31d4:	6e496c65 	cdpvs	12, 4, cr6, cr9, cr5, {3}
    31d8:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    31dc:	00747075 	rsbseq	r7, r4, r5, ror r0
    31e0:	43485744 	movtmi	r5, #34628	; 0x8744
    31e4:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    31e8:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    31ec:	64417465 	strbvs	r7, [r1], #-1125	; 0xfffffb9b
    31f0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    31f4:	57440073 	smlsldxpl	r0, r4, r3, r0
    31f8:	44494348 	strbmi	r4, [r9], #-840	; 0xfffffcb8
    31fc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3200:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    3204:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 303c <_start-0x4fc4>
    3208:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    320c:	00656761 	rsbeq	r6, r5, r1, ror #14
    3210:	43485744 	movtmi	r5, #34628	; 0x8744
    3214:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    3218:	47656369 	strbmi	r6, [r5, -r9, ror #6]!
    321c:	6f507465 	svcvs	0x00507465
    3220:	70537472 	subsvc	r7, r3, r2, ror r4
    3224:	00646565 	rsbeq	r6, r4, r5, ror #10
    3228:	43485744 	movtmi	r5, #34628	; 0x8744
    322c:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    3230:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    3234:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3238:	61745300 	cmnvs	r4, r0, lsl #6
    323c:	75536567 	ldrbvc	r6, [r3, #-1383]	; 0xfffffa99
    3240:	61745362 	cmnvs	r4, r2, ror #6
    3244:	61576574 	cmpvs	r7, r4, ror r5
    3248:	6f467469 	svcvs	0x00467469
    324c:	61684372 	smcvs	33842	; 0x8432
    3250:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    3254:	61736944 	cmnvs	r3, r4, asr #18
    3258:	00656c62 	rsbeq	r6, r5, r2, ror #24
    325c:	43485744 	movtmi	r5, #34628	; 0x8744
    3260:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    3264:	41656369 	cmnmi	r5, r9, ror #6
    3268:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    326c:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    3270:	6e6e6168 	powvsez	f6, f6, #0.0
    3274:	75006c65 	strvc	r6, [r0, #-3173]	; 0xfffff39b
    3278:	71655263 	cmnvc	r5, r3, ror #4
    327c:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
    3280:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3284:	6e6f4e00 	cdpvs	14, 6, cr4, cr15, cr0, {0}
    3288:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    328c:	6369646f 	cmnvs	r9, #1862270976	; 0x6f000000
    3290:	49467854 	stmdbmi	r6, {r2, r4, r6, fp, ip, sp, lr}^
    3294:	69534f46 	ldmdbvs	r3, {r1, r2, r6, r8, r9, sl, fp, lr}^
    3298:	4400657a 	strmi	r6, [r0], #-1402	; 0xfffffa86
    329c:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    32a0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    32a4:	61576563 	cmpvs	r7, r3, ror #10
    32a8:	6f467469 	svcvs	0x00467469
    32ac:	74694272 	strbtvc	r4, [r9], #-626	; 0xfffffd8e
    32b0:	43637500 	cmnmi	r3, #0, 10
    32b4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    32b8:	61727567 	cmnvs	r2, r7, ror #10
    32bc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    32c0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    32c4:	74530065 	ldrbvc	r0, [r3], #-101	; 0xffffff9b
    32c8:	53656761 	cmnpl	r5, #25427968	; 0x1840000
    32cc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    32d0:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    32d4:	006e776f 	rsbeq	r7, lr, pc, ror #14
    32d8:	43485744 	movtmi	r5, #34628	; 0x8744
    32dc:	76654449 	strbtvc	r4, [r5], -r9, asr #8
    32e0:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    32e4:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
    32e8:	79734174 	ldmdbvc	r3!, {r2, r4, r5, r6, r8, lr}^
    32ec:	6552636e 	ldrbvs	r6, [r2, #-878]	; 0xfffffc92
    32f0:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    32f4:	57440074 	smlsldxpl	r0, r4, r4, r0
    32f8:	44494348 	strbmi	r4, [r9], #-840	; 0xfffffcb8
    32fc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3300:	61725465 	cmnvs	r2, r5, ror #8
    3304:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    3308:	61745372 	cmnvs	r4, r2, ror r3
    330c:	73416567 	movtvc	r6, #5479	; 0x1567
    3310:	00636e79 	rsbeq	r6, r3, r9, ror lr
    3314:	4857445f 	ldmdami	r7, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3318:	65444943 	strbvs	r4, [r4, #-2371]	; 0xfffff6bd
    331c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3320:	48574400 	ldmdami	r7, {sl, lr}^
    3324:	65444943 	strbvs	r4, [r4, #-2371]	; 0xfffff6bd
    3328:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    332c:	73756c46 	cmnvc	r5, #17920	; 0x4600
    3330:	46785268 	ldrbtmi	r5, [r8], -r8, ror #4
    3334:	004f4649 	subeq	r4, pc, r9, asr #12
    3338:	7469426e 	strbtvc	r4, [r9], #-622	; 0xfffffd92
    333c:	48574400 	ldmdami	r7, {sl, lr}^
    3340:	65524943 	ldrbvs	r4, [r2, #-2371]	; 0xfffff6bd
    3344:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    3348:	72577265 	subsvc	r7, r7, #1342177286	; 0x50000006
    334c:	00657469 	rsbeq	r7, r5, r9, ror #8
    3350:	43485744 	movtmi	r5, #34628	; 0x8744
    3354:	67655249 	strbvs	r5, [r5, -r9, asr #4]!
    3358:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    335c:	74654772 	strbtvc	r4, [r5], #-1906	; 0xfffff88e
    3360:	48574400 	ldmdami	r7, {sl, lr}^
    3364:	65524943 	ldrbvs	r4, [r2, #-2371]	; 0xfffff6bd
    3368:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    336c:	724f7265 	subvc	r7, pc, #1342177286	; 0x50000006
    3370:	48574400 	ldmdami	r7, {sl, lr}^
    3374:	65524943 	ldrbvs	r4, [r2, #-2371]	; 0xfffff6bd
    3378:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    337c:	65537265 	ldrbvs	r7, [r3, #-613]	; 0xfffffd9b
    3380:	6c6c4174 	stfvse	f4, [ip], #-464	; 0xfffffe30
    3384:	6f682f00 	svcvs	0x00682f00
    3388:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 31dc <_start-0x4e24>
    338c:	61736f6a 	cmnvs	r3, sl, ror #30
    3390:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    3394:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3398:	706f746b 	rsbvc	r7, pc, fp, ror #8
    339c:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    33a0:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    33a4:	72656270 	rsbvc	r6, r5, #112, 4
    33a8:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    33ac:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    33b0:	4f545265 	svcmi	0x00545265
    33b4:	616d2d53 	cmnvs	sp, r3, asr sp
    33b8:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    33bc:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    33c0:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    33c4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    33c8:	616c2f73 	smcvs	49907	; 0xc2f3
    33cc:	3135396e 	teqcc	r5, lr, ror #18
    33d0:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    33d4:	77642f62 	strbvc	r2, [r4, -r2, ror #30]!
    33d8:	72696368 	rsbvc	r6, r9, #104, 6	; 0xa0000001
    33dc:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    33e0:	2e726574 	mrccs	5, 3, r6, cr2, cr4, {3}
    33e4:	57440063 	strbpl	r0, [r4, -r3, rrx]
    33e8:	52494348 	subpl	r4, r9, #72, 6	; 0x20000001
    33ec:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    33f0:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    33f4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    33f8:	00746942 	rsbseq	r6, r4, r2, asr #18
    33fc:	43485744 	movtmi	r5, #34628	; 0x8744
    3400:	67655249 	strbvs	r5, [r5, -r9, asr #4]!
    3404:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    3408:	74655372 	strbtvc	r5, [r5], #-882	; 0xfffffc8e
    340c:	48574400 	ldmdami	r7, {sl, lr}^
    3410:	65524943 	ldrbvs	r4, [r2, #-2371]	; 0xfffff6bd
    3414:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    3418:	75447265 	strbvc	r7, [r4, #-613]	; 0xfffffd9b
    341c:	4400706d 	strmi	r7, [r0], #-109	; 0xffffff93
    3420:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    3424:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    3428:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    342c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    3430:	48574400 	ldmdami	r7, {sl, lr}^
    3434:	65524943 	ldrbvs	r4, [r2, #-2371]	; 0xfffff6bd
    3438:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    343c:	6c437265 	sfmvs	f7, 2, [r3], {101}	; 0x65
    3440:	41726165 	cmnmi	r2, r5, ror #2
    3444:	44006c6c 	strmi	r6, [r0], #-3180	; 0xfffff394
    3448:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    344c:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    3450:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    3454:	57440032 	smlaldxpl	r0, r4, r2, r0
    3458:	52494348 	subpl	r4, r9, #72, 6	; 0x20000001
    345c:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    3460:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3464:	74655373 	strbtvc	r5, [r5], #-883	; 0xfffffc8d
    3468:	48574400 	ldmdami	r7, {sl, lr}^
    346c:	65524943 	ldrbvs	r4, [r2, #-2371]	; 0xfffff6bd
    3470:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    3474:	6e417265 	cdpvs	2, 4, cr7, cr1, cr5, {3}
    3478:	445f0064 	ldrbmi	r0, [pc], #-100	; 3480 <_start-0x4b80>
    347c:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    3480:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    3484:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    3488:	48574400 	ldmdami	r7, {sl, lr}^
    348c:	65524943 	ldrbvs	r4, [r2, #-2371]	; 0xfffff6bd
    3490:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    3494:	65537265 	ldrbvs	r7, [r3, #-613]	; 0xfffffd9b
    3498:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
    349c:	6f682f00 	svcvs	0x00682f00
    34a0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 32f4 <_start-0x4d0c>
    34a4:	61736f6a 	cmnvs	r3, sl, ror #30
    34a8:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    34ac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    34b0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    34b4:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    34b8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    34bc:	72656270 	rsbvc	r6, r5, #112, 4
    34c0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    34c4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    34c8:	4f545265 	svcmi	0x00545265
    34cc:	616d2d53 	cmnvs	sp, r3, asr sp
    34d0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    34d4:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    34d8:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    34dc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    34e0:	616c2f73 	smcvs	49907	; 0xc2f3
    34e4:	3135396e 	teqcc	r5, lr, ror #18
    34e8:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    34ec:	77642f62 	strbvc	r2, [r4, -r2, ror #30]!
    34f0:	78696368 	stmdavc	r9!, {r3, r5, r6, r8, r9, sp, lr}^
    34f4:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    34f8:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    34fc:	61746164 	cmnvs	r4, r4, ror #2
    3500:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
    3504:	7349625f 	movtvc	r6, #37471	; 0x925f
    3508:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    350c:	6369646f 	cmnvs	r9, #1862270976	; 0x6f000000
    3510:	6e456e00 	cdpvs	14, 4, cr6, cr5, cr0, {0}
    3514:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3518:	7954746e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    351c:	44006570 	strmi	r6, [r0], #-1392	; 0xfffffa90
    3520:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    3524:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    3528:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    352c:	67617453 			; <UNDEFINED> instruction: 0x67617453
    3530:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    3534:	74654761 	strbtvc	r4, [r5], #-1889	; 0xfffff89f
    3538:	41414d44 	cmpmi	r1, r4, asr #26
    353c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    3540:	44007373 	strmi	r7, [r0], #-883	; 0xfffffc8d
    3544:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    3548:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    354c:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    3550:	67617453 			; <UNDEFINED> instruction: 0x67617453
    3554:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    3558:	74654761 	strbtvc	r4, [r5], #-1889	; 0xfffff89f
    355c:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    3560:	546f5473 	strbtpl	r5, [pc], #-1139	; 3568 <_start-0x4a98>
    3564:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    3568:	00726566 	rsbseq	r6, r2, r6, ror #10
    356c:	48574454 	ldmdami	r7, {r2, r4, r6, sl, lr}^
    3570:	72464943 	subvc	r4, r6, #1097728	; 0x10c000
    3574:	53656d61 	cmnpl	r5, #6208	; 0x1840
    3578:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    357c:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    3580:	506e6f4e 	rsbpl	r6, lr, lr, asr #30
    3584:	6f697265 	svcvs	0x00697265
    3588:	00636964 	rsbeq	r6, r3, r4, ror #18
    358c:	43485744 	movtmi	r5, #34628	; 0x8744
    3590:	61725449 	cmnvs	r2, r9, asr #8
    3594:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    3598:	61745372 	cmnvs	r4, r2, ror r3
    359c:	61446567 	cmpvs	r4, r7, ror #10
    35a0:	73496174 	movtvc	r6, #37236	; 0x9174
    35a4:	696c7053 	stmdbvs	ip!, {r0, r1, r4, r6, ip, sp, lr}^
    35a8:	57440074 	smlsldxpl	r0, r4, r4, r0
    35ac:	54494348 	strbpl	r4, [r9], #-840	; 0xfffffcb8
    35b0:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    35b4:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    35b8:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    35bc:	61746144 	cmnvs	r4, r4, asr #2
    35c0:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    35c4:	74536275 	ldrbvc	r6, [r3], #-629	; 0xfffffd8b
    35c8:	00657461 	rsbeq	r7, r5, r1, ror #8
    35cc:	43485744 	movtmi	r5, #34628	; 0x8744
    35d0:	61725449 	cmnvs	r2, r9, asr #8
    35d4:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    35d8:	61745372 	cmnvs	r4, r2, ror r3
    35dc:	61446567 	cmpvs	r4, r7, ror #10
    35e0:	65476174 	strbvs	r6, [r7, #-372]	; 0xfffffe8c
    35e4:	61745374 	cmnvs	r4, r4, ror r3
    35e8:	4d737574 	cfldr64mi	mvdx7, [r3, #-464]!	; 0xfffffe30
    35ec:	006b7361 	rsbeq	r7, fp, r1, ror #6
    35f0:	43485744 	movtmi	r5, #34628	; 0x8744
    35f4:	61725449 	cmnvs	r2, r9, asr #8
    35f8:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    35fc:	61745372 	cmnvs	r4, r2, ror r3
    3600:	61446567 	cmpvs	r4, r7, ror #10
    3604:	65476174 	strbvs	r6, [r7, #-372]	; 0xfffffe8c
    3608:	63615074 	cmnvs	r1, #116	; 0x74
    360c:	7374656b 	cmnvc	r4, #448790528	; 0x1ac00000
    3610:	72546f54 	subsvc	r6, r4, #84, 30	; 0x150
    3614:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    3618:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
    361c:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    3620:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    3624:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    3628:	67617453 			; <UNDEFINED> instruction: 0x67617453
    362c:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    3630:	74654761 	strbtvc	r4, [r5], #-1889	; 0xfffff89f
    3634:	70646e45 	rsbvc	r6, r4, r5, asr #28
    3638:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    363c:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    3640:	6e007265 	cdpvs	2, 0, cr7, cr0, cr5, {3}
    3644:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    3648:	61725473 	cmnvs	r2, r3, ror r4
    364c:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    3650:	00646572 	rsbeq	r6, r4, r2, ror r5
    3654:	43485744 	movtmi	r5, #34628	; 0x8744
    3658:	61725449 	cmnvs	r2, r9, asr #8
    365c:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    3660:	61745372 	cmnvs	r4, r2, ror r3
    3664:	61446567 	cmpvs	r4, r7, ror #10
    3668:	65476174 	strbvs	r6, [r7, #-372]	; 0xfffffe8c
    366c:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
    3670:	4c746c75 	ldclmi	12, cr6, [r4], #-468	; 0xfffffe2c
    3674:	75006e65 	strvc	r6, [r0, #-3685]	; 0xfffff19b
    3678:	44495063 	strbmi	r5, [r9], #-99	; 0xffffff9d
    367c:	48574400 	ldmdami	r7, {sl, lr}^
    3680:	72544943 	subsvc	r4, r4, #1097728	; 0x10c000
    3684:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    3688:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    368c:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    3690:	47617461 	strbmi	r7, [r1, -r1, ror #8]!
    3694:	614d7465 	cmpvs	sp, r5, ror #8
    3698:	63615078 	cmnvs	r1, #120	; 0x78
    369c:	5374656b 	cmnpl	r4, #448790528	; 0x1ac00000
    36a0:	00657a69 	rsbeq	r7, r5, r9, ror #20
    36a4:	546e5f6d 	strbtpl	r5, [lr], #-3949	; 0xfffff093
    36a8:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    36ac:	61506e00 	cmpvs	r0, r0, lsl #28
    36b0:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
    36b4:	66654c73 			; <UNDEFINED> instruction: 0x66654c73
    36b8:	57440074 	smlsldxpl	r0, r4, r4, r0
    36bc:	54494348 	strbpl	r4, [r9], #-840	; 0xfffffcb8
    36c0:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    36c4:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    36c8:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    36cc:	61746144 	cmnvs	r4, r4, asr #2
    36d0:	69447349 	stmdbvs	r4, {r0, r3, r6, r8, r9, ip, sp, lr}^
    36d4:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
    36d8:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    36dc:	5744006e 	strbpl	r0, [r4, -lr, rrx]
    36e0:	54494348 	strbpl	r4, [r9], #-840	; 0xfffffcb8
    36e4:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    36e8:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    36ec:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    36f0:	61746144 	cmnvs	r4, r4, asr #2
    36f4:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    36f8:	74636173 	strbtvc	r6, [r3], #-371	; 0xfffffe8d
    36fc:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    3700:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    3704:	00657465 	rsbeq	r7, r5, r5, ror #8
    3708:	43485744 	movtmi	r5, #34628	; 0x8744
    370c:	61725449 	cmnvs	r2, r9, asr #8
    3710:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    3714:	61745372 	cmnvs	r4, r2, ror r3
    3718:	61446567 	cmpvs	r4, r7, ror #10
    371c:	65476174 	strbvs	r6, [r7, #-372]	; 0xfffffe8c
    3720:	44495074 	strbmi	r5, [r9], #-116	; 0xffffff8c
    3724:	57445400 	strbpl	r5, [r4, -r0, lsl #8]
    3728:	46494348 	strbmi	r4, [r9], -r8, asr #6
    372c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    3730:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    3734:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    3738:	72655072 	rsbvc	r5, r5, #114	; 0x72
    373c:	69646f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3740:	57440063 	strbpl	r0, [r4, -r3, rrx]
    3744:	54494348 	strbpl	r4, [r9], #-840	; 0xfffffcb8
    3748:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    374c:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    3750:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3754:	61746144 	cmnvs	r4, r4, asr #2
    3758:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    375c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    3760:	48574400 	ldmdami	r7, {sl, lr}^
    3764:	72544943 	subsvc	r4, r4, #1097728	; 0x10c000
    3768:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    376c:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    3770:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    3774:	47617461 	strbmi	r7, [r1, -r1, ror #8]!
    3778:	75487465 	strbvc	r7, [r8, #-1125]	; 0xfffffb9b
    377c:	64644162 	strbtvs	r4, [r4], #-354	; 0xfffffe9e
    3780:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    3784:	61506e00 	cmpvs	r0, r0, lsl #28
    3788:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
    378c:	61725473 	cmnvs	r2, r3, ror r4
    3790:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    3794:	00646572 	rsbeq	r6, r4, r2, ror r5
    3798:	43485744 	movtmi	r5, #34628	; 0x8744
    379c:	61725449 	cmnvs	r2, r9, asr #8
    37a0:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    37a4:	61745372 	cmnvs	r4, r2, ror r3
    37a8:	61446567 	cmpvs	r4, r7, ror #10
    37ac:	65476174 	strbvs	r6, [r7, #-372]	; 0xfffffe8c
    37b0:	65705374 	ldrbvs	r5, [r0, #-884]!	; 0xfffffc8c
    37b4:	44006465 	strmi	r6, [r0], #-1125	; 0xfffffb9b
    37b8:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    37bc:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    37c0:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    37c4:	67617453 			; <UNDEFINED> instruction: 0x67617453
    37c8:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    37cc:	53734961 	cmnpl	r3, #1589248	; 0x184000
    37d0:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    37d4:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    37d8:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    37dc:	48574400 	ldmdami	r7, {sl, lr}^
    37e0:	72544943 	subsvc	r4, r4, #1097728	; 0x10c000
    37e4:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    37e8:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    37ec:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    37f0:	49617461 	stmdbmi	r1!, {r0, r5, r6, sl, ip, sp, lr}^
    37f4:	6c705373 	ldclvs	3, cr5, [r0], #-460	; 0xfffffe34
    37f8:	6f437469 	svcvs	0x00437469
    37fc:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    3800:	62006574 	andvs	r6, r0, #116, 10	; 0x1d000000
    3804:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    3808:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    380c:	48574400 	ldmdami	r7, {sl, lr}^
    3810:	72544943 	subsvc	r4, r4, #1097728	; 0x10c000
    3814:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    3818:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    381c:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    3820:	47617461 	strbmi	r7, [r1, -r1, ror #8]!
    3824:	75487465 	strbvc	r7, [r8, #-1125]	; 0xfffffb9b
    3828:	726f5062 	rsbvc	r5, pc, #98	; 0x62
    382c:	64644174 	strbtvs	r4, [r4], #-372	; 0xfffffe8c
    3830:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    3834:	6e5f6d00 	cdpvs	13, 5, cr6, cr15, cr0, {0}
    3838:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
    383c:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
    3840:	57440065 	strbpl	r0, [r4, -r5, rrx]
    3844:	54494348 	strbpl	r4, [r9], #-840	; 0xfffffcb8
    3848:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    384c:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    3850:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3854:	61746144 	cmnvs	r4, r4, asr #2
    3858:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0xfffffab9
    385c:	6f70646e 	svcvs	0x0070646e
    3860:	54746e69 	ldrbtpl	r6, [r4], #-3689	; 0xfffff197
    3864:	00657079 	rsbeq	r7, r5, r9, ror r0
    3868:	43485744 	movtmi	r5, #34628	; 0x8744
    386c:	61725449 	cmnvs	r2, r9, asr #8
    3870:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    3874:	61745372 	cmnvs	r4, r2, ror r3
    3878:	61446567 	cmpvs	r4, r7, ror #10
    387c:	65476174 	strbvs	r6, [r7, #-372]	; 0xfffffe8c
    3880:	62755374 	rsbsvs	r5, r5, #116, 6	; 0xd0000001
    3884:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    3888:	57440065 	strbpl	r0, [r4, -r5, rrx]
    388c:	54494348 	strbpl	r4, [r9], #-840	; 0xfffffcb8
    3890:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    3894:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    3898:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    389c:	61746144 	cmnvs	r4, r4, asr #2
    38a0:	55746547 	ldrbpl	r6, [r4, #-1351]!	; 0xfffffab9
    38a4:	6e004252 	mcrvs	2, 0, r4, cr0, cr2, {2}
    38a8:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    38ac:	66654c73 			; <UNDEFINED> instruction: 0x66654c73
    38b0:	44540074 	ldrbmi	r0, [r4], #-116	; 0xffffff8c
    38b4:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    38b8:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
    38bc:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    38c0:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    38c4:	6f4e7265 	svcvs	0x004e7265
    38c8:	696c7053 	stmdbvs	ip!, {r0, r1, r4, r6, ip, sp, lr}^
    38cc:	57440074 	smlsldxpl	r0, r4, r4, r0
    38d0:	54494348 	strbpl	r4, [r9], #-840	; 0xfffffcb8
    38d4:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    38d8:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    38dc:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    38e0:	61746144 	cmnvs	r4, r4, asr #2
    38e4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    38e8:	6e6e6168 	powvsez	f6, f6, #0.0
    38ec:	754e6c65 	strbvc	r6, [lr, #-3173]	; 0xfffff39b
    38f0:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    38f4:	48574400 	ldmdami	r7, {sl, lr}^
    38f8:	72544943 	subsvc	r4, r4, #1097728	; 0x10c000
    38fc:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    3900:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    3904:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    3908:	47617461 	strbmi	r7, [r1, -r1, ror #8]!
    390c:	70537465 	subsvc	r7, r3, r5, ror #8
    3910:	5074696c 	rsbspl	r6, r4, ip, ror #18
    3914:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    3918:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    391c:	4857445f 	ldmdami	r7, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3920:	72544943 	subsvc	r4, r4, #1097728	; 0x10c000
    3924:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    3928:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    392c:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    3930:	00617461 	rsbeq	r7, r1, r1, ror #8
    3934:	43485744 	movtmi	r5, #34628	; 0x8744
    3938:	61725449 	cmnvs	r2, r9, asr #8
    393c:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    3940:	61745372 	cmnvs	r4, r2, ror r3
    3944:	61446567 	cmpvs	r4, r7, ror #10
    3948:	73496174 	movtvc	r6, #37236	; 0x9174
    394c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3950:	6369646f 	cmnvs	r9, #1862270976	; 0x6f000000
    3954:	48574400 	ldmdami	r7, {sl, lr}^
    3958:	72544943 	subsvc	r4, r4, #1097728	; 0x10c000
    395c:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    3960:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    3964:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    3968:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    396c:	70537465 	subsvc	r7, r3, r5, ror #8
    3970:	4374696c 	cmnmi	r4, #108, 18	; 0x1b0000
    3974:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    3978:	00657465 	rsbeq	r7, r5, r5, ror #8
    397c:	43485744 	movtmi	r5, #34628	; 0x8744
    3980:	61725449 	cmnvs	r2, r9, asr #8
    3984:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    3988:	61745372 	cmnvs	r4, r2, ror r3
    398c:	61446567 	cmpvs	r4, r7, ror #10
    3990:	65476174 	strbvs	r6, [r7, #-372]	; 0xfffffe8c
    3994:	61725474 	cmnvs	r2, r4, ror r4
    3998:	6361736e 	cmnvs	r1, #-1207959551	; 0xb8000001
    399c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    39a0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    39a4:	44007375 	strmi	r7, [r0], #-885	; 0xfffffc8b
    39a8:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    39ac:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    39b0:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    39b4:	67617453 			; <UNDEFINED> instruction: 0x67617453
    39b8:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    39bc:	67654261 	strbvs	r4, [r5, -r1, ror #4]!
    39c0:	70536e69 	subsvc	r6, r3, r9, ror #28
    39c4:	4374696c 	cmnmi	r4, #108, 18	; 0x1b0000
    39c8:	656c6379 	strbvs	r6, [ip, #-889]!	; 0xfffffc87
    39cc:	445f6d00 	ldrbmi	r6, [pc], #-3328	; 39d4 <_start-0x462c>
    39d0:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    39d4:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
    39d8:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    39dc:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    39e0:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
    39e4:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    39e8:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    39ec:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    39f0:	67617453 			; <UNDEFINED> instruction: 0x67617453
    39f4:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    39f8:	74654761 	strbtvc	r4, [r5], #-1889	; 0xfffff89f
    39fc:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3a00:	64416563 	strbvs	r6, [r1], #-1379	; 0xfffffa9d
    3a04:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    3a08:	57440073 	smlsldxpl	r0, r4, r3, r0
    3a0c:	54494348 	strbpl	r4, [r9], #-840	; 0xfffffcb8
    3a10:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    3a14:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    3a18:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3a1c:	61746144 	cmnvs	r4, r4, asr #2
    3a20:	74537349 	ldrbvc	r7, [r3], #-841	; 0xfffffcb7
    3a24:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3a28:	67617453 			; <UNDEFINED> instruction: 0x67617453
    3a2c:	57440065 	strbpl	r0, [r4, -r5, rrx]
    3a30:	54494348 	strbpl	r4, [r9], #-840	; 0xfffffcb8
    3a34:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    3a38:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    3a3c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3a40:	61746144 	cmnvs	r4, r4, asr #2
    3a44:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    3a48:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    3a4c:	48574400 	ldmdami	r7, {sl, lr}^
    3a50:	72544943 	subsvc	r4, r4, #1097728	; 0x10c000
    3a54:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    3a58:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
    3a5c:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    3a60:	47617461 	strbmi	r7, [r1, -r1, ror #8]!
    3a64:	72467465 	subvc	r7, r6, #1694498816	; 0x65000000
    3a68:	53656d61 	cmnpl	r5, #6208	; 0x1840
    3a6c:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    3a70:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    3a74:	65447000 	strbvs	r7, [r4, #-0]
    3a78:	6e456373 	mcrvs	3, 2, r6, cr5, cr3, {3}
    3a7c:	63750064 	cmnvs	r5, #100	; 0x64
    3a80:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
    3a84:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    3a88:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3a8c:	6f682f00 	svcvs	0x00682f00
    3a90:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 38e4 <_start-0x471c>
    3a94:	61736f6a 	cmnvs	r3, sl, ror #30
    3a98:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    3a9c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3aa0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3aa4:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    3aa8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    3aac:	72656270 	rsbvc	r6, r5, #112, 4
    3ab0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3ab4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    3ab8:	4f545265 	svcmi	0x00545265
    3abc:	616d2d53 	cmnvs	sp, r3, asr sp
    3ac0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    3ac4:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    3ac8:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    3acc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3ad0:	616c2f73 	smcvs	49907	; 0xc2f3
    3ad4:	3135396e 	teqcc	r5, lr, ror #18
    3ad8:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3adc:	73752f62 	cmnvc	r5, #392	; 0x188
    3ae0:	6e6f6362 	cdpvs	3, 6, cr6, cr15, cr2, {3}
    3ae4:	70676966 	rsbvc	r6, r7, r6, ror #18
    3ae8:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    3aec:	00632e72 	rsbeq	r2, r3, r2, ror lr
    3af0:	43425355 	movtmi	r5, #9045	; 0x2355
    3af4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3af8:	61727567 	cmnvs	r2, r7, ror #10
    3afc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    3b00:	73726150 	cmnvc	r2, #80, 2
    3b04:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
    3b08:	73654474 	cmnvc	r5, #116, 8	; 0x74000000
    3b0c:	70697263 	rsbvc	r7, r9, r3, ror #4
    3b10:	00726f74 	rsbseq	r6, r2, r4, ror pc
    3b14:	65446375 	strbvs	r6, [r4, #-885]	; 0xfffffc8b
    3b18:	654c6373 	strbvs	r6, [ip, #-883]	; 0xfffffc8d
    3b1c:	5355006e 	cmppl	r5, #110	; 0x6e
    3b20:	6e6f4342 	cdpvs	3, 6, cr4, cr15, cr2, {2}
    3b24:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
    3b28:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    3b2c:	61506e6f 	cmpvs	r0, pc, ror #28
    3b30:	72657372 	rsbvc	r7, r5, #-939524095	; 0xc8000001
    3b34:	6f727245 	svcvs	0x00727245
    3b38:	52700072 	rsbspl	r0, r0, #114	; 0x72
    3b3c:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    3b40:	63750074 	cmnvs	r5, #116	; 0x74
    3b44:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    3b48:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3b4c:	53555f00 	cmppl	r5, #0, 30
    3b50:	6e6f4342 	cdpvs	3, 6, cr4, cr15, cr2, {2}
    3b54:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
    3b58:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    3b5c:	61506e6f 	cmpvs	r0, pc, ror #28
    3b60:	72657372 	rsbvc	r7, r5, #-939524095	; 0xc8000001
    3b64:	45637500 	strbmi	r7, [r3, #-1280]!	; 0xfffffb00
    3b68:	63657078 	cmnvs	r5, #120	; 0x78
    3b6c:	4c646574 	cfstr64mi	mvdx6, [r4], #-464	; 0xfffffe30
    3b70:	55006e65 	strpl	r6, [r0, #-3685]	; 0xfffff19b
    3b74:	6f434253 	svcvs	0x00434253
    3b78:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3b7c:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
    3b80:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    3b84:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    3b88:	56734972 			; <UNDEFINED> instruction: 0x56734972
    3b8c:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
    3b90:	76654400 	strbtvc	r4, [r5], -r0, lsl #8
    3b94:	4e656369 	cdpmi	3, 6, cr6, cr5, cr9, {3}
    3b98:	55656d61 	strbpl	r6, [r5, #-3425]!	; 0xfffff29f
    3b9c:	6f6e6b6e 	svcvs	0x006e6b6e
    3ba0:	55006e77 	strpl	r6, [r0, #-3703]	; 0xfffff189
    3ba4:	65444253 	strbvs	r4, [r4, #-595]	; 0xfffffdad
    3ba8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3bac:	41746547 	cmnmi	r4, r7, asr #10
    3bb0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    3bb4:	75007373 	strvc	r7, [r0, #-883]	; 0xfffffc8d
    3bb8:	6f6e6b6e 	svcvs	0x006e6b6e
    3bbc:	6e006e77 	mcrvs	14, 0, r6, cr0, cr7, {3}
    3bc0:	61746f54 	cmnvs	r4, r4, asr pc
    3bc4:	6e654c6c 	cdpvs	12, 6, cr4, cr5, cr12, {3}
    3bc8:	00687467 	rsbeq	r7, r8, r7, ror #8
    3bcc:	44425355 	strbmi	r5, [r2], #-853	; 0xfffffcab
    3bd0:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3bd4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    3bd8:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    3bdc:	00657a69 	rsbeq	r7, r5, r9, ror #20
    3be0:	76654454 			; <UNDEFINED> instruction: 0x76654454
    3be4:	4e656369 	cdpmi	3, 6, cr6, cr5, cr9, {3}
    3be8:	53656d61 	cmnpl	r5, #6208	; 0x1840
    3bec:	63656c65 	cmnvs	r5, #25856	; 0x6500
    3bf0:	00726f74 	rsbseq	r6, r2, r4, ror pc
    3bf4:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    3bf8:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
    3bfc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    3c00:	65486e6f 	strbvs	r6, [r8, #-3695]	; 0xfffff191
    3c04:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
    3c08:	42535500 	subsmi	r5, r3, #0, 10
    3c0c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3c10:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    3c14:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    3c18:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    3c1c:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    3c20:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    3c24:	65444253 	strbvs	r4, [r4, #-595]	; 0xfffffdad
    3c28:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3c2c:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
    3c30:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
    3c34:	6f747069 	svcvs	0x00747069
    3c38:	43700072 	cmnmi	r0, #114	; 0x72
    3c3c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3c40:	65440067 	strbvs	r0, [r4, #-103]	; 0xffffff99
    3c44:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3c48:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    3c4c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    3c50:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    3c54:	53550065 	cmppl	r5, #101	; 0x65
    3c58:	76654442 	strbtvc	r4, [r5], -r2, asr #8
    3c5c:	43656369 	cmnmi	r5, #-1543503871	; 0xa4000001
    3c60:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3c64:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
    3c68:	76654400 	strbtvc	r4, [r5], -r0, lsl #8
    3c6c:	4e656369 	cdpmi	3, 6, cr6, cr5, cr9, {3}
    3c70:	56656d61 	strbtpl	r6, [r5], -r1, ror #26
    3c74:	6f646e65 	svcvs	0x00646e65
    3c78:	682f0072 	stmdavs	pc!, {r1, r4, r5, r6}	; <UNPREDICTABLE>
    3c7c:	2f656d6f 	svccs	0x00656d6f
    3c80:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    3c84:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    3c88:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    3c8c:	6f746b73 	svcvs	0x00746b73
    3c90:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    3c94:	61522f69 	cmpvs	r2, r9, ror #30
    3c98:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    3c9c:	50797272 	rsbspl	r7, r9, r2, ror r2
    3ca0:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    3ca4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    3ca8:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    3cac:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    3cb0:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    3cb4:	442f6f6d 	strtmi	r6, [pc], #-3949	; 3cbc <_start-0x4344>
    3cb8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3cbc:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 3afc <_start-0x4504>
    3cc0:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    3cc4:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 3c08 <_start-0x43f8>
    3cc8:	752f6269 	strvc	r6, [pc, #-617]!	; 3a67 <_start-0x4599>
    3ccc:	65646273 	strbvs	r6, [r4, #-627]!	; 0xfffffd8d
    3cd0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3cd4:	7300632e 	movwvc	r6, #814	; 0x32e
    3cd8:	4e63755f 	mcrmi	5, 3, r7, cr3, cr15, {2}
    3cdc:	41747865 	cmnmi	r4, r5, ror #16
    3ce0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    3ce4:	55007373 	strpl	r7, [r0, #-883]	; 0xfffffc8d
    3ce8:	65444253 	strbvs	r4, [r4, #-595]	; 0xfffffdad
    3cec:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3cf0:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0xfffffab9
    3cf4:	6f70646e 	svcvs	0x0070646e
    3cf8:	30746e69 	rsbscc	r6, r4, r9, ror #28
    3cfc:	42535500 	subsmi	r5, r3, #0, 10
    3d00:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3d04:	6f436563 	svcvs	0x00436563
    3d08:	55007970 	strpl	r7, [r0, #-2416]	; 0xfffff690
    3d0c:	65444253 	strbvs	r4, [r4, #-595]	; 0xfffffdad
    3d10:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3d14:	48746547 	ldmdami	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    3d18:	0074736f 	rsbseq	r7, r4, pc, ror #6
    3d1c:	44425355 	strbmi	r5, [r2], #-853	; 0xfffffcab
    3d20:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3d24:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    3d28:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    3d2c:	42535500 	subsmi	r5, r3, #0, 10
    3d30:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3d34:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    3d38:	65705374 	ldrbvs	r5, [r0, #-884]!	; 0xfffffc8c
    3d3c:	55006465 	strpl	r6, [r0, #-1125]	; 0xfffffb9b
    3d40:	65444253 	strbvs	r4, [r4, #-595]	; 0xfffffdad
    3d44:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3d48:	41746553 	cmnmi	r4, r3, asr r5
    3d4c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    3d50:	55007373 	strpl	r7, [r0, #-883]	; 0xfffffc8d
    3d54:	65444253 	strbvs	r4, [r4, #-595]	; 0xfffffdad
    3d58:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3d5c:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
    3d60:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3d64:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
    3d68:	70697263 	rsbvc	r7, r9, r3, ror #4
    3d6c:	00726f74 	rsbseq	r6, r2, r4, ror pc
    3d70:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3d74:	614e6563 	cmpvs	lr, r3, ror #10
    3d78:	6544656d 	strbvs	r6, [r4, #-1389]	; 0xfffffa93
    3d7c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3d80:	4c737500 	cfldr64mi	mvdx7, [r3], #-0
    3d84:	75676e61 	strbvc	r6, [r7, #-3681]!	; 0xfffff19f
    3d88:	49656761 	stmdbmi	r5!, {r0, r5, r6, r8, r9, sl, sp, lr}^
    3d8c:	53550044 	cmppl	r5, #68	; 0x44
    3d90:	76654442 	strbtvc	r4, [r5], -r2, asr #8
    3d94:	47656369 	strbmi	r6, [r5, -r9, ror #6]!
    3d98:	75487465 	strbvc	r7, [r8, #-1125]	; 0xfffffb9b
    3d9c:	64644162 	strbtvs	r4, [r4], #-354	; 0xfffffe9e
    3da0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    3da4:	6f724600 	svcvs	0x00724600
    3da8:	7665446d 	strbtvc	r4, [r5], -sp, ror #8
    3dac:	00656369 	rsbeq	r6, r5, r9, ror #6
    3db0:	44425355 	strbmi	r5, [r2], #-853	; 0xfffffcab
    3db4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3db8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    3dbc:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
    3dc0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    3dc4:	72456e6f 	subvc	r6, r5, #1776	; 0x6f0
    3dc8:	00726f72 	rsbseq	r6, r2, r2, ror pc
    3dcc:	44425355 	strbmi	r5, [r2], #-853	; 0xfffffcab
    3dd0:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3dd4:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    3dd8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3ddc:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    3de0:	6f697461 	svcvs	0x00697461
    3de4:	7365446e 	cmnvc	r5, #1845493760	; 0x6e000000
    3de8:	70697263 	rsbvc	r7, r9, r3, ror #4
    3dec:	00726f74 	rsbseq	r6, r2, r4, ror pc
    3df0:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    3df4:	43727750 	cmnmi	r2, #80, 14	; 0x1400000
    3df8:	4d6c7274 	sfmmi	f7, 2, [ip, #-464]!	; 0xfffffe30
    3dfc:	006b7361 	rsbeq	r7, fp, r1, ror #6
    3e00:	62754877 	rsbsvs	r4, r5, #7798784	; 0x770000
    3e04:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
    3e08:	65746361 	ldrbvs	r6, [r4, #-865]!	; 0xfffffc9f
    3e0c:	74736972 	ldrbtvc	r6, [r3], #-2418	; 0xfffff68e
    3e10:	00736369 	rsbseq	r6, r3, r9, ror #6
    3e14:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3e18:	65526563 	ldrbvs	r6, [r2, #-1379]	; 0xfffffa9d
    3e1c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
    3e20:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3e24:	705f6d00 	subsvc	r6, pc, r0, lsl #26
    3e28:	44627548 	strbtmi	r7, [r2], #-1352	; 0xfffffab8
    3e2c:	00637365 	rsbeq	r7, r3, r5, ror #6
    3e30:	61684377 	smcvs	33847	; 0x8437
    3e34:	5365676e 	cmnpl	r5, #28835840	; 0x1b80000
    3e38:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    3e3c:	5f6d0073 	svcpl	0x006d0073
    3e40:	726f506e 	rsbvc	r5, pc, #110	; 0x6e
    3e44:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    3e48:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    3e4c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    3e50:	54006874 	strpl	r6, [r0], #-2164	; 0xfffff78c
    3e54:	53425355 	movtpl	r5, #9045	; 0x2355
    3e58:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    3e5c:	48647261 	stmdami	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3e60:	54006275 	strpl	r6, [r0], #-629	; 0xfffffd8b
    3e64:	48425355 	stmdami	r2, {r0, r2, r4, r6, r8, r9, ip, lr}^
    3e68:	65446275 	strbvs	r6, [r4, #-629]	; 0xfffffd8b
    3e6c:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    3e70:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    3e74:	53555400 	cmppl	r5, #0, 8
    3e78:	726f5042 	rsbvc	r5, pc, #66	; 0x42
    3e7c:	61745374 	cmnvs	r4, r4, ror r3
    3e80:	00737574 	rsbseq	r7, r3, r4, ror r5
    3e84:	53705f6d 	cmnpl	r0, #436	; 0x1b4
    3e88:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    3e8c:	50700073 	rsbspl	r0, r0, r3, ror r0
    3e90:	6e657261 	cdpvs	2, 6, cr7, cr5, cr1, {3}
    3e94:	50620074 	rsbpl	r0, r2, r4, ror r0
    3e98:	6e4f7277 	mcrvs	2, 2, r7, cr15, cr7, {3}
    3e9c:	72775032 	rsbsvc	r5, r7, #50	; 0x32
    3ea0:	646f6f47 	strbtvs	r6, [pc], #-3911	; 3ea8 <_start-0x4158>
    3ea4:	75486200 	strbvc	r6, [r8, #-512]	; 0xfffffe00
    3ea8:	6e6f4362 	cdpvs	3, 6, cr4, cr15, cr2, {3}
    3eac:	75437274 	strbvc	r7, [r3, #-628]	; 0xfffffd8c
    3eb0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    3eb4:	53550074 	cmppl	r5, #116	; 0x74
    3eb8:	76654442 	strbtvc	r4, [r5], -r2, asr #8
    3ebc:	46656369 	strbtmi	r6, [r5], -r9, ror #6
    3ec0:	6f746361 	svcvs	0x00746361
    3ec4:	65477972 	strbvs	r7, [r7, #-2418]	; 0xfffff68e
    3ec8:	76654474 			; <UNDEFINED> instruction: 0x76654474
    3ecc:	00656369 	rsbeq	r6, r5, r9, ror #6
    3ed0:	72624e62 	rsbvc	r4, r2, #1568	; 0x620
    3ed4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    3ed8:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    3edc:	2f656d6f 	svccs	0x00656d6f
    3ee0:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    3ee4:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    3ee8:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    3eec:	6f746b73 	svcvs	0x00746b73
    3ef0:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    3ef4:	61522f69 	cmpvs	r2, r9, ror #30
    3ef8:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    3efc:	50797272 	rsbspl	r7, r9, r2, ror r2
    3f00:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    3f04:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    3f08:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    3f0c:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    3f10:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    3f14:	442f6f6d 	strtmi	r6, [pc], #-3949	; 3f1c <_start-0x40e4>
    3f18:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3f1c:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 3d5c <_start-0x42a4>
    3f20:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    3f24:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 3e68 <_start-0x4198>
    3f28:	752f6269 	strvc	r6, [pc, #-617]!	; 3cc7 <_start-0x4339>
    3f2c:	65646273 	strbvs	r6, [r4, #-627]!	; 0xfffffd8d
    3f30:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3f34:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
    3f38:	2e79726f 	cdpcs	2, 7, cr7, cr9, cr15, {3}
    3f3c:	50770063 	rsbspl	r0, r7, r3, rrx
    3f40:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
    3f44:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    3f48:	53550073 	cmppl	r5, #115	; 0x73
    3f4c:	646e4542 	strbtvs	r4, [lr], #-1346	; 0xfffffabe
    3f50:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    3f54:	55003274 	strpl	r3, [r0, #-628]	; 0xfffffd8c
    3f58:	6e454253 	mcrvs	2, 2, r4, cr5, cr3, {2}
    3f5c:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3f60:	6f43746e 	svcvs	0x0043746e
    3f64:	55007970 	strpl	r7, [r0, #-2416]	; 0xfffff690
    3f68:	6e454253 	mcrvs	2, 2, r4, cr5, cr3, {2}
    3f6c:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3f70:	6553746e 	ldrbvs	r7, [r3, #-1134]	; 0xfffffb92
    3f74:	78614d74 	stmdavc	r1!, {r2, r4, r5, r6, r8, sl, fp, lr}^
    3f78:	6b636150 	blvs	18dc4c0 <mailbuffer+0x18a13d0>
    3f7c:	69537465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    3f80:	5500657a 	strpl	r6, [r0, #-1402]	; 0xfffffa86
    3f84:	6e454253 	mcrvs	2, 2, r4, cr5, cr3, {2}
    3f88:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3f8c:	6547746e 	strbvs	r7, [r7, #-1134]	; 0xfffffb92
    3f90:	70795474 	rsbsvc	r5, r9, r4, ror r4
    3f94:	53550065 	cmppl	r5, #101	; 0x65
    3f98:	646e4542 	strbtvs	r4, [lr], #-1346	; 0xfffffabe
    3f9c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    3fa0:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
    3fa4:	5078614d 	rsbspl	r6, r8, sp, asr #2
    3fa8:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
    3fac:	7a695374 	bvc	1a58d84 <mailbuffer+0x1a1dc94>
    3fb0:	53550065 	cmppl	r5, #101	; 0x65
    3fb4:	646e4542 	strbtvs	r4, [lr], #-1346	; 0xfffffabe
    3fb8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    3fbc:	696b5374 	stmdbvs	fp!, {r2, r4, r5, r6, r8, r9, ip, lr}^
    3fc0:	44495070 	strbmi	r5, [r9], #-112	; 0xffffff90
    3fc4:	53555f00 	cmppl	r5, #0, 30
    3fc8:	646e4542 	strbtvs	r4, [lr], #-1346	; 0xfffffabe
    3fcc:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    3fd0:	53550074 	cmppl	r5, #116	; 0x74
    3fd4:	646e4542 	strbtvs	r4, [lr], #-1346	; 0xfffffabe
    3fd8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    3fdc:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
    3fe0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3fe4:	55006563 	strpl	r6, [r0, #-1379]	; 0xfffffa9d
    3fe8:	6e454253 	mcrvs	2, 2, r4, cr5, cr3, {2}
    3fec:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3ff0:	6547746e 	strbvs	r7, [r7, #-1134]	; 0xfffffb92
    3ff4:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
    3ff8:	00726562 	rsbseq	r6, r2, r2, ror #10
    3ffc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3f48 <_start-0x40b8>
    4000:	6a6c2f65 	bvs	1b0fd9c <mailbuffer+0x1ad4cac>
    4004:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    4008:	2f727566 	svccs	0x00727566
    400c:	6b736544 	blvs	1cdd524 <mailbuffer+0x1ca2434>
    4010:	2f706f74 	svccs	0x00706f74
    4014:	2f697072 	svccs	0x00697072
    4018:	70736152 	rsbsvc	r6, r3, r2, asr r1
    401c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    4020:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    4024:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    4028:	534f5452 	movtpl	r5, #62546	; 0xf452
    402c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    4030:	2f726574 	svccs	0x00726574
    4034:	6f6d6544 	svcvs	0x006d6544
    4038:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    403c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    4040:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    4044:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    4048:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    404c:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    4050:	70646e65 	rsbvc	r6, r4, r5, ror #28
    4054:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    4058:	5500632e 	strpl	r6, [r0, #-814]	; 0xfffffcd2
    405c:	6e454253 	mcrvs	2, 2, r4, cr5, cr3, {2}
    4060:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    4064:	6552746e 	ldrbvs	r7, [r2, #-1134]	; 0xfffffb92
    4068:	50746573 	rsbspl	r6, r4, r3, ror r5
    406c:	55004449 	strpl	r4, [r0, #-1097]	; 0xfffffbb7
    4070:	6e454253 	mcrvs	2, 2, r4, cr5, cr3, {2}
    4074:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    4078:	6547746e 	strbvs	r7, [r7, #-1134]	; 0xfffffb92
    407c:	78654e74 	stmdavc	r5!, {r2, r4, r5, r6, r9, sl, fp, lr}^
    4080:	44495074 	strbmi	r5, [r9], #-116	; 0xffffff8c
    4084:	42535500 	subsmi	r5, r3, #0, 10
    4088:	70646e45 	rsbvc	r6, r4, r5, asr #28
    408c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    4090:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    4094:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4098:	006c6176 	rsbeq	r6, ip, r6, ror r1
    409c:	45425355 	strbmi	r5, [r2, #-853]	; 0xfffffcab
    40a0:	6f70646e 	svcvs	0x0070646e
    40a4:	49746e69 	ldmdbmi	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    40a8:	72694473 	rsbvc	r4, r9, #1929379840	; 0x73000000
    40ac:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    40b0:	6e496e6f 	cdpvs	14, 4, cr6, cr9, cr15, {3}
    40b4:	49637500 	stmdbmi	r3!, {r8, sl, ip, sp, lr}^
    40b8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    40bc:	006c6176 	rsbeq	r6, ip, r6, ror r1
    40c0:	52425355 	subpl	r5, r2, #1409286145	; 0x54000001
    40c4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    40c8:	65477473 	strbvs	r7, [r7, #-1139]	; 0xfffffb8d
    40cc:	66754274 			; <UNDEFINED> instruction: 0x66754274
    40d0:	006e654c 	rsbeq	r6, lr, ip, asr #10
    40d4:	52425355 	subpl	r5, r2, #1409286145	; 0x54000001
    40d8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    40dc:	65477473 	strbvs	r7, [r7, #-1139]	; 0xfffffb8d
    40e0:	74655374 	strbtvc	r5, [r5], #-884	; 0xfffffc8c
    40e4:	61447075 	hvcvs	18181	; 0x4705
    40e8:	2f006174 	svccs	0x00006174
    40ec:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    40f0:	6f6a6c2f 	svcvs	0x006a6c2f
    40f4:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    40f8:	442f7275 	strtmi	r7, [pc], #-629	; 4100 <_start-0x3f00>
    40fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4100:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    4104:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    4108:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    410c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4110:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    4114:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    4118:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    411c:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    4120:	442f7265 	strtmi	r7, [pc], #-613	; 4128 <_start-0x3ed8>
    4124:	2f6f6d65 	svccs	0x006f6d65
    4128:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    412c:	2f737265 	svccs	0x00737265
    4130:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    4134:	2f343135 	svccs	0x00343135
    4138:	2f62696c 	svccs	0x0062696c
    413c:	72627375 	rsbvc	r7, r2, #-738197503	; 0xd4000001
    4140:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    4144:	632e7473 	teqvs	lr, #1929379840	; 0x73000000
    4148:	42535500 	subsmi	r5, r3, #0, 10
    414c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    4150:	47747365 	ldrbmi	r7, [r4, -r5, ror #6]!
    4154:	74537465 	ldrbvc	r7, [r3], #-1125	; 0xfffffb9b
    4158:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    415c:	42535500 	subsmi	r5, r3, #0, 10
    4160:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    4164:	53747365 	cmnpl	r4, #-1811939327	; 0x94000001
    4168:	6f437465 	svcvs	0x00437465
    416c:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    4170:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    4174:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
    4178:	00656e69 	rsbeq	r6, r5, r9, ror #28
    417c:	52425355 	subpl	r5, r2, #1409286145	; 0x54000001
    4180:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    4184:	61437473 	hvcvs	14147	; 0x3743
    4188:	6f436c6c 	svcvs	0x00436c6c
    418c:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    4190:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    4194:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
    4198:	00656e69 	rsbeq	r6, r5, r9, ror #28
    419c:	52425355 	subpl	r5, r2, #1409286145	; 0x54000001
    41a0:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    41a4:	65537473 	ldrbvs	r7, [r3, #-1139]	; 0xfffffb8d
    41a8:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
    41ac:	4c746c75 	ldclmi	12, cr6, [r4], #-468	; 0xfffffe2c
    41b0:	55006e65 	strpl	r6, [r0, #-3685]	; 0xfffff19b
    41b4:	65524253 	ldrbvs	r4, [r2, #-595]	; 0xfffffdad
    41b8:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    41bc:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
    41c0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    41c4:	70007265 	andvc	r7, r0, r5, ror #4
    41c8:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
    41cc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    41d0:	52425355 	subpl	r5, r2, #1409286145	; 0x54000001
    41d4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    41d8:	65477473 	strbvs	r7, [r7, #-1139]	; 0xfffffb8d
    41dc:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
    41e0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    41e4:	53550074 	cmppl	r5, #116	; 0x74
    41e8:	71655242 	cmnvc	r5, r2, asr #4
    41ec:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
    41f0:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    41f4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    41f8:	53550073 	cmppl	r5, #115	; 0x73
    41fc:	71655242 	cmnvc	r5, r2, asr #4
    4200:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
    4204:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    4208:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    420c:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    4210:	00687467 	rsbeq	r7, r8, r7, ror #8
    4214:	4253555f 	subsmi	r5, r3, #398458880	; 0x17c00000
    4218:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    421c:	00747365 	rsbseq	r7, r4, r5, ror #6
    4220:	73655262 	cmnvc	r5, #536870918	; 0x20000006
    4224:	00746c75 	rsbseq	r6, r4, r5, ror ip
    4228:	746e4970 	strbtvc	r4, [lr], #-2416	; 0xfffff690
    422c:	61667265 	cmnvs	r6, r5, ror #4
    4230:	65446563 	strbvs	r6, [r4, #-1379]	; 0xfffffa9d
    4234:	55006373 	strpl	r6, [r0, #-883]	; 0xfffffc8d
    4238:	74534253 	ldrbvc	r4, [r3], #-595	; 0xfffffdad
    423c:	61646e61 	cmnvs	r4, r1, ror #28
    4240:	75486472 	strbvc	r6, [r8, #-1138]	; 0xfffffb8e
    4244:	756e4562 	strbvc	r4, [lr, #-1378]!	; 0xfffffa9e
    4248:	6172656d 	cmnvs	r2, sp, ror #10
    424c:	6f506574 	svcvs	0x00506574
    4250:	00737472 	rsbseq	r7, r3, r2, ror r4
    4254:	646e4570 	strbtvs	r4, [lr], #-1392	; 0xfffffa90
    4258:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    425c:	73654474 	cmnvc	r5, #116, 8	; 0x74000000
    4260:	72460063 	subvc	r0, r6, #99	; 0x63
    4264:	75486d6f 	strbvc	r6, [r8, #-3439]	; 0xfffff291
    4268:	48700062 	ldmdami	r0!, {r1, r5, r6}^
    426c:	74536275 	ldrbvc	r6, [r3], #-629	; 0xfffffd8b
    4270:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    4274:	65536e00 	ldrbvs	r6, [r3, #-3584]	; 0xfffff200
    4278:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    427c:	5500726f 	strpl	r7, [r0, #-623]	; 0xfffffd91
    4280:	74534253 	ldrbvc	r4, [r3], #-595	; 0xfffffdad
    4284:	61646e61 	cmnvs	r4, r1, ror #28
    4288:	75486472 	strbvc	r6, [r8, #-1138]	; 0xfffffb8e
    428c:	696e4962 	stmdbvs	lr!, {r1, r5, r6, r8, fp, lr}^
    4290:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    4294:	00657a69 	rsbeq	r7, r5, r9, ror #20
    4298:	53425355 	movtpl	r5, #9045	; 0x2355
    429c:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    42a0:	48647261 	stmdami	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    42a4:	6f436275 	svcvs	0x00436275
    42a8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    42ac:	00657275 	rsbeq	r7, r5, r5, ror r2
    42b0:	53425355 	movtpl	r5, #9045	; 0x2355
    42b4:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    42b8:	48647261 	stmdami	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    42bc:	65476275 	strbvs	r6, [r7, #-629]	; 0xfffffd8b
    42c0:	76654474 			; <UNDEFINED> instruction: 0x76654474
    42c4:	4e656369 	cdpmi	3, 6, cr6, cr5, cr9, {3}
    42c8:	73656d61 	cmnvc	r5, #6208	; 0x1840
    42cc:	6f682f00 	svcvs	0x00682f00
    42d0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4124 <_start-0x3edc>
    42d4:	61736f6a 	cmnvs	r3, sl, ror #30
    42d8:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    42dc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    42e0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    42e4:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    42e8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    42ec:	72656270 	rsbvc	r6, r5, #112, 4
    42f0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    42f4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    42f8:	4f545265 	svcmi	0x00545265
    42fc:	616d2d53 	cmnvs	sp, r3, asr sp
    4300:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    4304:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    4308:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    430c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4310:	616c2f73 	smcvs	49907	; 0xc2f3
    4314:	3135396e 	teqcc	r5, lr, ror #18
    4318:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    431c:	73752f62 	cmnvc	r5, #392	; 0x188
    4320:	61747362 	cmnvs	r4, r2, ror #6
    4324:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    4328:	62756864 	rsbsvs	r6, r5, #100, 16	; 0x640000
    432c:	7000632e 	andvc	r6, r0, lr, lsr #6
    4330:	6c696843 	stclvs	8, cr6, [r9], #-268	; 0xfffffef4
    4334:	555f0064 	ldrbpl	r0, [pc, #-100]	; 42d8 <_start-0x3d28>
    4338:	74534253 	ldrbvc	r4, [r3], #-595	; 0xfffffdad
    433c:	61646e61 	cmnvs	r4, r1, ror #28
    4340:	75486472 	strbvc	r6, [r8, #-1138]	; 0xfffffb8e
    4344:	4e700062 	cdpmi	0, 7, cr0, cr0, cr2, {3}
    4348:	73656d61 	cmnvc	r5, #6208	; 0x1840
    434c:	75487700 	strbvc	r7, [r8, #-1792]	; 0xfffff900
    4350:	61745362 	cmnvs	r4, r2, ror #6
    4354:	00737574 	rsbseq	r7, r3, r4, ror r5
    4358:	62754877 	rsbsvs	r4, r5, #7798784	; 0x770000
    435c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    4360:	54006567 	strpl	r6, [r0], #-1383	; 0xfffffa99
    4364:	48425355 	stmdami	r2, {r0, r2, r4, r6, r8, r9, ip, lr}^
    4368:	74536275 	ldrbvc	r6, [r3], #-629	; 0xfffffd8b
    436c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    4370:	6f506e00 	svcvs	0x00506e00
    4374:	44007472 	strmi	r7, [r0], #-1138	; 0xfffffb8e
    4378:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    437c:	6d614e65 	stclvs	14, cr4, [r1, #-404]!	; 0xfffffe6c
    4380:	72655365 	rsbvc	r5, r5, #-1811939327	; 0x94000001
    4384:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4388:	44646441 	strbtmi	r6, [r4], #-1089	; 0xfffffbbf
    438c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4390:	65440065 	strbvs	r0, [r4, #-101]	; 0xffffff9b
    4394:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4398:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    439c:	76726553 			; <UNDEFINED> instruction: 0x76726553
    43a0:	47656369 	strbmi	r6, [r5, -r9, ror #6]!
    43a4:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    43a8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    43ac:	705f7300 	subsvc	r7, pc, r0, lsl #6
    43b0:	73696854 	cmnvc	r9, #84, 16	; 0x540000
    43b4:	65445f00 	strbvs	r5, [r4, #-3840]	; 0xfffff100
    43b8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    43bc:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    43c0:	76726553 			; <UNDEFINED> instruction: 0x76726553
    43c4:	00656369 	rsbeq	r6, r5, r9, ror #6
    43c8:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    43cc:	614e6563 	cmpvs	lr, r3, ror #10
    43d0:	6553656d 	ldrbvs	r6, [r3, #-1389]	; 0xfffffa93
    43d4:	63697672 	cmnvs	r9, #119537664	; 0x7200000
    43d8:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    43dc:	6f682f00 	svcvs	0x00682f00
    43e0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4234 <_start-0x3dcc>
    43e4:	61736f6a 	cmnvs	r3, sl, ror #30
    43e8:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    43ec:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    43f0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    43f4:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    43f8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    43fc:	72656270 	rsbvc	r6, r5, #112, 4
    4400:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4404:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    4408:	4f545265 	svcmi	0x00545265
    440c:	616d2d53 	cmnvs	sp, r3, asr sp
    4410:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    4414:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    4418:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    441c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4420:	616c2f73 	smcvs	49907	; 0xc2f3
    4424:	3135396e 	teqcc	r5, lr, ror #18
    4428:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    442c:	65642f62 	strbvs	r2, [r4, #-3938]!	; 0xfffff09e
    4430:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4434:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    4438:	76726573 			; <UNDEFINED> instruction: 0x76726573
    443c:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    4440:	414d0063 	cmpmi	sp, r3, rrx
    4444:	64644143 	strbtvs	r4, [r4], #-323	; 0xfffffebd
    4448:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    444c:	00746553 	rsbseq	r6, r4, r3, asr r5
    4450:	4143414d 	cmpmi	r3, sp, asr #2
    4454:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    4458:	65477373 	strbvs	r7, [r7, #-883]	; 0xfffffc8d
    445c:	7a695374 	bvc	1a59234 <mailbuffer+0x1a1e144>
    4460:	41700065 	cmnmi	r0, r5, rrx
    4464:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    4468:	00327373 	eorseq	r7, r2, r3, ror r3
    446c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 43b8 <_start-0x3c48>
    4470:	6a6c2f65 	bvs	1b1020c <mailbuffer+0x1ad511c>
    4474:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    4478:	2f727566 	svccs	0x00727566
    447c:	6b736544 	blvs	1cdd994 <mailbuffer+0x1ca28a4>
    4480:	2f706f74 	svccs	0x00706f74
    4484:	2f697072 	svccs	0x00697072
    4488:	70736152 	rsbsvc	r6, r3, r2, asr r1
    448c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    4490:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    4494:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    4498:	534f5452 	movtpl	r5, #62546	; 0xf452
    449c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    44a0:	2f726574 	svccs	0x00726574
    44a4:	6f6d6544 	svcvs	0x006d6544
    44a8:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    44ac:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    44b0:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    44b4:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    44b8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    44bc:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    44c0:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    44c4:	2e737365 	cdpcs	3, 7, cr7, cr3, cr5, {3}
    44c8:	414d0063 	cmpmi	sp, r3, rrx
    44cc:	64644143 	strbtvs	r4, [r4], #-323	; 0xfffffebd
    44d0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    44d4:	71457349 	cmpvc	r5, r9, asr #6
    44d8:	006c6175 	rsbeq	r6, ip, r5, ror r1
    44dc:	4143414d 	cmpmi	r3, sp, asr #2
    44e0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    44e4:	65537373 	ldrbvs	r7, [r3, #-883]	; 0xfffffc8d
    44e8:	6f724274 	svcvs	0x00724274
    44ec:	61636461 	cmnvs	r3, r1, ror #8
    44f0:	4d007473 	cfstrsmi	mvf7, [r0, #-460]	; 0xfffffe34
    44f4:	64414341 	strbvs	r4, [r1], #-833	; 0xfffffcbf
    44f8:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    44fc:	706f4373 	rsbvc	r4, pc, r3, ror r3	; <UNPREDICTABLE>
    4500:	006f5479 	rsbeq	r5, pc, r9, ror r4	; <UNPREDICTABLE>
    4504:	4143414d 	cmpmi	r3, sp, asr #2
    4508:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    450c:	00327373 	eorseq	r7, r2, r3, ror r3
    4510:	4143414d 	cmpmi	r3, sp, asr #2
    4514:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    4518:	6f467373 	svcvs	0x00467373
    451c:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
    4520:	43414d00 	movtmi	r4, #7424	; 0x1d00
    4524:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    4528:	47737365 	ldrbmi	r7, [r3, -r5, ror #6]!
    452c:	4d007465 	cfstrsmi	mvf7, [r0, #-404]	; 0xfffffe6c
    4530:	64414341 	strbvs	r4, [r1], #-833	; 0xfffffcbf
    4534:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    4538:	42734973 	rsbsmi	r4, r3, #1884160	; 0x1cc000
    453c:	64616f72 	strbtvs	r6, [r1], #-3954	; 0xfffff08e
    4540:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
    4544:	64417000 	strbvs	r7, [r1], #-0
    4548:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    454c:	4d530073 	ldclmi	0, cr0, [r3, #-460]	; 0xfffffe34
    4550:	35394353 	ldrcc	r4, [r9, #-851]!	; 0xfffffcad
    4554:	65447831 	strbvs	r7, [r4, #-2097]	; 0xfffff7cf
    4558:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    455c:	4d746547 	cfldr64mi	mvdx6, [r4, #-284]!	; 0xfffffee4
    4560:	64414341 	strbvs	r4, [r1], #-833	; 0xfffffcbf
    4564:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    4568:	414d0073 	hvcmi	53251	; 0xd003
    456c:	72745343 	rsbsvc	r5, r4, #201326593	; 0xc000001
    4570:	00676e69 	rsbeq	r6, r7, r9, ror #28
    4574:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 44c0 <_start-0x3b40>
    4578:	6a6c2f65 	bvs	1b10314 <mailbuffer+0x1ad5224>
    457c:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    4580:	2f727566 	svccs	0x00727566
    4584:	6b736544 	blvs	1cdda9c <mailbuffer+0x1ca29ac>
    4588:	2f706f74 	svccs	0x00706f74
    458c:	2f697072 	svccs	0x00697072
    4590:	70736152 	rsbsvc	r6, r3, r2, asr r1
    4594:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    4598:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    459c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    45a0:	534f5452 	movtpl	r5, #62546	; 0xf452
    45a4:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    45a8:	2f726574 	svccs	0x00726574
    45ac:	6f6d6544 	svcvs	0x006d6544
    45b0:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    45b4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    45b8:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    45bc:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    45c0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    45c4:	736d732f 	cmnvc	sp, #-1140850688	; 0xbc000000
    45c8:	31353963 	teqcc	r5, r3, ror #18
    45cc:	00632e78 	rsbeq	r2, r3, r8, ror lr
    45d0:	43414d6e 	movtmi	r4, #7534	; 0x1d6e
    45d4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    45d8:	4c737365 	ldclmi	3, cr7, [r3], #-404	; 0xfffffe6c
    45dc:	5300776f 	movwpl	r7, #1903	; 0x76f
    45e0:	3943534d 	stmdbcc	r3, {r0, r2, r3, r6, r8, r9, ip, lr}^
    45e4:	44783135 	ldrbtmi	r3, [r8], #-309	; 0xfffffecb
    45e8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    45ec:	6d754465 	cfldrdvs	mvd4, [r5, #-404]!	; 0xfffffe6c
    45f0:	67655270 			; <UNDEFINED> instruction: 0x67655270
    45f4:	4d530073 	ldclmi	0, cr0, [r3, #-460]	; 0xfffffe34
    45f8:	35394353 	ldrcc	r4, [r9, #-851]!	; 0xfffffcad
    45fc:	65447831 	strbvs	r7, [r4, #-2097]	; 0xfffff7cf
    4600:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4604:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    4608:	46657669 	strbtmi	r7, [r5], -r9, ror #12
    460c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    4610:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
    4614:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    4618:	6e007375 	mcrvs	3, 0, r7, cr0, cr5, {3}
    461c:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
    4620:	654c746c 	strbvs	r7, [ip, #-1132]	; 0xfffffb94
    4624:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    4628:	534d5300 	movtpl	r5, #54016	; 0xd300
    462c:	31353943 	teqcc	r5, r3, asr #18
    4630:	76654478 			; <UNDEFINED> instruction: 0x76654478
    4634:	57656369 	strbpl	r6, [r5, -r9, ror #6]!
    4638:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    463c:	00676552 	rsbeq	r6, r7, r2, asr r5
    4640:	43534d53 	cmpmi	r3, #5312	; 0x14c0
    4644:	78313539 	ldmdavc	r1!, {r0, r3, r4, r5, r8, sl, ip, sp}
    4648:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    464c:	65526563 	ldrbvs	r6, [r2, #-1379]	; 0xfffffa9d
    4650:	65526461 	ldrbvs	r6, [r2, #-1121]	; 0xfffffb9f
    4654:	4d530067 	ldclmi	0, cr0, [r3, #-412]	; 0xfffffe64
    4658:	35394353 	ldrcc	r4, [r9, #-851]!	; 0xfffffcad
    465c:	65447831 	strbvs	r7, [r4, #-2097]	; 0xfffff7cf
    4660:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4664:	706d7544 	rsbvc	r7, sp, r4, asr #10
    4668:	00676552 	rsbeq	r6, r7, r2, asr r5
    466c:	414d7375 	hvcmi	55093	; 0xd735
    4670:	64644143 	strbtvs	r4, [r4], #-323	; 0xfffffebd
    4674:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    4678:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
    467c:	6f724600 	svcvs	0x00724600
    4680:	534d536d 	movtpl	r5, #54125	; 0xd36d
    4684:	31353943 	teqcc	r5, r3, asr #18
    4688:	414d0078 	hvcmi	53256	; 0xd008
    468c:	64644143 	strbtvs	r4, [r4], #-323	; 0xfffffebd
    4690:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    4694:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    4698:	53007265 	movwpl	r7, #613	; 0x265
    469c:	3943534d 	stmdbcc	r3, {r0, r2, r3, r6, r8, r9, ip, lr}^
    46a0:	44783135 	ldrbtmi	r3, [r8], #-309	; 0xfffffecb
    46a4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    46a8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    46ac:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
    46b0:	53006572 	movwpl	r6, #1394	; 0x572
    46b4:	3943534d 	stmdbcc	r3, {r0, r2, r3, r6, r8, r9, ip, lr}^
    46b8:	44783135 	ldrbtmi	r3, [r8], #-309	; 0xfffffecb
    46bc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    46c0:	6e655365 	cdpvs	3, 6, cr5, cr5, cr5, {3}
    46c4:	61724664 	cmnvs	r2, r4, ror #12
    46c8:	5f00656d 	svcpl	0x0000656d
    46cc:	43534d53 	cmpmi	r3, #5312	; 0x14c0
    46d0:	78313539 	ldmdavc	r1!, {r0, r3, r4, r5, r8, sl, ip, sp}
    46d4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    46d8:	70006563 	andvc	r6, r0, r3, ror #10
    46dc:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    46e0:	5f730065 	svcpl	0x00730065
    46e4:	7665446e 	strbtvc	r4, [r5], -lr, ror #8
    46e8:	4e656369 	cdpmi	3, 6, cr6, cr5, cr9, {3}
    46ec:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    46f0:	496e0072 	stmdbmi	lr!, {r1, r4, r5, r6}^
    46f4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    46f8:	67724100 	ldrbvs	r4, [r2, -r0, lsl #2]!
    46fc:	506e0073 	rsbpl	r0, lr, r3, ror r0
    4700:	5300736f 	movwpl	r7, #879	; 0x36f
    4704:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    4708:	74755067 	ldrbtvc	r5, [r5], #-103	; 0xffffff99
    470c:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
    4710:	72745300 	rsbsvc	r5, r4, #0, 6
    4714:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
    4718:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    471c:	70536576 	subsvc	r6, r3, r6, ror r5
    4720:	00656361 	rsbeq	r6, r5, r1, ror #6
    4724:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    4728:	6547676e 	strbvs	r6, [r7, #-1902]	; 0xfffff892
    472c:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    4730:	00687467 	rsbeq	r7, r8, r7, ror #8
    4734:	6c754e62 	ldclvs	14, cr4, [r5], #-392	; 0xfffffe78
    4738:	6863006c 	stmdavs	r3!, {r2, r3, r5, r6}^
    473c:	00677241 	rsbeq	r7, r7, r1, asr #4
    4740:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    4744:	6f46676e 	svcvs	0x0046676e
    4748:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
    474c:	72745300 	rsbsvc	r5, r4, #0, 6
    4750:	50676e69 	rsbpl	r6, r7, r9, ror #28
    4754:	74537475 	ldrbvc	r7, [r3], #-1141	; 0xfffffb8b
    4758:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    475c:	65447000 	strbvs	r7, [r4, #-0]
    4760:	62007473 	andvs	r7, r0, #1929379840	; 0x73000000
    4764:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
    4768:	654e7000 	strbvs	r7, [lr, #-0]
    476c:	66754277 			; <UNDEFINED> instruction: 0x66754277
    4770:	00726566 	rsbseq	r6, r2, r6, ror #10
    4774:	6e654c6e 	cdpvs	12, 6, cr4, cr5, cr14, {3}
    4778:	6f746e00 	svcvs	0x00746e00
    477c:	74530061 	ldrbvc	r0, [r3], #-97	; 0xffffff9f
    4780:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4784:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
    4788:	00567461 	subseq	r7, r6, r1, ror #8
    478c:	77654e6e 	strbvc	r4, [r5, -lr, ror #28]!
    4790:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    4794:	6f467000 	svcvs	0x00467000
    4798:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
    479c:	664f6e00 	strbvs	r6, [pc], -r0, lsl #28
    47a0:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    47a4:	4e6c7500 	cdpmi	5, 6, cr7, cr12, cr0, {0}
    47a8:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    47ac:	55620072 	strbpl	r0, [r2, #-114]!	; 0xffffff8e
    47b0:	73616370 	cmnvc	r1, #112, 6	; 0xc0000001
    47b4:	74530065 	ldrbvc	r0, [r3], #-101	; 0xffffff9b
    47b8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    47bc:	646e6946 	strbtvs	r6, [lr], #-2374	; 0xfffff6ba
    47c0:	446c7500 	strbtmi	r7, [ip], #-1280	; 0xfffffb00
    47c4:	74696769 	strbtvc	r6, [r9], #-1897	; 0xfffff897
    47c8:	446c7500 	strbtmi	r7, [ip], #-1280	; 0xfffffb00
    47cc:	73697669 	cmnvc	r9, #110100480	; 0x6900000
    47d0:	5300726f 	movwpl	r7, #623	; 0x26f
    47d4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    47d8:	6d6f4367 	stclvs	3, cr4, [pc, #-412]!	; 4644 <_start-0x39bc>
    47dc:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    47e0:	615f5f00 	cmpvs	pc, r0, lsl #30
    47e4:	536e0070 	cmnpl	lr, #112	; 0x70
    47e8:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    47ec:	654c6200 	strbvs	r6, [ip, #-512]	; 0xfffffe00
    47f0:	70007466 	andvc	r7, r0, r6, ror #8
    47f4:	00677241 	rsbeq	r7, r7, r1, asr #4
    47f8:	61765f5f 	cmnvs	r6, pc, asr pc
    47fc:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    4800:	68630074 	stmdavs	r3!, {r2, r4, r5, r6}^
    4804:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
    4808:	74535f00 	ldrbvc	r5, [r3], #-3840	; 0xfffff100
    480c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4810:	6f682f00 	svcvs	0x00682f00
    4814:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4668 <_start-0x3998>
    4818:	61736f6a 	cmnvs	r3, sl, ror #30
    481c:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    4820:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4824:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4828:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    482c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    4830:	72656270 	rsbvc	r6, r5, #112, 4
    4834:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4838:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    483c:	4f545265 	svcmi	0x00545265
    4840:	616d2d53 	cmnvs	sp, r3, asr sp
    4844:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    4848:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    484c:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    4850:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4854:	616c2f73 	smcvs	49907	; 0xc2f3
    4858:	3135396e 	teqcc	r5, lr, ror #18
    485c:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    4860:	74732f62 	ldrbtvc	r2, [r3], #-3938	; 0xfffff09e
    4864:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4868:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    486c:	616d726f 	cmnvs	sp, pc, ror #4
    4870:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
    4874:	00726562 	rsbseq	r6, r2, r2, ror #10
    4878:	72416c75 	subvc	r6, r1, #29952	; 0x7500
    487c:	426e0067 	rsbmi	r0, lr, #103	; 0x67
    4880:	00657361 	rsbeq	r7, r5, r1, ror #6
    4884:	426d754e 	rsbmi	r7, sp, #327155712	; 0x13800000
    4888:	62006675 	andvs	r6, r0, #122683392	; 0x7500000
    488c:	756e694d 	strbvc	r6, [lr, #-2381]!	; 0xfffff6b3
    4890:	74530073 	ldrbvc	r0, [r3], #-115	; 0xffffff8d
    4894:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4898:	65707041 	ldrbvs	r7, [r0, #-65]!	; 0xffffffbf
    489c:	5300646e 	movwpl	r6, #1134	; 0x46e
    48a0:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    48a4:	74655367 	strbtvc	r5, [r5], #-871	; 0xfffffc99
    48a8:	69576e00 	ldmdbvs	r7, {r9, sl, fp, sp, lr}^
    48ac:	00687464 	rsbeq	r7, r8, r4, ror #8
    48b0:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    48b4:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    48b8:	00706d63 	rsbseq	r6, r0, r3, ror #26
    48bc:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    48c0:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    48c4:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    48c8:	70737500 	rsbsvc	r7, r3, r0, lsl #10
    48cc:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
    48d0:	706d636d 	rsbvc	r6, sp, sp, ror #6
    48d4:	75427000 	strbvc	r7, [r2, #-0]
    48d8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    48dc:	42700031 	rsbsmi	r0, r0, #49	; 0x31
    48e0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    48e4:	63003272 	movwvs	r3, #626	; 0x272
    48e8:	6c615668 	stclvs	6, cr5, [r1], #-416	; 0xfffffe60
    48ec:	70006575 	andvc	r6, r0, r5, ror r5
    48f0:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    48f4:	0031676e 	eorseq	r6, r1, lr, ror #14
    48f8:	72745370 	rsbsvc	r5, r4, #112, 6	; 0xc0000001
    48fc:	32676e69 	rsbcc	r6, r7, #1680	; 0x690
    4900:	70737500 	rsbsvc	r7, r3, r0, lsl #10
    4904:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    4908:	79706372 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    490c:	6f682f00 	svcvs	0x00682f00
    4910:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4764 <_start-0x389c>
    4914:	61736f6a 	cmnvs	r3, sl, ror #30
    4918:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    491c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4920:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4924:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    4928:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    492c:	72656270 	rsbvc	r6, r5, #112, 4
    4930:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4934:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    4938:	4f545265 	svcmi	0x00545265
    493c:	616d2d53 	cmnvs	sp, r3, asr sp
    4940:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    4944:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    4948:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    494c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4950:	616c2f73 	smcvs	49907	; 0xc2f3
    4954:	3135396e 	teqcc	r5, lr, ror #18
    4958:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    495c:	74752f62 	ldrbtvc	r2, [r5], #-3938	; 0xfffff09e
    4960:	632e6c69 	teqvs	lr, #26880	; 0x6900
    4964:	70737500 	rsbsvc	r7, r3, r0, lsl #10
    4968:	68635f69 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    496c:	69327261 	ldmdbvs	r2!, {r0, r5, r6, r9, ip, sp, lr}
    4970:	7500746e 	strvc	r7, [r0, #-1134]	; 0xfffffb92
    4974:	5f697073 	svcpl	0x00697073
    4978:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    497c:	75007461 	strvc	r7, [r0, #-1121]	; 0xfffffb9f
    4980:	5f697073 	svcpl	0x00697073
    4984:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    4988:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    498c:	5f697073 	svcpl	0x00697073
    4990:	6232656c 	eorsvs	r6, r2, #108, 10	; 0x1b000000
    4994:	00363165 	eorseq	r3, r6, r5, ror #2
    4998:	69707375 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    499c:	32656c5f 	rsbcc	r6, r5, #24320	; 0x5f00
    49a0:	32336562 	eorscc	r6, r3, #411041792	; 0x18800000
    49a4:	70737500 	rsbsvc	r7, r3, r0, lsl #10
    49a8:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    49ac:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    49b0:	70737500 	rsbsvc	r7, r3, r0, lsl #10
    49b4:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
    49b8:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    49bc:	566c7500 	strbtpl	r7, [ip], -r0, lsl #10
    49c0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    49c4:	614d6e00 	cmpvs	sp, r0, lsl #28
    49c8:	6e654c78 	mcrvs	12, 3, r4, cr5, cr8, {3}
    49cc:	72537000 	subsvc	r7, r3, #0
    49d0:	53540063 	cmppl	r4, #99	; 0x63
    49d4:	52495343 	subpl	r5, r9, #201326593	; 0xc000001
    49d8:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
    49dc:	63617061 	cmnvs	r1, #97	; 0x61
    49e0:	31797469 	cmncc	r9, r9, ror #8
    49e4:	65520030 	ldrbvs	r0, [r2, #-48]	; 0xffffffd0
    49e8:	76726573 			; <UNDEFINED> instruction: 0x76726573
    49ec:	70006465 	andvc	r6, r0, r5, ror #8
    49f0:	42646d43 	rsbmi	r6, r4, #4288	; 0x10c0
    49f4:	42006b6c 	andmi	r6, r0, #108, 22	; 0x1b000
    49f8:	6b636f6c 	blvs	18e07b0 <mailbuffer+0x18a56c0>
    49fc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    4a00:	6e496874 	mcrvs	8, 2, r6, cr9, cr4, {3}
    4a04:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    4a08:	64410073 	strbvs	r0, [r1], #-115	; 0xffffff8d
    4a0c:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    4a10:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    4a14:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    4a18:	62006874 	andvs	r6, r0, #116, 16	; 0x740000
    4a1c:	5742436d 	strbpl	r4, [r2, -sp, ror #6]
    4a20:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    4a24:	4e410073 	mcrmi	0, 2, r0, cr1, cr3, {3}
    4a28:	70414953 	subvc	r4, r1, r3, asr r9
    4a2c:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
    4a30:	65566465 	ldrbvs	r6, [r6, #-1125]	; 0xfffffb9b
    4a34:	6f697372 	svcvs	0x00697372
    4a38:	6552006e 	ldrbvs	r0, [r2, #-110]	; 0xffffff92
    4a3c:	76726573 			; <UNDEFINED> instruction: 0x76726573
    4a40:	00326465 	eorseq	r6, r2, r5, ror #8
    4a44:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    4a48:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    4a4c:	555f0033 	ldrbpl	r0, [pc, #-51]	; 4a21 <_start-0x35df>
    4a50:	75424253 	strbvc	r4, [r2, #-595]	; 0xfffffdad
    4a54:	6e4f6b6c 	vmlsvs.f64	d22, d15, d28
    4a58:	614d796c 	cmpvs	sp, ip, ror #18
    4a5c:	74537373 	ldrbvc	r7, [r3], #-883	; 0xfffffc8d
    4a60:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4a64:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    4a68:	00656369 	rsbeq	r6, r5, r9, ror #6
    4a6c:	53435354 	movtpl	r5, #13140	; 0x3354
    4a70:	716e4949 	cmnvc	lr, r9, asr #18
    4a74:	79726975 	ldmdbvc	r2!, {r0, r2, r4, r5, r6, r8, fp, sp, lr}^
    4a78:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
    4a7c:	6f697469 	svcvs	0x00697469
    4a80:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
    4a84:	65736e65 	ldrbvs	r6, [r3, #-3685]!	; 0xfffff19b
    4a88:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    4a8c:	54006874 	strpl	r6, [r0], #-2164	; 0xfffff78c
    4a90:	00575343 	subseq	r5, r7, r3, asr #6
    4a94:	57424364 	strbpl	r4, [r2, -r4, ror #6]
    4a98:	61746144 	cmnvs	r4, r4, asr #2
    4a9c:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    4aa0:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    4aa4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    4aa8:	55006874 	strpl	r6, [r0, #-2164]	; 0xfffff78c
    4aac:	75424253 	strbvc	r4, [r2, #-595]	; 0xfffffdad
    4ab0:	6e4f6b6c 	vmlsvs.f64	d22, d15, d28
    4ab4:	614d796c 	cmpvs	sp, ip, ror #18
    4ab8:	74537373 	ldrbvc	r7, [r3], #-883	; 0xfffffc8d
    4abc:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4ac0:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    4ac4:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    4ac8:	006b6565 	rsbeq	r6, fp, r5, ror #10
    4acc:	53435354 	movtpl	r5, #13140	; 0x3354
    4ad0:	71655249 	cmnvc	r5, r9, asr #4
    4ad4:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
    4ad8:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    4adc:	53490065 	movtpl	r0, #36965	; 0x9065
    4ae0:	7265564f 	rsbvc	r5, r5, #82837504	; 0x4f00000
    4ae4:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    4ae8:	6f725000 	svcvs	0x00725000
    4aec:	74637564 	strbtvc	r7, [r3], #-1380	; 0xfffffa9c
    4af0:	6e656449 	cdpvs	4, 6, cr6, cr5, cr9, {2}
    4af4:	69666974 	stmdbvs	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    4af8:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    4afc:	55006e6f 	strpl	r6, [r0, #-3695]	; 0xfffff191
    4b00:	75424253 	strbvc	r4, [r2, #-595]	; 0xfffffdad
    4b04:	6e4f6b6c 	vmlsvs.f64	d22, d15, d28
    4b08:	614d796c 	cmpvs	sp, ip, ror #18
    4b0c:	74537373 	ldrbvc	r7, [r3], #-883	; 0xfffffc8d
    4b10:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4b14:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    4b18:	57656369 	strbpl	r6, [r5, -r9, ror #6]!
    4b1c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    4b20:	53435300 	movtpl	r5, #13056	; 0x3300
    4b24:	61655249 	cmnvs	r5, r9, asr #4
    4b28:	53550064 	cmppl	r5, #100	; 0x64
    4b2c:	6c754242 	lfmvs	f4, 2, [r5], #-264	; 0xfffffef8
    4b30:	6c6e4f6b 	stclvs	15, cr4, [lr], #-428	; 0xfffffe54
    4b34:	73614d79 	cmnvc	r1, #7744	; 0x1e40
    4b38:	6f745373 	svcvs	0x00745373
    4b3c:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4b40:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    4b44:	6f436563 	svcvs	0x00436563
    4b48:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    4b4c:	43450064 	movtmi	r0, #20580	; 0x5064
    4b50:	6556414d 	ldrbvs	r4, [r6, #-333]	; 0xfffffeb3
    4b54:	6f697372 	svcvs	0x00697372
    4b58:	4364006e 	cmnmi	r4, #110	; 0x6e
    4b5c:	69535753 	ldmdbvs	r3, {r0, r1, r4, r6, r8, r9, sl, ip, lr}^
    4b60:	74616e67 	strbtvc	r6, [r1], #-3687	; 0xfffff199
    4b64:	00657275 	rsbeq	r7, r5, r5, ror r2
    4b68:	42425355 	submi	r5, r2, #1409286145	; 0x54000001
    4b6c:	4f6b6c75 	svcmi	0x006b6c75
    4b70:	4d796c6e 	ldclmi	12, cr6, [r9, #-440]!	; 0xfffffe48
    4b74:	53737361 	cmnpl	r3, #-2080374783	; 0x84000001
    4b78:	61726f74 	cmnvs	r2, r4, ror pc
    4b7c:	65446567 	strbvs	r6, [r4, #-1383]	; 0xfffffa99
    4b80:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4b84:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    4b88:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    4b8c:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    4b90:	76726573 			; <UNDEFINED> instruction: 0x76726573
    4b94:	00316465 	eorseq	r6, r1, r5, ror #8
    4b98:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    4b9c:	79654b65 	stmdbvc	r5!, {r0, r2, r5, r6, r8, r9, fp, lr}^
    4ba0:	63657053 	cmnvs	r5, #83	; 0x53
    4ba4:	63696669 	cmnvs	r9, #110100480	; 0x6900000
    4ba8:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
    4bac:	6c426e00 	mcrrvs	14, 0, r6, r2, cr0
    4bb0:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    4bb4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    4bb8:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    4bbc:	79546563 	ldmdbvc	r4, {r0, r1, r5, r6, r8, sl, sp, lr}^
    4bc0:	6f4d6570 	svcvs	0x004d6570
    4bc4:	69666964 	stmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    4bc8:	46007265 	strmi	r7, [r0], -r5, ror #4
    4bcc:	4d656c69 	stclmi	12, cr6, [r5, #-420]!	; 0xfffffe5c
    4bd0:	006b7261 	rsbeq	r7, fp, r1, ror #4
    4bd4:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0xfffffaae
    4bd8:	64656e72 	strbtvs	r6, [r5], #-3698	; 0xfffff18e
    4bdc:	69676f4c 	stmdbvs	r7!, {r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    4be0:	426c6163 	rsbmi	r6, ip, #-1073741800	; 0xc0000018
    4be4:	6b636f6c 	blvs	18e099c <mailbuffer+0x18a58ac>
    4be8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    4bec:	00737365 	rsbseq	r7, r3, r5, ror #6
    4bf0:	646f7250 	strbtvs	r7, [pc], #-592	; 4bf8 <_start-0x3408>
    4bf4:	52746375 	rsbspl	r6, r4, #-738197503	; 0xd4000001
    4bf8:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    4bfc:	4c6e6f69 	stclmi	15, cr6, [lr], #-420	; 0xfffffe5c
    4c00:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    4c04:	6c6c4100 	stfvse	f4, [ip], #-0
    4c08:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    4c0c:	4c6e6f69 	stclmi	15, cr6, [lr], #-420	; 0xfffffe5c
    4c10:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    4c14:	6f430068 	svcvs	0x00430068
    4c18:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    4c1c:	65705364 	ldrbvs	r5, [r0, #-868]!	; 0xfffffc9c
    4c20:	69666963 	stmdbvs	r6!, {r0, r1, r5, r6, r8, fp, sp, lr}^
    4c24:	666e4963 	strbtvs	r4, [lr], -r3, ror #18
    4c28:	616d726f 	cmnvs	sp, pc, ror #4
    4c2c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    4c30:	6e655300 	cdpvs	3, 6, cr5, cr5, cr0, {0}
    4c34:	654b6573 	strbvs	r6, [fp, #-1395]	; 0xfffffa8d
    4c38:	73750079 	cmnvc	r5, #121	; 0x79
    4c3c:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    4c40:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    4c44:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    4c48:	54006874 	strpl	r6, [r0], #-2164	; 0xfffff78c
    4c4c:	49534353 	ldmdbmi	r3, {r0, r1, r4, r6, r8, r9, lr}^
    4c50:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    4c54:	53747365 	cmnpl	r4, #-1811939327	; 0x94000001
    4c58:	65736e65 	ldrbvs	r6, [r3, #-3685]!	; 0xfffff19b
    4c5c:	70736552 	rsbsvc	r6, r3, r2, asr r5
    4c60:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
    4c64:	64007837 	strvs	r7, [r0], #-2103	; 0xfffff7c9
    4c68:	53425743 	movtpl	r5, #10051	; 0x2743
    4c6c:	616e6769 	cmnvs	lr, r9, ror #14
    4c70:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    4c74:	42436200 	submi	r6, r3, #0, 4
    4c78:	4c424357 	mcrrmi	3, 5, r4, r2, cr7
    4c7c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    4c80:	42430068 	submi	r0, r3, #104	; 0x68
    4c84:	00424357 	subeq	r4, r2, r7, asr r3
    4c88:	57534362 	ldrbpl	r4, [r3, -r2, ror #6]
    4c8c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    4c90:	6e007375 	mcrvs	3, 0, r7, cr0, cr5, {3}
    4c94:	42646d43 	rsbmi	r6, r4, #4288	; 0x10c0
    4c98:	654c6b6c 	strbvs	r6, [ip, #-2924]	; 0xfffff494
    4c9c:	6f4c006e 	svcvs	0x004c006e
    4ca0:	61636967 	cmnvs	r3, r7, ror #18
    4ca4:	696e556c 	stmdbvs	lr!, {r2, r3, r5, r6, r8, sl, ip, lr}^
    4ca8:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
    4cac:	45726562 	ldrbmi	r6, [r2, #-1378]!	; 0xfffffa9e
    4cb0:	00445056 	subeq	r5, r4, r6, asr r0
    4cb4:	42425355 	submi	r5, r2, #1409286145	; 0x54000001
    4cb8:	4f6b6c75 	svcmi	0x006b6c75
    4cbc:	4d796c6e 	ldclmi	12, cr6, [r9, #-440]!	; 0xfffffe48
    4cc0:	53737361 	cmnpl	r3, #-2080374783	; 0x84000001
    4cc4:	61726f74 	cmnvs	r2, r4, ror pc
    4cc8:	65446567 	strbvs	r6, [r4, #-1383]	; 0xfffffa99
    4ccc:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4cd0:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    4cd4:	63617061 	cmnvs	r1, #97	; 0x61
    4cd8:	00797469 	rsbseq	r7, r9, r9, ror #8
    4cdc:	42425355 	submi	r5, r2, #1409286145	; 0x54000001
    4ce0:	4f6b6c75 	svcmi	0x006b6c75
    4ce4:	4d796c6e 	ldclmi	12, cr6, [r9, #-440]!	; 0xfffffe48
    4ce8:	53737361 	cmnpl	r3, #-2080374783	; 0x84000001
    4cec:	61726f74 	cmnvs	r2, r4, ror pc
    4cf0:	65446567 	strbvs	r6, [r4, #-1383]	; 0xfffffa99
    4cf4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4cf8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    4cfc:	53540074 	cmppl	r4, #116	; 0x74
    4d00:	57495343 	strbpl	r5, [r9, -r3, asr #6]
    4d04:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    4d08:	6e003031 	mcrvs	0, 0, r3, cr0, cr1, {1}
    4d0c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    4d10:	6464416b 	strbtvs	r4, [r4], #-363	; 0xfffffe95
    4d14:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    4d18:	53435300 	movtpl	r5, #13056	; 0x3300
    4d1c:	69725749 	ldmdbvs	r2!, {r0, r3, r6, r8, r9, sl, ip, lr}^
    4d20:	46006574 			; <UNDEFINED> instruction: 0x46006574
    4d24:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    4d28:	6c706552 	cfldr64vs	mvdx6, [r0], #-328	; 0xfffffeb8
    4d2c:	61656361 	cmnvs	r5, r1, ror #6
    4d30:	55656c62 	strbpl	r6, [r5, #-3170]!	; 0xfffff39e
    4d34:	4374696e 	cmnmi	r4, #1802240	; 0x1b8000
    4d38:	0065646f 	rsbeq	r6, r5, pc, ror #8
    4d3c:	57424362 	strbpl	r4, [r2, -r2, ror #6]
    4d40:	004e554c 	subeq	r5, lr, ip, asr #10
    4d44:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    4d48:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    4d4c:	65446c61 	strbvs	r6, [r4, #-3169]	; 0xfffff39f
    4d50:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4d54:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    4d58:	42535500 	subsmi	r5, r3, #0, 10
    4d5c:	6b6c7542 	blvs	1b2226c <mailbuffer+0x1ae717c>
    4d60:	796c6e4f 	stmdbvc	ip!, {r0, r1, r2, r3, r6, r9, sl, fp, sp, lr}^
    4d64:	7373614d 	cmnvc	r3, #1073741843	; 0x40000013
    4d68:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    4d6c:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    4d70:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4d74:	79725465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, lr}^
    4d78:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    4d7c:	6f437000 	svcvs	0x00437000
    4d80:	6544666e 	strbvs	r6, [r4, #-1646]	; 0xfffff992
    4d84:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
    4d88:	6f707365 	svcvs	0x00707365
    4d8c:	4365736e 	cmnmi	r5, #-1207959551	; 0xb8000001
    4d90:	0065646f 	rsbeq	r6, r5, pc, ror #8
    4d94:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 4c84 <_start-0x337c>
    4d98:	64736d55 	ldrbtvs	r6, [r3], #-3413	; 0xfffff2ab
    4d9c:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
    4da0:	6f697469 	svcvs	0x00697469
    4da4:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
    4da8:	65736e65 	ldrbvs	r6, [r3, #-3685]!	; 0xfffff19b
    4dac:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    4db0:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    4db4:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
    4db8:	53540072 	cmppl	r4, #114	; 0x72
    4dbc:	52495343 	subpl	r5, r9, #201326593	; 0xc000001
    4dc0:	31646165 	cmncc	r4, r5, ror #2
    4dc4:	43640030 	cmnmi	r4, #48	; 0x30
    4dc8:	61544257 	cmpvs	r4, r7, asr r2
    4dcc:	65530067 	ldrbvs	r0, [r3, #-103]	; 0xffffff99
    4dd0:	4b65736e 	blmi	1961b90 <mailbuffer+0x1926aa0>
    4dd4:	70537965 	subsvc	r7, r3, r5, ror #18
    4dd8:	66696365 	strbtvs	r6, [r9], -r5, ror #6
    4ddc:	6f4c6369 	svcvs	0x004c6369
    4de0:	704f0077 	subvc	r0, pc, r7, ror r0	; <UNPREDICTABLE>
    4de4:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    4de8:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    4dec:	0065646f 	rsbeq	r6, r5, pc, ror #8
    4df0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    4df4:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    4df8:	75516c61 	ldrbvc	r6, [r1, #-3169]	; 0xfffff39f
    4dfc:	66696c61 	strbtvs	r6, [r9], -r1, ror #24
    4e00:	00726569 	rsbseq	r6, r2, r9, ror #10
    4e04:	53435354 	movtpl	r5, #13140	; 0x3354
    4e08:	716e4949 	cmnvc	lr, r9, asr #18
    4e0c:	79726975 	ldmdbvc	r2!, {r0, r2, r4, r5, r6, r8, fp, sp, lr}^
    4e10:	70736552 	rsbsvc	r6, r3, r2, asr r5
    4e14:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
    4e18:	534b5300 	movtpl	r5, #45824	; 0xb300
    4e1c:	43640056 	cmnmi	r4, #86	; 0x56
    4e20:	61445753 	cmpvs	r4, r3, asr r7
    4e24:	65526174 	ldrbvs	r6, [r2, #-372]	; 0xfffffe8c
    4e28:	75646973 	strbvc	r6, [r4, #-2419]!	; 0xfffff68d
    4e2c:	65440065 	strbvs	r0, [r4, #-101]	; 0xffffff9b
    4e30:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    4e34:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    4e38:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
    4e3c:	41007461 	tstmi	r0, r1, ror #8
    4e40:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
    4e44:	616e6f69 	cmnvs	lr, r9, ror #30
    4e48:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    4e4c:	6f436573 	svcvs	0x00436573
    4e50:	4f006564 	svcmi	0x00006564
    4e54:	6c6f7362 	stclvs	3, cr7, [pc], #-392	; 4cd4 <_start-0x332c>
    4e58:	00657465 	rsbeq	r7, r5, r5, ror #8
    4e5c:	74726150 	ldrbtvc	r6, [r2], #-336	; 0xfffffeb0
    4e60:	4d6c6169 	stfmie	f6, [ip, #-420]!	; 0xfffffe5c
    4e64:	75696465 	strbvc	r6, [r9, #-1125]!	; 0xfffffb9b
    4e68:	646e496d 	strbtvs	r4, [lr], #-2413	; 0xfffff693
    4e6c:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    4e70:	2f00726f 	svccs	0x0000726f
    4e74:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4e78:	6f6a6c2f 	svcvs	0x006a6c2f
    4e7c:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    4e80:	442f7275 	strtmi	r7, [pc], #-629	; 4e88 <_start-0x3178>
    4e84:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4e88:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    4e8c:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    4e90:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    4e94:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4e98:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    4e9c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    4ea0:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    4ea4:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    4ea8:	442f7265 	strtmi	r7, [pc], #-613	; 4eb0 <_start-0x3150>
    4eac:	2f6f6d65 	svccs	0x006f6d65
    4eb0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    4eb4:	2f737265 	svccs	0x00737265
    4eb8:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    4ebc:	2f343135 	svccs	0x00343135
    4ec0:	2f62696c 	svccs	0x0062696c
    4ec4:	6d627375 	stclvs	3, cr7, [r2, #-468]!	; 0xfffffe2c
    4ec8:	64737361 	ldrbtvs	r7, [r3], #-865	; 0xfffffc9f
    4ecc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4ed0:	00632e65 	rsbeq	r2, r3, r5, ror #28
    4ed4:	42425355 	submi	r5, r2, #1409286145	; 0x54000001
    4ed8:	4f6b6c75 	svcmi	0x006b6c75
    4edc:	4d796c6e 	ldclmi	12, cr6, [r9, #-440]!	; 0xfffffe48
    4ee0:	53737361 	cmnpl	r3, #-2080374783	; 0x84000001
    4ee4:	61726f74 	cmnvs	r2, r4, ror pc
    4ee8:	65446567 	strbvs	r6, [r4, #-1383]	; 0xfffffa99
    4eec:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4ef0:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    4ef4:	42535500 	subsmi	r5, r3, #0, 10
    4ef8:	6b6c7542 	blvs	1b22408 <mailbuffer+0x1ae7318>
    4efc:	796c6e4f 	stmdbvc	ip!, {r0, r1, r2, r3, r6, r9, sl, fp, sp, lr}^
    4f00:	7373614d 	cmnvc	r3, #1073741843	; 0x40000013
    4f04:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    4f08:	44656761 	strbtmi	r6, [r5], #-1889	; 0xfffff89f
    4f0c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4f10:	79725465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, lr}^
    4f14:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    4f18:	53540065 	cmppl	r4, #101	; 0x65
    4f1c:	54495343 	strbpl	r5, [r9], #-835	; 0xfffffcbd
    4f20:	55747365 	ldrbpl	r7, [r4, #-869]!	; 0xfffffc9b
    4f24:	5274696e 	rsbspl	r6, r4, #1802240	; 0x1b8000
    4f28:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    4f2c:	67615000 	strbvs	r5, [r1, -r0]!
    4f30:	646f4365 	strbtvs	r4, [pc], #-869	; 4f38 <_start-0x30c8>
    4f34:	43540065 	cmpmi	r4, #101	; 0x65
    4f38:	56005742 	strpl	r5, [r0], -r2, asr #14
    4f3c:	6f646e65 	svcvs	0x00646e65
    4f40:	65644972 	strbvs	r4, [r4, #-2418]!	; 0xfffff68e
    4f44:	6669746e 	strbtvs	r7, [r9], -lr, ror #8
    4f48:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    4f4c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    4f50:	53435354 	movtpl	r5, #13140	; 0x3354
    4f54:	61655249 	cmnvs	r5, r9, asr #4
    4f58:	70614364 	rsbvc	r4, r1, r4, ror #6
    4f5c:	74696361 	strbtvc	r6, [r9], #-865	; 0xfffffc9f
    4f60:	73655279 	cmnvc	r5, #-1879048185	; 0x90000007
    4f64:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
    4f68:	43640065 	cmnmi	r4, #101	; 0x65
    4f6c:	61545753 	cmpvs	r4, r3, asr r7
    4f70:	43530067 	cmpmi	r3, #103	; 0x67
    4f74:	65524953 	ldrbvs	r4, [r2, #-2387]	; 0xfffff6ad
    4f78:	61436461 	cmpvs	r3, r1, ror #8
    4f7c:	69636170 	stmdbvs	r3!, {r4, r5, r6, r8, sp, lr}^
    4f80:	53007974 	movwpl	r7, #2420	; 0x974
    4f84:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    4f88:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    4f8c:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4f90:	696c7053 	stmdbvs	ip!, {r0, r1, r4, r6, ip, sp, lr}^
    4f94:	69614674 	stmdbvs	r1!, {r2, r4, r5, r6, r9, sl, lr}^
    4f98:	0064656c 	rsbeq	r6, r4, ip, ror #10
    4f9c:	73614270 	cmnvc	r1, #112, 4
    4fa0:	57440065 	strbpl	r0, [r4, -r5, rrx]
    4fa4:	46494348 	strbmi	r4, [r9], -r8, asr #6
    4fa8:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    4fac:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    4fb0:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    4fb4:	6e6f4e72 	mcrvs	14, 3, r4, cr15, cr2, {3}
    4fb8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    4fbc:	6369646f 	cmnvs	r9, #1862270976	; 0x6f000000
    4fc0:	644f7349 	strbvs	r7, [pc], #-841	; 4fc8 <_start-0x3038>
    4fc4:	61724664 	cmnvs	r2, r4, ror #12
    4fc8:	4400656d 	strmi	r6, [r0], #-1389	; 0xfffffa93
    4fcc:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    4fd0:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
    4fd4:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    4fd8:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    4fdc:	6f4e7265 	svcvs	0x004e7265
    4fe0:	7265506e 	rsbvc	r5, r5, #110	; 0x6e
    4fe4:	69646f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4fe8:	69615763 	stmdbvs	r1!, {r0, r1, r5, r6, r8, r9, sl, ip, lr}^
    4fec:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
    4ff0:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
    4ff4:	74530065 	ldrbvc	r0, [r3], #-101	; 0xffffff9b
    4ff8:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    4ffc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    5000:	696c7053 	stmdbvs	ip!, {r0, r1, r4, r6, ip, sp, lr}^
    5004:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 4e3c <_start-0x31c4>
    5008:	74656c70 	strbtvc	r6, [r5], #-3184	; 0xfffff390
    500c:	74530065 	ldrbvc	r0, [r3], #-101	; 0xffffff9b
    5010:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    5014:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    5018:	53657465 	cmnpl	r5, #1694498816	; 0x65000000
    501c:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    5020:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    5024:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    5028:	48574400 	ldmdami	r7, {sl, lr}^
    502c:	72464943 	subvc	r4, r6, #1097728	; 0x10c000
    5030:	53656d61 	cmnpl	r5, #6208	; 0x1840
    5034:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    5038:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    503c:	506e6f4e 	rsbpl	r6, lr, lr, asr #30
    5040:	6f697265 	svcvs	0x00697265
    5044:	43636964 	cmnmi	r3, #100, 18	; 0x190000
    5048:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    504c:	53657465 	cmnpl	r5, #1694498816	; 0x65000000
    5050:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    5054:	61745300 	cmnvs	r4, r0, lsl #6
    5058:	6f436574 	svcvs	0x00436574
    505c:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    5060:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0xfffffa8c
    5064:	00797274 	rsbseq	r7, r9, r4, ror r2
    5068:	43485744 	movtmi	r5, #34628	; 0x8744
    506c:	61724649 	cmnvs	r2, r9, asr #12
    5070:	6353656d 	cmpvs	r3, #457179136	; 0x1b400000
    5074:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
    5078:	4e72656c 	cdpmi	5, 7, cr6, cr2, cr12, {3}
    507c:	65506e6f 	ldrbvs	r6, [r0, #-3695]	; 0xfffff191
    5080:	646f6972 	strbtvs	r6, [pc], #-2418	; 5088 <_start-0x2f78>
    5084:	74536369 	ldrbvc	r6, [r3], #-873	; 0xfffffc97
    5088:	53747261 	cmnpl	r4, #268435462	; 0x10000006
    508c:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    5090:	57445f00 	strbpl	r5, [r4, -r0, lsl #30]
    5094:	46494348 	strbmi	r4, [r9], -r8, asr #6
    5098:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    509c:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    50a0:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    50a4:	6e6f4e72 	mcrvs	14, 3, r4, cr15, cr2, {3}
    50a8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    50ac:	6369646f 	cmnvs	r9, #1862270976	; 0x6f000000
    50b0:	48574400 	ldmdami	r7, {sl, lr}^
    50b4:	72464943 	subvc	r4, r6, #1097728	; 0x10c000
    50b8:	53656d61 	cmnpl	r5, #6208	; 0x1840
    50bc:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    50c0:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    50c4:	506e6f4e 	rsbpl	r6, lr, lr, asr #30
    50c8:	6f697265 	svcvs	0x00697265
    50cc:	54636964 	strbtpl	r6, [r3], #-2404	; 0xfffff69c
    50d0:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    50d4:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    50d8:	6f436e6f 	svcvs	0x00436e6f
    50dc:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    50e0:	2f006574 	svccs	0x00006574
    50e4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    50e8:	6f6a6c2f 	svcvs	0x006a6c2f
    50ec:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    50f0:	442f7275 	strtmi	r7, [pc], #-629	; 50f8 <_start-0x2f08>
    50f4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    50f8:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    50fc:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    5100:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    5104:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5108:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    510c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    5110:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    5114:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    5118:	442f7265 	strtmi	r7, [pc], #-613	; 5120 <_start-0x2ee0>
    511c:	2f6f6d65 	svccs	0x006f6d65
    5120:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    5124:	2f737265 	svccs	0x00737265
    5128:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    512c:	2f343135 	svccs	0x00343135
    5130:	2f62696c 	svccs	0x0062696c
    5134:	63687764 	cmnvs	r8, #100, 14	; 0x1900000
    5138:	61726669 	cmnvs	r2, r9, ror #12
    513c:	6373656d 	cmnvs	r3, #457179136	; 0x1b400000
    5140:	6e646568 	cdpvs	5, 6, cr6, cr4, cr8, {3}
    5144:	2e726570 	mrccs	5, 3, r6, cr2, cr0, {3}
    5148:	72460063 	subvc	r0, r6, #99	; 0x63
    514c:	4e656d61 	cdpmi	13, 6, cr6, cr5, cr1, {3}
    5150:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    5154:	57440072 	smlsldxpl	r0, r4, r2, r0
    5158:	46494348 	strbmi	r4, [r9], -r8, asr #6
    515c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    5160:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    5164:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    5168:	72655072 	rsbvc	r5, r5, #114	; 0x72
    516c:	69646f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    5170:	61745363 	cmnvs	r4, r3, ror #6
    5174:	70537472 	subsvc	r7, r3, r2, ror r4
    5178:	0074696c 	rsbseq	r6, r4, ip, ror #18
    517c:	43485744 	movtmi	r5, #34628	; 0x8744
    5180:	61724649 	cmnvs	r2, r9, asr #12
    5184:	6353656d 	cmpvs	r3, #457179136	; 0x1b400000
    5188:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
    518c:	5072656c 	rsbspl	r6, r2, ip, ror #10
    5190:	6f697265 	svcvs	0x00697265
    5194:	54636964 	strbtpl	r6, [r3], #-2404	; 0xfffff69c
    5198:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    519c:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    51a0:	6f436e6f 	svcvs	0x00436e6f
    51a4:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    51a8:	44006574 	strmi	r6, [r0], #-1396	; 0xfffffa8c
    51ac:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    51b0:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
    51b4:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    51b8:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    51bc:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
    51c0:	646f6972 	strbtvs	r6, [pc], #-2418	; 51c8 <_start-0x2e38>
    51c4:	6f436369 	svcvs	0x00436369
    51c8:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    51cc:	70536574 	subsvc	r6, r3, r4, ror r5
    51d0:	0074696c 	rsbseq	r6, r4, ip, ror #18
    51d4:	4857445f 	ldmdami	r7, {r0, r1, r2, r3, r4, r6, sl, lr}^
    51d8:	72464943 	subvc	r4, r6, #1097728	; 0x10c000
    51dc:	53656d61 	cmnpl	r5, #6208	; 0x1840
    51e0:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    51e4:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    51e8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    51ec:	6369646f 	cmnvs	r9, #1862270976	; 0x6f000000
    51f0:	6f682f00 	svcvs	0x00682f00
    51f4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 5048 <_start-0x2fb8>
    51f8:	61736f6a 	cmnvs	r3, sl, ror #30
    51fc:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    5200:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5204:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5208:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    520c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    5210:	72656270 	rsbvc	r6, r5, #112, 4
    5214:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5218:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    521c:	4f545265 	svcmi	0x00545265
    5220:	616d2d53 	cmnvs	sp, r3, asr sp
    5224:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    5228:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    522c:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    5230:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5234:	616c2f73 	smcvs	49907	; 0xc2f3
    5238:	3135396e 	teqcc	r5, lr, ror #18
    523c:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    5240:	77642f62 	strbvc	r2, [r4, -r2, ror #30]!
    5244:	66696368 	strbtvs	r6, [r9], -r8, ror #6
    5248:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    524c:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    5250:	72657064 	rsbvc	r7, r5, #100	; 0x64
    5254:	4400632e 	strmi	r6, [r0], #-814	; 0xfffffcd2
    5258:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    525c:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
    5260:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    5264:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    5268:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
    526c:	646f6972 	strbtvs	r6, [pc], #-2418	; 5274 <_start-0x2d8c>
    5270:	73496369 	movtvc	r6, #37737	; 0x9369
    5274:	4664644f 	strbtmi	r6, [r4], -pc, asr #8
    5278:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    527c:	48574400 	ldmdami	r7, {sl, lr}^
    5280:	72464943 	subvc	r4, r6, #1097728	; 0x10c000
    5284:	53656d61 	cmnpl	r5, #6208	; 0x1840
    5288:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    528c:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    5290:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    5294:	6369646f 	cmnvs	r9, #1862270976	; 0x6f000000
    5298:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    529c:	46726f46 	ldrbtmi	r6, [r2], -r6, asr #30
    52a0:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    52a4:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    52a8:	5370614d 	cmnpl	r0, #1073741843	; 0x40000013
    52ac:	6e457465 	cdpvs	4, 4, cr7, cr5, cr5, {3}
    52b0:	00797274 	rsbseq	r7, r9, r4, ror r2
    52b4:	676f4c6e 	strbvs	r4, [pc, -lr, ror #24]!
    52b8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    52bc:	6d726f4e 	ldclvs	15, cr6, [r2, #-312]!	; 0xfffffec8
    52c0:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
    52c4:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    52c8:	64747568 	ldrbtvs	r7, [r4], #-1384	; 0xfffffa98
    52cc:	006e776f 	rsbeq	r7, lr, pc, ror #14
    52d0:	676f4c6e 	strbvs	r4, [pc, -lr, ror #24]!
    52d4:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    52d8:	68506e00 	ldmdavs	r0, {r9, sl, fp, sp, lr}^
    52dc:	646f4379 	strbtvs	r4, [pc], #-889	; 52e4 <_start-0x2d1c>
    52e0:	63410065 	movtvs	r0, #4197	; 0x1065
    52e4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    52e8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    52ec:	6f437463 	svcvs	0x00437463
    52f0:	6c6f736e 	stclvs	3, cr7, [pc], #-440	; 5140 <_start-0x2ec0>
    52f4:	73003565 	movwvc	r3, #1381	; 0x565
    52f8:	6665445f 			; <UNDEFINED> instruction: 0x6665445f
    52fc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5300:	0070614d 	rsbseq	r6, r0, sp, asr #2
    5304:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    5308:	65536e6f 	ldrbvs	r6, [r3, #-3695]	; 0xfffff191
    530c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    5310:	736e6f43 	cmnvc	lr, #268	; 0x10c
    5314:	31656c6f 	cmncc	r5, pc, ror #24
    5318:	654b0031 	strbvs	r0, [fp, #-49]	; 0xffffffcf
    531c:	70614d79 	rsbvc	r4, r1, r9, ror sp
    5320:	4c746547 	cfldr64mi	mvdx6, [r4], #-284	; 0xfffffee4
    5324:	74534445 	ldrbvc	r4, [r3], #-1093	; 0xfffffbbb
    5328:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    532c:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
    5330:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    5334:	63656c65 	cmnvs	r5, #25856	; 0x6500
    5338:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    533c:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
    5340:	63410031 	movtvs	r0, #4145	; 0x1031
    5344:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    5348:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    534c:	6f437463 	svcvs	0x00437463
    5350:	6c6f736e 	stclvs	3, cr7, [pc], #-440	; 51a0 <_start-0x2e60>
    5354:	41003265 	tstmi	r0, r5, ror #4
    5358:	6f697463 	svcvs	0x00697463
    535c:	6c65536e 	stclvs	3, cr5, [r5], #-440	; 0xfffffe48
    5360:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    5364:	6f736e6f 	svcvs	0x00736e6f
    5368:	0033656c 	eorseq	r6, r3, ip, ror #10
    536c:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    5370:	65536e6f 	ldrbvs	r6, [r3, #-3695]	; 0xfffff191
    5374:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    5378:	736e6f43 	cmnvc	lr, #268	; 0x10c
    537c:	34656c6f 	strbtcc	r6, [r5], #-3183	; 0xfffff391
    5380:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
    5384:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    5388:	63656c65 	cmnvs	r5, #25856	; 0x6500
    538c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    5390:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
    5394:	41003031 	tstmi	r0, r1, lsr r0
    5398:	6f697463 	svcvs	0x00697463
    539c:	6c65536e 	stclvs	3, cr5, [r5], #-440	; 0xfffffe48
    53a0:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    53a4:	6f736e6f 	svcvs	0x00736e6f
    53a8:	3231656c 	eorscc	r6, r1, #108, 10	; 0x1b000000
    53ac:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
    53b0:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    53b4:	63656c65 	cmnvs	r5, #25856	; 0x6500
    53b8:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    53bc:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
    53c0:	63410036 	movtvs	r0, #4150	; 0x1036
    53c4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    53c8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    53cc:	6f437463 	svcvs	0x00437463
    53d0:	6c6f736e 	stclvs	3, cr7, [pc], #-440	; 5220 <_start-0x2de0>
    53d4:	41003765 	tstmi	r0, r5, ror #14
    53d8:	6f697463 	svcvs	0x00697463
    53dc:	6c65536e 	stclvs	3, cr5, [r5], #-440	; 0xfffffe48
    53e0:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    53e4:	6f736e6f 	svcvs	0x00736e6f
    53e8:	0038656c 	eorseq	r6, r8, ip, ror #10
    53ec:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    53f0:	65536e6f 	ldrbvs	r6, [r3, #-3695]	; 0xfffff191
    53f4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    53f8:	736e6f43 	cmnvc	lr, #268	; 0x10c
    53fc:	39656c6f 	stmdbcc	r5!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    5400:	654b6e00 	strbvs	r6, [fp, #-3584]	; 0xfffff200
    5404:	646f4379 	strbtvs	r4, [pc], #-889	; 540c <_start-0x2bf4>
    5408:	4d6e0065 	stclmi	0, cr0, [lr, #-404]!	; 0xfffffe6c
    540c:	6669646f 	strbtvs	r6, [r9], -pc, ror #8
    5410:	73726569 	cmnvc	r2, #440401920	; 0x1a400000
    5414:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
    5418:	4e6e6f69 	cdpmi	15, 6, cr6, cr14, cr9, {3}
    541c:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    5420:	654b5f73 	strbvs	r5, [fp, #-3955]	; 0xfffff08d
    5424:	72745379 	rsbsvc	r5, r4, #-469762047	; 0xe4000001
    5428:	73676e69 	cmnvc	r7, #1680	; 0x690
    542c:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
    5430:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    5434:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    5438:	70614368 	rsbvc	r4, r1, r8, ror #6
    543c:	636f4c73 	cmnvs	pc, #29440	; 0x7300
    5440:	654b006b 	strbvs	r0, [fp, #-107]	; 0xffffff95
    5444:	70614d79 	rsbvc	r4, r1, r9, ror sp
    5448:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    544c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    5450:	546e0067 	strbtpl	r0, [lr], #-103	; 0xffffff99
    5454:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    5458:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
    545c:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    5460:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    5464:	6d754e68 	ldclvs	14, cr4, [r5, #-416]!	; 0xfffffe60
    5468:	6b636f4c 	blvs	18e11a0 <mailbuffer+0x18a60b0>
    546c:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    5470:	5470614d 	ldrbtpl	r6, [r0], #-333	; 0xfffffeb3
    5474:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    5478:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
    547c:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    5480:	4370614d 	cmnmi	r0, #1073741843	; 0x40000013
    5484:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    5488:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    548c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    5490:	2f656d6f 	svccs	0x00656d6f
    5494:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    5498:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    549c:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    54a0:	6f746b73 	svcvs	0x00746b73
    54a4:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    54a8:	61522f69 	cmpvs	r2, r9, ror #30
    54ac:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    54b0:	50797272 	rsbspl	r7, r9, r2, ror r2
    54b4:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    54b8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    54bc:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    54c0:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    54c4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    54c8:	442f6f6d 	strtmi	r6, [pc], #-3949	; 54d0 <_start-0x2b30>
    54cc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    54d0:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 5310 <_start-0x2cf0>
    54d4:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    54d8:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 541c <_start-0x2be4>
    54dc:	6b2f6269 	blvs	bdde88 <mailbuffer+0xba2d98>
    54e0:	616d7965 	cmnvs	sp, r5, ror #18
    54e4:	00632e70 	rsbeq	r2, r3, r0, ror lr
    54e8:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    54ec:	77536e6f 	ldrbvc	r6, [r3, -pc, ror #28]
    54f0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    54f4:	6f726353 	svcvs	0x00726353
    54f8:	6f4c6c6c 	svcvs	0x004c6c6c
    54fc:	5f006b63 	svcpl	0x00006b63
    5500:	42535543 	subsmi	r5, r3, #281018368	; 0x10c00000
    5504:	6279654b 	rsbsvs	r6, r9, #314572800	; 0x12c00000
    5508:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
    550c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    5510:	75006563 	strvc	r6, [r0, #-1379]	; 0xfffffa9d
    5514:	79654b63 	stmdbvc	r5!, {r0, r1, r5, r6, r8, r9, fp, lr}^
    5518:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    551c:	42535500 	subsmi	r5, r3, #0, 10
    5520:	6279654b 	rsbsvs	r6, r9, #314572800	; 0x12c00000
    5524:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
    5528:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    552c:	74536563 	ldrbvc	r6, [r3], #-1379	; 0xfffffa9d
    5530:	52747261 	rsbspl	r7, r4, #268435462	; 0x10000006
    5534:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    5538:	55007473 	strpl	r7, [r0, #-1139]	; 0xfffffb8d
    553c:	654b4253 	strbvs	r4, [fp, #-595]	; 0xfffffdad
    5540:	616f6279 	smcvs	63017	; 0xf629
    5544:	65446472 	strbvs	r6, [r4, #-1138]	; 0xfffffb8e
    5548:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    554c:	4b746547 	blmi	1d1ea70 <mailbuffer+0x1ce3980>
    5550:	6f437965 	svcvs	0x00437965
    5554:	75006564 	strvc	r6, [r0, #-1380]	; 0xfffffa9c
    5558:	676f4c63 	strbvs	r4, [pc, -r3, ror #24]!
    555c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    5560:	42535500 	subsmi	r5, r3, #0, 10
    5564:	6279654b 	rsbsvs	r6, r9, #314572800	; 0x12c00000
    5568:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
    556c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    5570:	65526563 	ldrbvs	r6, [r2, #-1379]	; 0xfffffa9d
    5574:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    5578:	68537265 	ldmdavs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
    557c:	6f647475 	svcvs	0x00647475
    5580:	61486e77 	hvcvs	34535	; 0x86e7
    5584:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    5588:	72460072 	subvc	r0, r6, #114	; 0x72
    558c:	53556d6f 	cmppl	r5, #7104	; 0x1bc0
    5590:	64624b42 	strbtvs	r4, [r2], #-2882	; 0xfffff4be
    5594:	42535500 	subsmi	r5, r3, #0, 10
    5598:	6279654b 	rsbsvs	r6, r9, #314572800	; 0x12c00000
    559c:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
    55a0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    55a4:	65526563 	ldrbvs	r6, [r2, #-1379]	; 0xfffffa9d
    55a8:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    55ac:	654b7265 	strbvs	r7, [fp, #-613]	; 0xfffffd9b
    55b0:	61745379 	cmnvs	r4, r9, ror r3
    55b4:	48737574 	ldmdami	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
    55b8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    55bc:	61527265 	cmpvs	r2, r5, ror #4
    55c0:	4b700077 	blmi	1c057a4 <mailbuffer+0x1bca6b4>
    55c4:	74537965 	ldrbvc	r7, [r3], #-2405	; 0xfffff69b
    55c8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    55cc:	42535500 	subsmi	r5, r3, #0, 10
    55d0:	6279654b 	rsbsvs	r6, r9, #314572800	; 0x12c00000
    55d4:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
    55d8:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    55dc:	6f436563 	svcvs	0x00436563
    55e0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    55e4:	00657275 	rsbeq	r7, r5, r5, ror r2
    55e8:	4b425355 	blmi	109a344 <mailbuffer+0x105f254>
    55ec:	6f627965 	svcvs	0x00627965
    55f0:	44647261 	strbtmi	r7, [r4], #-609	; 0xfffffd9f
    55f4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    55f8:	67655265 	strbvs	r5, [r5, -r5, ror #4]!
    55fc:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    5600:	6c655372 	stclvs	3, cr5, [r5], #-456	; 0xfffffe38
    5604:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    5608:	6f736e6f 	svcvs	0x00736e6f
    560c:	6148656c 	cmpvs	r8, ip, ror #10
    5610:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    5614:	63750072 	cmnvs	r5, #114	; 0x72
    5618:	43796850 	cmnmi	r9, #80, 16	; 0x500000
    561c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    5620:	4b425355 	blmi	109a37c <mailbuffer+0x105f28c>
    5624:	6f627965 	svcvs	0x00627965
    5628:	44647261 	strbtmi	r7, [r4], #-609	; 0xfffffd9f
    562c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    5630:	67655265 	strbvs	r5, [r5, -r5, ror #4]!
    5634:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    5638:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    563c:	73657250 	cmnvc	r5, #80, 4
    5640:	48646573 	stmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    5644:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    5648:	6e007265 	cdpvs	2, 0, cr7, cr0, cr5, {3}
    564c:	736e6f43 	cmnvc	lr, #268	; 0x10c
    5650:	00656c6f 	rsbeq	r6, r5, pc, ror #24
    5654:	4b425355 	blmi	109a3b0 <mailbuffer+0x105f2c0>
    5658:	6f627965 	svcvs	0x00627965
    565c:	44647261 	strbtmi	r7, [r4], #-609	; 0xfffffd9f
    5660:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    5664:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    5668:	69646f4d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    566c:	72656966 	rsbvc	r6, r5, #1671168	; 0x198000
    5670:	63750073 	cmnvs	r5, #115	; 0x73
    5674:	69646f4d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    5678:	72656966 	rsbvc	r6, r5, #1671168	; 0x198000
    567c:	53550073 	cmppl	r5, #115	; 0x73
    5680:	79654b42 	stmdbvc	r5!, {r1, r6, r8, r9, fp, lr}^
    5684:	72616f62 	rsbvc	r6, r1, #392	; 0x188
    5688:	76654464 	strbtvc	r4, [r5], -r4, ror #8
    568c:	47656369 	strbmi	r6, [r5, -r9, ror #6]!
    5690:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    5694:	4b657461 	blmi	1962820 <mailbuffer+0x1927730>
    5698:	76457965 	strbvc	r7, [r5], -r5, ror #18
    569c:	00746e65 	rsbseq	r6, r4, r5, ror #28
    56a0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 55ec <_start-0x2a14>
    56a4:	6a6c2f65 	bvs	1b11440 <mailbuffer+0x1ad6350>
    56a8:	6c61736f 	stclvs	3, cr7, [r1], #-444	; 0xfffffe44
    56ac:	2f727566 	svccs	0x00727566
    56b0:	6b736544 	blvs	1cdebc8 <mailbuffer+0x1ca3ad8>
    56b4:	2f706f74 	svccs	0x00706f74
    56b8:	2f697072 	svccs	0x00697072
    56bc:	70736152 	rsbsvc	r6, r3, r2, asr r1
    56c0:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    56c4:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    56c8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    56cc:	534f5452 	movtpl	r5, #62546	; 0xf452
    56d0:	73616d2d 	cmnvc	r1, #2880	; 0xb40
    56d4:	2f726574 	svccs	0x00726574
    56d8:	6f6d6544 	svcvs	0x006d6544
    56dc:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    56e0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    56e4:	6e616c2f 	cdpvs	12, 6, cr6, cr1, cr15, {1}
    56e8:	34313539 	ldrtcc	r3, [r1], #-1337	; 0xfffffac7
    56ec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    56f0:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    56f4:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
    56f8:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
    56fc:	5500632e 	strpl	r6, [r0, #-814]	; 0xfffffcd2
    5700:	654b4253 	strbvs	r4, [fp, #-595]	; 0xfffffdad
    5704:	616f6279 	smcvs	63017	; 0xf629
    5708:	65446472 	strbvs	r6, [r4, #-1138]	; 0xfffffb8e
    570c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    5710:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    5714:	6974656c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sl, sp, lr}^
    5718:	6f526e6f 	svcvs	0x00526e6f
    571c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
    5720:	57440065 	strbpl	r0, [r4, -r5, rrx]
    5724:	52494348 	subpl	r4, r9, #72, 6	; 0x20000001
    5728:	50746f6f 	rsbspl	r6, r4, pc, ror #30
    572c:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    5730:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    5734:	7a696c61 	bvc	1a608c0 <mailbuffer+0x1a257d0>
    5738:	445f0065 	ldrbmi	r0, [pc], #-101	; 5740 <_start-0x28c0>
    573c:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    5740:	746f6f52 	strbtvc	r6, [pc], #-3922	; 5748 <_start-0x28b8>
    5744:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    5748:	6f682f00 	svcvs	0x00682f00
    574c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 55a0 <_start-0x2a60>
    5750:	61736f6a 	cmnvs	r3, sl, ror #30
    5754:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    5758:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    575c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5760:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    5764:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    5768:	72656270 	rsbvc	r6, r5, #112, 4
    576c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5770:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    5774:	4f545265 	svcmi	0x00545265
    5778:	616d2d53 	cmnvs	sp, r3, asr sp
    577c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    5780:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    5784:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    5788:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    578c:	616c2f73 	smcvs	49907	; 0xc2f3
    5790:	3135396e 	teqcc	r5, lr, ror #18
    5794:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    5798:	77642f62 	strbvc	r2, [r4, -r2, ror #30]!
    579c:	72696368 	rsbvc	r6, r9, #104, 6	; 0xa0000001
    57a0:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
    57a4:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
    57a8:	72460063 	subvc	r0, r6, #99	; 0x63
    57ac:	57446d6f 	strbpl	r6, [r4, -pc, ror #26]
    57b0:	52494348 	subpl	r4, r9, #72, 6	; 0x20000001
    57b4:	00746f6f 	rsbseq	r6, r4, pc, ror #30
    57b8:	4d425355 	stclmi	3, cr5, [r2, #-340]	; 0xfffffeac
    57bc:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
    57c0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    57c4:	6f436563 	svcvs	0x00436563
    57c8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    57cc:	00657275 	rsbeq	r7, r5, r5, ror r2
    57d0:	5355435f 	cmppl	r5, #2080374785	; 0x7c000001
    57d4:	756f4d42 	strbvc	r4, [pc, #-3394]!	; 4a9a <_start-0x3566>
    57d8:	65446573 	strbvs	r6, [r4, #-1395]	; 0xfffffa8d
    57dc:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    57e0:	6f682f00 	svcvs	0x00682f00
    57e4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 5638 <_start-0x29c8>
    57e8:	61736f6a 	cmnvs	r3, sl, ror #30
    57ec:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    57f0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    57f4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    57f8:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    57fc:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    5800:	72656270 	rsbvc	r6, r5, #112, 4
    5804:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5808:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    580c:	4f545265 	svcmi	0x00545265
    5810:	616d2d53 	cmnvs	sp, r3, asr sp
    5814:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    5818:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    581c:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    5820:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5824:	616c2f73 	smcvs	49907	; 0xc2f3
    5828:	3135396e 	teqcc	r5, lr, ror #18
    582c:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    5830:	73752f62 	cmnvc	r5, #392	; 0x188
    5834:	756f6d62 	strbvc	r6, [pc, #-3426]!	; 4ada <_start-0x3526>
    5838:	632e6573 	teqvs	lr, #482344960	; 0x1cc00000
    583c:	42535500 	subsmi	r5, r3, #0, 10
    5840:	73756f4d 	cmnvc	r5, #308	; 0x134
    5844:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    5848:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    584c:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    5850:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    5854:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    5858:	6e614873 	mcrvs	8, 3, r4, cr1, cr3, {3}
    585c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    5860:	42535500 	subsmi	r5, r3, #0, 10
    5864:	73756f4d 	cmnvc	r5, #308	; 0x134
    5868:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    586c:	43656369 	cmnmi	r5, #-1543503871	; 0xa4000001
    5870:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    5874:	6f697465 	svcvs	0x00697465
    5878:	756f526e 	strbvc	r5, [pc, #-622]!	; 5612 <_start-0x29ee>
    587c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
    5880:	42535500 	subsmi	r5, r3, #0, 10
    5884:	73756f4d 	cmnvc	r5, #308	; 0x134
    5888:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    588c:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    5890:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    5894:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    5898:	00747365 	rsbseq	r7, r4, r5, ror #6
    589c:	43485744 	movtmi	r5, #34628	; 0x8744
    58a0:	61724649 	cmnvs	r2, r9, asr #12
    58a4:	6353656d 	cmpvs	r3, #457179136	; 0x1b400000
    58a8:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
    58ac:	4e72656c 	cdpmi	5, 7, cr6, cr2, cr12, {3}
    58b0:	6c70536f 	ldclvs	3, cr5, [r0], #-444	; 0xfffffe44
    58b4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    58b8:	53747261 	cmnpl	r4, #268435462	; 0x10000006
    58bc:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    58c0:	6f682f00 	svcvs	0x00682f00
    58c4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 5718 <_start-0x28e8>
    58c8:	61736f6a 	cmnvs	r3, sl, ror #30
    58cc:	7275666c 	rsbsvc	r6, r5, #108, 12	; 0x6c00000
    58d0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    58d4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    58d8:	6970722f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r9, ip, sp, lr}^
    58dc:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    58e0:	72656270 	rsbvc	r6, r5, #112, 4
    58e4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    58e8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    58ec:	4f545265 	svcmi	0x00545265
    58f0:	616d2d53 	cmnvs	sp, r3, asr sp
    58f4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    58f8:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    58fc:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    5900:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5904:	616c2f73 	smcvs	49907	; 0xc2f3
    5908:	3135396e 	teqcc	r5, lr, ror #18
    590c:	696c2f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, sp}^
    5910:	77642f62 	strbvc	r2, [r4, -r2, ror #30]!
    5914:	66696368 	strbtvs	r6, [r9], -r8, ror #6
    5918:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    591c:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    5920:	70736e64 	rsbsvc	r6, r3, r4, ror #28
    5924:	2e74696c 	cdpcs	9, 7, cr6, cr4, cr12, {3}
    5928:	445f0063 	ldrbmi	r0, [pc], #-99	; 5930 <_start-0x26d0>
    592c:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    5930:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
    5934:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    5938:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    593c:	6f4e7265 	svcvs	0x004e7265
    5940:	696c7053 	stmdbvs	ip!, {r0, r1, r4, r6, ip, sp, lr}^
    5944:	57440074 	smlsldxpl	r0, r4, r4, r0
    5948:	46494348 	strbmi	r4, [r9], -r8, asr #6
    594c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    5950:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    5954:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    5958:	536f4e72 	cmnpl	pc, #1824	; 0x720
    595c:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    5960:	644f7349 	strbvs	r7, [pc], #-841	; 5968 <_start-0x2698>
    5964:	61724664 	cmnvs	r2, r4, ror #12
    5968:	4400656d 	strmi	r6, [r0], #-1389	; 0xfffffa93
    596c:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    5970:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
    5974:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    5978:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    597c:	6f4e7265 	svcvs	0x004e7265
    5980:	696c7053 	stmdbvs	ip!, {r0, r1, r4, r6, ip, sp, lr}^
    5984:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 57bc <_start-0x2844>
    5988:	74656c70 	strbtvc	r6, [r5], #-3184	; 0xfffff390
    598c:	6c705365 	ldclvs	3, cr5, [r0], #-404	; 0xfffffe6c
    5990:	44007469 	strmi	r7, [r0], #-1129	; 0xfffffb97
    5994:	49434857 	stmdbmi	r3, {r0, r1, r2, r4, r6, fp, lr}^
    5998:	6d617246 	sfmvs	f7, 2, [r1, #-280]!	; 0xfffffee8
    599c:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    59a0:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    59a4:	6f4e7265 	svcvs	0x004e7265
    59a8:	696c7053 	stmdbvs	ip!, {r0, r1, r4, r6, ip, sp, lr}^
    59ac:	61725474 	cmnvs	r2, r4, ror r4
    59b0:	6361736e 	cmnvs	r1, #-1207959551	; 0xb8000001
    59b4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    59b8:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    59bc:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    59c0:	48574400 	ldmdami	r7, {sl, lr}^
    59c4:	72464943 	subvc	r4, r6, #1097728	; 0x10c000
    59c8:	53656d61 	cmnpl	r5, #6208	; 0x1840
    59cc:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    59d0:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    59d4:	70536f4e 	subsvc	r6, r3, lr, asr #30
    59d8:	5774696c 	ldrbpl	r6, [r4, -ip, ror #18]!
    59dc:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    59e0:	7246726f 	subvc	r7, r6, #-268435450	; 0xf0000006
    59e4:	00656d61 	rsbeq	r6, r5, r1, ror #26
    59e8:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    59ec:	46006874 			; <UNDEFINED> instruction: 0x46006874
    59f0:	556d6f72 	strbpl	r6, [sp, #-3954]!	; 0xfffff08e
    59f4:	61504253 	cmpvs	r0, r3, asr r2
    59f8:	52620064 	rsbpl	r0, r2, #100	; 0x64
    59fc:	726f7065 	rsbvc	r7, pc, #101	; 0x65
    5a00:	73654474 	cmnvc	r5, #116, 8	; 0x74000000
    5a04:	70697263 	rsbvc	r7, r9, r3, ror #4
    5a08:	54726f74 	ldrbtpl	r6, [r2], #-3956	; 0xfffff08c
    5a0c:	00657079 	rsbeq	r7, r5, r9, ror r0
    5a10:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
    5a14:	42535500 	subsmi	r5, r3, #0, 10
    5a18:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
    5a1c:	44646150 	strbtmi	r6, [r4], #-336	; 0xfffffeb0
    5a20:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    5a24:	33535065 	cmpcc	r3, #101	; 0x65
    5a28:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    5a2c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    5a30:	74730065 	ldrbtvc	r0, [r3], #-101	; 0xffffff9b
    5a34:	00657461 	rsbeq	r7, r5, r1, ror #8
    5a38:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    5a3c:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    5a40:	73657200 	cmnvc	r5, #0, 4
    5a44:	00746c75 	rsbseq	r6, r4, r5, ror ip
    5a48:	61745370 	cmnvs	r4, r0, ror r3
    5a4c:	55006574 	strpl	r6, [r0, #-1396]	; 0xfffffa8c
    5a50:	61474253 	cmpvs	r7, r3, asr r2
    5a54:	6150656d 	cmpvs	r0, sp, ror #10
    5a58:	76654464 	strbtvc	r4, [r5], -r4, ror #8
    5a5c:	44656369 	strbtmi	r6, [r5], #-873	; 0xfffffc97
    5a60:	646f6365 	strbtvs	r6, [pc], #-869	; 5a68 <_start-0x2598>
    5a64:	70655265 	rsbvc	r5, r5, r5, ror #4
    5a68:	0074726f 	rsbseq	r7, r4, pc, ror #4
    5a6c:	47425355 	smlsldmi	r5, r2, r5, r3
    5a70:	50656d61 	rsbpl	r6, r5, r1, ror #26
    5a74:	65446461 	strbvs	r6, [r4, #-1121]	; 0xfffffb9f
    5a78:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    5a7c:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    5a80:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    5a84:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    5a88:	61487375 	hvcvs	34613	; 0x8735
    5a8c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    5a90:	69420072 	stmdbvs	r2, {r1, r4, r5, r6}^
    5a94:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
    5a98:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
    5a9c:	42006465 	andmi	r6, r0, #1694498816	; 0x65000000
    5aa0:	65477469 	strbvs	r7, [r7, #-1129]	; 0xfffffb97
    5aa4:	736e5574 	cmnvc	lr, #116, 10	; 0x1d000000
    5aa8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    5aac:	69730064 	ldmdbvs	r3!, {r2, r5, r6}^
    5ab0:	4700657a 	smlsdxmi	r0, sl, r5, r6
    5ab4:	50656d61 	rsbpl	r6, r5, r1, ror #26
    5ab8:	61486461 	cmpvs	r8, r1, ror #8
    5abc:	61470074 	hvcvs	28676	; 0x7004
    5ac0:	6150656d 	cmpvs	r0, sp, ror #10
    5ac4:	6d700064 	ldclvs	0, cr0, [r0, #-400]!	; 0xfffffe70
    5ac8:	55007861 	strpl	r7, [r0, #-2145]	; 0xfffff79f
    5acc:	61474253 	cmpvs	r7, r3, asr r2
    5ad0:	6150656d 	cmpvs	r0, sp, ror #10
    5ad4:	76654464 	strbtvc	r4, [r5], -r4, ror #8
    5ad8:	43656369 	cmnmi	r5, #-1543503871	; 0xa4000001
    5adc:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    5ae0:	6f697465 	svcvs	0x00697465
    5ae4:	756f526e 	strbvc	r5, [pc, #-622]!	; 587e <_start-0x2782>
    5ae8:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
    5aec:	6f436200 	svcvs	0x00436200
    5af0:	72746e75 	rsbsvc	r6, r4, #1872	; 0x750
    5af4:	646f4379 	strbtvs	r4, [pc], #-889	; 5afc <_start-0x2504>
    5af8:	53550065 	cmppl	r5, #101	; 0x65
    5afc:	6d614742 	stclvs	7, cr4, [r1, #-264]!	; 0xfffffef8
    5b00:	64615065 	strbtvs	r5, [r1], #-101	; 0xffffff9b
    5b04:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    5b08:	74536563 	ldrbvc	r6, [r3], #-1379	; 0xfffffa9d
    5b0c:	52747261 	rsbspl	r7, r4, #268435462	; 0x10000006
    5b10:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    5b14:	70007473 	andvc	r7, r0, r3, ror r4
    5b18:	006e696d 	rsbeq	r6, lr, sp, ror #18
    5b1c:	48646362 	stmdami	r4!, {r1, r5, r6, r8, r9, sp, lr}^
    5b20:	63004449 	movwvs	r4, #1097	; 0x449
    5b24:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    5b28:	49487000 	stmdbmi	r8, {ip, sp, lr}^
    5b2c:	73654444 	cmnvc	r5, #68, 8	; 0x44000000
    5b30:	4e620063 	cdpmi	0, 6, cr0, cr2, cr3, {3}
    5b34:	65446d75 	strbvs	r6, [r4, #-3445]	; 0xfffff28b
    5b38:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    5b3c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    5b40:	52770073 	rsbspl	r0, r7, #115	; 0x73
    5b44:	726f7065 	rsbvc	r7, pc, #101	; 0x65
    5b48:	73654474 	cmnvc	r5, #116, 8	; 0x74000000
    5b4c:	70697263 	rsbvc	r7, r9, r3, ror #4
    5b50:	4c726f74 	ldclmi	15, cr6, [r2], #-464	; 0xfffffe30
    5b54:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    5b58:	682f0068 	stmdavs	pc!, {r3, r5, r6}	; <UNPREDICTABLE>
    5b5c:	2f656d6f 	svccs	0x00656d6f
    5b60:	736f6a6c 	cmnvc	pc, #108, 20	; 0x6c000
    5b64:	75666c61 	strbvc	r6, [r6, #-3169]!	; 0xfffff39f
    5b68:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    5b6c:	6f746b73 	svcvs	0x00746b73
    5b70:	70722f70 	rsbsvc	r2, r2, r0, ror pc
    5b74:	61522f69 	cmpvs	r2, r9, ror #30
    5b78:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    5b7c:	50797272 	rsbspl	r7, r9, r2, ror r2
    5b80:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    5b84:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    5b88:	6d2d534f 	stcvs	3, cr5, [sp, #-316]!	; 0xfffffec4
    5b8c:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    5b90:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    5b94:	442f6f6d 	strtmi	r6, [pc], #-3949	; 5b9c <_start-0x2464>
    5b98:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5b9c:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 59dc <_start-0x2624>
    5ba0:	35396e61 	ldrcc	r6, [r9, #-3681]!	; 0xfffff19f
    5ba4:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 5ae8 <_start-0x2518>
    5ba8:	752f6269 	strvc	r6, [pc, #-617]!	; 5947 <_start-0x26b9>
    5bac:	61676273 	smcvs	30243	; 0x7623
    5bb0:	6170656d 	cmnvs	r0, sp, ror #10
    5bb4:	00632e64 	rsbeq	r2, r3, r4, ror #28
    5bb8:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
    5bbc:	41646150 	cmnmi	r4, r0, asr r1
    5bc0:	00736978 	rsbseq	r6, r3, r8, ror r9
    5bc4:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
    5bc8:	42646150 	rsbmi	r6, r4, #80, 2
    5bcc:	6f747475 	svcvs	0x00747475
    5bd0:	6d6c006e 	stclvs	0, cr0, [ip, #-440]!	; 0xfffffe48
    5bd4:	6c007861 	stcvs	8, cr7, [r0], {97}	; 0x61
    5bd8:	006e696d 	rsbeq	r6, lr, sp, ror #18
    5bdc:	42746962 	rsbsmi	r6, r4, #1605632	; 0x188000
    5be0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    5be4:	53550072 	cmppl	r5, #114	; 0x72
    5be8:	6d614742 	stclvs	7, cr4, [r1, #-264]!	; 0xfffffef8
    5bec:	64615065 	strbtvs	r5, [r1], #-101	; 0xffffff9b
    5bf0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    5bf4:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    5bf8:	70655274 	rsbvc	r5, r5, r4, ror r2
    5bfc:	0074726f 	rsbseq	r7, r4, pc, ror #4
    5c00:	5355435f 	cmppl	r5, #2080374785	; 0x7c000001
    5c04:	6d614742 	stclvs	7, cr4, [r1, #-264]!	; 0xfffffef8
    5c08:	64615065 	strbtvs	r5, [r1], #-101	; 0xffffff9b
    5c0c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    5c10:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    5c14:	48425355 	stmdami	r2, {r0, r2, r4, r6, r8, r9, ip, lr}^
    5c18:	65444449 	strbvs	r4, [r4, #-1097]	; 0xfffffbb7
    5c1c:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    5c20:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    5c24:	42535500 	subsmi	r5, r3, #0, 10
    5c28:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
    5c2c:	44646150 	strbtmi	r6, [r4], #-336	; 0xfffffeb0
    5c30:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    5c34:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    5c38:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
    5c3c:	73006572 	movwvc	r6, #1394	; 0x572
    5c40:	6557625f 	ldrbvs	r6, [r7, #-607]	; 0xfffffda1
    5c44:	6e456572 	mcrvs	5, 2, r6, cr5, cr2, {3}
    5c48:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    5c4c:	5f730064 	svcpl	0x00730064
    5c50:	6972436e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, lr}^
    5c54:	61636974 	smcvs	13972	; 0x3694
    5c58:	76654c6c 	strbtvc	r4, [r5], -ip, ror #24
    5c5c:	75006c65 	strvc	r6, [r0, #-3173]	; 0xfffff39b
    5c60:	5f697073 	svcpl	0x00697073
    5c64:	61656c43 	cmnvs	r5, r3, asr #24
    5c68:	646e416e 	strbtvs	r4, [lr], #-366	; 0xfffffe92
    5c6c:	61766e49 	cmnvs	r6, r9, asr #28
    5c70:	6164696c 	cmnvs	r4, ip, ror #18
    5c74:	61446574 	hvcvs	18004	; 0x4654
    5c78:	61436174 	hvcvs	13844	; 0x3614
    5c7c:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
    5c80:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
    5c84:	70737500 	rsbsvc	r7, r3, r0, lsl #10
    5c88:	6e455f69 	cdpvs	15, 4, cr5, cr5, cr9, {3}
    5c8c:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    5c90:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    5c94:	006c6163 	rsbeq	r6, ip, r3, ror #2
    5c98:	616c466e 	cmnvs	ip, lr, ror #12
    5c9c:	2f007367 	svccs	0x00007367
    5ca0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5ca4:	6f6a6c2f 	svcvs	0x006a6c2f
    5ca8:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    5cac:	442f7275 	strtmi	r7, [pc], #-629	; 5cb4 <_start-0x234c>
    5cb0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5cb4:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    5cb8:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    5cbc:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    5cc0:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5cc4:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    5cc8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    5ccc:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    5cd0:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    5cd4:	442f7265 	strtmi	r7, [pc], #-613	; 5cdc <_start-0x2324>
    5cd8:	2f6f6d65 	svccs	0x006f6d65
    5cdc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    5ce0:	2f737265 	svccs	0x00737265
    5ce4:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    5ce8:	2f343135 	svccs	0x00343135
    5cec:	2f62696c 	svccs	0x0062696c
    5cf0:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
    5cf4:	6e6f7268 	cdpvs	2, 6, cr7, cr15, cr8, {3}
    5cf8:	2e657a69 	vnmulcs.f32	s15, s10, s19
    5cfc:	73750063 	cmnvc	r5, #99	; 0x63
    5d00:	4c5f6970 	mrrcmi	9, 7, r6, pc, cr0	; <UNPREDICTABLE>
    5d04:	65766165 	ldrbvs	r6, [r6, #-357]!	; 0xfffffe9b
    5d08:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
    5d0c:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    5d10:	42535500 	subsmi	r5, r3, #0, 10
    5d14:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    5d18:	6f43676e 	svcvs	0x0043676e
    5d1c:	5f007970 	svcpl	0x00007970
    5d20:	53425355 	movtpl	r5, #9045	; 0x2355
    5d24:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    5d28:	53550067 	cmppl	r5, #103	; 0x67
    5d2c:	72745342 	rsbsvc	r5, r4, #134217729	; 0x8000001
    5d30:	47676e69 	strbmi	r6, [r7, -r9, ror #28]!
    5d34:	614c7465 	cmpvs	ip, r5, ror #8
    5d38:	6175676e 	cmnvs	r5, lr, ror #14
    5d3c:	44496567 	strbmi	r6, [r9], #-1383	; 0xfffffa99
    5d40:	42535500 	subsmi	r5, r3, #0, 10
    5d44:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    5d48:	6547676e 	strbvs	r6, [r7, #-1902]	; 0xfffff892
    5d4c:	6f724674 	svcvs	0x00724674
    5d50:	7365446d 	cmnvc	r5, #1828716544	; 0x6d000000
    5d54:	70697263 	rsbvc	r7, r9, r3, ror #4
    5d58:	00726f74 	rsbseq	r6, r2, r4, ror pc
    5d5c:	654c6375 	strbvs	r6, [ip, #-885]	; 0xfffffc8b
    5d60:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    5d64:	43737500 	cmnmi	r3, #0, 10
    5d68:	00726168 	rsbseq	r6, r2, r8, ror #2
    5d6c:	6e614c70 	mcrvs	12, 3, r4, cr1, cr0, {3}
    5d70:	67617567 	strbvs	r7, [r1, -r7, ror #10]!
    5d74:	73444965 	movtvc	r4, #18789	; 0x4965
    5d78:	49637500 	stmdbmi	r3!, {r8, sl, ip, sp, lr}^
    5d7c:	73750044 	cmnvc	r5, #68	; 0x44
    5d80:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
    5d84:	2f00746c 	svccs	0x0000746c
    5d88:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5d8c:	6f6a6c2f 	svcvs	0x006a6c2f
    5d90:	666c6173 			; <UNDEFINED> instruction: 0x666c6173
    5d94:	442f7275 	strtmi	r7, [pc], #-629	; 5d9c <_start-0x2264>
    5d98:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5d9c:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    5da0:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    5da4:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    5da8:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5dac:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    5db0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    5db4:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    5db8:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
    5dbc:	442f7265 	strtmi	r7, [pc], #-613	; 5dc4 <_start-0x223c>
    5dc0:	2f6f6d65 	svccs	0x006f6d65
    5dc4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    5dc8:	2f737265 	svccs	0x00737265
    5dcc:	396e616c 	stmdbcc	lr!, {r2, r3, r5, r6, r8, sp, lr}^
    5dd0:	2f343135 	svccs	0x00343135
    5dd4:	2f62696c 	svccs	0x0062696c
    5dd8:	73627375 	cmnvc	r2, #-738197503	; 0xd4000001
    5ddc:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    5de0:	00632e67 	rsbeq	r2, r3, r7, ror #28
    5de4:	53425355 	movtpl	r5, #9045	; 0x2355
    5de8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    5dec:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <mailbuffer+0x1095c34>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	392e343a 	stmdbcc	lr!, {r1, r3, r4, r5, sl, ip, sp}
   c:	732b332e 	teqvc	fp, #-1207959552	; 0xb8000000
  10:	32326e76 	eorscc	r6, r2, #1888	; 0x760
  14:	37393237 			; <UNDEFINED> instruction: 0x37393237
  18:	2029312d 	eorcs	r3, r9, sp, lsr #2
  1c:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
  20:	30322033 	eorscc	r2, r2, r3, lsr r0
  24:	35303531 	ldrcc	r3, [r0, #-1329]!	; 0xfffffacf
  28:	28203932 	stmdacs	r0!, {r1, r4, r5, r8, fp, ip, sp}
  2c:	72657270 	rsbvc	r7, r5, #112, 4
  30:	61656c65 	cmnvs	r5, r5, ror #24
  34:	00296573 	eoreq	r6, r9, r3, ror r5

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	412d3705 	teqmi	sp, r5, lsl #14
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	09010841 	stmdbeq	r1, {r0, r6, fp}
  1c:	12020a02 	andne	r0, r2, #8192	; 0x2000
  20:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  24:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  28:	1c011a01 	stcne	10, cr1, [r1], {1}
  2c:	22061e01 	andcs	r1, r6, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000024 	andeq	r0, r0, r4, lsr #32
      14:	00000000 	andeq	r0, r0, r0
      18:	00010000 	andeq	r0, r1, r0
      1c:	0000026c 	andeq	r0, r0, ip, ror #4
      20:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
      24:	8b038504 	blhi	e143c <mailbuffer+0xa634c>
      28:	42018e02 	andmi	r8, r1, #2, 28
      2c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
      30:	0d0c0130 	stfeqs	f0, [ip, #-192]	; 0xffffff40
      34:	00000010 	andeq	r0, r0, r0, lsl r0
      38:	0000001c 	andeq	r0, r0, ip, lsl r0
      3c:	00000000 	andeq	r0, r0, r0
      40:	0001026c 	andeq	r0, r1, ip, ror #4
      44:	0000004c 	andeq	r0, r0, ip, asr #32
      48:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
      4c:	8b038504 	blhi	e1464 <mailbuffer+0xa6374>
      50:	42018e02 	andmi	r8, r1, #2, 28
      54:	00040b0c 	andeq	r0, r4, ip, lsl #22
      58:	0000001c 	andeq	r0, r0, ip, lsl r0
      5c:	00000000 	andeq	r0, r0, r0
      60:	000102b8 			; <UNDEFINED> instruction: 0x000102b8
      64:	00000038 	andeq	r0, r0, r8, lsr r0
      68:	83100e42 	tsthi	r0, #1056	; 0x420
      6c:	8b038404 	blhi	e1084 <mailbuffer+0xa5f94>
      70:	42018e02 	andmi	r8, r1, #2, 28
      74:	00040b0c 	andeq	r0, r4, ip, lsl #22
      78:	00000020 	andeq	r0, r0, r0, lsr #32
      7c:	00000000 	andeq	r0, r0, r0
      80:	000102f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
      84:	00000060 	andeq	r0, r0, r0, rrx
      88:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
      8c:	8e028b03 	vmlahi.f64	d8, d2, d3
      90:	0b0c4201 	bleq	31089c <mailbuffer+0x2d57ac>
      94:	0d0c6a04 	vstreq	s12, [ip, #-16]
      98:	0000000c 	andeq	r0, r0, ip
      9c:	00000020 	andeq	r0, r0, r0, lsr #32
      a0:	00000000 	andeq	r0, r0, r0
      a4:	00010350 	andeq	r0, r1, r0, asr r3
      a8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      ac:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
      b0:	8e028b03 	vmlahi.f64	d8, d2, d3
      b4:	0b0c4201 	bleq	3108c0 <mailbuffer+0x2d57d0>
      b8:	0c620204 	sfmeq	f0, 2, [r2], #-16
      bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
      c0:	0000000c 	andeq	r0, r0, ip
      c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      c8:	7c020001 	stcvc	0, cr0, [r2], {1}
      cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      d0:	0000001c 	andeq	r0, r0, ip, lsl r0
      d4:	000000c0 	andeq	r0, r0, r0, asr #1
      d8:	00010420 	andeq	r0, r1, r0, lsr #8
      dc:	000000bc 	strheq	r0, [r0], -ip
      e0:	83100e42 	tsthi	r0, #1056	; 0x420
      e4:	8b038404 	blhi	e10fc <mailbuffer+0xa600c>
      e8:	42018e02 	andmi	r8, r1, #2, 28
      ec:	00040b0c 	andeq	r0, r4, ip, lsl #22
      f0:	0000000c 	andeq	r0, r0, ip
      f4:	000000c0 	andeq	r0, r0, r0, asr #1
      f8:	000104dc 	ldrdeq	r0, [r1], -ip
      fc:	000000b8 	strheq	r0, [r0], -r8
     100:	0000000c 	andeq	r0, r0, ip
     104:	000000c0 	andeq	r0, r0, r0, asr #1
     108:	00010594 	muleq	r1, r4, r5
     10c:	000000b4 	strheq	r0, [r0], -r4
     110:	0000001c 	andeq	r0, r0, ip, lsl r0
     114:	000000c0 	andeq	r0, r0, r0, asr #1
     118:	00010648 	andeq	r0, r1, r8, asr #12
     11c:	00000068 	andeq	r0, r0, r8, rrx
     120:	83100e42 	tsthi	r0, #1056	; 0x420
     124:	8b038404 	blhi	e113c <mailbuffer+0xa604c>
     128:	42018e02 	andmi	r8, r1, #2, 28
     12c:	00040b0c 	andeq	r0, r4, ip, lsl #22
     130:	0000001c 	andeq	r0, r0, ip, lsl r0
     134:	000000c0 	andeq	r0, r0, r0, asr #1
     138:	000106b0 			; <UNDEFINED> instruction: 0x000106b0
     13c:	00000090 	muleq	r0, r0, r0
     140:	83100e42 	tsthi	r0, #1056	; 0x420
     144:	8b038404 	blhi	e115c <mailbuffer+0xa606c>
     148:	42018e02 	andmi	r8, r1, #2, 28
     14c:	00040b0c 	andeq	r0, r4, ip, lsl #22
     150:	0000000c 	andeq	r0, r0, ip
     154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     158:	7c020001 	stcvc	0, cr0, [r2], {1}
     15c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     160:	00000020 	andeq	r0, r0, r0, lsr #32
     164:	00000150 	andeq	r0, r0, r0, asr r1
     168:	00010748 	andeq	r0, r1, r8, asr #14
     16c:	00000198 	muleq	r0, r8, r1
     170:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     174:	8b038504 	blhi	e158c <mailbuffer+0xa649c>
     178:	42018e02 	andmi	r8, r1, #2, 28
     17c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     180:	100d0cc6 	andne	r0, sp, r6, asr #25
     184:	00000020 	andeq	r0, r0, r0, lsr #32
     188:	00000150 	andeq	r0, r0, r0, asr r1
     18c:	000108e0 	andeq	r0, r1, r0, ror #17
     190:	00000120 	andeq	r0, r0, r0, lsr #2
     194:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     198:	8e028b03 	vmlahi.f64	d8, d2, d3
     19c:	0b0c4201 	bleq	3109a8 <mailbuffer+0x2d58b8>
     1a0:	0c8a0204 	sfmeq	f0, 4, [sl], {4}
     1a4:	00000c0d 	andeq	r0, r0, sp, lsl #24
     1a8:	00000020 	andeq	r0, r0, r0, lsr #32
     1ac:	00000150 	andeq	r0, r0, r0, asr r1
     1b0:	00010a00 	andeq	r0, r1, r0, lsl #20
     1b4:	00000114 	andeq	r0, r0, r4, lsl r1
     1b8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     1bc:	8e028b03 	vmlahi.f64	d8, d2, d3
     1c0:	0b0c4201 	bleq	3109cc <mailbuffer+0x2d58dc>
     1c4:	0c840204 	sfmeq	f0, 4, [r4], {4}
     1c8:	00000c0d 	andeq	r0, r0, sp, lsl #24
     1cc:	00000020 	andeq	r0, r0, r0, lsr #32
     1d0:	00000150 	andeq	r0, r0, r0, asr r1
     1d4:	00010b14 	andeq	r0, r1, r4, lsl fp
     1d8:	00000224 	andeq	r0, r0, r4, lsr #4
     1dc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     1e0:	8e028b03 	vmlahi.f64	d8, d2, d3
     1e4:	0b0c4201 	bleq	3109f0 <mailbuffer+0x2d5900>
     1e8:	010c0304 	tsteq	ip, r4, lsl #6
     1ec:	000c0d0c 	andeq	r0, ip, ip, lsl #26
     1f0:	00000020 	andeq	r0, r0, r0, lsr #32
     1f4:	00000150 	andeq	r0, r0, r0, asr r1
     1f8:	00010d38 	andeq	r0, r1, r8, lsr sp
     1fc:	00000164 	andeq	r0, r0, r4, ror #2
     200:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     204:	8e028b03 	vmlahi.f64	d8, d2, d3
     208:	0b0c4201 	bleq	310a14 <mailbuffer+0x2d5924>
     20c:	0cac0204 	sfmeq	f0, 4, [ip], #16
     210:	00000c0d 	andeq	r0, r0, sp, lsl #24
     214:	00000020 	andeq	r0, r0, r0, lsr #32
     218:	00000150 	andeq	r0, r0, r0, asr r1
     21c:	00010e9c 	muleq	r1, ip, lr
     220:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     224:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     228:	8e028b03 	vmlahi.f64	d8, d2, d3
     22c:	0b0c4201 	bleq	310a38 <mailbuffer+0x2d5948>
     230:	0c620204 	sfmeq	f0, 2, [r2], #-16
     234:	00000c0d 	andeq	r0, r0, sp, lsl #24
     238:	00000020 	andeq	r0, r0, r0, lsr #32
     23c:	00000150 	andeq	r0, r0, r0, asr r1
     240:	00010f6c 	andeq	r0, r1, ip, ror #30
     244:	000000bc 	strheq	r0, [r0], -ip
     248:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     24c:	8b038504 	blhi	e1664 <mailbuffer+0xa6574>
     250:	42018e02 	andmi	r8, r1, #2, 28
     254:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     258:	100d0c58 	andne	r0, sp, r8, asr ip
     25c:	0000000c 	andeq	r0, r0, ip
     260:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	7c020001 	stcvc	0, cr0, [r2], {1}
     268:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     26c:	00000020 	andeq	r0, r0, r0, lsr #32
     270:	0000025c 	andeq	r0, r0, ip, asr r2
     274:	00011028 	andeq	r1, r1, r8, lsr #32
     278:	0000008c 	andeq	r0, r0, ip, lsl #1
     27c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     280:	8e028b03 	vmlahi.f64	d8, d2, d3
     284:	0b0c4201 	bleq	310a90 <mailbuffer+0x2d59a0>
     288:	0c400204 	sfmeq	f0, 2, [r0], {4}
     28c:	00000c0d 	andeq	r0, r0, sp, lsl #24
     290:	00000020 	andeq	r0, r0, r0, lsr #32
     294:	0000025c 	andeq	r0, r0, ip, asr r2
     298:	000110b4 	strheq	r1, [r1], -r4
     29c:	00000050 	andeq	r0, r0, r0, asr r0
     2a0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     2a4:	8e028b03 	vmlahi.f64	d8, d2, d3
     2a8:	0b0c4201 	bleq	310ab4 <mailbuffer+0x2d59c4>
     2ac:	0d0c6204 	sfmeq	f6, 4, [ip, #-16]
     2b0:	0000000c 	andeq	r0, r0, ip
     2b4:	00000020 	andeq	r0, r0, r0, lsr #32
     2b8:	0000025c 	andeq	r0, r0, ip, asr r2
     2bc:	00011104 	andeq	r1, r1, r4, lsl #2
     2c0:	000000bc 	strheq	r0, [r0], -ip
     2c4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     2c8:	8e028b03 	vmlahi.f64	d8, d2, d3
     2cc:	0b0c4201 	bleq	310ad8 <mailbuffer+0x2d59e8>
     2d0:	0c580204 	lfmeq	f0, 2, [r8], {4}
     2d4:	00000c0d 	andeq	r0, r0, sp, lsl #24
     2d8:	00000020 	andeq	r0, r0, r0, lsr #32
     2dc:	0000025c 	andeq	r0, r0, ip, asr r2
     2e0:	000111c0 	andeq	r1, r1, r0, asr #3
     2e4:	000000fc 	strdeq	r0, [r0], -ip
     2e8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     2ec:	8e028b03 	vmlahi.f64	d8, d2, d3
     2f0:	0b0c4201 	bleq	310afc <mailbuffer+0x2d5a0c>
     2f4:	0c780204 	lfmeq	f0, 2, [r8], #-16
     2f8:	00000c0d 	andeq	r0, r0, sp, lsl #24
     2fc:	00000020 	andeq	r0, r0, r0, lsr #32
     300:	0000025c 	andeq	r0, r0, ip, asr r2
     304:	000112bc 			; <UNDEFINED> instruction: 0x000112bc
     308:	000000bc 	strheq	r0, [r0], -ip
     30c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     310:	8e028b03 	vmlahi.f64	d8, d2, d3
     314:	0b0c4201 	bleq	310b20 <mailbuffer+0x2d5a30>
     318:	0c580204 	lfmeq	f0, 2, [r8], {4}
     31c:	00000c0d 	andeq	r0, r0, sp, lsl #24
     320:	0000000c 	andeq	r0, r0, ip
     324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     328:	7c020001 	stcvc	0, cr0, [r2], {1}
     32c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     330:	00000020 	andeq	r0, r0, r0, lsr #32
     334:	00000320 	andeq	r0, r0, r0, lsr #6
     338:	00011378 	andeq	r1, r1, r8, ror r3
     33c:	00000144 	andeq	r0, r0, r4, asr #2
     340:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     344:	8b038504 	blhi	e175c <mailbuffer+0xa666c>
     348:	42018e02 	andmi	r8, r1, #2, 28
     34c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     350:	100d0c9c 	mulne	sp, ip, ip
     354:	00000020 	andeq	r0, r0, r0, lsr #32
     358:	00000320 	andeq	r0, r0, r0, lsr #6
     35c:	000114bc 			; <UNDEFINED> instruction: 0x000114bc
     360:	000000f8 	strdeq	r0, [r0], -r8
     364:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     368:	8b038504 	blhi	e1780 <mailbuffer+0xa6690>
     36c:	42018e02 	andmi	r8, r1, #2, 28
     370:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     374:	100d0c76 	andne	r0, sp, r6, ror ip
     378:	00000020 	andeq	r0, r0, r0, lsr #32
     37c:	00000320 	andeq	r0, r0, r0, lsr #6
     380:	000115b4 			; <UNDEFINED> instruction: 0x000115b4
     384:	000001dc 	ldrdeq	r0, [r0], -ip
     388:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     38c:	8b038504 	blhi	e17a4 <mailbuffer+0xa66b4>
     390:	42018e02 	andmi	r8, r1, #2, 28
     394:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     398:	100d0ce8 	andne	r0, sp, r8, ror #25
     39c:	00000020 	andeq	r0, r0, r0, lsr #32
     3a0:	00000320 	andeq	r0, r0, r0, lsr #6
     3a4:	00011790 	muleq	r1, r0, r7
     3a8:	0000010c 	andeq	r0, r0, ip, lsl #2
     3ac:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     3b0:	8b038504 	blhi	e17c8 <mailbuffer+0xa66d8>
     3b4:	42018e02 	andmi	r8, r1, #2, 28
     3b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     3bc:	100d0c80 	andne	r0, sp, r0, lsl #25
     3c0:	00000024 	andeq	r0, r0, r4, lsr #32
     3c4:	00000320 	andeq	r0, r0, r0, lsr #6
     3c8:	0001189c 	muleq	r1, ip, r8
     3cc:	0000023c 	andeq	r0, r0, ip, lsr r2
     3d0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     3d4:	8b038504 	blhi	e17ec <mailbuffer+0xa66fc>
     3d8:	42018e02 	andmi	r8, r1, #2, 28
     3dc:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     3e0:	0d0c0118 	stfeqs	f0, [ip, #-96]	; 0xffffffa0
     3e4:	00000010 	andeq	r0, r0, r0, lsl r0
     3e8:	00000020 	andeq	r0, r0, r0, lsr #32
     3ec:	00000320 	andeq	r0, r0, r0, lsr #6
     3f0:	00011ad8 	ldrdeq	r1, [r1], -r8
     3f4:	00000110 	andeq	r0, r0, r0, lsl r1
     3f8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     3fc:	8b038504 	blhi	e1814 <mailbuffer+0xa6724>
     400:	42018e02 	andmi	r8, r1, #2, 28
     404:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     408:	100d0c82 	andne	r0, sp, r2, lsl #25
     40c:	00000020 	andeq	r0, r0, r0, lsr #32
     410:	00000320 	andeq	r0, r0, r0, lsr #6
     414:	00011be8 	andeq	r1, r1, r8, ror #23
     418:	00000064 	andeq	r0, r0, r4, rrx
     41c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     420:	8b038504 	blhi	e1838 <mailbuffer+0xa6748>
     424:	42018e02 	andmi	r8, r1, #2, 28
     428:	6c040b0c 	stcvs	11, cr0, [r4], {12}
     42c:	00100d0c 	andseq	r0, r0, ip, lsl #26
     430:	00000020 	andeq	r0, r0, r0, lsr #32
     434:	00000320 	andeq	r0, r0, r0, lsr #6
     438:	00011c4c 	andeq	r1, r1, ip, asr #24
     43c:	0000005c 	andeq	r0, r0, ip, asr r0
     440:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     444:	8b038504 	blhi	e185c <mailbuffer+0xa676c>
     448:	42018e02 	andmi	r8, r1, #2, 28
     44c:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
     450:	00100d0c 	andseq	r0, r0, ip, lsl #26
     454:	00000020 	andeq	r0, r0, r0, lsr #32
     458:	00000320 	andeq	r0, r0, r0, lsr #6
     45c:	00011ca8 	andeq	r1, r1, r8, lsr #25
     460:	0000005c 	andeq	r0, r0, ip, asr r0
     464:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     468:	8e028b03 	vmlahi.f64	d8, d2, d3
     46c:	0b0c4201 	bleq	310c78 <mailbuffer+0x2d5b88>
     470:	0d0c6804 	stceq	8, cr6, [ip, #-16]
     474:	0000000c 	andeq	r0, r0, ip
     478:	00000020 	andeq	r0, r0, r0, lsr #32
     47c:	00000320 	andeq	r0, r0, r0, lsr #6
     480:	00011d04 	andeq	r1, r1, r4, lsl #26
     484:	0000015c 	andeq	r0, r0, ip, asr r1
     488:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     48c:	8e028b03 	vmlahi.f64	d8, d2, d3
     490:	0b0c4201 	bleq	310c9c <mailbuffer+0x2d5bac>
     494:	0ca80204 	sfmeq	f0, 4, [r8], #16
     498:	00000c0d 	andeq	r0, r0, sp, lsl #24
     49c:	00000020 	andeq	r0, r0, r0, lsr #32
     4a0:	00000320 	andeq	r0, r0, r0, lsr #6
     4a4:	00011e60 	andeq	r1, r1, r0, ror #28
     4a8:	000000bc 	strheq	r0, [r0], -ip
     4ac:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     4b0:	8e028b03 	vmlahi.f64	d8, d2, d3
     4b4:	0b0c4201 	bleq	310cc0 <mailbuffer+0x2d5bd0>
     4b8:	0c580204 	lfmeq	f0, 2, [r8], {4}
     4bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
     4c0:	00000020 	andeq	r0, r0, r0, lsr #32
     4c4:	00000320 	andeq	r0, r0, r0, lsr #6
     4c8:	00011f1c 	andeq	r1, r1, ip, lsl pc
     4cc:	0000012c 	andeq	r0, r0, ip, lsr #2
     4d0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     4d4:	8e028b03 	vmlahi.f64	d8, d2, d3
     4d8:	0b0c4201 	bleq	310ce4 <mailbuffer+0x2d5bf4>
     4dc:	0c900204 	lfmeq	f0, 4, [r0], {4}
     4e0:	00000c0d 	andeq	r0, r0, sp, lsl #24
     4e4:	00000020 	andeq	r0, r0, r0, lsr #32
     4e8:	00000320 	andeq	r0, r0, r0, lsr #6
     4ec:	00012048 	andeq	r2, r1, r8, asr #32
     4f0:	00000074 	andeq	r0, r0, r4, ror r0
     4f4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     4f8:	8b038504 	blhi	e1910 <mailbuffer+0xa6820>
     4fc:	42018e02 	andmi	r8, r1, #2, 28
     500:	74040b0c 	strvc	r0, [r4], #-2828	; 0xfffff4f4
     504:	00100d0c 	andseq	r0, r0, ip, lsl #26
     508:	00000020 	andeq	r0, r0, r0, lsr #32
     50c:	00000320 	andeq	r0, r0, r0, lsr #6
     510:	000120bc 	strheq	r2, [r1], -ip
     514:	0000006c 	andeq	r0, r0, ip, rrx
     518:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     51c:	8b038504 	blhi	e1934 <mailbuffer+0xa6844>
     520:	42018e02 	andmi	r8, r1, #2, 28
     524:	70040b0c 	andvc	r0, r4, ip, lsl #22
     528:	00100d0c 	andseq	r0, r0, ip, lsl #26
     52c:	00000020 	andeq	r0, r0, r0, lsr #32
     530:	00000320 	andeq	r0, r0, r0, lsr #6
     534:	00012128 	andeq	r2, r1, r8, lsr #2
     538:	0000007c 	andeq	r0, r0, ip, ror r0
     53c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     540:	8b038504 	blhi	e1958 <mailbuffer+0xa6868>
     544:	42018e02 	andmi	r8, r1, #2, 28
     548:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
     54c:	00100d0c 	andseq	r0, r0, ip, lsl #26
     550:	00000020 	andeq	r0, r0, r0, lsr #32
     554:	00000320 	andeq	r0, r0, r0, lsr #6
     558:	000121a4 	andeq	r2, r1, r4, lsr #3
     55c:	00000074 	andeq	r0, r0, r4, ror r0
     560:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     564:	8b038504 	blhi	e197c <mailbuffer+0xa688c>
     568:	42018e02 	andmi	r8, r1, #2, 28
     56c:	74040b0c 	strvc	r0, [r4], #-2828	; 0xfffff4f4
     570:	00100d0c 	andseq	r0, r0, ip, lsl #26
     574:	0000000c 	andeq	r0, r0, ip
     578:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     57c:	7c020001 	stcvc	0, cr0, [r2], {1}
     580:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     584:	00000024 	andeq	r0, r0, r4, lsr #32
     588:	00000574 	andeq	r0, r0, r4, ror r5
     58c:	00012218 	andeq	r2, r1, r8, lsl r2
     590:	00000298 	muleq	r0, r8, r2
     594:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     598:	8b038504 	blhi	e19b0 <mailbuffer+0xa68c0>
     59c:	42018e02 	andmi	r8, r1, #2, 28
     5a0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     5a4:	0d0c0146 	stfeqs	f0, [ip, #-280]	; 0xfffffee8
     5a8:	00000010 	andeq	r0, r0, r0, lsl r0
     5ac:	00000020 	andeq	r0, r0, r0, lsr #32
     5b0:	00000574 	andeq	r0, r0, r4, ror r5
     5b4:	000124b0 			; <UNDEFINED> instruction: 0x000124b0
     5b8:	00000134 	andeq	r0, r0, r4, lsr r1
     5bc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     5c0:	8e028b03 	vmlahi.f64	d8, d2, d3
     5c4:	0b0c4201 	bleq	310dd0 <mailbuffer+0x2d5ce0>
     5c8:	0c940204 	lfmeq	f0, 4, [r4], {4}
     5cc:	00000c0d 	andeq	r0, r0, sp, lsl #24
     5d0:	00000020 	andeq	r0, r0, r0, lsr #32
     5d4:	00000574 	andeq	r0, r0, r4, ror r5
     5d8:	000125e4 	andeq	r2, r1, r4, ror #11
     5dc:	00000140 	andeq	r0, r0, r0, asr #2
     5e0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     5e4:	8e028b03 	vmlahi.f64	d8, d2, d3
     5e8:	0b0c4201 	bleq	310df4 <mailbuffer+0x2d5d04>
     5ec:	0c9a0204 	lfmeq	f0, 4, [sl], {4}
     5f0:	00000c0d 	andeq	r0, r0, sp, lsl #24
     5f4:	00000020 	andeq	r0, r0, r0, lsr #32
     5f8:	00000574 	andeq	r0, r0, r4, ror r5
     5fc:	00012724 	andeq	r2, r1, r4, lsr #14
     600:	000000ac 	andeq	r0, r0, ip, lsr #1
     604:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     608:	8e028b03 	vmlahi.f64	d8, d2, d3
     60c:	0b0c4201 	bleq	310e18 <mailbuffer+0x2d5d28>
     610:	0c500204 	lfmeq	f0, 2, [r0], {4}
     614:	00000c0d 	andeq	r0, r0, sp, lsl #24
     618:	00000020 	andeq	r0, r0, r0, lsr #32
     61c:	00000574 	andeq	r0, r0, r4, ror r5
     620:	000127d0 	ldrdeq	r2, [r1], -r0
     624:	00000088 	andeq	r0, r0, r8, lsl #1
     628:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     62c:	8b038504 	blhi	e1a44 <mailbuffer+0xa6954>
     630:	42018e02 	andmi	r8, r1, #2, 28
     634:	7e040b0c 	vmlavc.f64	d0, d4, d12
     638:	00100d0c 	andseq	r0, r0, ip, lsl #26
     63c:	00000020 	andeq	r0, r0, r0, lsr #32
     640:	00000574 	andeq	r0, r0, r4, ror r5
     644:	00012858 	andeq	r2, r1, r8, asr r8
     648:	000001cc 	andeq	r0, r0, ip, asr #3
     64c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     650:	8e028b03 	vmlahi.f64	d8, d2, d3
     654:	0b0c4201 	bleq	310e60 <mailbuffer+0x2d5d70>
     658:	0ce00204 	sfmeq	f0, 2, [r0], #16
     65c:	00000c0d 	andeq	r0, r0, sp, lsl #24
     660:	00000020 	andeq	r0, r0, r0, lsr #32
     664:	00000574 	andeq	r0, r0, r4, ror r5
     668:	00012a24 	andeq	r2, r1, r4, lsr #20
     66c:	00000138 	andeq	r0, r0, r8, lsr r1
     670:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     674:	8e028b03 	vmlahi.f64	d8, d2, d3
     678:	0b0c4201 	bleq	310e84 <mailbuffer+0x2d5d94>
     67c:	0c960204 	lfmeq	f0, 4, [r6], {4}
     680:	00000c0d 	andeq	r0, r0, sp, lsl #24
     684:	00000020 	andeq	r0, r0, r0, lsr #32
     688:	00000574 	andeq	r0, r0, r4, ror r5
     68c:	00012b5c 	andeq	r2, r1, ip, asr fp
     690:	000000a8 	andeq	r0, r0, r8, lsr #1
     694:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     698:	8b038504 	blhi	e1ab0 <mailbuffer+0xa69c0>
     69c:	42018e02 	andmi	r8, r1, #2, 28
     6a0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     6a4:	100d0c4e 	andne	r0, sp, lr, asr #24
     6a8:	00000020 	andeq	r0, r0, r0, lsr #32
     6ac:	00000574 	andeq	r0, r0, r4, ror r5
     6b0:	00012c04 	andeq	r2, r1, r4, lsl #24
     6b4:	00000120 	andeq	r0, r0, r0, lsr #2
     6b8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     6bc:	8e028b03 	vmlahi.f64	d8, d2, d3
     6c0:	0b0c4201 	bleq	310ecc <mailbuffer+0x2d5ddc>
     6c4:	0c8a0204 	sfmeq	f0, 4, [sl], {4}
     6c8:	00000c0d 	andeq	r0, r0, sp, lsl #24
     6cc:	00000020 	andeq	r0, r0, r0, lsr #32
     6d0:	00000574 	andeq	r0, r0, r4, ror r5
     6d4:	00012d24 	andeq	r2, r1, r4, lsr #26
     6d8:	00000148 	andeq	r0, r0, r8, asr #2
     6dc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     6e0:	8b038504 	blhi	e1af8 <mailbuffer+0xa6a08>
     6e4:	42018e02 	andmi	r8, r1, #2, 28
     6e8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     6ec:	100d0c9e 	mulne	sp, lr, ip
     6f0:	00000020 	andeq	r0, r0, r0, lsr #32
     6f4:	00000574 	andeq	r0, r0, r4, ror r5
     6f8:	00012e6c 	andeq	r2, r1, ip, ror #28
     6fc:	000000c4 	andeq	r0, r0, r4, asr #1
     700:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     704:	8e028b03 	vmlahi.f64	d8, d2, d3
     708:	0b0c4201 	bleq	310f14 <mailbuffer+0x2d5e24>
     70c:	0c5c0204 	lfmeq	f0, 2, [ip], {4}
     710:	00000c0d 	andeq	r0, r0, sp, lsl #24
     714:	0000001c 	andeq	r0, r0, ip, lsl r0
     718:	00000574 	andeq	r0, r0, r4, ror r5
     71c:	00012f30 	andeq	r2, r1, r0, lsr pc
     720:	00000060 	andeq	r0, r0, r0, rrx
     724:	83100e42 	tsthi	r0, #1056	; 0x420
     728:	8b038404 	blhi	e1740 <mailbuffer+0xa6650>
     72c:	42018e02 	andmi	r8, r1, #2, 28
     730:	00040b0c 	andeq	r0, r4, ip, lsl #22
     734:	0000001c 	andeq	r0, r0, ip, lsl r0
     738:	00000574 	andeq	r0, r0, r4, ror r5
     73c:	00012f90 	muleq	r1, r0, pc	; <UNPREDICTABLE>
     740:	00000054 	andeq	r0, r0, r4, asr r0
     744:	83100e42 	tsthi	r0, #1056	; 0x420
     748:	8b038404 	blhi	e1760 <mailbuffer+0xa6670>
     74c:	42018e02 	andmi	r8, r1, #2, 28
     750:	00040b0c 	andeq	r0, r4, ip, lsl #22
     754:	00000020 	andeq	r0, r0, r0, lsr #32
     758:	00000574 	andeq	r0, r0, r4, ror r5
     75c:	00012fe4 	andeq	r2, r1, r4, ror #31
     760:	000001ec 	andeq	r0, r0, ip, ror #3
     764:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     768:	8b038504 	blhi	e1b80 <mailbuffer+0xa6a90>
     76c:	42018e02 	andmi	r8, r1, #2, 28
     770:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     774:	100d0cf0 	strdne	r0, [sp], -r0	; <UNPREDICTABLE>
     778:	00000020 	andeq	r0, r0, r0, lsr #32
     77c:	00000574 	andeq	r0, r0, r4, ror r5
     780:	000131d0 	ldrdeq	r3, [r1], -r0
     784:	00000064 	andeq	r0, r0, r4, rrx
     788:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     78c:	8b038504 	blhi	e1ba4 <mailbuffer+0xa6ab4>
     790:	42018e02 	andmi	r8, r1, #2, 28
     794:	6c040b0c 	stcvs	11, cr0, [r4], {12}
     798:	00100d0c 	andseq	r0, r0, ip, lsl #26
     79c:	00000020 	andeq	r0, r0, r0, lsr #32
     7a0:	00000574 	andeq	r0, r0, r4, ror r5
     7a4:	00013234 	andeq	r3, r1, r4, lsr r2
     7a8:	00000064 	andeq	r0, r0, r4, rrx
     7ac:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     7b0:	8b038504 	blhi	e1bc8 <mailbuffer+0xa6ad8>
     7b4:	42018e02 	andmi	r8, r1, #2, 28
     7b8:	6c040b0c 	stcvs	11, cr0, [r4], {12}
     7bc:	00100d0c 	andseq	r0, r0, ip, lsl #26
     7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7c4:	00000574 	andeq	r0, r0, r4, ror r5
     7c8:	00013298 	muleq	r1, r8, r2
     7cc:	0000004c 	andeq	r0, r0, ip, asr #32
     7d0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     7d4:	8b038504 	blhi	e1bec <mailbuffer+0xa6afc>
     7d8:	42018e02 	andmi	r8, r1, #2, 28
     7dc:	00040b0c 	andeq	r0, r4, ip, lsl #22
     7e0:	00000020 	andeq	r0, r0, r0, lsr #32
     7e4:	00000574 	andeq	r0, r0, r4, ror r5
     7e8:	000132e4 	andeq	r3, r1, r4, ror #5
     7ec:	00000280 	andeq	r0, r0, r0, lsl #5
     7f0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     7f4:	8e028b03 	vmlahi.f64	d8, d2, d3
     7f8:	0b0c4201 	bleq	311004 <mailbuffer+0x2d5f14>
     7fc:	013a0304 	teqeq	sl, r4, lsl #6
     800:	000c0d0c 	andeq	r0, ip, ip, lsl #26
     804:	00000020 	andeq	r0, r0, r0, lsr #32
     808:	00000574 	andeq	r0, r0, r4, ror r5
     80c:	00013564 	andeq	r3, r1, r4, ror #10
     810:	00000084 	andeq	r0, r0, r4, lsl #1
     814:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     818:	8e028b03 	vmlahi.f64	d8, d2, d3
     81c:	0b0c4201 	bleq	311028 <mailbuffer+0x2d5f38>
     820:	0d0c7c04 	stceq	12, cr7, [ip, #-16]
     824:	0000000c 	andeq	r0, r0, ip
     828:	00000020 	andeq	r0, r0, r0, lsr #32
     82c:	00000574 	andeq	r0, r0, r4, ror r5
     830:	000135e8 	andeq	r3, r1, r8, ror #11
     834:	0000008c 	andeq	r0, r0, ip, lsl #1
     838:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     83c:	8b038504 	blhi	e1c54 <mailbuffer+0xa6b64>
     840:	42018e02 	andmi	r8, r1, #2, 28
     844:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     848:	100d0c40 	andne	r0, sp, r0, asr #24
     84c:	00000020 	andeq	r0, r0, r0, lsr #32
     850:	00000574 	andeq	r0, r0, r4, ror r5
     854:	00013674 	andeq	r3, r1, r4, ror r6
     858:	000000ac 	andeq	r0, r0, ip, lsr #1
     85c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     860:	8b038504 	blhi	e1c78 <mailbuffer+0xa6b88>
     864:	42018e02 	andmi	r8, r1, #2, 28
     868:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     86c:	100d0c50 	andne	r0, sp, r0, asr ip
     870:	00000020 	andeq	r0, r0, r0, lsr #32
     874:	00000574 	andeq	r0, r0, r4, ror r5
     878:	00013720 	andeq	r3, r1, r0, lsr #14
     87c:	00000130 	andeq	r0, r0, r0, lsr r1
     880:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     884:	8e028b03 	vmlahi.f64	d8, d2, d3
     888:	0b0c4201 	bleq	311094 <mailbuffer+0x2d5fa4>
     88c:	0c920204 	lfmeq	f0, 4, [r2], {4}
     890:	00000c0d 	andeq	r0, r0, sp, lsl #24
     894:	00000020 	andeq	r0, r0, r0, lsr #32
     898:	00000574 	andeq	r0, r0, r4, ror r5
     89c:	00013850 	andeq	r3, r1, r0, asr r8
     8a0:	000000cc 	andeq	r0, r0, ip, asr #1
     8a4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     8a8:	8e028b03 	vmlahi.f64	d8, d2, d3
     8ac:	0b0c4201 	bleq	3110b8 <mailbuffer+0x2d5fc8>
     8b0:	0c600204 	sfmeq	f0, 2, [r0], #-16
     8b4:	00000c0d 	andeq	r0, r0, sp, lsl #24
     8b8:	00000020 	andeq	r0, r0, r0, lsr #32
     8bc:	00000574 	andeq	r0, r0, r4, ror r5
     8c0:	0001391c 	andeq	r3, r1, ip, lsl r9
     8c4:	00000144 	andeq	r0, r0, r4, asr #2
     8c8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     8cc:	8b038504 	blhi	e1ce4 <mailbuffer+0xa6bf4>
     8d0:	42018e02 	andmi	r8, r1, #2, 28
     8d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     8d8:	100d0c9c 	mulne	sp, ip, ip
     8dc:	00000020 	andeq	r0, r0, r0, lsr #32
     8e0:	00000574 	andeq	r0, r0, r4, ror r5
     8e4:	00013a60 	andeq	r3, r1, r0, ror #20
     8e8:	0000006c 	andeq	r0, r0, ip, rrx
     8ec:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     8f0:	8e028b03 	vmlahi.f64	d8, d2, d3
     8f4:	0b0c4201 	bleq	311100 <mailbuffer+0x2d6010>
     8f8:	0d0c7004 	stceq	0, cr7, [ip, #-16]
     8fc:	0000000c 	andeq	r0, r0, ip
     900:	00000020 	andeq	r0, r0, r0, lsr #32
     904:	00000574 	andeq	r0, r0, r4, ror r5
     908:	00013acc 	andeq	r3, r1, ip, asr #21
     90c:	0000012c 	andeq	r0, r0, ip, lsr #2
     910:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     914:	8b038504 	blhi	e1d2c <mailbuffer+0xa6c3c>
     918:	42018e02 	andmi	r8, r1, #2, 28
     91c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     920:	100d0c90 	mulne	sp, r0, ip
     924:	0000001c 	andeq	r0, r0, ip, lsl r0
     928:	00000574 	andeq	r0, r0, r4, ror r5
     92c:	00013bf8 	strdeq	r3, [r1], -r8
     930:	00000048 	andeq	r0, r0, r8, asr #32
     934:	83100e42 	tsthi	r0, #1056	; 0x420
     938:	8b038404 	blhi	e1950 <mailbuffer+0xa6860>
     93c:	42018e02 	andmi	r8, r1, #2, 28
     940:	00040b0c 	andeq	r0, r4, ip, lsl #22
     944:	00000018 	andeq	r0, r0, r8, lsl r0
     948:	00000574 	andeq	r0, r0, r4, ror r5
     94c:	00013c40 	andeq	r3, r1, r0, asr #24
     950:	00000044 	andeq	r0, r0, r4, asr #32
     954:	8b080e42 	blhi	204264 <mailbuffer+0x1c9174>
     958:	42018e02 	andmi	r8, r1, #2, 28
     95c:	00040b0c 	andeq	r0, r4, ip, lsl #22
     960:	00000020 	andeq	r0, r0, r0, lsr #32
     964:	00000574 	andeq	r0, r0, r4, ror r5
     968:	00013c84 	andeq	r3, r1, r4, lsl #25
     96c:	000000e8 	andeq	r0, r0, r8, ror #1
     970:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     974:	8e028b03 	vmlahi.f64	d8, d2, d3
     978:	0b0c4201 	bleq	311184 <mailbuffer+0x2d6094>
     97c:	0c6e0204 	sfmeq	f0, 2, [lr], #-16
     980:	00000c0d 	andeq	r0, r0, sp, lsl #24
     984:	00000020 	andeq	r0, r0, r0, lsr #32
     988:	00000574 	andeq	r0, r0, r4, ror r5
     98c:	00013d6c 	andeq	r3, r1, ip, ror #26
     990:	000000e8 	andeq	r0, r0, r8, ror #1
     994:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     998:	8e028b03 	vmlahi.f64	d8, d2, d3
     99c:	0b0c4201 	bleq	3111a8 <mailbuffer+0x2d60b8>
     9a0:	0c6e0204 	sfmeq	f0, 2, [lr], #-16
     9a4:	00000c0d 	andeq	r0, r0, sp, lsl #24
     9a8:	00000020 	andeq	r0, r0, r0, lsr #32
     9ac:	00000574 	andeq	r0, r0, r4, ror r5
     9b0:	00013e54 	andeq	r3, r1, r4, asr lr
     9b4:	000000f4 	strdeq	r0, [r0], -r4
     9b8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     9bc:	8e028b03 	vmlahi.f64	d8, d2, d3
     9c0:	0b0c4201 	bleq	3111cc <mailbuffer+0x2d60dc>
     9c4:	0c740204 	lfmeq	f0, 2, [r4], #-16
     9c8:	00000c0d 	andeq	r0, r0, sp, lsl #24
     9cc:	00000020 	andeq	r0, r0, r0, lsr #32
     9d0:	00000574 	andeq	r0, r0, r4, ror r5
     9d4:	00013f48 	andeq	r3, r1, r8, asr #30
     9d8:	000000ec 	andeq	r0, r0, ip, ror #1
     9dc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     9e0:	8e028b03 	vmlahi.f64	d8, d2, d3
     9e4:	0b0c4201 	bleq	3111f0 <mailbuffer+0x2d6100>
     9e8:	0c700204 	lfmeq	f0, 2, [r0], #-16
     9ec:	00000c0d 	andeq	r0, r0, sp, lsl #24
     9f0:	00000020 	andeq	r0, r0, r0, lsr #32
     9f4:	00000574 	andeq	r0, r0, r4, ror r5
     9f8:	00014034 	andeq	r4, r1, r4, lsr r0
     9fc:	000000e4 	andeq	r0, r0, r4, ror #1
     a00:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     a04:	8b038504 	blhi	e1e1c <mailbuffer+0xa6d2c>
     a08:	42018e02 	andmi	r8, r1, #2, 28
     a0c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     a10:	100d0c6c 	andne	r0, sp, ip, ror #24
     a14:	00000020 	andeq	r0, r0, r0, lsr #32
     a18:	00000574 	andeq	r0, r0, r4, ror r5
     a1c:	00014118 	andeq	r4, r1, r8, lsl r1
     a20:	0000005c 	andeq	r0, r0, ip, asr r0
     a24:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     a28:	8e028b03 	vmlahi.f64	d8, d2, d3
     a2c:	0b0c4201 	bleq	311238 <mailbuffer+0x2d6148>
     a30:	0d0c6804 	stceq	8, cr6, [ip, #-16]
     a34:	0000000c 	andeq	r0, r0, ip
     a38:	0000000c 	andeq	r0, r0, ip
     a3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a40:	7c020001 	stcvc	0, cr0, [r2], {1}
     a44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a48:	0000001c 	andeq	r0, r0, ip, lsl r0
     a4c:	00000a38 	andeq	r0, r0, r8, lsr sl
     a50:	00014174 	andeq	r4, r1, r4, ror r1
     a54:	0000003c 	andeq	r0, r0, ip, lsr r0
     a58:	83100e42 	tsthi	r0, #1056	; 0x420
     a5c:	8b038404 	blhi	e1a74 <mailbuffer+0xa6984>
     a60:	42018e02 	andmi	r8, r1, #2, 28
     a64:	00040b0c 	andeq	r0, r4, ip, lsl #22
     a68:	0000001c 	andeq	r0, r0, ip, lsl r0
     a6c:	00000a38 	andeq	r0, r0, r8, lsr sl
     a70:	000141b0 			; <UNDEFINED> instruction: 0x000141b0
     a74:	0000003c 	andeq	r0, r0, ip, lsr r0
     a78:	83100e42 	tsthi	r0, #1056	; 0x420
     a7c:	8b038404 	blhi	e1a94 <mailbuffer+0xa69a4>
     a80:	42018e02 	andmi	r8, r1, #2, 28
     a84:	00040b0c 	andeq	r0, r4, ip, lsl #22
     a88:	00000024 	andeq	r0, r0, r4, lsr #32
     a8c:	00000a38 	andeq	r0, r0, r8, lsr sl
     a90:	000141ec 	andeq	r4, r1, ip, ror #3
     a94:	00000100 	andeq	r0, r0, r0, lsl #2
     a98:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
     a9c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     aa0:	8e028b03 	vmlahi.f64	d8, d2, d3
     aa4:	0b0c4201 	bleq	3112b0 <mailbuffer+0x2d61c0>
     aa8:	0c7a0204 	lfmeq	f0, 2, [sl], #-16
     aac:	0000140d 	andeq	r1, r0, sp, lsl #8
     ab0:	00000020 	andeq	r0, r0, r0, lsr #32
     ab4:	00000a38 	andeq	r0, r0, r8, lsr sl
     ab8:	000142ec 	andeq	r4, r1, ip, ror #5
     abc:	00000048 	andeq	r0, r0, r8, asr #32
     ac0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     ac4:	8e028b03 	vmlahi.f64	d8, d2, d3
     ac8:	0b0c4201 	bleq	3112d4 <mailbuffer+0x2d61e4>
     acc:	0d0c5e04 	stceq	14, cr5, [ip, #-16]
     ad0:	0000000c 	andeq	r0, r0, ip
     ad4:	00000020 	andeq	r0, r0, r0, lsr #32
     ad8:	00000a38 	andeq	r0, r0, r8, lsr sl
     adc:	00014334 	andeq	r4, r1, r4, lsr r3
     ae0:	000000a4 	andeq	r0, r0, r4, lsr #1
     ae4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     ae8:	8b038504 	blhi	e1f00 <mailbuffer+0xa6e10>
     aec:	42018e02 	andmi	r8, r1, #2, 28
     af0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     af4:	100d0c4c 	andne	r0, sp, ip, asr #24
     af8:	00000020 	andeq	r0, r0, r0, lsr #32
     afc:	00000a38 	andeq	r0, r0, r8, lsr sl
     b00:	000143d8 	ldrdeq	r4, [r1], -r8
     b04:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     b08:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     b0c:	8b038504 	blhi	e1f24 <mailbuffer+0xa6e34>
     b10:	42018e02 	andmi	r8, r1, #2, 28
     b14:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     b18:	100d0c52 	andne	r0, sp, r2, asr ip
     b1c:	00000020 	andeq	r0, r0, r0, lsr #32
     b20:	00000a38 	andeq	r0, r0, r8, lsr sl
     b24:	00014488 	andeq	r4, r1, r8, lsl #9
     b28:	00000104 	andeq	r0, r0, r4, lsl #2
     b2c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     b30:	8b038504 	blhi	e1f48 <mailbuffer+0xa6e58>
     b34:	42018e02 	andmi	r8, r1, #2, 28
     b38:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     b3c:	100d0c7c 	andne	r0, sp, ip, ror ip
     b40:	00000020 	andeq	r0, r0, r0, lsr #32
     b44:	00000a38 	andeq	r0, r0, r8, lsr sl
     b48:	0001458c 	andeq	r4, r1, ip, lsl #11
     b4c:	00000104 	andeq	r0, r0, r4, lsl #2
     b50:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     b54:	8b038504 	blhi	e1f6c <mailbuffer+0xa6e7c>
     b58:	42018e02 	andmi	r8, r1, #2, 28
     b5c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     b60:	100d0c7c 	andne	r0, sp, ip, ror ip
     b64:	0000001c 	andeq	r0, r0, ip, lsl r0
     b68:	00000a38 	andeq	r0, r0, r8, lsr sl
     b6c:	00014690 	muleq	r1, r0, r6
     b70:	00000048 	andeq	r0, r0, r8, asr #32
     b74:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     b78:	8b038504 	blhi	e1f90 <mailbuffer+0xa6ea0>
     b7c:	42018e02 	andmi	r8, r1, #2, 28
     b80:	00040b0c 	andeq	r0, r4, ip, lsl #22
     b84:	0000001c 	andeq	r0, r0, ip, lsl r0
     b88:	00000a38 	andeq	r0, r0, r8, lsr sl
     b8c:	000146d8 	ldrdeq	r4, [r1], -r8
     b90:	00000048 	andeq	r0, r0, r8, asr #32
     b94:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     b98:	8b038504 	blhi	e1fb0 <mailbuffer+0xa6ec0>
     b9c:	42018e02 	andmi	r8, r1, #2, 28
     ba0:	00040b0c 	andeq	r0, r4, ip, lsl #22
     ba4:	0000000c 	andeq	r0, r0, ip
     ba8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     bac:	7c020001 	stcvc	0, cr0, [r2], {1}
     bb0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bb4:	00000020 	andeq	r0, r0, r0, lsr #32
     bb8:	00000ba4 	andeq	r0, r0, r4, lsr #23
     bbc:	00014720 	andeq	r4, r1, r0, lsr #14
     bc0:	000000f8 	strdeq	r0, [r0], -r8
     bc4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     bc8:	8e028b03 	vmlahi.f64	d8, d2, d3
     bcc:	0b0c4201 	bleq	3113d8 <mailbuffer+0x2d62e8>
     bd0:	0c760204 	lfmeq	f0, 2, [r6], #-16
     bd4:	00000c0d 	andeq	r0, r0, sp, lsl #24
     bd8:	00000020 	andeq	r0, r0, r0, lsr #32
     bdc:	00000ba4 	andeq	r0, r0, r4, lsr #23
     be0:	00014818 	andeq	r4, r1, r8, lsl r8
     be4:	0000005c 	andeq	r0, r0, ip, asr r0
     be8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     bec:	8e028b03 	vmlahi.f64	d8, d2, d3
     bf0:	0b0c4201 	bleq	3113fc <mailbuffer+0x2d630c>
     bf4:	0d0c6804 	stceq	8, cr6, [ip, #-16]
     bf8:	0000000c 	andeq	r0, r0, ip
     bfc:	00000020 	andeq	r0, r0, r0, lsr #32
     c00:	00000ba4 	andeq	r0, r0, r4, lsr #23
     c04:	00014874 	andeq	r4, r1, r4, ror r8
     c08:	000000e8 	andeq	r0, r0, r8, ror #1
     c0c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     c10:	8e028b03 	vmlahi.f64	d8, d2, d3
     c14:	0b0c4201 	bleq	311420 <mailbuffer+0x2d6330>
     c18:	0c6e0204 	sfmeq	f0, 2, [lr], #-16
     c1c:	00000c0d 	andeq	r0, r0, sp, lsl #24
     c20:	00000020 	andeq	r0, r0, r0, lsr #32
     c24:	00000ba4 	andeq	r0, r0, r4, lsr #23
     c28:	0001495c 	andeq	r4, r1, ip, asr r9
     c2c:	0000007c 	andeq	r0, r0, ip, ror r0
     c30:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     c34:	8b038504 	blhi	e204c <mailbuffer+0xa6f5c>
     c38:	42018e02 	andmi	r8, r1, #2, 28
     c3c:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
     c40:	00100d0c 	andseq	r0, r0, ip, lsl #26
     c44:	00000020 	andeq	r0, r0, r0, lsr #32
     c48:	00000ba4 	andeq	r0, r0, r4, lsr #23
     c4c:	000149d8 	ldrdeq	r4, [r1], -r8
     c50:	000001fc 	strdeq	r0, [r0], -ip
     c54:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     c58:	8e028b03 	vmlahi.f64	d8, d2, d3
     c5c:	0b0c4201 	bleq	311468 <mailbuffer+0x2d6378>
     c60:	0cf80204 	lfmeq	f0, 2, [r8], #16
     c64:	00000c0d 	andeq	r0, r0, sp, lsl #24
     c68:	00000020 	andeq	r0, r0, r0, lsr #32
     c6c:	00000ba4 	andeq	r0, r0, r4, lsr #23
     c70:	00014bd4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
     c74:	00000204 	andeq	r0, r0, r4, lsl #4
     c78:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     c7c:	8e028b03 	vmlahi.f64	d8, d2, d3
     c80:	0b0c4201 	bleq	31148c <mailbuffer+0x2d639c>
     c84:	0cfc0204 	lfmeq	f0, 2, [ip], #16
     c88:	00000c0d 	andeq	r0, r0, sp, lsl #24
     c8c:	00000020 	andeq	r0, r0, r0, lsr #32
     c90:	00000ba4 	andeq	r0, r0, r4, lsr #23
     c94:	00014dd8 	ldrdeq	r4, [r1], -r8
     c98:	0000007c 	andeq	r0, r0, ip, ror r0
     c9c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     ca0:	8e028b03 	vmlahi.f64	d8, d2, d3
     ca4:	0b0c4201 	bleq	3114b0 <mailbuffer+0x2d63c0>
     ca8:	0d0c7804 	stceq	8, cr7, [ip, #-16]
     cac:	0000000c 	andeq	r0, r0, ip
     cb0:	0000000c 	andeq	r0, r0, ip
     cb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     cb8:	7c020001 	stcvc	0, cr0, [r2], {1}
     cbc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     cc0:	00000020 	andeq	r0, r0, r0, lsr #32
     cc4:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     cc8:	00014e54 	andeq	r4, r1, r4, asr lr
     ccc:	00000208 	andeq	r0, r0, r8, lsl #4
     cd0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     cd4:	8b038504 	blhi	e20ec <mailbuffer+0xa6ffc>
     cd8:	42018e02 	andmi	r8, r1, #2, 28
     cdc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     ce0:	100d0cfe 	strdne	r0, [sp], -lr
     ce4:	00000020 	andeq	r0, r0, r0, lsr #32
     ce8:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     cec:	0001505c 	andeq	r5, r1, ip, asr r0
     cf0:	000000a8 	andeq	r0, r0, r8, lsr #1
     cf4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     cf8:	8e028b03 	vmlahi.f64	d8, d2, d3
     cfc:	0b0c4201 	bleq	311508 <mailbuffer+0x2d6418>
     d00:	0c4e0204 	sfmeq	f0, 2, [lr], {4}
     d04:	00000c0d 	andeq	r0, r0, sp, lsl #24
     d08:	0000001c 	andeq	r0, r0, ip, lsl r0
     d0c:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     d10:	00015104 	andeq	r5, r1, r4, lsl #2
     d14:	0000004c 	andeq	r0, r0, ip, asr #32
     d18:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     d1c:	8b038504 	blhi	e2134 <mailbuffer+0xa7044>
     d20:	42018e02 	andmi	r8, r1, #2, 28
     d24:	00040b0c 	andeq	r0, r4, ip, lsl #22
     d28:	0000001c 	andeq	r0, r0, ip, lsl r0
     d2c:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     d30:	00015150 	andeq	r5, r1, r0, asr r1
     d34:	00000038 	andeq	r0, r0, r8, lsr r0
     d38:	83100e42 	tsthi	r0, #1056	; 0x420
     d3c:	8b038404 	blhi	e1d54 <mailbuffer+0xa6c64>
     d40:	42018e02 	andmi	r8, r1, #2, 28
     d44:	00040b0c 	andeq	r0, r4, ip, lsl #22
     d48:	00000020 	andeq	r0, r0, r0, lsr #32
     d4c:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     d50:	00015188 	andeq	r5, r1, r8, lsl #3
     d54:	00000118 	andeq	r0, r0, r8, lsl r1
     d58:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     d5c:	8e028b03 	vmlahi.f64	d8, d2, d3
     d60:	0b0c4201 	bleq	31156c <mailbuffer+0x2d647c>
     d64:	0c860204 	sfmeq	f0, 4, [r6], {4}
     d68:	00000c0d 	andeq	r0, r0, sp, lsl #24
     d6c:	00000020 	andeq	r0, r0, r0, lsr #32
     d70:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     d74:	000152a0 	andeq	r5, r1, r0, lsr #5
     d78:	0000017c 	andeq	r0, r0, ip, ror r1
     d7c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     d80:	8e028b03 	vmlahi.f64	d8, d2, d3
     d84:	0b0c4201 	bleq	311590 <mailbuffer+0x2d64a0>
     d88:	0cb80204 	lfmeq	f0, 4, [r8], #16
     d8c:	00000c0d 	andeq	r0, r0, sp, lsl #24
     d90:	0000000c 	andeq	r0, r0, ip
     d94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d98:	7c020001 	stcvc	0, cr0, [r2], {1}
     d9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     da0:	00000018 	andeq	r0, r0, r8, lsl r0
     da4:	00000d90 	muleq	r0, r0, sp
     da8:	00015444 	andeq	r5, r1, r4, asr #8
     dac:	0000004c 	andeq	r0, r0, ip, asr #32
     db0:	8b080e42 	blhi	2046c0 <mailbuffer+0x1c95d0>
     db4:	42018e02 	andmi	r8, r1, #2, 28
     db8:	00040b0c 	andeq	r0, r4, ip, lsl #22
     dbc:	00000018 	andeq	r0, r0, r8, lsl r0
     dc0:	00000d90 	muleq	r0, r0, sp
     dc4:	00015490 	muleq	r1, r0, r4
     dc8:	00000054 	andeq	r0, r0, r4, asr r0
     dcc:	8b080e42 	blhi	2046dc <mailbuffer+0x1c95ec>
     dd0:	42018e02 	andmi	r8, r1, #2, 28
     dd4:	00040b0c 	andeq	r0, r4, ip, lsl #22
     dd8:	00000018 	andeq	r0, r0, r8, lsl r0
     ddc:	00000d90 	muleq	r0, r0, sp
     de0:	000154e4 	andeq	r5, r1, r4, ror #9
     de4:	000000e8 	andeq	r0, r0, r8, ror #1
     de8:	8b080e42 	blhi	2046f8 <mailbuffer+0x1c9608>
     dec:	42018e02 	andmi	r8, r1, #2, 28
     df0:	00040b0c 	andeq	r0, r4, ip, lsl #22
     df4:	0000000c 	andeq	r0, r0, ip
     df8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dfc:	7c020001 	stcvc	0, cr0, [r2], {1}
     e00:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e04:	00000020 	andeq	r0, r0, r0, lsr #32
     e08:	00000df4 	strdeq	r0, [r0], -r4
     e0c:	000155cc 	andeq	r5, r1, ip, asr #11
     e10:	0000009c 	muleq	r0, ip, r0
     e14:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     e18:	8e028b03 	vmlahi.f64	d8, d2, d3
     e1c:	0b0c4201 	bleq	311628 <mailbuffer+0x2d6538>
     e20:	0c480204 	sfmeq	f0, 2, [r8], {4}
     e24:	00000c0d 	andeq	r0, r0, sp, lsl #24
     e28:	00000020 	andeq	r0, r0, r0, lsr #32
     e2c:	00000df4 	strdeq	r0, [r0], -r4
     e30:	00015668 	andeq	r5, r1, r8, ror #12
     e34:	000000b4 	strheq	r0, [r0], -r4
     e38:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     e3c:	8b038504 	blhi	e2254 <mailbuffer+0xa7164>
     e40:	42018e02 	andmi	r8, r1, #2, 28
     e44:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     e48:	100d0c54 	andne	r0, sp, r4, asr ip
     e4c:	0000000c 	andeq	r0, r0, ip
     e50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e54:	7c020001 	stcvc	0, cr0, [r2], {1}
     e58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e5c:	00000024 	andeq	r0, r0, r4, lsr #32
     e60:	00000e4c 	andeq	r0, r0, ip, asr #28
     e64:	0001571c 	andeq	r5, r1, ip, lsl r7
     e68:	00000148 	andeq	r0, r0, r8, asr #2
     e6c:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
     e70:	86048505 	strhi	r8, [r4], -r5, lsl #10
     e74:	8e028b03 	vmlahi.f64	d8, d2, d3
     e78:	0b0c4201 	bleq	311684 <mailbuffer+0x2d6594>
     e7c:	0c9e0204 	lfmeq	f0, 4, [lr], {4}
     e80:	0000140d 	andeq	r1, r0, sp, lsl #8
     e84:	00000024 	andeq	r0, r0, r4, lsr #32
     e88:	00000e4c 	andeq	r0, r0, ip, asr #28
     e8c:	00015864 	andeq	r5, r1, r4, ror #16
     e90:	00000148 	andeq	r0, r0, r8, asr #2
     e94:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
     e98:	86048505 	strhi	r8, [r4], -r5, lsl #10
     e9c:	8e028b03 	vmlahi.f64	d8, d2, d3
     ea0:	0b0c4201 	bleq	3116ac <mailbuffer+0x2d65bc>
     ea4:	0c9e0204 	lfmeq	f0, 4, [lr], {4}
     ea8:	0000140d 	andeq	r1, r0, sp, lsl #8
     eac:	0000000c 	andeq	r0, r0, ip
     eb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eb4:	7c020001 	stcvc	0, cr0, [r2], {1}
     eb8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ebc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ec0:	00000eac 	andeq	r0, r0, ip, lsr #29
     ec4:	000159b0 			; <UNDEFINED> instruction: 0x000159b0
     ec8:	0000024c 	andeq	r0, r0, ip, asr #4
     ecc:	83100e42 	tsthi	r0, #1056	; 0x420
     ed0:	8b038404 	blhi	e1ee8 <mailbuffer+0xa6df8>
     ed4:	42018e02 	andmi	r8, r1, #2, 28
     ed8:	00040b0c 	andeq	r0, r4, ip, lsl #22
     edc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ee0:	00000eac 	andeq	r0, r0, ip, lsr #29
     ee4:	00015bfc 	strdeq	r5, [r1], -ip
     ee8:	00000060 	andeq	r0, r0, r0, rrx
     eec:	8b040e42 	blhi	1047fc <mailbuffer+0xc970c>
     ef0:	0b0d4201 	bleq	3516fc <mailbuffer+0x31660c>
     ef4:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     ef8:	00000ecb 	andeq	r0, r0, fp, asr #29
     efc:	0000001c 	andeq	r0, r0, ip, lsl r0
     f00:	00000eac 	andeq	r0, r0, ip, lsr #29
     f04:	00015c5c 	andeq	r5, r1, ip, asr ip
     f08:	0000008c 	andeq	r0, r0, ip, lsl #1
     f0c:	8b080e42 	blhi	20481c <mailbuffer+0x1c972c>
     f10:	42018e02 	andmi	r8, r1, #2, 28
     f14:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     f18:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
     f1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f20:	00000eac 	andeq	r0, r0, ip, lsr #29
     f24:	00015ce8 	andeq	r5, r1, r8, ror #25
     f28:	00000128 	andeq	r0, r0, r8, lsr #2
     f2c:	8b040e42 	blhi	10483c <mailbuffer+0xc974c>
     f30:	0b0d4201 	bleq	35173c <mailbuffer+0x31664c>
     f34:	0d0d8c02 	stceq	12, cr8, [sp, #-8]
     f38:	000ecb42 	andeq	ip, lr, r2, asr #22
     f3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f40:	00000eac 	andeq	r0, r0, ip, lsr #29
     f44:	00015e10 	andeq	r5, r1, r0, lsl lr
     f48:	0000006c 	andeq	r0, r0, ip, rrx
     f4c:	8b080e42 	blhi	20485c <mailbuffer+0x1c976c>
     f50:	42018e02 	andmi	r8, r1, #2, 28
     f54:	70040b0c 	andvc	r0, r4, ip, lsl #22
     f58:	00080d0c 	andeq	r0, r8, ip, lsl #26
     f5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f60:	00000eac 	andeq	r0, r0, ip, lsr #29
     f64:	00015e7c 	andeq	r5, r1, ip, ror lr
     f68:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     f6c:	8b080e42 	blhi	20487c <mailbuffer+0x1c978c>
     f70:	42018e02 	andmi	r8, r1, #2, 28
     f74:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     f78:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
     f7c:	00000020 	andeq	r0, r0, r0, lsr #32
     f80:	00000eac 	andeq	r0, r0, ip, lsr #29
     f84:	00015f2c 	andeq	r5, r1, ip, lsr #30
     f88:	0000020c 	andeq	r0, r0, ip, lsl #4
     f8c:	8b080e42 	blhi	20489c <mailbuffer+0x1c97ac>
     f90:	42018e02 	andmi	r8, r1, #2, 28
     f94:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     f98:	0d0c0100 	stfeqs	f0, [ip, #-0]
     f9c:	00000008 	andeq	r0, r0, r8
     fa0:	00000020 	andeq	r0, r0, r0, lsr #32
     fa4:	00000eac 	andeq	r0, r0, ip, lsr #29
     fa8:	00016138 	andeq	r6, r1, r8, lsr r1
     fac:	00000440 	andeq	r0, r0, r0, asr #8
     fb0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     fb4:	8e028b03 	vmlahi.f64	d8, d2, d3
     fb8:	0b0c4201 	bleq	3117c4 <mailbuffer+0x2d66d4>
     fbc:	02140304 	andseq	r0, r4, #4, 6	; 0x10000000
     fc0:	000c0d0c 	andeq	r0, ip, ip, lsl #26
     fc4:	0000000c 	andeq	r0, r0, ip
     fc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fcc:	7c020001 	stcvc	0, cr0, [r2], {1}
     fd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fd4:	00000020 	andeq	r0, r0, r0, lsr #32
     fd8:	00000fc4 	andeq	r0, r0, r4, asr #31
     fdc:	00016580 	andeq	r6, r1, r0, lsl #11
     fe0:	00000054 	andeq	r0, r0, r4, asr r0
     fe4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     fe8:	8e028b03 	vmlahi.f64	d8, d2, d3
     fec:	0b0c4201 	bleq	3117f8 <mailbuffer+0x2d6708>
     ff0:	0d0c6404 	cfstrseq	mvf6, [ip, #-16]
     ff4:	0000000c 	andeq	r0, r0, ip
     ff8:	00000020 	andeq	r0, r0, r0, lsr #32
     ffc:	00000fc4 	andeq	r0, r0, r4, asr #31
    1000:	000165d4 	ldrdeq	r6, [r1], -r4
    1004:	00000054 	andeq	r0, r0, r4, asr r0
    1008:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    100c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1010:	0b0c4201 	bleq	31181c <mailbuffer+0x2d672c>
    1014:	0d0c6404 	cfstrseq	mvf6, [ip, #-16]
    1018:	0000000c 	andeq	r0, r0, ip
    101c:	00000020 	andeq	r0, r0, r0, lsr #32
    1020:	00000fc4 	andeq	r0, r0, r4, asr #31
    1024:	00016628 	andeq	r6, r1, r8, lsr #12
    1028:	0000006c 	andeq	r0, r0, ip, rrx
    102c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1030:	8b038504 	blhi	e2448 <mailbuffer+0xa7358>
    1034:	42018e02 	andmi	r8, r1, #2, 28
    1038:	70040b0c 	andvc	r0, r4, ip, lsl #22
    103c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1040:	00000020 	andeq	r0, r0, r0, lsr #32
    1044:	00000fc4 	andeq	r0, r0, r4, asr #31
    1048:	00016694 	muleq	r1, r4, r6
    104c:	00000054 	andeq	r0, r0, r4, asr r0
    1050:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1054:	8e028b03 	vmlahi.f64	d8, d2, d3
    1058:	0b0c4201 	bleq	311864 <mailbuffer+0x2d6774>
    105c:	0d0c6404 	cfstrseq	mvf6, [ip, #-16]
    1060:	0000000c 	andeq	r0, r0, ip
    1064:	00000020 	andeq	r0, r0, r0, lsr #32
    1068:	00000fc4 	andeq	r0, r0, r4, asr #31
    106c:	000166e8 	andeq	r6, r1, r8, ror #13
    1070:	00000060 	andeq	r0, r0, r0, rrx
    1074:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1078:	8e028b03 	vmlahi.f64	d8, d2, d3
    107c:	0b0c4201 	bleq	311888 <mailbuffer+0x2d6798>
    1080:	0d0c6a04 	vstreq	s12, [ip, #-16]
    1084:	0000000c 	andeq	r0, r0, ip
    1088:	00000020 	andeq	r0, r0, r0, lsr #32
    108c:	00000fc4 	andeq	r0, r0, r4, asr #31
    1090:	00016748 	andeq	r6, r1, r8, asr #14
    1094:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1098:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    109c:	8b038504 	blhi	e24b4 <mailbuffer+0xa73c4>
    10a0:	42018e02 	andmi	r8, r1, #2, 28
    10a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    10a8:	100d0c62 	andne	r0, sp, r2, ror #24
    10ac:	00000020 	andeq	r0, r0, r0, lsr #32
    10b0:	00000fc4 	andeq	r0, r0, r4, asr #31
    10b4:	00016818 	andeq	r6, r1, r8, lsl r8
    10b8:	00000138 	andeq	r0, r0, r8, lsr r1
    10bc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    10c0:	8b038504 	blhi	e24d8 <mailbuffer+0xa73e8>
    10c4:	42018e02 	andmi	r8, r1, #2, 28
    10c8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    10cc:	100d0c96 	mulne	sp, r6, ip
    10d0:	00000030 	andeq	r0, r0, r0, lsr r0
    10d4:	00000fc4 	andeq	r0, r0, r4, asr #31
    10d8:	00016950 	andeq	r6, r1, r0, asr r9
    10dc:	00000060 	andeq	r0, r0, r0, rrx
    10e0:	82080e42 	andhi	r0, r8, #1056	; 0x420
    10e4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
    10e8:	0584140e 	streq	r1, [r4, #1038]	; 0x40e
    10ec:	038e048b 	orreq	r0, lr, #-1962934272	; 0x8b000000
    10f0:	0c0b0c42 	stceq	12, cr0, [fp], {66}	; 0x42
    10f4:	140d0c64 	strne	r0, [sp], #-3172	; 0xfffff39c
    10f8:	c4cbce42 	strbgt	ip, [fp], #3650	; 0xe42
    10fc:	c342080e 	movtgt	r0, #10254	; 0x280e
    1100:	00000ec2 	andeq	r0, r0, r2, asr #29
    1104:	00000020 	andeq	r0, r0, r0, lsr #32
    1108:	00000fc4 	andeq	r0, r0, r4, asr #31
    110c:	000169b0 			; <UNDEFINED> instruction: 0x000169b0
    1110:	0000005c 	andeq	r0, r0, ip, asr r0
    1114:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1118:	8e028b03 	vmlahi.f64	d8, d2, d3
    111c:	0b0c4201 	bleq	311928 <mailbuffer+0x2d6838>
    1120:	0d0c6804 	stceq	8, cr6, [ip, #-16]
    1124:	0000000c 	andeq	r0, r0, ip
    1128:	00000020 	andeq	r0, r0, r0, lsr #32
    112c:	00000fc4 	andeq	r0, r0, r4, asr #31
    1130:	00016a0c 	andeq	r6, r1, ip, lsl #20
    1134:	0000004c 	andeq	r0, r0, ip, asr #32
    1138:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    113c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1140:	0b0c4201 	bleq	31194c <mailbuffer+0x2d685c>
    1144:	0d0c6004 	stceq	0, cr6, [ip, #-16]
    1148:	0000000c 	andeq	r0, r0, ip
    114c:	00000020 	andeq	r0, r0, r0, lsr #32
    1150:	00000fc4 	andeq	r0, r0, r4, asr #31
    1154:	00016a58 	andeq	r6, r1, r8, asr sl
    1158:	00000058 	andeq	r0, r0, r8, asr r0
    115c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1160:	8b038504 	blhi	e2578 <mailbuffer+0xa7488>
    1164:	42018e02 	andmi	r8, r1, #2, 28
    1168:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
    116c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1170:	00000020 	andeq	r0, r0, r0, lsr #32
    1174:	00000fc4 	andeq	r0, r0, r4, asr #31
    1178:	00016ab0 			; <UNDEFINED> instruction: 0x00016ab0
    117c:	0000004c 	andeq	r0, r0, ip, asr #32
    1180:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1184:	8e028b03 	vmlahi.f64	d8, d2, d3
    1188:	0b0c4201 	bleq	311994 <mailbuffer+0x2d68a4>
    118c:	0d0c6004 	stceq	0, cr6, [ip, #-16]
    1190:	0000000c 	andeq	r0, r0, ip
    1194:	00000020 	andeq	r0, r0, r0, lsr #32
    1198:	00000fc4 	andeq	r0, r0, r4, asr #31
    119c:	00016afc 	strdeq	r6, [r1], -ip
    11a0:	00000090 	muleq	r0, r0, r0
    11a4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    11a8:	8b038504 	blhi	e25c0 <mailbuffer+0xa74d0>
    11ac:	42018e02 	andmi	r8, r1, #2, 28
    11b0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    11b4:	100d0c42 	andne	r0, sp, r2, asr #24
    11b8:	00000020 	andeq	r0, r0, r0, lsr #32
    11bc:	00000fc4 	andeq	r0, r0, r4, asr #31
    11c0:	00016b8c 	andeq	r6, r1, ip, lsl #23
    11c4:	000000cc 	andeq	r0, r0, ip, asr #1
    11c8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    11cc:	8b038504 	blhi	e25e4 <mailbuffer+0xa74f4>
    11d0:	42018e02 	andmi	r8, r1, #2, 28
    11d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    11d8:	100d0c60 	andne	r0, sp, r0, ror #24
    11dc:	00000020 	andeq	r0, r0, r0, lsr #32
    11e0:	00000fc4 	andeq	r0, r0, r4, asr #31
    11e4:	00016c58 	andeq	r6, r1, r8, asr ip
    11e8:	000000a0 	andeq	r0, r0, r0, lsr #1
    11ec:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    11f0:	8b038504 	blhi	e2608 <mailbuffer+0xa7518>
    11f4:	42018e02 	andmi	r8, r1, #2, 28
    11f8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    11fc:	100d0c4a 	andne	r0, sp, sl, asr #24
    1200:	00000020 	andeq	r0, r0, r0, lsr #32
    1204:	00000fc4 	andeq	r0, r0, r4, asr #31
    1208:	00016cf8 	strdeq	r6, [r1], -r8
    120c:	000000d4 	ldrdeq	r0, [r0], -r4
    1210:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1214:	8b038504 	blhi	e262c <mailbuffer+0xa753c>
    1218:	42018e02 	andmi	r8, r1, #2, 28
    121c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1220:	100d0c64 	andne	r0, sp, r4, ror #24
    1224:	0000000c 	andeq	r0, r0, ip
    1228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    122c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1230:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1234:	00000024 	andeq	r0, r0, r4, lsr #32
    1238:	00001224 	andeq	r1, r0, r4, lsr #4
    123c:	00016dcc 	andeq	r6, r1, ip, asr #27
    1240:	00000344 	andeq	r0, r0, r4, asr #6
    1244:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1248:	8b038504 	blhi	e2660 <mailbuffer+0xa7570>
    124c:	42018e02 	andmi	r8, r1, #2, 28
    1250:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1254:	0d0c019c 	stfeqs	f0, [ip, #-624]	; 0xfffffd90
    1258:	00000010 	andeq	r0, r0, r0, lsl r0
    125c:	0000000c 	andeq	r0, r0, ip
    1260:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1264:	7c020001 	stcvc	0, cr0, [r2], {1}
    1268:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    126c:	00000024 	andeq	r0, r0, r4, lsr #32
    1270:	0000125c 	andeq	r1, r0, ip, asr r2
    1274:	00017110 	andeq	r7, r1, r0, lsl r1
    1278:	00000384 	andeq	r0, r0, r4, lsl #7
    127c:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    1280:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1284:	8e028b03 	vmlahi.f64	d8, d2, d3
    1288:	0b0c4201 	bleq	311a94 <mailbuffer+0x2d69a4>
    128c:	01bc0304 			; <UNDEFINED> instruction: 0x01bc0304
    1290:	00140d0c 	andseq	r0, r4, ip, lsl #26
    1294:	0000001c 	andeq	r0, r0, ip, lsl r0
    1298:	0000125c 	andeq	r1, r0, ip, asr r2
    129c:	00017494 	muleq	r1, r4, r4
    12a0:	00000090 	muleq	r0, r0, r0
    12a4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    12a8:	8b038504 	blhi	e26c0 <mailbuffer+0xa75d0>
    12ac:	42018e02 	andmi	r8, r1, #2, 28
    12b0:	00040b0c 	andeq	r0, r4, ip, lsl #22
    12b4:	00000020 	andeq	r0, r0, r0, lsr #32
    12b8:	0000125c 	andeq	r1, r0, ip, asr r2
    12bc:	00017524 	andeq	r7, r1, r4, lsr #10
    12c0:	000000bc 	strheq	r0, [r0], -ip
    12c4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    12c8:	8e028b03 	vmlahi.f64	d8, d2, d3
    12cc:	0b0c4201 	bleq	311ad8 <mailbuffer+0x2d69e8>
    12d0:	0c580204 	lfmeq	f0, 2, [r8], {4}
    12d4:	00000c0d 	andeq	r0, r0, sp, lsl #24
    12d8:	00000020 	andeq	r0, r0, r0, lsr #32
    12dc:	0000125c 	andeq	r1, r0, ip, asr r2
    12e0:	000175e0 	andeq	r7, r1, r0, ror #11
    12e4:	000000bc 	strheq	r0, [r0], -ip
    12e8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    12ec:	8e028b03 	vmlahi.f64	d8, d2, d3
    12f0:	0b0c4201 	bleq	311afc <mailbuffer+0x2d6a0c>
    12f4:	0c580204 	lfmeq	f0, 2, [r8], {4}
    12f8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    12fc:	00000020 	andeq	r0, r0, r0, lsr #32
    1300:	0000125c 	andeq	r1, r0, ip, asr r2
    1304:	0001769c 	muleq	r1, ip, r6
    1308:	000000bc 	strheq	r0, [r0], -ip
    130c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1310:	8e028b03 	vmlahi.f64	d8, d2, d3
    1314:	0b0c4201 	bleq	311b20 <mailbuffer+0x2d6a30>
    1318:	0c580204 	lfmeq	f0, 2, [r8], {4}
    131c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1320:	0000001c 	andeq	r0, r0, ip, lsl r0
    1324:	0000125c 	andeq	r1, r0, ip, asr r2
    1328:	00017758 	andeq	r7, r1, r8, asr r7
    132c:	00000090 	muleq	r0, r0, r0
    1330:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1334:	8b038504 	blhi	e274c <mailbuffer+0xa765c>
    1338:	42018e02 	andmi	r8, r1, #2, 28
    133c:	00040b0c 	andeq	r0, r4, ip, lsl #22
    1340:	00000020 	andeq	r0, r0, r0, lsr #32
    1344:	0000125c 	andeq	r1, r0, ip, asr r2
    1348:	000177e8 	andeq	r7, r1, r8, ror #15
    134c:	000000bc 	strheq	r0, [r0], -ip
    1350:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1354:	8e028b03 	vmlahi.f64	d8, d2, d3
    1358:	0b0c4201 	bleq	311b64 <mailbuffer+0x2d6a74>
    135c:	0c580204 	lfmeq	f0, 2, [r8], {4}
    1360:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1364:	00000020 	andeq	r0, r0, r0, lsr #32
    1368:	0000125c 	andeq	r1, r0, ip, asr r2
    136c:	000178a4 	andeq	r7, r1, r4, lsr #17
    1370:	000000c0 	andeq	r0, r0, r0, asr #1
    1374:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1378:	8b038504 	blhi	e2790 <mailbuffer+0xa76a0>
    137c:	42018e02 	andmi	r8, r1, #2, 28
    1380:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1384:	100d0c5a 	andne	r0, sp, sl, asr ip
    1388:	00000020 	andeq	r0, r0, r0, lsr #32
    138c:	0000125c 	andeq	r1, r0, ip, asr r2
    1390:	00017964 	andeq	r7, r1, r4, ror #18
    1394:	0000011c 	andeq	r0, r0, ip, lsl r1
    1398:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    139c:	8b038504 	blhi	e27b4 <mailbuffer+0xa76c4>
    13a0:	42018e02 	andmi	r8, r1, #2, 28
    13a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    13a8:	100d0c88 	andne	r0, sp, r8, lsl #25
    13ac:	00000020 	andeq	r0, r0, r0, lsr #32
    13b0:	0000125c 	andeq	r1, r0, ip, asr r2
    13b4:	00017a80 	andeq	r7, r1, r0, lsl #21
    13b8:	0000011c 	andeq	r0, r0, ip, lsl r1
    13bc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    13c0:	8b038504 	blhi	e27d8 <mailbuffer+0xa76e8>
    13c4:	42018e02 	andmi	r8, r1, #2, 28
    13c8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    13cc:	100d0c88 	andne	r0, sp, r8, lsl #25
    13d0:	00000020 	andeq	r0, r0, r0, lsr #32
    13d4:	0000125c 	andeq	r1, r0, ip, asr r2
    13d8:	00017b9c 	muleq	r1, ip, fp
    13dc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    13e0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    13e4:	8b038504 	blhi	e27fc <mailbuffer+0xa770c>
    13e8:	42018e02 	andmi	r8, r1, #2, 28
    13ec:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    13f0:	100d0c62 	andne	r0, sp, r2, ror #24
    13f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    13f8:	0000125c 	andeq	r1, r0, ip, asr r2
    13fc:	00017c6c 	andeq	r7, r1, ip, ror #24
    1400:	00000090 	muleq	r0, r0, r0
    1404:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1408:	8b038504 	blhi	e2820 <mailbuffer+0xa7730>
    140c:	42018e02 	andmi	r8, r1, #2, 28
    1410:	00040b0c 	andeq	r0, r4, ip, lsl #22
    1414:	00000020 	andeq	r0, r0, r0, lsr #32
    1418:	0000125c 	andeq	r1, r0, ip, asr r2
    141c:	00017cfc 	strdeq	r7, [r1], -ip
    1420:	000000ec 	andeq	r0, r0, ip, ror #1
    1424:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1428:	8e028b03 	vmlahi.f64	d8, d2, d3
    142c:	0b0c4201 	bleq	311c38 <mailbuffer+0x2d6b48>
    1430:	0c700204 	lfmeq	f0, 2, [r0], #-16
    1434:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1438:	00000020 	andeq	r0, r0, r0, lsr #32
    143c:	0000125c 	andeq	r1, r0, ip, asr r2
    1440:	00017de8 	andeq	r7, r1, r8, ror #27
    1444:	000000e4 	andeq	r0, r0, r4, ror #1
    1448:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    144c:	8b038504 	blhi	e2864 <mailbuffer+0xa7774>
    1450:	42018e02 	andmi	r8, r1, #2, 28
    1454:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1458:	100d0c6c 	andne	r0, sp, ip, ror #24
    145c:	00000020 	andeq	r0, r0, r0, lsr #32
    1460:	0000125c 	andeq	r1, r0, ip, asr r2
    1464:	00017ecc 	andeq	r7, r1, ip, asr #29
    1468:	000000e4 	andeq	r0, r0, r4, ror #1
    146c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1470:	8b038504 	blhi	e2888 <mailbuffer+0xa7798>
    1474:	42018e02 	andmi	r8, r1, #2, 28
    1478:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    147c:	100d0c6c 	andne	r0, sp, ip, ror #24
    1480:	00000020 	andeq	r0, r0, r0, lsr #32
    1484:	0000125c 	andeq	r1, r0, ip, asr r2
    1488:	00017fb0 			; <UNDEFINED> instruction: 0x00017fb0
    148c:	000000c8 	andeq	r0, r0, r8, asr #1
    1490:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1494:	8b038504 	blhi	e28ac <mailbuffer+0xa77bc>
    1498:	42018e02 	andmi	r8, r1, #2, 28
    149c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    14a0:	100d0c5e 	andne	r0, sp, lr, asr ip
    14a4:	00000020 	andeq	r0, r0, r0, lsr #32
    14a8:	0000125c 	andeq	r1, r0, ip, asr r2
    14ac:	00018078 	andeq	r8, r1, r8, ror r0
    14b0:	000000e8 	andeq	r0, r0, r8, ror #1
    14b4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    14b8:	8e028b03 	vmlahi.f64	d8, d2, d3
    14bc:	0b0c4201 	bleq	311cc8 <mailbuffer+0x2d6bd8>
    14c0:	0c6e0204 	sfmeq	f0, 2, [lr], #-16
    14c4:	00000c0d 	andeq	r0, r0, sp, lsl #24
    14c8:	00000020 	andeq	r0, r0, r0, lsr #32
    14cc:	0000125c 	andeq	r1, r0, ip, asr r2
    14d0:	00018160 	andeq	r8, r1, r0, ror #2
    14d4:	00000100 	andeq	r0, r0, r0, lsl #2
    14d8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    14dc:	8b038504 	blhi	e28f4 <mailbuffer+0xa7804>
    14e0:	42018e02 	andmi	r8, r1, #2, 28
    14e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    14e8:	100d0c7a 	andne	r0, sp, sl, ror ip
    14ec:	00000024 	andeq	r0, r0, r4, lsr #32
    14f0:	0000125c 	andeq	r1, r0, ip, asr r2
    14f4:	00018260 	andeq	r8, r1, r0, ror #4
    14f8:	00000274 	andeq	r0, r0, r4, ror r2
    14fc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1500:	8b038504 	blhi	e2918 <mailbuffer+0xa7828>
    1504:	42018e02 	andmi	r8, r1, #2, 28
    1508:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    150c:	0d0c0134 	stfeqs	f0, [ip, #-208]	; 0xffffff30
    1510:	00000010 	andeq	r0, r0, r0, lsl r0
    1514:	0000000c 	andeq	r0, r0, ip
    1518:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    151c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1520:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1524:	00000020 	andeq	r0, r0, r0, lsr #32
    1528:	00001514 	andeq	r1, r0, r4, lsl r5
    152c:	000184d4 	ldrdeq	r8, [r1], -r4
    1530:	000000d8 	ldrdeq	r0, [r0], -r8
    1534:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1538:	8e028b03 	vmlahi.f64	d8, d2, d3
    153c:	0b0c4201 	bleq	311d48 <mailbuffer+0x2d6c58>
    1540:	0c660204 	sfmeq	f0, 2, [r6], #-16
    1544:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1548:	00000020 	andeq	r0, r0, r0, lsr #32
    154c:	00001514 	andeq	r1, r0, r4, lsl r5
    1550:	000185ac 	andeq	r8, r1, ip, lsr #11
    1554:	00000054 	andeq	r0, r0, r4, asr r0
    1558:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    155c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1560:	0b0c4201 	bleq	311d6c <mailbuffer+0x2d6c7c>
    1564:	0d0c6404 	cfstrseq	mvf6, [ip, #-16]
    1568:	0000000c 	andeq	r0, r0, ip
    156c:	00000024 	andeq	r0, r0, r4, lsr #32
    1570:	00001514 	andeq	r1, r0, r4, lsl r5
    1574:	00018600 	andeq	r8, r1, r0, lsl #12
    1578:	000002d4 	ldrdeq	r0, [r0], -r4
    157c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1580:	8b038504 	blhi	e2998 <mailbuffer+0xa78a8>
    1584:	42018e02 	andmi	r8, r1, #2, 28
    1588:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    158c:	0d0c0164 	stfeqs	f0, [ip, #-400]	; 0xfffffe70
    1590:	00000010 	andeq	r0, r0, r0, lsl r0
    1594:	00000020 	andeq	r0, r0, r0, lsr #32
    1598:	00001514 	andeq	r1, r0, r4, lsl r5
    159c:	000188d4 	ldrdeq	r8, [r1], -r4
    15a0:	000000e8 	andeq	r0, r0, r8, ror #1
    15a4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    15a8:	8b038504 	blhi	e29c0 <mailbuffer+0xa78d0>
    15ac:	42018e02 	andmi	r8, r1, #2, 28
    15b0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    15b4:	100d0c6e 	andne	r0, sp, lr, ror #24
    15b8:	00000020 	andeq	r0, r0, r0, lsr #32
    15bc:	00001514 	andeq	r1, r0, r4, lsl r5
    15c0:	000189bc 			; <UNDEFINED> instruction: 0x000189bc
    15c4:	000000d4 	ldrdeq	r0, [r0], -r4
    15c8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    15cc:	8b038504 	blhi	e29e4 <mailbuffer+0xa78f4>
    15d0:	42018e02 	andmi	r8, r1, #2, 28
    15d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    15d8:	100d0c64 	andne	r0, sp, r4, ror #24
    15dc:	00000020 	andeq	r0, r0, r0, lsr #32
    15e0:	00001514 	andeq	r1, r0, r4, lsl r5
    15e4:	00018a90 	muleq	r1, r0, sl
    15e8:	000000d4 	ldrdeq	r0, [r0], -r4
    15ec:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    15f0:	8b038504 	blhi	e2a08 <mailbuffer+0xa7918>
    15f4:	42018e02 	andmi	r8, r1, #2, 28
    15f8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    15fc:	100d0c64 	andne	r0, sp, r4, ror #24
    1600:	00000020 	andeq	r0, r0, r0, lsr #32
    1604:	00001514 	andeq	r1, r0, r4, lsl r5
    1608:	00018b64 	andeq	r8, r1, r4, ror #22
    160c:	00000170 	andeq	r0, r0, r0, ror r1
    1610:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1614:	8b038504 	blhi	e2a2c <mailbuffer+0xa793c>
    1618:	42018e02 	andmi	r8, r1, #2, 28
    161c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1620:	100d0cb2 			; <UNDEFINED> instruction: 0x100d0cb2
    1624:	00000020 	andeq	r0, r0, r0, lsr #32
    1628:	00001514 	andeq	r1, r0, r4, lsl r5
    162c:	00018cd4 	ldrdeq	r8, [r1], -r4
    1630:	000000e4 	andeq	r0, r0, r4, ror #1
    1634:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1638:	8b038504 	blhi	e2a50 <mailbuffer+0xa7960>
    163c:	42018e02 	andmi	r8, r1, #2, 28
    1640:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1644:	100d0c6c 	andne	r0, sp, ip, ror #24
    1648:	00000024 	andeq	r0, r0, r4, lsr #32
    164c:	00001514 	andeq	r1, r0, r4, lsl r5
    1650:	00018db8 			; <UNDEFINED> instruction: 0x00018db8
    1654:	00000338 	andeq	r0, r0, r8, lsr r3
    1658:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    165c:	8b038504 	blhi	e2a74 <mailbuffer+0xa7984>
    1660:	42018e02 	andmi	r8, r1, #2, 28
    1664:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1668:	0d0c0196 	stfeqs	f0, [ip, #-600]	; 0xfffffda8
    166c:	00000010 	andeq	r0, r0, r0, lsl r0
    1670:	00000020 	andeq	r0, r0, r0, lsr #32
    1674:	00001514 	andeq	r1, r0, r4, lsl r5
    1678:	000190f0 	strdeq	r9, [r1], -r0
    167c:	00000164 	andeq	r0, r0, r4, ror #2
    1680:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1684:	8b038504 	blhi	e2a9c <mailbuffer+0xa79ac>
    1688:	42018e02 	andmi	r8, r1, #2, 28
    168c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1690:	100d0cac 	andne	r0, sp, ip, lsr #25
    1694:	00000024 	andeq	r0, r0, r4, lsr #32
    1698:	00001514 	andeq	r1, r0, r4, lsl r5
    169c:	00019254 	andeq	r9, r1, r4, asr r2
    16a0:	00000364 	andeq	r0, r0, r4, ror #6
    16a4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    16a8:	8b038504 	blhi	e2ac0 <mailbuffer+0xa79d0>
    16ac:	42018e02 	andmi	r8, r1, #2, 28
    16b0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    16b4:	0d0c01ac 	stfeqs	f0, [ip, #-688]	; 0xfffffd50
    16b8:	00000010 	andeq	r0, r0, r0, lsl r0
    16bc:	00000024 	andeq	r0, r0, r4, lsr #32
    16c0:	00001514 	andeq	r1, r0, r4, lsl r5
    16c4:	000195b8 			; <UNDEFINED> instruction: 0x000195b8
    16c8:	0000030c 	andeq	r0, r0, ip, lsl #6
    16cc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    16d0:	8b038504 	blhi	e2ae8 <mailbuffer+0xa79f8>
    16d4:	42018e02 	andmi	r8, r1, #2, 28
    16d8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    16dc:	0d0c0180 	stfeqs	f0, [ip, #-512]	; 0xfffffe00
    16e0:	00000010 	andeq	r0, r0, r0, lsl r0
    16e4:	00000020 	andeq	r0, r0, r0, lsr #32
    16e8:	00001514 	andeq	r1, r0, r4, lsl r5
    16ec:	000198c4 	andeq	r9, r1, r4, asr #17
    16f0:	0000015c 	andeq	r0, r0, ip, asr r1
    16f4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    16f8:	8b038504 	blhi	e2b10 <mailbuffer+0xa7a20>
    16fc:	42018e02 	andmi	r8, r1, #2, 28
    1700:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1704:	100d0ca8 	andne	r0, sp, r8, lsr #25
    1708:	00000020 	andeq	r0, r0, r0, lsr #32
    170c:	00001514 	andeq	r1, r0, r4, lsl r5
    1710:	00019a20 	andeq	r9, r1, r0, lsr #20
    1714:	0000013c 	andeq	r0, r0, ip, lsr r1
    1718:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    171c:	8b038504 	blhi	e2b34 <mailbuffer+0xa7a44>
    1720:	42018e02 	andmi	r8, r1, #2, 28
    1724:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1728:	100d0c98 	mulne	sp, r8, ip
    172c:	00000020 	andeq	r0, r0, r0, lsr #32
    1730:	00001514 	andeq	r1, r0, r4, lsl r5
    1734:	00019b5c 	andeq	r9, r1, ip, asr fp
    1738:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    173c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1740:	8e028b03 	vmlahi.f64	d8, d2, d3
    1744:	0b0c4201 	bleq	311f50 <mailbuffer+0x2d6e60>
    1748:	0c520204 	lfmeq	f0, 2, [r2], {4}
    174c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1750:	00000020 	andeq	r0, r0, r0, lsr #32
    1754:	00001514 	andeq	r1, r0, r4, lsl r5
    1758:	00019c0c 	andeq	r9, r1, ip, lsl #24
    175c:	000000a0 	andeq	r0, r0, r0, lsr #1
    1760:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1764:	8e028b03 	vmlahi.f64	d8, d2, d3
    1768:	0b0c4201 	bleq	311f74 <mailbuffer+0x2d6e84>
    176c:	0c4a0204 	sfmeq	f0, 2, [sl], {4}
    1770:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1774:	00000020 	andeq	r0, r0, r0, lsr #32
    1778:	00001514 	andeq	r1, r0, r4, lsl r5
    177c:	00019cac 	andeq	r9, r1, ip, lsr #25
    1780:	000000c8 	andeq	r0, r0, r8, asr #1
    1784:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1788:	8e028b03 	vmlahi.f64	d8, d2, d3
    178c:	0b0c4201 	bleq	311f98 <mailbuffer+0x2d6ea8>
    1790:	0c5e0204 	lfmeq	f0, 2, [lr], {4}
    1794:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1798:	00000020 	andeq	r0, r0, r0, lsr #32
    179c:	00001514 	andeq	r1, r0, r4, lsl r5
    17a0:	00019d74 	andeq	r9, r1, r4, ror sp
    17a4:	000000cc 	andeq	r0, r0, ip, asr #1
    17a8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    17ac:	8e028b03 	vmlahi.f64	d8, d2, d3
    17b0:	0b0c4201 	bleq	311fbc <mailbuffer+0x2d6ecc>
    17b4:	0c600204 	sfmeq	f0, 2, [r0], #-16
    17b8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    17bc:	00000020 	andeq	r0, r0, r0, lsr #32
    17c0:	00001514 	andeq	r1, r0, r4, lsl r5
    17c4:	00019e40 	andeq	r9, r1, r0, asr #28
    17c8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    17cc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    17d0:	8e028b03 	vmlahi.f64	d8, d2, d3
    17d4:	0b0c4201 	bleq	311fe0 <mailbuffer+0x2d6ef0>
    17d8:	0c620204 	sfmeq	f0, 2, [r2], #-16
    17dc:	00000c0d 	andeq	r0, r0, sp, lsl #24
    17e0:	00000020 	andeq	r0, r0, r0, lsr #32
    17e4:	00001514 	andeq	r1, r0, r4, lsl r5
    17e8:	00019f10 	andeq	r9, r1, r0, lsl pc
    17ec:	00000108 	andeq	r0, r0, r8, lsl #2
    17f0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    17f4:	8e028b03 	vmlahi.f64	d8, d2, d3
    17f8:	0b0c4201 	bleq	312004 <mailbuffer+0x2d6f14>
    17fc:	0c7e0204 	lfmeq	f0, 2, [lr], #-16
    1800:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1804:	00000020 	andeq	r0, r0, r0, lsr #32
    1808:	00001514 	andeq	r1, r0, r4, lsl r5
    180c:	0001a018 	andeq	sl, r1, r8, lsl r0
    1810:	000000dc 	ldrdeq	r0, [r0], -ip
    1814:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1818:	8e028b03 	vmlahi.f64	d8, d2, d3
    181c:	0b0c4201 	bleq	312028 <mailbuffer+0x2d6f38>
    1820:	0c680204 	sfmeq	f0, 2, [r8], #-16
    1824:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1828:	00000020 	andeq	r0, r0, r0, lsr #32
    182c:	00001514 	andeq	r1, r0, r4, lsl r5
    1830:	0001a0f4 	strdeq	sl, [r1], -r4
    1834:	00000140 	andeq	r0, r0, r0, asr #2
    1838:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    183c:	8b038504 	blhi	e2c54 <mailbuffer+0xa7b64>
    1840:	42018e02 	andmi	r8, r1, #2, 28
    1844:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1848:	100d0c9a 	mulne	sp, sl, ip
    184c:	00000020 	andeq	r0, r0, r0, lsr #32
    1850:	00001514 	andeq	r1, r0, r4, lsl r5
    1854:	0001a234 	andeq	sl, r1, r4, lsr r2
    1858:	00000084 	andeq	r0, r0, r4, lsl #1
    185c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1860:	8e028b03 	vmlahi.f64	d8, d2, d3
    1864:	0b0c4201 	bleq	312070 <mailbuffer+0x2d6f80>
    1868:	0d0c7c04 	stceq	12, cr7, [ip, #-16]
    186c:	0000000c 	andeq	r0, r0, ip
    1870:	00000024 	andeq	r0, r0, r4, lsr #32
    1874:	00001514 	andeq	r1, r0, r4, lsl r5
    1878:	0001a2b8 			; <UNDEFINED> instruction: 0x0001a2b8
    187c:	0000024c 	andeq	r0, r0, ip, asr #4
    1880:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1884:	8b038504 	blhi	e2c9c <mailbuffer+0xa7bac>
    1888:	42018e02 	andmi	r8, r1, #2, 28
    188c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1890:	0d0c0120 	stfeqs	f0, [ip, #-128]	; 0xffffff80
    1894:	00000010 	andeq	r0, r0, r0, lsl r0
    1898:	00000020 	andeq	r0, r0, r0, lsr #32
    189c:	00001514 	andeq	r1, r0, r4, lsl r5
    18a0:	0001a504 	andeq	sl, r1, r4, lsl #10
    18a4:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    18a8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    18ac:	8e028b03 	vmlahi.f64	d8, d2, d3
    18b0:	0b0c4201 	bleq	3120bc <mailbuffer+0x2d6fcc>
    18b4:	0cd40204 	lfmeq	f0, 2, [r4], {4}
    18b8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    18bc:	00000024 	andeq	r0, r0, r4, lsr #32
    18c0:	00001514 	andeq	r1, r0, r4, lsl r5
    18c4:	0001a6b8 			; <UNDEFINED> instruction: 0x0001a6b8
    18c8:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    18cc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    18d0:	8b038504 	blhi	e2ce8 <mailbuffer+0xa7bf8>
    18d4:	42018e02 	andmi	r8, r1, #2, 28
    18d8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    18dc:	0d0c02d8 	sfmeq	f0, 4, [ip, #-864]	; 0xfffffca0
    18e0:	00000010 	andeq	r0, r0, r0, lsl r0
    18e4:	00000024 	andeq	r0, r0, r4, lsr #32
    18e8:	00001514 	andeq	r1, r0, r4, lsl r5
    18ec:	0001ac74 	andeq	sl, r1, r4, ror ip
    18f0:	000007a4 	andeq	r0, r0, r4, lsr #15
    18f4:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    18f8:	86048505 	strhi	r8, [r4], -r5, lsl #10
    18fc:	8e028b03 	vmlahi.f64	d8, d2, d3
    1900:	0b0c4201 	bleq	31210c <mailbuffer+0x2d701c>
    1904:	03cc0304 	biceq	r0, ip, #4, 6	; 0x10000000
    1908:	00140d0c 	andseq	r0, r4, ip, lsl #26
    190c:	00000020 	andeq	r0, r0, r0, lsr #32
    1910:	00001514 	andeq	r1, r0, r4, lsl r5
    1914:	0001b418 	andeq	fp, r1, r8, lsl r4
    1918:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    191c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1920:	8e028b03 	vmlahi.f64	d8, d2, d3
    1924:	0b0c4201 	bleq	312130 <mailbuffer+0x2d7040>
    1928:	0cd20204 	lfmeq	f0, 2, [r2], {4}
    192c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1930:	00000020 	andeq	r0, r0, r0, lsr #32
    1934:	00001514 	andeq	r1, r0, r4, lsl r5
    1938:	0001b5c8 	andeq	fp, r1, r8, asr #11
    193c:	00000184 	andeq	r0, r0, r4, lsl #3
    1940:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1944:	8e028b03 	vmlahi.f64	d8, d2, d3
    1948:	0b0c4201 	bleq	312154 <mailbuffer+0x2d7064>
    194c:	0cbc0204 	lfmeq	f0, 4, [ip], #16
    1950:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1954:	00000020 	andeq	r0, r0, r0, lsr #32
    1958:	00001514 	andeq	r1, r0, r4, lsl r5
    195c:	0001b74c 	andeq	fp, r1, ip, asr #14
    1960:	000000f8 	strdeq	r0, [r0], -r8
    1964:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1968:	8b038504 	blhi	e2d80 <mailbuffer+0xa7c90>
    196c:	42018e02 	andmi	r8, r1, #2, 28
    1970:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1974:	100d0c76 	andne	r0, sp, r6, ror ip
    1978:	00000020 	andeq	r0, r0, r0, lsr #32
    197c:	00001514 	andeq	r1, r0, r4, lsl r5
    1980:	0001b844 	andeq	fp, r1, r4, asr #16
    1984:	000000fc 	strdeq	r0, [r0], -ip
    1988:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    198c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1990:	0b0c4201 	bleq	31219c <mailbuffer+0x2d70ac>
    1994:	0c780204 	lfmeq	f0, 2, [r8], #-16
    1998:	00000c0d 	andeq	r0, r0, sp, lsl #24
    199c:	00000020 	andeq	r0, r0, r0, lsr #32
    19a0:	00001514 	andeq	r1, r0, r4, lsl r5
    19a4:	0001b940 	andeq	fp, r1, r0, asr #18
    19a8:	00000168 	andeq	r0, r0, r8, ror #2
    19ac:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    19b0:	8b038504 	blhi	e2dc8 <mailbuffer+0xa7cd8>
    19b4:	42018e02 	andmi	r8, r1, #2, 28
    19b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    19bc:	100d0cae 	andne	r0, sp, lr, lsr #25
    19c0:	00000020 	andeq	r0, r0, r0, lsr #32
    19c4:	00001514 	andeq	r1, r0, r4, lsl r5
    19c8:	0001baa8 	andeq	fp, r1, r8, lsr #21
    19cc:	000000f4 	strdeq	r0, [r0], -r4
    19d0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    19d4:	8b038504 	blhi	e2dec <mailbuffer+0xa7cfc>
    19d8:	42018e02 	andmi	r8, r1, #2, 28
    19dc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    19e0:	100d0c74 	andne	r0, sp, r4, ror ip
    19e4:	00000020 	andeq	r0, r0, r0, lsr #32
    19e8:	00001514 	andeq	r1, r0, r4, lsl r5
    19ec:	0001bb9c 	muleq	r1, ip, fp
    19f0:	000000c4 	andeq	r0, r0, r4, asr #1
    19f4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    19f8:	8b038504 	blhi	e2e10 <mailbuffer+0xa7d20>
    19fc:	42018e02 	andmi	r8, r1, #2, 28
    1a00:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1a04:	100d0c5c 	andne	r0, sp, ip, asr ip
    1a08:	00000020 	andeq	r0, r0, r0, lsr #32
    1a0c:	00001514 	andeq	r1, r0, r4, lsl r5
    1a10:	0001bc60 	andeq	fp, r1, r0, ror #24
    1a14:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1a18:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1a1c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1a20:	0b0c4201 	bleq	31222c <mailbuffer+0x2d713c>
    1a24:	0c520204 	lfmeq	f0, 2, [r2], {4}
    1a28:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1a2c:	00000020 	andeq	r0, r0, r0, lsr #32
    1a30:	00001514 	andeq	r1, r0, r4, lsl r5
    1a34:	0001bd10 	andeq	fp, r1, r0, lsl sp
    1a38:	000000c4 	andeq	r0, r0, r4, asr #1
    1a3c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1a40:	8e028b03 	vmlahi.f64	d8, d2, d3
    1a44:	0b0c4201 	bleq	312250 <mailbuffer+0x2d7160>
    1a48:	0c5c0204 	lfmeq	f0, 2, [ip], {4}
    1a4c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1a50:	00000020 	andeq	r0, r0, r0, lsr #32
    1a54:	00001514 	andeq	r1, r0, r4, lsl r5
    1a58:	0001bdd4 	ldrdeq	fp, [r1], -r4
    1a5c:	000002c4 	andeq	r0, r0, r4, asr #5
    1a60:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1a64:	8e028b03 	vmlahi.f64	d8, d2, d3
    1a68:	0b0c4201 	bleq	312274 <mailbuffer+0x2d7184>
    1a6c:	015c0304 	cmpeq	ip, r4, lsl #6
    1a70:	000c0d0c 	andeq	r0, ip, ip, lsl #26
    1a74:	0000000c 	andeq	r0, r0, ip
    1a78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1a7c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1a80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1a84:	00000020 	andeq	r0, r0, r0, lsr #32
    1a88:	00001a74 	andeq	r1, r0, r4, ror sl
    1a8c:	0001c098 	muleq	r1, r8, r0
    1a90:	00000084 	andeq	r0, r0, r4, lsl #1
    1a94:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1a98:	8e028b03 	vmlahi.f64	d8, d2, d3
    1a9c:	0b0c4201 	bleq	3122a8 <mailbuffer+0x2d71b8>
    1aa0:	0d0c7c04 	stceq	12, cr7, [ip, #-16]
    1aa4:	0000000c 	andeq	r0, r0, ip
    1aa8:	00000020 	andeq	r0, r0, r0, lsr #32
    1aac:	00001a74 	andeq	r1, r0, r4, ror sl
    1ab0:	0001c11c 	andeq	ip, r1, ip, lsl r1
    1ab4:	00000094 	muleq	r0, r4, r0
    1ab8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1abc:	8e028b03 	vmlahi.f64	d8, d2, d3
    1ac0:	0b0c4201 	bleq	3122cc <mailbuffer+0x2d71dc>
    1ac4:	0c440204 	sfmeq	f0, 2, [r4], {4}
    1ac8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1acc:	00000020 	andeq	r0, r0, r0, lsr #32
    1ad0:	00001a74 	andeq	r1, r0, r4, ror sl
    1ad4:	0001c1b0 			; <UNDEFINED> instruction: 0x0001c1b0
    1ad8:	00000074 	andeq	r0, r0, r4, ror r0
    1adc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1ae0:	8e028b03 	vmlahi.f64	d8, d2, d3
    1ae4:	0b0c4201 	bleq	3122f0 <mailbuffer+0x2d7200>
    1ae8:	0d0c7404 	cfstrseq	mvf7, [ip, #-16]
    1aec:	0000000c 	andeq	r0, r0, ip
    1af0:	00000020 	andeq	r0, r0, r0, lsr #32
    1af4:	00001a74 	andeq	r1, r0, r4, ror sl
    1af8:	0001c224 	andeq	ip, r1, r4, lsr #4
    1afc:	00000098 	muleq	r0, r8, r0
    1b00:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1b04:	8b038504 	blhi	e2f1c <mailbuffer+0xa7e2c>
    1b08:	42018e02 	andmi	r8, r1, #2, 28
    1b0c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1b10:	100d0c46 	andne	r0, sp, r6, asr #24
    1b14:	00000020 	andeq	r0, r0, r0, lsr #32
    1b18:	00001a74 	andeq	r1, r0, r4, ror sl
    1b1c:	0001c2bc 			; <UNDEFINED> instruction: 0x0001c2bc
    1b20:	000000a8 	andeq	r0, r0, r8, lsr #1
    1b24:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1b28:	8e028b03 	vmlahi.f64	d8, d2, d3
    1b2c:	0b0c4201 	bleq	312338 <mailbuffer+0x2d7248>
    1b30:	0c4e0204 	sfmeq	f0, 2, [lr], {4}
    1b34:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1b38:	00000020 	andeq	r0, r0, r0, lsr #32
    1b3c:	00001a74 	andeq	r1, r0, r4, ror sl
    1b40:	0001c364 	andeq	ip, r1, r4, ror #6
    1b44:	000000a0 	andeq	r0, r0, r0, lsr #1
    1b48:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1b4c:	8b038504 	blhi	e2f64 <mailbuffer+0xa7e74>
    1b50:	42018e02 	andmi	r8, r1, #2, 28
    1b54:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1b58:	100d0c4a 	andne	r0, sp, sl, asr #24
    1b5c:	00000020 	andeq	r0, r0, r0, lsr #32
    1b60:	00001a74 	andeq	r1, r0, r4, ror sl
    1b64:	0001c404 	andeq	ip, r1, r4, lsl #8
    1b68:	00000084 	andeq	r0, r0, r4, lsl #1
    1b6c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1b70:	8e028b03 	vmlahi.f64	d8, d2, d3
    1b74:	0b0c4201 	bleq	312380 <mailbuffer+0x2d7290>
    1b78:	0d0c7c04 	stceq	12, cr7, [ip, #-16]
    1b7c:	0000000c 	andeq	r0, r0, ip
    1b80:	00000020 	andeq	r0, r0, r0, lsr #32
    1b84:	00001a74 	andeq	r1, r0, r4, ror sl
    1b88:	0001c488 	andeq	ip, r1, r8, lsl #9
    1b8c:	000000c0 	andeq	r0, r0, r0, asr #1
    1b90:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1b94:	8b038504 	blhi	e2fac <mailbuffer+0xa7ebc>
    1b98:	42018e02 	andmi	r8, r1, #2, 28
    1b9c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1ba0:	100d0c5a 	andne	r0, sp, sl, asr ip
    1ba4:	00000020 	andeq	r0, r0, r0, lsr #32
    1ba8:	00001a74 	andeq	r1, r0, r4, ror sl
    1bac:	0001c548 	andeq	ip, r1, r8, asr #10
    1bb0:	000000ac 	andeq	r0, r0, ip, lsr #1
    1bb4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1bb8:	8e028b03 	vmlahi.f64	d8, d2, d3
    1bbc:	0b0c4201 	bleq	3123c8 <mailbuffer+0x2d72d8>
    1bc0:	0c500204 	lfmeq	f0, 2, [r0], {4}
    1bc4:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1bc8:	00000020 	andeq	r0, r0, r0, lsr #32
    1bcc:	00001a74 	andeq	r1, r0, r4, ror sl
    1bd0:	0001c5f4 	strdeq	ip, [r1], -r4
    1bd4:	000000ac 	andeq	r0, r0, ip, lsr #1
    1bd8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1bdc:	8e028b03 	vmlahi.f64	d8, d2, d3
    1be0:	0b0c4201 	bleq	3123ec <mailbuffer+0x2d72fc>
    1be4:	0c500204 	lfmeq	f0, 2, [r0], {4}
    1be8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1bec:	00000020 	andeq	r0, r0, r0, lsr #32
    1bf0:	00001a74 	andeq	r1, r0, r4, ror sl
    1bf4:	0001c6a0 	andeq	ip, r1, r0, lsr #13
    1bf8:	000000dc 	ldrdeq	r0, [r0], -ip
    1bfc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1c00:	8e028b03 	vmlahi.f64	d8, d2, d3
    1c04:	0b0c4201 	bleq	312410 <mailbuffer+0x2d7320>
    1c08:	0c680204 	sfmeq	f0, 2, [r8], #-16
    1c0c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1c10:	00000020 	andeq	r0, r0, r0, lsr #32
    1c14:	00001a74 	andeq	r1, r0, r4, ror sl
    1c18:	0001c77c 	andeq	ip, r1, ip, ror r7
    1c1c:	000000d8 	ldrdeq	r0, [r0], -r8
    1c20:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1c24:	8e028b03 	vmlahi.f64	d8, d2, d3
    1c28:	0b0c4201 	bleq	312434 <mailbuffer+0x2d7344>
    1c2c:	0c660204 	sfmeq	f0, 2, [r6], #-16
    1c30:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1c34:	00000020 	andeq	r0, r0, r0, lsr #32
    1c38:	00001a74 	andeq	r1, r0, r4, ror sl
    1c3c:	0001c854 	andeq	ip, r1, r4, asr r8
    1c40:	00000080 	andeq	r0, r0, r0, lsl #1
    1c44:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1c48:	8e028b03 	vmlahi.f64	d8, d2, d3
    1c4c:	0b0c4201 	bleq	312458 <mailbuffer+0x2d7368>
    1c50:	0d0c7a04 	vstreq	s14, [ip, #-16]
    1c54:	0000000c 	andeq	r0, r0, ip
    1c58:	00000020 	andeq	r0, r0, r0, lsr #32
    1c5c:	00001a74 	andeq	r1, r0, r4, ror sl
    1c60:	0001c8d4 	ldrdeq	ip, [r1], -r4
    1c64:	00000080 	andeq	r0, r0, r0, lsl #1
    1c68:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1c6c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1c70:	0b0c4201 	bleq	31247c <mailbuffer+0x2d738c>
    1c74:	0d0c7a04 	vstreq	s14, [ip, #-16]
    1c78:	0000000c 	andeq	r0, r0, ip
    1c7c:	00000020 	andeq	r0, r0, r0, lsr #32
    1c80:	00001a74 	andeq	r1, r0, r4, ror sl
    1c84:	0001c954 	andeq	ip, r1, r4, asr r9
    1c88:	000000d4 	ldrdeq	r0, [r0], -r4
    1c8c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1c90:	8e028b03 	vmlahi.f64	d8, d2, d3
    1c94:	0b0c4201 	bleq	3124a0 <mailbuffer+0x2d73b0>
    1c98:	0c640204 	sfmeq	f0, 2, [r4], #-16
    1c9c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1ca0:	0000000c 	andeq	r0, r0, ip
    1ca4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1ca8:	7c020001 	stcvc	0, cr0, [r2], {1}
    1cac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1cb0:	00000024 	andeq	r0, r0, r4, lsr #32
    1cb4:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1cb8:	0001ca28 	andeq	ip, r1, r8, lsr #20
    1cbc:	0000057c 	andeq	r0, r0, ip, ror r5
    1cc0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1cc4:	8b038504 	blhi	e30dc <mailbuffer+0xa7fec>
    1cc8:	42018e02 	andmi	r8, r1, #2, 28
    1ccc:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1cd0:	0d0c02b8 	sfmeq	f0, 4, [ip, #-736]	; 0xfffffd20
    1cd4:	00000010 	andeq	r0, r0, r0, lsl r0
    1cd8:	00000020 	andeq	r0, r0, r0, lsr #32
    1cdc:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1ce0:	0001cfa4 	andeq	ip, r1, r4, lsr #31
    1ce4:	0000010c 	andeq	r0, r0, ip, lsl #2
    1ce8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1cec:	8e028b03 	vmlahi.f64	d8, d2, d3
    1cf0:	0b0c4201 	bleq	3124fc <mailbuffer+0x2d740c>
    1cf4:	0c800204 	sfmeq	f0, 4, [r0], {4}
    1cf8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1cfc:	00000024 	andeq	r0, r0, r4, lsr #32
    1d00:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1d04:	0001d0b0 	strheq	sp, [r1], -r0
    1d08:	00000240 	andeq	r0, r0, r0, asr #4
    1d0c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1d10:	8b038504 	blhi	e3128 <mailbuffer+0xa8038>
    1d14:	42018e02 	andmi	r8, r1, #2, 28
    1d18:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1d1c:	0d0c011a 	stfeqs	f0, [ip, #-104]	; 0xffffff98
    1d20:	00000010 	andeq	r0, r0, r0, lsl r0
    1d24:	00000020 	andeq	r0, r0, r0, lsr #32
    1d28:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1d2c:	0001d2f0 	strdeq	sp, [r1], -r0
    1d30:	000000a0 	andeq	r0, r0, r0, lsr #1
    1d34:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1d38:	8e028b03 	vmlahi.f64	d8, d2, d3
    1d3c:	0b0c4201 	bleq	312548 <mailbuffer+0x2d7458>
    1d40:	0c4a0204 	sfmeq	f0, 2, [sl], {4}
    1d44:	00000c0d 	andeq	r0, r0, sp, lsl #24
    1d48:	00000020 	andeq	r0, r0, r0, lsr #32
    1d4c:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1d50:	0001d390 	muleq	r1, r0, r3
    1d54:	00000078 	andeq	r0, r0, r8, ror r0
    1d58:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1d5c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1d60:	0b0c4201 	bleq	31256c <mailbuffer+0x2d747c>
    1d64:	0d0c7604 	stceq	6, cr7, [ip, #-16]
    1d68:	0000000c 	andeq	r0, r0, ip
    1d6c:	00000020 	andeq	r0, r0, r0, lsr #32
    1d70:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1d74:	0001d408 	andeq	sp, r1, r8, lsl #8
    1d78:	00000078 	andeq	r0, r0, r8, ror r0
    1d7c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1d80:	8b038504 	blhi	e3198 <mailbuffer+0xa80a8>
    1d84:	42018e02 	andmi	r8, r1, #2, 28
    1d88:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    1d8c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1d90:	00000020 	andeq	r0, r0, r0, lsr #32
    1d94:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1d98:	0001d480 	andeq	sp, r1, r0, lsl #9
    1d9c:	00000078 	andeq	r0, r0, r8, ror r0
    1da0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1da4:	8e028b03 	vmlahi.f64	d8, d2, d3
    1da8:	0b0c4201 	bleq	3125b4 <mailbuffer+0x2d74c4>
    1dac:	0d0c7604 	stceq	6, cr7, [ip, #-16]
    1db0:	0000000c 	andeq	r0, r0, ip
    1db4:	00000020 	andeq	r0, r0, r0, lsr #32
    1db8:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1dbc:	0001d4f8 	strdeq	sp, [r1], -r8
    1dc0:	00000078 	andeq	r0, r0, r8, ror r0
    1dc4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1dc8:	8b038504 	blhi	e31e0 <mailbuffer+0xa80f0>
    1dcc:	42018e02 	andmi	r8, r1, #2, 28
    1dd0:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    1dd4:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1dd8:	00000020 	andeq	r0, r0, r0, lsr #32
    1ddc:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1de0:	0001d570 	andeq	sp, r1, r0, ror r5
    1de4:	00000050 	andeq	r0, r0, r0, asr r0
    1de8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1dec:	8b038504 	blhi	e3204 <mailbuffer+0xa8114>
    1df0:	42018e02 	andmi	r8, r1, #2, 28
    1df4:	62040b0c 	andvs	r0, r4, #12, 22	; 0x3000
    1df8:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1dfc:	00000020 	andeq	r0, r0, r0, lsr #32
    1e00:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1e04:	0001d5c0 	andeq	sp, r1, r0, asr #11
    1e08:	00000078 	andeq	r0, r0, r8, ror r0
    1e0c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1e10:	8b038504 	blhi	e3228 <mailbuffer+0xa8138>
    1e14:	42018e02 	andmi	r8, r1, #2, 28
    1e18:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    1e1c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1e20:	00000020 	andeq	r0, r0, r0, lsr #32
    1e24:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1e28:	0001d638 	andeq	sp, r1, r8, lsr r6
    1e2c:	000000d4 	ldrdeq	r0, [r0], -r4
    1e30:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1e34:	8b038504 	blhi	e324c <mailbuffer+0xa815c>
    1e38:	42018e02 	andmi	r8, r1, #2, 28
    1e3c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1e40:	100d0c64 	andne	r0, sp, r4, ror #24
    1e44:	00000020 	andeq	r0, r0, r0, lsr #32
    1e48:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1e4c:	0001d70c 	andeq	sp, r1, ip, lsl #14
    1e50:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1e54:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1e58:	8b038504 	blhi	e3270 <mailbuffer+0xa8180>
    1e5c:	42018e02 	andmi	r8, r1, #2, 28
    1e60:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1e64:	100d0c52 	andne	r0, sp, r2, asr ip
    1e68:	00000020 	andeq	r0, r0, r0, lsr #32
    1e6c:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1e70:	0001d7bc 			; <UNDEFINED> instruction: 0x0001d7bc
    1e74:	00000114 	andeq	r0, r0, r4, lsl r1
    1e78:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1e7c:	8b038504 	blhi	e3294 <mailbuffer+0xa81a4>
    1e80:	42018e02 	andmi	r8, r1, #2, 28
    1e84:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1e88:	100d0c84 	andne	r0, sp, r4, lsl #25
    1e8c:	00000020 	andeq	r0, r0, r0, lsr #32
    1e90:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1e94:	0001d8d0 	ldrdeq	sp, [r1], -r0
    1e98:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1e9c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1ea0:	8b038504 	blhi	e32b8 <mailbuffer+0xa81c8>
    1ea4:	42018e02 	andmi	r8, r1, #2, 28
    1ea8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1eac:	100d0c52 	andne	r0, sp, r2, asr ip
    1eb0:	00000020 	andeq	r0, r0, r0, lsr #32
    1eb4:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1eb8:	0001d980 	andeq	sp, r1, r0, lsl #19
    1ebc:	00000078 	andeq	r0, r0, r8, ror r0
    1ec0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1ec4:	8b038504 	blhi	e32dc <mailbuffer+0xa81ec>
    1ec8:	42018e02 	andmi	r8, r1, #2, 28
    1ecc:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    1ed0:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1ed4:	00000020 	andeq	r0, r0, r0, lsr #32
    1ed8:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1edc:	0001d9f8 	strdeq	sp, [r1], -r8
    1ee0:	00000078 	andeq	r0, r0, r8, ror r0
    1ee4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1ee8:	8b038504 	blhi	e3300 <mailbuffer+0xa8210>
    1eec:	42018e02 	andmi	r8, r1, #2, 28
    1ef0:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    1ef4:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1ef8:	00000020 	andeq	r0, r0, r0, lsr #32
    1efc:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1f00:	0001da70 	andeq	sp, r1, r0, ror sl
    1f04:	0000011c 	andeq	r0, r0, ip, lsl r1
    1f08:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1f0c:	8b038504 	blhi	e3324 <mailbuffer+0xa8234>
    1f10:	42018e02 	andmi	r8, r1, #2, 28
    1f14:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1f18:	100d0c88 	andne	r0, sp, r8, lsl #25
    1f1c:	00000020 	andeq	r0, r0, r0, lsr #32
    1f20:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1f24:	0001db8c 	andeq	sp, r1, ip, lsl #23
    1f28:	00000078 	andeq	r0, r0, r8, ror r0
    1f2c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1f30:	8b038504 	blhi	e3348 <mailbuffer+0xa8258>
    1f34:	42018e02 	andmi	r8, r1, #2, 28
    1f38:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    1f3c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1f40:	00000020 	andeq	r0, r0, r0, lsr #32
    1f44:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1f48:	0001dc04 	andeq	sp, r1, r4, lsl #24
    1f4c:	00000078 	andeq	r0, r0, r8, ror r0
    1f50:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1f54:	8b038504 	blhi	e336c <mailbuffer+0xa827c>
    1f58:	42018e02 	andmi	r8, r1, #2, 28
    1f5c:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    1f60:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1f64:	00000020 	andeq	r0, r0, r0, lsr #32
    1f68:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1f6c:	0001dc7c 	andeq	sp, r1, ip, ror ip
    1f70:	000000a4 	andeq	r0, r0, r4, lsr #1
    1f74:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1f78:	8b038504 	blhi	e3390 <mailbuffer+0xa82a0>
    1f7c:	42018e02 	andmi	r8, r1, #2, 28
    1f80:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1f84:	100d0c4c 	andne	r0, sp, ip, asr #24
    1f88:	00000020 	andeq	r0, r0, r0, lsr #32
    1f8c:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1f90:	0001dd20 	andeq	sp, r1, r0, lsr #26
    1f94:	00000078 	andeq	r0, r0, r8, ror r0
    1f98:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1f9c:	8b038504 	blhi	e33b4 <mailbuffer+0xa82c4>
    1fa0:	42018e02 	andmi	r8, r1, #2, 28
    1fa4:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    1fa8:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1fac:	00000020 	andeq	r0, r0, r0, lsr #32
    1fb0:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1fb4:	0001dd98 	muleq	r1, r8, sp
    1fb8:	00000078 	andeq	r0, r0, r8, ror r0
    1fbc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1fc0:	8b038504 	blhi	e33d8 <mailbuffer+0xa82e8>
    1fc4:	42018e02 	andmi	r8, r1, #2, 28
    1fc8:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    1fcc:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1fd0:	00000020 	andeq	r0, r0, r0, lsr #32
    1fd4:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1fd8:	0001de10 	andeq	sp, r1, r0, lsl lr
    1fdc:	00000078 	andeq	r0, r0, r8, ror r0
    1fe0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1fe4:	8b038504 	blhi	e33fc <mailbuffer+0xa830c>
    1fe8:	42018e02 	andmi	r8, r1, #2, 28
    1fec:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    1ff0:	00100d0c 	andseq	r0, r0, ip, lsl #26
    1ff4:	00000020 	andeq	r0, r0, r0, lsr #32
    1ff8:	00001ca0 	andeq	r1, r0, r0, lsr #25
    1ffc:	0001de88 	andeq	sp, r1, r8, lsl #29
    2000:	000000a0 	andeq	r0, r0, r0, lsr #1
    2004:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2008:	8b038504 	blhi	e3420 <mailbuffer+0xa8330>
    200c:	42018e02 	andmi	r8, r1, #2, 28
    2010:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2014:	100d0c4a 	andne	r0, sp, sl, asr #24
    2018:	00000020 	andeq	r0, r0, r0, lsr #32
    201c:	00001ca0 	andeq	r1, r0, r0, lsr #25
    2020:	0001df28 	andeq	sp, r1, r8, lsr #30
    2024:	000000d8 	ldrdeq	r0, [r0], -r8
    2028:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    202c:	8b038504 	blhi	e3444 <mailbuffer+0xa8354>
    2030:	42018e02 	andmi	r8, r1, #2, 28
    2034:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2038:	100d0c66 	andne	r0, sp, r6, ror #24
    203c:	00000020 	andeq	r0, r0, r0, lsr #32
    2040:	00001ca0 	andeq	r1, r0, r0, lsr #25
    2044:	0001e000 	andeq	lr, r1, r0
    2048:	000000d8 	ldrdeq	r0, [r0], -r8
    204c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2050:	8b038504 	blhi	e3468 <mailbuffer+0xa8378>
    2054:	42018e02 	andmi	r8, r1, #2, 28
    2058:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    205c:	100d0c66 	andne	r0, sp, r6, ror #24
    2060:	00000020 	andeq	r0, r0, r0, lsr #32
    2064:	00001ca0 	andeq	r1, r0, r0, lsr #25
    2068:	0001e0d8 	ldrdeq	lr, [r1], -r8
    206c:	0000009c 	muleq	r0, ip, r0
    2070:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2074:	8b038504 	blhi	e348c <mailbuffer+0xa839c>
    2078:	42018e02 	andmi	r8, r1, #2, 28
    207c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2080:	100d0c48 	andne	r0, sp, r8, asr #24
    2084:	00000020 	andeq	r0, r0, r0, lsr #32
    2088:	00001ca0 	andeq	r1, r0, r0, lsr #25
    208c:	0001e174 	andeq	lr, r1, r4, ror r1
    2090:	000000ac 	andeq	r0, r0, ip, lsr #1
    2094:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2098:	8b038504 	blhi	e34b0 <mailbuffer+0xa83c0>
    209c:	42018e02 	andmi	r8, r1, #2, 28
    20a0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    20a4:	100d0c50 	andne	r0, sp, r0, asr ip
    20a8:	00000020 	andeq	r0, r0, r0, lsr #32
    20ac:	00001ca0 	andeq	r1, r0, r0, lsr #25
    20b0:	0001e220 	andeq	lr, r1, r0, lsr #4
    20b4:	000000a0 	andeq	r0, r0, r0, lsr #1
    20b8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    20bc:	8b038504 	blhi	e34d4 <mailbuffer+0xa83e4>
    20c0:	42018e02 	andmi	r8, r1, #2, 28
    20c4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    20c8:	100d0c4a 	andne	r0, sp, sl, asr #24
    20cc:	00000020 	andeq	r0, r0, r0, lsr #32
    20d0:	00001ca0 	andeq	r1, r0, r0, lsr #25
    20d4:	0001e2c0 	andeq	lr, r1, r0, asr #5
    20d8:	0000008c 	andeq	r0, r0, ip, lsl #1
    20dc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    20e0:	8b038504 	blhi	e34f8 <mailbuffer+0xa8408>
    20e4:	42018e02 	andmi	r8, r1, #2, 28
    20e8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    20ec:	100d0c40 	andne	r0, sp, r0, asr #24
    20f0:	00000020 	andeq	r0, r0, r0, lsr #32
    20f4:	00001ca0 	andeq	r1, r0, r0, lsr #25
    20f8:	0001e34c 	andeq	lr, r1, ip, asr #6
    20fc:	0000009c 	muleq	r0, ip, r0
    2100:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2104:	8b038504 	blhi	e351c <mailbuffer+0xa842c>
    2108:	42018e02 	andmi	r8, r1, #2, 28
    210c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2110:	100d0c48 	andne	r0, sp, r8, asr #24
    2114:	00000020 	andeq	r0, r0, r0, lsr #32
    2118:	00001ca0 	andeq	r1, r0, r0, lsr #25
    211c:	0001e3e8 	andeq	lr, r1, r8, ror #7
    2120:	000000a0 	andeq	r0, r0, r0, lsr #1
    2124:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2128:	8b038504 	blhi	e3540 <mailbuffer+0xa8450>
    212c:	42018e02 	andmi	r8, r1, #2, 28
    2130:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2134:	100d0c4a 	andne	r0, sp, sl, asr #24
    2138:	00000020 	andeq	r0, r0, r0, lsr #32
    213c:	00001ca0 	andeq	r1, r0, r0, lsr #25
    2140:	0001e488 	andeq	lr, r1, r8, lsl #9
    2144:	00000078 	andeq	r0, r0, r8, ror r0
    2148:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    214c:	8b038504 	blhi	e3564 <mailbuffer+0xa8474>
    2150:	42018e02 	andmi	r8, r1, #2, 28
    2154:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    2158:	00100d0c 	andseq	r0, r0, ip, lsl #26
    215c:	0000000c 	andeq	r0, r0, ip
    2160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2164:	7c020001 	stcvc	0, cr0, [r2], {1}
    2168:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    216c:	00000024 	andeq	r0, r0, r4, lsr #32
    2170:	0000215c 	andeq	r2, r0, ip, asr r1
    2174:	0001e500 	andeq	lr, r1, r0, lsl #10
    2178:	00000364 	andeq	r0, r0, r4, ror #6
    217c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2180:	8b038504 	blhi	e3598 <mailbuffer+0xa84a8>
    2184:	42018e02 	andmi	r8, r1, #2, 28
    2188:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    218c:	0d0c01ac 	stfeqs	f0, [ip, #-688]	; 0xfffffd50
    2190:	00000010 	andeq	r0, r0, r0, lsl r0
    2194:	00000020 	andeq	r0, r0, r0, lsr #32
    2198:	0000215c 	andeq	r2, r0, ip, asr r1
    219c:	0001e864 	andeq	lr, r1, r4, ror #16
    21a0:	00000074 	andeq	r0, r0, r4, ror r0
    21a4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    21a8:	8e028b03 	vmlahi.f64	d8, d2, d3
    21ac:	0b0c4201 	bleq	3129b8 <mailbuffer+0x2d78c8>
    21b0:	0d0c7404 	cfstrseq	mvf7, [ip, #-16]
    21b4:	0000000c 	andeq	r0, r0, ip
    21b8:	00000020 	andeq	r0, r0, r0, lsr #32
    21bc:	0000215c 	andeq	r2, r0, ip, asr r1
    21c0:	0001e8d8 	ldrdeq	lr, [r1], -r8
    21c4:	00000078 	andeq	r0, r0, r8, ror r0
    21c8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    21cc:	8b038504 	blhi	e35e4 <mailbuffer+0xa84f4>
    21d0:	42018e02 	andmi	r8, r1, #2, 28
    21d4:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    21d8:	00100d0c 	andseq	r0, r0, ip, lsl #26
    21dc:	00000020 	andeq	r0, r0, r0, lsr #32
    21e0:	0000215c 	andeq	r2, r0, ip, asr r1
    21e4:	0001e950 	andeq	lr, r1, r0, asr r9
    21e8:	00000194 	muleq	r0, r4, r1
    21ec:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    21f0:	8b038504 	blhi	e3608 <mailbuffer+0xa8518>
    21f4:	42018e02 	andmi	r8, r1, #2, 28
    21f8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    21fc:	100d0cc4 	andne	r0, sp, r4, asr #25
    2200:	00000020 	andeq	r0, r0, r0, lsr #32
    2204:	0000215c 	andeq	r2, r0, ip, asr r1
    2208:	0001eae4 	andeq	lr, r1, r4, ror #21
    220c:	000000dc 	ldrdeq	r0, [r0], -ip
    2210:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2214:	8e028b03 	vmlahi.f64	d8, d2, d3
    2218:	0b0c4201 	bleq	312a24 <mailbuffer+0x2d7934>
    221c:	0c680204 	sfmeq	f0, 2, [r8], #-16
    2220:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2224:	0000000c 	andeq	r0, r0, ip
    2228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    222c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2230:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2234:	00000020 	andeq	r0, r0, r0, lsr #32
    2238:	00002224 	andeq	r2, r0, r4, lsr #4
    223c:	0001ebc0 	andeq	lr, r1, r0, asr #23
    2240:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2244:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2248:	8e028b03 	vmlahi.f64	d8, d2, d3
    224c:	0b0c4201 	bleq	312a58 <mailbuffer+0x2d7968>
    2250:	0cf20204 	lfmeq	f0, 2, [r2], #16
    2254:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2258:	00000020 	andeq	r0, r0, r0, lsr #32
    225c:	00002224 	andeq	r2, r0, r4, lsr #4
    2260:	0001edb0 			; <UNDEFINED> instruction: 0x0001edb0
    2264:	00000340 	andeq	r0, r0, r0, asr #6
    2268:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    226c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2270:	0b0c4201 	bleq	312a7c <mailbuffer+0x2d798c>
    2274:	019a0304 	orrseq	r0, sl, r4, lsl #6
    2278:	000c0d0c 	andeq	r0, ip, ip, lsl #26
    227c:	00000020 	andeq	r0, r0, r0, lsr #32
    2280:	00002224 	andeq	r2, r0, r4, lsr #4
    2284:	0001f0f0 	strdeq	pc, [r1], -r0
    2288:	00000170 	andeq	r0, r0, r0, ror r1
    228c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2290:	8e028b03 	vmlahi.f64	d8, d2, d3
    2294:	0b0c4201 	bleq	312aa0 <mailbuffer+0x2d79b0>
    2298:	0cb20204 	lfmeq	f0, 4, [r2], #16
    229c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    22a0:	00000024 	andeq	r0, r0, r4, lsr #32
    22a4:	00002224 	andeq	r2, r0, r4, lsr #4
    22a8:	0001f260 	andeq	pc, r1, r0, ror #4
    22ac:	0000074c 	andeq	r0, r0, ip, asr #14
    22b0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    22b4:	8b038504 	blhi	e36cc <mailbuffer+0xa85dc>
    22b8:	42018e02 	andmi	r8, r1, #2, 28
    22bc:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    22c0:	0d0c03a0 	stceq	3, cr0, [ip, #-640]	; 0xfffffd80
    22c4:	00000010 	andeq	r0, r0, r0, lsl r0
    22c8:	00000020 	andeq	r0, r0, r0, lsr #32
    22cc:	00002224 	andeq	r2, r0, r4, lsr #4
    22d0:	0001f9ac 	andeq	pc, r1, ip, lsr #19
    22d4:	00000140 	andeq	r0, r0, r0, asr #2
    22d8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    22dc:	8b038504 	blhi	e36f4 <mailbuffer+0xa8604>
    22e0:	42018e02 	andmi	r8, r1, #2, 28
    22e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    22e8:	100d0c9a 	mulne	sp, sl, ip
    22ec:	00000024 	andeq	r0, r0, r4, lsr #32
    22f0:	00002224 	andeq	r2, r0, r4, lsr #4
    22f4:	0001faec 	andeq	pc, r1, ip, ror #21
    22f8:	00000298 	muleq	r0, r8, r2
    22fc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2300:	8b038504 	blhi	e3718 <mailbuffer+0xa8628>
    2304:	42018e02 	andmi	r8, r1, #2, 28
    2308:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    230c:	0d0c0146 	stfeqs	f0, [ip, #-280]	; 0xfffffee8
    2310:	00000010 	andeq	r0, r0, r0, lsl r0
    2314:	00000020 	andeq	r0, r0, r0, lsr #32
    2318:	00002224 	andeq	r2, r0, r4, lsr #4
    231c:	0001fd84 	andeq	pc, r1, r4, lsl #27
    2320:	00000078 	andeq	r0, r0, r8, ror r0
    2324:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2328:	8b038504 	blhi	e3740 <mailbuffer+0xa8650>
    232c:	42018e02 	andmi	r8, r1, #2, 28
    2330:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    2334:	00100d0c 	andseq	r0, r0, ip, lsl #26
    2338:	00000020 	andeq	r0, r0, r0, lsr #32
    233c:	00002224 	andeq	r2, r0, r4, lsr #4
    2340:	0001fdfc 	strdeq	pc, [r1], -ip
    2344:	00000078 	andeq	r0, r0, r8, ror r0
    2348:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    234c:	8b038504 	blhi	e3764 <mailbuffer+0xa8674>
    2350:	42018e02 	andmi	r8, r1, #2, 28
    2354:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    2358:	00100d0c 	andseq	r0, r0, ip, lsl #26
    235c:	00000020 	andeq	r0, r0, r0, lsr #32
    2360:	00002224 	andeq	r2, r0, r4, lsr #4
    2364:	0001fe74 	andeq	pc, r1, r4, ror lr	; <UNPREDICTABLE>
    2368:	00000078 	andeq	r0, r0, r8, ror r0
    236c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2370:	8b038504 	blhi	e3788 <mailbuffer+0xa8698>
    2374:	42018e02 	andmi	r8, r1, #2, 28
    2378:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    237c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    2380:	00000020 	andeq	r0, r0, r0, lsr #32
    2384:	00002224 	andeq	r2, r0, r4, lsr #4
    2388:	0001feec 	andeq	pc, r1, ip, ror #29
    238c:	00000078 	andeq	r0, r0, r8, ror r0
    2390:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2394:	8b038504 	blhi	e37ac <mailbuffer+0xa86bc>
    2398:	42018e02 	andmi	r8, r1, #2, 28
    239c:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    23a0:	00100d0c 	andseq	r0, r0, ip, lsl #26
    23a4:	00000020 	andeq	r0, r0, r0, lsr #32
    23a8:	00002224 	andeq	r2, r0, r4, lsr #4
    23ac:	0001ff64 	andeq	pc, r1, r4, ror #30
    23b0:	000000a0 	andeq	r0, r0, r0, lsr #1
    23b4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    23b8:	8b038504 	blhi	e37d0 <mailbuffer+0xa86e0>
    23bc:	42018e02 	andmi	r8, r1, #2, 28
    23c0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    23c4:	100d0c4a 	andne	r0, sp, sl, asr #24
    23c8:	00000020 	andeq	r0, r0, r0, lsr #32
    23cc:	00002224 	andeq	r2, r0, r4, lsr #4
    23d0:	00020004 	andeq	r0, r2, r4
    23d4:	000000a0 	andeq	r0, r0, r0, lsr #1
    23d8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    23dc:	8b038504 	blhi	e37f4 <mailbuffer+0xa8704>
    23e0:	42018e02 	andmi	r8, r1, #2, 28
    23e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    23e8:	100d0c4a 	andne	r0, sp, sl, asr #24
    23ec:	00000020 	andeq	r0, r0, r0, lsr #32
    23f0:	00002224 	andeq	r2, r0, r4, lsr #4
    23f4:	000200a4 	andeq	r0, r2, r4, lsr #1
    23f8:	000000a0 	andeq	r0, r0, r0, lsr #1
    23fc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2400:	8b038504 	blhi	e3818 <mailbuffer+0xa8728>
    2404:	42018e02 	andmi	r8, r1, #2, 28
    2408:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    240c:	100d0c4a 	andne	r0, sp, sl, asr #24
    2410:	00000020 	andeq	r0, r0, r0, lsr #32
    2414:	00002224 	andeq	r2, r0, r4, lsr #4
    2418:	00020144 	andeq	r0, r2, r4, asr #2
    241c:	000000a0 	andeq	r0, r0, r0, lsr #1
    2420:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2424:	8b038504 	blhi	e383c <mailbuffer+0xa874c>
    2428:	42018e02 	andmi	r8, r1, #2, 28
    242c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2430:	100d0c4a 	andne	r0, sp, sl, asr #24
    2434:	00000020 	andeq	r0, r0, r0, lsr #32
    2438:	00002224 	andeq	r2, r0, r4, lsr #4
    243c:	000201e4 	andeq	r0, r2, r4, ror #3
    2440:	000000bc 	strheq	r0, [r0], -ip
    2444:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2448:	8b038504 	blhi	e3860 <mailbuffer+0xa8770>
    244c:	42018e02 	andmi	r8, r1, #2, 28
    2450:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2454:	100d0c58 	andne	r0, sp, r8, asr ip
    2458:	00000020 	andeq	r0, r0, r0, lsr #32
    245c:	00002224 	andeq	r2, r0, r4, lsr #4
    2460:	000202a0 	andeq	r0, r2, r0, lsr #5
    2464:	000000a8 	andeq	r0, r0, r8, lsr #1
    2468:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    246c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2470:	0b0c4201 	bleq	312c7c <mailbuffer+0x2d7b8c>
    2474:	0c4e0204 	sfmeq	f0, 2, [lr], {4}
    2478:	00000c0d 	andeq	r0, r0, sp, lsl #24
    247c:	00000020 	andeq	r0, r0, r0, lsr #32
    2480:	00002224 	andeq	r2, r0, r4, lsr #4
    2484:	00020348 	andeq	r0, r2, r8, asr #6
    2488:	000000a4 	andeq	r0, r0, r4, lsr #1
    248c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2490:	8e028b03 	vmlahi.f64	d8, d2, d3
    2494:	0b0c4201 	bleq	312ca0 <mailbuffer+0x2d7bb0>
    2498:	0c4c0204 	sfmeq	f0, 2, [ip], {4}
    249c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    24a0:	0000000c 	andeq	r0, r0, ip
    24a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    24a8:	7c020001 	stcvc	0, cr0, [r2], {1}
    24ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    24b0:	00000020 	andeq	r0, r0, r0, lsr #32
    24b4:	000024a0 	andeq	r2, r0, r0, lsr #9
    24b8:	000203ec 	andeq	r0, r2, ip, ror #7
    24bc:	00000124 	andeq	r0, r0, r4, lsr #2
    24c0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    24c4:	8b038504 	blhi	e38dc <mailbuffer+0xa87ec>
    24c8:	42018e02 	andmi	r8, r1, #2, 28
    24cc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    24d0:	100d0c8c 	andne	r0, sp, ip, lsl #25
    24d4:	00000024 	andeq	r0, r0, r4, lsr #32
    24d8:	000024a0 	andeq	r2, r0, r0, lsr #9
    24dc:	00020510 	andeq	r0, r2, r0, lsl r5
    24e0:	00000350 	andeq	r0, r0, r0, asr r3
    24e4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    24e8:	8b038504 	blhi	e3900 <mailbuffer+0xa8810>
    24ec:	42018e02 	andmi	r8, r1, #2, 28
    24f0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    24f4:	0d0c01a2 	stfeqs	f0, [ip, #-648]	; 0xfffffd78
    24f8:	00000010 	andeq	r0, r0, r0, lsl r0
    24fc:	0000000c 	andeq	r0, r0, ip
    2500:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2504:	7c020001 	stcvc	0, cr0, [r2], {1}
    2508:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    250c:	00000020 	andeq	r0, r0, r0, lsr #32
    2510:	000024fc 	strdeq	r2, [r0], -ip
    2514:	00020860 	andeq	r0, r2, r0, ror #16
    2518:	000000e8 	andeq	r0, r0, r8, ror #1
    251c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2520:	8e028b03 	vmlahi.f64	d8, d2, d3
    2524:	0b0c4201 	bleq	312d30 <mailbuffer+0x2d7c40>
    2528:	0c6e0204 	sfmeq	f0, 2, [lr], #-16
    252c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2530:	00000024 	andeq	r0, r0, r4, lsr #32
    2534:	000024fc 	strdeq	r2, [r0], -ip
    2538:	00020948 	andeq	r0, r2, r8, asr #18
    253c:	000002a4 	andeq	r0, r0, r4, lsr #5
    2540:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2544:	8b038504 	blhi	e395c <mailbuffer+0xa886c>
    2548:	42018e02 	andmi	r8, r1, #2, 28
    254c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    2550:	0d0c014c 	stfeqs	f0, [ip, #-304]	; 0xfffffed0
    2554:	00000010 	andeq	r0, r0, r0, lsl r0
    2558:	00000020 	andeq	r0, r0, r0, lsr #32
    255c:	000024fc 	strdeq	r2, [r0], -ip
    2560:	00020bec 	andeq	r0, r2, ip, ror #23
    2564:	00000128 	andeq	r0, r0, r8, lsr #2
    2568:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    256c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2570:	0b0c4201 	bleq	312d7c <mailbuffer+0x2d7c8c>
    2574:	0c8e0204 	sfmeq	f0, 4, [lr], {4}
    2578:	00000c0d 	andeq	r0, r0, sp, lsl #24
    257c:	00000020 	andeq	r0, r0, r0, lsr #32
    2580:	000024fc 	strdeq	r2, [r0], -ip
    2584:	00020d14 	andeq	r0, r2, r4, lsl sp
    2588:	00000074 	andeq	r0, r0, r4, ror r0
    258c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2590:	8e028b03 	vmlahi.f64	d8, d2, d3
    2594:	0b0c4201 	bleq	312da0 <mailbuffer+0x2d7cb0>
    2598:	0d0c7404 	cfstrseq	mvf7, [ip, #-16]
    259c:	0000000c 	andeq	r0, r0, ip
    25a0:	00000020 	andeq	r0, r0, r0, lsr #32
    25a4:	000024fc 	strdeq	r2, [r0], -ip
    25a8:	00020d88 	andeq	r0, r2, r8, lsl #27
    25ac:	000000a0 	andeq	r0, r0, r0, lsr #1
    25b0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    25b4:	8b038504 	blhi	e39cc <mailbuffer+0xa88dc>
    25b8:	42018e02 	andmi	r8, r1, #2, 28
    25bc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    25c0:	100d0c4a 	andne	r0, sp, sl, asr #24
    25c4:	00000020 	andeq	r0, r0, r0, lsr #32
    25c8:	000024fc 	strdeq	r2, [r0], -ip
    25cc:	00020e28 	andeq	r0, r2, r8, lsr #28
    25d0:	00000078 	andeq	r0, r0, r8, ror r0
    25d4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    25d8:	8b038504 	blhi	e39f0 <mailbuffer+0xa8900>
    25dc:	42018e02 	andmi	r8, r1, #2, 28
    25e0:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    25e4:	00100d0c 	andseq	r0, r0, ip, lsl #26
    25e8:	00000020 	andeq	r0, r0, r0, lsr #32
    25ec:	000024fc 	strdeq	r2, [r0], -ip
    25f0:	00020ea0 	andeq	r0, r2, r0, lsr #29
    25f4:	00000078 	andeq	r0, r0, r8, ror r0
    25f8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    25fc:	8b038504 	blhi	e3a14 <mailbuffer+0xa8924>
    2600:	42018e02 	andmi	r8, r1, #2, 28
    2604:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    2608:	00100d0c 	andseq	r0, r0, ip, lsl #26
    260c:	00000020 	andeq	r0, r0, r0, lsr #32
    2610:	000024fc 	strdeq	r2, [r0], -ip
    2614:	00020f18 	andeq	r0, r2, r8, lsl pc
    2618:	00000078 	andeq	r0, r0, r8, ror r0
    261c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2620:	8b038504 	blhi	e3a38 <mailbuffer+0xa8948>
    2624:	42018e02 	andmi	r8, r1, #2, 28
    2628:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    262c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    2630:	00000020 	andeq	r0, r0, r0, lsr #32
    2634:	000024fc 	strdeq	r2, [r0], -ip
    2638:	00020f90 	muleq	r2, r0, pc	; <UNPREDICTABLE>
    263c:	00000078 	andeq	r0, r0, r8, ror r0
    2640:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2644:	8e028b03 	vmlahi.f64	d8, d2, d3
    2648:	0b0c4201 	bleq	312e54 <mailbuffer+0x2d7d64>
    264c:	0d0c7604 	stceq	6, cr7, [ip, #-16]
    2650:	0000000c 	andeq	r0, r0, ip
    2654:	00000020 	andeq	r0, r0, r0, lsr #32
    2658:	000024fc 	strdeq	r2, [r0], -ip
    265c:	00021008 	andeq	r1, r2, r8
    2660:	00000078 	andeq	r0, r0, r8, ror r0
    2664:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2668:	8b038504 	blhi	e3a80 <mailbuffer+0xa8990>
    266c:	42018e02 	andmi	r8, r1, #2, 28
    2670:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    2674:	00100d0c 	andseq	r0, r0, ip, lsl #26
    2678:	00000020 	andeq	r0, r0, r0, lsr #32
    267c:	000024fc 	strdeq	r2, [r0], -ip
    2680:	00021080 	andeq	r1, r2, r0, lsl #1
    2684:	000000a0 	andeq	r0, r0, r0, lsr #1
    2688:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    268c:	8b038504 	blhi	e3aa4 <mailbuffer+0xa89b4>
    2690:	42018e02 	andmi	r8, r1, #2, 28
    2694:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2698:	100d0c4a 	andne	r0, sp, sl, asr #24
    269c:	00000020 	andeq	r0, r0, r0, lsr #32
    26a0:	000024fc 	strdeq	r2, [r0], -ip
    26a4:	00021120 	andeq	r1, r2, r0, lsr #2
    26a8:	000000b8 	strheq	r0, [r0], -r8
    26ac:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    26b0:	8b038504 	blhi	e3ac8 <mailbuffer+0xa89d8>
    26b4:	42018e02 	andmi	r8, r1, #2, 28
    26b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    26bc:	100d0c56 	andne	r0, sp, r6, asr ip
    26c0:	00000020 	andeq	r0, r0, r0, lsr #32
    26c4:	000024fc 	strdeq	r2, [r0], -ip
    26c8:	000211d8 	ldrdeq	r1, [r2], -r8
    26cc:	00000190 	muleq	r0, r0, r1
    26d0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    26d4:	8e028b03 	vmlahi.f64	d8, d2, d3
    26d8:	0b0c4201 	bleq	312ee4 <mailbuffer+0x2d7df4>
    26dc:	0cc20204 	sfmeq	f0, 2, [r2], {4}
    26e0:	00000c0d 	andeq	r0, r0, sp, lsl #24
    26e4:	00000020 	andeq	r0, r0, r0, lsr #32
    26e8:	000024fc 	strdeq	r2, [r0], -ip
    26ec:	00021368 	andeq	r1, r2, r8, ror #6
    26f0:	0000009c 	muleq	r0, ip, r0
    26f4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    26f8:	8e028b03 	vmlahi.f64	d8, d2, d3
    26fc:	0b0c4201 	bleq	312f08 <mailbuffer+0x2d7e18>
    2700:	0c480204 	sfmeq	f0, 2, [r8], {4}
    2704:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2708:	0000000c 	andeq	r0, r0, ip
    270c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2710:	7c020001 	stcvc	0, cr0, [r2], {1}
    2714:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2718:	00000020 	andeq	r0, r0, r0, lsr #32
    271c:	00002708 	andeq	r2, r0, r8, lsl #14
    2720:	00021404 	andeq	r1, r2, r4, lsl #8
    2724:	00000140 	andeq	r0, r0, r0, asr #2
    2728:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    272c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2730:	0b0c4201 	bleq	312f3c <mailbuffer+0x2d7e4c>
    2734:	0c9a0204 	lfmeq	f0, 4, [sl], {4}
    2738:	00000c0d 	andeq	r0, r0, sp, lsl #24
    273c:	00000020 	andeq	r0, r0, r0, lsr #32
    2740:	00002708 	andeq	r2, r0, r8, lsl #14
    2744:	00021544 	andeq	r1, r2, r4, asr #10
    2748:	00000098 	muleq	r0, r8, r0
    274c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2750:	8e028b03 	vmlahi.f64	d8, d2, d3
    2754:	0b0c4201 	bleq	312f60 <mailbuffer+0x2d7e70>
    2758:	0c460204 	sfmeq	f0, 2, [r6], {4}
    275c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2760:	00000020 	andeq	r0, r0, r0, lsr #32
    2764:	00002708 	andeq	r2, r0, r8, lsl #14
    2768:	000215dc 	ldrdeq	r1, [r2], -ip
    276c:	000000a0 	andeq	r0, r0, r0, lsr #1
    2770:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2774:	8b038504 	blhi	e3b8c <mailbuffer+0xa8a9c>
    2778:	42018e02 	andmi	r8, r1, #2, 28
    277c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2780:	100d0c4a 	andne	r0, sp, sl, asr #24
    2784:	00000020 	andeq	r0, r0, r0, lsr #32
    2788:	00002708 	andeq	r2, r0, r8, lsl #14
    278c:	0002167c 	andeq	r1, r2, ip, ror r6
    2790:	00000078 	andeq	r0, r0, r8, ror r0
    2794:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2798:	8e028b03 	vmlahi.f64	d8, d2, d3
    279c:	0b0c4201 	bleq	312fa8 <mailbuffer+0x2d7eb8>
    27a0:	0d0c7604 	stceq	6, cr7, [ip, #-16]
    27a4:	0000000c 	andeq	r0, r0, ip
    27a8:	00000020 	andeq	r0, r0, r0, lsr #32
    27ac:	00002708 	andeq	r2, r0, r8, lsl #14
    27b0:	000216f4 	strdeq	r1, [r2], -r4
    27b4:	00000078 	andeq	r0, r0, r8, ror r0
    27b8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    27bc:	8e028b03 	vmlahi.f64	d8, d2, d3
    27c0:	0b0c4201 	bleq	312fcc <mailbuffer+0x2d7edc>
    27c4:	0d0c7604 	stceq	6, cr7, [ip, #-16]
    27c8:	0000000c 	andeq	r0, r0, ip
    27cc:	00000020 	andeq	r0, r0, r0, lsr #32
    27d0:	00002708 	andeq	r2, r0, r8, lsl #14
    27d4:	0002176c 	andeq	r1, r2, ip, ror #14
    27d8:	00000078 	andeq	r0, r0, r8, ror r0
    27dc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    27e0:	8b038504 	blhi	e3bf8 <mailbuffer+0xa8b08>
    27e4:	42018e02 	andmi	r8, r1, #2, 28
    27e8:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    27ec:	00100d0c 	andseq	r0, r0, ip, lsl #26
    27f0:	00000020 	andeq	r0, r0, r0, lsr #32
    27f4:	00002708 	andeq	r2, r0, r8, lsl #14
    27f8:	000217e4 	andeq	r1, r2, r4, ror #15
    27fc:	000000a0 	andeq	r0, r0, r0, lsr #1
    2800:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2804:	8b038504 	blhi	e3c1c <mailbuffer+0xa8b2c>
    2808:	42018e02 	andmi	r8, r1, #2, 28
    280c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2810:	100d0c4a 	andne	r0, sp, sl, asr #24
    2814:	00000020 	andeq	r0, r0, r0, lsr #32
    2818:	00002708 	andeq	r2, r0, r8, lsl #14
    281c:	00021884 	andeq	r1, r2, r4, lsl #17
    2820:	000000d4 	ldrdeq	r0, [r0], -r4
    2824:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2828:	8b038504 	blhi	e3c40 <mailbuffer+0xa8b50>
    282c:	42018e02 	andmi	r8, r1, #2, 28
    2830:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2834:	100d0c64 	andne	r0, sp, r4, ror #24
    2838:	00000020 	andeq	r0, r0, r0, lsr #32
    283c:	00002708 	andeq	r2, r0, r8, lsl #14
    2840:	00021958 	andeq	r1, r2, r8, asr r9
    2844:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2848:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    284c:	8b038504 	blhi	e3c64 <mailbuffer+0xa8b74>
    2850:	42018e02 	andmi	r8, r1, #2, 28
    2854:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2858:	100d0c52 	andne	r0, sp, r2, asr ip
    285c:	00000020 	andeq	r0, r0, r0, lsr #32
    2860:	00002708 	andeq	r2, r0, r8, lsl #14
    2864:	00021a08 	andeq	r1, r2, r8, lsl #20
    2868:	00000078 	andeq	r0, r0, r8, ror r0
    286c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2870:	8b038504 	blhi	e3c88 <mailbuffer+0xa8b98>
    2874:	42018e02 	andmi	r8, r1, #2, 28
    2878:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    287c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    2880:	00000020 	andeq	r0, r0, r0, lsr #32
    2884:	00002708 	andeq	r2, r0, r8, lsl #14
    2888:	00021a80 	andeq	r1, r2, r0, lsl #21
    288c:	000000c0 	andeq	r0, r0, r0, asr #1
    2890:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2894:	8e028b03 	vmlahi.f64	d8, d2, d3
    2898:	0b0c4201 	bleq	3130a4 <mailbuffer+0x2d7fb4>
    289c:	0c5a0204 	lfmeq	f0, 2, [sl], {4}
    28a0:	00000c0d 	andeq	r0, r0, sp, lsl #24
    28a4:	00000020 	andeq	r0, r0, r0, lsr #32
    28a8:	00002708 	andeq	r2, r0, r8, lsl #14
    28ac:	00021b40 	andeq	r1, r2, r0, asr #22
    28b0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    28b4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    28b8:	8e028b03 	vmlahi.f64	d8, d2, d3
    28bc:	0b0c4201 	bleq	3130c8 <mailbuffer+0x2d7fd8>
    28c0:	0c520204 	lfmeq	f0, 2, [r2], {4}
    28c4:	00000c0d 	andeq	r0, r0, sp, lsl #24
    28c8:	0000000c 	andeq	r0, r0, ip
    28cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    28d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    28d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    28d8:	00000020 	andeq	r0, r0, r0, lsr #32
    28dc:	000028c8 	andeq	r2, r0, r8, asr #17
    28e0:	00021bf0 	strdeq	r1, [r2], -r0
    28e4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    28e8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    28ec:	8e028b03 	vmlahi.f64	d8, d2, d3
    28f0:	0b0c4201 	bleq	3130fc <mailbuffer+0x2d800c>
    28f4:	0c720204 	lfmeq	f0, 2, [r2], #-16
    28f8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    28fc:	00000020 	andeq	r0, r0, r0, lsr #32
    2900:	000028c8 	andeq	r2, r0, r8, asr #17
    2904:	00021ce0 	andeq	r1, r2, r0, ror #25
    2908:	00000178 	andeq	r0, r0, r8, ror r1
    290c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2910:	8e028b03 	vmlahi.f64	d8, d2, d3
    2914:	0b0c4201 	bleq	313120 <mailbuffer+0x2d8030>
    2918:	0cb60204 	lfmeq	f0, 4, [r6], #16
    291c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2920:	00000020 	andeq	r0, r0, r0, lsr #32
    2924:	000028c8 	andeq	r2, r0, r8, asr #17
    2928:	00021e58 	andeq	r1, r2, r8, asr lr
    292c:	00000080 	andeq	r0, r0, r0, lsl #1
    2930:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2934:	8b038504 	blhi	e3d4c <mailbuffer+0xa8c5c>
    2938:	42018e02 	andmi	r8, r1, #2, 28
    293c:	7a040b0c 	bvc	105574 <mailbuffer+0xca484>
    2940:	00100d0c 	andseq	r0, r0, ip, lsl #26
    2944:	00000024 	andeq	r0, r0, r4, lsr #32
    2948:	000028c8 	andeq	r2, r0, r8, asr #17
    294c:	00021ed8 	ldrdeq	r1, [r2], -r8
    2950:	00000504 	andeq	r0, r0, r4, lsl #10
    2954:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2958:	8b038504 	blhi	e3d70 <mailbuffer+0xa8c80>
    295c:	42018e02 	andmi	r8, r1, #2, 28
    2960:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    2964:	0d0c027c 	sfmeq	f0, 4, [ip, #-496]	; 0xfffffe10
    2968:	00000010 	andeq	r0, r0, r0, lsl r0
    296c:	00000024 	andeq	r0, r0, r4, lsr #32
    2970:	000028c8 	andeq	r2, r0, r8, asr #17
    2974:	000223dc 	ldrdeq	r2, [r2], -ip
    2978:	00000b1c 	andeq	r0, r0, ip, lsl fp
    297c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2980:	8b038504 	blhi	e3d98 <mailbuffer+0xa8ca8>
    2984:	42018e02 	andmi	r8, r1, #2, 28
    2988:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    298c:	0d0c0588 	cfstr32eq	mvfx0, [ip, #-544]	; 0xfffffde0
    2990:	00000010 	andeq	r0, r0, r0, lsl r0
    2994:	00000020 	andeq	r0, r0, r0, lsr #32
    2998:	000028c8 	andeq	r2, r0, r8, asr #17
    299c:	00022ef8 	strdeq	r2, [r2], -r8
    29a0:	0000019c 	muleq	r0, ip, r1
    29a4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    29a8:	8b038504 	blhi	e3dc0 <mailbuffer+0xa8cd0>
    29ac:	42018e02 	andmi	r8, r1, #2, 28
    29b0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    29b4:	100d0cc8 	andne	r0, sp, r8, asr #25
    29b8:	0000000c 	andeq	r0, r0, ip
    29bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    29c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    29c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    29c8:	00000020 	andeq	r0, r0, r0, lsr #32
    29cc:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
    29d0:	00023094 	muleq	r2, r4, r0
    29d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    29d8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    29dc:	8e028b03 	vmlahi.f64	d8, d2, d3
    29e0:	0b0c4201 	bleq	3131ec <mailbuffer+0x2d80fc>
    29e4:	0c520204 	lfmeq	f0, 2, [r2], {4}
    29e8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    29ec:	00000020 	andeq	r0, r0, r0, lsr #32
    29f0:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
    29f4:	00023144 	andeq	r3, r2, r4, asr #2
    29f8:	00000118 	andeq	r0, r0, r8, lsl r1
    29fc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2a00:	8e028b03 	vmlahi.f64	d8, d2, d3
    2a04:	0b0c4201 	bleq	313210 <mailbuffer+0x2d8120>
    2a08:	0c860204 	sfmeq	f0, 4, [r6], {4}
    2a0c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2a10:	00000020 	andeq	r0, r0, r0, lsr #32
    2a14:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
    2a18:	0002325c 	andeq	r3, r2, ip, asr r2
    2a1c:	00000188 	andeq	r0, r0, r8, lsl #3
    2a20:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2a24:	8e028b03 	vmlahi.f64	d8, d2, d3
    2a28:	0b0c4201 	bleq	313234 <mailbuffer+0x2d8144>
    2a2c:	0cbe0204 	lfmeq	f0, 4, [lr], #16
    2a30:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2a34:	00000020 	andeq	r0, r0, r0, lsr #32
    2a38:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
    2a3c:	000233e4 	andeq	r3, r2, r4, ror #7
    2a40:	00000158 	andeq	r0, r0, r8, asr r1
    2a44:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2a48:	8b038504 	blhi	e3e60 <mailbuffer+0xa8d70>
    2a4c:	42018e02 	andmi	r8, r1, #2, 28
    2a50:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2a54:	100d0ca6 	andne	r0, sp, r6, lsr #25
    2a58:	0000001c 	andeq	r0, r0, ip, lsl r0
    2a5c:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
    2a60:	0002353c 	andeq	r3, r2, ip, lsr r5
    2a64:	00000078 	andeq	r0, r0, r8, ror r0
    2a68:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2a6c:	8b038504 	blhi	e3e84 <mailbuffer+0xa8d94>
    2a70:	42018e02 	andmi	r8, r1, #2, 28
    2a74:	00040b0c 	andeq	r0, r4, ip, lsl #22
    2a78:	0000000c 	andeq	r0, r0, ip
    2a7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2a80:	7c020001 	stcvc	0, cr0, [r2], {1}
    2a84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2a88:	00000020 	andeq	r0, r0, r0, lsr #32
    2a8c:	00002a78 	andeq	r2, r0, r8, ror sl
    2a90:	000235b4 			; <UNDEFINED> instruction: 0x000235b4
    2a94:	00000074 	andeq	r0, r0, r4, ror r0
    2a98:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2a9c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2aa0:	0b0c4201 	bleq	3132ac <mailbuffer+0x2d81bc>
    2aa4:	0d0c7404 	cfstrseq	mvf7, [ip, #-16]
    2aa8:	0000000c 	andeq	r0, r0, ip
    2aac:	00000020 	andeq	r0, r0, r0, lsr #32
    2ab0:	00002a78 	andeq	r2, r0, r8, ror sl
    2ab4:	00023628 	andeq	r3, r2, r8, lsr #12
    2ab8:	00000078 	andeq	r0, r0, r8, ror r0
    2abc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2ac0:	8e028b03 	vmlahi.f64	d8, d2, d3
    2ac4:	0b0c4201 	bleq	3132d0 <mailbuffer+0x2d81e0>
    2ac8:	0d0c7604 	stceq	6, cr7, [ip, #-16]
    2acc:	0000000c 	andeq	r0, r0, ip
    2ad0:	00000020 	andeq	r0, r0, r0, lsr #32
    2ad4:	00002a78 	andeq	r2, r0, r8, ror sl
    2ad8:	000236a0 	andeq	r3, r2, r0, lsr #13
    2adc:	00000074 	andeq	r0, r0, r4, ror r0
    2ae0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2ae4:	8e028b03 	vmlahi.f64	d8, d2, d3
    2ae8:	0b0c4201 	bleq	3132f4 <mailbuffer+0x2d8204>
    2aec:	0d0c7404 	cfstrseq	mvf7, [ip, #-16]
    2af0:	0000000c 	andeq	r0, r0, ip
    2af4:	00000020 	andeq	r0, r0, r0, lsr #32
    2af8:	00002a78 	andeq	r2, r0, r8, ror sl
    2afc:	00023714 	andeq	r3, r2, r4, lsl r7
    2b00:	000000d8 	ldrdeq	r0, [r0], -r8
    2b04:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2b08:	8b038504 	blhi	e3f20 <mailbuffer+0xa8e30>
    2b0c:	42018e02 	andmi	r8, r1, #2, 28
    2b10:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2b14:	100d0c66 	andne	r0, sp, r6, ror #24
    2b18:	00000020 	andeq	r0, r0, r0, lsr #32
    2b1c:	00002a78 	andeq	r2, r0, r8, ror sl
    2b20:	000237ec 	andeq	r3, r2, ip, ror #15
    2b24:	000000b4 	strheq	r0, [r0], -r4
    2b28:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2b2c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2b30:	0b0c4201 	bleq	31333c <mailbuffer+0x2d824c>
    2b34:	0c540204 	lfmeq	f0, 2, [r4], {4}
    2b38:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2b3c:	00000020 	andeq	r0, r0, r0, lsr #32
    2b40:	00002a78 	andeq	r2, r0, r8, ror sl
    2b44:	000238a0 	andeq	r3, r2, r0, lsr #17
    2b48:	0000008c 	andeq	r0, r0, ip, lsl #1
    2b4c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2b50:	8e028b03 	vmlahi.f64	d8, d2, d3
    2b54:	0b0c4201 	bleq	313360 <mailbuffer+0x2d8270>
    2b58:	0c400204 	sfmeq	f0, 2, [r0], {4}
    2b5c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2b60:	00000020 	andeq	r0, r0, r0, lsr #32
    2b64:	00002a78 	andeq	r2, r0, r8, ror sl
    2b68:	0002392c 	andeq	r3, r2, ip, lsr #18
    2b6c:	000000a0 	andeq	r0, r0, r0, lsr #1
    2b70:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2b74:	8b038504 	blhi	e3f8c <mailbuffer+0xa8e9c>
    2b78:	42018e02 	andmi	r8, r1, #2, 28
    2b7c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2b80:	100d0c4a 	andne	r0, sp, sl, asr #24
    2b84:	00000020 	andeq	r0, r0, r0, lsr #32
    2b88:	00002a78 	andeq	r2, r0, r8, ror sl
    2b8c:	000239cc 	andeq	r3, r2, ip, asr #19
    2b90:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2b94:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2b98:	8e028b03 	vmlahi.f64	d8, d2, d3
    2b9c:	0b0c4201 	bleq	3133a8 <mailbuffer+0x2d82b8>
    2ba0:	0c620204 	sfmeq	f0, 2, [r2], #-16
    2ba4:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2ba8:	00000020 	andeq	r0, r0, r0, lsr #32
    2bac:	00002a78 	andeq	r2, r0, r8, ror sl
    2bb0:	00023a9c 	muleq	r2, ip, sl
    2bb4:	000000e0 	andeq	r0, r0, r0, ror #1
    2bb8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2bbc:	8b038504 	blhi	e3fd4 <mailbuffer+0xa8ee4>
    2bc0:	42018e02 	andmi	r8, r1, #2, 28
    2bc4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2bc8:	100d0c6a 	andne	r0, sp, sl, ror #24
    2bcc:	00000020 	andeq	r0, r0, r0, lsr #32
    2bd0:	00002a78 	andeq	r2, r0, r8, ror sl
    2bd4:	00023b7c 	andeq	r3, r2, ip, ror fp
    2bd8:	00000050 	andeq	r0, r0, r0, asr r0
    2bdc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2be0:	8b038504 	blhi	e3ff8 <mailbuffer+0xa8f08>
    2be4:	42018e02 	andmi	r8, r1, #2, 28
    2be8:	62040b0c 	andvs	r0, r4, #12, 22	; 0x3000
    2bec:	00100d0c 	andseq	r0, r0, ip, lsl #26
    2bf0:	00000020 	andeq	r0, r0, r0, lsr #32
    2bf4:	00002a78 	andeq	r2, r0, r8, ror sl
    2bf8:	00023bcc 	andeq	r3, r2, ip, asr #23
    2bfc:	00000124 	andeq	r0, r0, r4, lsr #2
    2c00:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2c04:	8e028b03 	vmlahi.f64	d8, d2, d3
    2c08:	0b0c4201 	bleq	313414 <mailbuffer+0x2d8324>
    2c0c:	0c8c0204 	sfmeq	f0, 4, [ip], {4}
    2c10:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2c14:	0000000c 	andeq	r0, r0, ip
    2c18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2c1c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2c20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2c24:	00000020 	andeq	r0, r0, r0, lsr #32
    2c28:	00002c14 	andeq	r2, r0, r4, lsl ip
    2c2c:	00023cf0 	strdeq	r3, [r2], -r0
    2c30:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2c34:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2c38:	8e028b03 	vmlahi.f64	d8, d2, d3
    2c3c:	0b0c4201 	bleq	313448 <mailbuffer+0x2d8358>
    2c40:	0c720204 	lfmeq	f0, 2, [r2], #-16
    2c44:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2c48:	00000020 	andeq	r0, r0, r0, lsr #32
    2c4c:	00002c14 	andeq	r2, r0, r4, lsl ip
    2c50:	00023de0 	andeq	r3, r2, r0, ror #27
    2c54:	00000118 	andeq	r0, r0, r8, lsl r1
    2c58:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2c5c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2c60:	0b0c4201 	bleq	31346c <mailbuffer+0x2d837c>
    2c64:	0c860204 	sfmeq	f0, 4, [r6], {4}
    2c68:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2c6c:	00000024 	andeq	r0, r0, r4, lsr #32
    2c70:	00002c14 	andeq	r2, r0, r4, lsl ip
    2c74:	00023ef8 	strdeq	r3, [r2], -r8
    2c78:	00000598 	muleq	r0, r8, r5
    2c7c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2c80:	8b038504 	blhi	e4098 <mailbuffer+0xa8fa8>
    2c84:	42018e02 	andmi	r8, r1, #2, 28
    2c88:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    2c8c:	0d0c02c6 	sfmeq	f0, 4, [ip, #-792]	; 0xfffffce8
    2c90:	00000010 	andeq	r0, r0, r0, lsl r0
    2c94:	00000020 	andeq	r0, r0, r0, lsr #32
    2c98:	00002c14 	andeq	r2, r0, r4, lsl ip
    2c9c:	00024490 	muleq	r2, r0, r4
    2ca0:	00000078 	andeq	r0, r0, r8, ror r0
    2ca4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2ca8:	8b038504 	blhi	e40c0 <mailbuffer+0xa8fd0>
    2cac:	42018e02 	andmi	r8, r1, #2, 28
    2cb0:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    2cb4:	00100d0c 	andseq	r0, r0, ip, lsl #26
    2cb8:	00000020 	andeq	r0, r0, r0, lsr #32
    2cbc:	00002c14 	andeq	r2, r0, r4, lsl ip
    2cc0:	00024508 	andeq	r4, r2, r8, lsl #10
    2cc4:	00000184 	andeq	r0, r0, r4, lsl #3
    2cc8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2ccc:	8b038504 	blhi	e40e4 <mailbuffer+0xa8ff4>
    2cd0:	42018e02 	andmi	r8, r1, #2, 28
    2cd4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2cd8:	100d0cbc 			; <UNDEFINED> instruction: 0x100d0cbc
    2cdc:	00000024 	andeq	r0, r0, r4, lsr #32
    2ce0:	00002c14 	andeq	r2, r0, r4, lsl ip
    2ce4:	0002468c 	andeq	r4, r2, ip, lsl #13
    2ce8:	0000029c 	muleq	r0, ip, r2
    2cec:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2cf0:	8b038504 	blhi	e4108 <mailbuffer+0xa9018>
    2cf4:	42018e02 	andmi	r8, r1, #2, 28
    2cf8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    2cfc:	0d0c0148 	stfeqs	f0, [ip, #-288]	; 0xfffffee0
    2d00:	00000010 	andeq	r0, r0, r0, lsl r0
    2d04:	00000020 	andeq	r0, r0, r0, lsr #32
    2d08:	00002c14 	andeq	r2, r0, r4, lsl ip
    2d0c:	00024928 	andeq	r4, r2, r8, lsr #18
    2d10:	000000e0 	andeq	r0, r0, r0, ror #1
    2d14:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2d18:	8b038504 	blhi	e4130 <mailbuffer+0xa9040>
    2d1c:	42018e02 	andmi	r8, r1, #2, 28
    2d20:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2d24:	100d0c6a 	andne	r0, sp, sl, ror #24
    2d28:	00000020 	andeq	r0, r0, r0, lsr #32
    2d2c:	00002c14 	andeq	r2, r0, r4, lsl ip
    2d30:	00024a08 	andeq	r4, r2, r8, lsl #20
    2d34:	000000e4 	andeq	r0, r0, r4, ror #1
    2d38:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2d3c:	8b038504 	blhi	e4154 <mailbuffer+0xa9064>
    2d40:	42018e02 	andmi	r8, r1, #2, 28
    2d44:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2d48:	100d0c6c 	andne	r0, sp, ip, ror #24
    2d4c:	00000020 	andeq	r0, r0, r0, lsr #32
    2d50:	00002c14 	andeq	r2, r0, r4, lsl ip
    2d54:	00024aec 	andeq	r4, r2, ip, ror #21
    2d58:	000000e4 	andeq	r0, r0, r4, ror #1
    2d5c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2d60:	8b038504 	blhi	e4178 <mailbuffer+0xa9088>
    2d64:	42018e02 	andmi	r8, r1, #2, 28
    2d68:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2d6c:	100d0c6c 	andne	r0, sp, ip, ror #24
    2d70:	00000020 	andeq	r0, r0, r0, lsr #32
    2d74:	00002c14 	andeq	r2, r0, r4, lsl ip
    2d78:	00024bd0 	ldrdeq	r4, [r2], -r0
    2d7c:	000001f8 	strdeq	r0, [r0], -r8
    2d80:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2d84:	8e028b03 	vmlahi.f64	d8, d2, d3
    2d88:	0b0c4201 	bleq	313594 <mailbuffer+0x2d84a4>
    2d8c:	0cf60204 	lfmeq	f0, 2, [r6], #16
    2d90:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2d94:	0000000c 	andeq	r0, r0, ip
    2d98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2d9c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2da0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2da4:	00000020 	andeq	r0, r0, r0, lsr #32
    2da8:	00002d94 	muleq	r0, r4, sp
    2dac:	00024dc8 	andeq	r4, r2, r8, asr #27
    2db0:	00000080 	andeq	r0, r0, r0, lsl #1
    2db4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2db8:	8e028b03 	vmlahi.f64	d8, d2, d3
    2dbc:	0b0c4201 	bleq	3135c8 <mailbuffer+0x2d84d8>
    2dc0:	0d0c7a04 	vstreq	s14, [ip, #-16]
    2dc4:	0000000c 	andeq	r0, r0, ip
    2dc8:	00000020 	andeq	r0, r0, r0, lsr #32
    2dcc:	00002d94 	muleq	r0, r4, sp
    2dd0:	00024e48 	andeq	r4, r2, r8, asr #28
    2dd4:	000000b8 	strheq	r0, [r0], -r8
    2dd8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2ddc:	8e028b03 	vmlahi.f64	d8, d2, d3
    2de0:	0b0c4201 	bleq	3135ec <mailbuffer+0x2d84fc>
    2de4:	0c560204 	lfmeq	f0, 2, [r6], {4}
    2de8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2dec:	00000020 	andeq	r0, r0, r0, lsr #32
    2df0:	00002d94 	muleq	r0, r4, sp
    2df4:	00024f00 	andeq	r4, r2, r0, lsl #30
    2df8:	00000094 	muleq	r0, r4, r0
    2dfc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2e00:	8e028b03 	vmlahi.f64	d8, d2, d3
    2e04:	0b0c4201 	bleq	313610 <mailbuffer+0x2d8520>
    2e08:	0c440204 	sfmeq	f0, 2, [r4], {4}
    2e0c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2e10:	00000020 	andeq	r0, r0, r0, lsr #32
    2e14:	00002d94 	muleq	r0, r4, sp
    2e18:	00024f94 	muleq	r2, r4, pc	; <UNPREDICTABLE>
    2e1c:	00000094 	muleq	r0, r4, r0
    2e20:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2e24:	8b038504 	blhi	e423c <mailbuffer+0xa914c>
    2e28:	42018e02 	andmi	r8, r1, #2, 28
    2e2c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2e30:	100d0c44 	andne	r0, sp, r4, asr #24
    2e34:	00000020 	andeq	r0, r0, r0, lsr #32
    2e38:	00002d94 	muleq	r0, r4, sp
    2e3c:	00025028 	andeq	r5, r2, r8, lsr #32
    2e40:	000000e8 	andeq	r0, r0, r8, ror #1
    2e44:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2e48:	8b038504 	blhi	e4260 <mailbuffer+0xa9170>
    2e4c:	42018e02 	andmi	r8, r1, #2, 28
    2e50:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2e54:	100d0c6e 	andne	r0, sp, lr, ror #24
    2e58:	00000020 	andeq	r0, r0, r0, lsr #32
    2e5c:	00002d94 	muleq	r0, r4, sp
    2e60:	00025110 	andeq	r5, r2, r0, lsl r1
    2e64:	0000009c 	muleq	r0, ip, r0
    2e68:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2e6c:	8b038504 	blhi	e4284 <mailbuffer+0xa9194>
    2e70:	42018e02 	andmi	r8, r1, #2, 28
    2e74:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2e78:	100d0c48 	andne	r0, sp, r8, asr #24
    2e7c:	00000020 	andeq	r0, r0, r0, lsr #32
    2e80:	00002d94 	muleq	r0, r4, sp
    2e84:	000251ac 	andeq	r5, r2, ip, lsr #3
    2e88:	00000144 	andeq	r0, r0, r4, asr #2
    2e8c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2e90:	8e028b03 	vmlahi.f64	d8, d2, d3
    2e94:	0b0c4201 	bleq	3136a0 <mailbuffer+0x2d85b0>
    2e98:	0c9c0204 	lfmeq	f0, 4, [ip], {4}
    2e9c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2ea0:	00000020 	andeq	r0, r0, r0, lsr #32
    2ea4:	00002d94 	muleq	r0, r4, sp
    2ea8:	000252f0 	strdeq	r5, [r2], -r0
    2eac:	0000008c 	andeq	r0, r0, ip, lsl #1
    2eb0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2eb4:	8b038504 	blhi	e42cc <mailbuffer+0xa91dc>
    2eb8:	42018e02 	andmi	r8, r1, #2, 28
    2ebc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2ec0:	100d0c40 	andne	r0, sp, r0, asr #24
    2ec4:	00000020 	andeq	r0, r0, r0, lsr #32
    2ec8:	00002d94 	muleq	r0, r4, sp
    2ecc:	0002537c 	andeq	r5, r2, ip, ror r3
    2ed0:	000000dc 	ldrdeq	r0, [r0], -ip
    2ed4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2ed8:	8b038504 	blhi	e42f0 <mailbuffer+0xa9200>
    2edc:	42018e02 	andmi	r8, r1, #2, 28
    2ee0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2ee4:	100d0c68 	andne	r0, sp, r8, ror #24
    2ee8:	00000034 	andeq	r0, r0, r4, lsr r0
    2eec:	00002d94 	muleq	r0, r4, sp
    2ef0:	00025458 	andeq	r5, r2, r8, asr r4
    2ef4:	0000008c 	andeq	r0, r0, ip, lsl #1
    2ef8:	810c0e42 	tsthi	ip, r2, asr #28
    2efc:	83028203 	movwhi	r8, #8707	; 0x2203
    2f00:	180e4201 	stmdane	lr, {r0, r9, lr}
    2f04:	058b0684 	streq	r0, [fp, #1668]	; 0x684
    2f08:	0c42048e 	cfstrdeq	mvd0, [r2], {142}	; 0x8e
    2f0c:	0c7a100b 	ldcleq	0, cr1, [sl], #-44	; 0xffffffd4
    2f10:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
    2f14:	0c0ec4cb 	cfstrseq	mvf12, [lr], {203}	; 0xcb
    2f18:	c1c2c342 	bicgt	ip, r2, r2, asr #6
    2f1c:	0000000e 	andeq	r0, r0, lr
    2f20:	00000020 	andeq	r0, r0, r0, lsr #32
    2f24:	00002d94 	muleq	r0, r4, sp
    2f28:	000254e4 	andeq	r5, r2, r4, ror #9
    2f2c:	0000073c 	andeq	r0, r0, ip, lsr r7
    2f30:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2f34:	8e028b03 	vmlahi.f64	d8, d2, d3
    2f38:	0b0c4201 	bleq	313744 <mailbuffer+0x2d8654>
    2f3c:	03980304 	orrseq	r0, r8, #4, 6	; 0x10000000
    2f40:	000c0d0c 	andeq	r0, ip, ip, lsl #26
    2f44:	00000020 	andeq	r0, r0, r0, lsr #32
    2f48:	00002d94 	muleq	r0, r4, sp
    2f4c:	00025c20 	andeq	r5, r2, r0, lsr #24
    2f50:	000000b4 	strheq	r0, [r0], -r4
    2f54:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2f58:	8e028b03 	vmlahi.f64	d8, d2, d3
    2f5c:	0b0c4201 	bleq	313768 <mailbuffer+0x2d8678>
    2f60:	0c540204 	lfmeq	f0, 2, [r4], {4}
    2f64:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2f68:	00000020 	andeq	r0, r0, r0, lsr #32
    2f6c:	00002d94 	muleq	r0, r4, sp
    2f70:	00025cd4 	ldrdeq	r5, [r2], -r4
    2f74:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2f78:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    2f7c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2f80:	0b0c4201 	bleq	31378c <mailbuffer+0x2d869c>
    2f84:	0c520204 	lfmeq	f0, 2, [r2], {4}
    2f88:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2f8c:	00000020 	andeq	r0, r0, r0, lsr #32
    2f90:	00002d94 	muleq	r0, r4, sp
    2f94:	00025d84 	andeq	r5, r2, r4, lsl #27
    2f98:	00000154 	andeq	r0, r0, r4, asr r1
    2f9c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2fa0:	8b038504 	blhi	e43b8 <mailbuffer+0xa92c8>
    2fa4:	42018e02 	andmi	r8, r1, #2, 28
    2fa8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2fac:	100d0ca4 	andne	r0, sp, r4, lsr #25
    2fb0:	00000020 	andeq	r0, r0, r0, lsr #32
    2fb4:	00002d94 	muleq	r0, r4, sp
    2fb8:	00025ed8 	ldrdeq	r5, [r2], -r8
    2fbc:	00000174 	andeq	r0, r0, r4, ror r1
    2fc0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2fc4:	8b038504 	blhi	e43dc <mailbuffer+0xa92ec>
    2fc8:	42018e02 	andmi	r8, r1, #2, 28
    2fcc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    2fd0:	100d0cb4 			; <UNDEFINED> instruction: 0x100d0cb4
    2fd4:	0000000c 	andeq	r0, r0, ip
    2fd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2fdc:	7c020001 	stcvc	0, cr0, [r2], {1}
    2fe0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2fe4:	00000020 	andeq	r0, r0, r0, lsr #32
    2fe8:	00002fd4 	ldrdeq	r2, [r0], -r4
    2fec:	0002604c 	andeq	r6, r2, ip, asr #32
    2ff0:	00000090 	muleq	r0, r0, r0
    2ff4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2ff8:	8b038504 	blhi	e4410 <mailbuffer+0xa9320>
    2ffc:	42018e02 	andmi	r8, r1, #2, 28
    3000:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3004:	100d0c42 	andne	r0, sp, r2, asr #24
    3008:	00000020 	andeq	r0, r0, r0, lsr #32
    300c:	00002fd4 	ldrdeq	r2, [r0], -r4
    3010:	000260dc 	ldrdeq	r6, [r2], -ip
    3014:	000000a0 	andeq	r0, r0, r0, lsr #1
    3018:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    301c:	8b038504 	blhi	e4434 <mailbuffer+0xa9344>
    3020:	42018e02 	andmi	r8, r1, #2, 28
    3024:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3028:	100d0c4a 	andne	r0, sp, sl, asr #24
    302c:	00000020 	andeq	r0, r0, r0, lsr #32
    3030:	00002fd4 	ldrdeq	r2, [r0], -r4
    3034:	0002617c 	andeq	r6, r2, ip, ror r1
    3038:	000000d8 	ldrdeq	r0, [r0], -r8
    303c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3040:	8b038504 	blhi	e4458 <mailbuffer+0xa9368>
    3044:	42018e02 	andmi	r8, r1, #2, 28
    3048:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    304c:	100d0c66 	andne	r0, sp, r6, ror #24
    3050:	00000020 	andeq	r0, r0, r0, lsr #32
    3054:	00002fd4 	ldrdeq	r2, [r0], -r4
    3058:	00026254 	andeq	r6, r2, r4, asr r2
    305c:	00000080 	andeq	r0, r0, r0, lsl #1
    3060:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3064:	8b038504 	blhi	e447c <mailbuffer+0xa938c>
    3068:	42018e02 	andmi	r8, r1, #2, 28
    306c:	7a040b0c 	bvc	105ca4 <mailbuffer+0xcabb4>
    3070:	00100d0c 	andseq	r0, r0, ip, lsl #26
    3074:	00000020 	andeq	r0, r0, r0, lsr #32
    3078:	00002fd4 	ldrdeq	r2, [r0], -r4
    307c:	000262d4 	ldrdeq	r6, [r2], -r4
    3080:	00000130 	andeq	r0, r0, r0, lsr r1
    3084:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3088:	8b038504 	blhi	e44a0 <mailbuffer+0xa93b0>
    308c:	42018e02 	andmi	r8, r1, #2, 28
    3090:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3094:	100d0c92 	mulne	sp, r2, ip
    3098:	00000020 	andeq	r0, r0, r0, lsr #32
    309c:	00002fd4 	ldrdeq	r2, [r0], -r4
    30a0:	00026404 	andeq	r6, r2, r4, lsl #8
    30a4:	0000009c 	muleq	r0, ip, r0
    30a8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    30ac:	8b038504 	blhi	e44c4 <mailbuffer+0xa93d4>
    30b0:	42018e02 	andmi	r8, r1, #2, 28
    30b4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    30b8:	100d0c48 	andne	r0, sp, r8, asr #24
    30bc:	00000020 	andeq	r0, r0, r0, lsr #32
    30c0:	00002fd4 	ldrdeq	r2, [r0], -r4
    30c4:	000264a0 	andeq	r6, r2, r0, lsr #9
    30c8:	000000c8 	andeq	r0, r0, r8, asr #1
    30cc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    30d0:	8b038504 	blhi	e44e8 <mailbuffer+0xa93f8>
    30d4:	42018e02 	andmi	r8, r1, #2, 28
    30d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    30dc:	100d0c5e 	andne	r0, sp, lr, asr ip
    30e0:	00000020 	andeq	r0, r0, r0, lsr #32
    30e4:	00002fd4 	ldrdeq	r2, [r0], -r4
    30e8:	00026568 	andeq	r6, r2, r8, ror #10
    30ec:	000000bc 	strheq	r0, [r0], -ip
    30f0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    30f4:	8b038504 	blhi	e450c <mailbuffer+0xa941c>
    30f8:	42018e02 	andmi	r8, r1, #2, 28
    30fc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3100:	100d0c58 	andne	r0, sp, r8, asr ip
    3104:	00000020 	andeq	r0, r0, r0, lsr #32
    3108:	00002fd4 	ldrdeq	r2, [r0], -r4
    310c:	00026624 	andeq	r6, r2, r4, lsr #12
    3110:	00000078 	andeq	r0, r0, r8, ror r0
    3114:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3118:	8b038504 	blhi	e4530 <mailbuffer+0xa9440>
    311c:	42018e02 	andmi	r8, r1, #2, 28
    3120:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    3124:	00100d0c 	andseq	r0, r0, ip, lsl #26
    3128:	00000020 	andeq	r0, r0, r0, lsr #32
    312c:	00002fd4 	ldrdeq	r2, [r0], -r4
    3130:	0002669c 	muleq	r2, ip, r6
    3134:	00000078 	andeq	r0, r0, r8, ror r0
    3138:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    313c:	8b038504 	blhi	e4554 <mailbuffer+0xa9464>
    3140:	42018e02 	andmi	r8, r1, #2, 28
    3144:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    3148:	00100d0c 	andseq	r0, r0, ip, lsl #26
    314c:	00000020 	andeq	r0, r0, r0, lsr #32
    3150:	00002fd4 	ldrdeq	r2, [r0], -r4
    3154:	00026714 	andeq	r6, r2, r4, lsl r7
    3158:	00000080 	andeq	r0, r0, r0, lsl #1
    315c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3160:	8b038504 	blhi	e4578 <mailbuffer+0xa9488>
    3164:	42018e02 	andmi	r8, r1, #2, 28
    3168:	7a040b0c 	bvc	105da0 <mailbuffer+0xcacb0>
    316c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    3170:	0000000c 	andeq	r0, r0, ip
    3174:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3178:	7c020001 	stcvc	0, cr0, [r2], {1}
    317c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3180:	00000020 	andeq	r0, r0, r0, lsr #32
    3184:	00003170 	andeq	r3, r0, r0, ror r1
    3188:	00026794 	muleq	r2, r4, r7
    318c:	000000cc 	andeq	r0, r0, ip, asr #1
    3190:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3194:	8e028b03 	vmlahi.f64	d8, d2, d3
    3198:	0b0c4201 	bleq	3139a4 <mailbuffer+0x2d88b4>
    319c:	0c600204 	sfmeq	f0, 2, [r0], #-16
    31a0:	00000c0d 	andeq	r0, r0, sp, lsl #24
    31a4:	00000020 	andeq	r0, r0, r0, lsr #32
    31a8:	00003170 	andeq	r3, r0, r0, ror r1
    31ac:	00026860 	andeq	r6, r2, r0, ror #16
    31b0:	000000ec 	andeq	r0, r0, ip, ror #1
    31b4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    31b8:	8e028b03 	vmlahi.f64	d8, d2, d3
    31bc:	0b0c4201 	bleq	3139c8 <mailbuffer+0x2d88d8>
    31c0:	0c700204 	lfmeq	f0, 2, [r0], #-16
    31c4:	00000c0d 	andeq	r0, r0, sp, lsl #24
    31c8:	00000024 	andeq	r0, r0, r4, lsr #32
    31cc:	00003170 	andeq	r3, r0, r0, ror r1
    31d0:	0002694c 	andeq	r6, r2, ip, asr #18
    31d4:	00000734 	andeq	r0, r0, r4, lsr r7
    31d8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    31dc:	8b038504 	blhi	e45f4 <mailbuffer+0xa9504>
    31e0:	42018e02 	andmi	r8, r1, #2, 28
    31e4:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    31e8:	0d0c0394 	stceq	3, cr0, [ip, #-592]	; 0xfffffdb0
    31ec:	00000010 	andeq	r0, r0, r0, lsl r0
    31f0:	00000020 	andeq	r0, r0, r0, lsr #32
    31f4:	00003170 	andeq	r3, r0, r0, ror r1
    31f8:	00027080 	andeq	r7, r2, r0, lsl #1
    31fc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3200:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3204:	8b038504 	blhi	e461c <mailbuffer+0xa952c>
    3208:	42018e02 	andmi	r8, r1, #2, 28
    320c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3210:	100d0c72 	andne	r0, sp, r2, ror ip
    3214:	00000020 	andeq	r0, r0, r0, lsr #32
    3218:	00003170 	andeq	r3, r0, r0, ror r1
    321c:	00027170 	andeq	r7, r2, r0, ror r1
    3220:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3224:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3228:	8b038504 	blhi	e4640 <mailbuffer+0xa9550>
    322c:	42018e02 	andmi	r8, r1, #2, 28
    3230:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3234:	100d0c72 	andne	r0, sp, r2, ror ip
    3238:	00000024 	andeq	r0, r0, r4, lsr #32
    323c:	00003170 	andeq	r3, r0, r0, ror r1
    3240:	00027260 	andeq	r7, r2, r0, ror #4
    3244:	00000090 	muleq	r0, r0, r0
    3248:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    324c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    3250:	8e028b03 	vmlahi.f64	d8, d2, d3
    3254:	0b0c4201 	bleq	313a60 <mailbuffer+0x2d8970>
    3258:	0c420204 	sfmeq	f0, 2, [r2], {4}
    325c:	0000140d 	andeq	r1, r0, sp, lsl #8
    3260:	00000020 	andeq	r0, r0, r0, lsr #32
    3264:	00003170 	andeq	r3, r0, r0, ror r1
    3268:	000272f0 	strdeq	r7, [r2], -r0
    326c:	00000078 	andeq	r0, r0, r8, ror r0
    3270:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3274:	8b038504 	blhi	e468c <mailbuffer+0xa959c>
    3278:	42018e02 	andmi	r8, r1, #2, 28
    327c:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
    3280:	00100d0c 	andseq	r0, r0, ip, lsl #26
    3284:	00000024 	andeq	r0, r0, r4, lsr #32
    3288:	00003170 	andeq	r3, r0, r0, ror r1
    328c:	00027368 	andeq	r7, r2, r8, ror #6
    3290:	000001c0 	andeq	r0, r0, r0, asr #3
    3294:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    3298:	86048505 	strhi	r8, [r4], -r5, lsl #10
    329c:	8e028b03 	vmlahi.f64	d8, d2, d3
    32a0:	0b0c4201 	bleq	313aac <mailbuffer+0x2d89bc>
    32a4:	0cda0204 	lfmeq	f0, 2, [sl], {4}
    32a8:	0000140d 	andeq	r1, r0, sp, lsl #8
    32ac:	00000024 	andeq	r0, r0, r4, lsr #32
    32b0:	00003170 	andeq	r3, r0, r0, ror r1
    32b4:	00027528 	andeq	r7, r2, r8, lsr #10
    32b8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    32bc:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    32c0:	86048505 	strhi	r8, [r4], -r5, lsl #10
    32c4:	8e028b03 	vmlahi.f64	d8, d2, d3
    32c8:	0b0c4201 	bleq	313ad4 <mailbuffer+0x2d89e4>
    32cc:	0cd80204 	lfmeq	f0, 2, [r8], {4}
    32d0:	0000140d 	andeq	r1, r0, sp, lsl #8
    32d4:	00000024 	andeq	r0, r0, r4, lsr #32
    32d8:	00003170 	andeq	r3, r0, r0, ror r1
    32dc:	000276e4 	andeq	r7, r2, r4, ror #13
    32e0:	00000394 	muleq	r0, r4, r3
    32e4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    32e8:	8b038504 	blhi	e4700 <mailbuffer+0xa9610>
    32ec:	42018e02 	andmi	r8, r1, #2, 28
    32f0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    32f4:	0d0c01c4 	stfeqs	f0, [ip, #-784]	; 0xfffffcf0
    32f8:	00000010 	andeq	r0, r0, r0, lsl r0
    32fc:	00000024 	andeq	r0, r0, r4, lsr #32
    3300:	00003170 	andeq	r3, r0, r0, ror r1
    3304:	00027a78 	andeq	r7, r2, r8, ror sl
    3308:	00000218 	andeq	r0, r0, r8, lsl r2
    330c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3310:	8b038504 	blhi	e4728 <mailbuffer+0xa9638>
    3314:	42018e02 	andmi	r8, r1, #2, 28
    3318:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    331c:	0d0c0106 	stfeqs	f0, [ip, #-24]	; 0xffffffe8
    3320:	00000010 	andeq	r0, r0, r0, lsl r0
    3324:	0000000c 	andeq	r0, r0, ip
    3328:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    332c:	7c020001 	stcvc	0, cr0, [r2], {1}
    3330:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3334:	00000020 	andeq	r0, r0, r0, lsr #32
    3338:	00003324 	andeq	r3, r0, r4, lsr #6
    333c:	00027c90 	muleq	r2, r0, ip
    3340:	000000dc 	ldrdeq	r0, [r0], -ip
    3344:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3348:	8e028b03 	vmlahi.f64	d8, d2, d3
    334c:	0b0c4201 	bleq	313b58 <mailbuffer+0x2d8a68>
    3350:	0c680204 	sfmeq	f0, 2, [r8], #-16
    3354:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3358:	00000020 	andeq	r0, r0, r0, lsr #32
    335c:	00003324 	andeq	r3, r0, r4, lsr #6
    3360:	00027d6c 	andeq	r7, r2, ip, ror #26
    3364:	0000007c 	andeq	r0, r0, ip, ror r0
    3368:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    336c:	8e028b03 	vmlahi.f64	d8, d2, d3
    3370:	0b0c4201 	bleq	313b7c <mailbuffer+0x2d8a8c>
    3374:	0d0c7804 	stceq	8, cr7, [ip, #-16]
    3378:	0000000c 	andeq	r0, r0, ip
    337c:	00000020 	andeq	r0, r0, r0, lsr #32
    3380:	00003324 	andeq	r3, r0, r4, lsr #6
    3384:	00027de8 	andeq	r7, r2, r8, ror #27
    3388:	0000007c 	andeq	r0, r0, ip, ror r0
    338c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3390:	8e028b03 	vmlahi.f64	d8, d2, d3
    3394:	0b0c4201 	bleq	313ba0 <mailbuffer+0x2d8ab0>
    3398:	0d0c7804 	stceq	8, cr7, [ip, #-16]
    339c:	0000000c 	andeq	r0, r0, ip
    33a0:	00000020 	andeq	r0, r0, r0, lsr #32
    33a4:	00003324 	andeq	r3, r0, r4, lsr #6
    33a8:	00027e64 	andeq	r7, r2, r4, ror #28
    33ac:	00000108 	andeq	r0, r0, r8, lsl #2
    33b0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    33b4:	8b038504 	blhi	e47cc <mailbuffer+0xa96dc>
    33b8:	42018e02 	andmi	r8, r1, #2, 28
    33bc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    33c0:	100d0c7e 	andne	r0, sp, lr, ror ip
    33c4:	00000020 	andeq	r0, r0, r0, lsr #32
    33c8:	00003324 	andeq	r3, r0, r4, lsr #6
    33cc:	00027f6c 	andeq	r7, r2, ip, ror #30
    33d0:	000001e4 	andeq	r0, r0, r4, ror #3
    33d4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    33d8:	8e028b03 	vmlahi.f64	d8, d2, d3
    33dc:	0b0c4201 	bleq	313be8 <mailbuffer+0x2d8af8>
    33e0:	0cec0204 	sfmeq	f0, 2, [ip], #16
    33e4:	00000c0d 	andeq	r0, r0, sp, lsl #24
    33e8:	00000020 	andeq	r0, r0, r0, lsr #32
    33ec:	00003324 	andeq	r3, r0, r4, lsr #6
    33f0:	00028150 	andeq	r8, r2, r0, asr r1
    33f4:	00000044 	andeq	r0, r0, r4, asr #32
    33f8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    33fc:	8e028b03 	vmlahi.f64	d8, d2, d3
    3400:	0b0c4201 	bleq	313c0c <mailbuffer+0x2d8b1c>
    3404:	0d0c5c04 	stceq	12, cr5, [ip, #-16]
    3408:	0000000c 	andeq	r0, r0, ip
    340c:	00000020 	andeq	r0, r0, r0, lsr #32
    3410:	00003324 	andeq	r3, r0, r4, lsr #6
    3414:	00028194 	muleq	r2, r4, r1
    3418:	00000050 	andeq	r0, r0, r0, asr r0
    341c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3420:	8b038504 	blhi	e4838 <mailbuffer+0xa9748>
    3424:	42018e02 	andmi	r8, r1, #2, 28
    3428:	62040b0c 	andvs	r0, r4, #12, 22	; 0x3000
    342c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    3430:	0000000c 	andeq	r0, r0, ip
    3434:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3438:	7c020001 	stcvc	0, cr0, [r2], {1}
    343c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3440:	00000020 	andeq	r0, r0, r0, lsr #32
    3444:	00003430 	andeq	r3, r0, r0, lsr r4
    3448:	000281e4 	andeq	r8, r2, r4, ror #3
    344c:	000000e8 	andeq	r0, r0, r8, ror #1
    3450:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3454:	8e028b03 	vmlahi.f64	d8, d2, d3
    3458:	0b0c4201 	bleq	313c64 <mailbuffer+0x2d8b74>
    345c:	0c6e0204 	sfmeq	f0, 2, [lr], #-16
    3460:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3464:	00000020 	andeq	r0, r0, r0, lsr #32
    3468:	00003430 	andeq	r3, r0, r0, lsr r4
    346c:	000282cc 	andeq	r8, r2, ip, asr #5
    3470:	0000007c 	andeq	r0, r0, ip, ror r0
    3474:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3478:	8e028b03 	vmlahi.f64	d8, d2, d3
    347c:	0b0c4201 	bleq	313c88 <mailbuffer+0x2d8b98>
    3480:	0d0c7804 	stceq	8, cr7, [ip, #-16]
    3484:	0000000c 	andeq	r0, r0, ip
    3488:	00000020 	andeq	r0, r0, r0, lsr #32
    348c:	00003430 	andeq	r3, r0, r0, lsr r4
    3490:	00028348 	andeq	r8, r2, r8, asr #6
    3494:	00000088 	andeq	r0, r0, r8, lsl #1
    3498:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    349c:	8e028b03 	vmlahi.f64	d8, d2, d3
    34a0:	0b0c4201 	bleq	313cac <mailbuffer+0x2d8bbc>
    34a4:	0d0c7e04 	stceq	14, cr7, [ip, #-16]
    34a8:	0000000c 	andeq	r0, r0, ip
    34ac:	00000020 	andeq	r0, r0, r0, lsr #32
    34b0:	00003430 	andeq	r3, r0, r0, lsr r4
    34b4:	000283d0 	ldrdeq	r8, [r2], -r0
    34b8:	00000148 	andeq	r0, r0, r8, asr #2
    34bc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    34c0:	8b038504 	blhi	e48d8 <mailbuffer+0xa97e8>
    34c4:	42018e02 	andmi	r8, r1, #2, 28
    34c8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    34cc:	100d0c9e 	mulne	sp, lr, ip
    34d0:	00000020 	andeq	r0, r0, r0, lsr #32
    34d4:	00003430 	andeq	r3, r0, r0, lsr r4
    34d8:	00028518 	andeq	r8, r2, r8, lsl r5
    34dc:	000001c0 	andeq	r0, r0, r0, asr #3
    34e0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    34e4:	8e028b03 	vmlahi.f64	d8, d2, d3
    34e8:	0b0c4201 	bleq	313cf4 <mailbuffer+0x2d8c04>
    34ec:	0cda0204 	lfmeq	f0, 2, [sl], {4}
    34f0:	00000c0d 	andeq	r0, r0, sp, lsl #24
    34f4:	00000020 	andeq	r0, r0, r0, lsr #32
    34f8:	00003430 	andeq	r3, r0, r0, lsr r4
    34fc:	000286d8 	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
    3500:	0000010c 	andeq	r0, r0, ip, lsl #2
    3504:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3508:	8e028b03 	vmlahi.f64	d8, d2, d3
    350c:	0b0c4201 	bleq	313d18 <mailbuffer+0x2d8c28>
    3510:	0c800204 	sfmeq	f0, 4, [r0], {4}
    3514:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3518:	00000020 	andeq	r0, r0, r0, lsr #32
    351c:	00003430 	andeq	r3, r0, r0, lsr r4
    3520:	000287e4 	andeq	r8, r2, r4, ror #15
    3524:	00000098 	muleq	r0, r8, r0
    3528:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    352c:	8b038504 	blhi	e4944 <mailbuffer+0xa9854>
    3530:	42018e02 	andmi	r8, r1, #2, 28
    3534:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3538:	100d0c46 	andne	r0, sp, r6, asr #24
    353c:	0000000c 	andeq	r0, r0, ip
    3540:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3544:	7c020001 	stcvc	0, cr0, [r2], {1}
    3548:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    354c:	00000020 	andeq	r0, r0, r0, lsr #32
    3550:	0000353c 	andeq	r3, r0, ip, lsr r5
    3554:	0002887c 	andeq	r8, r2, ip, ror r8
    3558:	000000a4 	andeq	r0, r0, r4, lsr #1
    355c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3560:	8e028b03 	vmlahi.f64	d8, d2, d3
    3564:	0b0c4201 	bleq	313d70 <mailbuffer+0x2d8c80>
    3568:	0c4c0204 	sfmeq	f0, 2, [ip], {4}
    356c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3570:	00000020 	andeq	r0, r0, r0, lsr #32
    3574:	0000353c 	andeq	r3, r0, ip, lsr r5
    3578:	00028920 	andeq	r8, r2, r0, lsr #18
    357c:	00000044 	andeq	r0, r0, r4, asr #32
    3580:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3584:	8e028b03 	vmlahi.f64	d8, d2, d3
    3588:	0b0c4201 	bleq	313d94 <mailbuffer+0x2d8ca4>
    358c:	0d0c5c04 	stceq	12, cr5, [ip, #-16]
    3590:	0000000c 	andeq	r0, r0, ip
    3594:	00000020 	andeq	r0, r0, r0, lsr #32
    3598:	0000353c 	andeq	r3, r0, ip, lsr r5
    359c:	00028964 	andeq	r8, r2, r4, ror #18
    35a0:	000000d8 	ldrdeq	r0, [r0], -r8
    35a4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    35a8:	8b038504 	blhi	e49c0 <mailbuffer+0xa98d0>
    35ac:	42018e02 	andmi	r8, r1, #2, 28
    35b0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    35b4:	100d0c66 	andne	r0, sp, r6, ror #24
    35b8:	00000020 	andeq	r0, r0, r0, lsr #32
    35bc:	0000353c 	andeq	r3, r0, ip, lsr r5
    35c0:	00028a3c 	andeq	r8, r2, ip, lsr sl
    35c4:	000000f8 	strdeq	r0, [r0], -r8
    35c8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    35cc:	8b038504 	blhi	e49e4 <mailbuffer+0xa98f4>
    35d0:	42018e02 	andmi	r8, r1, #2, 28
    35d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    35d8:	100d0c76 	andne	r0, sp, r6, ror ip
    35dc:	00000024 	andeq	r0, r0, r4, lsr #32
    35e0:	0000353c 	andeq	r3, r0, ip, lsr r5
    35e4:	00028b34 	andeq	r8, r2, r4, lsr fp
    35e8:	00000280 	andeq	r0, r0, r0, lsl #5
    35ec:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    35f0:	8b038504 	blhi	e4a08 <mailbuffer+0xa9918>
    35f4:	42018e02 	andmi	r8, r1, #2, 28
    35f8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    35fc:	0d0c013a 	stfeqs	f0, [ip, #-232]	; 0xffffff18
    3600:	00000010 	andeq	r0, r0, r0, lsl r0
    3604:	00000020 	andeq	r0, r0, r0, lsr #32
    3608:	0000353c 	andeq	r3, r0, ip, lsr r5
    360c:	00028db4 			; <UNDEFINED> instruction: 0x00028db4
    3610:	000001d4 	ldrdeq	r0, [r0], -r4
    3614:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3618:	8b038504 	blhi	e4a30 <mailbuffer+0xa9940>
    361c:	42018e02 	andmi	r8, r1, #2, 28
    3620:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3624:	100d0ce4 	andne	r0, sp, r4, ror #25
    3628:	00000020 	andeq	r0, r0, r0, lsr #32
    362c:	0000353c 	andeq	r3, r0, ip, lsr r5
    3630:	00028f88 	andeq	r8, r2, r8, lsl #31
    3634:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3638:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    363c:	8b038504 	blhi	e4a54 <mailbuffer+0xa9964>
    3640:	42018e02 	andmi	r8, r1, #2, 28
    3644:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3648:	100d0c62 	andne	r0, sp, r2, ror #24
    364c:	0000000c 	andeq	r0, r0, ip
    3650:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3654:	7c020001 	stcvc	0, cr0, [r2], {1}
    3658:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    365c:	00000020 	andeq	r0, r0, r0, lsr #32
    3660:	0000364c 	andeq	r3, r0, ip, asr #12
    3664:	00029058 	andeq	r9, r2, r8, asr r0
    3668:	00000148 	andeq	r0, r0, r8, asr #2
    366c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3670:	8e028b03 	vmlahi.f64	d8, d2, d3
    3674:	0b0c4201 	bleq	313e80 <mailbuffer+0x2d8d90>
    3678:	0c9e0204 	lfmeq	f0, 4, [lr], {4}
    367c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3680:	00000020 	andeq	r0, r0, r0, lsr #32
    3684:	0000364c 	andeq	r3, r0, ip, asr #12
    3688:	000291a0 	andeq	r9, r2, r0, lsr #3
    368c:	000000ec 	andeq	r0, r0, ip, ror #1
    3690:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3694:	8e028b03 	vmlahi.f64	d8, d2, d3
    3698:	0b0c4201 	bleq	313ea4 <mailbuffer+0x2d8db4>
    369c:	0c700204 	lfmeq	f0, 2, [r0], #-16
    36a0:	00000c0d 	andeq	r0, r0, sp, lsl #24
    36a4:	00000024 	andeq	r0, r0, r4, lsr #32
    36a8:	0000364c 	andeq	r3, r0, ip, asr #12
    36ac:	0002928c 	andeq	r9, r2, ip, lsl #5
    36b0:	00000428 	andeq	r0, r0, r8, lsr #8
    36b4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    36b8:	8b038504 	blhi	e4ad0 <mailbuffer+0xa99e0>
    36bc:	42018e02 	andmi	r8, r1, #2, 28
    36c0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    36c4:	0d0c020e 	sfmeq	f0, 4, [ip, #-56]	; 0xffffffc8
    36c8:	00000010 	andeq	r0, r0, r0, lsl r0
    36cc:	00000020 	andeq	r0, r0, r0, lsr #32
    36d0:	0000364c 	andeq	r3, r0, ip, asr #12
    36d4:	000296b4 			; <UNDEFINED> instruction: 0x000296b4
    36d8:	0000009c 	muleq	r0, ip, r0
    36dc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    36e0:	8e028b03 	vmlahi.f64	d8, d2, d3
    36e4:	0b0c4201 	bleq	313ef0 <mailbuffer+0x2d8e00>
    36e8:	0c480204 	sfmeq	f0, 2, [r8], {4}
    36ec:	00000c0d 	andeq	r0, r0, sp, lsl #24
    36f0:	00000020 	andeq	r0, r0, r0, lsr #32
    36f4:	0000364c 	andeq	r3, r0, ip, asr #12
    36f8:	00029750 	andeq	r9, r2, r0, asr r7
    36fc:	0000009c 	muleq	r0, ip, r0
    3700:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3704:	8e028b03 	vmlahi.f64	d8, d2, d3
    3708:	0b0c4201 	bleq	313f14 <mailbuffer+0x2d8e24>
    370c:	0c480204 	sfmeq	f0, 2, [r8], {4}
    3710:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3714:	00000020 	andeq	r0, r0, r0, lsr #32
    3718:	0000364c 	andeq	r3, r0, ip, asr #12
    371c:	000297ec 	andeq	r9, r2, ip, ror #15
    3720:	0000009c 	muleq	r0, ip, r0
    3724:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3728:	8e028b03 	vmlahi.f64	d8, d2, d3
    372c:	0b0c4201 	bleq	313f38 <mailbuffer+0x2d8e48>
    3730:	0c480204 	sfmeq	f0, 2, [r8], {4}
    3734:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3738:	00000020 	andeq	r0, r0, r0, lsr #32
    373c:	0000364c 	andeq	r3, r0, ip, asr #12
    3740:	00029888 	andeq	r9, r2, r8, lsl #17
    3744:	0000009c 	muleq	r0, ip, r0
    3748:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    374c:	8e028b03 	vmlahi.f64	d8, d2, d3
    3750:	0b0c4201 	bleq	313f5c <mailbuffer+0x2d8e6c>
    3754:	0c480204 	sfmeq	f0, 2, [r8], {4}
    3758:	00000c0d 	andeq	r0, r0, sp, lsl #24
    375c:	00000020 	andeq	r0, r0, r0, lsr #32
    3760:	0000364c 	andeq	r3, r0, ip, asr #12
    3764:	00029924 	andeq	r9, r2, r4, lsr #18
    3768:	000001cc 	andeq	r0, r0, ip, asr #3
    376c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3770:	8e028b03 	vmlahi.f64	d8, d2, d3
    3774:	0b0c4201 	bleq	313f80 <mailbuffer+0x2d8e90>
    3778:	0ce00204 	sfmeq	f0, 2, [r0], #16
    377c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3780:	00000020 	andeq	r0, r0, r0, lsr #32
    3784:	0000364c 	andeq	r3, r0, ip, asr #12
    3788:	00029af0 	strdeq	r9, [r2], -r0
    378c:	00000198 	muleq	r0, r8, r1
    3790:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3794:	8b038504 	blhi	e4bac <mailbuffer+0xa9abc>
    3798:	42018e02 	andmi	r8, r1, #2, 28
    379c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    37a0:	100d0cc6 	andne	r0, sp, r6, asr #25
    37a4:	00000020 	andeq	r0, r0, r0, lsr #32
    37a8:	0000364c 	andeq	r3, r0, ip, asr #12
    37ac:	00029c88 	andeq	r9, r2, r8, lsl #25
    37b0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    37b4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    37b8:	8b038504 	blhi	e4bd0 <mailbuffer+0xa9ae0>
    37bc:	42018e02 	andmi	r8, r1, #2, 28
    37c0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    37c4:	100d0cf2 	strdne	r0, [sp], -r2
    37c8:	00000020 	andeq	r0, r0, r0, lsr #32
    37cc:	0000364c 	andeq	r3, r0, ip, asr #12
    37d0:	00029e78 	andeq	r9, r2, r8, ror lr
    37d4:	0000007c 	andeq	r0, r0, ip, ror r0
    37d8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    37dc:	8b038504 	blhi	e4bf4 <mailbuffer+0xa9b04>
    37e0:	42018e02 	andmi	r8, r1, #2, 28
    37e4:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
    37e8:	00100d0c 	andseq	r0, r0, ip, lsl #26
    37ec:	00000020 	andeq	r0, r0, r0, lsr #32
    37f0:	0000364c 	andeq	r3, r0, ip, asr #12
    37f4:	00029ef4 	strdeq	r9, [r2], -r4
    37f8:	000000c4 	andeq	r0, r0, r4, asr #1
    37fc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3800:	8b038504 	blhi	e4c18 <mailbuffer+0xa9b28>
    3804:	42018e02 	andmi	r8, r1, #2, 28
    3808:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    380c:	100d0c5c 	andne	r0, sp, ip, asr ip
    3810:	0000000c 	andeq	r0, r0, ip
    3814:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3818:	7c020001 	stcvc	0, cr0, [r2], {1}
    381c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3820:	00000020 	andeq	r0, r0, r0, lsr #32
    3824:	00003810 	andeq	r3, r0, r0, lsl r8
    3828:	00029fb8 			; <UNDEFINED> instruction: 0x00029fb8
    382c:	000000ac 	andeq	r0, r0, ip, lsr #1
    3830:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3834:	8e028b03 	vmlahi.f64	d8, d2, d3
    3838:	0b0c4201 	bleq	314044 <mailbuffer+0x2d8f54>
    383c:	0c500204 	lfmeq	f0, 2, [r0], {4}
    3840:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3844:	00000020 	andeq	r0, r0, r0, lsr #32
    3848:	00003810 	andeq	r3, r0, r0, lsl r8
    384c:	0002a064 	andeq	sl, r2, r4, rrx
    3850:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3854:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3858:	8e028b03 	vmlahi.f64	d8, d2, d3
    385c:	0b0c4201 	bleq	314068 <mailbuffer+0x2d8f78>
    3860:	0c520204 	lfmeq	f0, 2, [r2], {4}
    3864:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3868:	00000024 	andeq	r0, r0, r4, lsr #32
    386c:	00003810 	andeq	r3, r0, r0, lsl r8
    3870:	0002a114 	andeq	sl, r2, r4, lsl r1
    3874:	000003c8 	andeq	r0, r0, r8, asr #7
    3878:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    387c:	8b038504 	blhi	e4c94 <mailbuffer+0xa9ba4>
    3880:	42018e02 	andmi	r8, r1, #2, 28
    3884:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    3888:	0d0c01de 	stfeqs	f0, [ip, #-888]	; 0xfffffc88
    388c:	00000010 	andeq	r0, r0, r0, lsl r0
    3890:	0000000c 	andeq	r0, r0, ip
    3894:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3898:	7c020001 	stcvc	0, cr0, [r2], {1}
    389c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    38a0:	00000020 	andeq	r0, r0, r0, lsr #32
    38a4:	00003890 	muleq	r0, r0, r8
    38a8:	0002a4dc 	ldrdeq	sl, [r2], -ip
    38ac:	000000fc 	strdeq	r0, [r0], -ip
    38b0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    38b4:	8e028b03 	vmlahi.f64	d8, d2, d3
    38b8:	0b0c4201 	bleq	3140c4 <mailbuffer+0x2d8fd4>
    38bc:	0c780204 	lfmeq	f0, 2, [r8], #-16
    38c0:	00000c0d 	andeq	r0, r0, sp, lsl #24
    38c4:	00000020 	andeq	r0, r0, r0, lsr #32
    38c8:	00003890 	muleq	r0, r0, r8
    38cc:	0002a5d8 	ldrdeq	sl, [r2], -r8
    38d0:	000000dc 	ldrdeq	r0, [r0], -ip
    38d4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    38d8:	8e028b03 	vmlahi.f64	d8, d2, d3
    38dc:	0b0c4201 	bleq	3140e8 <mailbuffer+0x2d8ff8>
    38e0:	0c680204 	sfmeq	f0, 2, [r8], #-16
    38e4:	00000c0d 	andeq	r0, r0, sp, lsl #24
    38e8:	00000024 	andeq	r0, r0, r4, lsr #32
    38ec:	00003890 	muleq	r0, r0, r8
    38f0:	0002a6b4 			; <UNDEFINED> instruction: 0x0002a6b4
    38f4:	00000428 	andeq	r0, r0, r8, lsr #8
    38f8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    38fc:	8b038504 	blhi	e4d14 <mailbuffer+0xa9c24>
    3900:	42018e02 	andmi	r8, r1, #2, 28
    3904:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    3908:	0d0c020e 	sfmeq	f0, 4, [ip, #-56]	; 0xffffffc8
    390c:	00000010 	andeq	r0, r0, r0, lsl r0
    3910:	00000020 	andeq	r0, r0, r0, lsr #32
    3914:	00003890 	muleq	r0, r0, r8
    3918:	0002aadc 	ldrdeq	sl, [r2], -ip
    391c:	0000009c 	muleq	r0, ip, r0
    3920:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3924:	8e028b03 	vmlahi.f64	d8, d2, d3
    3928:	0b0c4201 	bleq	314134 <mailbuffer+0x2d9044>
    392c:	0c480204 	sfmeq	f0, 2, [r8], {4}
    3930:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3934:	00000020 	andeq	r0, r0, r0, lsr #32
    3938:	00003890 	muleq	r0, r0, r8
    393c:	0002ab78 	andeq	sl, r2, r8, ror fp
    3940:	00000198 	muleq	r0, r8, r1
    3944:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3948:	8b038504 	blhi	e4d60 <mailbuffer+0xa9c70>
    394c:	42018e02 	andmi	r8, r1, #2, 28
    3950:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3954:	100d0cc6 	andne	r0, sp, r6, asr #25
    3958:	00000024 	andeq	r0, r0, r4, lsr #32
    395c:	00003890 	muleq	r0, r0, r8
    3960:	0002ad10 	andeq	sl, r2, r0, lsl sp
    3964:	000001cc 	andeq	r0, r0, ip, asr #3
    3968:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    396c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    3970:	8b038704 	blhi	e5588 <mailbuffer+0xaa498>
    3974:	42018e02 	andmi	r8, r1, #2, 28
    3978:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    397c:	180d0ce0 	stmdane	sp, {r5, r6, r7, sl, fp}
    3980:	0000000c 	andeq	r0, r0, ip
    3984:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3988:	7c020001 	stcvc	0, cr0, [r2], {1}
    398c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3990:	00000020 	andeq	r0, r0, r0, lsr #32
    3994:	00003980 	andeq	r3, r0, r0, lsl #19
    3998:	0002aedc 	ldrdeq	sl, [r2], -ip
    399c:	000000ec 	andeq	r0, r0, ip, ror #1
    39a0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    39a4:	8e028b03 	vmlahi.f64	d8, d2, d3
    39a8:	0b0c4201 	bleq	3141b4 <mailbuffer+0x2d90c4>
    39ac:	0c700204 	lfmeq	f0, 2, [r0], #-16
    39b0:	00000c0d 	andeq	r0, r0, sp, lsl #24
    39b4:	00000020 	andeq	r0, r0, r0, lsr #32
    39b8:	00003980 	andeq	r3, r0, r0, lsl #19
    39bc:	0002afc8 	andeq	sl, r2, r8, asr #31
    39c0:	00000044 	andeq	r0, r0, r4, asr #32
    39c4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    39c8:	8e028b03 	vmlahi.f64	d8, d2, d3
    39cc:	0b0c4201 	bleq	3141d8 <mailbuffer+0x2d90e8>
    39d0:	0d0c5c04 	stceq	12, cr5, [ip, #-16]
    39d4:	0000000c 	andeq	r0, r0, ip
    39d8:	00000020 	andeq	r0, r0, r0, lsr #32
    39dc:	00003980 	andeq	r3, r0, r0, lsl #19
    39e0:	0002b00c 	andeq	fp, r2, ip
    39e4:	0000005c 	andeq	r0, r0, ip, asr r0
    39e8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    39ec:	8e028b03 	vmlahi.f64	d8, d2, d3
    39f0:	0b0c4201 	bleq	3141fc <mailbuffer+0x2d910c>
    39f4:	0d0c6804 	stceq	8, cr6, [ip, #-16]
    39f8:	0000000c 	andeq	r0, r0, ip
    39fc:	00000020 	andeq	r0, r0, r0, lsr #32
    3a00:	00003980 	andeq	r3, r0, r0, lsl #19
    3a04:	0002b068 	andeq	fp, r2, r8, rrx
    3a08:	00000068 	andeq	r0, r0, r8, rrx
    3a0c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3a10:	8b038504 	blhi	e4e28 <mailbuffer+0xa9d38>
    3a14:	42018e02 	andmi	r8, r1, #2, 28
    3a18:	6e040b0c 	vmlavs.f64	d0, d4, d12
    3a1c:	00100d0c 	andseq	r0, r0, ip, lsl #26
    3a20:	00000020 	andeq	r0, r0, r0, lsr #32
    3a24:	00003980 	andeq	r3, r0, r0, lsl #19
    3a28:	0002b0d0 	ldrdeq	fp, [r2], -r0
    3a2c:	00000060 	andeq	r0, r0, r0, rrx
    3a30:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3a34:	8e028b03 	vmlahi.f64	d8, d2, d3
    3a38:	0b0c4201 	bleq	314244 <mailbuffer+0x2d9154>
    3a3c:	0d0c6a04 	vstreq	s12, [ip, #-16]
    3a40:	0000000c 	andeq	r0, r0, ip
    3a44:	00000020 	andeq	r0, r0, r0, lsr #32
    3a48:	00003980 	andeq	r3, r0, r0, lsl #19
    3a4c:	0002b130 	andeq	fp, r2, r0, lsr r1
    3a50:	000000e8 	andeq	r0, r0, r8, ror #1
    3a54:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3a58:	8e028b03 	vmlahi.f64	d8, d2, d3
    3a5c:	0b0c4201 	bleq	314268 <mailbuffer+0x2d9178>
    3a60:	0c6e0204 	sfmeq	f0, 2, [lr], #-16
    3a64:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3a68:	00000020 	andeq	r0, r0, r0, lsr #32
    3a6c:	00003980 	andeq	r3, r0, r0, lsl #19
    3a70:	0002b218 	andeq	fp, r2, r8, lsl r2
    3a74:	00000098 	muleq	r0, r8, r0
    3a78:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3a7c:	8b038504 	blhi	e4e94 <mailbuffer+0xa9da4>
    3a80:	42018e02 	andmi	r8, r1, #2, 28
    3a84:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3a88:	100d0c46 	andne	r0, sp, r6, asr #24
    3a8c:	0000000c 	andeq	r0, r0, ip
    3a90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3a94:	7c020001 	stcvc	0, cr0, [r2], {1}
    3a98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3a9c:	00000020 	andeq	r0, r0, r0, lsr #32
    3aa0:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3aa4:	0002b2b0 			; <UNDEFINED> instruction: 0x0002b2b0
    3aa8:	0000020c 	andeq	r0, r0, ip, lsl #4
    3aac:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3ab0:	8e028b03 	vmlahi.f64	d8, d2, d3
    3ab4:	0b0c4201 	bleq	3142c0 <mailbuffer+0x2d91d0>
    3ab8:	01000304 	tsteq	r0, r4, lsl #6
    3abc:	000c0d0c 	andeq	r0, ip, ip, lsl #26
    3ac0:	00000020 	andeq	r0, r0, r0, lsr #32
    3ac4:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3ac8:	0002b4bc 			; <UNDEFINED> instruction: 0x0002b4bc
    3acc:	00000144 	andeq	r0, r0, r4, asr #2
    3ad0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3ad4:	8e028b03 	vmlahi.f64	d8, d2, d3
    3ad8:	0b0c4201 	bleq	3142e4 <mailbuffer+0x2d91f4>
    3adc:	0c9c0204 	lfmeq	f0, 4, [ip], {4}
    3ae0:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3ae4:	00000024 	andeq	r0, r0, r4, lsr #32
    3ae8:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3aec:	0002b600 	andeq	fp, r2, r0, lsl #12
    3af0:	00000284 	andeq	r0, r0, r4, lsl #5
    3af4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3af8:	8b038504 	blhi	e4f10 <mailbuffer+0xa9e20>
    3afc:	42018e02 	andmi	r8, r1, #2, 28
    3b00:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    3b04:	0d0c013c 	stfeqs	f0, [ip, #-240]	; 0xffffff10
    3b08:	00000010 	andeq	r0, r0, r0, lsl r0
    3b0c:	00000020 	andeq	r0, r0, r0, lsr #32
    3b10:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3b14:	0002b884 	andeq	fp, r2, r4, lsl #17
    3b18:	000000b4 	strheq	r0, [r0], -r4
    3b1c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3b20:	8b038504 	blhi	e4f38 <mailbuffer+0xa9e48>
    3b24:	42018e02 	andmi	r8, r1, #2, 28
    3b28:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3b2c:	100d0c54 	andne	r0, sp, r4, asr ip
    3b30:	00000024 	andeq	r0, r0, r4, lsr #32
    3b34:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3b38:	0002b938 	andeq	fp, r2, r8, lsr r9
    3b3c:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
    3b40:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3b44:	8b038504 	blhi	e4f5c <mailbuffer+0xa9e6c>
    3b48:	42018e02 	andmi	r8, r1, #2, 28
    3b4c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    3b50:	0d0c0358 	stceq	3, cr0, [ip, #-352]	; 0xfffffea0
    3b54:	00000010 	andeq	r0, r0, r0, lsl r0
    3b58:	00000024 	andeq	r0, r0, r4, lsr #32
    3b5c:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3b60:	0002bff4 	strdeq	fp, [r2], -r4
    3b64:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3b68:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3b6c:	8b038504 	blhi	e4f84 <mailbuffer+0xa9e94>
    3b70:	42018e02 	andmi	r8, r1, #2, 28
    3b74:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    3b78:	0d0c02f2 	sfmeq	f0, 4, [ip, #-968]	; 0xfffffc38
    3b7c:	00000010 	andeq	r0, r0, r0, lsl r0
    3b80:	00000020 	andeq	r0, r0, r0, lsr #32
    3b84:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3b88:	0002c5e4 	andeq	ip, r2, r4, ror #11
    3b8c:	0000009c 	muleq	r0, ip, r0
    3b90:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3b94:	8e028b03 	vmlahi.f64	d8, d2, d3
    3b98:	0b0c4201 	bleq	3143a4 <mailbuffer+0x2d92b4>
    3b9c:	0c480204 	sfmeq	f0, 2, [r8], {4}
    3ba0:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3ba4:	00000020 	andeq	r0, r0, r0, lsr #32
    3ba8:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3bac:	0002c680 	andeq	ip, r2, r0, lsl #13
    3bb0:	000001a4 	andeq	r0, r0, r4, lsr #3
    3bb4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3bb8:	8b038504 	blhi	e4fd0 <mailbuffer+0xa9ee0>
    3bbc:	42018e02 	andmi	r8, r1, #2, 28
    3bc0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3bc4:	100d0ccc 	andne	r0, sp, ip, asr #25
    3bc8:	00000020 	andeq	r0, r0, r0, lsr #32
    3bcc:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3bd0:	0002c824 	andeq	ip, r2, r4, lsr #16
    3bd4:	00000174 	andeq	r0, r0, r4, ror r1
    3bd8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3bdc:	8e028b03 	vmlahi.f64	d8, d2, d3
    3be0:	0b0c4201 	bleq	3143ec <mailbuffer+0x2d92fc>
    3be4:	0cb40204 	lfmeq	f0, 4, [r4], #16
    3be8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3bec:	00000020 	andeq	r0, r0, r0, lsr #32
    3bf0:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3bf4:	0002c998 	muleq	r2, r8, r9
    3bf8:	000000bc 	strheq	r0, [r0], -ip
    3bfc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3c00:	8b038504 	blhi	e5018 <mailbuffer+0xa9f28>
    3c04:	42018e02 	andmi	r8, r1, #2, 28
    3c08:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3c0c:	100d0c58 	andne	r0, sp, r8, asr ip
    3c10:	00000020 	andeq	r0, r0, r0, lsr #32
    3c14:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3c18:	0002ca54 	andeq	ip, r2, r4, asr sl
    3c1c:	00000188 	andeq	r0, r0, r8, lsl #3
    3c20:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3c24:	8b038504 	blhi	e503c <mailbuffer+0xa9f4c>
    3c28:	42018e02 	andmi	r8, r1, #2, 28
    3c2c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3c30:	100d0cbe 			; <UNDEFINED> instruction: 0x100d0cbe
    3c34:	0000000c 	andeq	r0, r0, ip
    3c38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3c3c:	7c020001 	stcvc	0, cr0, [r2], {1}
    3c40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3c44:	00000020 	andeq	r0, r0, r0, lsr #32
    3c48:	00003c34 	andeq	r3, r0, r4, lsr ip
    3c4c:	0002cbdc 	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
    3c50:	0000009c 	muleq	r0, ip, r0
    3c54:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3c58:	8e028b03 	vmlahi.f64	d8, d2, d3
    3c5c:	0b0c4201 	bleq	314468 <mailbuffer+0x2d9378>
    3c60:	0c480204 	sfmeq	f0, 2, [r8], {4}
    3c64:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3c68:	0000001c 	andeq	r0, r0, ip, lsl r0
    3c6c:	00003c34 	andeq	r3, r0, r4, lsr ip
    3c70:	0002cc78 	andeq	ip, r2, r8, ror ip
    3c74:	000000a4 	andeq	r0, r0, r4, lsr #1
    3c78:	83100e42 	tsthi	r0, #1056	; 0x420
    3c7c:	8b038404 	blhi	e4c94 <mailbuffer+0xa9ba4>
    3c80:	42018e02 	andmi	r8, r1, #2, 28
    3c84:	00040b0c 	andeq	r0, r4, ip, lsl #22
    3c88:	00000020 	andeq	r0, r0, r0, lsr #32
    3c8c:	00003c34 	andeq	r3, r0, r4, lsr ip
    3c90:	0002cd1c 	andeq	ip, r2, ip, lsl sp
    3c94:	00000060 	andeq	r0, r0, r0, rrx
    3c98:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3c9c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    3ca0:	6c018e02 	stcvs	14, cr8, [r1], {2}
    3ca4:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    3ca8:	0000000e 	andeq	r0, r0, lr
    3cac:	0000000c 	andeq	r0, r0, ip
    3cb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3cb4:	7c020001 	stcvc	0, cr0, [r2], {1}
    3cb8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3cbc:	00000020 	andeq	r0, r0, r0, lsr #32
    3cc0:	00003cac 	andeq	r3, r0, ip, lsr #25
    3cc4:	0002cd7c 	andeq	ip, r2, ip, ror sp
    3cc8:	000000fc 	strdeq	r0, [r0], -ip
    3ccc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3cd0:	8e028b03 	vmlahi.f64	d8, d2, d3
    3cd4:	0b0c4201 	bleq	3144e0 <mailbuffer+0x2d93f0>
    3cd8:	0c780204 	lfmeq	f0, 2, [r8], #-16
    3cdc:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3ce0:	00000020 	andeq	r0, r0, r0, lsr #32
    3ce4:	00003cac 	andeq	r3, r0, ip, lsr #25
    3ce8:	0002ce78 	andeq	ip, r2, r8, ror lr
    3cec:	000001c4 	andeq	r0, r0, r4, asr #3
    3cf0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3cf4:	8b038504 	blhi	e510c <mailbuffer+0xaa01c>
    3cf8:	42018e02 	andmi	r8, r1, #2, 28
    3cfc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    3d00:	100d0cdc 	ldrdne	r0, [sp], -ip
    3d04:	00000020 	andeq	r0, r0, r0, lsr #32
    3d08:	00003cac 	andeq	r3, r0, ip, lsr #25
    3d0c:	0002d03c 	andeq	sp, r2, ip, lsr r0
    3d10:	000000f4 	strdeq	r0, [r0], -r4
    3d14:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    3d18:	8e028b03 	vmlahi.f64	d8, d2, d3
    3d1c:	0b0c4201 	bleq	314528 <mailbuffer+0x2d9438>
    3d20:	0c740204 	lfmeq	f0, 2, [r4], #-16
    3d24:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3d28:	0000002c 	andeq	r0, r0, ip, lsr #32
    3d2c:	00003cac 	andeq	r3, r0, ip, lsr #25
    3d30:	0002d130 	andeq	sp, r2, r0, lsr r1
    3d34:	0000056c 	andeq	r0, r0, ip, ror #10
    3d38:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    3d3c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    3d40:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    3d44:	8a048905 	bhi	126160 <mailbuffer+0xeb070>
    3d48:	8e028b03 	vmlahi.f64	d8, d2, d3
    3d4c:	0b0c4201 	bleq	314558 <mailbuffer+0x2d9468>
    3d50:	02b00304 	adcseq	r0, r0, #4, 6	; 0x10000000
    3d54:	00240d0c 	eoreq	r0, r4, ip, lsl #26
    3d58:	00000020 	andeq	r0, r0, r0, lsr #32
    3d5c:	00003cac 	andeq	r3, r0, ip, lsr #25
    3d60:	0002d69c 	muleq	r2, ip, r6
    3d64:	00000084 	andeq	r0, r0, r4, lsl #1
    3d68:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3d6c:	8b038504 	blhi	e5184 <mailbuffer+0xaa094>
    3d70:	42018e02 	andmi	r8, r1, #2, 28
    3d74:	7c040b0c 	stcvc	11, cr0, [r4], {12}
    3d78:	00100d0c 	andseq	r0, r0, ip, lsl #26
    3d7c:	00000024 	andeq	r0, r0, r4, lsr #32
    3d80:	00003cac 	andeq	r3, r0, ip, lsr #25
    3d84:	0002d720 	andeq	sp, r2, r0, lsr #14
    3d88:	00000378 	andeq	r0, r0, r8, ror r3
    3d8c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3d90:	8b038504 	blhi	e51a8 <mailbuffer+0xaa0b8>
    3d94:	42018e02 	andmi	r8, r1, #2, 28
    3d98:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    3d9c:	0d0c01b6 	stfeqs	f0, [ip, #-728]	; 0xfffffd28
    3da0:	00000010 	andeq	r0, r0, r0, lsl r0
    3da4:	0000000c 	andeq	r0, r0, ip
    3da8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3dac:	7c010001 	stcvc	0, cr0, [r1], {1}
    3db0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3db4:	0000000c 	andeq	r0, r0, ip
    3db8:	00003da4 	andeq	r3, r0, r4, lsr #27
    3dbc:	0002da98 	muleq	r2, r8, sl
    3dc0:	000000f4 	strdeq	r0, [r0], -r4

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000090 	muleq	r0, r0, r0
   4:	000002fc 	strdeq	r0, [r0], -ip
   8:	00000304 	andeq	r0, r0, r4, lsl #6
   c:	0000031c 	andeq	r0, r0, ip, lsl r3
	...
